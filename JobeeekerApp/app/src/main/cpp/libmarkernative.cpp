#include <stdint.h>
#

int64_t sub_15970()
{
    /* jump -> nullptr */
}

int64_t mmap(int64_t arg1, size_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    /* tailcall */
    return mmap(arg1, arg2, arg3, arg4, arg5);
}

int64_t std::__ndk1::__shared_weak_count::__get_deleter(std::type_info* arg1)
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__get_deleter(arg1);
}

int64_t std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::fpos<mbstate_t>* arg1, char* arg2, uint64_t arg3)
{
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg1, arg2, arg3);
}

int64_t cv::Mat::deallocate()
{
    /* tailcall */
    return cv::Mat::deallocate();
}

int64_t system(char* arg1)
{
    /* tailcall */
    return system(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__find_equal<PuduCamera::ErrorCode>(int64_t arg1, std::__ndk1::fpos<mbstate_t>** arg2, std::__ndk1::fpos<mbstate_t>** arg3, std::__ndk1::fpos<mbstate_t>* arg4)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__find_equal<PuduCamera::ErrorCode>(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::open(char* arg1, uint32_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::open(arg1, arg2);
}

int64_t PuduCamera::MarkerCamera::setParam(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::setParam(arg1);
}

int64_t PuduCamera::MarkerCamera::loadParamFile(std::__ndk1::fpos<mbstate_t>* arg1, bool arg2)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::loadParamFile(arg1, arg2);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::vector(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::vector(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(arg1);
}

int64_t __cxa_free_exception()
{
    /* tailcall */
    return __cxa_free_exception();
}

int64_t std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(std::__ndk1::fpos<mbstate_t>* arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(arg1, arg2);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xe]>(char (* arg1)[0xe])
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xe]>(arg1);
}

int64_t std::logic_error::logic_error(char* arg1)
{
    /* tailcall */
    return std::logic_error::logic_error(arg1);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string();
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(std::__ndk1::fpos<mbstate_t>** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg1);
}

int64_t pudutech::Ashdmem::destroyMemory()
{
    /* tailcall */
    return pudutech::Ashdmem::destroyMemory();
}

void* __cxa_begin_catch(void* exceptionObject)
{
    /* tailcall */
    return __cxa_begin_catch(exceptionObject);
}

int64_t select(int32_t arg1, struct fd_set* arg2, struct fd_set* arg3, struct fd_set* arg4, struct timeval* arg5)
{
    /* tailcall */
    return select(arg1, arg2, arg3, arg4, arg5);
}

int64_t nlohmann::detail::parse_error::parse_error(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::parse_error::parse_error(arg1);
}

int128_t strtod(char* arg1, char** arg2)
{
    /* tailcall */
    return strtod(arg1, arg2);
}

int64_t LogCapture::capturef()
{
    /* tailcall */
    return LogCapture::capturef();
}

int64_t std::bad_cast::bad_cast()
{
    /* tailcall */
    return std::bad_cast::bad_cast();
}

int32_t __cxa_atexit(void (* func)(void* retval), void* arg, void* dso_handle)
{
    /* tailcall */
    return __cxa_atexit(func, arg, dso_handle);
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::sync()
{
    /* tailcall */
    return std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::sync();
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(char arg1)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(arg1);
}

int64_t operator delete[](void* arg1)
{
    /* tailcall */
    return operator delete[](arg1);
}

int64_t memcmp()
{
    /* tailcall */
    return memcmp();
}

int64_t std::__ndk1::locale::has_facet(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::locale::has_facet(arg1);
}

int64_t operator new(uint64_t arg1)
{
    /* tailcall */
    return operator new(arg1);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(arg1, arg2);
}

int64_t std::__ndk1::__basic_string_common<true>::__throw_length_error()
{
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_length_error();
}

int64_t cv::cvarrToMat(void* arg1, bool arg2, bool arg3, int32_t arg4, std::__ndk1::fpos<mbstate_t>* arg5)
{
    /* tailcall */
    return cv::cvarrToMat(arg1, arg2, arg3, arg4, arg5);
}

int64_t _JNIEnv::CallObjectMethod()
{
    /* tailcall */
    return _JNIEnv::CallObjectMethod();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>(std::__ndk1::fpos<mbstate_t>*** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>(arg1);
}

int64_t fread(int64_t arg1, size_t arg2, size_t arg3, FILE* arg4)
{
    /* tailcall */
    return fread(arg1, arg2, arg3, arg4);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(std::__ndk1::fpos<mbstate_t>* arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg1, arg2);
}

int64_t std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(char* arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(arg1, arg2);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(arg1);
}

int64_t std::__ndk1::__shared_weak_count::__release_weak()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__release_weak();
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(bool arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(arg1, arg2);
}

int64_t malloc(size_t arg1)
{
    /* tailcall */
    return malloc(arg1);
}

int64_t nlohmann::detail::other_error::other_error(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::other_error::other_error(arg1);
}

int64_t fseek(FILE* arg1, int64_t arg2, int32_t arg3)
{
    /* tailcall */
    return fseek(arg1, arg2, arg3);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(int64_t arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__emplace_hint_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > const&>(int64_t arg1, std::__ndk1::fpos<mbstate_t>* arg2, std::__ndk1::fpos<mbstate_t>** arg3)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__emplace_hint_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > const&>(arg1, arg2, arg3);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(uint64_t arg1, char* arg2, uint64_t arg3)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(arg1, arg2, arg3);
}

void __stack_chk_fail() __noreturn
{
    /* tailcall */
    return __stack_chk_fail();
}

int64_t cvAlloc()
{
    /* tailcall */
    return cvAlloc();
}

int64_t fwrite(int64_t arg1, size_t arg2, size_t arg3, FILE* arg4)
{
    /* tailcall */
    return fwrite(arg1, arg2, arg3, arg4);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
}

int64_t PuduCamera::MarkerCamera::isOpenCamera()
{
    /* tailcall */
    return PuduCamera::MarkerCamera::isOpenCamera();
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(uint64_t arg1, char arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg1, arg2);
}

int64_t cv::imdecode(std::__ndk1::fpos<mbstate_t>* arg1, int32_t arg2, std::__ndk1::fpos<mbstate_t>* arg3)
{
    /* tailcall */
    return cv::imdecode(arg1, arg2, arg3);
}

int64_t std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(arg1);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(char const (** arg1)[0x1])
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(arg1);
}

int64_t std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str()
{
    /* tailcall */
    return std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(std::__ndk1::fpos<mbstate_t>** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg1);
}

int64_t readdir(DIR* arg1)
{
    /* tailcall */
    return readdir(arg1);
}

int64_t operator delete(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::locale::use_facet(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::locale::use_facet(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array()
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array();
}

int64_t PuduCamera::MarkerCamera::getLastError(int64_t arg1)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::getLastError(arg1);
}

int64_t nlohmann::detail::invalid_iterator::create(int32_t arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return nlohmann::detail::invalid_iterator::create(arg1, arg2);
}

int64_t PuduCamera::MarkerCamera::getCurImage(bool arg1)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::getCurImage(arg1);
}

int64_t std::runtime_error::what()
{
    /* tailcall */
    return std::runtime_error::what();
}

int64_t close(int32_t arg1)
{
    /* tailcall */
    return close(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush()
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
}

int64_t __FD_SET_chk()
{
    /* tailcall */
    return __FD_SET_chk();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<int64_t&>(int64_t** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<int64_t&>(arg1);
}

int64_t operator new[](uint64_t arg1)
{
    /* tailcall */
    return operator new[](arg1);
}

int64_t std::uncaught_exception()
{
    /* tailcall */
    return std::uncaught_exception();
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, 0>(int64_t arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, 0>(arg1);
}

int64_t LogCapture::LogCapture(char* arg1, LEVELS* arg2, char* arg3, int32_t arg4, char* arg5)
{
    /* tailcall */
    return LogCapture::LogCapture(arg1, arg2, arg3, arg4, arg5);
}

int64_t free(int64_t arg1)
{
    /* tailcall */
    return free(arg1);
}

int64_t pudutech::Ashdmem::createMemory(std::__ndk1::fpos<mbstate_t>* arg1, int32_t arg2)
{
    /* tailcall */
    return pudutech::Ashdmem::createMemory(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(uint64_t** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(arg1, arg2);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xd]>(char (* arg1)[0xd])
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xd]>(arg1);
}

int64_t cv::CvCaptureCAM_V4L::open(int32_t arg1, bool arg2)
{
    /* tailcall */
    return cv::CvCaptureCAM_V4L::open(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(int64_t** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_object(uint64_t arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_object(arg1);
}

int64_t __cxa_allocate_exception()
{
    /* tailcall */
    return __cxa_allocate_exception();
}

int64_t std::__ndk1::ios_base::getloc()
{
    /* tailcall */
    return std::__ndk1::ios_base::getloc();
}

int64_t cvInitImageHeader()
{
    /* tailcall */
    return cvInitImageHeader();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(arg1);
}

int64_t __errno()
{
    /* tailcall */
    return __errno();
}

int64_t __gxx_personality_v0()
{
    /* tailcall */
    return __gxx_personality_v0();
}

int64_t nlohmann::detail::out_of_range::out_of_range(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::out_of_range::out_of_range(arg1);
}

int64_t fflush(FILE* arg1)
{
    /* tailcall */
    return fflush(arg1);
}

int64_t _Unwind_Resume()
{
    /* tailcall */
    return _Unwind_Resume();
}

int64_t closedir(DIR* arg1)
{
    /* tailcall */
    return closedir(arg1);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string()
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string();
}

int64_t open()
{
    /* tailcall */
    return open();
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf()
{
    /* tailcall */
    return std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf()
{
    /* tailcall */
    return std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf();
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(arg1);
}

int64_t std::__ndk1::locale::locale(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::locale::locale(arg1);
}

int64_t PuduCamera::MarkerCamera::getValidId(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry()
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(uint64_t arg1, std::__ndk1::fpos<mbstate_t>* arg2, std::__ndk1::fpos<mbstate_t>* arg3)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg1, arg2, arg3);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(uint64_t** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(float arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

void __cxa_throw(void* thrown_exception, void* tinfo, void (* dest)(void* retval)) __noreturn
{
    /* tailcall */
    return __cxa_throw(thrown_exception, tinfo, dest);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::fpos<mbstate_t>** arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(uint32_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(std::__ndk1::fpos<mbstate_t>** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg1, arg2);
}

int64_t PuduCamera::MarkerCamera::openCamera(std::__ndk1::fpos<mbstate_t>* arg1, bool arg2)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::openCamera(arg1, arg2);
}

int64_t nlohmann::detail::exception::name(std::__ndk1::fpos<mbstate_t>* arg1, int32_t arg2)
{
    /* tailcall */
    return nlohmann::detail::exception::name(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg1);
}

int64_t memmove(int64_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return memmove(arg1, arg2, arg3);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object()
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object();
}

int64_t memset(int64_t arg1, int32_t arg2, size_t arg3)
{
    /* tailcall */
    return memset(arg1, arg2, arg3);
}

int64_t fseeko(FILE* arg1, off_t arg2, int32_t arg3)
{
    /* tailcall */
    return fseeko(arg1, arg2, arg3);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_number()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_number();
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf()
{
    /* tailcall */
    return std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf();
}

int64_t cv::Mat::convertTo(std::__ndk1::fpos<mbstate_t>* arg1, int32_t arg2, double arg3, double arg4)
{
    /* tailcall */
    return cv::Mat::convertTo(arg1, arg2, arg3, arg4);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(std::nullptr_t* arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(arg1);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(double** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(arg1);
}

int64_t __cxa_finalize(int64_t arg1)
{
    /* tailcall */
    return __cxa_finalize(arg1);
}

int64_t std::__ndk1::locale::locale()
{
    /* tailcall */
    return std::__ndk1::locale::locale();
}

int64_t nlohmann::detail::out_of_range::create(int32_t arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return nlohmann::detail::out_of_range::create(arg1, arg2);
}

int64_t std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(std::__ndk1::fpos<mbstate_t>* arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(arg1, arg2);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(bool arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t PuduCamera::MarkerCamera::getCameraParam()
{
    /* tailcall */
    return PuduCamera::MarkerCamera::getCameraParam();
}

int64_t _JNIEnv::NewObject()
{
    /* tailcall */
    return _JNIEnv::NewObject();
}

int64_t gettimeofday(struct timeval* arg1, int64_t arg2)
{
    /* tailcall */
    return gettimeofday(arg1, arg2);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset();
}

int64_t __cxa_end_catch()
{
    /* tailcall */
    return __cxa_end_catch();
}

int64_t ftello(FILE* arg1)
{
    /* tailcall */
    return ftello(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::fpos<mbstate_t>** arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2);
}

int64_t std::runtime_error::runtime_error(char* arg1)
{
    /* tailcall */
    return std::runtime_error::runtime_error(arg1);
}

int64_t LogCapture::~LogCapture()
{
    /* tailcall */
    return LogCapture::~LogCapture();
}

int64_t fclose(FILE* arg1)
{
    /* tailcall */
    return fclose(arg1);
}

int64_t strtoull(char* arg1, char** arg2, int32_t arg3)
{
    /* tailcall */
    return strtoull(arg1, arg2, arg3);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(arg1);
}

int64_t cv::cvtColor(std::__ndk1::fpos<mbstate_t>* arg1, std::__ndk1::fpos<mbstate_t>* arg2, int32_t arg3, int32_t arg4)
{
    /* tailcall */
    return cv::cvtColor(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(arg1, arg2);
}

int64_t ioctl()
{
    /* tailcall */
    return ioctl();
}

int64_t munmap()
{
    /* tailcall */
    return munmap();
}

int64_t snprintf()
{
    /* tailcall */
    return snprintf();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(double** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(arg1, arg2);
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(arg1);
}

int64_t strtoll(char* arg1, char** arg2, int32_t arg3)
{
    /* tailcall */
    return strtoll(arg1, arg2, arg3);
}

int64_t localeconv()
{
    /* tailcall */
    return localeconv();
}

int64_t std::__ndk1::locale::~locale()
{
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t PuduCamera::MarkerCamera::getLastReadingError()
{
    /* tailcall */
    return PuduCamera::MarkerCamera::getLastReadingError();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<bool&>(bool** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<bool&>(arg1);
}

int64_t usleep(useconds_t arg1)
{
    /* tailcall */
    return usleep(arg1);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::erase(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::erase(arg1);
}

int64_t std::runtime_error::runtime_error(char* arg1)
{
    /* tailcall */
    return std::runtime_error::runtime_error(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xc]>(char (* arg1)[0xc])
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xc]>(arg1);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<uint64_t&>(uint64_t** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<uint64_t&>(arg1);
}

int64_t cv::error(int32_t arg1, std::__ndk1::fpos<mbstate_t>* arg2, char* arg3, char* arg4, int32_t arg5)
{
    /* tailcall */
    return cv::error(arg1, arg2, arg3, arg4, arg5);
}

int64_t std::__ndk1::__basic_string_common<true>::__throw_out_of_range()
{
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::operator[]<char const>(char* arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::operator[]<char const>(arg1);
}

int64_t nlohmann::detail::parse_error::create(int32_t arg1, std::__ndk1::fpos<mbstate_t>* arg2, std::__ndk1::fpos<mbstate_t>* arg3)
{
    /* tailcall */
    return nlohmann::detail::parse_error::create(arg1, arg2, arg3);
}

int64_t PuduCamera::MarkerCamera::~MarkerCamera()
{
    /* tailcall */
    return PuduCamera::MarkerCamera::~MarkerCamera();
}

int64_t std::__ndk1::ios_base::init(void* arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::init(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::fpos<mbstate_t>** arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(uint64_t arg1, std::__ndk1::fpos<mbstate_t>* arg2, std::__ndk1::fpos<mbstate_t>* arg3)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg1, arg2, arg3);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(int64_t arg1, std::__ndk1::fpos<mbstate_t>** arg2, std::__ndk1::fpos<mbstate_t>** arg3, std::__ndk1::fpos<mbstate_t>* arg4)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int32_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(uint64_t arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(arg1);
}

int64_t g3::logLevel(int64_t arg1)
{
    /* tailcall */
    return g3::logLevel(arg1);
}

int64_t PuduCamera::MarkerCamera::readPhoto(bool arg1)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::readPhoto(arg1);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > > const&>(std::__ndk1::fpos<mbstate_t>** arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > > const&>(arg1);
}

int64_t std::exception::~exception()
{
    /* tailcall */
    return std::exception::~exception();
}

int64_t std::__ndk1::ios_base::clear(uint32_t arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::clear(arg1);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
}

int64_t PuduCamera::MarkerCamera::MarkerCamera()
{
    /* tailcall */
    return PuduCamera::MarkerCamera::MarkerCamera();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(int64_t** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(arg1, arg2);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<double&>(double** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<double&>(arg1);
}

int64_t std::__ndk1::__vector_base_common<true>::__throw_length_error()
{
    /* tailcall */
    return std::__ndk1::__vector_base_common<true>::__throw_length_error();
}

int64_t cv::Mat::updateContinuityFlag()
{
    /* tailcall */
    return cv::Mat::updateContinuityFlag();
}

int64_t std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(std::__ndk1::fpos<mbstate_t>* arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(arg1, arg2);
}

int64_t std::__ndk1::ios_base::__set_badbit_and_consider_rethrow()
{
    /* tailcall */
    return std::__ndk1::ios_base::__set_badbit_and_consider_rethrow();
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(int64_t arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, arg2);
}

int64_t pudutech::Ashdmem::create()
{
    /* tailcall */
    return pudutech::Ashdmem::create();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::nullptr_t>(std::nullptr_t* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::nullptr_t>(arg1);
}

int64_t fopen(char* arg1, char* arg2)
{
    /* tailcall */
    return fopen(arg1, arg2);
}

int64_t PuduCamera::MarkerCamera::setExposure(int32_t arg1)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(arg1);
}

int64_t std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(int64_t arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(arg1, arg2, arg3);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(std::__ndk1::fpos<mbstate_t>* arg1, int64_t arg2, bool arg3)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(arg1, arg2, arg3);
}

int64_t nlohmann::detail::invalid_iterator::invalid_iterator(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::invalid_iterator::invalid_iterator(arg1);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(std::__ndk1::fpos<mbstate_t>** arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg1);
}

int64_t nlohmann::detail::parse_error::position_string(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::parse_error::position_string(arg1);
}

int64_t memcpy(int64_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return memcpy(arg1, arg2, arg3);
}

int64_t nlohmann::detail::type_error::create(int32_t arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return nlohmann::detail::type_error::create(arg1, arg2);
}

int64_t std::runtime_error::~runtime_error()
{
    /* tailcall */
    return std::runtime_error::~runtime_error();
}

int64_t std::__ndk1::ios_base::~ios_base()
{
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xa]>(char (* arg1)[0xa])
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xa]>(arg1);
}

int64_t std::exception::what()
{
    /* tailcall */
    return std::exception::what();
}

int64_t cv::fastFree(void* arg1)
{
    /* tailcall */
    return cv::fastFree(arg1);
}

int64_t g3::logTag(int64_t arg1)
{
    /* tailcall */
    return g3::logTag(arg1);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>(std::__ndk1::fpos<mbstate_t>** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(std::nullptr_t* arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser()
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(arg1);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint();
}

int64_t nlohmann::operator>>(std::__ndk1::fpos<mbstate_t>* arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return nlohmann::operator>>(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(bool** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg1, arg2);
}

void __cxa_rethrow() __noreturn
{
    /* tailcall */
    return __cxa_rethrow();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__construct_node<std::__ndk1::pair<PuduCamera::ErrorCode const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > const&>(std::__ndk1::fpos<mbstate_t>** arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__construct_node<std::__ndk1::pair<PuduCamera::ErrorCode const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > const&>(arg1);
}

int64_t nlohmann::detail::type_error::type_error(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::type_error::type_error(arg1);
}

int64_t std::__ndk1::__shared_weak_count::~__shared_weak_count()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t strerror(int32_t arg1)
{
    /* tailcall */
    return strerror(arg1);
}

int64_t atoi(char* arg1)
{
    /* tailcall */
    return atoi(arg1);
}

int64_t strlen(char* arg1)
{
    /* tailcall */
    return strlen(arg1);
}

int64_t sprintf()
{
    /* tailcall */
    return sprintf();
}

int64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator->()
{
    /* tailcall */
    return nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator->();
}

int64_t std::runtime_error::runtime_error(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return std::runtime_error::runtime_error(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(std::__ndk1::fpos<mbstate_t>** arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::__init<std::__ndk1::istreambuf_iterator<char, std::__ndk1::char_traits<char> > >(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::__init<std::__ndk1::istreambuf_iterator<char, std::__ndk1::char_traits<char> > >(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(bool** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg1);
}

int64_t lrint(double arg1)
{
    /* tailcall */
    return lrint(arg1);
}

int32_t std::terminate() __noreturn
{
    /* tailcall */
    return std::terminate();
}

int64_t cv::CvCaptureCAM_V4L::open(char* arg1, bool arg2)
{
    /* tailcall */
    return cv::CvCaptureCAM_V4L::open(arg1, arg2);
}

int64_t opendir(char* arg1)
{
    /* tailcall */
    return opendir(arg1);
}

int64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(arg1);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg1);
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parser(std::__ndk1::fpos<mbstate_t>* arg1, int64_t arg2, bool arg3)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parser(arg1, arg2, arg3);
}

int64_t cvFree_()
{
    /* tailcall */
    return cvFree_();
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(std::__ndk1::fpos<mbstate_t>* arg1)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(arg1);
}

int64_t std::__ndk1::to_string(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::to_string(arg1);
}

int64_t nlohmann::detail::from_json<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, int32_t, 0>(std::__ndk1::fpos<mbstate_t>* arg1, int32_t* arg2)
{
    /* tailcall */
    return nlohmann::detail::from_json<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, int32_t, 0>(arg1, arg2);
}

int64_t std::__ndk1::to_string(int32_t arg1)
{
    /* tailcall */
    return std::__ndk1::to_string(arg1);
}

int64_t _start()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy = 1;
    }
}

int64_t sub_1685c()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<char const*>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<char const*>::policy = 1;
    }
}

int64_t sub_16878()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<int32_t>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<int32_t>::policy = 1;
    }
}

int64_t sub_16894()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<float>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<float>::policy = 1;
    }
}

int64_t sub_168b0()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<bool>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<bool>::policy = 1;
    }
}

int64_t sub_168cc()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy = 1;
    }
}

int64_t sub_168e8()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy = 1;
    }
}

int64_t sub_16904()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<uint32_t>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<uint32_t>::policy = 1;
    }
}

int64_t sub_16920()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::policy = 1;
    }
}

int64_t sub_1693c()
{
    data_571c0 = 0x64;
    data_571c8 = 0x4402;
    __builtin_memset(&data_571ca, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_571c0, &data_57000);
    data_571e0 = 0x32;
    data_571e8 = 0x5602;
    __builtin_memset(&data_571ea, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_571e0, &data_57000);
    data_57200 = 0x12c;
    data_57208 = 0x4902;
    __builtin_memset(&data_5720a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57200, &data_57000);
    data_57220 = 0x1f4;
    data_57228 = 0x5702;
    __builtin_memset(&data_5722a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57220, &data_57000);
    data_57240 = 0x320;
    data_57248 = 0x4502;
    __builtin_memset(&data_5724a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57240, &data_57000);
    data_57260 = 0x3e8;
    data_57268 = 0x4602;
    __builtin_memset(&data_5726a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57260, &data_57000);
    data_57280 = 0x7d0;
    data_57288 = 0x10;
    __builtin_strncpy(&data_57289, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_57280, &data_57000);
    data_572a0 = 0x7d1;
    data_572a8 = 0x18;
    __builtin_strncpy(&data_572a9, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_572a0, &data_57000);
    data_572c0 = 0x7d2;
    data_572c8 = 0x1e;
    __builtin_strncpy(&data_572c9, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_572c0, &data_57000);
    __builtin_memset(&data_572e0, 0, 0x18);
    data_572e0 = 0x10;
    __builtin_strncpy(&data_572e1, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_572e0, &data_57000);
    __builtin_memset(&data_572f8, 0, 0x18);
    data_572f8 = 0x18;
    __builtin_strncpy(&data_572f9, "%H:%M:%S %f3", 0xd);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_572f8, &data_57000);
    data_57318 = 0;
    data_57320 = 0;
    data_57310 = &data_57318;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jclass*> > >::~map, &data_57310, &data_57000);
    data_57330 = 0;
    data_57338 = 0;
    data_57328 = &data_57330;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jmethodID*> > >::~map, &data_57328, &data_57000);
    data_57348 = 0;
    data_57350 = 0;
    data_57340 = &data_57348;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::~map, &data_57340, &data_57000);
    __cxa_atexit(std::__ndk1::shared_ptr<pudutech::Ashdmem>::~shared_ptr, &data_57358, &data_57000);
    __cxa_atexit(std::__ndk1::shared_ptr<pudutech::Ashdmem>::~shared_ptr, &data_57368, &data_57000);
    void** x0_16 = operator new(0x78);
    x0_16[2] = 0;
    *x0_16 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<PuduCamera::MarkerCamera, std::__ndk1::allocator<PuduCamera::MarkerCamera> > + 0x10);
    x0_16[1] = 0;
    PuduCamera::MarkerCamera::MarkerCamera();
    data_57378 = &x0_16[3];
    data_57380 = x0_16;
    __cxa_atexit(std::__ndk1::shared_ptr<PuduCamera::MarkerCamera>::~shared_ptr, &data_57378, &data_57000);
    void** x0_19 = operator new(0x78);
    x0_19[1] = 0;
    x0_19[2] = 0;
    *x0_19 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<PuduCamera::MarkerCamera, std::__ndk1::allocator<PuduCamera::MarkerCamera> > + 0x10);
    PuduCamera::MarkerCamera::MarkerCamera();
    data_57388 = &x0_19[3];
    data_57390 = x0_19;
    /* tailcall */
    return __cxa_atexit(std::__ndk1::shared_ptr<PuduCamera::MarkerCamera>::~shared_ptr, &data_57388, &data_57000);
}

int64_t sub_16d14(int64_t arg1, void* arg2 @ x19)
{
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    operator delete(arg2);
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_16d34();
}

int64_t sub_16d34()
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    data_57400 = 0x64;
    data_57408 = 0x4402;
    __builtin_memset(&data_5740a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57400, &data_57000);
    data_57420 = 0x32;
    data_57428 = 0x5602;
    __builtin_memset(&data_5742a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57420, &data_57000);
    data_57440 = 0x12c;
    data_57448 = 0x4902;
    __builtin_memset(&data_5744a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57440, &data_57000);
    data_57460 = 0x1f4;
    data_57468 = 0x5702;
    __builtin_memset(&data_5746a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57460, &data_57000);
    data_57480 = 0x320;
    data_57488 = 0x4502;
    __builtin_memset(&data_5748a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57480, &data_57000);
    data_574a0 = 0x3e8;
    data_574a8 = 0x4602;
    __builtin_memset(&data_574aa, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_574a0, &data_57000);
    data_574c0 = 0x7d0;
    data_574c8 = 0x10;
    __builtin_strncpy(&data_574c9, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_574c0, &data_57000);
    data_574e0 = 0x7d1;
    data_574e8 = 0x18;
    __builtin_strncpy(&data_574e9, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_574e0, &data_57000);
    data_57500 = 0x7d2;
    data_57508 = 0x1e;
    __builtin_strncpy(&data_57509, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_57500, &data_57000);
    __builtin_memset(&data_57520, 0, 0x18);
    data_57520 = 0x10;
    __builtin_strncpy(&data_57521, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_57520, &data_57000);
    __builtin_memset(&data_57538, 0, 0x18);
    data_57538 = 0x18;
    __builtin_strncpy(&data_57539, "%H:%M:%S %f3", 0xd);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_57538, &data_57000);
    __builtin_memset(&data_57550, 0, 0x18);
    int64_t x0_11;
    int128_t v1;
    x0_11 = operator new(0x20);
    v1 = data_3c620;
    data_57560 = x0_11;
    __builtin_strncpy(x0_11, "/sys/class/video4linux/", 0x18);
    data_57550 = v1;
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_57550, &data_57000);
    data_57568 = 0x1c;
    __builtin_strncpy(&data_57569, "/device/input/", 0x17);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_57568, &data_57000);
    __builtin_memset(&data_57580, 0, 0x18);
    data_57580 = 0x16;
    __builtin_strcpy(&data_57581, "/id/product");
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_57580, &data_57000);
    __builtin_memset(&data_57598, 0, 0x18);
    data_57598 = 0x14;
    __builtin_strncpy(&data_57599, "/id/vendor", 0xb);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_57598, &data_57000);
    char var_140 = 0;
    int64_t var_138 = 0;
    var_140 = 0xe;
    char var_120 = 0;
    int64_t var_118 = 0;
    __builtin_strncpy(&*var_120[1], "fail", 4);
    __builtin_strncpy(&*var_140[1], "success", 8);
    int32_t var_128 = 1;
    int32_t var_148 = 0;
    void* var_130 = nullptr;
    var_120 = 8;
    void* var_110 = nullptr;
    var_120 = 0;
    int32_t var_108 = 2;
    char var_100 = 0;
    int64_t var_f8 = 0;
    void* var_f0 = nullptr;
    __builtin_strncpy(&var_100, "\"get valid id fail", 0x13);
    int32_t var_e8 = 3;
    char var_e0 = 0;
    int64_t var_d8 = 0;
    int64_t var_d0 = 0;
    void* x0_16;
    int128_t v0;
    x0_16 = operator new(0x20);
    var_e0 = v1;
    int32_t var_c8 = 4;
    char var_c0 = 0;
    int64_t var_b8 = 0;
    var_c0 = 0x26;
    __builtin_strncpy(x0_16, "miss camera.config file", 0x17);
    void* var_b0 = nullptr;
    __builtin_strcpy(&*var_c0[1], "v4l2 interval error");
    data_575b8 = 0;
    data_575b0 = &data_575b8;
    int32_t var_a8 = 5;
    char var_a0 = 0;
    int64_t var_98 = 0;
    var_a0 = 0x22;
    void* var_90 = nullptr;
    __builtin_strcpy(&*var_a0[1], "set exposure fail");
    int32_t var_88 = 6;
    char var_80 = 0;
    int64_t var_78 = 0;
    var_80 = 0x1a;
    int64_t i = 0;
    *(x0_16 + 0x17) = 0;
    void* var_70 = nullptr;
    data_575c0 = 0;
    __builtin_strncpy(&*var_80[1], "unknown error", 0xe);
    do
    {
        std::__ndk1::fpos<mbstate_t> var_170;
        int64_t var_168;
        int64_t* x0_17 = std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__find_equal<PuduCamera::ErrorCode>(&data_575b0, &data_575b8, &var_168, &var_170);
        if (*x0_17 == 0)
        {
            std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__construct_node<std::__ndk1::pair<PuduCamera::ErrorCode const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > const&>(&data_575b0);
            int64_t x8_2 = var_168;
            int64_t* var_160;
            int64_t* x1_2 = var_160;
            *x1_2 = 0;
            x1_2[1] = 0;
            x1_2[2] = x8_2;
            *x0_17 = x1_2;
            int64_t x8_4 = **&data_575b0;
            if (x8_4 != 0)
            {
                data_575b0 = x8_4;
                x1_2 = *x0_17;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_575b8, x1_2);
            data_575c0 = (data_575c0 + 1);
        }
        i = (i + 0x20);
    } while (i != 0xe0);
    if ((var_80 & 1) != 0)
    {
        operator delete(var_70);
        if ((var_a0 & 1) != 0)
        {
        label_173a4:
            operator delete(var_90);
            if ((var_c0 & 1) != 0)
            {
                goto label_173b4;
            }
            goto label_17320;
        }
    label_17318:
        if ((var_c0 & 1) != 0)
        {
        label_173b4:
            operator delete(var_b0);
            if ((var_e0 & 1) != 0)
            {
            label_173c4:
                operator delete(x0_16);
                if ((var_100 & 1) != 0)
                {
                    goto label_173d4;
                }
                goto label_17330;
            }
        label_17328:
            if ((var_100 & 1) != 0)
            {
            label_173d4:
                operator delete(var_f0);
                if ((var_120 & 1) != 0)
                {
                label_173e4:
                    operator delete(var_110);
                    if ((var_140 & 1) != 0)
                    {
                        goto label_17340;
                    }
                    goto label_1735c;
                }
                goto label_17338;
            }
        label_17330:
            if ((var_120 & 1) != 0)
            {
                goto label_173e4;
            }
        label_17338:
            if ((var_140 & 1) == 0)
            {
                goto label_1735c;
            }
        label_17340:
            operator delete(var_130);
        label_1735c:
            int64_t x0_21 = __cxa_atexit(std::__ndk1::map<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::less<PuduCamera::ErrorCode>, std::__ndk1::allocator<std::__ndk1::pair<PuduCamera::ErrorCode const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::~map, &data_575b0, &data_57000);
            if (*(x22 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return x0_21;
        }
    label_17320:
        if ((var_e0 & 1) != 0)
        {
            goto label_173c4;
        }
        goto label_17328;
    }
    if ((var_a0 & 1) != 0)
    {
        goto label_173a4;
    }
    goto label_17318;
}

int64_t sub_174c4()
{
    data_575c8 = 0x64;
    data_575d0 = 0x4402;
    __builtin_memset(&data_575d2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_575c8, &data_57000);
    data_575e8 = 0x32;
    data_575f0 = 0x5602;
    __builtin_memset(&data_575f2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_575e8, &data_57000);
    data_57608 = 0x12c;
    data_57610 = 0x4902;
    __builtin_memset(&data_57612, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57608, &data_57000);
    data_57628 = 0x1f4;
    data_57630 = 0x5702;
    __builtin_memset(&data_57632, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57628, &data_57000);
    data_57648 = 0x320;
    data_57650 = 0x4502;
    __builtin_memset(&data_57652, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57648, &data_57000);
    data_57668 = 0x3e8;
    data_57670 = 0x4602;
    __builtin_memset(&data_57672, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_57668, &data_57000);
    data_57688 = 0x7d0;
    data_57690 = 0x10;
    __builtin_strncpy(&data_57691, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_57688, &data_57000);
    data_576a8 = 0x7d1;
    data_576b0 = 0x18;
    __builtin_strncpy(&data_576b1, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_576a8, &data_57000);
    data_576c8 = 0x7d2;
    data_576d0 = 0x1e;
    __builtin_strncpy(&data_576d1, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_576c8, &data_57000);
    __builtin_memset(&data_576e8, 0, 0x18);
    data_576e8 = 0x10;
    __builtin_strncpy(&data_576e9, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_576e8, &data_57000);
    __builtin_memset(&data_57700, 0, 0x18);
    data_57700 = 0x18;
    __builtin_strncpy(&data_57701, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_57700, &data_57000);
}

int64_t sub_17768()
{
    /* tailcall */
    return __cxa_finalize(&data_57000);
}

int64_t sub_17774() __pure
{
    return;
}

int64_t j_sub_17774()
{
    /* tailcall */
    return sub_17774();
}

int64_t sub_17780(int64_t arg1)
{
    /* jump -> arg1 */
}

void std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string(char* arg1)
{
    if ((*arg1 & 1) != 0)
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x10));
    }
}

void LEVELS::~LEVELS(void* arg1)
{
    if ((*(arg1 + 8) & 1) != 0)
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x18));
    }
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jclass*> > >::~map(std::__ndk1::fpos<mbstate_t>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(arg1);
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jmethodID*> > >::~map(std::__ndk1::fpos<mbstate_t>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(arg1);
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::~map(std::__ndk1::fpos<mbstate_t>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(arg1);
}

void std::__ndk1::shared_ptr<pudutech::Ashdmem>::~shared_ptr(void* arg1)
{
    int64_t* x19 = *(arg1 + 8);
    if (x19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19[1]);
            i = __stlxr((x9_1 - 1), &x19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19 + 0x10)(x19);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
}

void std::__ndk1::shared_ptr<PuduCamera::MarkerCamera>::~shared_ptr(void* arg1)
{
    int64_t* x19 = *(arg1 + 8);
    if (x19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19[1]);
            i = __stlxr((x9_1 - 1), &x19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19 + 0x10)(x19);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
}

uint64_t JNI_OnLoad(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    int32_t x19 = 0x10006;  {  // {"ion_callE"}}
    if (*(*arg1 + 0x30)() != 0)
    {
        x19 = -1;
    }
    else
    {
        int64_t* var_a8;
        int64_t x0_3 = *(*var_a8 + 0x30)(var_a8, "com/pudutech/mirsdk/hardware/cam…");
        if ((x0_3 != 0 && (*(*var_a8 + 0x6b8)(var_a8, x0_3, &data_57050, 0xc) & 0x80000000) == 0))
        {
            *(*var_a8 + 0xb8)(var_a8, x0_3);
            int64_t x0_8 = *(*var_a8 + 0x30)(var_a8, "com/pudutech/mirsdk/hardware/ser…");
            *(*var_a8 + 0x108)(var_a8, x0_8, "<init>", &data_3be18);
            int64_t x0_12 = *(*var_a8 + 0x2f0)(var_a8, x0_8, "rows", &data_3bee9);
            int64_t s_1 = 0;
            int64_t var_80_1 = 0;
            s_1 = 0x16;
            void* var_78_1 = nullptr;
            __builtin_strcpy(&*s_1[1], "SImgContain");
            int64_t s;
            int64_t* x0_13 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
            int64_t* x24_1 = *x0_13;
            if (x24_1 == 0)
            {
                int64_t* x0_14;
                int128_t v0_1;
                x0_14 = operator new(0x50);
                v0_1 = s_1;
                x0_14[6] = var_78_1;
                int64_t s_7 = s;
                *(x0_14 + 0x20) = v0_1;
                x0_14[8] = 0;
                __builtin_memset(&s_1, 0, 0x18);
                x0_14[9] = 0;
                *x0_14 = 0;
                x0_14[1] = 0;
                x0_14[2] = s_7;
                x0_14[7] = &x0_14[8];
                *x0_13 = x0_14;
                x24_1 = x0_14;
                int64_t x9_5 = **&data_57340;
                int64_t* x1_6;
                if (x9_5 == 0)
                {
                    x1_6 = x24_1;
                }
                else
                {
                    data_57340 = x9_5;
                    x1_6 = *x0_13;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_6);
                data_57350 = (data_57350 + 1);
            }
            __builtin_memset(&s, 0, 0x18);
            s = 8;
            __builtin_strncpy(&*s[1], "rowf", 5);
            int64_t var_70;
            int64_t* x0_17 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x24_1[7], &var_70);
            int64_t* x26_1 = *x0_17;
            void* var_90;
            if (x26_1 == 0)
            {
                int64_t* x0_18;
                int128_t v0_2;
                x0_18 = operator new(0x40);
                v0_2 = s;
                int64_t x9_6 = var_70;
                __builtin_memset(&s, 0, 0x18);
                *x0_18 = 0;
                x0_18[1] = 0;
                *(x0_18 + 0x20) = v0_2;
                x0_18[6] = var_90;
                x0_18[7] = 0;
                x0_18[2] = x9_6;
                *x0_17 = x0_18;
                x26_1 = x0_18;
                int64_t x8_21 = *x24_1[7];
                int64_t* x1_8;
                if (x8_21 == 0)
                {
                    x1_8 = x26_1;
                }
                else
                {
                    x24_1[7] = x8_21;
                    x1_8 = *x0_17;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x24_1[8], x1_8);
                x24_1[9] = (x24_1[9] + 1);
            }
            x26_1[7] = x0_12;
            if ((s & 1) != 0)
            {
                operator delete(var_90);
            }
            if ((s_1 & 1) != 0)
            {
                operator delete(var_78_1);
            }
            int64_t x0_23 = *(*var_a8 + 0x2f0)(var_a8, x0_8, "cols", &data_3bee9);
            int64_t s_2;
            __builtin_memset(&s_2, 0, 0x18);
            s_2 = 0x16;
            __builtin_strcpy(&*s_2[1], "SImgContain");
            int64_t* x0_24 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
            int64_t* x24_2 = *x0_24;
            void* var_78_2;
            if (x24_2 == 0)
            {
                int64_t* x0_25;
                int128_t v0_3;
                x0_25 = operator new(0x50);
                v0_3 = s_2;
                x0_25[6] = var_78_2;
                int64_t s_8 = s;
                *(x0_25 + 0x20) = v0_3;
                x0_25[8] = 0;
                __builtin_memset(&s_2, 0, 0x18);
                x0_25[9] = 0;
                *x0_25 = 0;
                x0_25[1] = 0;
                x0_25[2] = s_8;
                x0_25[7] = &x0_25[8];
                *x0_24 = x0_25;
                x24_2 = x0_25;
                int64_t x9_10 = **&data_57340;
                int64_t* x1_11;
                if (x9_10 == 0)
                {
                    x1_11 = x24_2;
                }
                else
                {
                    data_57340 = x9_10;
                    x1_11 = *x0_24;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_11);
                data_57350 = (data_57350 + 1);
            }
            __builtin_memset(&s, 0, 0x18);
            s = 8;
            __builtin_strncpy(&*s[1], "colf", 5);
            int64_t* x0_28 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x24_2[7], &var_70);
            int64_t* x26_2 = *x0_28;
            void* var_90_1;
            if (x26_2 == 0)
            {
                int64_t* x0_29;
                int128_t v0_4;
                x0_29 = operator new(0x40);
                v0_4 = s;
                int64_t x9_11 = var_70;
                __builtin_memset(&s, 0, 0x18);
                *x0_29 = 0;
                x0_29[1] = 0;
                *(x0_29 + 0x20) = v0_4;
                x0_29[6] = var_90_1;
                x0_29[7] = 0;
                x0_29[2] = x9_11;
                *x0_28 = x0_29;
                x26_2 = x0_29;
                int64_t x8_33 = *x24_2[7];
                int64_t* x1_13;
                if (x8_33 == 0)
                {
                    x1_13 = x26_2;
                }
                else
                {
                    x24_2[7] = x8_33;
                    x1_13 = *x0_28;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x24_2[8], x1_13);
                x24_2[9] = (x24_2[9] + 1);
            }
            x26_2[7] = x0_23;
            if ((s & 1) != 0)
            {
                operator delete(var_90_1);
            }
            if ((s_2 & 1) != 0)
            {
                operator delete(var_78_2);
            }
            int64_t x0_34 = *(*var_a8 + 0x2f0)(var_a8, x0_8, "memorySize", &data_3bee9);
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            s_3 = 0x16;
            __builtin_strcpy(&*s_3[1], "SImgContain");
            int64_t* x0_35 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
            int64_t* x24_3 = *x0_35;
            void* var_78_3;
            if (x24_3 == 0)
            {
                int64_t* x0_36;
                int128_t v0_5;
                x0_36 = operator new(0x50);
                v0_5 = s_3;
                x0_36[6] = var_78_3;
                int64_t s_9 = s;
                *(x0_36 + 0x20) = v0_5;
                x0_36[8] = 0;
                __builtin_memset(&s_3, 0, 0x18);
                x0_36[9] = 0;
                *x0_36 = 0;
                x0_36[1] = 0;
                x0_36[2] = s_9;
                x0_36[7] = &x0_36[8];
                *x0_35 = x0_36;
                x24_3 = x0_36;
                int64_t x9_15 = **&data_57340;
                int64_t* x1_16;
                if (x9_15 == 0)
                {
                    x1_16 = x24_3;
                }
                else
                {
                    data_57340 = x9_15;
                    x1_16 = *x0_35;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_16);
                data_57350 = (data_57350 + 1);
            }
            __builtin_memset(&s, 0, 0x18);
            __builtin_strcpy(&s, "\nmemsf");
            int64_t* x0_39 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x24_3[7], &var_70);
            int64_t* x26_3 = *x0_39;
            void* var_90_2;
            if (x26_3 == 0)
            {
                int64_t* x0_40;
                int128_t v0_6;
                x0_40 = operator new(0x40);
                v0_6 = s;
                int64_t x9_16 = var_70;
                __builtin_memset(&s, 0, 0x18);
                *x0_40 = 0;
                x0_40[1] = 0;
                *(x0_40 + 0x20) = v0_6;
                x0_40[6] = var_90_2;
                x0_40[7] = 0;
                x0_40[2] = x9_16;
                *x0_39 = x0_40;
                x26_3 = x0_40;
                int64_t x8_45 = *x24_3[7];
                int64_t* x1_18;
                if (x8_45 == 0)
                {
                    x1_18 = x26_3;
                }
                else
                {
                    x24_3[7] = x8_45;
                    x1_18 = *x0_39;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x24_3[8], x1_18);
                x24_3[9] = (x24_3[9] + 1);
            }
            x26_3[7] = x0_34;
            if ((s & 1) != 0)
            {
                operator delete(var_90_2);
            }
            if ((s_3 & 1) != 0)
            {
                operator delete(var_78_3);
            }
            int64_t x0_45 = *(*var_a8 + 0x2f0)(var_a8, x0_8, "elementSize", &data_3bee9);
            int64_t s_4;
            __builtin_memset(&s_4, 0, 0x18);
            s_4 = 0x16;
            __builtin_strcpy(&*s_4[1], "SImgContain");
            int64_t* x0_46 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
            int64_t* x24_4 = *x0_46;
            void* var_78_4;
            if (x24_4 == 0)
            {
                int64_t* x0_47;
                int128_t v0_7;
                x0_47 = operator new(0x50);
                v0_7 = s_4;
                x0_47[6] = var_78_4;
                int64_t s_10 = s;
                *(x0_47 + 0x20) = v0_7;
                x0_47[8] = 0;
                __builtin_memset(&s_4, 0, 0x18);
                x0_47[9] = 0;
                *x0_47 = 0;
                x0_47[1] = 0;
                x0_47[2] = s_10;
                x0_47[7] = &x0_47[8];
                *x0_46 = x0_47;
                x24_4 = x0_47;
                int64_t x9_20 = **&data_57340;
                int64_t* x1_21;
                if (x9_20 == 0)
                {
                    x1_21 = x24_4;
                }
                else
                {
                    data_57340 = x9_20;
                    x1_21 = *x0_46;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_21);
                data_57350 = (data_57350 + 1);
            }
            __builtin_memset(&s, 0, 0x18);
            s = 6;
            *s[1] = 0x667365;
            int64_t* x0_50 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x24_4[7], &var_70);
            int64_t* x26_4 = *x0_50;
            void* var_90_3;
            if (x26_4 == 0)
            {
                int64_t* x0_51;
                int128_t v0_8;
                x0_51 = operator new(0x40);
                v0_8 = s;
                int64_t x9_21 = var_70;
                __builtin_memset(&s, 0, 0x18);
                *x0_51 = 0;
                x0_51[1] = 0;
                *(x0_51 + 0x20) = v0_8;
                x0_51[6] = var_90_3;
                x0_51[7] = 0;
                x0_51[2] = x9_21;
                *x0_50 = x0_51;
                x26_4 = x0_51;
                int64_t x8_57 = *x24_4[7];
                int64_t* x1_23;
                if (x8_57 == 0)
                {
                    x1_23 = x26_4;
                }
                else
                {
                    x24_4[7] = x8_57;
                    x1_23 = *x0_50;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x24_4[8], x1_23);
                x24_4[9] = (x24_4[9] + 1);
            }
            x26_4[7] = x0_45;
            if ((s & 1) != 0)
            {
                operator delete(var_90_3);
            }
            if ((s_4 & 1) != 0)
            {
                operator delete(var_78_4);
            }
            int64_t x0_56 = *(*var_a8 + 0x2f0)(var_a8, x0_8, "fileDescriptor", "Ljava/io/FileDescriptor;");
            int64_t s_5;
            __builtin_memset(&s_5, 0, 0x18);
            s_5 = 0x16;
            __builtin_strcpy(&*s_5[1], "SImgContain");
            int64_t* x0_57 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
            int64_t* x24_5 = *x0_57;
            void* var_78_5;
            if (x24_5 == 0)
            {
                int64_t* x0_58;
                int128_t v0_9;
                x0_58 = operator new(0x50);
                v0_9 = s_5;
                x0_58[6] = var_78_5;
                int64_t s_11 = s;
                *(x0_58 + 0x20) = v0_9;
                x0_58[8] = 0;
                __builtin_memset(&s_5, 0, 0x18);
                x0_58[9] = 0;
                *x0_58 = 0;
                x0_58[1] = 0;
                x0_58[2] = s_11;
                x0_58[7] = &x0_58[8];
                *x0_57 = x0_58;
                x24_5 = x0_58;
                int64_t x9_25 = **&data_57340;
                int64_t* x1_26;
                if (x9_25 == 0)
                {
                    x1_26 = x24_5;
                }
                else
                {
                    data_57340 = x9_25;
                    x1_26 = *x0_57;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_26);
                data_57350 = (data_57350 + 1);
            }
            s = 0xc;
            __builtin_strncpy(&*s[1], "fdescf", 0x17);
            int64_t* x0_61 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x24_5[7], &var_70);
            int64_t* x26_5 = *x0_61;
            void* var_90_4;
            if (x26_5 == 0)
            {
                int64_t* x0_62;
                int128_t v0_10;
                x0_62 = operator new(0x40);
                v0_10 = s;
                int64_t x9_26 = var_70;
                __builtin_memset(&s, 0, 0x18);
                *x0_62 = 0;
                x0_62[1] = 0;
                *(x0_62 + 0x20) = v0_10;
                x0_62[6] = var_90_4;
                x0_62[7] = 0;
                x0_62[2] = x9_26;
                *x0_61 = x0_62;
                x26_5 = x0_62;
                int64_t x8_69 = *x24_5[7];
                int64_t* x1_28;
                if (x8_69 == 0)
                {
                    x1_28 = x26_5;
                }
                else
                {
                    x24_5[7] = x8_69;
                    x1_28 = *x0_61;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x24_5[8], x1_28);
                x24_5[9] = (x24_5[9] + 1);
            }
            x26_5[7] = x0_56;
            if ((s & 1) != 0)
            {
                operator delete(var_90_4);
            }
            if ((s_5 & 1) != 0)
            {
                operator delete(var_78_5);
            }
            data_573e0 = *(*var_a8 + 0xa8)(var_a8, _JNIEnv::NewObject());
            data_573f0 = *(*var_a8 + 0xa8)(var_a8, _JNIEnv::NewObject());
            *(*var_a8 + 0xb8)(var_a8, x0_8);
            int64_t x0_76 = *(*var_a8 + 0x30)(var_a8, "java/io/FileDescriptor");
            *(*var_a8 + 0x108)(var_a8, x0_76, "<init>", &data_3be18);
            int64_t x0_80 = *(*var_a8 + 0x2f0)(var_a8, x0_76, "descriptor", &data_3bee9);
            int64_t s_6;
            __builtin_memset(&s_6, 0, 0x18);
            s_6 = 0x10;
            __builtin_strncpy(&*s_6[1], "FileDesc", 9);
            int64_t* x0_81 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
            int64_t* x24_6 = *x0_81;
            void* var_78_6;
            if (x24_6 == 0)
            {
                int64_t* x0_82;
                int128_t v0_11;
                x0_82 = operator new(0x50);
                v0_11 = s_6;
                x0_82[6] = var_78_6;
                int64_t s_12 = s;
                *(x0_82 + 0x20) = v0_11;
                x0_82[8] = 0;
                __builtin_memset(&s_6, 0, 0x18);
                x0_82[9] = 0;
                *x0_82 = 0;
                x0_82[1] = 0;
                x0_82[2] = s_12;
                x0_82[7] = &x0_82[8];
                *x0_81 = x0_82;
                x24_6 = x0_82;
                int64_t x9_30 = **&data_57340;
                int64_t* x1_37;
                if (x9_30 == 0)
                {
                    x1_37 = x24_6;
                }
                else
                {
                    data_57340 = x9_30;
                    x1_37 = *x0_81;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_37);
                data_57350 = (data_57350 + 1);
            }
            __builtin_memset(&s, 0, 0x18);
            __builtin_strcpy(&s, "\ndescf");
            int64_t* x0_85 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x24_6[7], &var_70);
            int64_t* x26_6 = *x0_85;
            void* var_90_5;
            if (x26_6 == 0)
            {
                int64_t* x0_86;
                int128_t v0_12;
                x0_86 = operator new(0x40);
                v0_12 = s;
                int64_t x9_31 = var_70;
                __builtin_memset(&s, 0, 0x18);
                *x0_86 = 0;
                x0_86[1] = 0;
                *(x0_86 + 0x20) = v0_12;
                x0_86[6] = var_90_5;
                x0_86[7] = 0;
                x0_86[2] = x9_31;
                *x0_85 = x0_86;
                x26_6 = x0_86;
                int64_t x8_91 = *x24_6[7];
                int64_t* x1_39;
                if (x8_91 == 0)
                {
                    x1_39 = x26_6;
                }
                else
                {
                    x24_6[7] = x8_91;
                    x1_39 = *x0_85;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x24_6[8], x1_39);
                x24_6[9] = (x24_6[9] + 1);
            }
            x26_6[7] = x0_80;
            if ((s & 1) != 0)
            {
                operator delete(var_90_5);
            }
            if ((s_6 & 1) != 0)
            {
                operator delete(var_78_6);
            }
            data_573e8 = *(*var_a8 + 0xa8)(var_a8, _JNIEnv::NewObject());
            data_573f8 = *(*var_a8 + 0xa8)(var_a8, _JNIEnv::NewObject());
            *(*var_a8 + 0xb8)(var_a8, x0_76);
            pudutech::Ashdmem::create();
            int64_t* x20_2 = data_57360;
            int64_t var_88_1 = 0;
            int64_t* var_80_3 = nullptr;
            data_57358 = s_6;
            int64_t var_80_2;
            data_57360 = var_80_2;
            if (x20_2 != 0)
            {
                int64_t x9_33;
                int32_t i;
                do
                {
                    x9_33 = __ldaxr(&x20_2[1]);
                    i = __stlxr((x9_33 - 1), &x20_2[1]);
                } while (i != 0);
                if (x9_33 == 0)
                {
                    *(*x20_2 + 0x10)(x20_2);
                    std::__ndk1::__shared_weak_count::__release_weak();
                }
            }
            if (var_80_3 != 0)
            {
                int64_t x9_34;
                int32_t i_1;
                do
                {
                    x9_34 = __ldaxr(&var_80_3[1]);
                    i_1 = __stlxr((x9_34 - 1), &var_80_3[1]);
                } while (i_1 != 0);
                if (x9_34 == 0)
                {
                    *(*var_80_3 + 0x10)(var_80_3);
                    std::__ndk1::__shared_weak_count::__release_weak();
                }
            }
            pudutech::Ashdmem::create();
            int64_t* x20_4 = data_57370;
            int64_t var_88_2 = 0;
            int64_t* var_80_4 = nullptr;
            data_57368 = var_88_1;
            data_57370 = var_80_3;
            if (x20_4 != 0)
            {
                int64_t x9_36;
                int32_t i_2;
                do
                {
                    x9_36 = __ldaxr(&x20_4[1]);
                    i_2 = __stlxr((x9_36 - 1), &x20_4[1]);
                } while (i_2 != 0);
                if (x9_36 == 0)
                {
                    *(*x20_4 + 0x10)(x20_4);
                    std::__ndk1::__shared_weak_count::__release_weak();
                }
            }
            if (var_80_4 != 0)
            {
                int64_t x9_37;
                int32_t i_3;
                do
                {
                    x9_37 = __ldaxr(&var_80_4[1]);
                    i_3 = __stlxr((x9_37 - 1), &var_80_4[1]);
                } while (i_3 != 0);
                if (x9_37 == 0)
                {
                    *(*var_80_4 + 0x10)(var_80_4);
                    std::__ndk1::__shared_weak_count::__release_weak();
                }
            }
        }
    }
    if (*(x28 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

int64_t JNI_OnUnload(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t x0 = *(*arg1 + 0x30)();
    if (x0 == 0)
    {
        int64_t* var_40;
        x0 = *(*var_40 + 0x30)(var_40, "com/pudutech/mirsdk/hardware/cam…");
        if (x0 != 0)
        {
            int64_t x20_1 = x0;
            x0 = *(*var_40 + 0x6c0)(var_40, x20_1);
            if ((x0 & 0x80000000) == 0)
            {
                *(*var_40 + 0xb8)(var_40, x20_1);
                data_57318;
                std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(&data_57310);
                data_57310 = &data_57318;
                data_57320 = 0;
                data_57318 = 0;
                data_57330;
                std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(&data_57328);
                data_57328 = &data_57330;
                data_57338 = 0;
                data_57330 = 0;
                data_57348;
                x0 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(&data_57340);
                int64_t x1_6 = data_573e8;
                data_57340 = &data_57348;
                data_57350 = 0;
                data_57348 = 0;
                if (x1_6 != 0)
                {
                    x0 = *(*var_40 + 0xb0)(var_40, x1_6);
                }
                int64_t x1_7 = data_573f8;
                if (x1_7 != 0)
                {
                    x0 = *(*var_40 + 0xb0)(var_40, x1_7);
                }
                int64_t x1_8 = data_573e0;
                if (x1_8 != 0)
                {
                    x0 = *(*var_40 + 0xb0)(var_40, x1_8);
                }
                int64_t x1_9 = data_573f0;
                if (x1_9 != 0)
                {
                    x0 = *(*var_40 + 0xb0)(var_40, x1_9);
                }
            }
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

int64_t cvflann::anyimpl::base_any_policy::~base_any_policy() __pure
{
    return;
}

void* cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::static_delete(int64_t arg1, int64_t* arg2)
{
    void* x0 = *arg2;
    if (x0 != 0)
    {
        x0 = operator delete(x0);
    }
    *arg2 = 0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::copy_from_value(int64_t arg1, int64_t arg2, int64_t* arg3)
{
    int64_t x0 = operator new(1);
    *arg3 = x0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::clone(int64_t arg1, int64_t arg2, int64_t* arg3)
{
    int64_t x0 = operator new(1);
    *arg3 = x0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::move() __pure
{
    return;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::get_size() __pure
{
    return 1;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::type() __pure
{
    return _typeinfo_for_cvflann::anyimpl::empty_any;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::print(int64_t arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg2, "[empty_any]", 0xb);
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::~big_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::copy_from_value(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<char const*>::get_size() __pure
{
    return 8;
}

int64_t cvflann::anyimpl::typed_base_any_policy<char const*>::type() __pure
{
    return _typeinfo_for_char const*;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::print(int64_t arg1, std::__ndk1::fpos<mbstate_t>* arg2, int64_t* arg3)
{
    char* x19 = *arg3;
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg2, x19, strlen(x19));
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::copy_from_value(int64_t, int32_t* arg2, int32_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<int32_t>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<int32_t>::type() __pure
{
    return _typeinfo_for_int32_t;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::print(int64_t arg1, int32_t arg2, int32_t* arg3)
{
    *arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<float>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<float>::copy_from_value(int64_t, int32_t* arg2, int32_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<float>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<float>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<float>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<float>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<float>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<float>::type() __pure
{
    return _typeinfo_for_float;
}

int64_t cvflann::anyimpl::small_any_policy<float>::print(int64_t arg1, int64_t arg2, int32_t* arg3)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(*arg3);
}

int64_t cvflann::anyimpl::small_any_policy<float>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<bool>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::copy_from_value(int64_t, char* arg2, char* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<bool>::get_size() __pure
{
    return 1;
}

int64_t cvflann::anyimpl::typed_base_any_policy<bool>::type() __pure
{
    return _typeinfo_for_bool;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::print(int64_t arg1, bool arg2, char* arg3)
{
    *arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::small_any_policy<bool>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void* cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::static_delete(int64_t arg1, int64_t* arg2)
{
    void* x0 = *arg2;
    if (x0 != 0)
    {
        x0 = operator delete(x0);
    }
    *arg2 = 0;
    return x0;
}

int32_t* cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::copy_from_value(int64_t arg1, int32_t* arg2, int32_t** arg3)
{
    int32_t* x0 = operator new(4);
    *x0 = *arg2;
    *arg3 = x0;
    return x0;
}

int32_t* cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::clone(int64_t arg1, int64_t* arg2, int32_t** arg3)
{
    int32_t* x0 = operator new(4);
    *x0 = **arg2;
    *arg3 = x0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    **arg3 = **arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::type() __pure
{
    return _typeinfo_for_cvflann::flann_algorithm_t;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::print(int64_t arg1, int32_t arg2, int64_t* arg3)
{
    **arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::~big_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void* cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::static_delete(int64_t arg1, int64_t* arg2)
{
    void* x0 = *arg2;
    if (x0 != 0)
    {
        x0 = operator delete(x0);
    }
    *arg2 = 0;
    return x0;
}

int32_t* cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::copy_from_value(int64_t arg1, int32_t* arg2, int32_t** arg3)
{
    int32_t* x0 = operator new(4);
    *x0 = *arg2;
    *arg3 = x0;
    return x0;
}

int32_t* cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::clone(int64_t arg1, int64_t* arg2, int32_t** arg3)
{
    int32_t* x0 = operator new(4);
    *x0 = **arg2;
    *arg3 = x0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    **arg3 = **arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::type() __pure
{
    return _typeinfo_for_cvflann::flann_centers_init_t;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::print(int64_t arg1, int32_t arg2, int64_t* arg3)
{
    **arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::~big_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::copy_from_value(int64_t, int32_t* arg2, int32_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<uint32_t>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<uint32_t>::type() __pure
{
    return _typeinfo_for_uint32_t;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::print(int64_t arg1, uint32_t arg2, int32_t* arg3)
{
    *arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::static_delete(int64_t arg1, int64_t* arg2)
{
    char* x20 = *arg2;
    if (x20 != 0)
    {
        if ((*x20 & 1) != 0)
        {
            operator delete(*(x20 + 0x10));
        }
        operator delete(x20);
    }
    *arg2 = 0;
}

int128_t* cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::copy_from_value(int64_t arg1, char* arg2, int128_t** arg3)
{
    int128_t* s;
    int128_t v0;
    s = operator new(0x18);
    __builtin_memset(s, 0, 0x18);
    int128_t* s_1 = s;
    if ((*arg2 & 1) == 0)
    {
        s_1[1] = *(arg2 + 0x10);
        *s_1 = *arg2;
    }
    else
    {
        size_t x21_1 = *(arg2 + 8);
        if (x21_1 < -0x10)
        {
            int64_t x0_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            operator delete(s_1);
            int128_t* x0_7;
            int64_t* x1_1;
            int128_t** x2_1;
            x0_7 = _Unwind_Resume(x0_4);
            /* tailcall */
            return cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::clone(x0_7, x1_1, x2_1);
        }
        int64_t x22_1 = *(arg2 + 0x10);
        void* x23_2;
        if (x21_1 >= 0x17)
        {
            uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x24_1);
            x23_2 = x0_1;
            *(s_1 + 8) = x21_1;
            s_1[1] = x0_1;
            *s_1 = (x24_1 | 1);
        }
        else
        {
            *s_1 = (x21_1 << 1);
            x23_2 = (s_1 + 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            s = memcpy(x23_2, x22_1, x21_1);
        }
        *(x23_2 + x21_1) = 0;
    }
    *arg3 = s_1;
    return s;
}

int128_t* cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::clone(int64_t arg1, int64_t* arg2, int128_t** arg3)
{
    int128_t* s;
    int128_t v0;
    s = operator new(0x18);
    char* x8 = *arg2;
    __builtin_memset(s, 0, 0x18);
    int128_t* s_1 = s;
    if ((*x8 & 1) == 0)
    {
        s_1[1] = *(x8 + 0x10);
        *s_1 = *x8;
    }
    else
    {
        size_t x21_1 = *(x8 + 8);
        if (x21_1 < -0x10)
        {
            int64_t x0_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            operator delete(s_1);
            char* x0_7;
            char** x1_1;
            int64_t* x2_1;
            x0_7 = _Unwind_Resume(x0_4);
            /* tailcall */
            return cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::move(x0_7, x1_1, x2_1);
        }
        int64_t x22_1 = *(x8 + 0x10);
        void* x23_2;
        if (x21_1 >= 0x17)
        {
            uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x24_1);
            x23_2 = x0_1;
            *(s_1 + 8) = x21_1;
            s_1[1] = x0_1;
            *s_1 = (x24_1 | 1);
        }
        else
        {
            *s_1 = (x21_1 << 1);
            x23_2 = (s_1 + 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            s = memcpy(x23_2, x22_1, x21_1);
        }
        *(x23_2 + x21_1) = 0;
    }
    *arg3 = s_1;
    return s;
}

char* cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::move(int64_t arg1, char** arg2, int64_t* arg3)
{
    char* x0 = *arg3;
    if ((*x0 & 1) != 0)
    {
        operator delete(*(x0 + 0x10));
        x0 = *arg3;
    }
    char* x8_1 = *arg2;
    if (x0 != x8_1)
    {
        *(x8_1 + 8);
        uint64_t x1;
        if ((*x8_1 & 1) != 0)
        {
            x1 = *(x8_1 + 0x10);
        }
        else
        {
            x1 = &x8_1[1];
        }
        x0 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(x0, x1);
    }
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::get_size() __pure
{
    return 0x18;
}

int64_t cvflann::anyimpl::typed_base_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::type() __pure
{
    return _typeinfo_for_std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >;
}

int64_t cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::print(int64_t arg1, std::__ndk1::fpos<mbstate_t>* arg2, int64_t* arg3)
{
    char* x8 = *arg3;
    void* x20;
    if ((*x8 & 1) != 0)
    {
        x20 = *(x8 + 0x10);
    }
    else
    {
        x20 = &x8[1];
    }
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg2, x20, strlen(x20));
}

int64_t cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::~big_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void std::__ndk1::__basic_string_common<true>::__throw_length_error() __noreturn
{
    sub_18fbc();
    /* no return */
}

void sub_18fbc() __noreturn
{
    char* thrown_exception = __cxa_allocate_exception(0x10);
    sub_1900c(thrown_exception);
    __cxa_throw(thrown_exception, _typeinfo_for_std::length_error, std::length_error::~length_error);
    /* no return */
}

int64_t sub_1900c(char* arg1)
{
    int64_t x0 = std::logic_error::logic_error(arg1);
    *arg1 = (_vtable_for_std::length_error + 0x10);
    return x0;
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void sub_1908c(void* arg1) __noreturn
{
    __cxa_begin_catch(arg1);
    std::terminate();
    /* no return */
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(arg1);
    arg2[8];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(&arg2[7]);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

uint64_t sub_19194(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    int64_t var_38 = *(_ReadStatusReg(tpidr_el0) + 0x28);
    std::__ndk1::fpos<mbstate_t>* x19 = data_57378;
    char var_68;
    void* x20_1;
    void* x29;
    x20_1 = sub_1b2b8(arg1, arg3, &var_68);
    PuduCamera::MarkerCamera::loadParamFile(x19, &var_68);
    void* var_58;
    if ((var_68 & 1) != 0)
    {
        operator delete(var_58);
    }
    data_57378;
    int128_t* x0_3;
    int128_t v0;
    x0_3 = PuduCamera::MarkerCamera::getCameraParam();
    data_57170 = *x0_3;
    int32_t x10 = *data_57170;
    int32_t x8_3 = *(data_57170 + 4);
    var_68 = 0;
    int64_t var_60 = 0;
    void* var_58_1 = nullptr;
    char var_50 = 0;
    *var_60[1] = 0;
    var_68 = 0x10;
    var_50 = 0x10;
    int64_t var_67;
    __builtin_strncpy(&var_67, "05a39230", 8);
    void* var_40 = nullptr;
    __builtin_strncpy(&*var_50[1], "0c45636b", 0xf);
    data_57180 = (0x10 + (x10 * x8_3));
    void* var_80;
    sub_1b4b0(&var_80, &var_68, 2);
    if ((var_50 & 1) != 0)
    {
        operator delete(var_40);
    }
    if ((var_68 & 1) != 0)
    {
        operator delete(var_58_1);
    }
    int32_t x0_8 = PuduCamera::MarkerCamera::openCamera(data_57378, &var_80);
    void* x21 = var_80;
    if (x21 != 0)
    {
        char* var_78;
        char* x8_7 = var_78;
        void* x0_10;
        if (x8_7 == x21)
        {
            x0_10 = x21;
        }
        else
        {
            char* x22_1 = x8_7;
            do
            {
                x22_1 = &x22_1[-0x18];
                if ((*x22_1 & 1) != 0)
                {
                    operator delete(*(x8_7 - 8));
                }
                x8_7 = x22_1;
            } while (x21 != x22_1);
            x0_10 = var_80;
        }
        void* var_78_1 = x21;
        operator delete(x0_10);
    }
    if (*(x20_1 + 0x28) != *(x29 - 0x28))
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_8;
}

uint64_t sub_193a8()
{
    data_57378;
    return (PuduCamera::MarkerCamera::isOpenCamera() & 1);
}

int64_t sub_193c8(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int128_t v1;
    int128_t v2;
    int128_t v3;
    v1 = PuduCamera::MarkerCamera::readPhoto(data_57378);
    void* var_80;
    int64_t x20_1;
    int64_t* var_78;
    int64_t* x19_1;
    if (*(var_80 + 0x10) != 0)
    {
        uint64_t x8_2 = *(var_80 + 4);
        int64_t x11_1;
        if (x8_2 >= 3)
        {
            void* x9_3 = *(var_80 + 0x40);
            int64_t i_5;
            if (x8_2 != 3)
            {
                i_5 = (x8_2 & 0xfffffffc);
                v1 = 1;
                *v1[8] = 1;
                void* x11_2 = (x9_3 + 8);
                int64_t i_3 = i_5;
                int128_t v0_1 = v1;
                int32_t i;
                do
                {
                    v2 = *(x11_2 - 8);
                    v3 = *x11_2;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x0_2 = v1;
                    int64_t x16_2 = (v0_1 * v1);
                    int64_t x13_2 = (v1 * v0_1);
                    v1 = (v1 * v0_1);
                    int64_t x14_3 = (v0_1 * x0_2);
                    v0_1 = x16_2;
                    i = i_3;
                    i_3 = (i_3 - 4);
                    *v1[8] = x13_2;
                    *v0_1[8] = x14_3;
                    x11_2 = (x11_2 + 0x10);
                } while (i != 4);
                x11_1 = ((v0_1 * v1) * (v0_1 * v1));
            }
            else
            {
                i_5 = 0;
                x11_1 = 1;
            }
            if ((x8_2 == 3 || (x8_2 != 3 && i_5 != x8_2)))
            {
                int64_t i_4 = (x8_2 - i_5);
                int32_t* x9_4 = (x9_3 + (i_5 << 2));
                int64_t i_1;
                do
                {
                    int64_t x10_2 = *x9_4;
                    x9_4 = &x9_4[1];
                    i_1 = i_4;
                    i_4 = (i_4 - 1);
                    x11_1 = (x11_1 * x10_2);
                } while (i_1 != 1);
            }
            x20_1 = 0;
            if (x8_2 == 0)
            {
                goto label_19670;
            }
        }
        else
        {
            x11_1 = (*(var_80 + 0xc) * *(var_80 + 8));
            x20_1 = 0;
            if (x8_2 == 0)
            {
                goto label_19670;
            }
        }
        if (x11_1 == 0)
        {
            goto label_19670;
        }
        if (data_57180 == 0xffffffff)
        {
            goto label_19670;
        }
        data_57358;
        pudutech::Ashdmem::destroyMemory();
        std::__ndk1::fpos<mbstate_t>* x0_4 = data_57358;
        data_57180;
        int32_t var_b4_1 = 0xffffffff;
        char s_1 = 0xc;
        int32_t var_97;
        __builtin_strncpy(&var_97, "marker", 0x17);
        int32_t x0_5;
        int32_t* x1_3;
        x0_5 = pudutech::Ashdmem::createMemory(x0_4, &s_1);
        void* var_88;
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88);
        }
        if (x0_5 == 0xffffffff)
        {
            goto label_1966c;
        }
        *x1_3 = *(var_80 + 8);
        x1_3[1] = *(var_80 + 0xc);
        x1_3[2] = 1;
        memcpy(&x1_3[3], *(var_80 + 0x10), (*(var_80 + 0xc) * *(var_80 + 8)));
        int64_t x20_3 = data_573e0;
        s_1 = 0;
        int64_t var_90_1 = 0;
        s_1 = 0x16;
        void* var_88_1 = nullptr;
        __builtin_strcpy(&var_97, "SImgContain");
        int64_t s;
        int64_t* x0_8 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_2 = *x0_8;
        if (x21_2 == 0)
        {
            int64_t* x0_9;
            int128_t v0_2;
            x0_9 = operator new(0x50);
            v0_2 = s_1;
            x0_9[6] = var_88_1;
            int64_t s_2 = s;
            *(x0_9 + 0x20) = v0_2;
            x0_9[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_9[9] = 0;
            *x0_9 = 0;
            x0_9[1] = 0;
            x0_9[2] = s_2;
            x0_9[7] = &x0_9[8];
            *x0_8 = x0_9;
            x21_2 = x0_9;
            int64_t x9_11 = **&data_57340;
            int64_t* x1_6;
            if (x9_11 == 0)
            {
                x1_6 = x21_2;
            }
            else
            {
                data_57340 = x9_11;
                x1_6 = *x0_8;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_6);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        s = 8;
        __builtin_strncpy(&*s[1], "rowf", 5);
        int64_t var_70;
        int64_t* x0_14 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_2[7], &var_70);
        int64_t* x23_1 = *x0_14;
        void* var_a0;
        if (x23_1 == 0)
        {
            int64_t* x0_15;
            int128_t v0_3;
            x0_15 = operator new(0x40);
            v0_3 = s;
            int64_t x9_13 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_15 = 0;
            x0_15[1] = 0;
            *(x0_15 + 0x20) = v0_3;
            x0_15[6] = var_a0;
            x0_15[7] = 0;
            x0_15[2] = x9_13;
            *x0_14 = x0_15;
            x23_1 = x0_15;
            int64_t x8_15 = *x21_2[7];
            int64_t* x1_8;
            if (x8_15 == 0)
            {
                x1_8 = x23_1;
            }
            else
            {
                x21_2[7] = x8_15;
                x1_8 = *x0_14;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_2[8], x1_8);
            x21_2[9] = (x21_2[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_3, x23_1[7], *(data_57170 + 4));
        if ((s & 1) != 0)
        {
            operator delete(var_a0);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_1);
        }
        int64_t x20_4 = data_573e0;
        s_1 = 0;
        int64_t var_90_2 = 0;
        s_1 = 0x16;
        void* var_88_2 = nullptr;
        __builtin_strcpy(&var_97, "SImgContain");
        int64_t* x0_20 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_3 = *x0_20;
        if (x21_3 == 0)
        {
            int64_t* x0_21;
            int128_t v0_4;
            x0_21 = operator new(0x50);
            v0_4 = s_1;
            x0_21[6] = var_88_2;
            int64_t s_3 = s;
            *(x0_21 + 0x20) = v0_4;
            x0_21[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_21[9] = 0;
            *x0_21 = 0;
            x0_21[1] = 0;
            x0_21[2] = s_3;
            x0_21[7] = &x0_21[8];
            *x0_20 = x0_21;
            x21_3 = x0_21;
            int64_t x9_17 = **&data_57340;
            int64_t* x1_11;
            if (x9_17 == 0)
            {
                x1_11 = x21_3;
            }
            else
            {
                data_57340 = x9_17;
                x1_11 = *x0_20;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_11);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        s = 8;
        __builtin_strncpy(&*s[1], "colf", 5);
        int64_t* x0_24 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_3[7], &var_70);
        int64_t* x23_2 = *x0_24;
        void* var_a0_1;
        if (x23_2 == 0)
        {
            int64_t* x0_25;
            int128_t v0_5;
            x0_25 = operator new(0x40);
            v0_5 = s;
            int64_t x9_18 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_25 = 0;
            x0_25[1] = 0;
            *(x0_25 + 0x20) = v0_5;
            x0_25[6] = var_a0_1;
            x0_25[7] = 0;
            x0_25[2] = x9_18;
            *x0_24 = x0_25;
            x23_2 = x0_25;
            int64_t x8_27 = *x21_3[7];
            int64_t* x1_13;
            if (x8_27 == 0)
            {
                x1_13 = x23_2;
            }
            else
            {
                x21_3[7] = x8_27;
                x1_13 = *x0_24;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_3[8], x1_13);
            x21_3[9] = (x21_3[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_4, x23_2[7], *data_57170);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_1);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_2);
        }
        int64_t x20_5 = data_573e0;
        s_1 = 0;
        int64_t var_90_3 = 0;
        s_1 = 0x16;
        void* var_88_3 = nullptr;
        __builtin_strcpy(&var_97, "SImgContain");
        int64_t* x0_30 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_4 = *x0_30;
        if (x21_4 == 0)
        {
            int64_t* x0_31;
            int128_t v0_6;
            x0_31 = operator new(0x50);
            v0_6 = s_1;
            x0_31[6] = var_88_3;
            int64_t s_4 = s;
            *(x0_31 + 0x20) = v0_6;
            x0_31[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_31[9] = 0;
            *x0_31 = 0;
            x0_31[1] = 0;
            x0_31[2] = s_4;
            x0_31[7] = &x0_31[8];
            *x0_30 = x0_31;
            x21_4 = x0_31;
            int64_t x9_22 = **&data_57340;
            int64_t* x1_16;
            if (x9_22 == 0)
            {
                x1_16 = x21_4;
            }
            else
            {
                data_57340 = x9_22;
                x1_16 = *x0_30;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_16);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        __builtin_strcpy(&s, "\nmemsf");
        int64_t* x0_34 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_4[7], &var_70);
        int64_t* x23_3 = *x0_34;
        void* var_a0_2;
        if (x23_3 == 0)
        {
            int64_t* x0_35;
            int128_t v0_7;
            x0_35 = operator new(0x40);
            v0_7 = s;
            int64_t x9_23 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_35 = 0;
            x0_35[1] = 0;
            *(x0_35 + 0x20) = v0_7;
            x0_35[6] = var_a0_2;
            x0_35[7] = 0;
            x0_35[2] = x9_23;
            *x0_34 = x0_35;
            x23_3 = x0_35;
            int64_t x8_39 = *x21_4[7];
            int64_t* x1_18;
            if (x8_39 == 0)
            {
                x1_18 = x23_3;
            }
            else
            {
                x21_4[7] = x8_39;
                x1_18 = *x0_34;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_4[8], x1_18);
            x21_4[9] = (x21_4[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_5, x23_3[7], data_57180);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_2);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_3);
        }
        int64_t x20_6 = data_573e0;
        s_1 = 0;
        int64_t var_90_4 = 0;
        s_1 = 0x16;
        void* var_88_4 = nullptr;
        __builtin_strcpy(&var_97, "SImgContain");
        int64_t* x0_40 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_5 = *x0_40;
        if (x21_5 == 0)
        {
            int64_t* x0_41;
            int128_t v0_8;
            x0_41 = operator new(0x50);
            v0_8 = s_1;
            x0_41[6] = var_88_4;
            int64_t s_5 = s;
            *(x0_41 + 0x20) = v0_8;
            x0_41[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_41[9] = 0;
            *x0_41 = 0;
            x0_41[1] = 0;
            x0_41[2] = s_5;
            x0_41[7] = &x0_41[8];
            *x0_40 = x0_41;
            x21_5 = x0_41;
            int64_t x9_27 = **&data_57340;
            int64_t* x1_21;
            if (x9_27 == 0)
            {
                x1_21 = x21_5;
            }
            else
            {
                data_57340 = x9_27;
                x1_21 = *x0_40;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_21);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        s = 6;
        *s[1] = 0x667365;
        int64_t* x0_44 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_5[7], &var_70);
        int64_t* x23_4 = *x0_44;
        void* var_a0_3;
        if (x23_4 == 0)
        {
            int64_t* x0_45;
            int128_t v0_9;
            x0_45 = operator new(0x40);
            v0_9 = s;
            int64_t x9_28 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_45 = 0;
            x0_45[1] = 0;
            *(x0_45 + 0x20) = v0_9;
            x0_45[6] = var_a0_3;
            x0_45[7] = 0;
            x0_45[2] = x9_28;
            *x0_44 = x0_45;
            x23_4 = x0_45;
            int64_t x8_51 = *x21_5[7];
            int64_t* x1_23;
            if (x8_51 == 0)
            {
                x1_23 = x23_4;
            }
            else
            {
                x21_5[7] = x8_51;
                x1_23 = *x0_44;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_5[8], x1_23);
            x21_5[9] = (x21_5[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_6, x23_4[7], 1);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_3);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_4);
        }
        s_1 = 0;
        int64_t var_90_5 = 0;
        int64_t x20_7 = data_573e8;
        s_1 = 0x10;
        void* var_88_5 = nullptr;
        __builtin_strncpy(&var_97, "FileDesc", 9);
        int64_t* x0_50 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_6 = *x0_50;
        if (x21_6 == 0)
        {
            int64_t* x0_51;
            int128_t v0_10;
            x0_51 = operator new(0x50);
            v0_10 = s_1;
            x0_51[6] = var_88_5;
            int64_t s_6 = s;
            *(x0_51 + 0x20) = v0_10;
            x0_51[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_51[9] = 0;
            *x0_51 = 0;
            x0_51[1] = 0;
            x0_51[2] = s_6;
            x0_51[7] = &x0_51[8];
            *x0_50 = x0_51;
            x21_6 = x0_51;
            int64_t x9_32 = **&data_57340;
            int64_t* x1_26;
            if (x9_32 == 0)
            {
                x1_26 = x21_6;
            }
            else
            {
                data_57340 = x9_32;
                x1_26 = *x0_50;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_26);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        __builtin_strcpy(&s, "\ndescf");
        int64_t* x0_54 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_6[7], &var_70);
        int64_t* x23_5 = *x0_54;
        void* var_a0_4;
        if (x23_5 == 0)
        {
            int64_t* x0_55;
            int128_t v0_11;
            x0_55 = operator new(0x40);
            v0_11 = s;
            int64_t x9_33 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_55 = 0;
            x0_55[1] = 0;
            *(x0_55 + 0x20) = v0_11;
            x0_55[6] = var_a0_4;
            x0_55[7] = 0;
            x0_55[2] = x9_33;
            *x0_54 = x0_55;
            x23_5 = x0_55;
            int64_t x8_63 = *x21_6[7];
            int64_t* x1_28;
            if (x8_63 == 0)
            {
                x1_28 = x23_5;
            }
            else
            {
                x21_6[7] = x8_63;
                x1_28 = *x0_54;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_6[8], x1_28);
            x21_6[9] = (x21_6[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_7, x23_5[7], x0_5);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_4);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_5);
        }
        int64_t x20_8 = data_573e0;
        s_1 = 0;
        int64_t var_90_6 = 0;
        s_1 = 0x16;
        void* var_88_6 = nullptr;
        __builtin_strcpy(&var_97, "SImgContain");
        int64_t* x0_60 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_7 = *x0_60;
        if (x21_7 == 0)
        {
            int64_t* x0_61;
            int128_t v0_12;
            x0_61 = operator new(0x50);
            v0_12 = s_1;
            x0_61[6] = var_88_6;
            int64_t s_7 = s;
            *(x0_61 + 0x20) = v0_12;
            x0_61[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_61[9] = 0;
            *x0_61 = 0;
            x0_61[1] = 0;
            x0_61[2] = s_7;
            x0_61[7] = &x0_61[8];
            *x0_60 = x0_61;
            x21_7 = x0_61;
            int64_t x9_37 = **&data_57340;
            int64_t* x1_31;
            if (x9_37 == 0)
            {
                x1_31 = x21_7;
            }
            else
            {
                data_57340 = x9_37;
                x1_31 = *x0_60;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_31);
            data_57350 = (data_57350 + 1);
        }
        s = 0xc;
        __builtin_strncpy(&*s[1], "fdescf", 0x17);
        int64_t* x0_64 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_7[7], &var_70);
        int64_t* x23_6 = *x0_64;
        void* var_a0_5;
        if (x23_6 == 0)
        {
            int64_t* x0_65;
            int128_t v0_13;
            x0_65 = operator new(0x40);
            v0_13 = s;
            int64_t x9_38 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_65 = 0;
            x0_65[1] = 0;
            *(x0_65 + 0x20) = v0_13;
            x0_65[6] = var_a0_5;
            x0_65[7] = 0;
            x0_65[2] = x9_38;
            *x0_64 = x0_65;
            x23_6 = x0_65;
            int64_t x8_75 = *x21_7[7];
            int64_t* x1_33;
            if (x8_75 == 0)
            {
                x1_33 = x23_6;
            }
            else
            {
                x21_7[7] = x8_75;
                x1_33 = *x0_64;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_7[8], x1_33);
            x21_7[9] = (x21_7[9] + 1);
        }
        *(*arg1 + 0x340)(arg1, x20_8, x23_6[7], data_573e8);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_5);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_6);
        }
        x20_1 = data_573e0;
        x19_1 = var_78;
        if (x19_1 != 0)
        {
            goto label_19688;
        }
    }
    else
    {
    label_1966c:
        x20_1 = 0;
    label_19670:
        x19_1 = var_78;
        if (x19_1 != 0)
        {
        label_19688:
            int64_t x9_12;
            int32_t i_2;
            do
            {
                x9_12 = __ldaxr(&x19_1[1]);
                i_2 = __stlxr((x9_12 - 1), &x19_1[1]);
            } while (i_2 != 0);
            if (x9_12 == 0)
            {
                *(*x19_1 + 0x10)(x19_1);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

uint64_t sub_1a2b4(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t var_48 = *(x22 + 0x28);
    int128_t var_a0 = data_3bd70;
    PuduCamera::MarkerCamera::setParam(data_57388);
    std::__ndk1::fpos<mbstate_t>* x21 = data_57388;
    char var_90;
    void* x29 = sub_1b2b8(arg1, arg3, &var_90);
    PuduCamera::MarkerCamera::loadParamFile(x21, &var_90);
    void* var_80;
    if ((var_90 & 1) != 0)
    {
        operator delete(var_80);
    }
    data_57388;
    int128_t* x0_5;
    int128_t v0_1;
    x0_5 = PuduCamera::MarkerCamera::getCameraParam();
    v0_1 = *x0_5;
    var_90 = 0;
    int64_t var_88 = 0;
    int64_t var_8f;
    __builtin_strncpy(&var_8f, "1bcf0b09", 8);
    data_57184 = v0_1;
    void* var_80_1 = nullptr;
    char var_78 = 0;
    var_90 = 0x10;
    char var_60 = 0;
    int64_t var_58 = 0;
    var_78 = 0x10;
    var_60 = 0x10;
    int32_t x9 = *data_57184;
    int32_t x8_3 = *(data_57184 + 4);
    void* var_68 = nullptr;
    __builtin_strncpy(&*var_78[1], "0bda3035", 0xf);
    *var_88[1] = 0;
    void* var_50 = nullptr;
    __builtin_strncpy(&*var_60[1], "0c46636a", 9);
    data_57194 = (((x8_3 * x9) * 3) + 0x10);
    void* var_b8;
    sub_1b4b0(&var_b8, &var_90, 3);
    if ((var_60 & 1) != 0)
    {
        operator delete(var_50);
    }
    if ((((var_60 & 1) != 0 && (var_78 & 1) != 0) || ((var_60 & 1) == 0 && (var_78 & 1) != 0)))
    {
        operator delete(var_68);
        if ((var_90 & 1) != 0)
        {
            goto label_1a3f8;
        }
    }
    if (((((var_60 & 1) != 0 && (var_78 & 1) == 0) || ((var_60 & 1) == 0 && (var_78 & 1) == 0)) && (var_90 & 1) != 0))
    {
    label_1a3f8:
        operator delete(var_80_1);
    }
    int32_t x0_9 = PuduCamera::MarkerCamera::openCamera(data_57388, &var_b8);
    void* x20_1 = var_b8;
    if (x20_1 != 0)
    {
        char* var_b0;
        char* x8_10 = var_b0;
        void* x0_11;
        if (x8_10 == x20_1)
        {
            x0_11 = x20_1;
        }
        else
        {
            char* x21_1 = x8_10;
            do
            {
                x21_1 = &x21_1[-0x18];
                if ((*x21_1 & 1) != 0)
                {
                    operator delete(*(x8_10 - 8));
                }
                x8_10 = x21_1;
            } while (x20_1 != x21_1);
            x0_11 = var_b8;
        }
        void* var_b0_1 = x20_1;
        operator delete(x0_11);
    }
    if (*(x22 + 0x28) != *(x29 - 0x38))
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_9;
}

uint64_t sub_1a550()
{
    data_57388;
    return (PuduCamera::MarkerCamera::isOpenCamera() & 1);
}

int64_t sub_1a570(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int128_t v1;
    int128_t v2;
    int128_t v3;
    v1 = PuduCamera::MarkerCamera::readPhoto(data_57388);
    void* var_80;
    int64_t x20_1;
    int64_t* var_78;
    int64_t* x19_1;
    if (*(var_80 + 0x10) != 0)
    {
        uint64_t x8_2 = *(var_80 + 4);
        int64_t x11_1;
        if (x8_2 >= 3)
        {
            void* x9_3 = *(var_80 + 0x40);
            int64_t i_5;
            if (x8_2 != 3)
            {
                i_5 = (x8_2 & 0xfffffffc);
                v1 = 1;
                *v1[8] = 1;
                void* x11_2 = (x9_3 + 8);
                int64_t i_3 = i_5;
                int128_t v0_1 = v1;
                int32_t i;
                do
                {
                    v2 = *(x11_2 - 8);
                    v3 = *x11_2;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x0_2 = v1;
                    int64_t x16_2 = (v0_1 * v1);
                    int64_t x13_2 = (v1 * v0_1);
                    v1 = (v1 * v0_1);
                    int64_t x14_3 = (v0_1 * x0_2);
                    v0_1 = x16_2;
                    i = i_3;
                    i_3 = (i_3 - 4);
                    *v1[8] = x13_2;
                    *v0_1[8] = x14_3;
                    x11_2 = (x11_2 + 0x10);
                } while (i != 4);
                x11_1 = ((v0_1 * v1) * (v0_1 * v1));
            }
            else
            {
                i_5 = 0;
                x11_1 = 1;
            }
            if ((x8_2 == 3 || (x8_2 != 3 && i_5 != x8_2)))
            {
                int64_t i_4 = (x8_2 - i_5);
                int32_t* x9_4 = (x9_3 + (i_5 << 2));
                int64_t i_1;
                do
                {
                    int64_t x10_2 = *x9_4;
                    x9_4 = &x9_4[1];
                    i_1 = i_4;
                    i_4 = (i_4 - 1);
                    x11_1 = (x11_1 * x10_2);
                } while (i_1 != 1);
            }
            x20_1 = 0;
            if (x8_2 == 0)
            {
                goto label_1a820;
            }
        }
        else
        {
            x11_1 = (*(var_80 + 0xc) * *(var_80 + 8));
            x20_1 = 0;
            if (x8_2 == 0)
            {
                goto label_1a820;
            }
        }
        if (x11_1 == 0)
        {
            goto label_1a820;
        }
        if (data_57194 == 0xffffffff)
        {
            goto label_1a820;
        }
        data_57368;
        pudutech::Ashdmem::destroyMemory();
        std::__ndk1::fpos<mbstate_t>* x0_4 = data_57368;
        int32_t var_b4_1 = 0xffffffff;
        data_57194;
        int64_t s_1 = 0;
        int64_t var_90_1 = 0;
        s_1 = 0x12;
        void* var_88_1 = nullptr;
        __builtin_strcpy(&*s_1[1], "monocular");
        int32_t x0_5;
        int32_t* x1_3;
        x0_5 = pudutech::Ashdmem::createMemory(x0_4, &s_1);
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_1);
        }
        if (x0_5 == 0xffffffff)
        {
            goto label_1a81c;
        }
        *x1_3 = *(var_80 + 8);
        x1_3[1] = *(var_80 + 0xc);
        x1_3[2] = 3;
        memcpy(&x1_3[3], *(var_80 + 0x10), ((*(var_80 + 8) * *(var_80 + 0xc)) * 3));
        int64_t x20_3 = data_573f0;
        s_1 = 0;
        int64_t var_90_2 = 0;
        s_1 = 0x16;
        void* var_88_2 = nullptr;
        __builtin_strcpy(&*s_1[1], "SImgContain");
        int64_t s;
        int64_t* x0_8 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_2 = *x0_8;
        if (x21_2 == 0)
        {
            int64_t* x0_9;
            int128_t v0_2;
            x0_9 = operator new(0x50);
            v0_2 = s_1;
            x0_9[6] = var_88_2;
            int64_t s_2 = s;
            *(x0_9 + 0x20) = v0_2;
            x0_9[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_9[9] = 0;
            *x0_9 = 0;
            x0_9[1] = 0;
            x0_9[2] = s_2;
            x0_9[7] = &x0_9[8];
            *x0_8 = x0_9;
            x21_2 = x0_9;
            int64_t x9_11 = **&data_57340;
            int64_t* x1_6;
            if (x9_11 == 0)
            {
                x1_6 = x21_2;
            }
            else
            {
                data_57340 = x9_11;
                x1_6 = *x0_8;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_6);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        s = 8;
        __builtin_strncpy(&*s[1], "rowf", 5);
        int64_t var_70;
        int64_t* x0_14 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_2[7], &var_70);
        int64_t* x23_1 = *x0_14;
        void* var_a0;
        if (x23_1 == 0)
        {
            int64_t* x0_15;
            int128_t v0_3;
            x0_15 = operator new(0x40);
            v0_3 = s;
            int64_t x9_13 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_15 = 0;
            x0_15[1] = 0;
            *(x0_15 + 0x20) = v0_3;
            x0_15[6] = var_a0;
            x0_15[7] = 0;
            x0_15[2] = x9_13;
            *x0_14 = x0_15;
            x23_1 = x0_15;
            int64_t x8_16 = *x21_2[7];
            int64_t* x1_8;
            if (x8_16 == 0)
            {
                x1_8 = x23_1;
            }
            else
            {
                x21_2[7] = x8_16;
                x1_8 = *x0_14;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_2[8], x1_8);
            x21_2[9] = (x21_2[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_3, x23_1[7], *(data_57184 + 4));
        if ((s & 1) != 0)
        {
            operator delete(var_a0);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_2);
        }
        int64_t x20_4 = data_573f0;
        s_1 = 0;
        int64_t var_90_3 = 0;
        s_1 = 0x16;
        void* var_88_3 = nullptr;
        __builtin_strcpy(&*s_1[1], "SImgContain");
        int64_t* x0_20 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_3 = *x0_20;
        if (x21_3 == 0)
        {
            int64_t* x0_21;
            int128_t v0_4;
            x0_21 = operator new(0x50);
            v0_4 = s_1;
            x0_21[6] = var_88_3;
            int64_t s_3 = s;
            *(x0_21 + 0x20) = v0_4;
            x0_21[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_21[9] = 0;
            *x0_21 = 0;
            x0_21[1] = 0;
            x0_21[2] = s_3;
            x0_21[7] = &x0_21[8];
            *x0_20 = x0_21;
            x21_3 = x0_21;
            int64_t x9_17 = **&data_57340;
            int64_t* x1_11;
            if (x9_17 == 0)
            {
                x1_11 = x21_3;
            }
            else
            {
                data_57340 = x9_17;
                x1_11 = *x0_20;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_11);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        s = 8;
        __builtin_strncpy(&*s[1], "colf", 5);
        int64_t* x0_24 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_3[7], &var_70);
        int64_t* x23_2 = *x0_24;
        void* var_a0_1;
        if (x23_2 == 0)
        {
            int64_t* x0_25;
            int128_t v0_5;
            x0_25 = operator new(0x40);
            v0_5 = s;
            int64_t x9_18 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_25 = 0;
            x0_25[1] = 0;
            *(x0_25 + 0x20) = v0_5;
            x0_25[6] = var_a0_1;
            x0_25[7] = 0;
            x0_25[2] = x9_18;
            *x0_24 = x0_25;
            x23_2 = x0_25;
            int64_t x8_28 = *x21_3[7];
            int64_t* x1_13;
            if (x8_28 == 0)
            {
                x1_13 = x23_2;
            }
            else
            {
                x21_3[7] = x8_28;
                x1_13 = *x0_24;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_3[8], x1_13);
            x21_3[9] = (x21_3[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_4, x23_2[7], *data_57184);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_1);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_3);
        }
        int64_t x20_5 = data_573f0;
        s_1 = 0;
        int64_t var_90_4 = 0;
        s_1 = 0x16;
        void* var_88_4 = nullptr;
        __builtin_strcpy(&*s_1[1], "SImgContain");
        int64_t* x0_30 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_4 = *x0_30;
        if (x21_4 == 0)
        {
            int64_t* x0_31;
            int128_t v0_6;
            x0_31 = operator new(0x50);
            v0_6 = s_1;
            x0_31[6] = var_88_4;
            int64_t s_4 = s;
            *(x0_31 + 0x20) = v0_6;
            x0_31[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_31[9] = 0;
            *x0_31 = 0;
            x0_31[1] = 0;
            x0_31[2] = s_4;
            x0_31[7] = &x0_31[8];
            *x0_30 = x0_31;
            x21_4 = x0_31;
            int64_t x9_22 = **&data_57340;
            int64_t* x1_16;
            if (x9_22 == 0)
            {
                x1_16 = x21_4;
            }
            else
            {
                data_57340 = x9_22;
                x1_16 = *x0_30;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_16);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        __builtin_strcpy(&s, "\nmemsf");
        int64_t* x0_34 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_4[7], &var_70);
        int64_t* x23_3 = *x0_34;
        void* var_a0_2;
        if (x23_3 == 0)
        {
            int64_t* x0_35;
            int128_t v0_7;
            x0_35 = operator new(0x40);
            v0_7 = s;
            int64_t x9_23 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_35 = 0;
            x0_35[1] = 0;
            *(x0_35 + 0x20) = v0_7;
            x0_35[6] = var_a0_2;
            x0_35[7] = 0;
            x0_35[2] = x9_23;
            *x0_34 = x0_35;
            x23_3 = x0_35;
            int64_t x8_40 = *x21_4[7];
            int64_t* x1_18;
            if (x8_40 == 0)
            {
                x1_18 = x23_3;
            }
            else
            {
                x21_4[7] = x8_40;
                x1_18 = *x0_34;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_4[8], x1_18);
            x21_4[9] = (x21_4[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_5, x23_3[7], data_57194);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_2);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_4);
        }
        int64_t x20_6 = data_573f0;
        s_1 = 0;
        int64_t var_90_5 = 0;
        s_1 = 0x16;
        void* var_88_5 = nullptr;
        __builtin_strcpy(&*s_1[1], "SImgContain");
        int64_t* x0_40 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_5 = *x0_40;
        if (x21_5 == 0)
        {
            int64_t* x0_41;
            int128_t v0_8;
            x0_41 = operator new(0x50);
            v0_8 = s_1;
            x0_41[6] = var_88_5;
            int64_t s_5 = s;
            *(x0_41 + 0x20) = v0_8;
            x0_41[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_41[9] = 0;
            *x0_41 = 0;
            x0_41[1] = 0;
            x0_41[2] = s_5;
            x0_41[7] = &x0_41[8];
            *x0_40 = x0_41;
            x21_5 = x0_41;
            int64_t x9_27 = **&data_57340;
            int64_t* x1_21;
            if (x9_27 == 0)
            {
                x1_21 = x21_5;
            }
            else
            {
                data_57340 = x9_27;
                x1_21 = *x0_40;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_21);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        s = 6;
        *s[1] = 0x667365;
        int64_t* x0_44 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_5[7], &var_70);
        int64_t* x23_4 = *x0_44;
        void* var_a0_3;
        if (x23_4 == 0)
        {
            int64_t* x0_45;
            int128_t v0_9;
            x0_45 = operator new(0x40);
            v0_9 = s;
            int64_t x9_28 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_45 = 0;
            x0_45[1] = 0;
            *(x0_45 + 0x20) = v0_9;
            x0_45[6] = var_a0_3;
            x0_45[7] = 0;
            x0_45[2] = x9_28;
            *x0_44 = x0_45;
            x23_4 = x0_45;
            int64_t x8_52 = *x21_5[7];
            int64_t* x1_23;
            if (x8_52 == 0)
            {
                x1_23 = x23_4;
            }
            else
            {
                x21_5[7] = x8_52;
                x1_23 = *x0_44;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_5[8], x1_23);
            x21_5[9] = (x21_5[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_6, x23_4[7], 3);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_3);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_5);
        }
        s_1 = 0;
        int64_t var_90_6 = 0;
        int64_t x20_7 = data_573f8;
        s_1 = 0x10;
        void* var_88_6 = nullptr;
        __builtin_strncpy(&*s_1[1], "FileDesc", 9);
        int64_t* x0_50 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_6 = *x0_50;
        if (x21_6 == 0)
        {
            int64_t* x0_51;
            int128_t v0_10;
            x0_51 = operator new(0x50);
            v0_10 = s_1;
            x0_51[6] = var_88_6;
            int64_t s_6 = s;
            *(x0_51 + 0x20) = v0_10;
            x0_51[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_51[9] = 0;
            *x0_51 = 0;
            x0_51[1] = 0;
            x0_51[2] = s_6;
            x0_51[7] = &x0_51[8];
            *x0_50 = x0_51;
            x21_6 = x0_51;
            int64_t x9_32 = **&data_57340;
            int64_t* x1_26;
            if (x9_32 == 0)
            {
                x1_26 = x21_6;
            }
            else
            {
                data_57340 = x9_32;
                x1_26 = *x0_50;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_26);
            data_57350 = (data_57350 + 1);
        }
        __builtin_memset(&s, 0, 0x18);
        __builtin_strcpy(&s, "\ndescf");
        int64_t* x0_54 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_6[7], &var_70);
        int64_t* x23_5 = *x0_54;
        void* var_a0_4;
        if (x23_5 == 0)
        {
            int64_t* x0_55;
            int128_t v0_11;
            x0_55 = operator new(0x40);
            v0_11 = s;
            int64_t x9_33 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_55 = 0;
            x0_55[1] = 0;
            *(x0_55 + 0x20) = v0_11;
            x0_55[6] = var_a0_4;
            x0_55[7] = 0;
            x0_55[2] = x9_33;
            *x0_54 = x0_55;
            x23_5 = x0_55;
            int64_t x8_64 = *x21_6[7];
            int64_t* x1_28;
            if (x8_64 == 0)
            {
                x1_28 = x23_5;
            }
            else
            {
                x21_6[7] = x8_64;
                x1_28 = *x0_54;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_6[8], x1_28);
            x21_6[9] = (x21_6[9] + 1);
        }
        *(*arg1 + 0x368)(arg1, x20_7, x23_5[7], x0_5);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_4);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_6);
        }
        int64_t x20_8 = data_573f0;
        s_1 = 0;
        int64_t var_90_7 = 0;
        s_1 = 0x16;
        void* var_88_7 = nullptr;
        __builtin_strcpy(&*s_1[1], "SImgContain");
        int64_t* x0_60 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_57340, &s);
        int64_t* x21_7 = *x0_60;
        if (x21_7 == 0)
        {
            int64_t* x0_61;
            int128_t v0_12;
            x0_61 = operator new(0x50);
            v0_12 = s_1;
            x0_61[6] = var_88_7;
            int64_t s_7 = s;
            *(x0_61 + 0x20) = v0_12;
            x0_61[8] = 0;
            __builtin_memset(&s_1, 0, 0x18);
            x0_61[9] = 0;
            *x0_61 = 0;
            x0_61[1] = 0;
            x0_61[2] = s_7;
            x0_61[7] = &x0_61[8];
            *x0_60 = x0_61;
            x21_7 = x0_61;
            int64_t x9_37 = **&data_57340;
            int64_t* x1_31;
            if (x9_37 == 0)
            {
                x1_31 = x21_7;
            }
            else
            {
                data_57340 = x9_37;
                x1_31 = *x0_60;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_57348, x1_31);
            data_57350 = (data_57350 + 1);
        }
        s = 0xc;
        __builtin_strncpy(&*s[1], "fdescf", 0x17);
        int64_t* x0_64 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x21_7[7], &var_70);
        int64_t* x23_6 = *x0_64;
        void* var_a0_5;
        if (x23_6 == 0)
        {
            int64_t* x0_65;
            int128_t v0_13;
            x0_65 = operator new(0x40);
            v0_13 = s;
            int64_t x9_38 = var_70;
            __builtin_memset(&s, 0, 0x18);
            *x0_65 = 0;
            x0_65[1] = 0;
            *(x0_65 + 0x20) = v0_13;
            x0_65[6] = var_a0_5;
            x0_65[7] = 0;
            x0_65[2] = x9_38;
            *x0_64 = x0_65;
            x23_6 = x0_65;
            int64_t x8_76 = *x21_7[7];
            int64_t* x1_33;
            if (x8_76 == 0)
            {
                x1_33 = x23_6;
            }
            else
            {
                x21_7[7] = x8_76;
                x1_33 = *x0_64;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x21_7[8], x1_33);
            x21_7[9] = (x21_7[9] + 1);
        }
        *(*arg1 + 0x340)(arg1, x20_8, x23_6[7], data_573f8);
        if ((s & 1) != 0)
        {
            operator delete(var_a0_5);
        }
        if ((s_1 & 1) != 0)
        {
            operator delete(var_88_7);
        }
        x20_1 = data_573f0;
        x19_1 = var_78;
        if (x19_1 != 0)
        {
            goto label_1a838;
        }
    }
    else
    {
    label_1a81c:
        x20_1 = 0;
    label_1a820:
        x19_1 = var_78;
        if (x19_1 != 0)
        {
        label_1a838:
            int64_t x9_12;
            int32_t i_2;
            do
            {
                x9_12 = __ldaxr(&x19_1[1]);
                i_2 = __stlxr((x9_12 - 1), &x19_1[1]);
            } while (i_2 != 0);
            if (x9_12 == 0)
            {
                *(*x19_1 + 0x10)(x19_1);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

void sub_1b2b8(int64_t* arg1, int64_t arg2, int128_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    if (arg2 == 0)
    {
        __builtin_memset(arg3, 0, 0x18);
    }
    else
    {
        int64_t x0 = *(*arg1 + 0xf8)();
        *(*arg1 + 0x108)(arg1, x0, "getBytes", "(Ljava/lang/String;)[B");
        *(*arg1 + 0x538)(arg1, "UTF-8");
        int64_t x0_6 = _JNIEnv::CallObjectMethod();
        int32_t x0_8 = *(*arg1 + 0x558)(arg1, x0_6);
        int64_t x0_10 = *(*arg1 + 0x5c0)(arg1, x0_6, 0);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        char* var_70;
        if (x0_8 < 0xfffffff0)
        {
            int64_t x0_17 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_70);
            }
            int64_t* x0_20;
            void* x1_8;
            int64_t x2_4;
            x0_20 = _Unwind_Resume(x0_17);
            /* tailcall */
            return sub_1b4b0(x0_20, x1_8, x2_4);
        }
        int64_t x24_2 = x0_8;
        char* x25_1;
        if (x24_2 >= 0x17)
        {
            uint64_t x26_1 = ((x24_2 + 0x10) & 0xfffffffffffffff0);
            char* x0_12 = operator new(x26_1);
            x25_1 = x0_12;
            int64_t var_78_1 = x24_2;
            var_70 = x0_12;
            s = (x26_1 | 1);
        }
        else
        {
            x25_1 = (&s | 1);
            s = (x24_2 << 1);
        }
        if ((x24_2 >= 0x17 || (x24_2 < 0x17 && x24_2 != 0)))
        {
            memcpy(x25_1, x0_10, x24_2);
        }
        x25_1[x24_2] = 0;
        *(*arg1 + 0x600)(arg1, x0_6, x0_10, 2);
        *(*arg1 + 0xb8)(arg1, x0_6);
        int128_t v0_1;
        arg1 = *(*arg1 + 0xb8)(arg1, x0);
        arg3[1] = var_70;
        *arg3 = s;
    }
    if (*(x27 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void sub_1b4b0(int64_t* arg1, void* arg2, int64_t arg3)
{
    __builtin_memset(arg1, 0, 0x18);
    if (arg3 == 0)
    {
        return;
    }
    int64_t* x19_1 = arg1;
    if (arg3 < 0xaaaaaaaaaaaaaab)
    {
        void* x20_1 = arg2;
        int64_t x21_1 = (arg3 * 0x18);
        int128_t v0_1;
        arg1 = operator new(x21_1);
        int64_t* s = arg1;
        *x19_1 = arg1;
        x19_1[1] = arg1;
        x19_1[2] = (arg1 + x21_1);
        while (true)
        {
            __builtin_memset(s, 0, 0x18);
            if ((*x20_1 & 1) == 0)
            {
                v0_1 = *x20_1;
                s[2] = *(x20_1 + 0x10);
                *s = v0_1;
            }
            else
            {
                size_t x23_1 = *(x20_1 + 8);
                if (x23_1 < -0x10)
                {
                    break;
                }
                int64_t x24_1 = *(x20_1 + 0x10);
                void* x22_1;
                if (x23_1 >= 0x17)
                {
                    uint64_t x25_1 = ((x23_1 + 0x10) & 0xfffffffffffffff0);
                    void* x0_2 = operator new(x25_1);
                    s[1] = x23_1;
                    s[2] = x0_2;
                    *s = (x25_1 | 1);
                    x22_1 = x0_2;
                }
                else
                {
                    *s = (x23_1 << 1);
                    x22_1 = (s + 1);
                }
                if ((x23_1 >= 0x17 || (x23_1 < 0x17 && x23_1 != 0)))
                {
                    arg1 = memcpy(x22_1, x24_1, x23_1);
                }
                *(x22_1 + x23_1) = 0;
            }
            x20_1 = (x20_1 + 0x18);
            int64_t temp0_1 = x21_1;
            x21_1 = (x21_1 - 0x18);
            s = (x19_1[1] + 0x18);
            x19_1[1] = s;
            if (temp0_1 == 0x18)
            {
                return;
            }
        }
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    int64_t x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
    void* x21_2 = *x19_1;
    void* x0_8;
    if (x21_2 != 0)
    {
        char* x8_9 = x19_1[1];
        if (x8_9 == x21_2)
        {
            goto label_1b620;
        }
        char* x22_2 = x8_9;
        do
        {
            x22_2 = &x22_2[-0x18];
            if ((*x22_2 & 1) != 0)
            {
                operator delete(*(x8_9 - 8));
            }
            x8_9 = x22_2;
        } while (x21_2 != x22_2);
        x0_8 = *x19_1;
        goto label_1b610;
    }
    while (true)
    {
        _Unwind_Resume(x0_6);
    label_1b620:
        x0_8 = x21_2;
    label_1b610:
        x19_1[1] = x21_2;
        operator delete(x0_8);
    }
}

int64_t _JNIEnv::CallObjectMethod(int64_t* arg1, int128_t arg2 @ v0, int128_t arg3 @ v1, int128_t arg4 @ v2, int128_t arg5 @ v3, int128_t arg6 @ v4, int128_t arg7 @ v5, int128_t arg8 @ v6, int128_t arg9 @ v7)
{
    int128_t var_c0 = arg8;
    int128_t var_b0 = arg9;
    int128_t var_e0 = arg6;
    int128_t var_d0 = arg7;
    int128_t var_100 = arg4;
    int128_t var_f0 = arg5;
    int128_t var_120 = arg2;
    int128_t var_110 = arg3;
    int64_t x6;
    int64_t var_80 = x6;
    int64_t x7;
    int64_t var_78 = x7;
    int64_t x4;
    int64_t var_90 = x4;
    int64_t x5;
    int64_t var_88 = x5;
    int64_t x3;
    int64_t var_98 = x3;
    void tpidr_el0;
    uint64_t x19 = _ReadStatusReg(tpidr_el0);
    int64_t x11 = *(x19 + 0x28);
    int64_t var_30 = -0x7f00000028;
    int128_t var_70;
    int128_t* var_40 = &var_70;
    void var_a0;
    arg2 = &var_a0;
    int64_t x8_1 = *(*arg1 + 0x118);
    var_70 = &arg_0;
    int128_t var_60 = arg2;
    int64_t x0 = x8_1(arg2);
    if (*(x19 + 0x28) != x11)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

void std::__ndk1::__vector_base_common<true>::__throw_length_error() __noreturn
{
    sub_18fbc();
    /* no return */
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, void** arg2, char* arg3)
{
    int64_t* x20_1 = (arg1 + 8);
    int64_t* x24 = *x20_1;
    if (x24 == 0)
    {
        *arg2 = x20_1;
    }
    else
    {
        uint64_t x8_1 = *arg3;
        x20_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x25_1;
        if (temp0_1 == 0)
        {
            x25_1 = (x8_1 >> 1);
        }
        else
        {
            x25_1 = *(arg3 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg3 + 0x10);
        }
        else
        {
            x21_1 = &arg3[1];
        }
        while (true)
        {
            uint64_t x28_1 = x24[4];
            uint64_t x26_1;
            if ((x28_1 & 1) == 0)
            {
                x26_1 = (x28_1 >> 1);
            }
            else
            {
                x26_1 = x24[5];
            }
            uint64_t x22_1;
            if (x26_1 < x25_1)
            {
                x22_1 = x26_1;
            }
            else
            {
                x22_1 = x25_1;
            }
            int32_t x0_1;
            void* x23_1;
            if (x22_1 != 0)
            {
                if ((x28_1 & 1) != 0)
                {
                    x23_1 = x24[6];
                }
                else
                {
                    x23_1 = (x24 + 0x21);
                }
                x0_1 = memcmp(x21_1, x23_1, x22_1);
            }
            int64_t* x8_2;
            if ((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)))
            {
                if (x25_1 < x26_1)
                {
                label_1b77c:
                    x8_2 = *x24;
                    if (x8_2 == 0)
                    {
                        *arg2 = x24;
                        x20_1 = x24;
                        break;
                    }
                    x20_1 = x24;
                    goto label_1b724;
                }
                if (x22_1 != 0)
                {
                    if ((x28_1 & 1) != 0)
                    {
                        x23_1 = x24[6];
                    }
                    else
                    {
                        x23_1 = (x24 + 0x21);
                    }
                    goto label_1b7a8;
                }
            }
            if ((x22_1 != 0 && x0_1 != 0))
            {
                if ((x0_1 & 0x80000000) != 0)
                {
                    goto label_1b77c;
                }
            label_1b7a8:
                int32_t x0_3 = memcmp(x23_1, x21_1, x22_1);
                if (x0_3 != 0)
                {
                    if ((x0_3 & 0x80000000) == 0)
                    {
                        goto label_1b7cc;
                    }
                    goto label_1b7c4;
                }
            }
            if ((((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)) && x25_1 >= x26_1) || (x22_1 != 0 && x0_1 != 0)))
            {
                if (x26_1 >= x25_1)
                {
                label_1b7cc:
                    *arg2 = x24;
                    break;
                }
            label_1b7c4:
                x20_1 = &x24[1];
                x8_2 = *x20_1;
                if (x8_2 == 0)
                {
                    goto label_1b7cc;
                }
            label_1b724:
                x24 = x8_2;
            }
        }
    }
    return x20_1;
}

void std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(int64_t arg1, int64_t* arg2)
{
    char x8;
    if (arg2 == arg1)
    {
        x8 = 1;
    }
    else
    {
        x8 = 0;
    }
    arg2[3] = x8;
    if (arg2 != arg1)
    {
        int64_t* x8_2;
        do
        {
            int64_t* x9_1 = arg2[2];
            void* x10_2 = &x9_1[3];
            if (*x10_2 != 0)
            {
                break;
            }
            x8_2 = x9_1[2];
            void* x12_1 = *x8_2;
            char* x12_2;
            if (x12_1 == x9_1)
            {
                void* x12_3 = x8_2[1];
                if (x12_3 != 0)
                {
                    x12_2 = (x12_3 + 0x18);
                }
                if ((x12_3 == 0 || (x12_3 != 0 && *x12_2 != 0)))
                {
                    if (*x9_1 != arg2)
                    {
                        int64_t** x10_9 = x9_1[1];
                        int64_t* x11_4 = *x10_9;
                        x9_1[1] = x11_4;
                        if (x11_4 != 0)
                        {
                            x11_4[2] = x9_1;
                            x8_2 = x9_1[2];
                        }
                        x10_9[2] = x8_2;
                        int64_t*** x8_4 = x9_1[2];
                        int64_t x11_6;
                        if (*x8_4 == x9_1)
                        {
                            x11_6 = 0;
                        }
                        else
                        {
                            x11_6 = 8;
                        }
                        *(x8_4 + x11_6) = x10_9;
                        *x10_9 = x9_1;
                        x9_1[2] = x10_9;
                        x8_2 = x10_9[2];
                        x10_2 = &x10_9[3];
                    }
                    *x10_2 = 1;
                    void* x9_4 = *x8_2;
                    x8_2[3] = 0;
                    void* x10_10 = *(x9_4 + 8);
                    *x8_2 = x10_10;
                    if (x10_10 != 0)
                    {
                        *(x10_10 + 0x10) = x8_2;
                    }
                    *(x9_4 + 0x10) = x8_2[2];
                    void** x10_12 = x8_2[2];
                    int64_t x11_8;
                    if (*x10_12 == x8_2)
                    {
                        x11_8 = 0;
                    }
                    else
                    {
                        x11_8 = 8;
                    }
                    *(x10_12 + x11_8) = x9_4;
                    *(x9_4 + 8) = x8_2;
                    x8_2[2] = x9_4;
                    return;
                }
            }
            else
            {
                if (x12_1 != 0)
                {
                    x12_2 = (x12_1 + 0x18);
                }
                if ((x12_1 == 0 || (x12_1 != 0 && *x12_2 != 0)))
                {
                    if (*x9_1 == arg2)
                    {
                        void* x10_3 = arg2[1];
                        *x9_1 = x10_3;
                        if (x10_3 != 0)
                        {
                            *(x10_3 + 0x10) = x9_1;
                            x8_2 = x9_1[2];
                        }
                        arg2[2] = x8_2;
                        int64_t* x8_3 = x9_1[2];
                        int64_t x10_5;
                        if (*x8_3 == x9_1)
                        {
                            x10_5 = 0;
                        }
                        else
                        {
                            x10_5 = 8;
                        }
                        *(x8_3 + x10_5) = arg2;
                        arg2[1] = x9_1;
                        x9_1[2] = arg2;
                        x8_2 = arg2[2];
                        x10_2 = &arg2[3];
                    }
                    *x10_2 = 1;
                    int64_t** x9_3 = x8_2[1];
                    x8_2[3] = 0;
                    int64_t* x10_6 = *x9_3;
                    x8_2[1] = x10_6;
                    if (x10_6 != 0)
                    {
                        x10_6[2] = x8_2;
                    }
                    x9_3[2] = x8_2[2];
                    int64_t* x10_8 = x8_2[2];
                    int64_t x11_2;
                    if (*x10_8 == x8_2)
                    {
                        x11_2 = 0;
                    }
                    else
                    {
                        x11_2 = 8;
                    }
                    *(x10_8 + x11_2) = x9_3;
                    *x9_3 = x8_2;
                    x8_2[2] = x9_3;
                    return;
                }
            }
            char x9_2;
            if (x8_2 == arg1)
            {
                x9_2 = 1;
            }
            else
            {
                x9_2 = 0;
            }
            arg2 = x8_2;
            *x10_2 = 1;
            x8_2[3] = x9_2;
            *x12_2 = 1;
        } while (x8_2 != arg1);
    }
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, void** arg2, char* arg3)
{
    int64_t* x20_1 = (arg1 + 8);
    int64_t* x24 = *x20_1;
    if (x24 == 0)
    {
        *arg2 = x20_1;
    }
    else
    {
        uint64_t x8_1 = *arg3;
        x20_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x25_1;
        if (temp0_1 == 0)
        {
            x25_1 = (x8_1 >> 1);
        }
        else
        {
            x25_1 = *(arg3 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg3 + 0x10);
        }
        else
        {
            x21_1 = &arg3[1];
        }
        while (true)
        {
            uint64_t x28_1 = x24[4];
            uint64_t x26_1;
            if ((x28_1 & 1) == 0)
            {
                x26_1 = (x28_1 >> 1);
            }
            else
            {
                x26_1 = x24[5];
            }
            uint64_t x22_1;
            if (x26_1 < x25_1)
            {
                x22_1 = x26_1;
            }
            else
            {
                x22_1 = x25_1;
            }
            int32_t x0_1;
            void* x23_1;
            if (x22_1 != 0)
            {
                if ((x28_1 & 1) != 0)
                {
                    x23_1 = x24[6];
                }
                else
                {
                    x23_1 = (x24 + 0x21);
                }
                x0_1 = memcmp(x21_1, x23_1, x22_1);
            }
            int64_t* x8_2;
            if ((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)))
            {
                if (x25_1 < x26_1)
                {
                label_1ba50:
                    x8_2 = *x24;
                    if (x8_2 == 0)
                    {
                        *arg2 = x24;
                        x20_1 = x24;
                        break;
                    }
                    x20_1 = x24;
                    goto label_1b9f8;
                }
                if (x22_1 != 0)
                {
                    if ((x28_1 & 1) != 0)
                    {
                        x23_1 = x24[6];
                    }
                    else
                    {
                        x23_1 = (x24 + 0x21);
                    }
                    goto label_1ba7c;
                }
            }
            if ((x22_1 != 0 && x0_1 != 0))
            {
                if ((x0_1 & 0x80000000) != 0)
                {
                    goto label_1ba50;
                }
            label_1ba7c:
                int32_t x0_3 = memcmp(x23_1, x21_1, x22_1);
                if (x0_3 != 0)
                {
                    if ((x0_3 & 0x80000000) == 0)
                    {
                        goto label_1baa0;
                    }
                    goto label_1ba98;
                }
            }
            if ((((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)) && x25_1 >= x26_1) || (x22_1 != 0 && x0_1 != 0)))
            {
                if (x26_1 >= x25_1)
                {
                label_1baa0:
                    *arg2 = x24;
                    break;
                }
            label_1ba98:
                x20_1 = &x24[1];
                x8_2 = *x20_1;
                if (x8_2 == 0)
                {
                    goto label_1baa0;
                }
            label_1b9f8:
                x24 = x8_2;
            }
        }
    }
    return x20_1;
}

int64_t _JNIEnv::NewObject(int64_t* arg1, int128_t arg2 @ v0, int128_t arg3 @ v1, int128_t arg4 @ v2, int128_t arg5 @ v3, int128_t arg6 @ v4, int128_t arg7 @ v5, int128_t arg8 @ v6, int128_t arg9 @ v7)
{
    int128_t var_c0 = arg8;
    int128_t var_b0 = arg9;
    int128_t var_e0 = arg6;
    int128_t var_d0 = arg7;
    int128_t var_100 = arg4;
    int128_t var_f0 = arg5;
    int128_t var_120 = arg2;
    int128_t var_110 = arg3;
    int64_t x6;
    int64_t var_80 = x6;
    int64_t x7;
    int64_t var_78 = x7;
    int64_t x4;
    int64_t var_90 = x4;
    int64_t x5;
    int64_t var_88 = x5;
    int64_t x3;
    int64_t var_98 = x3;
    void tpidr_el0;
    uint64_t x19 = _ReadStatusReg(tpidr_el0);
    int64_t x11 = *(x19 + 0x28);
    int64_t var_30 = -0x7f00000028;
    int128_t var_70;
    int128_t* var_40 = &var_70;
    void var_a0;
    arg2 = &var_a0;
    int64_t x8_1 = *(*arg1 + 0xe8);
    var_70 = &arg_0;
    int128_t var_60 = arg2;
    int64_t x0 = x8_1(arg2);
    if (*(x19 + 0x28) != x11)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

int64_t std::__ndk1::__shared_ptr_emplace<PuduCamera::MarkerCamera, std::__ndk1::allocator<PuduCamera::MarkerCamera> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<PuduCamera::MarkerCamera, std::__ndk1::allocator<PuduCamera::MarkerCamera> > + 0x10);
    PuduCamera::MarkerCamera::~MarkerCamera();
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t std::__ndk1::__shared_ptr_emplace<PuduCamera::MarkerCamera, std::__ndk1::allocator<PuduCamera::MarkerCamera> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<PuduCamera::MarkerCamera, std::__ndk1::allocator<PuduCamera::MarkerCamera> > + 0x10);
    PuduCamera::MarkerCamera::~MarkerCamera();
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__shared_ptr_emplace<PuduCamera::MarkerCamera, std::__ndk1::allocator<PuduCamera::MarkerCamera> >::__on_zero_shared(int64_t arg1)
{
    /* tailcall */
    return PuduCamera::MarkerCamera::~MarkerCamera();
}

int64_t std::__ndk1::__shared_ptr_emplace<PuduCamera::MarkerCamera, std::__ndk1::allocator<PuduCamera::MarkerCamera> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t* std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        void* x22_1 = (arg1 + *x8_2);
        int32_t x5_1 = *(x22_1 + 0x90);
        int64_t* x23_1 = *(x22_1 + 0x28);
        int32_t x26_1 = *(x22_1 + 8);
        if (x5_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            void var_60;
            char x0_4 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x5_1 = x0_4;
            *(x22_1 + 0x90) = x5_1;
        }
        int64_t x3_1 = (arg2 + arg3);
        int64_t x2;
        if ((x26_1 & 0xb0) == 0x20)
        {
            x2 = x3_1;
        }
        else
        {
            x2 = arg2;
        }
        if (sub_1bd94(x23_1, arg2, x2, x3_1, x22_1, x5_1) == 0)
        {
            void* x0_7 = (arg1 + *(*arg1 - 0x18));
            *(x0_7 + 0x20);
            std::__ndk1::ios_base::clear(x0_7);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* sub_1bd94(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, void* arg5, int32_t arg6)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    int64_t* x19 = arg1;
    if (arg1 != 0)
    {
        int64_t x8_1 = *(arg5 + 0x18);
        int64_t x9_1 = (arg4 - arg2);
        int64_t x25_1 = (arg3 - arg2);
        size_t x23_1;
        if (x8_1 > x9_1)
        {
            x23_1 = (x8_1 - x9_1);
        }
        else
        {
            x23_1 = 0;
        }
        int64_t x0_1;
        if (x25_1 >= 1)
        {
            x0_1 = *(*x19 + 0x60)(x19);
            if (x0_1 != x25_1)
            {
            label_1bef0:
                x19 = nullptr;
            }
        }
        if ((x25_1 < 1 || (x25_1 >= 1 && x0_1 == x25_1)))
        {
            if (x23_1 >= 1)
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                void* var_70_1;
                char* x25_2;
                void* x26_1;
                if (x23_1 >= 0x17)
                {
                    uint64_t x26_2 = ((x23_1 + 0x10) & 0xfffffffffffffff0);
                    void* x0_3 = operator new(x26_2);
                    x25_2 = x0_3;
                    size_t var_78_1 = x23_1;
                    var_70_1 = x0_3;
                    s = (x26_2 | 1);
                    x26_1 = (&s | 1);
                }
                else
                {
                    x26_1 = (&s | 1);
                    x25_2 = x26_1;
                    s = (x23_1 << 1);
                }
                memset(x25_2, arg6, x23_1);
                x25_2[x23_1] = 0;
                void* x1_1;
                if ((s & 1) == 0)
                {
                    x1_1 = x26_1;
                }
                else
                {
                    x1_1 = var_70_1;
                }
                int64_t x0_6 = *(*x19 + 0x60)(x19, x1_1, x23_1);
                if ((s & 1) != 0)
                {
                    operator delete(var_70_1);
                }
                if (x0_6 != x23_1)
                {
                    goto label_1bef0;
                }
            }
            int64_t x22_2 = (arg4 - arg3);
            if (x22_2 >= 1)
            {
                if (*(*x19 + 0x60)(x19, arg3, x22_2) != x22_2)
                {
                    goto label_1bef0;
                }
                goto label_1bee8;
            }
        label_1bee8:
            *(arg5 + 0x18) = 0;
        }
    }
    if (*(x27 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

void std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry(void* arg1)
{
    int64_t* x8 = *(arg1 + 8);
    void* x8_1 = (x8 + *(*x8 - 0x18));
    if ((*(x8_1 + 0x28) != 0 && (*(x8_1 + 0x20) == 0 && (*(x8_1 + 9) & 0x20) != 0)))
    {
        void* x19_1 = arg1;
        if ((std::uncaught_exception() & 1) == 0)
        {
            int64_t* x8_3 = *(x19_1 + 8);
            if (*(**((x8_3 + *(*x8_3 - 0x18)) + 0x28) + 0x30)() == 0xffffffff)
            {
                int64_t* x8_7 = *(x19_1 + 8);
                void* x0_1 = (x8_7 + *(*x8_7 - 0x18));
                *(x0_1 + 0x20);
                std::__ndk1::ios_base::clear(x0_1);
            }
        }
    }
}

void sub_1bfe4(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t* x8_2 = (*arg1 - 0x18);
    if (*((arg1 + *x8_2) + 0x28) != 0)
    {
        char var_48_1 = 0;
        int64_t* var_40_1 = arg1;
        void* x9_4 = (arg1 + *x8_2);
        if (*(x9_4 + 0x20) == 0)
        {
            if (*(x9_4 + 0x88) != 0)
            {
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
                x8_2 = (*arg1 - 0x18);
            }
            char var_48_2 = 1;
            if (*(**((arg1 + *x8_2) + 0x28) + 0x30)() == 0xffffffff)
            {
                void* x0_3 = (arg1 + *(*arg1 - 0x18));
                *(x0_3 + 0x20);
                std::__ndk1::ios_base::clear(x0_3);
            }
        }
        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        int32_t x26_1 = *((arg1 + *x8_2) + 8);
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        int32_t x8_9 = (x26_1 & 0x4a);
        bool z_1;
        if (x8_9 != 8)
        {
            z_1 = x8_9 == 0x40;
        }
        else
        {
            z_1 = true;
        }
        uint64_t x4_1;
        if (z_1)
        {
            x4_1 = arg2;
        }
        else
        {
            x4_1 = arg2;
        }
        if (*(*x0_3 + 0x20)(x0_3, x23_1, x22_1, x3_1, x4_1) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int64_t arg2 @ v0)
{
    int64_t v8;
    int64_t var_50 = v8;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x21_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x21_1 + 0x90);
        int64_t x22_1 = *(x21_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x21_1 + 0x90) = x3_1;
        }
        int128_t v0;
        v0 = arg2;
        if (*(*x0_3 + 0x40)(x0_3, x22_1, x21_1, x3_1, v0) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        if (*(*x0_3 + 0x18)(x0_3, x23_1, x22_1, x3_1, (arg2 & 1)) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        if (*(*x0_3 + 0x30)(x0_3, x23_1, x22_1, x3_1, arg2) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(char* arg1, int64_t arg2, size_t arg3)
{
    uint32_t x8 = *arg1;
    int64_t x25;
    if ((x8 & 1) != 0)
    {
        x25 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    else
    {
        x25 = 0x16;
    }
    if ((((x8 & 1) != 0 && x25 >= arg3) || ((x8 & 1) == 0 && 0x16 >= arg3)))
    {
        void* x22;
        if ((x8 & 1) != 0)
        {
            x22 = *(arg1 + 0x10);
            if (arg3 == 0)
            {
                goto label_1c8ec;
            }
        }
        else
        {
            x22 = &arg1[1];
            if (arg3 == 0)
            {
                goto label_1c8ec;
            }
        }
        memmove(x22, arg2, arg3);
    label_1c8ec:
        *(x22 + arg3) = 0;
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = arg3;
        }
        else
        {
            *arg1 = (arg3 << 1);
        }
    label_1c99c:
        return arg1;
    }
    if ((((x8 & 1) != 0 && x25 < arg3) || ((x8 & 1) == 0 && 0x16 < arg3)))
    {
        if ((-0x12 - x25) < (arg3 - x25))
        {
            /* tailcall */
            return std::__ndk1::map<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::less<PuduCamera::ErrorCode>, std::__ndk1::allocator<std::__ndk1::pair<PuduCamera::ErrorCode const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::~map(std::__ndk1::__basic_string_common<true>::__throw_length_error());
        }
        void* x22_1;
        if ((x8 & 1) != 0)
        {
            x22_1 = *(arg1 + 0x10);
        }
        else
        {
            x22_1 = &arg1[1];
        }
        uint64_t x23_1;
        if (x25 > 0x7fffffffffffffe6)
        {
            x23_1 = -0x11;
        }
        else
        {
            size_t x8_3 = (x25 << 1);
            size_t x8_4;
            if (x8_3 > arg3)
            {
                x8_4 = x8_3;
            }
            else
            {
                x8_4 = arg3;
            }
            if (x8_4 >= 0x17)
            {
                x23_1 = ((x8_4 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x23_1 = 0x17;
            }
        }
        int64_t x0_2 = operator new(x23_1);
        memcpy(x0_2, arg2, arg3);
        if (x25 != 0x16)
        {
            operator delete(x22_1);
        }
        *(arg1 + 8) = arg3;
        *(arg1 + 0x10) = x0_2;
        *arg1 = (x23_1 | 1);
        *(x0_2 + arg3) = 0;
        goto label_1c99c;
    }
}

int64_t std::__ndk1::map<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::less<PuduCamera::ErrorCode>, std::__ndk1::allocator<std::__ndk1::pair<PuduCamera::ErrorCode const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::~map(std::__ndk1::fpos<mbstate_t>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
}

int64_t PuduCamera::MarkerCamera::MarkerCamera(char* arg1)
{
    *(arg1 + 4) = data_3c5e0;
    *arg1 = 0;
    *(arg1 + 0x18) = 0;
    *(arg1 + 0x20) = 0xffffffff;
    __builtin_memset(&arg1[0x40], 0, 0x20);
    *(arg1 + 0x30) = {0};
    *arg1 = 0;
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&arg1[0x48], "no abnormality detected");
}

int64_t sub_1ca1c(int64_t arg1, void* arg2 @ x19, char* arg3 @ x20, char* arg4 @ x21)
{
    if ((*arg3 & 1) != 0)
    {
        operator delete(*(arg2 + 0x58));
    }
    if ((*arg4 & 1) != 0)
    {
        operator delete(*(arg2 + 0x40));
    }
    int64_t* x0_2 = *(arg2 + 0x18);
    *(arg2 + 0x18) = 0;
    if (x0_2 != 0)
    {
        *(*x0_2 + 8)();
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::~MarkerCamera();
}

int64_t* PuduCamera::MarkerCamera::~MarkerCamera(void* arg1)
{
    if ((*(arg1 + 0x48) & 1) != 0)
    {
        operator delete(*(arg1 + 0x58));
    }
    if ((*(arg1 + 0x30) & 1) != 0)
    {
        operator delete(*(arg1 + 0x40));
    }
    int64_t* x0_2 = *(arg1 + 0x18);
    *(arg1 + 0x18) = 0;
    if (x0_2 == 0)
    {
        return x0_2;
    }
    /* jump -> *(*x0_2 + 8) */
}

int128_t PuduCamera::MarkerCamera::setParam(void* arg1, int128_t* arg2)
{
    int128_t v0 = *arg2;
    *(arg1 + 4) = v0;
    return v0;
}

int64_t PuduCamera::MarkerCamera::loadParamFile(int64_t* arg1, char* arg2, int32_t arg3, struct vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >* const arg4 @ x27)
{
    struct vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >* const var_58 = arg4;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    uint32_t x9 = *data_57408;
    int32_t var_338 = data_57400;
    char* x23;
    if ((x9 & 1) == 0)
    {
        x23 = &*(data_57408 + 1);
    }
    else
    {
        x23 = *(data_57412 + 6);
    }
    int64_t s_9;
    __builtin_memset(&s_9, 0, 0x18);
    size_t x0_1 = strlen(x23);
    if (x0_1 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_320_1;
        void* x24_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x25_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x25_1);
            x24_1 = x0_3;
            size_t var_328_1 = x0_1;
            var_320_1 = x0_3;
            s_9 = (x25_1 | 1);
        }
        else
        {
            x24_1 = &*s_9[1];
            s_9 = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x24_1, x23, x0_1);
        }
        *(x24_1 + x0_1) = 0;
        int32_t x0_6;
        int128_t v0_1;
        x0_6 = g3::logLevel(&var_338);
        char (* var_390)[0xe];
        char* var_318;
        int128_t var_1d0;
        int64_t (* var_110)();
        uint64_t x20_2;
        int32_t x20_3;
        if ((x0_6 & 1) == 0)
        {
            x20_3 = 0;
            if ((s_9 & 1) != 0)
            {
            label_1cc68:
                operator delete(var_320_1);
                if ((x20_3 & 1) != 0)
                {
                    goto label_1cc98;
                }
                goto label_1ccb4;
            }
        }
        else
        {
            int64_t s_8;
            __builtin_memset(&s_8, 0, 0x18);
            x20_2 = *PuduCamera::MarkerCamera::TAG;
            size_t x0_8 = strlen(x20_2);
            char* var_340;
            if (x0_8 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1d720:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1d728:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1d730:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1d738:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1d740:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1d748:
                int64_t x0_105 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                int64_t x21_7 = _Unwind_Resume(x0_105);
                if ((s_8 & 1) != 0)
                {
                    operator delete(var_340);
                    if ((s_9 & 1) == 0)
                    {
                        goto label_1d90c;
                    }
                    goto label_1d914;
                }
                int64_t s_2;
                int64_t s_3;
                void* var_3f8_1;
                void* x0_118;
                int32_t x0_125;
                size_t x0_127;
                uint64_t x22_11;
                while (true)
                {
                    if ((s_9 & 1) == 0)
                    {
                    label_1d90c:
                        _Unwind_Resume(x21_7);
                    }
                label_1d914:
                    operator delete(var_320_1);
                    void* exceptionObject_1;
                    int32_t x1_33;
                    exceptionObject_1 = _Unwind_Resume(x21_7);
                    void* exceptionObject = exceptionObject_1;
                    if (x1_33 == 1)
                    {
                        x0_118 = __cxa_begin_catch(exceptionObject);
                        char* x23_7;
                        if ((*data_57488 & 1) == 0)
                        {
                            x23_7 = &*(data_57488 + 1);
                        }
                        else
                        {
                            x23_7 = *(data_57492 + 6);
                        }
                        int32_t var_410 = data_57480;
                        __builtin_memset(&s_3, 0, 0x18);
                        size_t x0_120 = strlen(x23_7);
                        if (x0_120 < -0x10)
                        {
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        }
                        else
                        {
                            void* x24_8;
                            if (x0_120 >= 0x17)
                            {
                                uint64_t x25_5 = ((x0_120 + 0x10) & 0xfffffffffffffff0);
                                void* x0_122 = operator new(x25_5);
                                x24_8 = x0_122;
                                size_t var_400_1 = x0_120;
                                var_3f8_1 = x0_122;
                                s_3 = (x25_5 | 1);
                            }
                            else
                            {
                                x24_8 = &*s_3[1];
                                s_3 = (x0_120 << 1);
                            }
                            if ((x0_120 >= 0x17 || (x0_120 < 0x17 && x0_120 != 0)))
                            {
                                memcpy(x24_8, x23_7, x0_120);
                            }
                            *(x24_8 + x0_120) = 0;
                            x0_125 = g3::logLevel(&var_410);
                            if ((x0_125 & 1) == 0)
                            {
                                break;
                            }
                            __builtin_memset(&s_2, 0, 0x18);
                            x22_11 = *PuduCamera::MarkerCamera::TAG;
                            x0_127 = strlen(x22_11);
                            if (x0_127 >= -0x10)
                            {
                                break;
                            }
                        }
                        exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        LogCapture::~LogCapture();
                        __cxa_end_catch();
                    }
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_390);
                    var_1d0 = (arg4 + 0x18);
                    var_110 = (arg4 + 0x68);
                    void* var_1c0_4 = (arg4 + 0x40);
                    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                    std::__ndk1::ios_base::~ios_base();
                    x21_7 = _Unwind_Resume(exceptionObject);
                }
                int32_t x22_12;
                if ((x0_125 & 1) == 0)
                {
                    x22_12 = 0;
                    if ((s_3 & 1) != 0)
                    {
                    label_1daa4:
                        operator delete(var_3f8_1);
                        if ((x22_12 & 1) != 0)
                        {
                            goto label_1dad4;
                        }
                        goto label_1db04;
                    }
                }
                else
                {
                    void* var_418_1;
                    void* x24_9;
                    if (x0_127 >= 0x17)
                    {
                        uint64_t x25_6 = ((x0_127 + 0x10) & 0xfffffffffffffff0);
                        void* x0_129 = operator new(x25_6);
                        x24_9 = x0_129;
                        size_t var_420_1 = x0_127;
                        var_418_1 = x0_129;
                        s_2 = (x25_6 | 1);
                    }
                    else
                    {
                        x24_9 = (&s_2 | 1);
                        s_2 = (x0_127 << 1);
                    }
                    if ((x0_127 >= 0x17 || (x0_127 < 0x17 && x0_127 != 0)))
                    {
                        memcpy(x24_9, x22_11, x0_127);
                    }
                    *(x24_9 + x0_127) = 0;
                    x22_12 = g3::logTag(&s_2);
                    if ((s_2 & 1) != 0)
                    {
                        operator delete(var_418_1);
                        if ((s_3 & 1) != 0)
                        {
                            goto label_1daa4;
                        }
                    }
                    else if ((s_3 & 1) != 0)
                    {
                        goto label_1daa4;
                    }
                }
                if ((x22_12 & 1) == 0)
                {
                    goto label_1db04;
                }
            label_1dad4:
                LogCapture::LogCapture(&var_318, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                *(*x0_118 + 0x10)(x0_118);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            label_1db04:
                __cxa_end_catch();
                goto label_1d5e4;
            }
            char* x24_2;
            if (x0_8 >= 0x17)
            {
                uint64_t x25_2 = ((x0_8 + 0x10) & 0xfffffffffffffff0);
                char* x0_10 = operator new(x25_2);
                x24_2 = x0_10;
                size_t var_348_1 = x0_8;
                var_340 = x0_10;
                s_8 = (x25_2 | 1);
            }
            else
            {
                x24_2 = (&s_8 | 1);
                s_8 = (x0_8 << 1);
            }
            if ((x0_8 >= 0x17 || (x0_8 < 0x17 && x0_8 != 0)))
            {
                memcpy(x24_2, x20_2, x0_8);
            }
            x24_2[x0_8] = 0;
            int32_t x0_13;
            x0_13 = g3::logTag(&s_8);
            x20_3 = x0_13;
            if ((s_8 & 1) != 0)
            {
                operator delete(var_340);
                if ((s_9 & 1) != 0)
                {
                    goto label_1cc68;
                }
            }
            else if ((s_9 & 1) != 0)
            {
                goto label_1cc68;
            }
        }
        if ((x20_3 & 1) == 0)
        {
            goto label_1ccb4;
        }
    label_1cc98:
        LogCapture::LogCapture(&var_1d0, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
        LogCapture::capturef();
        LogCapture::~LogCapture();
    label_1ccb4:
        uint64_t x8_13 = *arg2;
        uint64_t x8_14;
        if ((x8_13 & 1) == 0)
        {
            x8_14 = (x8_13 >> 1);
        }
        else
        {
            x8_14 = *(arg2 + 8);
        }
        int64_t x0_93;
        if (x8_14 != 0)
        {
            arg4 = _vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >;
            v0_1 = 0;
            *v0_1[8] = 0;
            v0_1 = (construction_vtable_for_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x18);
            void* var_1c0_1 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
            var_110 = (construction_vtable_for_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
            var_1d0 = v0_1;
            std::__ndk1::ios_base::init(&var_110);
            int64_t var_88_1 = 0;
            int32_t var_80_1 = 0xffffffff;
            var_1d0 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x18);
            var_110 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x68);
            void* var_1c0_2 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf();
            char var_398 = 0;
            var_390 = nullptr;
            int64_t var_140;
            int64_t x0_23;
            if (var_140 == 0)
            {
                void* x0_22;
                if ((*arg2 & 1) != 0)
                {
                    x0_22 = *(arg2 + 0x10);
                }
                else
                {
                    x0_22 = &arg2[1];
                }
                x0_23 = fopen(x0_22, &data_3cef4);
                var_140 = x0_23;
            }
            if ((var_140 != 0 || (var_140 == 0 && x0_23 == 0)))
            {
                void* x0_18 = (&var_1d0 + *(var_1d0 - 0x18));
                *(x0_18 + 0x20);
                std::__ndk1::ios_base::clear(x0_18);
            }
            if ((var_140 == 0 && x0_23 != 0))
            {
                int32_t var_120_1 = 0xc;
                std::__ndk1::ios_base::clear((&var_1d0 + *(var_1d0 - 0x18)));
            }
            if (var_140 != 0)
            {
                nlohmann::operator>>(&var_1d0, &var_398);
                uint32_t x8_21 = var_398;
                var_318 = &var_398;
                int64_t var_310_1 = 0;
                int64_t var_308_1 = 0;
                int64_t var_300_1 = -0x8000000000000000;
                if (x8_21 == 1)
                {
                    char (* x0_27)[0xe] = var_390;
                    char* var_310_2 = &*x0_27[8];
                    int64_t x0_28 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xc]>(x0_27);
                    x8_21 = var_398;
                    int64_t var_310_3 = x0_28;
                }
                if ((x8_21 != 1 && x8_21 != 2))
                {
                    int64_t var_300_2 = 1;
                }
                char* var_3b8;
                if ((x8_21 == 1 || (x8_21 != 1 && x8_21 != 2)))
                {
                    var_3b8 = &var_398;
                    int64_t var_3b0_2 = 0;
                    int64_t var_3a8_2 = 0;
                    int64_t var_3a0_2 = -0x8000000000000000;
                    if (x8_21 != 2)
                    {
                        if (x8_21 != 1)
                        {
                            int64_t var_3a0_3 = 1;
                        }
                        else
                        {
                            char* var_3b0_3 = &*var_390[8];
                        }
                    }
                }
                if (x8_21 == 2)
                {
                    int64_t x8_23 = *(var_390 + 8);
                    var_3b8 = &var_398;
                    int64_t var_3b0_1 = 0;
                    int64_t var_3a8_1 = 0;
                    int64_t var_3a0_1 = -0x8000000000000000;
                    int64_t var_308_2 = x8_23;
                }
                if ((x8_21 == 2 || ((x8_21 == 1 || (x8_21 != 1 && x8_21 != 2)) && x8_21 == 2)))
                {
                    int64_t var_3a8_3 = *(var_390 + 8);
                }
                int32_t x22_4;
                if ((nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(&var_318) & 1) == 0)
                {
                    nlohmann::detail::from_json<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, int32_t, 0>(nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::operator[]<char const>(&var_398), &var_3b8);
                    x22_4 = var_3b8;
                }
                else
                {
                    x22_4 = 0x500;
                }
                uint32_t x8_46 = var_398;
                var_318 = &var_398;
                int64_t var_310_4 = 0;
                int64_t var_308_3 = 0;
                int64_t var_300_3 = -0x8000000000000000;
                if (x8_46 == 1)
                {
                    char (* x0_47)[0xe] = var_390;
                    char* var_310_5 = &*x0_47[8];
                    int64_t x0_48 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xd]>(x0_47);
                    x8_46 = var_398;
                    int64_t var_310_6 = x0_48;
                }
                if ((x8_46 != 1 && x8_46 != 2))
                {
                    int64_t var_300_4 = 1;
                }
                if ((x8_46 == 1 || (x8_46 != 1 && x8_46 != 2)))
                {
                    var_3b8 = &var_398;
                    int64_t var_3b0_5 = 0;
                    int64_t var_3a8_5 = 0;
                    int64_t var_3a0_5 = -0x8000000000000000;
                    if (x8_46 != 2)
                    {
                        if (x8_46 != 1)
                        {
                            int64_t var_3a0_6 = 1;
                        }
                        else
                        {
                            char* var_3b0_6 = &*var_390[8];
                        }
                    }
                }
                if (x8_46 == 2)
                {
                    int64_t x8_44 = *(var_390 + 8);
                    var_3b8 = &var_398;
                    int64_t var_3b0_4 = 0;
                    int64_t var_3a8_4 = 0;
                    int64_t var_3a0_4 = -0x8000000000000000;
                    int64_t var_308_4 = x8_44;
                }
                if ((x8_46 == 2 || ((x8_46 == 1 || (x8_46 != 1 && x8_46 != 2)) && x8_46 == 2)))
                {
                    int64_t var_3a8_6 = *(var_390 + 8);
                }
                int32_t x23_5;
                if ((nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(&var_318) & 1) == 0)
                {
                    nlohmann::detail::from_json<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, int32_t, 0>(nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::operator[]<char const>(&var_398), &var_3b8);
                    x23_5 = var_3b8;
                }
                else
                {
                    x23_5 = 0x2d0;
                }
                uint32_t x8_54 = var_398;
                var_318 = &var_398;
                int64_t var_310_7 = 0;
                int64_t var_308_5 = 0;
                int64_t var_300_5 = -0x8000000000000000;
                if (x8_54 == 1)
                {
                    char (* x0_53)[0xe] = var_390;
                    char* var_310_8 = &*x0_53[8];
                    int64_t x0_54 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xa]>(x0_53);
                    x8_54 = var_398;
                    int64_t var_310_9 = x0_54;
                }
                if ((x8_54 != 1 && x8_54 != 2))
                {
                    int64_t var_300_6 = 1;
                }
                if ((x8_54 == 1 || (x8_54 != 1 && x8_54 != 2)))
                {
                    var_3b8 = &var_398;
                    int64_t var_3b0_8 = 0;
                    int64_t var_3a8_8 = 0;
                    int64_t var_3a0_8 = -0x8000000000000000;
                    if (x8_54 != 2)
                    {
                        if (x8_54 != 1)
                        {
                            int64_t var_3a0_9 = 1;
                        }
                        else
                        {
                            char* var_3b0_9 = &*var_390[8];
                        }
                    }
                }
                if (x8_54 == 2)
                {
                    int64_t x8_52 = *(var_390 + 8);
                    var_3b8 = &var_398;
                    int64_t var_3b0_7 = 0;
                    int64_t var_3a8_7 = 0;
                    int64_t var_3a0_7 = -0x8000000000000000;
                    int64_t var_308_6 = x8_52;
                }
                if ((x8_54 == 2 || ((x8_54 == 1 || (x8_54 != 1 && x8_54 != 2)) && x8_54 == 2)))
                {
                    int64_t var_3a8_9 = *(var_390 + 8);
                }
                int32_t x24_4;
                if ((nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(&var_318) & 1) == 0)
                {
                    nlohmann::detail::from_json<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, int32_t, 0>(nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::operator[]<char const>(&var_398), &var_3b8);
                    x24_4 = var_3b8;
                }
                else
                {
                    x24_4 = 0xa;
                }
                uint32_t x8_62 = var_398;
                var_318 = &var_398;
                int64_t var_310_10 = 0;
                int64_t var_308_7 = 0;
                int64_t var_300_7 = -0x8000000000000000;
                if (x8_62 == 1)
                {
                    char (* x0_59)[0xe] = var_390;
                    char* var_310_11 = &*x0_59[8];
                    int64_t x0_60 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xe]>(x0_59);
                    x8_62 = var_398;
                    int64_t var_310_12 = x0_60;
                }
                if ((x8_62 != 1 && x8_62 != 2))
                {
                    int64_t var_300_8 = 1;
                }
                if ((x8_62 == 1 || (x8_62 != 1 && x8_62 != 2)))
                {
                    var_3b8 = &var_398;
                    int64_t var_3b0_11 = 0;
                    int64_t var_3a8_11 = 0;
                    int64_t var_3a0_11 = -0x8000000000000000;
                    if (x8_62 != 2)
                    {
                        if (x8_62 != 1)
                        {
                            int64_t var_3a0_12 = 1;
                        }
                        else
                        {
                            void* var_3b0_12 = &*var_390[8];
                        }
                    }
                }
                if (x8_62 == 2)
                {
                    int64_t x8_60 = *(var_390 + 8);
                    var_3b8 = &var_398;
                    int64_t var_3b0_10 = 0;
                    int64_t var_3a8_10 = 0;
                    int64_t var_3a0_10 = -0x8000000000000000;
                    int64_t var_308_8 = x8_60;
                }
                if ((x8_62 == 2 || ((x8_62 == 1 || (x8_62 != 1 && x8_62 != 2)) && x8_62 == 2)))
                {
                    int64_t var_3a8_12 = *(var_390 + 8);
                }
                int32_t x8_67;
                if ((nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(&var_318) & 1) == 0)
                {
                    nlohmann::detail::from_json<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, int32_t, 0>(nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::operator[]<char const>(&var_398), &var_3b8);
                    x8_67 = var_3b8;
                }
                else
                {
                    x8_67 = 0;
                }
                *(arg1 + 4) = x22_4;
                arg1[1] = x23_5;
                *(arg1 + 0xc) = x24_4;
                arg1[2] = x8_67;
                if ((*data_57408 & 1) == 0)
                {
                    x23 = &*(data_57408 + 1);
                }
                else
                {
                    x23 = *(data_57412 + 6);
                }
                int32_t var_3d8 = data_57400;
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                size_t x0_66 = strlen(x23);
                if (x0_66 < -0x10)
                {
                    goto label_1d720;
                }
                void* var_3c0_1;
                void* x24_5;
                if (x0_66 >= 0x17)
                {
                    uint64_t x25_3 = ((x0_66 + 0x10) & 0xfffffffffffffff0);
                    void* x0_68 = operator new(x25_3);
                    x24_5 = x0_68;
                    size_t var_3c8_1 = x0_66;
                    var_3c0_1 = x0_68;
                    s_5 = (x25_3 | 1);
                }
                else
                {
                    x24_5 = &*s_5[1];
                    s_5 = (x0_66 << 1);
                }
                if ((x0_66 >= 0x17 || (x0_66 < 0x17 && x0_66 != 0)))
                {
                    memcpy(x24_5, x23, x0_66);
                }
                *(x24_5 + x0_66) = 0;
                int32_t x22_7;
                if ((g3::logLevel(&var_3d8) & 1) == 0)
                {
                    x22_7 = 0;
                    if ((s_5 & 1) != 0)
                    {
                    label_1d4d0:
                        operator delete(var_3c0_1);
                        if ((x22_7 & 1) == 0)
                        {
                            goto label_1d5e4;
                        }
                        goto label_1d500;
                    }
                }
                else
                {
                    int64_t s_4;
                    __builtin_memset(&s_4, 0, 0x18);
                    uint64_t x22_6 = *PuduCamera::MarkerCamera::TAG;
                    size_t x0_73 = strlen(x22_6);
                    if (x0_73 < -0x10)
                    {
                        goto label_1d730;
                    }
                    void* var_3e0_1;
                    void* x24_6;
                    if (x0_73 >= 0x17)
                    {
                        uint64_t x25_4 = ((x0_73 + 0x10) & 0xfffffffffffffff0);
                        void* x0_75 = operator new(x25_4);
                        x24_6 = x0_75;
                        size_t var_3e8_1 = x0_73;
                        var_3e0_1 = x0_75;
                        s_4 = (x25_4 | 1);
                    }
                    else
                    {
                        x24_6 = (&s_4 | 1);
                        s_4 = (x0_73 << 1);
                    }
                    if ((x0_73 >= 0x17 || (x0_73 < 0x17 && x0_73 != 0)))
                    {
                        memcpy(x24_6, x22_6, x0_73);
                    }
                    *(x24_6 + x0_73) = 0;
                    x22_7 = g3::logTag(&s_4);
                    if ((s_4 & 1) != 0)
                    {
                        operator delete(var_3e0_1);
                        if ((s_5 & 1) != 0)
                        {
                            goto label_1d4d0;
                        }
                    }
                    else if ((s_5 & 1) != 0)
                    {
                        goto label_1d4d0;
                    }
                }
                if ((x22_7 & 1) == 0)
                {
                    goto label_1d5e4;
                }
            label_1d500:
                LogCapture::LogCapture(&var_318, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                *(arg1 + 4);
                arg1[1];
                *(arg1 + 0xc);
                arg1[2];
                LogCapture::capturef();
                goto label_1d5d4;
            }
            char* x22_1;
            if ((*data_57408 & 1) == 0)
            {
                x22_1 = &*(data_57408 + 1);
            }
            else
            {
                x22_1 = *(data_57412 + 6);
            }
            int32_t var_448 = data_57400;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_26 = strlen(x22_1);
            if (x0_26 < -0x10)
            {
                goto label_1d728;
            }
            void* var_430_1;
            void* x23_3;
            if (x0_26 >= 0x17)
            {
                uint64_t x24_3 = ((x0_26 + 0x10) & 0xfffffffffffffff0);
                void* x0_30 = operator new(x24_3);
                x23_3 = x0_30;
                size_t var_438_1 = x0_26;
                var_430_1 = x0_30;
                s_1 = (x24_3 | 1);
            }
            else
            {
                x23_3 = &*s_1[1];
                s_1 = (x0_26 << 1);
            }
            if ((x0_26 >= 0x17 || (x0_26 < 0x17 && x0_26 != 0)))
            {
                memcpy(x23_3, x22_1, x0_26);
            }
            *(x23_3 + x0_26) = 0;
            int32_t x21_4;
            if ((g3::logLevel(&var_448) & 1) == 0)
            {
                x21_4 = 0;
                if ((s_1 & 1) != 0)
                {
                label_1d58c:
                    operator delete(var_430_1);
                    if ((x21_4 & 1) != 0)
                    {
                        goto label_1d5bc;
                    }
                    goto label_1d5e4;
                }
            }
            else
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                uint64_t x21_3 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_35 = strlen(x21_3);
                if (x0_35 < -0x10)
                {
                    goto label_1d740;
                }
                void* var_450_1;
                void* x23_4;
                if (x0_35 >= 0x17)
                {
                    uint64_t x24_7 = ((x0_35 + 0x10) & 0xfffffffffffffff0);
                    void* x0_83 = operator new(x24_7);
                    x23_4 = x0_83;
                    size_t var_458_1 = x0_35;
                    var_450_1 = x0_83;
                    s = (x24_7 | 1);
                }
                else
                {
                    x23_4 = (&s | 1);
                    s = (x0_35 << 1);
                }
                if ((x0_35 >= 0x17 || (x0_35 < 0x17 && x0_35 != 0)))
                {
                    memcpy(x23_4, x21_3, x0_35);
                }
                *(x23_4 + x0_35) = 0;
                x21_4 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    operator delete(var_450_1);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_1d58c;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_1d58c;
                }
            }
            if ((x21_4 & 1) == 0)
            {
                goto label_1d5e4;
            }
        label_1d5bc:
            LogCapture::LogCapture(&var_318, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
            LogCapture::capturef();
        label_1d5d4:
            LogCapture::~LogCapture();
        label_1d5e4:
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_390);
            var_1d0 = (arg4 + 0x18);
            var_110 = (arg4 + 0x68);
            void* var_1c0_3 = (arg4 + 0x40);
            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
            std::__ndk1::ios_base::~ios_base();
        label_1d610:
            x0_93 = 0;
        }
        else
        {
            if ((arg3 & 1) != 0)
            {
                goto label_1d610;
            }
            if ((*data_57488 & 1) == 0)
            {
                x20_2 = &*(data_57488 + 1);
            }
            else
            {
                x20_2 = *(data_57492 + 6);
            }
            int32_t var_370 = data_57480;
            int64_t s_7;
            __builtin_memset(&s_7, 0, 0x18);
            size_t x0_21 = strlen(x20_2);
            if (x0_21 < -0x10)
            {
                goto label_1d738;
            }
            void* var_358_1;
            void* x21_1;
            if (x0_21 >= 0x17)
            {
                uint64_t x22_3 = ((x0_21 + 0x10) & 0xfffffffffffffff0);
                void* x0_37 = operator new(x22_3);
                x21_1 = x0_37;
                size_t var_360_1 = x0_21;
                var_358_1 = x0_37;
                s_7 = (x22_3 | 1);
            }
            else
            {
                x21_1 = &*s_7[1];
                s_7 = (x0_21 << 1);
            }
            if ((x0_21 >= 0x17 || (x0_21 < 0x17 && x0_21 != 0)))
            {
                memcpy(x21_1, x20_2, x0_21);
            }
            *(x21_1 + x0_21) = 0;
            int32_t x19_2;
            if ((g3::logLevel(&var_370) & 1) == 0)
            {
                x19_2 = 0;
                if ((s_7 & 1) != 0)
                {
                label_1d6f8:
                    operator delete(var_358_1);
                    if ((x19_2 & 1) == 0)
                    {
                        goto label_1d700;
                    }
                    goto label_1d6c0;
                }
            }
            else
            {
                int64_t s_6;
                __builtin_memset(&s_6, 0, 0x18);
                uint64_t x19 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_42 = strlen(x19);
                if (x0_42 < -0x10)
                {
                    goto label_1d748;
                }
                void* var_378_1;
                void* x21_5;
                if (x0_42 >= 0x17)
                {
                    uint64_t x22_8 = ((x0_42 + 0x10) & 0xfffffffffffffff0);
                    void* x0_95 = operator new(x22_8);
                    x21_5 = x0_95;
                    size_t var_380_1 = x0_42;
                    var_378_1 = x0_95;
                    s_6 = (x22_8 | 1);
                }
                else
                {
                    x21_5 = (&s_6 | 1);
                    s_6 = (x0_42 << 1);
                }
                if ((x0_42 >= 0x17 || (x0_42 < 0x17 && x0_42 != 0)))
                {
                    memcpy(x21_5, x19, x0_42);
                }
                *(x21_5 + x0_42) = 0;
                x19_2 = g3::logTag(&s_6);
                if ((s_6 & 1) != 0)
                {
                    operator delete(var_378_1);
                    if ((s_7 & 1) != 0)
                    {
                        goto label_1d6f8;
                    }
                }
                else if ((s_7 & 1) != 0)
                {
                    goto label_1d6f8;
                }
            }
            if ((x19_2 & 1) == 0)
            {
            label_1d700:
                x0_93 = 3;
            }
            else
            {
            label_1d6c0:
                LogCapture::LogCapture(&var_1d0, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                LogCapture::capturef();
                LogCapture::~LogCapture();
                x0_93 = 3;
            }
        }
        if (*(x26 + 0x28) == x8)
        {
            return x0_93;
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t sub_1d750(int64_t arg1, void* arg2 @ x26, int64_t arg3 @ x27, void* arg4 @ x29, char arg5, void* arg6, void* arg7, void* arg8, char arg9, char arg10, void* arg11, char arg12, void* arg13, char arg14, void* arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20, int64_t arg21, int64_t arg22, int64_t arg23, int64_t arg24, int64_t arg25, int64_t arg26)
{
    int64_t x21 = arg1;
    if ((arg10 & 1) != 0)
    {
        operator delete(arg11);
        if ((arg12 & 1) == 0)
        {
            goto label_1d90c;
        }
    }
    else if ((arg12 & 1) == 0)
    {
        goto label_1d90c;
    }
    operator delete(arg13);
    void* exceptionObject = _Unwind_Resume(x21);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    void* x0_14;
    int32_t x0_21;
    size_t x0_23;
    uint64_t x22_3;
    while (true)
    {
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
        arg_290 = (arg3 + 0x18);
        arg_350 = (arg3 + 0x68);
        arg_2a0 = (arg3 + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        x21 = _Unwind_Resume(exceptionObject);
        if ((arg14 & 1) == 0)
        {
        label_1d90c:
            _Unwind_Resume(x21);
        }
        operator delete(arg15);
        void* exceptionObject_1;
        int32_t x1_2;
        exceptionObject_1 = _Unwind_Resume(x21);
        exceptionObject = exceptionObject_1;
        if (x1_2 == 1)
        {
            x0_14 = __cxa_begin_catch(exceptionObject);
            char* x23_1;
            if ((*data_57488 & 1) == 0)
            {
                x23_1 = &*(data_57488 + 1);
            }
            else
            {
                x23_1 = *(data_57492 + 6);
            }
            arg_50 = data_57480;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_16 = strlen(x23_1);
            if (x0_16 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            }
            else
            {
                void* x24_1;
                if (x0_16 >= 0x17)
                {
                    uint64_t x25_1 = ((x0_16 + 0x10) & 0xfffffffffffffff0);
                    void* x0_18 = operator new(x25_1);
                    x24_1 = x0_18;
                    arg_60 = x0_16;
                    arg8 = x0_18;
                    s_1 = (x25_1 | 1);
                }
                else
                {
                    x24_1 = &*s_1[1];
                    s_1 = (x0_16 << 1);
                }
                if ((x0_16 >= 0x17 || (x0_16 < 0x17 && x0_16 != 0)))
                {
                    memcpy(x24_1, x23_1, x0_16);
                }
                *(x24_1 + x0_16) = 0;
                x0_21 = g3::logLevel(&arg_50);
                if ((x0_21 & 1) == 0)
                {
                    break;
                }
                __builtin_memset(&s, 0, 0x18);
                x22_3 = *PuduCamera::MarkerCamera::TAG;
                x0_23 = strlen(x22_3);
                if (x0_23 >= -0x10)
                {
                    break;
                }
            }
            exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            __cxa_end_catch();
        }
    }
    int32_t x22_4;
    if ((x0_21 & 1) == 0)
    {
        x22_4 = 0;
        if ((s_1 & 1) != 0)
        {
        label_1daa4:
            operator delete(arg8);
            if ((x22_4 & 1) != 0)
            {
                goto label_1dad4;
            }
        }
    }
    else
    {
        void* x24_2;
        if (x0_23 >= 0x17)
        {
            uint64_t x25_2 = ((x0_23 + 0x10) & 0xfffffffffffffff0);
            void* x0_25 = operator new(x25_2);
            x24_2 = x0_25;
            arg_40 = x0_23;
            arg7 = x0_25;
            s = (x25_2 | 1);
        }
        else
        {
            x24_2 = (&s | 1);
            s = (x0_23 << 1);
        }
        if ((x0_23 >= 0x17 || (x0_23 < 0x17 && x0_23 != 0)))
        {
            memcpy(x24_2, x22_3, x0_23);
        }
        *(x24_2 + x0_23) = 0;
        x22_4 = g3::logTag(&s);
        if ((s & 1) != 0)
        {
            operator delete(arg7);
            if ((s_1 & 1) != 0)
            {
                goto label_1daa4;
            }
        }
        else if ((s_1 & 1) != 0)
        {
            goto label_1daa4;
        }
    }
    if (((((x0_21 & 1) == 0 && (s_1 & 1) == 0) || (x0_21 & 1) != 0) && (x22_4 & 1) != 0))
    {
    label_1dad4:
        LogCapture::LogCapture(&arg_148, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
        *(*x0_14 + 0x10)(x0_14);
        LogCapture::capturef();
        LogCapture::~LogCapture();
    }
    __cxa_end_catch();
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
    arg_290 = (arg3 + 0x18);
    arg_350 = (arg3 + 0x68);
    arg_2a0 = (arg3 + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    if (*(arg2 + 0x28) != *(arg4 - 0x60))
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

int64_t sub_1d780(void* arg1, void* arg2 @ x26, int64_t arg3 @ x27, void* arg4 @ x29, void* arg5, void* arg6, char arg7, char arg8, void* arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20)
{
    void* exceptionObject = arg1;
    while (true)
    {
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
        arg_290 = (arg3 + 0x18);
        arg_350 = (arg3 + 0x68);
        arg_2a0 = (arg3 + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        int64_t x0_4 = _Unwind_Resume(exceptionObject);
        if ((arg8 & 1) == 0)
        {
            _Unwind_Resume(x0_4);
        }
        operator delete(arg9);
        void* exceptionObject_1;
        int32_t x1_2;
        exceptionObject_1 = _Unwind_Resume(x0_4);
        exceptionObject = exceptionObject_1;
        if (x1_2 == 1)
        {
            void* x0_9 = __cxa_begin_catch(exceptionObject);
            char* x23_1;
            if ((*data_57488 & 1) == 0)
            {
                x23_1 = &*(data_57488 + 1);
            }
            else
            {
                x23_1 = *(data_57492 + 6);
            }
            arg_50 = data_57480;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_11 = strlen(x23_1);
            if (x0_11 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            }
            else
            {
                void* x24_1;
                if (x0_11 >= 0x17)
                {
                    uint64_t x25_1 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
                    void* x0_13 = operator new(x25_1);
                    x24_1 = x0_13;
                    arg_60 = x0_11;
                    arg6 = x0_13;
                    s_1 = (x25_1 | 1);
                }
                else
                {
                    x24_1 = &*s_1[1];
                    s_1 = (x0_11 << 1);
                }
                if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
                {
                    memcpy(x24_1, x23_1, x0_11);
                }
                *(x24_1 + x0_11) = 0;
                int32_t x0_16 = g3::logLevel(&arg_50);
                size_t x0_18;
                int32_t x22_4;
                if ((x0_16 & 1) != 0)
                {
                    __builtin_memset(&s, 0, 0x18);
                    uint64_t x22_3 = *PuduCamera::MarkerCamera::TAG;
                    x0_18 = strlen(x22_3);
                    if (x0_18 >= -0x10)
                    {
                        void* x24_2;
                        if (x0_18 >= 0x17)
                        {
                            uint64_t x25_2 = ((x0_18 + 0x10) & 0xfffffffffffffff0);
                            void* x0_20 = operator new(x25_2);
                            x24_2 = x0_20;
                            arg_40 = x0_18;
                            arg5 = x0_20;
                            s = (x25_2 | 1);
                        }
                        else
                        {
                            x24_2 = (&s | 1);
                            s = (x0_18 << 1);
                        }
                        if ((x0_18 >= 0x17 || (x0_18 < 0x17 && x0_18 != 0)))
                        {
                            memcpy(x24_2, x22_3, x0_18);
                        }
                        *(x24_2 + x0_18) = 0;
                        x22_4 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            operator delete(arg5);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_1daa4;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_1daa4;
                        }
                    }
                }
                else
                {
                    x22_4 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_1daa4:
                        operator delete(arg6);
                        if ((x22_4 & 1) != 0)
                        {
                            goto label_1dad4;
                        }
                        goto label_1db04;
                    }
                }
                if (((x0_16 & 1) == 0 || ((x0_16 & 1) != 0 && x0_18 >= -0x10)))
                {
                    if ((x22_4 & 1) == 0)
                    {
                        goto label_1db04;
                    }
                label_1dad4:
                    LogCapture::LogCapture(&arg_148, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                    *(*x0_9 + 0x10)(x0_9);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                label_1db04:
                    __cxa_end_catch();
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
                    arg_290 = (arg3 + 0x18);
                    arg_350 = (arg3 + 0x68);
                    arg_2a0 = (arg3 + 0x40);
                    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                    std::__ndk1::ios_base::~ios_base();
                    if (*(arg2 + 0x28) != *(arg4 - 0x60))
                    {
                        __stack_chk_fail();
                        /* no return */
                    }
                    return 0;
                }
            }
            exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            __cxa_end_catch();
        }
    }
}

int64_t sub_1d7d4(void* arg1, int32_t arg2, void* arg3 @ x26, int64_t arg4 @ x27, void* arg5 @ x29, void* arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11, char arg12, char arg13, void* arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20, int64_t arg21, int64_t arg22, int64_t arg23, int64_t arg24, int64_t arg25)
{
    void* exceptionObject = arg1;
    if ((arg8 & 1) != 0)
    {
        operator delete(arg9);
    }
    if ((((arg8 & 1) != 0 && (arg10 & 1) != 0) || ((arg8 & 1) == 0 && (arg10 & 1) != 0)))
    {
        operator delete(arg11);
        if (arg2 == 1)
        {
            goto label_1d934;
        }
        goto label_1d8c8;
    }
    if ((((arg8 & 1) != 0 && (arg10 & 1) == 0) || ((arg8 & 1) == 0 && (arg10 & 1) == 0)))
    {
        if (arg2 == 1)
        {
            goto label_1d934;
        }
    label_1d8c8:
        void* x0_11;
        int32_t x0_18;
        size_t x0_20;
        uint64_t x22_3;
        while (true)
        {
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
            arg_290 = (arg4 + 0x18);
            arg_350 = (arg4 + 0x68);
            arg_2a0 = (arg4 + 0x40);
            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
            std::__ndk1::ios_base::~ios_base();
            int64_t x0_6 = _Unwind_Resume(exceptionObject);
            if ((arg13 & 1) == 0)
            {
                _Unwind_Resume(x0_6);
            }
            operator delete(arg14);
            void* exceptionObject_1;
            int32_t x1_1;
            exceptionObject_1 = _Unwind_Resume(x0_6);
            exceptionObject = exceptionObject_1;
            if (x1_1 == 1)
            {
            label_1d934:
                x0_11 = __cxa_begin_catch(exceptionObject);
                char* x23_1;
                if ((*data_57488 & 1) == 0)
                {
                    x23_1 = &*(data_57488 + 1);
                }
                else
                {
                    x23_1 = *(data_57492 + 6);
                }
                arg_50 = data_57480;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_13 = strlen(x23_1);
                if (x0_13 < -0x10)
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                }
                else
                {
                    void* x24_1;
                    if (x0_13 >= 0x17)
                    {
                        uint64_t x25_1 = ((x0_13 + 0x10) & 0xfffffffffffffff0);
                        void* x0_15 = operator new(x25_1);
                        x24_1 = x0_15;
                        arg_60 = x0_13;
                        arg7 = x0_15;
                        s_1 = (x25_1 | 1);
                    }
                    else
                    {
                        x24_1 = &*s_1[1];
                        s_1 = (x0_13 << 1);
                    }
                    if ((x0_13 >= 0x17 || (x0_13 < 0x17 && x0_13 != 0)))
                    {
                        memcpy(x24_1, x23_1, x0_13);
                    }
                    *(x24_1 + x0_13) = 0;
                    x0_18 = g3::logLevel(&arg_50);
                    if ((x0_18 & 1) == 0)
                    {
                        break;
                    }
                    __builtin_memset(&s, 0, 0x18);
                    x22_3 = *PuduCamera::MarkerCamera::TAG;
                    x0_20 = strlen(x22_3);
                    if (x0_20 >= -0x10)
                    {
                        break;
                    }
                }
                exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                __cxa_end_catch();
            }
        }
        int32_t x22_4;
        if ((x0_18 & 1) == 0)
        {
            x22_4 = 0;
            if ((s_1 & 1) != 0)
            {
            label_1daa4:
                operator delete(arg7);
                if ((x22_4 & 1) != 0)
                {
                    goto label_1dad4;
                }
            }
        }
        else
        {
            void* x24_2;
            if (x0_20 >= 0x17)
            {
                uint64_t x25_2 = ((x0_20 + 0x10) & 0xfffffffffffffff0);
                void* x0_22 = operator new(x25_2);
                x24_2 = x0_22;
                arg_40 = x0_20;
                arg6 = x0_22;
                s = (x25_2 | 1);
            }
            else
            {
                x24_2 = (&s | 1);
                s = (x0_20 << 1);
            }
            if ((x0_20 >= 0x17 || (x0_20 < 0x17 && x0_20 != 0)))
            {
                memcpy(x24_2, x22_3, x0_20);
            }
            *(x24_2 + x0_20) = 0;
            x22_4 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                operator delete(arg6);
                if ((s_1 & 1) != 0)
                {
                    goto label_1daa4;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_1daa4;
            }
        }
        if (((((x0_18 & 1) == 0 && (s_1 & 1) == 0) || (x0_18 & 1) != 0) && (x22_4 & 1) != 0))
        {
        label_1dad4:
            LogCapture::LogCapture(&arg_148, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
            *(*x0_11 + 0x10)(x0_11);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        __cxa_end_catch();
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
        arg_290 = (arg4 + 0x18);
        arg_350 = (arg4 + 0x68);
        arg_2a0 = (arg4 + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if (*(arg3 + 0x28) != *(arg5 - 0x60))
        {
            __stack_chk_fail();
            /* no return */
        }
        return 0;
    }
}

int64_t sub_1d80c(int64_t arg1, void* arg2 @ x26, int64_t arg3 @ x27, void* arg4 @ x29, char arg5, void* arg6, void* arg7, void* arg8, char arg9, char arg10, void* arg11, char arg12, void* arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20, int64_t arg21, int64_t arg22, int64_t arg23, int64_t arg24)
{
    int64_t x21 = arg1;
    void* exceptionObject;
    if ((arg10 & 1) != 0)
    {
        operator delete(arg11);
        exceptionObject = _Unwind_Resume(x21);
        if ((arg5 & 1) == 0)
        {
            goto label_1d8c8;
        }
        operator delete(arg6);
        goto label_1d8c8;
    }
    while (true)
    {
        _Unwind_Resume(x21);
        do
        {
            operator delete(arg13);
            void* exceptionObject_1;
            int32_t x1_2;
            exceptionObject_1 = _Unwind_Resume(x21);
            exceptionObject = exceptionObject_1;
            if (x1_2 == 1)
            {
                void* x0_13 = __cxa_begin_catch(exceptionObject);
                char* x23_1;
                if ((*data_57488 & 1) == 0)
                {
                    x23_1 = &*(data_57488 + 1);
                }
                else
                {
                    x23_1 = *(data_57492 + 6);
                }
                arg_50 = data_57480;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_15 = strlen(x23_1);
                if (x0_15 < -0x10)
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                }
                else
                {
                    void* x24_1;
                    if (x0_15 >= 0x17)
                    {
                        uint64_t x25_1 = ((x0_15 + 0x10) & 0xfffffffffffffff0);
                        void* x0_17 = operator new(x25_1);
                        x24_1 = x0_17;
                        arg_60 = x0_15;
                        arg8 = x0_17;
                        s_1 = (x25_1 | 1);
                    }
                    else
                    {
                        x24_1 = &*s_1[1];
                        s_1 = (x0_15 << 1);
                    }
                    if ((x0_15 >= 0x17 || (x0_15 < 0x17 && x0_15 != 0)))
                    {
                        memcpy(x24_1, x23_1, x0_15);
                    }
                    *(x24_1 + x0_15) = 0;
                    int32_t x0_20 = g3::logLevel(&arg_50);
                    size_t x0_22;
                    int32_t x22_4;
                    if ((x0_20 & 1) != 0)
                    {
                        __builtin_memset(&s, 0, 0x18);
                        uint64_t x22_3 = *PuduCamera::MarkerCamera::TAG;
                        x0_22 = strlen(x22_3);
                        if (x0_22 >= -0x10)
                        {
                            void* x24_2;
                            if (x0_22 >= 0x17)
                            {
                                uint64_t x25_2 = ((x0_22 + 0x10) & 0xfffffffffffffff0);
                                void* x0_24 = operator new(x25_2);
                                x24_2 = x0_24;
                                arg_40 = x0_22;
                                arg7 = x0_24;
                                s = (x25_2 | 1);
                            }
                            else
                            {
                                x24_2 = (&s | 1);
                                s = (x0_22 << 1);
                            }
                            if ((x0_22 >= 0x17 || (x0_22 < 0x17 && x0_22 != 0)))
                            {
                                memcpy(x24_2, x22_3, x0_22);
                            }
                            *(x24_2 + x0_22) = 0;
                            x22_4 = g3::logTag(&s);
                            if ((s & 1) != 0)
                            {
                                operator delete(arg7);
                                if ((s_1 & 1) != 0)
                                {
                                    goto label_1daa4;
                                }
                            }
                            else if ((s_1 & 1) != 0)
                            {
                                goto label_1daa4;
                            }
                        }
                    }
                    else
                    {
                        x22_4 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_1daa4:
                            operator delete(arg8);
                            if ((x22_4 & 1) != 0)
                            {
                                goto label_1dad4;
                            }
                            goto label_1db04;
                        }
                    }
                    if (((x0_20 & 1) == 0 || ((x0_20 & 1) != 0 && x0_22 >= -0x10)))
                    {
                        if ((x22_4 & 1) == 0)
                        {
                            goto label_1db04;
                        }
                    label_1dad4:
                        LogCapture::LogCapture(&arg_148, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                        *(*x0_13 + 0x10)(x0_13);
                        LogCapture::capturef();
                        LogCapture::~LogCapture();
                    label_1db04:
                        __cxa_end_catch();
                        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
                        arg_290 = (arg3 + 0x18);
                        arg_350 = (arg3 + 0x68);
                        arg_2a0 = (arg3 + 0x40);
                        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                        std::__ndk1::ios_base::~ios_base();
                        if (*(arg2 + 0x28) != *(arg4 - 0x60))
                        {
                            __stack_chk_fail();
                            /* no return */
                        }
                        return 0;
                    }
                }
                exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                __cxa_end_catch();
            }
        label_1d8c8:
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
            arg_290 = (arg3 + 0x18);
            arg_350 = (arg3 + 0x68);
            arg_2a0 = (arg3 + 0x40);
            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
            std::__ndk1::ios_base::~ios_base();
            x21 = _Unwind_Resume(exceptionObject);
        } while ((arg12 & 1) != 0);
    }
}

int64_t sub_1d8ac(void* arg1, void* arg2 @ x26, int64_t arg3 @ x27, void* arg4 @ x29, void* arg5, void* arg6, char arg7, char arg8, void* arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20)
{
    void* exceptionObject = arg1;
    while (true)
    {
        std::__ndk1::ios_base::~ios_base();
        int64_t x0_4 = _Unwind_Resume(exceptionObject);
        if ((arg8 & 1) == 0)
        {
            _Unwind_Resume(x0_4);
        }
        operator delete(arg9);
        void* exceptionObject_1;
        int32_t x1_2;
        exceptionObject_1 = _Unwind_Resume(x0_4);
        exceptionObject = exceptionObject_1;
        if (x1_2 == 1)
        {
            void* x0_9 = __cxa_begin_catch(exceptionObject);
            char* x23_1;
            if ((*data_57488 & 1) == 0)
            {
                x23_1 = &*(data_57488 + 1);
            }
            else
            {
                x23_1 = *(data_57492 + 6);
            }
            arg_50 = data_57480;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_11 = strlen(x23_1);
            if (x0_11 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            }
            else
            {
                void* x24_1;
                if (x0_11 >= 0x17)
                {
                    uint64_t x25_1 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
                    void* x0_13 = operator new(x25_1);
                    x24_1 = x0_13;
                    arg_60 = x0_11;
                    arg6 = x0_13;
                    s_1 = (x25_1 | 1);
                }
                else
                {
                    x24_1 = &*s_1[1];
                    s_1 = (x0_11 << 1);
                }
                if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
                {
                    memcpy(x24_1, x23_1, x0_11);
                }
                *(x24_1 + x0_11) = 0;
                int32_t x0_16 = g3::logLevel(&arg_50);
                size_t x0_18;
                int32_t x22_4;
                if ((x0_16 & 1) != 0)
                {
                    __builtin_memset(&s, 0, 0x18);
                    uint64_t x22_3 = *PuduCamera::MarkerCamera::TAG;
                    x0_18 = strlen(x22_3);
                    if (x0_18 >= -0x10)
                    {
                        void* x24_2;
                        if (x0_18 >= 0x17)
                        {
                            uint64_t x25_2 = ((x0_18 + 0x10) & 0xfffffffffffffff0);
                            void* x0_20 = operator new(x25_2);
                            x24_2 = x0_20;
                            arg_40 = x0_18;
                            arg5 = x0_20;
                            s = (x25_2 | 1);
                        }
                        else
                        {
                            x24_2 = (&s | 1);
                            s = (x0_18 << 1);
                        }
                        if ((x0_18 >= 0x17 || (x0_18 < 0x17 && x0_18 != 0)))
                        {
                            memcpy(x24_2, x22_3, x0_18);
                        }
                        *(x24_2 + x0_18) = 0;
                        x22_4 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            operator delete(arg5);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_1daa4;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_1daa4;
                        }
                    }
                }
                else
                {
                    x22_4 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_1daa4:
                        operator delete(arg6);
                        if ((x22_4 & 1) != 0)
                        {
                            goto label_1dad4;
                        }
                        goto label_1db04;
                    }
                }
                if (((x0_16 & 1) == 0 || ((x0_16 & 1) != 0 && x0_18 >= -0x10)))
                {
                    if ((x22_4 & 1) == 0)
                    {
                        goto label_1db04;
                    }
                label_1dad4:
                    LogCapture::LogCapture(&arg_148, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                    *(*x0_9 + 0x10)(x0_9);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                label_1db04:
                    __cxa_end_catch();
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
                    arg_290 = (arg3 + 0x18);
                    arg_350 = (arg3 + 0x68);
                    arg_2a0 = (arg3 + 0x40);
                    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                    std::__ndk1::ios_base::~ios_base();
                    if (*(arg2 + 0x28) != *(arg4 - 0x60))
                    {
                        __stack_chk_fail();
                        /* no return */
                    }
                    return 0;
                }
            }
            exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            __cxa_end_catch();
        }
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
        arg_290 = (arg3 + 0x18);
        arg_350 = (arg3 + 0x68);
        arg_2a0 = (arg3 + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    }
}

int64_t sub_1db2c(void* arg1, void* arg2 @ x26, int64_t arg3 @ x27, void* arg4 @ x29, void* arg5, void* arg6, char arg7, char arg8, void* arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20)
{
    void* exceptionObject = arg1;
    while (true)
    {
        __cxa_end_catch();
        int32_t i;
        do
        {
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
            arg_290 = (arg3 + 0x18);
            arg_350 = (arg3 + 0x68);
            arg_2a0 = (arg3 + 0x40);
            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
            std::__ndk1::ios_base::~ios_base();
            int64_t x0_8 = _Unwind_Resume(exceptionObject);
            if ((arg8 & 1) == 0)
            {
                _Unwind_Resume(x0_8);
            }
            operator delete(arg9);
            void* exceptionObject_1;
            exceptionObject_1 = _Unwind_Resume(x0_8);
            exceptionObject = exceptionObject_1;
        } while (i != 1);
        void* x0_13 = __cxa_begin_catch(exceptionObject);
        char* x23_2;
        if ((*data_57488 & 1) == 0)
        {
            x23_2 = &*(data_57488 + 1);
        }
        else
        {
            x23_2 = *(data_57492 + 6);
        }
        arg_50 = data_57480;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_15 = strlen(x23_2);
        if (x0_15 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* x24_2;
            if (x0_15 >= 0x17)
            {
                uint64_t x25_2 = ((x0_15 + 0x10) & 0xfffffffffffffff0);
                void* x0_17 = operator new(x25_2);
                x24_2 = x0_17;
                arg_60 = x0_15;
                arg6 = x0_17;
                s_1 = (x25_2 | 1);
            }
            else
            {
                x24_2 = &*s_1[1];
                s_1 = (x0_15 << 1);
            }
            if ((x0_15 >= 0x17 || (x0_15 < 0x17 && x0_15 != 0)))
            {
                memcpy(x24_2, x23_2, x0_15);
            }
            *(x24_2 + x0_15) = 0;
            int32_t x0_20 = g3::logLevel(&arg_50);
            size_t x0_22;
            int32_t x22_5;
            if ((x0_20 & 1) != 0)
            {
                __builtin_memset(&s, 0, 0x18);
                uint64_t x22_4 = *PuduCamera::MarkerCamera::TAG;
                x0_22 = strlen(x22_4);
                if (x0_22 >= -0x10)
                {
                    void* x24_3;
                    if (x0_22 >= 0x17)
                    {
                        uint64_t x25_3 = ((x0_22 + 0x10) & 0xfffffffffffffff0);
                        void* x0_24 = operator new(x25_3);
                        x24_3 = x0_24;
                        arg_40 = x0_22;
                        arg5 = x0_24;
                        s = (x25_3 | 1);
                    }
                    else
                    {
                        x24_3 = (&s | 1);
                        s = (x0_22 << 1);
                    }
                    if ((x0_22 >= 0x17 || (x0_22 < 0x17 && x0_22 != 0)))
                    {
                        memcpy(x24_3, x22_4, x0_22);
                    }
                    *(x24_3 + x0_22) = 0;
                    x22_5 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        operator delete(arg5);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_1daa4;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_1daa4;
                    }
                }
            }
            else
            {
                x22_5 = 0;
                if ((s_1 & 1) != 0)
                {
                label_1daa4:
                    operator delete(arg6);
                    if ((x22_5 & 1) != 0)
                    {
                        goto label_1dad4;
                    }
                    goto label_1db04;
                }
            }
            if (((x0_20 & 1) == 0 || ((x0_20 & 1) != 0 && x0_22 >= -0x10)))
            {
                if ((x22_5 & 1) == 0)
                {
                    goto label_1db04;
                }
            label_1dad4:
                LogCapture::LogCapture(&arg_148, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                *(*x0_13 + 0x10)(x0_13);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            label_1db04:
                __cxa_end_catch();
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
                arg_290 = (arg3 + 0x18);
                arg_350 = (arg3 + 0x68);
                arg_2a0 = (arg3 + 0x40);
                std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                std::__ndk1::ios_base::~ios_base();
                if (*(arg2 + 0x28) != *(arg4 - 0x60))
                {
                    __stack_chk_fail();
                    /* no return */
                }
                return 0;
            }
        }
        exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
    }
}

int64_t sub_1db30(void* arg1, void* arg2 @ x26, int64_t arg3 @ x27, void* arg4 @ x29, char arg5, void* arg6, char arg7, void* arg8, char arg9, char arg10, void* arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20, int64_t arg21, int64_t arg22)
{
    void* exceptionObject = arg1;
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
    }
    while (true)
    {
        __cxa_end_catch();
        int32_t i;
        do
        {
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
            arg_290 = (arg3 + 0x18);
            arg_350 = (arg3 + 0x68);
            arg_2a0 = (arg3 + 0x40);
            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
            std::__ndk1::ios_base::~ios_base();
            int64_t x0_10 = _Unwind_Resume(exceptionObject);
            if ((arg10 & 1) == 0)
            {
                _Unwind_Resume(x0_10);
            }
            operator delete(arg11);
            void* exceptionObject_1;
            exceptionObject_1 = _Unwind_Resume(x0_10);
            exceptionObject = exceptionObject_1;
        } while (i != 1);
        void* x0_15 = __cxa_begin_catch(exceptionObject);
        char* x23_2;
        if ((*data_57488 & 1) == 0)
        {
            x23_2 = &*(data_57488 + 1);
        }
        else
        {
            x23_2 = *(data_57492 + 6);
        }
        arg_50 = data_57480;
        __builtin_memset(&arg7, 0, 0x18);
        size_t x0_17 = strlen(x23_2);
        if (x0_17 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* x24_2;
            if (x0_17 >= 0x17)
            {
                uint64_t x25_2 = ((x0_17 + 0x10) & 0xfffffffffffffff0);
                void* x0_19 = operator new(x25_2);
                x24_2 = x0_19;
                arg_60 = x0_17;
                arg8 = x0_19;
                arg7 = (x25_2 | 1);
            }
            else
            {
                x24_2 = &arg_59;
                arg7 = (x0_17 << 1);
            }
            if ((x0_17 >= 0x17 || (x0_17 < 0x17 && x0_17 != 0)))
            {
                memcpy(x24_2, x23_2, x0_17);
            }
            *(x24_2 + x0_17) = 0;
            int32_t x0_22 = g3::logLevel(&arg_50);
            size_t x0_24;
            int32_t x22_5;
            if ((x0_22 & 1) != 0)
            {
                __builtin_memset(&arg5, 0, 0x18);
                char* x22_4 = *PuduCamera::MarkerCamera::TAG;
                x0_24 = strlen(x22_4);
                if (x0_24 >= -0x10)
                {
                    void* x24_3;
                    if (x0_24 >= 0x17)
                    {
                        uint64_t x25_3 = ((x0_24 + 0x10) & 0xfffffffffffffff0);
                        void* x0_26 = operator new(x25_3);
                        x24_3 = x0_26;
                        arg_40 = x0_24;
                        arg6 = x0_26;
                        arg5 = (x25_3 | 1);
                    }
                    else
                    {
                        x24_3 = (&arg5 | 1);
                        arg5 = (x0_24 << 1);
                    }
                    if ((x0_24 >= 0x17 || (x0_24 < 0x17 && x0_24 != 0)))
                    {
                        memcpy(x24_3, x22_4, x0_24);
                    }
                    *(x24_3 + x0_24) = 0;
                    x22_5 = g3::logTag(&arg5);
                    if ((arg5 & 1) != 0)
                    {
                        operator delete(arg6);
                        if ((arg7 & 1) != 0)
                        {
                            goto label_1daa4;
                        }
                    }
                    else if ((arg7 & 1) != 0)
                    {
                        goto label_1daa4;
                    }
                }
            }
            else
            {
                x22_5 = 0;
                if ((arg7 & 1) != 0)
                {
                label_1daa4:
                    operator delete(arg8);
                    if ((x22_5 & 1) != 0)
                    {
                        goto label_1dad4;
                    }
                    goto label_1db04;
                }
            }
            if (((x0_22 & 1) == 0 || ((x0_22 & 1) != 0 && x0_24 >= -0x10)))
            {
                if ((x22_5 & 1) == 0)
                {
                    goto label_1db04;
                }
            label_1dad4:
                LogCapture::LogCapture(&arg_148, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                *(*x0_15 + 0x10)(x0_15);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            label_1db04:
                __cxa_end_catch();
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
                arg_290 = (arg3 + 0x18);
                arg_350 = (arg3 + 0x68);
                arg_2a0 = (arg3 + 0x40);
                std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                std::__ndk1::ios_base::~ios_base();
                if (*(arg2 + 0x28) != *(arg4 - 0x60))
                {
                    __stack_chk_fail();
                    /* no return */
                }
                return 0;
            }
        }
        exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
    }
}

int64_t sub_1db5c(void* arg1, void* arg2 @ x26, int64_t arg3 @ x27, void* arg4 @ x29, void* arg5, char arg6, void* arg7, char arg8, char arg9, void* arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20, int64_t arg21)
{
    void* exceptionObject = arg1;
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    while (true)
    {
        __cxa_end_catch();
        int32_t i;
        do
        {
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
            arg_290 = (arg3 + 0x18);
            arg_350 = (arg3 + 0x68);
            arg_2a0 = (arg3 + 0x40);
            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
            std::__ndk1::ios_base::~ios_base();
            int64_t x0_9 = _Unwind_Resume(exceptionObject);
            if ((arg9 & 1) == 0)
            {
                _Unwind_Resume(x0_9);
            }
            operator delete(arg10);
            void* exceptionObject_1;
            exceptionObject_1 = _Unwind_Resume(x0_9);
            exceptionObject = exceptionObject_1;
        } while (i != 1);
        void* x0_14 = __cxa_begin_catch(exceptionObject);
        char* x23_2;
        if ((*data_57488 & 1) == 0)
        {
            x23_2 = &*(data_57488 + 1);
        }
        else
        {
            x23_2 = *(data_57492 + 6);
        }
        arg_50 = data_57480;
        __builtin_memset(&arg6, 0, 0x18);
        size_t x0_16 = strlen(x23_2);
        if (x0_16 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* x24_2;
            if (x0_16 >= 0x17)
            {
                uint64_t x25_2 = ((x0_16 + 0x10) & 0xfffffffffffffff0);
                void* x0_18 = operator new(x25_2);
                x24_2 = x0_18;
                arg_60 = x0_16;
                arg7 = x0_18;
                arg6 = (x25_2 | 1);
            }
            else
            {
                x24_2 = &arg_59;
                arg6 = (x0_16 << 1);
            }
            if ((x0_16 >= 0x17 || (x0_16 < 0x17 && x0_16 != 0)))
            {
                memcpy(x24_2, x23_2, x0_16);
            }
            *(x24_2 + x0_16) = 0;
            int32_t x0_21 = g3::logLevel(&arg_50);
            size_t x0_23;
            int32_t x22_5;
            if ((x0_21 & 1) != 0)
            {
                __builtin_memset(&s, 0, 0x18);
                uint64_t x22_4 = *PuduCamera::MarkerCamera::TAG;
                x0_23 = strlen(x22_4);
                if (x0_23 >= -0x10)
                {
                    void* x24_3;
                    if (x0_23 >= 0x17)
                    {
                        uint64_t x25_3 = ((x0_23 + 0x10) & 0xfffffffffffffff0);
                        void* x0_25 = operator new(x25_3);
                        x24_3 = x0_25;
                        arg_40 = x0_23;
                        arg5 = x0_25;
                        s = (x25_3 | 1);
                    }
                    else
                    {
                        x24_3 = (&s | 1);
                        s = (x0_23 << 1);
                    }
                    if ((x0_23 >= 0x17 || (x0_23 < 0x17 && x0_23 != 0)))
                    {
                        memcpy(x24_3, x22_4, x0_23);
                    }
                    *(x24_3 + x0_23) = 0;
                    x22_5 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        operator delete(arg5);
                        if ((arg6 & 1) != 0)
                        {
                            goto label_1daa4;
                        }
                    }
                    else if ((arg6 & 1) != 0)
                    {
                        goto label_1daa4;
                    }
                }
            }
            else
            {
                x22_5 = 0;
                if ((arg6 & 1) != 0)
                {
                label_1daa4:
                    operator delete(arg7);
                    if ((x22_5 & 1) != 0)
                    {
                        goto label_1dad4;
                    }
                    goto label_1db04;
                }
            }
            if (((x0_21 & 1) == 0 || ((x0_21 & 1) != 0 && x0_23 >= -0x10)))
            {
                if ((x22_5 & 1) == 0)
                {
                    goto label_1db04;
                }
            label_1dad4:
                LogCapture::LogCapture(&arg_148, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                *(*x0_14 + 0x10)(x0_14);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            label_1db04:
                __cxa_end_catch();
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_d0);
                arg_290 = (arg3 + 0x18);
                arg_350 = (arg3 + 0x68);
                arg_2a0 = (arg3 + 0x40);
                std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                std::__ndk1::ios_base::~ios_base();
                if (*(arg2 + 0x28) != *(arg4 - 0x60))
                {
                    __stack_chk_fail();
                    /* no return */
                }
                return 0;
            }
        }
        exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
    }
}

void sub_1db78(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t* nlohmann::operator>>(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    void** x0 = operator new(0x30);
    x0[2] = 0;
    x0[1] = 0;
    *x0 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_stream_adapter, std::__ndk1::allocator<nlohmann::detail::input_stream_adapter> > + 0x10);
    x0[3] = (_vtable_for_nlohmann::detail::input_stream_adapter + 0x10);
    x0[4] = arg1;
    int64_t x9_4 = *((arg1 + *(*arg1 - 0x18)) + 0x28);
    void* var_160 = &x0[3];
    x0[5] = x9_4;
    int32_t i;
    do
    {
        i = __stxr((__ldxr(&x0[1]) + 1), &x0[1]);
    } while (i != 0);
    int64_t* var_130 = nullptr;
    void var_150;
    void var_120;
    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parser(&var_120, &var_160, &var_150);
    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(&var_120, nullptr);
    char var_a0;
    void* var_90;
    if ((var_a0 & 1) != 0)
    {
        operator delete(var_90);
    }
    void* var_b8;
    if (var_b8 != 0)
    {
        void* var_b0_1 = var_b8;
        operator delete(var_b8);
    }
    int64_t* var_e0;
    if (var_e0 != 0)
    {
        int64_t x9_6;
        int32_t i_1;
        do
        {
            x9_6 = __ldaxr(&var_e0[1]);
            i_1 = __stlxr((x9_6 - 1), &var_e0[1]);
        } while (i_1 != 0);
        if (x9_6 == 0)
        {
            *(*var_e0 + 0x10)(var_e0);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    int64_t* var_100;
    int64_t x8_11;
    if (&var_120 == var_100)
    {
        x8_11 = *(*var_100 + 0x20);
    }
    if ((&var_120 != var_100 && var_100 != 0))
    {
        x8_11 = *(*var_100 + 0x28);
    }
    if ((&var_120 == var_100 || (&var_120 != var_100 && var_100 != 0)))
    {
        x8_11();
    }
    int64_t x8_14;
    if (&var_150 == var_130)
    {
        x8_14 = *(*var_130 + 0x20);
    }
    if ((&var_150 != var_130 && var_130 != 0))
    {
        x8_14 = *(*var_130 + 0x28);
    }
    if ((&var_150 == var_130 || (&var_150 != var_130 && var_130 != 0)))
    {
        x8_14();
    }
    if (x0 != 0)
    {
        int64_t x9_7;
        int32_t i_2;
        do
        {
            x9_7 = __ldaxr(&x0[1]);
            i_2 = __stlxr((x9_7 - 1), &x0[1]);
        } while (i_2 != 0);
        if (x9_7 == 0)
        {
            *(*x0 + 0x10)(x0);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    int64_t x8_19;
    int32_t i_3;
    do
    {
        x8_19 = __ldaxr(&x0[1]);
        i_3 = __stlxr((x8_19 - 1), &x0[1]);
    } while (i_3 != 0);
    if (x8_19 == 0)
    {
        *(*x0 + 0x10)(x0);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

void* nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::operator[]<char const>(char* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    uint32_t x8_1 = *arg1;
    int64_t s;
    int64_t s_1;
    if (x8_1 == 0)
    {
        *arg1 = 1;
        int64_t** x0 = operator new(0x18);
        x0[1] = 0;
        x0[2] = 0;
        *x0 = &x0[1];
        *(arg1 + 8) = x0;
    }
    else if (x8_1 != 1)
    {
        void* thrown_exception = __cxa_allocate_exception(0x20);
        int64_t x8_15 = *arg1;
        char* x20_2;
        if (x8_15 > 8)
        {
            x20_2 = "number";
        }
        else
        {
            x20_2 = &data_56348[x8_15];
        }
        __builtin_memset(&s, 0, 0x18);
        size_t x0_13 = strlen(x20_2);
        if (x0_13 < -0x10)
        {
            x0_13 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        int64_t x22_2;
        if (x0_13 >= 0x17)
        {
            uint64_t x23_2 = ((x0_13 + 0x10) & 0xfffffffffffffff0);
            int64_t x0_15 = operator new(x23_2);
            x22_2 = x0_15;
            size_t var_70_1 = x0_13;
            int64_t var_68_1 = x0_15;
            s = (x23_2 | 1);
        }
        else
        {
            x22_2 = (&s | 1);
            s = (x0_13 << 1);
        }
        if ((x0_13 >= 0x17 || (x0_13 < 0x17 && x0_13 != 0)))
        {
            memcpy(x22_2, x20_2, x0_13);
        }
        *(x22_2 + x0_13) = 0;
        int128_t* s_2;
        int128_t v0_2;
        s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s, nullptr, "cannot use operator[] with a str…");
        int64_t var_50_2 = s_2[1];
        s_1 = *s_2;
        __builtin_memset(s_2, 0, 0x18);
        nlohmann::detail::type_error::create(0x131, &s_1);
        __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::type_error, nlohmann::detail::exception::~exception);
        /* no return */
    }
    std::__ndk1::fpos<mbstate_t>** x19_1 = *(arg1 + 8);
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_2 = strlen(arg2);
    if (x0_2 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_50_1;
        void* x22_1;
        if (x0_2 >= 0x17)
        {
            uint64_t x23_1 = ((x0_2 + 0x10) & 0xfffffffffffffff0);
            void* x0_4 = operator new(x23_1);
            x22_1 = x0_4;
            size_t var_58_1 = x0_2;
            var_50_1 = x0_4;
            s_1 = (x23_1 | 1);
        }
        else
        {
            x22_1 = (&s_1 | 1);
            s_1 = (x0_2 << 1);
        }
        if ((x0_2 >= 0x17 || (x0_2 < 0x17 && x0_2 != 0)))
        {
            memcpy(x22_1, arg2, x0_2);
        }
        *(x22_1 + x0_2) = 0;
        int64_t* x0_7 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x19_1, &s);
        std::__ndk1::fpos<mbstate_t>* x20_1 = *x0_7;
        if (x20_1 == 0)
        {
            std::__ndk1::fpos<mbstate_t>* x0_10;
            int128_t v0_1;
            x0_10 = operator new(0x48);
            v0_1 = s_1;
            __builtin_memset(&s_1, 0, 0x18);
            *(x0_10 + 0x30) = var_50_1;
            int64_t s_3 = s;
            *(x0_10 + 0x38) = 0;
            *(x0_10 + 0x40) = 0;
            *x0_10 = 0;
            *(x0_10 + 8) = 0;
            *(x0_10 + 0x20) = v0_1;
            *(x0_10 + 0x10) = s_3;
            *x0_7 = x0_10;
            x20_1 = x0_10;
            std::__ndk1::fpos<mbstate_t>* x8_11 = **x19_1;
            std::__ndk1::fpos<mbstate_t>* x1_2;
            if (x8_11 == 0)
            {
                x1_2 = x20_1;
            }
            else
            {
                *x19_1 = x8_11;
                x1_2 = *x0_7;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x19_1[1], x1_2);
            x19_1[2] = (x19_1[2] + 1);
        }
        if (((x20_1 != 0 && (s_1 & 1) != 0) || (x20_1 == 0 && (s_1 & 1) != 0)))
        {
            operator delete(var_50_1);
        }
        if (*(x24 + 0x28) == x8)
        {
            return (x20_1 + 0x38);
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >::~basic_fstream(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x18] = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x68);
    arg1[2] = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

uint64_t PuduCamera::MarkerCamera::openCamera(char* arg1, int64_t* arg2, int32_t arg3)
{
    uint64_t x24;
    uint64_t var_40 = x24;
    uint64_t x23;
    uint64_t var_38 = x23;
    uint64_t x22;
    uint64_t var_30 = x22;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char* x19 = arg1;
    char var_310;
    void* var_300;
    int128_t var_2c0;
    void* var_2b0;
    int64_t s_24;
    int32_t x20_8;
    if ((*arg1 & 1) != 0)
    {
        *(x19 + 0x10);
        if ((PuduCamera::MarkerCamera::setExposure(x19) & 1) == 0)
        {
            char* x21_3;
            if ((*data_57488 & 1) == 0)
            {
                x21_3 = &*(data_57488 + 1);
            }
            else
            {
                x21_3 = *(data_57492 + 6);
            }
            int32_t var_1e0 = data_57480;
            int64_t s_23;
            __builtin_memset(&s_23, 0, 0x18);
            size_t x0_9 = strlen(x21_3);
            if (x0_9 < -0x10)
            {
                goto label_1facc;
            }
            uint64_t var_1c8_1;
            if (x0_9 >= 0x17)
            {
                x23 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                uint64_t x0_23 = operator new(x23);
                x22 = x0_23;
                var_1c8_1 = x0_23;
                s_23 = (x23 | 1);
                size_t var_1d0_1 = x0_9;
            }
            else
            {
                x22 = &*s_23[1];
                s_23 = (x0_9 << 1);
            }
            if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
            {
                memcpy(x22, x21_3, x0_9);
            }
            *(x22 + x0_9) = 0;
            int32_t x0_26 = g3::logLevel(&var_1e0);
            int32_t x20_7;
            if ((x0_26 & 1) == 0)
            {
                x20_7 = 0;
                if ((s_23 & 1) != 0)
                {
                label_1e618:
                    operator delete(var_1c8_1);
                    if ((x20_7 & 1) != 0)
                    {
                        goto label_1e808;
                    }
                }
            }
            else
            {
                int64_t s_22;
                __builtin_memset(&s_22, 0, 0x18);
                char* x20_6 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_28 = strlen(x20_6);
                if (x0_28 < -0x10)
                {
                    goto label_1fafc;
                }
                uint64_t var_1e8_1;
                if (x0_28 >= 0x17)
                {
                    x23 = ((x0_28 + 0x10) & 0xfffffffffffffff0);
                    uint64_t x0_46 = operator new(x23);
                    x22 = x0_46;
                    var_1e8_1 = x0_46;
                    s_22 = (x23 | 1);
                    size_t var_1f0_1 = x0_28;
                }
                else
                {
                    x22 = (&s_22 | 1);
                    s_22 = (x0_28 << 1);
                }
                if ((x0_28 >= 0x17 || (x0_28 < 0x17 && x0_28 != 0)))
                {
                    memcpy(x22, x20_6, x0_28);
                }
                *(x22 + x0_28) = 0;
                x20_7 = g3::logTag(&s_22);
                if ((s_22 & 1) != 0)
                {
                    operator delete(var_1e8_1);
                    if ((s_23 & 1) != 0)
                    {
                        goto label_1e618;
                    }
                }
                else if ((s_23 & 1) != 0)
                {
                    goto label_1e618;
                }
            }
            if (((((x0_26 & 1) == 0 && (s_23 & 1) == 0) || (x0_26 & 1) != 0) && (x20_7 & 1) != 0))
            {
            label_1e808:
                LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                *(x19 + 0x10);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
        }
        char* x20_9;
        if ((*data_57408 & 1) == 0)
        {
            x20_9 = &*(data_57408 + 1);
        label_1e854:
            int32_t var_218 = data_57400;
            int64_t s_21;
            __builtin_memset(&s_21, 0, 0x18);
            size_t x0_52 = strlen(x20_9);
            if (x0_52 < -0x10)
            {
            label_1fac4:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1facc:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fad4:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fadc:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fae4:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1faec:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1faf4:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fafc:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb04:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb0c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb14:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb1c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb24:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb2c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb34:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb3c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb44:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb4c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb54:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb5c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb64:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb6c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1fb74:
                int64_t x0_242 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                if ((var_310 & 1) != 0)
                {
                    operator delete(var_300);
                }
                if ((var_2c0 & 1) != 0)
                {
                    operator delete(var_2b0);
                }
                void* x0_246;
                int32_t x1_54;
                x0_246 = _Unwind_Resume(x0_242);
                /* tailcall */
                return PuduCamera::MarkerCamera::setExposure(x0_246, x1_54);
            }
            void* var_200_1;
            void* x21_6;
            if (x0_52 >= 0x17)
            {
                x22 = ((x0_52 + 0x10) & 0xfffffffffffffff0);
                void* x0_54 = operator new(x22);
                x21_6 = x0_54;
                var_200_1 = x0_54;
                s_21 = (x22 | 1);
                size_t var_208_1 = x0_52;
            }
            else
            {
                x21_6 = &*s_21[1];
                s_21 = (x0_52 << 1);
            }
            if ((x0_52 >= 0x17 || (x0_52 < 0x17 && x0_52 != 0)))
            {
                memcpy(x21_6, x20_9, x0_52);
            }
            *(x21_6 + x0_52) = 0;
            int32_t x19_6;
            if ((g3::logLevel(&var_218) & 1) == 0)
            {
                x19_6 = 0;
                if ((s_21 & 1) != 0)
                {
                label_1e930:
                    operator delete(var_200_1);
                    if ((x19_6 & 1) == 0)
                    {
                        goto label_1e9d8;
                    }
                    goto label_1e9bc;
                }
            }
            else
            {
                int64_t s_20;
                __builtin_memset(&s_20, 0, 0x18);
                uint64_t x19_5 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_59 = strlen(x19_5);
                if (x0_59 < -0x10)
                {
                    goto label_1fad4;
                }
                void* var_220_1;
                void* x21_7;
                if (x0_59 >= 0x17)
                {
                    uint64_t x22_4 = ((x0_59 + 0x10) & 0xfffffffffffffff0);
                    void* x0_62 = operator new(x22_4);
                    x21_7 = x0_62;
                    var_220_1 = x0_62;
                    s_20 = (x22_4 | 1);
                    size_t var_228_1 = x0_59;
                }
                else
                {
                    x21_7 = (&s_20 | 1);
                    s_20 = (x0_59 << 1);
                }
                if ((x0_59 >= 0x17 || (x0_59 < 0x17 && x0_59 != 0)))
                {
                    memcpy(x21_7, x19_5, x0_59);
                }
                *(x21_7 + x0_59) = 0;
                x19_6 = g3::logTag(&s_20);
                if ((s_20 & 1) != 0)
                {
                    operator delete(var_220_1);
                    if ((s_21 & 1) != 0)
                    {
                        goto label_1e930;
                    }
                }
                else if ((s_21 & 1) != 0)
                {
                    goto label_1e930;
                }
            }
            if ((x19_6 & 1) == 0)
            {
                goto label_1e9d8;
            }
        label_1e9bc:
            LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        label_1e9d8:
            x20_8 = 0;
        label_1e9e4:
            if (*(x25 + 0x28) != x8)
            {
            label_1fabc:
                __stack_chk_fail();
                /* no return */
            }
            return x20_8;
        }
        x20_9 = *(data_57412 + 6);
        goto label_1e854;
    }
    char* x27_1 = *arg2;
    int64_t x26_1 = arg2[1];
    if (x27_1 != x26_1)
    {
        uint64_t x25_1 = (&s_24 | 1);
        size_t x20_1;
        do
        {
            __builtin_memset(&s_24, 0, 0x18);
            void* var_1b0_1;
            if ((*x27_1 & 1) == 0)
            {
                var_1b0_1 = *(x27_1 + 0x10);
                s_24 = *x27_1;
            }
            else
            {
                x20_1 = *(x27_1 + 8);
                if (x20_1 < -0x10)
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                    break;
                }
                x22 = *(x27_1 + 0x10);
                if (x20_1 >= 0x17)
                {
                    x24 = ((x20_1 + 0x10) & 0xfffffffffffffff0);
                    uint64_t x0_1 = operator new(x24);
                    x23 = x0_1;
                    var_1b0_1 = x0_1;
                    s_24 = (x24 | 1);
                    size_t var_1b8_1 = x20_1;
                }
                else
                {
                    x23 = x25_1;
                    s_24 = (x20_1 << 1);
                }
                if ((x20_1 >= 0x17 || (x20_1 < 0x17 && x20_1 != 0)))
                {
                    arg1 = memcpy(x23, x22, x20_1);
                }
                *(x23 + x20_1) = 0;
            }
            int128_t v0;
            arg1 = PuduCamera::MarkerCamera::getValidId(arg1);
            if (arg1 != 0xffffffff)
            {
                if (&x19[0x30] != &s_24)
                {
                    void* x1_3;
                    if ((s_24 & 1) == 0)
                    {
                        x1_3 = x25_1;
                    }
                    else
                    {
                        x1_3 = var_1b0_1;
                    }
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&x19[0x30], x1_3);
                }
                if ((s_24 & 1) != 0)
                {
                    operator delete(var_1b0_1);
                }
                if ((*data_57408 & 1) == 0)
                {
                    x23 = &*(data_57408 + 1);
                }
                else
                {
                    x23 = *(data_57412 + 6);
                }
                int32_t var_288 = data_57400;
                int64_t s_17;
                __builtin_memset(&s_17, 0, 0x18);
                size_t x0_21 = strlen(x23);
                if (x0_21 < -0x10)
                {
                    goto label_1fae4;
                }
                void* var_270_1;
                void* x24_1;
                if (x0_21 >= 0x17)
                {
                    uint64_t x25_2 = ((x0_21 + 0x10) & 0xfffffffffffffff0);
                    void* x0_38 = operator new(x25_2);
                    x24_1 = x0_38;
                    var_270_1 = x0_38;
                    s_17 = (x25_2 | 1);
                    size_t var_278_1 = x0_21;
                }
                else
                {
                    x24_1 = &*s_17[1];
                    s_17 = (x0_21 << 1);
                }
                if ((x0_21 >= 0x17 || (x0_21 < 0x17 && x0_21 != 0)))
                {
                    memcpy(x24_1, x23, x0_21);
                }
                *(x24_1 + x0_21) = 0;
                int32_t x22_3;
                if ((g3::logLevel(&var_288) & 1) == 0)
                {
                    x22_3 = 0;
                    if ((s_17 & 1) != 0)
                    {
                    label_1e77c:
                        operator delete(var_270_1);
                        if ((x22_3 & 1) == 0)
                        {
                            goto label_1eae0;
                        }
                        goto label_1eab8;
                    }
                }
                else
                {
                    int64_t s_16;
                    __builtin_memset(&s_16, 0, 0x18);
                    x22 = *PuduCamera::MarkerCamera::TAG;
                    size_t x0_43 = strlen(x22);
                    if (x0_43 < -0x10)
                    {
                        goto label_1fb04;
                    }
                    void* var_290_1;
                    void* x24_2;
                    if (x0_43 >= 0x17)
                    {
                        uint64_t x25_3 = ((x0_43 + 0x10) & 0xfffffffffffffff0);
                        void* x0_71 = operator new(x25_3);
                        x24_2 = x0_71;
                        var_290_1 = x0_71;
                        s_16 = (x25_3 | 1);
                        size_t var_298_1 = x0_43;
                    }
                    else
                    {
                        x24_2 = (&s_16 | 1);
                        s_16 = (x0_43 << 1);
                    }
                    if ((x0_43 >= 0x17 || (x0_43 < 0x17 && x0_43 != 0)))
                    {
                        memcpy(x24_2, x22, x0_43);
                    }
                    *(x24_2 + x0_43) = 0;
                    x22_3 = g3::logTag(&s_16);
                    if ((s_16 & 1) != 0)
                    {
                        operator delete(var_290_1);
                        if ((s_17 & 1) != 0)
                        {
                            goto label_1e77c;
                        }
                    }
                    else if ((s_17 & 1) != 0)
                    {
                        goto label_1e77c;
                    }
                }
                if ((x22_3 & 1) == 0)
                {
                    goto label_1eae0;
                }
            label_1eab8:
                LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            label_1eae0:
                *x19 = 0;
                std::__ndk1::to_string(arg1);
                int128_t* s_25;
                int128_t v0_1;
                s_25 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_24, nullptr, "/dev/video");
                var_2b0 = s_25[1];
                var_2c0 = *s_25;
                __builtin_memset(s_25, 0, 0x18);
                if ((s_24 & 1) != 0)
                {
                    operator delete(var_1b0_1);
                }
                if ((*data_57408 & 1) == 0)
                {
                    x22 = &*(data_57408 + 1);
                }
                else
                {
                    x22 = *(data_57412 + 6);
                }
                int32_t var_2e0 = data_57400;
                int64_t s_15;
                __builtin_memset(&s_15, 0, 0x18);
                size_t x0_80 = strlen(x22);
                if (x0_80 < -0x10)
                {
                    goto label_1faec;
                }
                uint64_t var_2c8_1;
                if (x0_80 >= 0x17)
                {
                    uint64_t x24_4 = ((x0_80 + 0x10) & 0xfffffffffffffff0);
                    uint64_t x0_82 = operator new(x24_4);
                    x23 = x0_82;
                    size_t var_2d0_1 = x0_80;
                    var_2c8_1 = x0_82;
                    s_15 = (x24_4 | 1);
                }
                else
                {
                    x23 = &*s_15[1];
                    s_15 = (x0_80 << 1);
                }
                if ((x0_80 >= 0x17 || (x0_80 < 0x17 && x0_80 != 0)))
                {
                    memcpy(x23, x22, x0_80);
                }
                *(x23 + x0_80) = 0;
                int32_t x20_13;
                if ((g3::logLevel(&var_2e0) & 1) == 0)
                {
                    x20_13 = 0;
                    if ((s_15 & 1) != 0)
                    {
                    label_1ec1c:
                        operator delete(var_2c8_1);
                        if ((x20_13 & 1) == 0)
                        {
                            goto label_1ec28;
                        }
                        goto label_1ecc0;
                    }
                }
                else
                {
                    int64_t s_14;
                    __builtin_memset(&s_14, 0, 0x18);
                    uint64_t x20_12 = *PuduCamera::MarkerCamera::TAG;
                    size_t x0_87 = strlen(x20_12);
                    if (x0_87 < -0x10)
                    {
                        goto label_1fb0c;
                    }
                    void* var_2e8_1;
                    void* x23_3;
                    if (x0_87 >= 0x17)
                    {
                        uint64_t x24_5 = ((x0_87 + 0x10) & 0xfffffffffffffff0);
                        void* x0_91 = operator new(x24_5);
                        x23_3 = x0_91;
                        size_t var_2f0_1 = x0_87;
                        var_2e8_1 = x0_91;
                        s_14 = (x24_5 | 1);
                    }
                    else
                    {
                        x23_3 = (&s_14 | 1);
                        s_14 = (x0_87 << 1);
                    }
                    if ((x0_87 >= 0x17 || (x0_87 < 0x17 && x0_87 != 0)))
                    {
                        memcpy(x23_3, x20_12, x0_87);
                    }
                    *(x23_3 + x0_87) = 0;
                    x20_13 = g3::logTag(&s_14);
                    if ((s_14 & 1) != 0)
                    {
                        operator delete(var_2e8_1);
                        if ((s_15 & 1) != 0)
                        {
                            goto label_1ec1c;
                        }
                    }
                    else if ((s_15 & 1) != 0)
                    {
                        goto label_1ec1c;
                    }
                }
                void* x25_4;
                if ((x20_13 & 1) == 0)
                {
                label_1ec28:
                    x25_4 = (&var_2c0 | 1);
                label_1ecfc:
                    var_310 = 0;
                    int64_t var_308_1 = 0;
                    var_310 = 0x22;
                    var_300 = nullptr;
                    *var_300[1] = 0x20;
                    void* x1_23;
                    if ((var_2c0 & 1) == 0)
                    {
                        x1_23 = x25_4;
                    }
                    else
                    {
                        x1_23 = var_2b0;
                    }
                    int128_t var_30f;
                    __builtin_strncpy(&var_30f, "su -c \"chmod 777", 0x10);
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_310, x1_23);
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_310, &data_3cbab);
                    void* x0_98;
                    if ((var_310 & 1) == 0)
                    {
                        x0_98 = (&var_310 | 1);
                    }
                    else
                    {
                        x0_98 = var_300;
                    }
                    system(x0_98);
                    int64_t* x0_99 = *(x19 + 0x18);
                    if (x0_99 != 0)
                    {
                        *(x19 + 0x18) = 0;
                        *(*x0_99 + 8)();
                    }
                    if ((*data_57408 & 1) == 0)
                    {
                        x22 = &*(data_57408 + 1);
                    }
                    else
                    {
                        x22 = *(data_57412 + 6);
                    }
                    int32_t var_330 = data_57400;
                    int64_t s_13;
                    __builtin_memset(&s_13, 0, 0x18);
                    size_t x0_101 = strlen(x22);
                    if (x0_101 < -0x10)
                    {
                        goto label_1faf4;
                    }
                    uint64_t var_318_1;
                    if (x0_101 >= 0x17)
                    {
                        uint64_t x24_6 = ((x0_101 + 0x10) & 0xfffffffffffffff0);
                        uint64_t x0_103 = operator new(x24_6);
                        x23 = x0_103;
                        size_t var_320_1 = x0_101;
                        var_318_1 = x0_103;
                        s_13 = (x24_6 | 1);
                    }
                    else
                    {
                        x23 = &*s_13[1];
                        s_13 = (x0_101 << 1);
                    }
                    if ((x0_101 >= 0x17 || (x0_101 < 0x17 && x0_101 != 0)))
                    {
                        memcpy(x23, x22, x0_101);
                    }
                    *(x23 + x0_101) = 0;
                    int32_t x20_16;
                    if ((g3::logLevel(&var_330) & 1) == 0)
                    {
                        x20_16 = 0;
                        if ((s_13 & 1) != 0)
                        {
                        label_1ee78:
                            operator delete(var_318_1);
                            if ((x20_16 & 1) == 0)
                            {
                                goto label_1ef34;
                            }
                            goto label_1ef14;
                        }
                    }
                    else
                    {
                        int64_t s_12;
                        __builtin_memset(&s_12, 0, 0x18);
                        char* x20_15 = *PuduCamera::MarkerCamera::TAG;
                        size_t x0_108 = strlen(x20_15);
                        if (x0_108 < -0x10)
                        {
                            goto label_1fb14;
                        }
                        uint64_t var_338_1;
                        if (x0_108 >= 0x17)
                        {
                            uint64_t x24_7 = ((x0_108 + 0x10) & 0xfffffffffffffff0);
                            uint64_t x0_112 = operator new(x24_7);
                            x23 = x0_112;
                            size_t var_340_1 = x0_108;
                            var_338_1 = x0_112;
                            s_12 = (x24_7 | 1);
                        }
                        else
                        {
                            x23 = (&s_12 | 1);
                            s_12 = (x0_108 << 1);
                        }
                        if ((x0_108 >= 0x17 || (x0_108 < 0x17 && x0_108 != 0)))
                        {
                            memcpy(x23, x20_15, x0_108);
                        }
                        *(x23 + x0_108) = 0;
                        x20_16 = g3::logTag(&s_12);
                        if ((s_12 & 1) != 0)
                        {
                            operator delete(var_338_1);
                            if ((s_13 & 1) != 0)
                            {
                                goto label_1ee78;
                            }
                        }
                        else if ((s_13 & 1) != 0)
                        {
                            goto label_1ee78;
                        }
                    }
                    if ((x20_16 & 1) == 0)
                    {
                        goto label_1ef34;
                    }
                label_1ef14:
                    LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                label_1ef34:
                    void** x0_117 = operator new(0x458);
                    memset(x0_117, 0, 0x420);
                    __builtin_memset(&x0_117[3], 0, 0x18);
                    __builtin_memset(&x0_117[0x84], 0, 0x38);
                    *x0_117 = (_vtable_for_cv::CvCaptureCAM_V4L + 0x10);
                    uint32_t x9_10 = var_2c0;
                    *(x0_117 + 0xcc) = *(x19 + 4);
                    bool x1_28;
                    if ((x9_10 & 1) == 0)
                    {
                        x1_28 = x25_4;
                    }
                    else
                    {
                        x1_28 = var_2b0;
                    }
                    *(x0_117 + 0xd4) = *(x19 + 0xc);
                    if ((cv::CvCaptureCAM_V4L::open(x0_117, x1_28) & 1) == 0)
                    {
                        char* x21_9;
                        if ((*data_57488 & 1) == 0)
                        {
                            x21_9 = &*(data_57488 + 1);
                        }
                        else
                        {
                            x21_9 = *(data_57492 + 6);
                        }
                        int32_t var_368 = data_57480;
                        int64_t s_11;
                        __builtin_memset(&s_11, 0, 0x18);
                        size_t x0_123 = strlen(x21_9);
                        if (x0_123 < -0x10)
                        {
                            goto label_1fb24;
                        }
                        uint64_t var_350_1;
                        if (x0_123 >= 0x17)
                        {
                            uint64_t x23_6 = ((x0_123 + 0x10) & 0xfffffffffffffff0);
                            uint64_t x0_133 = operator new(x23_6);
                            x22 = x0_133;
                            size_t var_358_1 = x0_123;
                            var_350_1 = x0_133;
                            s_11 = (x23_6 | 1);
                        }
                        else
                        {
                            x22 = &*s_11[1];
                            s_11 = (x0_123 << 1);
                        }
                        if ((x0_123 >= 0x17 || (x0_123 < 0x17 && x0_123 != 0)))
                        {
                            memcpy(x22, x21_9, x0_123);
                        }
                        *(x22 + x0_123) = 0;
                        int32_t x19_9;
                        if ((g3::logLevel(&var_368) & 1) == 0)
                        {
                            x19_9 = 0;
                            if ((s_11 & 1) != 0)
                            {
                            label_1f1bc:
                                operator delete(var_350_1);
                                if ((x19_9 & 1) == 0)
                                {
                                    goto label_1f418;
                                }
                                goto label_1f3e8;
                            }
                        }
                        else
                        {
                            int64_t s_10;
                            __builtin_memset(&s_10, 0, 0x18);
                            uint64_t x19_8 = *PuduCamera::MarkerCamera::TAG;
                            size_t x0_138 = strlen(x19_8);
                            if (x0_138 < -0x10)
                            {
                                goto label_1fb4c;
                            }
                            void* var_370_1;
                            void* x22_9;
                            if (x0_138 >= 0x17)
                            {
                                uint64_t x23_9 = ((x0_138 + 0x10) & 0xfffffffffffffff0);
                                void* x0_158 = operator new(x23_9);
                                x22_9 = x0_158;
                                size_t var_378_1 = x0_138;
                                var_370_1 = x0_158;
                                s_10 = (x23_9 | 1);
                            }
                            else
                            {
                                x22_9 = (&s_10 | 1);
                                s_10 = (x0_138 << 1);
                            }
                            if ((x0_138 >= 0x17 || (x0_138 < 0x17 && x0_138 != 0)))
                            {
                                memcpy(x22_9, x19_8, x0_138);
                            }
                            *(x22_9 + x0_138) = 0;
                            x19_9 = g3::logTag(&s_10);
                            if ((s_10 & 1) != 0)
                            {
                                operator delete(var_370_1);
                                if ((s_11 & 1) != 0)
                                {
                                    goto label_1f1bc;
                                }
                            }
                            else if ((s_11 & 1) != 0)
                            {
                                goto label_1f1bc;
                            }
                        }
                        if ((x19_9 & 1) == 0)
                        {
                            goto label_1f418;
                        }
                    label_1f3e8:
                        LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                        *__errno();
                        LogCapture::capturef();
                        LogCapture::~LogCapture();
                    label_1f418:
                        *(*x0_117 + 8)(x0_117);
                        x20_8 = 4;
                        if ((var_310 & 1) != 0)
                        {
                        label_1f42c:
                            operator delete(var_300);
                        }
                    }
                    else
                    {
                        if ((*data_57408 & 1) == 0)
                        {
                            x22 = &*(data_57408 + 1);
                        }
                        else
                        {
                            x22 = *(data_57412 + 6);
                        }
                        int32_t var_3a0 = data_57400;
                        int64_t s_9;
                        __builtin_memset(&s_9, 0, 0x18);
                        size_t x0_121 = strlen(x22);
                        if (x0_121 < -0x10)
                        {
                            goto label_1fb1c;
                        }
                        void* var_388_1;
                        void* x23_4;
                        if (x0_121 >= 0x17)
                        {
                            uint64_t x24_8 = ((x0_121 + 0x10) & 0xfffffffffffffff0);
                            void* x0_126 = operator new(x24_8);
                            x23_4 = x0_126;
                            size_t var_390_1 = x0_121;
                            var_388_1 = x0_126;
                            s_9 = (x24_8 | 1);
                        }
                        else
                        {
                            x23_4 = &*s_9[1];
                            s_9 = (x0_121 << 1);
                        }
                        if ((x0_121 >= 0x17 || (x0_121 < 0x17 && x0_121 != 0)))
                        {
                            memcpy(x23_4, x22, x0_121);
                        }
                        *(x23_4 + x0_121) = 0;
                        int32_t x0_129 = g3::logLevel(&var_3a0);
                        int32_t x21_12;
                        if ((x0_129 & 1) == 0)
                        {
                            x21_12 = 0;
                            if ((s_9 & 1) != 0)
                            {
                            label_1f1a0:
                                operator delete(var_388_1);
                                if ((x21_12 & 1) != 0)
                                {
                                    goto label_1f244;
                                }
                            }
                        }
                        else
                        {
                            int64_t s_8;
                            __builtin_memset(&s_8, 0, 0x18);
                            uint64_t x21_10 = *PuduCamera::MarkerCamera::TAG;
                            size_t x0_131 = strlen(x21_10);
                            if (x0_131 < -0x10)
                            {
                                goto label_1fb44;
                            }
                            void* var_3a8_1;
                            void* x23_5;
                            if (x0_131 >= 0x17)
                            {
                                uint64_t x24_9 = ((x0_131 + 0x10) & 0xfffffffffffffff0);
                                void* x0_142 = operator new(x24_9);
                                x23_5 = x0_142;
                                size_t var_3b0_1 = x0_131;
                                var_3a8_1 = x0_142;
                                s_8 = (x24_9 | 1);
                            }
                            else
                            {
                                x23_5 = (&s_8 | 1);
                                s_8 = (x0_131 << 1);
                            }
                            if ((x0_131 >= 0x17 || (x0_131 < 0x17 && x0_131 != 0)))
                            {
                                memcpy(x23_5, x21_10, x0_131);
                            }
                            *(x23_5 + x0_131) = 0;
                            x21_12 = g3::logTag(&s_8);
                            if ((s_8 & 1) != 0)
                            {
                                operator delete(var_3a8_1);
                                if ((s_9 & 1) != 0)
                                {
                                    goto label_1f1a0;
                                }
                            }
                            else if ((s_9 & 1) != 0)
                            {
                                goto label_1f1a0;
                            }
                        }
                        if (((((x0_129 & 1) == 0 && (s_9 & 1) == 0) || (x0_129 & 1) != 0) && (x21_12 & 1) != 0))
                        {
                        label_1f244:
                            LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                            x0_117[0x19];
                            x0_117[0x1b];
                            *(x0_117 + 0xd4);
                            LogCapture::capturef();
                            LogCapture::~LogCapture();
                        }
                        if ((*data_57408 & 1) != 0)
                        {
                            x22 = *(data_57412 + 6);
                            goto label_1f290;
                        }
                        x22 = &*(data_57408 + 1);
                    label_1f290:
                        int32_t var_3d8 = data_57400;
                        int64_t s_7;
                        __builtin_memset(&s_7, 0, 0x18);
                        size_t x0_148 = strlen(x22);
                        if (x0_148 < -0x10)
                        {
                            goto label_1fb2c;
                        }
                        void* var_3c0_1;
                        void* x23_7;
                        if (x0_148 >= 0x17)
                        {
                            uint64_t x24_10 = ((x0_148 + 0x10) & 0xfffffffffffffff0);
                            void* x0_150 = operator new(x24_10);
                            x23_7 = x0_150;
                            size_t var_3c8_1 = x0_148;
                            var_3c0_1 = x0_150;
                            s_7 = (x24_10 | 1);
                        }
                        else
                        {
                            x23_7 = &*s_7[1];
                            s_7 = (x0_148 << 1);
                        }
                        if ((x0_148 >= 0x17 || (x0_148 < 0x17 && x0_148 != 0)))
                        {
                            memcpy(x23_7, x22, x0_148);
                        }
                        *(x23_7 + x0_148) = 0;
                        int32_t x0_153 = g3::logLevel(&var_3d8);
                        int32_t x21_15;
                        if ((x0_153 & 1) == 0)
                        {
                            x21_15 = 0;
                            if ((s_7 & 1) != 0)
                            {
                            label_1f360:
                                operator delete(var_3c0_1);
                                if ((x21_15 & 1) != 0)
                                {
                                    goto label_1f4e8;
                                }
                            }
                        }
                        else
                        {
                            int64_t s_6;
                            __builtin_memset(&s_6, 0, 0x18);
                            uint64_t x21_14 = *PuduCamera::MarkerCamera::TAG;
                            size_t x0_155 = strlen(x21_14);
                            if (x0_155 < -0x10)
                            {
                                goto label_1fb54;
                            }
                            void* var_3e0_1;
                            void* x23_8;
                            if (x0_155 >= 0x17)
                            {
                                uint64_t x24_11 = ((x0_155 + 0x10) & 0xfffffffffffffff0);
                                void* x0_170 = operator new(x24_11);
                                x23_8 = x0_170;
                                size_t var_3e8_1 = x0_155;
                                var_3e0_1 = x0_170;
                                s_6 = (x24_11 | 1);
                            }
                            else
                            {
                                x23_8 = (&s_6 | 1);
                                s_6 = (x0_155 << 1);
                            }
                            if ((x0_155 >= 0x17 || (x0_155 < 0x17 && x0_155 != 0)))
                            {
                                memcpy(x23_8, x21_14, x0_155);
                            }
                            *(x23_8 + x0_155) = 0;
                            x21_15 = g3::logTag(&s_6);
                            if ((s_6 & 1) != 0)
                            {
                                operator delete(var_3e0_1);
                                if ((s_7 & 1) != 0)
                                {
                                    goto label_1f360;
                                }
                            }
                            else if ((s_7 & 1) != 0)
                            {
                                goto label_1f360;
                            }
                        }
                        if (((((x0_153 & 1) == 0 && (s_7 & 1) == 0) || (x0_153 & 1) != 0) && (x21_15 & 1) != 0))
                        {
                        label_1f4e8:
                            LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                            LogCapture::capturef();
                            LogCapture::~LogCapture();
                        }
                        if ((*data_57408 & 1) != 0)
                        {
                            x22 = *(data_57412 + 6);
                            goto label_1f530;
                        }
                        x22 = &*(data_57408 + 1);
                    label_1f530:
                        int32_t var_410 = data_57400;
                        int64_t s_5;
                        __builtin_memset(&s_5, 0, 0x18);
                        size_t x0_176 = strlen(x22);
                        if (x0_176 < -0x10)
                        {
                            goto label_1fb34;
                        }
                        void* var_3f8_1;
                        void* x23_10;
                        if (x0_176 >= 0x17)
                        {
                            uint64_t x24_12 = ((x0_176 + 0x10) & 0xfffffffffffffff0);
                            void* x0_178 = operator new(x24_12);
                            x23_10 = x0_178;
                            size_t var_400_1 = x0_176;
                            var_3f8_1 = x0_178;
                            s_5 = (x24_12 | 1);
                        }
                        else
                        {
                            x23_10 = &*s_5[1];
                            s_5 = (x0_176 << 1);
                        }
                        if ((x0_176 >= 0x17 || (x0_176 < 0x17 && x0_176 != 0)))
                        {
                            memcpy(x23_10, x22, x0_176);
                        }
                        *(x23_10 + x0_176) = 0;
                        int32_t x0_181 = g3::logLevel(&var_410);
                        int32_t x21_18;
                        if ((x0_181 & 1) == 0)
                        {
                            x21_18 = 0;
                            if ((s_5 & 1) != 0)
                            {
                            label_1f600:
                                operator delete(var_3f8_1);
                                if ((x21_18 & 1) != 0)
                                {
                                    goto label_1f69c;
                                }
                            }
                        }
                        else
                        {
                            int64_t s_4;
                            __builtin_memset(&s_4, 0, 0x18);
                            uint64_t x21_17 = *PuduCamera::MarkerCamera::TAG;
                            size_t x0_183 = strlen(x21_17);
                            if (x0_183 < -0x10)
                            {
                                goto label_1fb5c;
                            }
                            void* var_418_1;
                            void* x23_11;
                            if (x0_183 >= 0x17)
                            {
                                uint64_t x24_13 = ((x0_183 + 0x10) & 0xfffffffffffffff0);
                                void* x0_187 = operator new(x24_13);
                                x23_11 = x0_187;
                                size_t var_420_1 = x0_183;
                                var_418_1 = x0_187;
                                s_4 = (x24_13 | 1);
                            }
                            else
                            {
                                x23_11 = (&s_4 | 1);
                                s_4 = (x0_183 << 1);
                            }
                            if ((x0_183 >= 0x17 || (x0_183 < 0x17 && x0_183 != 0)))
                            {
                                memcpy(x23_11, x21_17, x0_183);
                            }
                            *(x23_11 + x0_183) = 0;
                            x21_18 = g3::logTag(&s_4);
                            if ((s_4 & 1) != 0)
                            {
                                operator delete(var_418_1);
                                if ((s_5 & 1) != 0)
                                {
                                    goto label_1f600;
                                }
                            }
                            else if ((s_5 & 1) != 0)
                            {
                                goto label_1f600;
                            }
                        }
                        if (((((x0_181 & 1) == 0 && (s_5 & 1) == 0) || (x0_181 & 1) != 0) && (x21_18 & 1) != 0))
                        {
                        label_1f69c:
                            LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                            LogCapture::capturef();
                            LogCapture::~LogCapture();
                        }
                        if ((*data_57408 & 1) != 0)
                        {
                            x22 = *(data_57412 + 6);
                            goto label_1f6e4;
                        }
                        x22 = &*(data_57408 + 1);
                    label_1f6e4:
                        int32_t var_448 = data_57400;
                        int64_t s_3;
                        __builtin_memset(&s_3, 0, 0x18);
                        size_t x0_193 = strlen(x22);
                        if (x0_193 < -0x10)
                        {
                            goto label_1fb3c;
                        }
                        void* var_430_1;
                        void* x23_12;
                        if (x0_193 >= 0x17)
                        {
                            uint64_t x24_14 = ((x0_193 + 0x10) & 0xfffffffffffffff0);
                            void* x0_195 = operator new(x24_14);
                            x23_12 = x0_195;
                            size_t var_438_1 = x0_193;
                            var_430_1 = x0_195;
                            s_3 = (x24_14 | 1);
                        }
                        else
                        {
                            x23_12 = &*s_3[1];
                            s_3 = (x0_193 << 1);
                        }
                        if ((x0_193 >= 0x17 || (x0_193 < 0x17 && x0_193 != 0)))
                        {
                            memcpy(x23_12, x22, x0_193);
                        }
                        *(x23_12 + x0_193) = 0;
                        int32_t x21_21;
                        if ((g3::logLevel(&var_448) & 1) == 0)
                        {
                            x21_21 = 0;
                            if ((s_3 & 1) != 0)
                            {
                            label_1f7b8:
                                operator delete(var_430_1);
                                if ((x21_21 & 1) == 0)
                                {
                                    goto label_1f874;
                                }
                                goto label_1f854;
                            }
                        }
                        else
                        {
                            int64_t s_2;
                            __builtin_memset(&s_2, 0, 0x18);
                            uint64_t x21_20 = *PuduCamera::MarkerCamera::TAG;
                            size_t x0_200 = strlen(x21_20);
                            if (x0_200 < -0x10)
                            {
                                goto label_1fb64;
                            }
                            void* var_450_1;
                            void* x23_13;
                            if (x0_200 >= 0x17)
                            {
                                uint64_t x24_15 = ((x0_200 + 0x10) & 0xfffffffffffffff0);
                                void* x0_204 = operator new(x24_15);
                                x23_13 = x0_204;
                                size_t var_458_1 = x0_200;
                                var_450_1 = x0_204;
                                s_2 = (x24_15 | 1);
                            }
                            else
                            {
                                x23_13 = (&s_2 | 1);
                                s_2 = (x0_200 << 1);
                            }
                            if ((x0_200 >= 0x17 || (x0_200 < 0x17 && x0_200 != 0)))
                            {
                                memcpy(x23_13, x21_20, x0_200);
                            }
                            *(x23_13 + x0_200) = 0;
                            x21_21 = g3::logTag(&s_2);
                            if ((s_2 & 1) != 0)
                            {
                                operator delete(var_450_1);
                                if ((s_3 & 1) != 0)
                                {
                                    goto label_1f7b8;
                                }
                            }
                            else if ((s_3 & 1) != 0)
                            {
                                goto label_1f7b8;
                            }
                        }
                        if ((x21_21 & 1) == 0)
                        {
                            goto label_1f874;
                        }
                    label_1f854:
                        LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                        x0_117[1];
                        LogCapture::capturef();
                        LogCapture::~LogCapture();
                    label_1f874:
                        int32_t x8_142 = x0_117[1];
                        int64_t* x0_209 = *(x19 + 0x18);
                        *(x19 + 0x18) = x0_117;
                        *(x19 + 0x20) = x8_142;
                        if (x0_209 != 0)
                        {
                            *(*x0_209 + 8)();
                        }
                        *(x19 + 0x10);
                        if ((PuduCamera::MarkerCamera::setExposure(x19) & 1) != 0)
                        {
                            x20_8 = 0;
                            *x19 = 1;
                            *(x19 + 0x28) = 0;
                            if ((var_310 & 1) != 0)
                            {
                                goto label_1f42c;
                            }
                        }
                        else
                        {
                            char* x21_22;
                            if ((*data_57488 & 1) == 0)
                            {
                                x21_22 = &*(data_57488 + 1);
                            }
                            else
                            {
                                x21_22 = *(data_57492 + 6);
                            }
                            int32_t var_480 = data_57480;
                            int64_t s_1;
                            __builtin_memset(&s_1, 0, 0x18);
                            size_t x0_213 = strlen(x21_22);
                            if (x0_213 < -0x10)
                            {
                                goto label_1fb6c;
                            }
                            void* var_468_1;
                            void* x22_13;
                            if (x0_213 >= 0x17)
                            {
                                uint64_t x23_14 = ((x0_213 + 0x10) & 0xfffffffffffffff0);
                                void* x0_216 = operator new(x23_14);
                                x22_13 = x0_216;
                                size_t var_470_1 = x0_213;
                                var_468_1 = x0_216;
                                s_1 = (x23_14 | 1);
                            }
                            else
                            {
                                x22_13 = &*s_1[1];
                                s_1 = (x0_213 << 1);
                            }
                            if ((x0_213 >= 0x17 || (x0_213 < 0x17 && x0_213 != 0)))
                            {
                                memcpy(x22_13, x21_22, x0_213);
                            }
                            *(x22_13 + x0_213) = 0;
                            int32_t x20_20;
                            if ((g3::logLevel(&var_480) & 1) == 0)
                            {
                                x20_20 = 0;
                                if ((s_1 & 1) != 0)
                                {
                                label_1f9d0:
                                    operator delete(var_468_1);
                                    if ((x20_20 & 1) == 0)
                                    {
                                        goto label_1fa78;
                                    }
                                    goto label_1fa58;
                                }
                            }
                            else
                            {
                                int64_t s;
                                __builtin_memset(&s, 0, 0x18);
                                uint64_t x20_19 = *PuduCamera::MarkerCamera::TAG;
                                size_t x0_221 = strlen(x20_19);
                                if (x0_221 < -0x10)
                                {
                                    goto label_1fb74;
                                }
                                void* var_488_1;
                                void* x22_14;
                                if (x0_221 >= 0x17)
                                {
                                    uint64_t x23_15 = ((x0_221 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_224 = operator new(x23_15);
                                    x22_14 = x0_224;
                                    size_t var_490_1 = x0_221;
                                    var_488_1 = x0_224;
                                    s = (x23_15 | 1);
                                }
                                else
                                {
                                    x22_14 = (&s | 1);
                                    s = (x0_221 << 1);
                                }
                                if ((x0_221 >= 0x17 || (x0_221 < 0x17 && x0_221 != 0)))
                                {
                                    memcpy(x22_14, x20_19, x0_221);
                                }
                                *(x22_14 + x0_221) = 0;
                                x20_20 = g3::logTag(&s);
                                if ((s & 1) != 0)
                                {
                                    operator delete(var_488_1);
                                    if ((s_1 & 1) != 0)
                                    {
                                        goto label_1f9d0;
                                    }
                                }
                                else if ((s_1 & 1) != 0)
                                {
                                    goto label_1f9d0;
                                }
                            }
                            if ((x20_20 & 1) == 0)
                            {
                                goto label_1fa78;
                            }
                        label_1fa58:
                            LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                            *(x19 + 0x10);
                            LogCapture::capturef();
                            LogCapture::~LogCapture();
                        label_1fa78:
                            int64_t* x0_229 = *(x19 + 0x18);
                            *(x19 + 0x18) = 0;
                            if (x0_229 != 0)
                            {
                                *(*x0_229 + 8)();
                            }
                            x20_8 = 5;
                            if ((var_310 & 1) != 0)
                            {
                                goto label_1f42c;
                            }
                        }
                    }
                    if ((var_2c0 & 1) == 0)
                    {
                        goto label_1e9e4;
                    }
                    operator delete(var_2b0);
                    goto label_1e9e4;
                }
            label_1ecc0:
                LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                x25_4 = (&var_2c0 | 1);
                LogCapture::capturef();
                LogCapture::~LogCapture();
                goto label_1ecfc;
            }
            if ((s_24 & 1) != 0)
            {
                arg1 = operator delete(var_1b0_1);
            }
            x27_1 = &x27_1[0x18];
        } while (x26_1 != x27_1);
        if (((*x27_1 & 1) != 0 && x20_1 < -0x10))
        {
            goto label_1fabc;
        }
    }
    char* x20_3;
    if ((*data_57408 & 1) == 0)
    {
        x20_3 = &*(data_57408 + 1);
    }
    else
    {
        x20_3 = *(data_57412 + 6);
    }
    int32_t var_250 = data_57400;
    int64_t s_19;
    __builtin_memset(&s_19, 0, 0x18);
    size_t x0_5 = strlen(x20_3);
    if (x0_5 < -0x10)
    {
        goto label_1fac4;
    }
    void* var_238_1;
    void* x21_2;
    if (x0_5 >= 0x17)
    {
        x22 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
        void* x0_11 = operator new(x22);
        x21_2 = x0_11;
        var_238_1 = x0_11;
        s_19 = (x22 | 1);
        size_t var_240_1 = x0_5;
    }
    else
    {
        x21_2 = &*s_19[1];
        s_19 = (x0_5 << 1);
    }
    if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
    {
        memcpy(x21_2, x20_3, x0_5);
    }
    *(x21_2 + x0_5) = 0;
    int32_t x19_3;
    if ((g3::logLevel(&var_250) & 1) == 0)
    {
        x19_3 = 0;
        if ((s_19 & 1) != 0)
        {
        label_1e4c0:
            operator delete(var_238_1);
            if ((x19_3 & 1) == 0)
            {
                goto label_1e4c8;
            }
            goto label_1e6a4;
        }
    }
    else
    {
        int64_t s_18;
        __builtin_memset(&s_18, 0, 0x18);
        uint64_t x19_2 = *PuduCamera::MarkerCamera::TAG;
        size_t x0_16 = strlen(x19_2);
        if (x0_16 < -0x10)
        {
            goto label_1fadc;
        }
        void* var_258_1;
        void* x21_4;
        if (x0_16 >= 0x17)
        {
            uint64_t x22_2 = ((x0_16 + 0x10) & 0xfffffffffffffff0);
            void* x0_31 = operator new(x22_2);
            x21_4 = x0_31;
            var_258_1 = x0_31;
            s_18 = (x22_2 | 1);
            size_t var_260_1 = x0_16;
        }
        else
        {
            x21_4 = (&s_18 | 1);
            s_18 = (x0_16 << 1);
        }
        if ((x0_16 >= 0x17 || (x0_16 < 0x17 && x0_16 != 0)))
        {
            memcpy(x21_4, x19_2, x0_16);
        }
        *(x21_4 + x0_16) = 0;
        x19_3 = g3::logTag(&s_18);
        if ((s_18 & 1) != 0)
        {
            operator delete(var_258_1);
            if ((s_19 & 1) != 0)
            {
                goto label_1e4c0;
            }
        }
        else if ((s_19 & 1) != 0)
        {
            goto label_1e4c0;
        }
    }
    if ((x19_3 & 1) == 0)
    {
    label_1e4c8:
        x20_8 = 2;
        goto label_1e9e4;
    }
label_1e6a4:
    LogCapture::LogCapture(&s_24, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
    LogCapture::capturef();
    LogCapture::~LogCapture();
    x20_8 = 2;
    goto label_1e9e4;
}

int64_t sub_1fb7c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    void* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_3, x1);
}

int64_t sub_1fb80(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        if ((arg6 & 1) != 0)
        {
            goto label_1fee4;
        }
    }
    if (((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)) && (arg6 & 1) != 0))
    {
    label_1fee4:
        operator delete(arg7);
    }
    if ((arg8 & 1) != 0)
    {
        operator delete(arg9);
    }
    void* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_5, x1);
}

int64_t sub_1fba0(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6)
{
    LogCapture::~LogCapture();
    *(*arg2 + 8)(arg2);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    void* x0_4;
    int32_t x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_4, x1);
}

int64_t sub_1fba4(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6)
{
    *(*arg2 + 8)(arg2);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    void* x0_4;
    int32_t x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_4, x1);
}

int64_t sub_1fba8(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    *(*arg2 + 8)(arg2);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    void* x0_6;
    int32_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_6, x1);
}

int64_t sub_1fbd0(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    *(*arg2 + 8)(arg2);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    void* x0_6;
    int32_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_6, x1);
}

int64_t sub_1fbf8(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    *(*arg2 + 8)(arg2);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    void* x0_6;
    int32_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_6, x1);
}

int64_t sub_1fc20(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    *(*arg2 + 8)(arg2);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    void* x0_6;
    int32_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_6, x1);
}

int64_t sub_1fc54(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    *(*arg2 + 8)(arg2);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    void* x0_6;
    int32_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_6, x1);
}

int64_t sub_1fc74(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    void* x0_4;
    int32_t x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_4, x1);
}

int64_t sub_1fc88(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_2, x1);
}

int64_t sub_1fca8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        if ((arg6 & 1) != 0)
        {
            goto label_1fee4;
        }
    }
    if (((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)) && (arg6 & 1) != 0))
    {
    label_1fee4:
        operator delete(arg7);
    }
    if ((arg8 & 1) != 0)
    {
        operator delete(arg9);
    }
    void* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_5, x1);
}

int64_t sub_1fcf0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    void* x0_4;
    int32_t x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_4, x1);
}

int64_t sub_1fd10(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(x0_1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_5, x1);
}

int64_t sub_1fd14(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_3, x1);
}

int64_t sub_1fd38(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    *(*arg2 + 8)(arg2);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    void* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_5, x1);
}

int64_t sub_1fd50(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    *(*arg2 + 8)(arg2);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    void* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_5, x1);
}

int64_t sub_1fd68(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    *(*arg2 + 8)(arg2);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    void* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_5, x1);
}

int64_t sub_1fd80(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    *(*arg2 + 8)(arg2);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    void* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_5, x1);
}

int64_t sub_1fd98(int64_t arg1, int64_t* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    *(*arg2 + 8)(arg2);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    void* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_5, x1);
}

int64_t sub_1fdb0(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_2, x1);
}

int64_t sub_1fdb8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_3, x1);
}

int64_t sub_1fdf0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_3, x1);
}

int64_t sub_1fe10(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    void* x0_4;
    int32_t x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_4, x1);
}

int64_t sub_1fe30(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    void* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_3, x1);
}

int64_t sub_1fe44(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_2, x1);
}

int64_t sub_1fe8c(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_2, x1);
}

int64_t sub_1fec0(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_2, x1);
}

int64_t sub_1fed4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    void* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_3, x1);
}

int64_t sub_1fef8(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::setExposure(x0_2, x1);
}

int64_t PuduCamera::MarkerCamera::setExposure(void* arg1, int32_t arg2)
{
    int64_t v9;
    int64_t var_70 = v9;
    int64_t v8;
    int64_t var_68 = v8;
    int64_t* x23;
    int64_t* var_38 = x23;
    char* x22;
    char* var_30 = x22;
    void* x19;
    void* var_18 = x19;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    char s_10;
    void* var_2d8;
    char s_11;
    void* var_2b8;
    char s_15;
    void* var_248;
    void var_1c8;
    int64_t x0_92;
    if ((*(arg1 + 0x20) & 0x80000000) == 0)
    {
        if (arg2 == 0)
        {
        label_2105c:
            x0_92 = 1;
        label_211e0:
            if (*(x26 + 0x28) == x8)
            {
                return x0_92;
            }
        label_21248:
            __stack_chk_fail();
            /* no return */
        }
        if ((*data_57408 & 1) == 0)
        {
            x22 = &*(data_57408 + 1);
        }
        else
        {
            x22 = *(data_57412 + 6);
        }
        int32_t var_228 = data_57400;
        int64_t s_17;
        __builtin_memset(&s_17, 0, 0x18);
        size_t x0_1 = strlen(x22);
        if (x0_1 >= -0x10)
        {
            void* var_210_1;
            void* x19_1;
            if (x0_1 >= 0x17)
            {
                uint64_t x23_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_5 = operator new(x23_1);
                x19_1 = x0_5;
                var_210_1 = x0_5;
                s_17 = (x23_1 | 1);
                size_t var_218_1 = x0_1;
            }
            else
            {
                x19_1 = &*s_17[1];
                s_17 = (x0_1 << 1);
            }
            if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
            {
                memcpy(x19_1, x22, x0_1);
            }
            *(x19_1 + x0_1) = 0;
            int32_t x21_5;
            if ((g3::logLevel(&var_228) & 1) == 0)
            {
                x21_5 = 0;
                if ((s_17 & 1) != 0)
                {
                label_200dc:
                    operator delete(var_210_1);
                    if ((x21_5 & 1) == 0)
                    {
                        goto label_2028c;
                    }
                    goto label_20214;
                }
            }
            else
            {
                int64_t s_16;
                __builtin_memset(&s_16, 0, 0x18);
                uint64_t x21_4 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_10 = strlen(x21_4);
                if (x0_10 < -0x10)
                {
                    goto label_21278;
                }
                void* var_230_1;
                void* x23_2;
                if (x0_10 >= 0x17)
                {
                    uint64_t x19_5 = ((x0_10 + 0x10) & 0xfffffffffffffff0);
                    void* x0_21 = operator new(x19_5);
                    x23_2 = x0_21;
                    var_230_1 = x0_21;
                    s_16 = (x19_5 | 1);
                    size_t var_238_1 = x0_10;
                }
                else
                {
                    x23_2 = (&s_16 | 1);
                    s_16 = (x0_10 << 1);
                }
                if ((x0_10 >= 0x17 || (x0_10 < 0x17 && x0_10 != 0)))
                {
                    memcpy(x23_2, x21_4, x0_10);
                }
                *(x23_2 + x0_10) = 0;
                x21_5 = g3::logTag(&s_16);
                if ((s_16 & 1) != 0)
                {
                    operator delete(var_230_1);
                    if ((s_17 & 1) != 0)
                    {
                        goto label_200dc;
                    }
                }
                else if ((s_17 & 1) != 0)
                {
                    goto label_200dc;
                }
            }
            if ((x21_5 & 1) == 0)
            {
                goto label_2028c;
            }
        label_20214:
            LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
            *(arg1 + 0x20);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        label_2028c:
            x23 = nullptr;
            while (true)
            {
                int64_t var_208 = 0x9a0901;
                if ((ioctl(*(arg1 + 0x20), 0xc008561b, &var_208) & 0x80000000) != 0)
                {
                    uint32_t x9_4 = *data_57488;
                    int32_t var_260 = data_57480;
                    char* x28_1;
                    if ((x9_4 & 1) == 0)
                    {
                        x28_1 = &*(data_57488 + 1);
                    }
                    else
                    {
                        x28_1 = *(data_57492 + 6);
                    }
                    __builtin_memset(&s_15, 0, 0x18);
                    size_t x0_31 = strlen(x28_1);
                    if (x0_31 < -0x10)
                    {
                        goto label_2123c;
                    }
                    if (x0_31 >= 0x17)
                    {
                        uint64_t x25_2 = ((x0_31 + 0x10) & 0xfffffffffffffff0);
                        void* x0_41 = operator new(x25_2);
                        x19 = x0_41;
                        var_248 = x0_41;
                        s_15 = (x25_2 | 1);
                        size_t var_250_1 = x0_31;
                    }
                    else
                    {
                        void var_257;
                        x19 = &var_257;
                        s_15 = (x0_31 << 1);
                    }
                    if ((x0_31 >= 0x17 || (x0_31 < 0x17 && x0_31 != 0)))
                    {
                        memcpy(x19, x28_1, x0_31);
                    }
                    *(x19 + x0_31) = 0;
                    int32_t x24_4;
                    if ((g3::logLevel(&var_260) & 1) == 0)
                    {
                        x24_4 = 0;
                        if ((s_15 & 1) != 0)
                        {
                        label_204b4:
                            operator delete(var_248);
                            if ((x24_4 & 1) == 0)
                            {
                                goto label_20620;
                            }
                            goto label_205f8;
                        }
                    }
                    else
                    {
                        int64_t s_14;
                        __builtin_memset(&s_14, 0, 0x18);
                        uint64_t x28_3 = *PuduCamera::MarkerCamera::TAG;
                        size_t x0_46 = strlen(x28_3);
                        if (x0_46 < -0x10)
                        {
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                            goto label_21258;
                        }
                        void* var_268_1;
                        void* x19_8;
                        if (x0_46 >= 0x17)
                        {
                            uint64_t x25_3 = ((x0_46 + 0x10) & 0xfffffffffffffff0);
                            void* x0_56 = operator new(x25_3);
                            x19_8 = x0_56;
                            size_t var_270_1 = x0_46;
                            var_268_1 = x0_56;
                            s_14 = (x25_3 | 1);
                        }
                        else
                        {
                            x19_8 = (&s_14 | 1);
                            s_14 = (x0_46 << 1);
                        }
                        if ((x0_46 >= 0x17 || (x0_46 < 0x17 && x0_46 != 0)))
                        {
                            memcpy(x19_8, x28_3, x0_46);
                        }
                        *(x19_8 + x0_46) = 0;
                        x24_4 = g3::logTag(&s_14);
                        if ((s_14 & 1) != 0)
                        {
                            operator delete(var_268_1);
                            if ((s_15 & 1) != 0)
                            {
                                goto label_204b4;
                            }
                        }
                        else if ((s_15 & 1) != 0)
                        {
                            goto label_204b4;
                        }
                    }
                    if ((x24_4 & 1) == 0)
                    {
                        goto label_20620;
                    }
                label_205f8:
                    LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                    *__errno();
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                label_20620:
                    *var_208[4] = 0;
                    goto label_20624;
                }
                char* x24_1;
                if ((*data_57408 & 1) == 0)
                {
                    x24_1 = &*(data_57408 + 1);
                }
                else
                {
                    x24_1 = *(data_57412 + 6);
                }
                int32_t var_298 = data_57400;
                int64_t s_13;
                __builtin_memset(&s_13, 0, 0x18);
                size_t x0_29 = strlen(x24_1);
                if (x0_29 < -0x10)
                {
                    goto label_2122c;
                }
                void* var_280_1;
                void* x19_6;
                if (x0_29 >= 0x17)
                {
                    uint64_t x25_1 = ((x0_29 + 0x10) & 0xfffffffffffffff0);
                    void* x0_33 = operator new(x25_1);
                    x19_6 = x0_33;
                    size_t var_288_1 = x0_29;
                    var_280_1 = x0_33;
                    s_13 = (x25_1 | 1);
                }
                else
                {
                    x19_6 = &*s_13[1];
                    s_13 = (x0_29 << 1);
                }
                if ((x0_29 >= 0x17 || (x0_29 < 0x17 && x0_29 != 0)))
                {
                    memcpy(x19_6, x24_1, x0_29);
                }
                *(x19_6 + x0_29) = 0;
                int32_t x0_36 = g3::logLevel(&var_298);
                int32_t x21_9;
                if ((x0_36 & 1) == 0)
                {
                    x21_9 = 0;
                    if ((s_13 & 1) != 0)
                    {
                    label_20414:
                        operator delete(var_280_1);
                        if ((x21_9 & 1) != 0)
                        {
                            goto label_2053c;
                        }
                    }
                }
                else
                {
                    int64_t s_12;
                    __builtin_memset(&s_12, 0, 0x18);
                    uint64_t x21_8 = *PuduCamera::MarkerCamera::TAG;
                    size_t x0_38 = strlen(x21_8);
                    if (x0_38 < -0x10)
                    {
                        goto label_21244;
                    }
                    void* var_2a0_1;
                    void* x19_7;
                    if (x0_38 >= 0x17)
                    {
                        uint64_t x24_5 = ((x0_38 + 0x10) & 0xfffffffffffffff0);
                        void* x0_49 = operator new(x24_5);
                        x19_7 = x0_49;
                        size_t var_2a8_1 = x0_38;
                        var_2a0_1 = x0_49;
                        s_12 = (x24_5 | 1);
                    }
                    else
                    {
                        x19_7 = (&s_12 | 1);
                        s_12 = (x0_38 << 1);
                    }
                    if ((x0_38 >= 0x17 || (x0_38 < 0x17 && x0_38 != 0)))
                    {
                        memcpy(x19_7, x21_8, x0_38);
                    }
                    *(x19_7 + x0_38) = 0;
                    x21_9 = g3::logTag(&s_12);
                    if ((s_12 & 1) != 0)
                    {
                        operator delete(var_2a0_1);
                        if ((s_13 & 1) != 0)
                        {
                            goto label_20414;
                        }
                    }
                    else if ((s_13 & 1) != 0)
                    {
                        goto label_20414;
                    }
                }
                if (((((x0_36 & 1) == 0 && (s_13 & 1) == 0) || (x0_36 & 1) != 0) && (x21_9 & 1) != 0))
                {
                label_2053c:
                    LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                }
                if (*var_208[4] == 1)
                {
                    goto label_20aa4;
                }
            label_20624:
                var_208 = 0x1009a0901;
                if ((ioctl(*(arg1 + 0x20), 0xc008561c, &var_208) & 0x80000000) == 0)
                {
                    if ((*data_57408 & 1) == 0)
                    {
                        x23 = &*(data_57408 + 1);
                    }
                    else
                    {
                        x23 = *(data_57412 + 6);
                    }
                    int32_t var_308 = data_57400;
                    int64_t s_9;
                    __builtin_memset(&s_9, 0, 0x18);
                    size_t x0_83 = strlen(x23);
                    if (x0_83 < -0x10)
                    {
                        goto label_21260;
                    }
                    void* var_2f0_1;
                    void* x19_11;
                    if (x0_83 >= 0x17)
                    {
                        uint64_t x24_9 = ((x0_83 + 0x10) & 0xfffffffffffffff0);
                        void* x0_95 = operator new(x24_9);
                        x19_11 = x0_95;
                        size_t var_2f8_1 = x0_83;
                        var_2f0_1 = x0_95;
                        s_9 = (x24_9 | 1);
                    }
                    else
                    {
                        x19_11 = &*s_9[1];
                        s_9 = (x0_83 << 1);
                    }
                    if ((x0_83 >= 0x17 || (x0_83 < 0x17 && x0_83 != 0)))
                    {
                        memcpy(x19_11, x23, x0_83);
                    }
                    *(x19_11 + x0_83) = 0;
                    int32_t x21_13;
                    if ((g3::logLevel(&var_308) & 1) == 0)
                    {
                        x21_13 = 0;
                        if ((s_9 & 1) != 0)
                        {
                        label_209f8:
                            operator delete(var_2f0_1);
                            if ((x21_13 & 1) == 0)
                            {
                                goto label_20aa4;
                            }
                            goto label_20a80;
                        }
                    }
                    else
                    {
                        int64_t s_8;
                        __builtin_memset(&s_8, 0, 0x18);
                        uint64_t x21_12 = *PuduCamera::MarkerCamera::TAG;
                        size_t x0_100 = strlen(x21_12);
                        if (x0_100 < -0x10)
                        {
                            goto label_21298;
                        }
                        void* var_310_1;
                        void* x24_10;
                        if (x0_100 >= 0x17)
                        {
                            uint64_t x19_12 = ((x0_100 + 0x10) & 0xfffffffffffffff0);
                            void* x0_103 = operator new(x19_12);
                            x24_10 = x0_103;
                            size_t var_318_1 = x0_100;
                            var_310_1 = x0_103;
                            s_8 = (x19_12 | 1);
                        }
                        else
                        {
                            x24_10 = (&s_8 | 1);
                            s_8 = (x0_100 << 1);
                        }
                        if ((x0_100 >= 0x17 || (x0_100 < 0x17 && x0_100 != 0)))
                        {
                            memcpy(x24_10, x21_12, x0_100);
                        }
                        *(x24_10 + x0_100) = 0;
                        x21_13 = g3::logTag(&s_8);
                        if ((s_8 & 1) != 0)
                        {
                            operator delete(var_310_1);
                            if ((s_9 & 1) != 0)
                            {
                                goto label_209f8;
                            }
                        }
                        else if ((s_9 & 1) != 0)
                        {
                            goto label_209f8;
                        }
                    }
                    if ((x21_13 & 1) == 0)
                    {
                        goto label_20aa4;
                    }
                label_20a80:
                    LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                label_20aa4:
                    var_208 = 0x9a0902;
                    if ((ioctl(*(arg1 + 0x20), 0xc008561b, &var_208) & 0x80000000) != 0)
                    {
                        char* x20_4;
                        if ((*data_57488 & 1) == 0)
                        {
                            x20_4 = &*(data_57488 + 1);
                        }
                        else
                        {
                            x20_4 = *(data_57492 + 6);
                        }
                        int32_t var_340 = data_57480;
                        int64_t s_7;
                        __builtin_memset(&s_7, 0, 0x18);
                        size_t x0_113 = strlen(x20_4);
                        if (x0_113 < -0x10)
                        {
                            goto label_21270;
                        }
                        void* var_328_1;
                        void* x22_4;
                        if (x0_113 >= 0x17)
                        {
                            uint64_t x23_4 = ((x0_113 + 0x10) & 0xfffffffffffffff0);
                            void* x0_123 = operator new(x23_4);
                            x22_4 = x0_123;
                            size_t var_330_1 = x0_113;
                            var_328_1 = x0_123;
                            s_7 = (x23_4 | 1);
                        }
                        else
                        {
                            x22_4 = &*s_7[1];
                            s_7 = (x0_113 << 1);
                        }
                        if ((x0_113 >= 0x17 || (x0_113 < 0x17 && x0_113 != 0)))
                        {
                            memcpy(x22_4, x20_4, x0_113);
                        }
                        *(x22_4 + x0_113) = 0;
                        int32_t x19_15;
                        if ((g3::logLevel(&var_340) & 1) == 0)
                        {
                            x19_15 = 0;
                            if ((s_7 & 1) != 0)
                            {
                            label_20ccc:
                                operator delete(var_328_1);
                                if ((x19_15 & 1) == 0)
                                {
                                    goto label_211d4;
                                }
                                goto label_21108;
                            }
                        }
                        else
                        {
                            int64_t s_6;
                            __builtin_memset(&s_6, 0, 0x18);
                            uint64_t x19_14 = *PuduCamera::MarkerCamera::TAG;
                            size_t x0_128 = strlen(x19_14);
                            if (x0_128 < -0x10)
                            {
                                goto label_212a0;
                            }
                            void* var_348_1;
                            void* x22_5;
                            if (x0_128 >= 0x17)
                            {
                                uint64_t x23_6 = ((x0_128 + 0x10) & 0xfffffffffffffff0);
                                void* x0_168 = operator new(x23_6);
                                x22_5 = x0_168;
                                size_t var_350_1 = x0_128;
                                var_348_1 = x0_168;
                                s_6 = (x23_6 | 1);
                            }
                            else
                            {
                                x22_5 = (&s_6 | 1);
                                s_6 = (x0_128 << 1);
                            }
                            if ((x0_128 >= 0x17 || (x0_128 < 0x17 && x0_128 != 0)))
                            {
                                memcpy(x22_5, x19_14, x0_128);
                            }
                            *(x22_5 + x0_128) = 0;
                            x19_15 = g3::logTag(&s_6);
                            if ((s_6 & 1) != 0)
                            {
                                operator delete(var_348_1);
                                if ((s_7 & 1) != 0)
                                {
                                    goto label_20ccc;
                                }
                            }
                            else if ((s_7 & 1) != 0)
                            {
                                goto label_20ccc;
                            }
                        }
                        if ((x19_15 & 1) == 0)
                        {
                            goto label_211d4;
                        }
                    label_21108:
                        LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                        LogCapture::capturef();
                    label_211d0:
                        LogCapture::~LogCapture();
                    label_211d4:
                        x0_92 = 0;
                        goto label_211e0;
                    }
                    if ((*data_57408 & 1) == 0)
                    {
                        x23 = &*(data_57408 + 1);
                    }
                    else
                    {
                        x23 = *(data_57412 + 6);
                    }
                    int32_t var_378 = data_57400;
                    int64_t s_5;
                    __builtin_memset(&s_5, 0, 0x18);
                    size_t x0_111 = strlen(x23);
                    if (x0_111 < -0x10)
                    {
                        goto label_21260;
                    }
                    void* var_360_1;
                    if (x0_111 >= 0x17)
                    {
                        uint64_t x24_11 = ((x0_111 + 0x10) & 0xfffffffffffffff0);
                        void* x0_115 = operator new(x24_11);
                        x19 = x0_115;
                        size_t var_368_1 = x0_111;
                        var_360_1 = x0_115;
                        s_5 = (x24_11 | 1);
                    }
                    else
                    {
                        x19 = &*s_5[1];
                        s_5 = (x0_111 << 1);
                    }
                    if ((x0_111 >= 0x17 || (x0_111 < 0x17 && x0_111 != 0)))
                    {
                        memcpy(x19, x23, x0_111);
                    }
                    *(x19 + x0_111) = 0;
                    int32_t x21_17;
                    if ((g3::logLevel(&var_378) & 1) == 0)
                    {
                        x21_17 = 0;
                        if ((s_5 & 1) != 0)
                        {
                        label_20c28:
                            operator delete(var_360_1);
                            if ((x21_17 & 1) == 0)
                            {
                                goto label_20d78;
                            }
                            goto label_20d54;
                        }
                    }
                    else
                    {
                        int64_t s_4;
                        __builtin_memset(&s_4, 0, 0x18);
                        uint64_t x21_16 = *PuduCamera::MarkerCamera::TAG;
                        int64_t* x0_120 = strlen(x21_16);
                        if (x0_120 < -0x10)
                        {
                            goto label_21288;
                        }
                        char* var_380_1;
                        char* x24_12;
                        if (x0_120 >= 0x17)
                        {
                            x19 = (&x0_120[2] & 0xfffffffffffffff0);
                            char* x0_131 = operator new(x19);
                            x24_12 = x0_131;
                            int64_t* var_388_1 = x0_120;
                            var_380_1 = x0_131;
                            s_4 = (x19 | 1);
                        }
                        else
                        {
                            x24_12 = (&s_4 | 1);
                            s_4 = (x0_120 << 1);
                        }
                        if ((x0_120 >= 0x17 || (x0_120 < 0x17 && x0_120 != 0)))
                        {
                            memcpy(x24_12, x21_16, x0_120);
                        }
                        *(x24_12 + x0_120) = 0;
                        x21_17 = g3::logTag(&s_4);
                        if ((s_4 & 1) != 0)
                        {
                            operator delete(var_380_1);
                            if ((s_5 & 1) != 0)
                            {
                                goto label_20c28;
                            }
                        }
                        else if ((s_5 & 1) != 0)
                        {
                            goto label_20c28;
                        }
                    }
                    if ((x21_17 & 1) == 0)
                    {
                        goto label_20d78;
                    }
                label_20d54:
                    LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                label_20d78:
                    var_208 = 0x9a0902;
                    *var_208[4] = arg2;
                    if ((ioctl(*(arg1 + 0x20), 0xc008561c, &var_208) & 0x80000000) == 0)
                    {
                        char* x20_6;
                        if ((*data_57408 & 1) == 0)
                        {
                            x20_6 = &*(data_57408 + 1);
                        }
                        else
                        {
                            x20_6 = *(data_57412 + 6);
                        }
                        int32_t var_3e8 = data_57400;
                        int64_t s_1;
                        __builtin_memset(&s_1, 0, 0x18);
                        size_t x0_139 = strlen(x20_6);
                        if (x0_139 < -0x10)
                        {
                            goto label_21258;
                        }
                        void* var_3d0_1;
                        void* x21_18;
                        if (x0_139 >= 0x17)
                        {
                            uint64_t x22_7 = ((x0_139 + 0x10) & 0xfffffffffffffff0);
                            void* x0_143 = operator new(x22_7);
                            x21_18 = x0_143;
                            size_t var_3d8_1 = x0_139;
                            var_3d0_1 = x0_143;
                            s_1 = (x22_7 | 1);
                        }
                        else
                        {
                            x21_18 = &*s_1[1];
                            s_1 = (x0_139 << 1);
                        }
                        if ((x0_139 >= 0x17 || (x0_139 < 0x17 && x0_139 != 0)))
                        {
                            memcpy(x21_18, x20_6, x0_139);
                        }
                        *(x21_18 + x0_139) = 0;
                        int32_t x19_19;
                        if ((g3::logLevel(&var_3e8) & 1) == 0)
                        {
                            x19_19 = 0;
                            if ((s_1 & 1) != 0)
                            {
                            label_20efc:
                                operator delete(var_3d0_1);
                                if ((x19_19 & 1) == 0)
                                {
                                    goto label_2105c;
                                }
                                goto label_2103c;
                            }
                        }
                        else
                        {
                            int64_t s;
                            __builtin_memset(&s, 0, 0x18);
                            uint64_t x19_18 = *PuduCamera::MarkerCamera::TAG;
                            size_t x0_148 = strlen(x19_18);
                            if (x0_148 < -0x10)
                            {
                                goto label_21290;
                            }
                            void* var_3f0_1;
                            void* x21_20;
                            if (x0_148 >= 0x17)
                            {
                                uint64_t x22_9 = ((x0_148 + 0x10) & 0xfffffffffffffff0);
                                void* x0_160 = operator new(x22_9);
                                x21_20 = x0_160;
                                size_t var_3f8_1 = x0_148;
                                var_3f0_1 = x0_160;
                                s = (x22_9 | 1);
                            }
                            else
                            {
                                x21_20 = (&s | 1);
                                s = (x0_148 << 1);
                            }
                            if ((x0_148 >= 0x17 || (x0_148 < 0x17 && x0_148 != 0)))
                            {
                                memcpy(x21_20, x19_18, x0_148);
                            }
                            *(x21_20 + x0_148) = 0;
                            x19_19 = g3::logTag(&s);
                            if ((s & 1) != 0)
                            {
                                operator delete(var_3f0_1);
                                if ((s_1 & 1) != 0)
                                {
                                    goto label_20efc;
                                }
                            }
                            else if ((s_1 & 1) != 0)
                            {
                                goto label_20efc;
                            }
                        }
                        if ((x19_19 & 1) == 0)
                        {
                            goto label_2105c;
                        }
                    label_2103c:
                        LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                        LogCapture::capturef();
                        LogCapture::~LogCapture();
                        goto label_2105c;
                    }
                    char* x21_19;
                    if ((*data_57488 & 1) == 0)
                    {
                        x21_19 = &*(data_57488 + 1);
                    }
                    else
                    {
                        x21_19 = *(data_57492 + 6);
                    }
                    int32_t var_3b0 = data_57480;
                    int64_t s_3;
                    __builtin_memset(&s_3, 0, 0x18);
                    size_t x0_141 = strlen(x21_19);
                    if (x0_141 < -0x10)
                    {
                        goto label_21270;
                    }
                    void* var_398_1;
                    void* x22_6;
                    if (x0_141 >= 0x17)
                    {
                        uint64_t x23_5 = ((x0_141 + 0x10) & 0xfffffffffffffff0);
                        void* x0_152 = operator new(x23_5);
                        x22_6 = x0_152;
                        size_t var_3a0_1 = x0_141;
                        var_398_1 = x0_152;
                        s_3 = (x23_5 | 1);
                    }
                    else
                    {
                        x22_6 = &*s_3[1];
                        s_3 = (x0_141 << 1);
                    }
                    if ((x0_141 >= 0x17 || (x0_141 < 0x17 && x0_141 != 0)))
                    {
                        memcpy(x22_6, x21_19, x0_141);
                    }
                    *(x22_6 + x0_141) = 0;
                    int32_t x19_21;
                    if ((g3::logLevel(&var_3b0) & 1) == 0)
                    {
                        x19_21 = 0;
                        if ((s_3 & 1) != 0)
                        {
                        label_20fb4:
                            operator delete(var_398_1);
                            if ((x19_21 & 1) == 0)
                            {
                                goto label_211d4;
                            }
                            goto label_211b4;
                        }
                    }
                    else
                    {
                        int64_t s_2;
                        __builtin_memset(&s_2, 0, 0x18);
                        uint64_t x19_20 = *PuduCamera::MarkerCamera::TAG;
                        size_t x0_157 = strlen(x19_20);
                        if (x0_157 < -0x10)
                        {
                            goto label_212ac;
                        }
                        void* var_3b8_1;
                        void* x22_8;
                        if (x0_157 >= 0x17)
                        {
                            uint64_t x23_7 = ((x0_157 + 0x10) & 0xfffffffffffffff0);
                            void* x0_175 = operator new(x23_7);
                            x22_8 = x0_175;
                            size_t var_3c0_1 = x0_157;
                            var_3b8_1 = x0_175;
                            s_2 = (x23_7 | 1);
                        }
                        else
                        {
                            x22_8 = (&s_2 | 1);
                            s_2 = (x0_157 << 1);
                        }
                        if ((x0_157 >= 0x17 || (x0_157 < 0x17 && x0_157 != 0)))
                        {
                            memcpy(x22_8, x19_20, x0_157);
                        }
                        *(x22_8 + x0_157) = 0;
                        x19_21 = g3::logTag(&s_2);
                        if ((s_2 & 1) != 0)
                        {
                            operator delete(var_3b8_1);
                            if ((s_3 & 1) != 0)
                            {
                                goto label_20fb4;
                            }
                        }
                        else if ((s_3 & 1) != 0)
                        {
                            goto label_20fb4;
                        }
                    }
                    if ((x19_21 & 1) == 0)
                    {
                        goto label_211d4;
                    }
                label_211b4:
                    LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                    LogCapture::capturef();
                    goto label_211d0;
                }
                char* x28_4;
                if ((*data_57488 & 1) == 0)
                {
                    x28_4 = &*(data_57488 + 1);
                }
                else
                {
                    x28_4 = *(data_57492 + 6);
                }
                int32_t var_2d0 = data_57480;
                __builtin_memset(&s_11, 0, 0x18);
                size_t x0_65 = strlen(x28_4);
                if (x0_65 < -0x10)
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_2122c:
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_21234:
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_2123c:
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_21244:
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                    break;
                }
                void* x19_9;
                if (x0_65 >= 0x17)
                {
                    uint64_t x25_4 = ((x0_65 + 0x10) & 0xfffffffffffffff0);
                    void* x0_67 = operator new(x25_4);
                    x19_9 = x0_67;
                    size_t var_2c0_1 = x0_65;
                    var_2b8 = x0_67;
                    s_11 = (x25_4 | 1);
                }
                else
                {
                    void var_2c7;
                    x19_9 = &var_2c7;
                    s_11 = (x0_65 << 1);
                }
                if ((x0_65 >= 0x17 || (x0_65 < 0x17 && x0_65 != 0)))
                {
                    memcpy(x19_9, x28_4, x0_65);
                }
                *(x19_9 + x0_65) = 0;
                int32_t x0_70 = g3::logLevel(&var_2d0);
                size_t x0_72;
                int32_t x24_8;
                if ((x0_70 & 1) != 0)
                {
                    __builtin_memset(&s_10, 0, 0x18);
                    char* x28_5 = *PuduCamera::MarkerCamera::TAG;
                    x0_72 = strlen(x28_5);
                    if (x0_72 >= -0x10)
                    {
                        void* x19_10;
                        if (x0_72 >= 0x17)
                        {
                            uint64_t x25_5 = ((x0_72 + 0x10) & 0xfffffffffffffff0);
                            void* x0_75 = operator new(x25_5);
                            x19_10 = x0_75;
                            size_t var_2e0_1 = x0_72;
                            var_2d8 = x0_75;
                            s_10 = (x25_5 | 1);
                        }
                        else
                        {
                            x19_10 = (&s_10 | 1);
                            s_10 = (x0_72 << 1);
                        }
                        if ((x0_72 >= 0x17 || (x0_72 < 0x17 && x0_72 != 0)))
                        {
                            memcpy(x19_10, x28_5, x0_72);
                        }
                        *(x19_10 + x0_72) = 0;
                        x24_8 = g3::logTag(&s_10);
                        if ((s_10 & 1) != 0)
                        {
                            operator delete(var_2d8);
                            if ((s_11 & 1) != 0)
                            {
                                goto label_20730;
                            }
                        }
                        else if ((s_11 & 1) != 0)
                        {
                            goto label_20730;
                        }
                    }
                }
                else
                {
                    x24_8 = 0;
                    if ((s_11 & 1) != 0)
                    {
                    label_20730:
                        operator delete(var_2b8);
                        if ((x24_8 & 1) == 0)
                        {
                            goto label_207e0;
                        }
                        goto label_207b4;
                    }
                }
                if (((x0_70 & 1) == 0 || ((x0_70 & 1) != 0 && x0_72 >= -0x10)))
                {
                    if ((x24_8 & 1) == 0)
                    {
                        goto label_207e0;
                    }
                label_207b4:
                    LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                label_207e0:
                    x23 = (x23 + 1);
                    usleep(0x30d40);
                    if (x23 >= 5)
                    {
                        goto label_20aa4;
                    }
                    continue;
                }
                goto label_21234;
            }
            goto label_21248;
        }
    }
    else
    {
        char* x20_2;
        if ((*data_57408 & 1) == 0)
        {
            x20_2 = &*(data_57408 + 1);
        }
        else
        {
            x20_2 = *(data_57412 + 6);
        }
        int32_t var_1e8 = data_57400;
        int64_t s_19;
        __builtin_memset(&s_19, 0, 0x18);
        size_t x0_3 = strlen(x20_2);
        if (x0_3 >= -0x10)
        {
            void* var_1d0_1;
            void* x21_3;
            if (x0_3 >= 0x17)
            {
                uint64_t x22_2 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
                void* x0_13 = operator new(x22_2);
                x21_3 = x0_13;
                var_1d0_1 = x0_13;
                s_19 = (x22_2 | 1);
                size_t var_1d8_1 = x0_3;
            }
            else
            {
                x21_3 = &*s_19[1];
                s_19 = (x0_3 << 1);
            }
            if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
            {
                memcpy(x21_3, x20_2, x0_3);
            }
            *(x21_3 + x0_3) = 0;
            int32_t x19_4;
            if ((g3::logLevel(&var_1e8) & 1) == 0)
            {
                x19_4 = 0;
                if ((s_19 & 1) != 0)
                {
                label_20188:
                    operator delete(var_1d0_1);
                    if ((x19_4 & 1) == 0)
                    {
                        goto label_2093c;
                    }
                    goto label_20918;
                }
            }
            else
            {
                int64_t s_18;
                __builtin_memset(&s_18, 0, 0x18);
                uint64_t x19_3 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_18 = strlen(x19_3);
                if (x0_18 < -0x10)
                {
                    goto label_21280;
                }
                void* var_1f0_1;
                void* x21_6;
                if (x0_18 >= 0x17)
                {
                    uint64_t x22_3 = ((x0_18 + 0x10) & 0xfffffffffffffff0);
                    void* x0_86 = operator new(x22_3);
                    x21_6 = x0_86;
                    var_1f0_1 = x0_86;
                    s_18 = (x22_3 | 1);
                    size_t var_1f8_1 = x0_18;
                }
                else
                {
                    x21_6 = (&s_18 | 1);
                    s_18 = (x0_18 << 1);
                }
                if ((x0_18 >= 0x17 || (x0_18 < 0x17 && x0_18 != 0)))
                {
                    memcpy(x21_6, x19_3, x0_18);
                }
                *(x21_6 + x0_18) = 0;
                x19_4 = g3::logTag(&s_18);
                if ((s_18 & 1) != 0)
                {
                    operator delete(var_1f0_1);
                    if ((s_19 & 1) != 0)
                    {
                        goto label_20188;
                    }
                }
                else if ((s_19 & 1) != 0)
                {
                    goto label_20188;
                }
            }
            if ((x19_4 & 1) == 0)
            {
                goto label_2093c;
            }
        label_20918:
            LogCapture::LogCapture(&var_1c8, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        label_2093c:
            x0_92 = 0;
            *__errno() = 2;
            goto label_211e0;
        }
    label_21258:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_21260:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    std::__ndk1::__basic_string_common<true>::__throw_length_error();
label_21270:
    std::__ndk1::__basic_string_common<true>::__throw_length_error();
label_21278:
    std::__ndk1::__basic_string_common<true>::__throw_length_error();
label_21280:
    std::__ndk1::__basic_string_common<true>::__throw_length_error();
label_21288:
    std::__ndk1::__basic_string_common<true>::__throw_length_error();
label_21290:
    std::__ndk1::__basic_string_common<true>::__throw_length_error();
label_21298:
    std::__ndk1::__basic_string_common<true>::__throw_length_error();
label_212a0:
    std::__ndk1::__basic_string_common<true>::__throw_length_error();
label_212ac:
    int64_t x19_23 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
    if ((s_15 & 1) != 0)
    {
        operator delete(var_248);
        int64_t x0_189 = _Unwind_Resume(x19_23);
        LogCapture::~LogCapture();
        x19_23 = _Unwind_Resume(x0_189);
        if ((s_10 & 1) != 0)
        {
            operator delete(var_2d8);
        }
    }
    if ((((s_15 & 1) == 0 || (((s_15 & 1) != 0 && (s_10 & 1) == 0) && (s_11 & 1) == 0)) || (((s_15 & 1) != 0 && (s_10 & 1) != 0) && (s_11 & 1) == 0)))
    {
        _Unwind_Resume(x19_23);
    }
    operator delete(var_2b8);
    uint64_t x0_196;
    int64_t* x1_40;
    x0_196 = _Unwind_Resume(x19_23);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_196, x1_40);
}

int64_t sub_212bc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
    }
    if (((arg4 & 1) == 0 || ((arg4 & 1) != 0 && (arg2 & 1) == 0)))
    {
        _Unwind_Resume(x19);
    }
    operator delete(arg3);
    uint64_t x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_6, x1);
}

int64_t sub_212e0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_21560:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_21560;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        int64_t x0_3 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_3);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
            if ((arg8 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg8 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg9);
    uint64_t x0_10;
    int64_t* x1;
    x0_10 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_10, x1);
}

int64_t sub_21304(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_21560:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_21560;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg6 & 1) == 0)
        {
            goto label_21560;
        }
        operator delete(arg7);
        int64_t x0_6 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_6);
        if ((arg8 & 1) != 0)
        {
            operator delete(arg9);
            if ((arg10 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg10 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg11);
    uint64_t x0_13;
    int64_t* x1;
    x0_13 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_13, x1);
}

int64_t sub_2134c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_21560:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_21560;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        int64_t x0_3 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_3);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
            if ((arg8 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg8 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg9);
    uint64_t x0_10;
    int64_t* x1;
    x0_10 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_10, x1);
}

int64_t sub_2136c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19_1 = arg1;
    if ((arg2 & 1) == 0)
    {
    label_21560:
        _Unwind_Resume(x19_1);
    }
    else
    {
        operator delete(arg3);
        int64_t x0_2 = _Unwind_Resume(x19_1);
        LogCapture::~LogCapture();
        x19_1 = _Unwind_Resume(x0_2);
        if ((arg4 & 1) != 0)
        {
            operator delete(arg5);
            if ((arg6 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg6 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg7);
    uint64_t x0_9;
    int64_t* x1;
    x0_9 = _Unwind_Resume(x19_1);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_9, x1);
}

int64_t sub_2138c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11, char arg12, void* arg13)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_21560:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_21560;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg12 & 1) == 0)
        {
            goto label_21560;
        }
        operator delete(arg13);
        x19 = _Unwind_Resume(x19);
        if ((arg10 & 1) == 0)
        {
            goto label_21560;
        }
        operator delete(arg11);
        int64_t x0_9 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_9);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
            if ((arg8 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg8 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg9);
    uint64_t x0_16;
    int64_t* x1;
    x0_16 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_16, x1);
}

int64_t sub_213ac(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) == 0)
    {
    label_21560:
        _Unwind_Resume(x19);
    }
    else
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        if ((arg4 & 1) == 0)
        {
            goto label_21560;
        }
        operator delete(arg5);
        int64_t x0_5 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_5);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
            if ((arg8 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg8 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg9);
    uint64_t x0_12;
    int64_t* x1;
    x0_12 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_12, x1);
}

int64_t sub_21408(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19_1 = arg1;
    if ((arg2 & 1) == 0)
    {
    label_21560:
        _Unwind_Resume(x19_1);
    }
    else
    {
        operator delete(arg3);
        int64_t x0_2 = _Unwind_Resume(x19_1);
        LogCapture::~LogCapture();
        x19_1 = _Unwind_Resume(x0_2);
        if ((arg4 & 1) != 0)
        {
            operator delete(arg5);
            if ((arg6 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg6 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg7);
    uint64_t x0_9;
    int64_t* x1;
    x0_9 = _Unwind_Resume(x19_1);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_9, x1);
}

int64_t sub_21448(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) == 0)
    {
    label_21560:
        _Unwind_Resume(x19);
    }
    else
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        if ((arg10 & 1) == 0)
        {
            goto label_21560;
        }
        operator delete(arg11);
        x19 = _Unwind_Resume(x19);
        if ((arg8 & 1) == 0)
        {
            goto label_21560;
        }
        operator delete(arg9);
        int64_t x0_8 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_8);
        if ((arg4 & 1) != 0)
        {
            operator delete(arg5);
            if ((arg6 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg6 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg7);
    uint64_t x0_15;
    int64_t* x1;
    x0_15 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_15, x1);
}

int64_t sub_214a0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    int64_t x19 = arg1;
    if (((arg6 & 1) == 0 && (arg8 & 1) == 0))
    {
    label_21560:
        _Unwind_Resume(x19);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
        if ((arg8 & 1) == 0)
        {
            goto label_21560;
        }
    }
    if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || (arg6 & 1) != 0))
    {
        operator delete(arg9);
        int64_t x0_3 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_3);
        if ((arg2 & 1) != 0)
        {
            operator delete(arg3);
            if ((arg4 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg4 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg5);
    uint64_t x0_10;
    int64_t* x1;
    x0_10 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_10, x1);
}

int64_t sub_214c4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19 = arg1;
    if (((arg4 & 1) == 0 && (arg6 & 1) == 0))
    {
    label_21560:
        _Unwind_Resume(x19);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
        if ((arg6 & 1) == 0)
        {
            goto label_21560;
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || (arg4 & 1) != 0))
    {
        operator delete(arg7);
        x19 = _Unwind_Resume(x19);
        if ((arg2 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg3);
    uint64_t x0_7;
    int64_t* x1;
    x0_7 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_7, x1);
}

int64_t sub_214e4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19_1 = arg1;
    if ((arg6 & 1) == 0)
    {
    label_21560:
        _Unwind_Resume(x19_1);
    }
    else
    {
        operator delete(arg7);
        int64_t x0_2 = _Unwind_Resume(x19_1);
        LogCapture::~LogCapture();
        x19_1 = _Unwind_Resume(x0_2);
        if ((arg2 & 1) != 0)
        {
            operator delete(arg3);
            if ((arg4 & 1) == 0)
            {
                goto label_21560;
            }
        }
        else if ((arg4 & 1) == 0)
        {
            goto label_21560;
        }
    }
    operator delete(arg5);
    uint64_t x0_9;
    int64_t* x1;
    x0_9 = _Unwind_Resume(x19_1);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_9, x1);
}

int64_t sub_21534(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
    }
    if (((arg4 & 1) == 0 || ((arg4 & 1) != 0 && (arg2 & 1) == 0)))
    {
        _Unwind_Resume(x19);
    }
    operator delete(arg3);
    uint64_t x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(x19);
    /* tailcall */
    return PuduCamera::MarkerCamera::getValidId(x0_6, x1);
}

uint64_t PuduCamera::MarkerCamera::getValidId(int64_t arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int128_t* x0;
    if ((*data_57550 & 1) != 0)
    {
        x0 = data_57560;
    }
    else
    {
        x0 = &*(data_57550 + 1);
    }
    DIR* i_1 = opendir(x0);
    DIR* i = i_1;
    int32_t var_7e0;
    int64_t s_14;
    char var_1c0;
    size_t x0_2;
    size_t x0_4;
    int32_t x20_19;
    char* x21;
    if (i_1 == 0)
    {
        char* x21_1;
        if ((*data_57488 & 1) == 0)
        {
            x21_1 = &*(data_57488 + 1);
        }
        else
        {
            x21_1 = *(data_57492 + 6);
        }
        int32_t var_7a8 = data_57480;
        int64_t s_16;
        __builtin_memset(&s_16, 0, 0x18);
        x0_4 = strlen(x21_1);
        if (x0_4 >= -0x10)
        {
            void* var_790_1;
            void* x22_2;
            if (x0_4 >= 0x17)
            {
                uint64_t x23_2 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
                void* x0_14 = operator new(x23_2);
                x22_2 = x0_14;
                var_790_1 = x0_14;
                s_16 = (x23_2 | 1);
                size_t var_798_1 = x0_4;
            }
            else
            {
                x22_2 = &*s_16[1];
                s_16 = (x0_4 << 1);
            }
            if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
            {
                memcpy(x22_2, x21_1, x0_4);
            }
            *(x22_2 + x0_4) = 0;
            int32_t x19;
            if ((g3::logLevel(&var_7a8) & 1) == 0)
            {
                x19 = 0;
                if ((s_16 & 1) != 0)
                {
                label_217e4:
                    operator delete(var_790_1);
                    if ((x19 & 1) == 0)
                    {
                        goto label_22d94;
                    }
                    goto label_22d78;
                }
            }
            else
            {
                int64_t s_15;
                __builtin_memset(&s_15, 0, 0x18);
                i = *PuduCamera::MarkerCamera::TAG;
                size_t x0_19 = strlen(i);
                if (x0_19 < -0x10)
                {
                    goto label_22e74;
                }
                void* var_7b0_1;
                void* x21_3;
                if (x0_19 >= 0x17)
                {
                    uint64_t x22_7 = ((x0_19 + 0x10) & 0xfffffffffffffff0);
                    void* x0_202 = operator new(x22_7);
                    x21_3 = x0_202;
                    var_7b0_1 = x0_202;
                    s_15 = (x22_7 | 1);
                    size_t var_7b8_1 = x0_19;
                }
                else
                {
                    x21_3 = (&s_15 | 1);
                    s_15 = (x0_19 << 1);
                }
                if ((x0_19 >= 0x17 || (x0_19 < 0x17 && x0_19 != 0)))
                {
                    memcpy(x21_3, i, x0_19);
                }
                *(x21_3 + x0_19) = 0;
                x19 = g3::logTag(&s_15);
                if ((s_15 & 1) != 0)
                {
                    operator delete(var_7b0_1);
                    if ((s_16 & 1) != 0)
                    {
                        goto label_217e4;
                    }
                }
                else if ((s_16 & 1) != 0)
                {
                    goto label_217e4;
                }
            }
            if ((x19 & 1) == 0)
            {
                goto label_22d94;
            }
        label_22d78:
            LogCapture::LogCapture(&var_1c0, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        label_22d94:
            x20_19 = -1;
        }
    }
    else
    {
        if ((*data_57408 & 1) == 0)
        {
            x21 = &*(data_57408 + 1);
        }
        else
        {
            x21 = *(data_57412 + 6);
        }
        var_7e0 = data_57400;
        __builtin_memset(&s_14, 0, 0x18);
        x0_2 = strlen(x21);
        if (x0_2 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
    }
    char s_12;
    void* var_800;
    int64_t (* var_420)();
    char s_22;
    void* var_3c8;
    int64_t (* var_3b0)();
    if (((i_1 != 0 && x0_2 < -0x10) || (i_1 == 0 && x0_4 < -0x10)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_22e68:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_22e74:
        int64_t x20_20 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        if ((s_12 & 1) != 0)
        {
            operator delete(var_800);
        }
        var_420 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        uint32_t s_25 = s_22;
        var_3b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        void* var_418_4 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((s_25 & 1) != 0)
        {
            operator delete(var_3c8);
        }
        void* var_418_5 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        if (i == 0)
        {
            goto label_233f8;
        }
        do
        {
            closedir(i);
        label_233f8:
            x20_20 = _Unwind_Resume(x20_20);
        } while (i != 0);
    }
    if ((i_1 != 0 && x0_2 >= -0x10))
    {
        void* var_7c8_1;
        void* x22_1;
        if (x0_2 >= 0x17)
        {
            uint64_t x23_1 = ((x0_2 + 0x10) & 0xfffffffffffffff0);
            void* x0_6 = operator new(x23_1);
            x22_1 = x0_6;
            var_7c8_1 = x0_6;
            s_14 = (x23_1 | 1);
            size_t var_7d0_1 = x0_2;
        }
        else
        {
            x22_1 = &*s_14[1];
            s_14 = (x0_2 << 1);
        }
        if ((x0_2 >= 0x17 || (x0_2 < 0x17 && x0_2 != 0)))
        {
            memcpy(x22_1, x21, x0_2);
        }
        *(x22_1 + x0_2) = 0;
        int32_t x20_4;
        if ((g3::logLevel(&var_7e0) & 1) == 0)
        {
            x20_4 = 0;
            if ((s_14 & 1) != 0)
            {
            label_21738:
                operator delete(var_7c8_1);
                if ((x20_4 & 1) == 0)
                {
                    goto label_218a4;
                }
                goto label_21870;
            }
        }
        else
        {
            int64_t s_13;
            __builtin_memset(&s_13, 0, 0x18);
            uint64_t x20_3 = *PuduCamera::MarkerCamera::TAG;
            size_t x0_11 = strlen(x20_3);
            if (x0_11 < -0x10)
            {
                goto label_22e68;
            }
            void* var_7e8_1;
            void* x22_3;
            if (x0_11 >= 0x17)
            {
                uint64_t x23_3 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
                void* x0_22 = operator new(x23_3);
                x22_3 = x0_22;
                var_7e8_1 = x0_22;
                s_13 = (x23_3 | 1);
                size_t var_7f0_1 = x0_11;
            }
            else
            {
                x22_3 = (&s_13 | 1);
                s_13 = (x0_11 << 1);
            }
            if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
            {
                memcpy(x22_3, x20_3, x0_11);
            }
            *(x22_3 + x0_11) = 0;
            x20_4 = g3::logTag(&s_13);
            if ((s_13 & 1) != 0)
            {
                operator delete(var_7e8_1);
                if ((s_14 & 1) != 0)
                {
                    goto label_21738;
                }
            }
            else if ((s_14 & 1) != 0)
            {
                goto label_21738;
            }
        }
        if ((x20_4 & 1) != 0)
        {
        label_21870:
            LogCapture::LogCapture(&var_1c0, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
            data_57560;
            if ((*data_57550 & 1) == 0)
            {
                &*(data_57550 + 1);
            }
            LogCapture::capturef();
            LogCapture::~LogCapture();
            goto label_218a4;
        }
    label_218a4:
        int64_t* x22_4 = &var_3b0;
        void var_410;
        void* x26_1 = &var_410;
        int64_t (* var_530)();
        int64_t var_980_1 = (&var_530 | 8);
        int64_t var_978_1 = (&var_420 | 8);
        void var_520;
        void* var_990_1 = &var_520;
        int64_t (* var_640)();
        int64_t var_988_1 = (&var_640 | 8);
        void var_630;
        void* var_9a0_1 = &var_630;
        int64_t s_8;
        void* x8_23 = (&s_8 | 1);
        void* var_300;
        int64_t* var_a38_1 = &var_300;
        void* var_258;
        int64_t* var_a30_1 = &var_258;
        void* var_1b0;
        int64_t* var_a28_1 = &var_1b0;
        void* var_108;
        int64_t* var_a20_1 = &var_108;
        while (true)
        {
            void* x0_28 = readdir(i);
            if (x0_28 == 0)
            {
                x20_19 = -1;
            }
            else if (*(x0_28 + 0x10) < 0x1a)
            {
                continue;
            }
            else
            {
                var_420 = (construction_vtable_for_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                var_3b0 = (construction_vtable_for_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
                std::__ndk1::ios_base::init(x22_4);
                int64_t var_328_1 = 0;
                int32_t var_320_1 = 0xffffffff;
                var_3b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
                int128_t v0_1;
                v0_1 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                *v0_1[8] = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
                var_420 = v0_1;
                std::__ndk1::locale::locale();
                void s_21;
                __builtin_memset(&s_21, 0, 0x30);
                void* var_418_1 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
                uint64_t x9_8 = *(data_57550 + 8);
                char* x10_2 = data_57560;
                __builtin_memset(&s_22, 0, 0x20);
                uint64_t x8_37 = *data_57550;
                int32_t var_3b8_1 = 0x10;
                int32_t temp0_1 = (x8_37 & 1);
                char* x1_6;
                if (temp0_1 != 0)
                {
                    x1_6 = x10_2;
                }
                else
                {
                    x1_6 = &*(data_57550 + 1);
                }
                uint64_t x2_5;
                if (temp0_1 == 0)
                {
                    x2_5 = (x8_37 >> 1);
                }
                else
                {
                    x2_5 = x9_8;
                }
                std::__ndk1::fpos<mbstate_t>* x0_36 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_420, x1_6, x2_5), (x0_28 + 0x13), strlen((x0_28 + 0x13)));
                uint64_t x8_38 = data_57568;
                int32_t temp1_1 = (x8_38 & 1);
                char* x1_8;
                if (temp1_1 != 0)
                {
                    x1_8 = data_57578;
                }
                else
                {
                    x1_8 = &data_57569;
                }
                uint64_t x2_7;
                if (temp1_1 == 0)
                {
                    x2_7 = (x8_38 >> 1);
                }
                else
                {
                    x2_7 = *(data_57569 + 7);
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_36, x1_8, x2_7);
                uint32_t x9_10 = *data_57408;
                char* x10_4 = *(data_57412 + 6);
                int32_t var_818 = data_57400;
                char* x21_6;
                if ((x9_10 & 1) == 0)
                {
                    x21_6 = &*(data_57408 + 1);
                }
                else
                {
                    x21_6 = x10_4;
                }
                __builtin_memset(&s_12, 0, 0x18);
                size_t x0_38 = strlen(x21_6);
                if (x0_38 < -0x10)
                {
                    goto label_22e3c;
                }
                void* x27_1;
                if (x0_38 >= 0x17)
                {
                    uint64_t x23_4 = ((x0_38 + 0x10) & 0xfffffffffffffff0);
                    void* x0_40 = operator new(x23_4);
                    x27_1 = x0_40;
                    var_800 = x0_40;
                    s_12 = (x23_4 | 1);
                    size_t var_808_1 = x0_38;
                }
                else
                {
                    void var_80f;
                    x27_1 = &var_80f;
                    s_12 = (x0_38 << 1);
                }
                if ((x0_38 >= 0x17 || (x0_38 < 0x17 && x0_38 != 0)))
                {
                    memcpy(x27_1, x21_6, x0_38);
                }
                *(x27_1 + x0_38) = 0;
                int32_t x21_8;
                if ((g3::logLevel(&var_818) & 1) == 0)
                {
                    x21_8 = 0;
                    if ((s_12 & 1) != 0)
                    {
                    label_21c54:
                        operator delete(var_800);
                        if ((x21_8 & 1) == 0)
                        {
                            goto label_21d38;
                        }
                        goto label_21ce4;
                    }
                }
                else
                {
                    int64_t s_11;
                    __builtin_memset(&s_11, 0, 0x18);
                    uint64_t x25_2 = *PuduCamera::MarkerCamera::TAG;
                    size_t x0_45 = strlen(x25_2);
                    if (x0_45 < -0x10)
                    {
                        goto label_22e48;
                    }
                    void* var_820_1;
                    void* x21_7;
                    if (x0_45 >= 0x17)
                    {
                        uint64_t x23_5 = ((x0_45 + 0x10) & 0xfffffffffffffff0);
                        void* x0_48 = operator new(x23_5);
                        x21_7 = x0_48;
                        var_820_1 = x0_48;
                        s_11 = (x23_5 | 1);
                        size_t var_828_1 = x0_45;
                    }
                    else
                    {
                        x21_7 = (&s_11 | 1);
                        s_11 = (x0_45 << 1);
                    }
                    if ((x0_45 >= 0x17 || (x0_45 < 0x17 && x0_45 != 0)))
                    {
                        memcpy(x21_7, x25_2, x0_45);
                    }
                    *(x21_7 + x0_45) = 0;
                    x21_8 = g3::logTag(&s_11);
                    if ((s_11 & 1) != 0)
                    {
                        operator delete(var_820_1);
                        if ((s_12 & 1) != 0)
                        {
                            goto label_21c54;
                        }
                    }
                    else if ((s_12 & 1) != 0)
                    {
                        goto label_21c54;
                    }
                }
                char var_310;
                if ((x21_8 & 1) != 0)
                {
                label_21ce4:
                    LogCapture::LogCapture(&var_1c0, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                    std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str();
                    LogCapture::capturef();
                    if ((var_310 & 1) != 0)
                    {
                        operator delete(var_300);
                    }
                    LogCapture::~LogCapture();
                    goto label_21d38;
                }
            label_21d38:
                std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str();
                char* x0_56;
                if ((var_1c0 & 1) == 0)
                {
                    x0_56 = (&var_1c0 | 1);
                }
                else
                {
                    x0_56 = var_1b0;
                }
                DIR* x27_3 = opendir(x0_56);
                if ((var_1c0 & 1) != 0)
                {
                    operator delete(var_1b0);
                }
                int32_t var_aec;
                int32_t x21_9;
                if (x27_3 != 0)
                {
                    int64_t* var_a98_1 = x22_4;
                    void* var_a90_1 = x26_1;
                    DIR* var_aa0_1 = x27_3;
                    while (true)
                    {
                        void* x0_99 = readdir(x27_3);
                        if (x0_99 == 0)
                        {
                            x21_9 = 0;
                        }
                        else if (*(x0_99 + 0x10) < 0x1a)
                        {
                            continue;
                        }
                        else
                        {
                            x22_4 = (construction_vtable_for_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
                            var_530 = (construction_vtable_for_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                            int64_t* var_4c0 = x22_4;
                            std::__ndk1::ios_base::init(&var_4c0);
                            int64_t var_438_1 = 0;
                            int32_t var_430_1 = 0xffffffff;
                            var_4c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
                            int128_t v0_3;
                            v0_3 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                            *v0_3[8] = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
                            var_530 = v0_3;
                            std::__ndk1::locale::locale();
                            void s_19;
                            __builtin_memset(&s_19, 0, 0x30);
                            var_640 = (construction_vtable_for_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                            int64_t* var_5d0 = x22_4;
                            void* var_528_1 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
                            char s_20;
                            __builtin_memset(&s_20, 0, 0x20);
                            int32_t var_4c8_1 = 0x10;
                            std::__ndk1::ios_base::init(&var_5d0);
                            int128_t v0_4;
                            v0_4 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                            *v0_4[8] = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
                            int64_t var_548_1 = 0;
                            int32_t var_540_1 = 0xffffffff;
                            var_5d0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
                            var_640 = v0_4;
                            std::__ndk1::locale::locale();
                            void s_17;
                            __builtin_memset(&s_17, 0, 0x30);
                            void* var_638_1 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
                            char s_18;
                            __builtin_memset(&s_18, 0, 0x20);
                            uint64_t x8_95 = *data_57550;
                            int32_t var_5d8_1 = 0x10;
                            int32_t temp2_1 = (x8_95 & 1);
                            char* x1_24;
                            if (temp2_1 != 0)
                            {
                                x1_24 = data_57560;
                            }
                            else
                            {
                                x1_24 = &*(data_57550 + 1);
                            }
                            uint64_t x2_18;
                            if (temp2_1 == 0)
                            {
                                x2_18 = (x8_95 >> 1);
                            }
                            else
                            {
                                x2_18 = *(data_57550 + 8);
                            }
                            x26_1 = var_a90_1;
                            x27_3 = var_aa0_1;
                            std::__ndk1::fpos<mbstate_t>* x0_109 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_530, x1_24, x2_18), (x0_28 + 0x13), strlen((x0_28 + 0x13)));
                            uint64_t x8_96 = data_57568;
                            int32_t temp3_1 = (x8_96 & 1);
                            char* x1_26;
                            if (temp3_1 != 0)
                            {
                                x1_26 = data_57578;
                            }
                            else
                            {
                                x1_26 = &data_57569;
                            }
                            uint64_t x2_20;
                            if (temp3_1 == 0)
                            {
                                x2_20 = (x8_96 >> 1);
                            }
                            else
                            {
                                x2_20 = *(data_57569 + 7);
                            }
                            std::__ndk1::fpos<mbstate_t>* x0_114 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_109, x1_26, x2_20), (x0_99 + 0x13), strlen((x0_99 + 0x13)));
                            uint64_t x8_97 = data_57580;
                            int32_t temp4_1 = (x8_97 & 1);
                            char* x1_28;
                            if (temp4_1 != 0)
                            {
                                x1_28 = data_57590;
                            }
                            else
                            {
                                x1_28 = &data_57581;
                            }
                            uint64_t x2_22;
                            if (temp4_1 == 0)
                            {
                                x2_22 = (x8_97 >> 1);
                            }
                            else
                            {
                                x2_22 = *(data_57581 + 7);
                            }
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_114, x1_28, x2_22);
                            uint64_t x8_98 = *data_57550;
                            int32_t temp5_1 = (x8_98 & 1);
                            char* x1_29;
                            if (temp5_1 != 0)
                            {
                                x1_29 = data_57560;
                            }
                            else
                            {
                                x1_29 = &*(data_57550 + 1);
                            }
                            uint64_t x2_23;
                            if (temp5_1 == 0)
                            {
                                x2_23 = (x8_98 >> 1);
                            }
                            else
                            {
                                x2_23 = *(data_57550 + 8);
                            }
                            std::__ndk1::fpos<mbstate_t>* x0_120 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_640, x1_29, x2_23), (x0_28 + 0x13), strlen((x0_28 + 0x13)));
                            uint64_t x8_99 = data_57568;
                            int32_t temp6_1 = (x8_99 & 1);
                            char* x1_31;
                            if (temp6_1 != 0)
                            {
                                x1_31 = data_57578;
                            }
                            else
                            {
                                x1_31 = &data_57569;
                            }
                            uint64_t x2_25;
                            if (temp6_1 == 0)
                            {
                                x2_25 = (x8_99 >> 1);
                            }
                            else
                            {
                                x2_25 = *(data_57569 + 7);
                            }
                            std::__ndk1::fpos<mbstate_t>* x0_125 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_120, x1_31, x2_25), (x0_99 + 0x13), strlen((x0_99 + 0x13)));
                            uint64_t x8_100 = data_57598;
                            int32_t temp7_1 = (x8_100 & 1);
                            char* x1_33;
                            if (temp7_1 != 0)
                            {
                                x1_33 = data_575a8;
                            }
                            else
                            {
                                x1_33 = &data_57599;
                            }
                            uint64_t x2_27;
                            if (temp7_1 == 0)
                            {
                                x2_27 = (x8_100 >> 1);
                            }
                            else
                            {
                                x2_27 = *(data_57599 + 7);
                            }
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_125, x1_33, x2_27);
                            uint32_t x9_26 = *data_57408;
                            char* x10_12 = *(data_57412 + 6);
                            int32_t var_850 = data_57400;
                            char* x21_20;
                            if ((x9_26 & 1) == 0)
                            {
                                x21_20 = &*(data_57408 + 1);
                            }
                            else
                            {
                                x21_20 = x10_12;
                            }
                            int64_t s_10;
                            __builtin_memset(&s_10, 0, 0x18);
                            size_t x0_127 = strlen(x21_20);
                            if (x0_127 < -0x10)
                            {
                                goto label_22e0c;
                            }
                            void* var_838;
                            void* x23_13;
                            if (x0_127 >= 0x17)
                            {
                                uint64_t x28_3 = ((x0_127 + 0x10) & 0xfffffffffffffff0);
                                void* x0_129 = operator new(x28_3);
                                x23_13 = x0_129;
                                var_838 = x0_129;
                                s_10 = (x28_3 | 1);
                                size_t var_840_1 = x0_127;
                            }
                            else
                            {
                                x23_13 = &*s_10[1];
                                s_10 = (x0_127 << 1);
                            }
                            if ((x0_127 >= 0x17 || (x0_127 < 0x17 && x0_127 != 0)))
                            {
                                memcpy(x23_13, x21_20, x0_127);
                            }
                            *(x23_13 + x0_127) = 0;
                            int32_t x21_22;
                            if ((g3::logLevel(&var_850) & 1) == 0)
                            {
                                x21_22 = 0;
                                if ((s_10 & 1) != 0)
                                {
                                label_22558:
                                    operator delete(var_838);
                                    if ((x21_22 & 1) == 0)
                                    {
                                        goto label_22668;
                                    }
                                    goto label_225e4;
                                }
                            }
                            else
                            {
                                int64_t s_9;
                                __builtin_memset(&s_9, 0, 0x18);
                                uint64_t x25_11 = *PuduCamera::MarkerCamera::TAG;
                                size_t x0_134 = strlen(x25_11);
                                if (x0_134 < -0x10)
                                {
                                    goto label_22e14;
                                }
                                void* var_858_1;
                                void* x23_14;
                                if (x0_134 >= 0x17)
                                {
                                    uint64_t x28_4 = ((x0_134 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_137 = operator new(x28_4);
                                    x23_14 = x0_137;
                                    var_858_1 = x0_137;
                                    s_9 = (x28_4 | 1);
                                    size_t var_860_1 = x0_134;
                                }
                                else
                                {
                                    x23_14 = (&s_9 | 1);
                                    s_9 = (x0_134 << 1);
                                }
                                if ((x0_134 >= 0x17 || (x0_134 < 0x17 && x0_134 != 0)))
                                {
                                    memcpy(x23_14, x25_11, x0_134);
                                }
                                *(x23_14 + x0_134) = 0;
                                x21_22 = g3::logTag(&s_9);
                                if ((s_9 & 1) != 0)
                                {
                                    operator delete(var_858_1);
                                    if ((s_10 & 1) != 0)
                                    {
                                        goto label_22558;
                                    }
                                }
                                else if ((s_10 & 1) != 0)
                                {
                                    goto label_22558;
                                }
                            }
                            char var_788;
                            void* var_778;
                            if ((x21_22 & 1) != 0)
                            {
                            label_225e4:
                                LogCapture::LogCapture(&var_1c0, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str();
                                std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str();
                                LogCapture::capturef();
                                if ((var_788 & 1) != 0)
                                {
                                    operator delete(var_778);
                                }
                                if ((var_310 & 1) != 0)
                                {
                                    operator delete(var_300);
                                }
                                LogCapture::~LogCapture();
                                goto label_22668;
                            }
                        label_22668:
                            __builtin_memset(&s_8, 0, 0x18);
                            size_t x0_147 = strlen((x0_28 + 0x13));
                            if (x0_147 < -0x10)
                            {
                                goto label_22e1c;
                            }
                            size_t var_878_2;
                            void* var_870_1;
                            void* x23_15;
                            if (x0_147 >= 0x17)
                            {
                                uint64_t x25_12 = ((x0_147 + 0x10) & 0xfffffffffffffff0);
                                void* x0_149 = operator new(x25_12);
                                x23_15 = x0_149;
                                var_870_1 = x0_149;
                                s_8 = (x25_12 | 1);
                                var_878_2 = x0_147;
                            }
                            else
                            {
                                x23_15 = x8_23;
                                s_8 = (x0_147 << 1);
                            }
                            if ((x0_147 >= 0x17 || (x0_147 < 0x17 && x0_147 != 0)))
                            {
                                memcpy(x23_15, (x0_28 + 0x13), x0_147);
                            }
                            *(x23_15 + x0_147) = 0;
                            std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str();
                            sub_24efc(&var_1c0, &var_310, 8);
                            if ((var_310 & 1) != 0)
                            {
                                operator delete(var_300);
                            }
                            std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str();
                            sub_24efc(&var_310, &var_788, 8);
                            if ((var_788 & 1) != 0)
                            {
                                operator delete(var_778);
                            }
                            int64_t x8_122 = *(var_1c0 - 0x18);
                            int64_t s_7;
                            __builtin_memset(&s_7, 0, 0x18);
                            void var_198;
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::__init<std::__ndk1::istreambuf_iterator<char, std::__ndk1::char_traits<char> > >(&s_7, *(&var_198 + x8_122));
                            int64_t x8_124 = *(var_310 - 0x18);
                            int64_t s_6;
                            __builtin_memset(&s_6, 0, 0x18);
                            void var_2e8;
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::__init<std::__ndk1::istreambuf_iterator<char, std::__ndk1::char_traits<char> > >(&s_6, *(&var_2e8 + x8_124));
                            uint64_t x8_125 = s_7;
                            uint64_t x10_14 = (x8_125 >> 1);
                            uint64_t var_890_1;
                            uint64_t x11_10;
                            if ((x8_125 & 1) == 0)
                            {
                                x11_10 = x10_14;
                            }
                            else
                            {
                                x11_10 = var_890_1;
                            }
                            void* var_888;
                            if (x11_10 != 0)
                            {
                                void* x8_128;
                                if ((x8_125 & 1) != 0)
                                {
                                    int64_t var_890_2 = (var_890_1 - 1);
                                    x8_128 = (var_888 + (var_890_1 - 1));
                                }
                                else
                                {
                                    x8_128 = ((&s_7 + (x10_14 - 1)) + 1);
                                    s_7 = ((x10_14 - 1) << 1);
                                }
                                *x8_128 = 0;
                            }
                            uint64_t x8_130 = s_6;
                            uint64_t x10_15 = (x8_130 >> 1);
                            uint64_t var_8a8_1;
                            uint64_t x11_11;
                            if ((x8_130 & 1) == 0)
                            {
                                x11_11 = x10_15;
                            }
                            else
                            {
                                x11_11 = var_8a8_1;
                            }
                            void* var_8a0;
                            if (x11_11 != 0)
                            {
                                void* x8_133;
                                if ((x8_130 & 1) != 0)
                                {
                                    int64_t var_8a8_2 = (var_8a8_1 - 1);
                                    x8_133 = (var_8a0 + (var_8a8_1 - 1));
                                }
                                else
                                {
                                    x8_133 = ((&s_6 + (x10_15 - 1)) + 1);
                                    s_6 = ((x10_15 - 1) << 1);
                                }
                                *x8_133 = 0;
                            }
                            std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(&s_6, &s_7);
                            uint32_t x9_36 = *data_57408;
                            char* x10_16 = *(data_57412 + 6);
                            int32_t var_8e8 = data_57400;
                            char* x25_13;
                            if ((x9_36 & 1) == 0)
                            {
                                x25_13 = &*(data_57408 + 1);
                            }
                            else
                            {
                                x25_13 = x10_16;
                            }
                            int64_t s_5;
                            __builtin_memset(&s_5, 0, 0x18);
                            size_t x0_161 = strlen(x25_13);
                            if (x0_161 < -0x10)
                            {
                                goto label_22e24;
                            }
                            void* var_8d0;
                            void* x23_16;
                            if (x0_161 >= 0x17)
                            {
                                uint64_t x28_5 = ((x0_161 + 0x10) & 0xfffffffffffffff0);
                                void* x0_163 = operator new(x28_5);
                                x23_16 = x0_163;
                                var_8d0 = x0_163;
                                s_5 = (x28_5 | 1);
                                size_t var_8d8_1 = x0_161;
                            }
                            else
                            {
                                x23_16 = &*s_5[1];
                                s_5 = (x0_161 << 1);
                            }
                            if ((x0_161 >= 0x17 || (x0_161 < 0x17 && x0_161 != 0)))
                            {
                                memcpy(x23_16, x25_13, x0_161);
                            }
                            *(x23_16 + x0_161) = 0;
                            int32_t x21_27;
                            if ((g3::logLevel(&var_8e8) & 1) == 0)
                            {
                                x21_27 = 0;
                                if ((s_5 & 1) != 0)
                                {
                                label_22930:
                                    operator delete(var_8d0);
                                    if ((x21_27 & 1) == 0)
                                    {
                                        goto label_22a04;
                                    }
                                    goto label_229d4;
                                }
                            }
                            else
                            {
                                int64_t s_4;
                                __builtin_memset(&s_4, 0, 0x18);
                                uint64_t x25_14 = *PuduCamera::MarkerCamera::TAG;
                                size_t x0_168 = strlen(x25_14);
                                if (x0_168 < -0x10)
                                {
                                    goto label_22e2c;
                                }
                                void* var_8f0_1;
                                void* x23_17;
                                if (x0_168 >= 0x17)
                                {
                                    uint64_t x28_6 = ((x0_168 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_172 = operator new(x28_6);
                                    size_t var_8f8_1 = x0_168;
                                    var_8f0_1 = x0_172;
                                    s_4 = (x28_6 | 1);
                                    x23_17 = x0_172;
                                }
                                else
                                {
                                    x23_17 = (&s_4 | 1);
                                    s_4 = (x0_168 << 1);
                                }
                                if ((x0_168 >= 0x17 || (x0_168 < 0x17 && x0_168 != 0)))
                                {
                                    memcpy(x23_17, x25_14, x0_168);
                                }
                                *(x23_17 + x0_168) = 0;
                                x21_27 = g3::logTag(&s_4);
                                if ((s_4 & 1) != 0)
                                {
                                    operator delete(var_8f0_1);
                                    if ((s_5 & 1) != 0)
                                    {
                                        goto label_22930;
                                    }
                                }
                                else if ((s_5 & 1) != 0)
                                {
                                    goto label_22930;
                                }
                            }
                            if ((x21_27 & 1) != 0)
                            {
                            label_229d4:
                                LogCapture::LogCapture(&var_788, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                                LogCapture::capturef();
                                LogCapture::~LogCapture();
                                goto label_22a04;
                            }
                        label_22a04:
                            char* x14_1 = arg2;
                            char var_8c8;
                            uint64_t x10_17 = var_8c8;
                            uint64_t x9_38 = *x14_1;
                            uint64_t x8_149 = (x10_17 >> 1);
                            uint64_t x2_37;
                            uint64_t var_8c0;
                            if ((x10_17 & 1) == 0)
                            {
                                x2_37 = x8_149;
                            }
                            else
                            {
                                x2_37 = var_8c0;
                            }
                            uint64_t x11_13;
                            if ((x9_38 & 1) == 0)
                            {
                                x11_13 = (x9_38 >> 1);
                            }
                            else
                            {
                                x11_13 = *(x14_1 + 8);
                            }
                            int32_t x23_18 = (x10_17 & 1);
                            int32_t x21_11;
                            if (x2_37 == x11_13)
                            {
                                char* x1_48;
                                if ((x9_38 & 1) == 0)
                                {
                                    x1_48 = (arg2 + 1);
                                }
                                else
                                {
                                    x1_48 = *(x14_1 + 0x10);
                                }
                                if (x23_18 == 0)
                                {
                                    if (x2_37 == 0)
                                    {
                                        goto label_22ab8;
                                    }
                                    char* x9_40 = (&var_8c8 | 1);
                                    int64_t x8_150 = -(x8_149);
                                    while (*x9_40 == *x1_48)
                                    {
                                        x9_40 = &x9_40[1];
                                        int64_t temp8_1 = x8_150;
                                        x8_150 = (x8_150 + 1);
                                        x1_48 = &x1_48[1];
                                        if (temp8_1 == -1)
                                        {
                                            break;
                                        }
                                    }
                                    if (*x9_40 == *x1_48)
                                    {
                                        goto label_22ab8;
                                    }
                                    x21_11 = 0;
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_22b54;
                                    }
                                }
                                else if (x2_37 != 0)
                                {
                                    if (memcmp() == 0)
                                    {
                                        goto label_22ab8;
                                    }
                                    x21_11 = 0;
                                label_22b44:
                                    char* var_8b8;
                                    operator delete(var_8b8);
                                }
                                else
                                {
                                label_22ab8:
                                    uint64_t x8_152 = s_8;
                                    size_t x8_153;
                                    if ((x8_152 & 1) == 0)
                                    {
                                        x8_153 = (x8_152 >> 1);
                                    }
                                    else
                                    {
                                        x8_153 = var_878_2;
                                    }
                                    if (x8_153 < 6)
                                    {
                                        goto label_22b38;
                                    }
                                    uint32_t x9_42 = *data_57408;
                                    char* x10_20 = *(data_57412 + 6);
                                    int32_t var_920 = data_57400;
                                    char* x21_28;
                                    if ((x9_42 & 1) == 0)
                                    {
                                        x21_28 = &*(data_57408 + 1);
                                    }
                                    else
                                    {
                                        x21_28 = x10_20;
                                    }
                                    int64_t s_3;
                                    __builtin_memset(&s_3, 0, 0x18);
                                    size_t x0_180 = strlen(x21_28);
                                    if (x0_180 < -0x10)
                                    {
                                        break;
                                    }
                                    void* var_908;
                                    void* x23_6;
                                    if (x0_180 >= 0x17)
                                    {
                                        uint64_t x25_3 = ((x0_180 + 0x10) & 0xfffffffffffffff0);
                                        void* x0_61 = operator new(x25_3);
                                        x23_6 = x0_61;
                                        size_t var_910_1 = x0_180;
                                        var_908 = x0_61;
                                        s_3 = (x25_3 | 1);
                                    }
                                    else
                                    {
                                        x23_6 = &*s_3[1];
                                        s_3 = (x0_180 << 1);
                                    }
                                    if ((x0_180 >= 0x17 || (x0_180 < 0x17 && x0_180 != 0)))
                                    {
                                        memcpy(x23_6, x21_28, x0_180);
                                    }
                                    *(x23_6 + x0_180) = 0;
                                    x22_4 = arg2;
                                    int32_t x20_8;
                                    if ((g3::logLevel(&var_920) & 1) == 0)
                                    {
                                        x20_8 = 0;
                                        if ((s_3 & 1) != 0)
                                        {
                                        label_21e2c:
                                            operator delete(var_908);
                                            if ((x20_8 & 1) == 0)
                                            {
                                                goto label_21f04;
                                            }
                                            goto label_21ec4;
                                        }
                                    }
                                    else
                                    {
                                        int64_t s_2;
                                        __builtin_memset(&s_2, 0, 0x18);
                                        uint64_t x20_7 = *PuduCamera::MarkerCamera::TAG;
                                        size_t x0_66 = strlen(x20_7);
                                        if (x0_66 < -0x10)
                                        {
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        label_22dec:
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        label_22df4:
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        label_22dfc:
                                            std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
                                        label_22e04:
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        label_22e0c:
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        label_22e14:
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        label_22e1c:
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        label_22e24:
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        label_22e2c:
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                            break;
                                        }
                                        void* var_928_1;
                                        void* x23_7;
                                        if (x0_66 >= 0x17)
                                        {
                                            uint64_t x25_4 = ((x0_66 + 0x10) & 0xfffffffffffffff0);
                                            void* x0_69 = operator new(x25_4);
                                            x23_7 = x0_69;
                                            size_t var_930_1 = x0_66;
                                            var_928_1 = x0_69;
                                            s_2 = (x25_4 | 1);
                                        }
                                        else
                                        {
                                            x23_7 = (&s_2 | 1);
                                            s_2 = (x0_66 << 1);
                                        }
                                        if ((x0_66 >= 0x17 || (x0_66 < 0x17 && x0_66 != 0)))
                                        {
                                            memcpy(x23_7, x20_7, x0_66);
                                        }
                                        *(x23_7 + x0_66) = 0;
                                        x20_8 = g3::logTag(&s_2);
                                        if ((s_2 & 1) != 0)
                                        {
                                            operator delete(var_928_1);
                                            if ((s_3 & 1) != 0)
                                            {
                                                goto label_21e2c;
                                            }
                                        }
                                        else if ((s_3 & 1) != 0)
                                        {
                                            goto label_21e2c;
                                        }
                                    }
                                    if ((x20_8 & 1) != 0)
                                    {
                                    label_21ec4:
                                        LogCapture::LogCapture(&var_788, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                                        x22_4[2];
                                        LogCapture::capturef();
                                        LogCapture::~LogCapture();
                                        goto label_21f04;
                                    }
                                label_21f04:
                                    uint32_t x9_14 = *data_57408;
                                    char* x10_5 = *(data_57412 + 6);
                                    int32_t var_958 = data_57400;
                                    char* x21_12;
                                    if ((x9_14 & 1) == 0)
                                    {
                                        x21_12 = &*(data_57408 + 1);
                                    }
                                    else
                                    {
                                        x21_12 = x10_5;
                                    }
                                    int64_t s_1;
                                    __builtin_memset(&s_1, 0, 0x18);
                                    size_t x0_75 = strlen(x21_12);
                                    if (x0_75 < -0x10)
                                    {
                                        goto label_22dec;
                                    }
                                    void* var_940;
                                    void* x23_8;
                                    if (x0_75 >= 0x17)
                                    {
                                        uint64_t x25_5 = ((x0_75 + 0x10) & 0xfffffffffffffff0);
                                        void* x0_77 = operator new(x25_5);
                                        x23_8 = x0_77;
                                        size_t var_948_1 = x0_75;
                                        var_940 = x0_77;
                                        s_1 = (x25_5 | 1);
                                    }
                                    else
                                    {
                                        x23_8 = &*s_1[1];
                                        s_1 = (x0_75 << 1);
                                    }
                                    if ((x0_75 >= 0x17 || (x0_75 < 0x17 && x0_75 != 0)))
                                    {
                                        memcpy(x23_8, x21_12, x0_75);
                                    }
                                    *(x23_8 + x0_75) = 0;
                                    int32_t x0_80;
                                    int128_t v0_2;
                                    x0_80 = g3::logLevel(&var_958);
                                    int32_t x20_11;
                                    if ((x0_80 & 1) == 0)
                                    {
                                        x20_11 = 0;
                                        if ((s_1 & 1) != 0)
                                        {
                                        label_21fec:
                                            operator delete(var_940);
                                            if ((x20_11 & 1) == 0)
                                            {
                                                goto label_220b8;
                                            }
                                            goto label_22088;
                                        }
                                    }
                                    else
                                    {
                                        int64_t s;
                                        __builtin_memset(&s, 0, 0x18);
                                        uint64_t x20_10 = *PuduCamera::MarkerCamera::TAG;
                                        size_t x0_82 = strlen(x20_10);
                                        if (x0_82 < -0x10)
                                        {
                                            goto label_22df4;
                                        }
                                        void* var_960_1;
                                        void* x23_9;
                                        if (x0_82 >= 0x17)
                                        {
                                            uint64_t x25_6 = ((x0_82 + 0x10) & 0xfffffffffffffff0);
                                            void* x0_86 = operator new(x25_6);
                                            x23_9 = x0_86;
                                            size_t var_968_1 = x0_82;
                                            var_960_1 = x0_86;
                                            s = (x25_6 | 1);
                                        }
                                        else
                                        {
                                            x23_9 = (&s | 1);
                                            s = (x0_82 << 1);
                                        }
                                        if ((x0_82 >= 0x17 || (x0_82 < 0x17 && x0_82 != 0)))
                                        {
                                            memcpy(x23_9, x20_10, x0_82);
                                        }
                                        *(x23_9 + x0_82) = 0;
                                        int32_t x0_89;
                                        x0_89 = g3::logTag(&s);
                                        x20_11 = x0_89;
                                        if ((s & 1) != 0)
                                        {
                                            operator delete(var_960_1);
                                            if ((s_1 & 1) != 0)
                                            {
                                                goto label_21fec;
                                            }
                                        }
                                        else if ((s_1 & 1) != 0)
                                        {
                                            goto label_21fec;
                                        }
                                    }
                                    if ((x20_11 & 1) != 0)
                                    {
                                    label_22088:
                                        LogCapture::LogCapture(&var_788, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
                                        LogCapture::capturef();
                                        LogCapture::~LogCapture();
                                        goto label_220b8;
                                    }
                                label_220b8:
                                    uint64_t x25_7 = s_8;
                                    int64_t var_780_1 = 0;
                                    var_788 = 0;
                                    size_t x8_83;
                                    if ((x25_7 & 1) == 0)
                                    {
                                        x8_83 = (x25_7 >> 1);
                                    }
                                    else
                                    {
                                        x8_83 = var_878_2;
                                    }
                                    var_778 = nullptr;
                                    if (x8_83 <= 4)
                                    {
                                        goto label_22dfc;
                                    }
                                    if ((x25_7 & 1) == 0)
                                    {
                                        x22_4 = x8_23;
                                    }
                                    else
                                    {
                                        x22_4 = var_870_1;
                                    }
                                    if ((x8_83 - 5) < -0x10)
                                    {
                                        goto label_22e04;
                                    }
                                    void* x21_14;
                                    if ((x8_83 - 5) >= 0x17)
                                    {
                                        uint64_t x23_10 = ((x8_83 + 0xb) & 0xfffffffffffffff0);
                                        void* x0_92 = operator new(x23_10);
                                        x21_14 = x0_92;
                                        var_778 = x0_92;
                                        var_788 = (x23_10 | 1);
                                        size_t var_780_2 = (x8_83 - 5);
                                    }
                                    else
                                    {
                                        x21_14 = (&var_788 | 1);
                                        var_788 = ((x8_83 - 5) << 1);
                                    }
                                    if (((x8_83 - 5) >= 0x17 || ((x8_83 - 5) < 0x17 && x8_83 != 5)))
                                    {
                                        memcpy(x21_14, (x22_4 + 5), (x8_83 - 5));
                                    }
                                    *(x21_14 + (x8_83 - 5)) = 0;
                                    if ((x25_7 & 1) == 0)
                                    {
                                        s_8 = 0;
                                    }
                                    else
                                    {
                                        *var_870_1 = 0;
                                        int64_t var_878_1 = 0;
                                        if ((s_8 & 1) != 0)
                                        {
                                            operator delete(var_870_1);
                                            s_8 = 0;
                                        }
                                    }
                                    uint32_t x20_13 = var_8c8;
                                    s_8 = var_788;
                                    var_870_1 = var_778;
                                    void* x0_95;
                                    if ((s_8 & 1) == 0)
                                    {
                                        x0_95 = x8_23;
                                    }
                                    else
                                    {
                                        x0_95 = var_778;
                                    }
                                    x21_11 = 1;
                                    var_aec = atoi(x0_95);
                                    if ((x20_13 & 1) != 0)
                                    {
                                        goto label_22b44;
                                    }
                                }
                            }
                            else
                            {
                            label_22b38:
                                x21_11 = 0;
                                if (x23_18 != 0)
                                {
                                    goto label_22b44;
                                }
                            }
                            if (((x2_37 != x11_13 || (x2_37 == x11_13 && x23_18 != 0)) && (s_6 & 1) != 0))
                            {
                            label_22b54:
                                operator delete(var_8a0);
                            }
                            if ((s_7 & 1) == 0)
                            {
                                goto label_22b7c;
                            }
                            operator delete(var_888);
                        label_22b7c:
                            var_310 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
                            var_258 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
                            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                            std::__ndk1::ios_base::~ios_base();
                            var_1c0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
                            var_108 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
                            std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
                            std::__ndk1::ios_base::~ios_base();
                            if ((s_8 & 1) != 0)
                            {
                                operator delete(var_870_1);
                            }
                            var_640 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                            var_5d0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
                            void* var_638_2 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
                            void* var_5e8;
                            if ((s_18 & 1) != 0)
                            {
                                operator delete(var_5e8);
                            }
                            void* var_638_3 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
                            std::__ndk1::locale::~locale();
                            std::__ndk1::ios_base::~ios_base();
                            uint32_t s_23 = s_20;
                            var_530 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                            var_4c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
                            void* var_528_2 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
                            void* var_4d8;
                            if ((s_23 & 1) != 0)
                            {
                                operator delete(var_4d8);
                            }
                            void* var_528_3 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
                            std::__ndk1::locale::~locale();
                            std::__ndk1::ios_base::~ios_base();
                            x22_4 = var_a98_1;
                            if (x21_11 == 0)
                            {
                                continue;
                            }
                            else
                            {
                                x21_9 = 1;
                            }
                        }
                        closedir(x27_3);
                        break;
                    }
                    if (/* if (unimplemented  {cbz x0, 0x22c50})... */)
                    {
                        goto label_22c78;
                    }
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_22e3c:
                    int64_t* var_a98_2 = x22_4;
                    void* var_a90_2 = x26_1;
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_22e48:
                    int64_t* var_a98_3 = x22_4;
                    void* var_a90_3 = x26_1;
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                    goto label_22e50;
                }
                x21_9 = 2;
            label_22c78:
                var_420 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
                uint32_t s_24 = s_22;
                var_3b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
                void* var_418_2 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
                if ((s_24 & 1) != 0)
                {
                    operator delete(var_3c8);
                }
                void* var_418_3 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
                std::__ndk1::locale::~locale();
                std::__ndk1::ios_base::~ios_base();
                if ((x21_9 | 2) == 2)
                {
                    continue;
                }
                else
                {
                    x20_19 = var_aec;
                }
            }
            closedir(i);
            break;
        }
    }
    if (((i_1 == 0 && x0_4 >= -0x10) || (i_1 != 0 && x0_2 >= -0x10)))
    {
        if (*(x25 + 0x28) == x8)
        {
            return x20_19;
        }
    label_22e50:
        __stack_chk_fail();
        /* no return */
    }
}

void sub_22e8c(int64_t arg1, DIR* arg2 @ x19, int64_t arg3, DIR* arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, char arg14, void* arg15, char arg16, void* arg17, char arg18, void* arg19, char arg20, void* arg21, char arg22, void* arg23, char arg24, void* arg25, char arg26, void* arg27, char arg28, void* arg29) __noreturn
{
    int64_t x20 = arg1;
    if ((arg14 & 1) != 0)
    {
        operator delete(arg15);
    }
    if ((arg16 & 1) != 0)
    {
        operator delete(arg17);
    }
    if ((((arg16 & 1) != 0 && (arg18 & 1) != 0) || ((arg16 & 1) == 0 && (arg18 & 1) != 0)))
    {
        operator delete(arg19);
        if ((arg20 & 1) != 0)
        {
            goto label_231c0;
        }
    }
    if (((((arg16 & 1) != 0 && (arg18 & 1) == 0) || ((arg16 & 1) == 0 && (arg18 & 1) == 0)) && (arg20 & 1) != 0))
    {
    label_231c0:
        operator delete(arg21);
    }
    arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    if ((arg22 & 1) != 0)
    {
        operator delete(arg23);
    }
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg24 & 1) != 0)
    {
        operator delete(arg25);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg26 & 1) != 0)
    {
        operator delete(arg27);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    closedir(arg4);
    arg_6d0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_740 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_6d8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg28 & 1) != 0)
    {
        operator delete(arg29);
    }
    arg_6d8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    if (arg2 == 0)
    {
        goto label_233f8;
    }
    do
    {
        closedir(arg2);
    label_233f8:
        x20 = _Unwind_Resume(x20);
    } while (arg2 != 0);
}

int64_t sub_22e9c(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8)
{
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

int64_t sub_22ea0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

int64_t sub_22eb4(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20, char arg21, void* arg22)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) != 0 && (arg11 & 1) != 0) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
        if ((arg13 & 1) != 0)
        {
        label_23068:
            operator delete(arg14);
            if ((arg15 & 1) != 0)
            {
                goto label_231c0;
            }
            goto label_231dc;
        }
    }
    if (((((((arg9 & 1) != 0 && (arg11 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) == 0)) && (arg13 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)))
    {
        if ((arg15 & 1) == 0)
        {
            goto label_231dc;
        }
    label_231c0:
        operator delete(arg16);
    label_231dc:
        arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if ((arg17 & 1) != 0)
        {
            operator delete(arg18);
        }
        arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg19 & 1) != 0)
        {
            operator delete(arg20);
        }
        arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg21 & 1) != 0)
        {
            operator delete(arg22);
        }
        arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        /* tailcall */
        return sub_23380();
    }
    if (((((arg9 & 1) != 0 && (arg11 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) == 0)) && (arg13 & 1) != 0))
    {
        goto label_23068;
    }
}

int64_t sub_22ec4(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20, char arg21, void* arg22)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) != 0 && (arg11 & 1) != 0) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
        if ((arg13 & 1) != 0)
        {
        label_23068:
            operator delete(arg14);
            if ((arg15 & 1) != 0)
            {
                goto label_231c0;
            }
            goto label_231dc;
        }
    }
    if (((((((arg9 & 1) != 0 && (arg11 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) == 0)) && (arg13 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)))
    {
        if ((arg15 & 1) == 0)
        {
            goto label_231dc;
        }
    label_231c0:
        operator delete(arg16);
    label_231dc:
        arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if ((arg17 & 1) != 0)
        {
            operator delete(arg18);
        }
        arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg19 & 1) != 0)
        {
            operator delete(arg20);
        }
        arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg21 & 1) != 0)
        {
            operator delete(arg22);
        }
        arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        /* tailcall */
        return sub_23380();
    }
    if (((((arg9 & 1) != 0 && (arg11 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) == 0)) && (arg13 & 1) != 0))
    {
        goto label_23068;
    }
}

int64_t sub_22ed4(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) != 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
        if ((arg13 & 1) != 0)
        {
        label_231c0:
            operator delete(arg14);
        }
        goto label_231dc;
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)))
    {
        if ((arg13 & 1) != 0)
        {
            goto label_231c0;
        }
    label_231dc:
        arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if ((arg15 & 1) != 0)
        {
            operator delete(arg16);
        }
        arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg17 & 1) != 0)
        {
            operator delete(arg18);
        }
        arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg19 & 1) != 0)
        {
            operator delete(arg20);
        }
        arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        /* tailcall */
        return sub_23380();
    }
}

int64_t sub_22ee0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20)
{
    LogCapture::~LogCapture();
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) != 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
        if ((arg13 & 1) != 0)
        {
        label_231c0:
            operator delete(arg14);
        }
        goto label_231dc;
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)))
    {
        if ((arg13 & 1) != 0)
        {
            goto label_231c0;
        }
    label_231dc:
        arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if ((arg15 & 1) != 0)
        {
            operator delete(arg16);
        }
        arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg17 & 1) != 0)
        {
            operator delete(arg18);
        }
        arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg19 & 1) != 0)
        {
            operator delete(arg20);
        }
        arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        /* tailcall */
        return sub_23380();
    }
}

int64_t sub_22ee8(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20, char arg21, void* arg22, char arg23, void* arg24)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) != 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
        if ((arg13 & 1) != 0)
        {
            goto label_23058;
        }
    }
    if ((((((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)) && (arg15 & 1) != 0))
    {
        goto label_23068;
    }
    if (((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) != 0))
    {
    label_23058:
        operator delete(arg14);
        if ((arg15 & 1) != 0)
        {
        label_23068:
            operator delete(arg16);
            if ((arg17 & 1) != 0)
            {
                goto label_231c0;
            }
            goto label_231dc;
        }
    }
    if (((((((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)) && (arg15 & 1) == 0) || ((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) != 0)))
    {
        if ((arg17 & 1) == 0)
        {
            goto label_231dc;
        }
    label_231c0:
        operator delete(arg18);
    label_231dc:
        arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if ((arg19 & 1) != 0)
        {
            operator delete(arg20);
        }
        arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg21 & 1) != 0)
        {
            operator delete(arg22);
        }
        arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg23 & 1) != 0)
        {
            operator delete(arg24);
        }
        arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        /* tailcall */
        return sub_23380();
    }
}

int64_t sub_22f10(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20, char arg21, void* arg22, char arg23, void* arg24)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) != 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
        if ((arg13 & 1) != 0)
        {
            goto label_23058;
        }
    }
    if ((((((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)) && (arg15 & 1) != 0))
    {
        goto label_23068;
    }
    if (((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) != 0))
    {
    label_23058:
        operator delete(arg14);
        if ((arg15 & 1) != 0)
        {
        label_23068:
            operator delete(arg16);
            if ((arg17 & 1) != 0)
            {
                goto label_231c0;
            }
            goto label_231dc;
        }
    }
    if (((((((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)) && (arg15 & 1) == 0) || ((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) != 0)))
    {
        if ((arg17 & 1) == 0)
        {
            goto label_231dc;
        }
    label_231c0:
        operator delete(arg18);
    label_231dc:
        arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if ((arg19 & 1) != 0)
        {
            operator delete(arg20);
        }
        arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg21 & 1) != 0)
        {
            operator delete(arg22);
        }
        arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg23 & 1) != 0)
        {
            operator delete(arg24);
        }
        arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        /* tailcall */
        return sub_23380();
    }
}

int64_t sub_22f30(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20, char arg21, void* arg22)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) != 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
        if ((arg13 & 1) != 0)
        {
        label_23068:
            operator delete(arg14);
            if ((arg15 & 1) != 0)
            {
                goto label_231c0;
            }
            goto label_231dc;
        }
    }
    if (((((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        if ((arg15 & 1) == 0)
        {
            goto label_231dc;
        }
    label_231c0:
        operator delete(arg16);
    label_231dc:
        arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if ((arg17 & 1) != 0)
        {
            operator delete(arg18);
        }
        arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg19 & 1) != 0)
        {
            operator delete(arg20);
        }
        arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg21 & 1) != 0)
        {
            operator delete(arg22);
        }
        arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        /* tailcall */
        return sub_23380();
    }
    if (((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) != 0))
    {
        goto label_23068;
    }
}

int64_t sub_22f44(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20, char arg21, void* arg22)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) != 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
        if ((arg13 & 1) != 0)
        {
        label_23068:
            operator delete(arg14);
            if ((arg15 & 1) != 0)
            {
                goto label_231c0;
            }
            goto label_231dc;
        }
    }
    if (((((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) == 0) || ((arg9 & 1) == 0 && (arg11 & 1) != 0)) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        if ((arg15 & 1) == 0)
        {
            goto label_231dc;
        }
    label_231c0:
        operator delete(arg16);
    label_231dc:
        arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        if ((arg17 & 1) != 0)
        {
            operator delete(arg18);
        }
        arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg19 & 1) != 0)
        {
            operator delete(arg20);
        }
        arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
        arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
        arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
        if ((arg21 & 1) != 0)
        {
            operator delete(arg22);
        }
        arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
        std::__ndk1::locale::~locale();
        std::__ndk1::ios_base::~ios_base();
        /* tailcall */
        return sub_23380();
    }
    if (((((arg9 & 1) == 0 && (arg11 & 1) == 0) || ((arg9 & 1) != 0 && (arg11 & 1) == 0)) && (arg13 & 1) != 0))
    {
        goto label_23068;
    }
}

int64_t sub_22f80(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20, char arg21, void* arg22, char arg23, void* arg24)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((((arg9 & 1) == 0 && (arg11 & 1) != 0) || ((arg9 & 1) != 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
    }
    if ((arg13 & 1) != 0)
    {
        operator delete(arg14);
    }
    if ((((arg13 & 1) != 0 && (arg15 & 1) != 0) || ((arg13 & 1) == 0 && (arg15 & 1) != 0)))
    {
        operator delete(arg16);
        if ((arg17 & 1) != 0)
        {
            goto label_231c0;
        }
    }
    if (((((arg13 & 1) != 0 && (arg15 & 1) == 0) || ((arg13 & 1) == 0 && (arg15 & 1) == 0)) && (arg17 & 1) != 0))
    {
    label_231c0:
        operator delete(arg18);
    }
    arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    if ((arg19 & 1) != 0)
    {
        operator delete(arg20);
    }
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg21 & 1) != 0)
    {
        operator delete(arg22);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg23 & 1) != 0)
    {
        operator delete(arg24);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

int64_t sub_22fa4(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10, char arg11, void* arg12)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg11 & 1) != 0) || ((arg5 & 1) != 0 && (arg11 & 1) != 0)))
    {
        operator delete(arg12);
    }
    LogCapture::~LogCapture();
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

int64_t sub_22fc4(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    LogCapture::~LogCapture();
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

int64_t sub_22fdc(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8)
{
    LogCapture::~LogCapture();
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

int64_t sub_22ff0(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10, char arg11, void* arg12)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
    }
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg11 & 1) != 0)
    {
        operator delete(arg12);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

void sub_23010(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4, char arg5, void* arg6) __noreturn
{
    LogCapture::~LogCapture();
    _Unwind_Resume(arg1);
    int64_t x20 = _Unwind_Resume();
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
        if ((arg5 & 1) == 0)
        {
            goto label_233f8;
        }
    }
    else if ((arg5 & 1) == 0)
    {
        goto label_233f8;
    }
    operator delete(arg6);
    x20 = _Unwind_Resume(x20);
    if (arg2 == 0)
    {
        goto label_233f8;
    }
    do
    {
        closedir(arg2);
    label_233f8:
        x20 = _Unwind_Resume(x20);
    } while (arg2 != 0);
}

void sub_23078(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4, char arg5, void* arg6) __noreturn
{
    int64_t x20 = arg1;
    int64_t x22;
    arg_58 = x22;
    int64_t x26;
    arg_60 = x26;
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    LogCapture::~LogCapture();
    arg_6d0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_740 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_6d8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    arg_6d8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    if (arg2 == 0)
    {
        goto label_233f8;
    }
    do
    {
        closedir(arg2);
    label_233f8:
        x20 = _Unwind_Resume(x20);
    } while (arg2 != 0);
}

void sub_23094(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4) __noreturn
{
    int64_t x22;
    arg_58 = x22;
    int64_t x26;
    arg_60 = x26;
    int64_t x20 = arg1;
    LogCapture::~LogCapture();
    arg_6d0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_740 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_6d8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    arg_6d8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    if (arg2 == 0)
    {
        goto label_233f8;
    }
    do
    {
        closedir(arg2);
    label_233f8:
        x20 = _Unwind_Resume(x20);
    } while (arg2 != 0);
}

void sub_230a8(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4) __noreturn
{
    int64_t x22;
    arg_58 = x22;
    int64_t x26;
    arg_60 = x26;
    int64_t x20 = arg1;
    arg_6d0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_740 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_6d8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    arg_6d8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    if (arg2 == 0)
    {
        goto label_233f8;
    }
    do
    {
        closedir(arg2);
    label_233f8:
        x20 = _Unwind_Resume(x20);
    } while (arg2 != 0);
}

void sub_230ac(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8) __noreturn
{
    int64_t x20 = arg1;
    int64_t x22;
    arg_58 = x22;
    int64_t x26;
    arg_60 = x26;
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    arg_6d0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_740 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_6d8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    arg_6d8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    if (arg2 == 0)
    {
        goto label_233f8;
    }
    do
    {
        closedir(arg2);
    label_233f8:
        x20 = _Unwind_Resume(x20);
    } while (arg2 != 0);
}

void sub_230e8(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4, char arg5, void* arg6) __noreturn
{
    int64_t x20 = arg1;
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    while (true)
    {
        closedir(arg2);
        do
        {
            x20 = _Unwind_Resume(x20);
        } while (arg2 == 0);
    }
}

int64_t sub_23190(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, char arg17, void* arg18, char arg19, void* arg20, char arg21, void* arg22)
{
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    if ((arg11 & 1) != 0)
    {
        operator delete(arg12);
    }
    if ((((arg11 & 1) != 0 && (arg13 & 1) != 0) || ((arg11 & 1) == 0 && (arg13 & 1) != 0)))
    {
        operator delete(arg14);
        if ((arg15 & 1) != 0)
        {
            goto label_231c0;
        }
    }
    if (((((arg11 & 1) != 0 && (arg13 & 1) == 0) || ((arg11 & 1) == 0 && (arg13 & 1) == 0)) && (arg15 & 1) != 0))
    {
    label_231c0:
        operator delete(arg16);
    }
    arg_7e0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_898 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    arg_930 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_9e8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    if ((arg17 & 1) != 0)
    {
        operator delete(arg18);
    }
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg19 & 1) != 0)
    {
        operator delete(arg20);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg21 & 1) != 0)
    {
        operator delete(arg22);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

int64_t sub_23230(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    arg_4b0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_520 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_4b8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    arg_4b8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    arg_5c0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_630 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_5c8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    arg_5c8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return sub_23380();
}

void sub_23244(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4) __noreturn
{
    int64_t x20 = arg1;
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
        x20 = _Unwind_Resume(x20);
        if (arg2 != 0)
        {
            goto label_233ec;
        }
    }
    while (true)
    {
        x20 = _Unwind_Resume(x20);
        if (arg2 != 0)
        {
        label_233ec:
            closedir(arg2);
        }
    }
}

void sub_2327c(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4, char arg5, void* arg6) __noreturn
{
    int64_t x22;
    arg_58 = x22;
    int64_t x26;
    arg_60 = x26;
    int64_t x20 = arg1;
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    arg_6d0 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg_740 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    arg_6d8 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    arg_6d8 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    if (arg2 == 0)
    {
        goto label_233f8;
    }
    do
    {
        closedir(arg2);
    label_233f8:
        x20 = _Unwind_Resume(x20);
    } while (arg2 != 0);
}

void sub_23298(int64_t arg1, DIR* arg2 @ x19, char arg3, void* arg4) __noreturn
{
    int64_t x20 = arg1;
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    while (true)
    {
        closedir(arg2);
        do
        {
            x20 = _Unwind_Resume(x20);
        } while (arg2 == 0);
    }
}

int64_t PuduCamera::MarkerCamera::closeCamera(char* arg1)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    uint32_t x10 = *data_57408;
    int32_t var_1c0 = data_57400;
    char* x9 = *(data_57412 + 6);
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    char* x21;
    if ((x10 & 1) == 0)
    {
        x21 = &*(data_57408 + 1);
    }
    else
    {
        x21 = x9;
    }
    size_t x0_1 = strlen(x21);
    if (x0_1 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_1a8_1;
        void* x22_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x23_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x23_1);
            x22_1 = x0_3;
            size_t var_1b0_1 = x0_1;
            var_1a8_1 = x0_3;
            s_1 = (x23_1 | 1);
        }
        else
        {
            x22_1 = &*s_1[1];
            s_1 = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x22_1, x21, x0_1);
        }
        *(x22_1 + x0_1) = 0;
        int32_t x20_3;
        if ((g3::logLevel(&var_1c0) & 1) == 0)
        {
            x20_3 = 0;
            if ((s_1 & 1) != 0)
            {
            label_23598:
                operator delete(var_1a8_1);
                if ((x20_3 & 1) != 0)
                {
                    goto label_235c8;
                }
                goto label_235e4;
            }
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            uint64_t x20_2 = *PuduCamera::MarkerCamera::TAG;
            size_t x0_8 = strlen(x20_2);
            void* var_1c8;
            if (x0_8 < -0x10)
            {
                int64_t x0_19 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                int64_t x0_21 = _Unwind_Resume(x0_19);
                if ((s & 1) != 0)
                {
                    operator delete(var_1c8);
                }
                if ((((s & 1) == 0 && (s_1 & 1) == 0) || ((s & 1) != 0 && (s_1 & 1) == 0)))
                {
                    _Unwind_Resume(x0_21);
                }
                operator delete(var_1a8_1);
                /* tailcall */
                return PuduCamera::MarkerCamera::isOpenCamera(_Unwind_Resume(x0_21));
            }
            void* x22_2;
            if (x0_8 >= 0x17)
            {
                uint64_t x23_2 = ((x0_8 + 0x10) & 0xfffffffffffffff0);
                void* x0_10 = operator new(x23_2);
                x22_2 = x0_10;
                size_t var_1d0_1 = x0_8;
                var_1c8 = x0_10;
                s = (x23_2 | 1);
            }
            else
            {
                x22_2 = (&s | 1);
                s = (x0_8 << 1);
            }
            if ((x0_8 >= 0x17 || (x0_8 < 0x17 && x0_8 != 0)))
            {
                memcpy(x22_2, x20_2, x0_8);
            }
            *(x22_2 + x0_8) = 0;
            x20_3 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                operator delete(var_1c8);
                if ((s_1 & 1) != 0)
                {
                    goto label_23598;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_23598;
            }
        }
        if ((x20_3 & 1) == 0)
        {
            goto label_235e4;
        }
    label_235c8:
        void var_1a0;
        LogCapture::LogCapture(&var_1a0, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
        LogCapture::capturef();
        LogCapture::~LogCapture();
    label_235e4:
        int64_t* x0_17 = *(arg1 + 0x18);
        *(arg1 + 0x18) = 0;
        if (x0_17 != 0)
        {
            *(*x0_17 + 8)();
        }
        *arg1 = 0;
        if (*(x24 + 0x28) == x8)
        {
            return 1;
        }
    }
    __stack_chk_fail();
    /* no return */
}

uint64_t PuduCamera::MarkerCamera::isOpenCamera(char* arg1)
{
    return (*arg1 & 1);
}

double PuduCamera::MarkerCamera::getNowTime()
{
    void tpidr_el0;
    uint64_t x19 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x19 + 0x28);
    double var_38;
    gettimeofday(&var_38, 0);
    if (*(x19 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    /* unimplemented  {scvtf d1, d1} */;
    /* unimplemented  {scvtf d0, d0} */;
    double var_30;
    return ((var_30 * 9.9999999999999995e-07) + var_38);
}

uint64_t PuduCamera::MarkerCamera::getExposure(void* arg1)
{
    int64_t* x22;
    int64_t* var_30 = x22;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int32_t var_1a8 = 0x9a0902;
    int32_t x0_1 = ioctl(*(arg1 + 0x20), 0xc008561b, &var_1a8);
    int32_t var_200;
    int64_t s_1;
    void var_1a0;
    size_t x0_3;
    size_t x0_5;
    uint64_t x0_35;
    char* x20_1;
    if ((x0_1 & 0x80000000) != 0)
    {
        char* x21_2;
        if ((*data_57488 & 1) == 0)
        {
            x21_2 = &*(data_57488 + 1);
        }
        else
        {
            x21_2 = *(data_57492 + 6);
        }
        int32_t var_1c8 = data_57480;
        int64_t s_3;
        __builtin_memset(&s_3, 0, 0x18);
        x0_5 = strlen(x21_2);
        if (x0_5 >= -0x10)
        {
            void* var_1b0_1;
            void* x22_1;
            if (x0_5 >= 0x17)
            {
                uint64_t x23_1 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
                void* x0_15 = operator new(x23_1);
                x22_1 = x0_15;
                size_t var_1b8_1 = x0_5;
                var_1b0_1 = x0_15;
                s_3 = (x23_1 | 1);
            }
            else
            {
                x22_1 = &*s_3[1];
                s_3 = (x0_5 << 1);
            }
            if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
            {
                memcpy(x22_1, x21_2, x0_5);
            }
            *(x22_1 + x0_5) = 0;
            int32_t x20_5;
            if ((g3::logLevel(&var_1c8) & 1) == 0)
            {
                x20_5 = 0;
                if ((s_3 & 1) != 0)
                {
                label_23964:
                    operator delete(var_1b0_1);
                    if ((x20_5 & 1) == 0)
                    {
                        goto label_23ac4;
                    }
                    goto label_23aa4;
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                uint64_t x20_4 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_20 = strlen(x20_4);
                if (x0_20 < -0x10)
                {
                    goto label_23b28;
                }
                void* var_1d0_1;
                void* x22_3;
                if (x0_20 >= 0x17)
                {
                    uint64_t x23_2 = ((x0_20 + 0x10) & 0xfffffffffffffff0);
                    void* x0_30 = operator new(x23_2);
                    x22_3 = x0_30;
                    size_t var_1d8_1 = x0_20;
                    var_1d0_1 = x0_30;
                    s_2 = (x23_2 | 1);
                }
                else
                {
                    x22_3 = (&s_2 | 1);
                    s_2 = (x0_20 << 1);
                }
                if ((x0_20 >= 0x17 || (x0_20 < 0x17 && x0_20 != 0)))
                {
                    memcpy(x22_3, x20_4, x0_20);
                }
                *(x22_3 + x0_20) = 0;
                x20_5 = g3::logTag(&s_2);
                if ((s_2 & 1) != 0)
                {
                    operator delete(var_1d0_1);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_23964;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_23964;
                }
            }
            if ((x20_5 & 1) == 0)
            {
                goto label_23ac4;
            }
        label_23aa4:
            LogCapture::LogCapture(&var_1a0, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        label_23ac4:
            x0_35 = 0;
        }
    }
    else
    {
        if ((*data_57408 & 1) == 0)
        {
            x20_1 = &*(data_57408 + 1);
        }
        else
        {
            x20_1 = *(data_57412 + 6);
        }
        var_200 = data_57400;
        __builtin_memset(&s_1, 0, 0x18);
        x0_3 = strlen(x20_1);
        if (x0_3 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
    }
    char s;
    void* var_208;
    void* var_1e8;
    if ((((x0_1 & 0x80000000) == 0 && x0_3 < -0x10) || ((x0_1 & 0x80000000) != 0 && x0_5 < -0x10)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_23b20:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_23b28:
        int64_t x0_38 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
        int64_t x0_40 = _Unwind_Resume(x0_38);
        if ((s & 1) != 0)
        {
            operator delete(var_208);
        }
        if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
        {
            operator delete(var_1e8);
        }
        char* x0_44;
        int32_t x1_9;
        void** x8_25;
        x0_44 = _Unwind_Resume(x0_40);
        /* tailcall */
        return PuduCamera::MarkerCamera::readPhoto(x0_44, x1_9, x8_25);
    }
    if (((x0_1 & 0x80000000) == 0 && x0_3 >= -0x10))
    {
        void* x21_1;
        if (x0_3 >= 0x17)
        {
            uint64_t x22_2 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
            void* x0_7 = operator new(x22_2);
            x21_1 = x0_7;
            size_t var_1f0_1 = x0_3;
            var_1e8 = x0_7;
            s_1 = (x22_2 | 1);
        }
        else
        {
            x21_1 = &*s_1[1];
            s_1 = (x0_3 << 1);
        }
        if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
        {
            memcpy(x21_1, x20_1, x0_3);
        }
        *(x21_1 + x0_3) = 0;
        int32_t x19_4;
        if ((g3::logLevel(&var_200) & 1) == 0)
        {
            x19_4 = 0;
            if ((s_1 & 1) != 0)
            {
            label_238c0:
                operator delete(var_1e8);
                if ((x19_4 & 1) == 0)
                {
                    goto label_23a0c;
                }
                goto label_239ec;
            }
        }
        else
        {
            __builtin_memset(&s, 0, 0x18);
            uint64_t x19_3 = *PuduCamera::MarkerCamera::TAG;
            size_t x0_12 = strlen(x19_3);
            if (x0_12 < -0x10)
            {
                goto label_23b20;
            }
            void* x21_3;
            if (x0_12 >= 0x17)
            {
                uint64_t x22_4 = ((x0_12 + 0x10) & 0xfffffffffffffff0);
                void* x0_23 = operator new(x22_4);
                x21_3 = x0_23;
                size_t var_210_1 = x0_12;
                var_208 = x0_23;
                s = (x22_4 | 1);
            }
            else
            {
                x21_3 = (&s | 1);
                s = (x0_12 << 1);
            }
            if ((x0_12 >= 0x17 || (x0_12 < 0x17 && x0_12 != 0)))
            {
                memcpy(x21_3, x19_3, x0_12);
            }
            *(x21_3 + x0_12) = 0;
            x19_4 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                operator delete(var_208);
                if ((s_1 & 1) != 0)
                {
                    goto label_238c0;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_238c0;
            }
        }
        if ((x19_4 & 1) == 0)
        {
            goto label_23a0c;
        }
    label_239ec:
        LogCapture::LogCapture(&var_1a0, *PuduCamera::MarkerCamera::TAG, &data_57400, &data_3cde1, &nullptr->ident.version);
        LogCapture::capturef();
        LogCapture::~LogCapture();
    label_23a0c:
        int32_t var_1a4;
        x0_35 = var_1a4;
    }
    if ((((x0_1 & 0x80000000) != 0 && x0_5 >= -0x10) || ((x0_1 & 0x80000000) == 0 && x0_3 >= -0x10)))
    {
        if (*(x24 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_35;
    }
}

int64_t sub_23b30(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    char* x0_3;
    int32_t x1;
    void** x8_2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::readPhoto(x0_3, x1, x8_2);
}

int64_t sub_23b84(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    char* x0_2;
    int32_t x1;
    void** x8_1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::readPhoto(x0_2, x1, x8_1);
}

void** PuduCamera::MarkerCamera::readPhoto(char* arg1, int32_t arg2, void** arg3 @ x8)
{
    int64_t* x24;
    int64_t* var_40 = x24;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    void** x0_3;
    char var_240;
    void* var_230;
    void* var_220;
    int128_t var_1e0;
    void* var_1d0;
    int128_t s_4;
    void* var_70;
    if ((*arg1 & 1) != 0)
    {
        int128_t v1_1;
        int128_t v2_1;
        int128_t v3_1;
        x0_3 = PuduCamera::MarkerCamera::getCurImage(arg1);
        void* var_228;
        if (*(var_228 + 0x10) != 0)
        {
            uint64_t x9_2 = *(var_228 + 4);
            int64_t x12_1;
            if (x9_2 >= 3)
            {
                void* x10_3 = *(var_228 + 0x40);
                int64_t i_5;
                if (x9_2 != 3)
                {
                    i_5 = (x9_2 & 0xfffffffc);
                    v1_1 = 1;
                    *v1_1[8] = 1;
                    void* x12_2 = (x10_3 + 8);
                    int64_t i_3 = i_5;
                    int128_t v0_2 = v1_1;
                    int64_t i;
                    do
                    {
                        v2_1 = *(x12_2 - 8);
                        v3_1 = *x12_2;
                        /* unimplemented  {sxtl v0.2d, v2.2s} */;
                        /* unimplemented  {sxtl v1.2d, v3.2s} */;
                        x0_3 = v0_2;
                        int64_t x1_8 = v1_1;
                        int64_t x17_2 = (v0_2 * v1_1);
                        int64_t x14_2 = (v1_1 * x0_3);
                        v1_1 = (v1_1 * v0_2);
                        int64_t x15_3 = (v0_2 * x1_8);
                        v0_2 = x17_2;
                        i = i_3;
                        i_3 = (i_3 - 4);
                        *v1_1[8] = x14_2;
                        *v0_2[8] = x15_3;
                        x12_2 = (x12_2 + 0x10);
                    } while (i != 4);
                    x12_1 = ((v0_2 * v1_1) * (v0_2 * v1_1));
                }
                else
                {
                    i_5 = 0;
                    x12_1 = 1;
                }
                if ((x9_2 == 3 || (x9_2 != 3 && i_5 != x9_2)))
                {
                    int64_t i_4 = (x9_2 - i_5);
                    int32_t* x10_6 = (x10_3 + (i_5 << 2));
                    int64_t i_1;
                    do
                    {
                        int64_t x11_4 = *x10_6;
                        x10_6 = &x10_6[1];
                        i_1 = i_4;
                        i_4 = (i_4 - 1);
                        x12_1 = (x12_1 * x11_4);
                    } while (i_1 != 1);
                }
                if (x9_2 == 0)
                {
                    goto label_24020;
                }
            }
            else
            {
                x12_1 = (*(var_228 + 0xc) * *(var_228 + 8));
                if (x9_2 == 0)
                {
                    goto label_24020;
                }
            }
            if (x12_1 == 0)
            {
                goto label_24020;
            }
            int64_t var_228_1 = 0;
            int64_t var_220_1 = 0;
            *arg3 = var_228;
            arg3[1] = var_220;
        }
        else
        {
        label_24020:
            int32_t* x0_28 = __errno(x0_3);
            std::__ndk1::to_string(*x0_28);
            int128_t* s_5;
            int128_t v0_3;
            s_5 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&var_240, nullptr, "read camera fail, errno: ");
            var_70 = s_5[1];
            s_4 = *s_5;
            __builtin_memset(s_5, 0, 0x18);
            int128_t* s_6;
            int128_t v0_4;
            s_6 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_4, &data_3cddf);
            var_1d0 = s_6[1];
            var_1e0 = *s_6;
            __builtin_memset(s_6, 0, 0x18);
            char* x0_33 = strerror(*x0_28);
            strlen(x0_33);
            char* s_7 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_1e0, x0_33);
            int64_t x8_25 = *(s_7 + 8);
            int64_t x23_4 = *(s_7 + 0x10);
            int64_t x9_7 = *(s_7 + 1);
            char x22_5 = *s_7;
            __builtin_memset(s_7, 0, 0x18);
            void* x24_4;
            if ((arg1[0x48] & 1) == 0)
            {
                *(arg1 + 0x48) = 0;
                x24_4 = &arg1[0x58];
            }
            else
            {
                x24_4 = &arg1[0x58];
                **x24_4 = 0;
                uint32_t x8_28 = *(x24_4 - 0x10);
                *(x24_4 - 8) = 0;
                if ((x8_28 & 1) != 0)
                {
                    operator delete(*(arg1 + 0x58));
                    *(arg1 + 0x48) = 0;
                }
            }
            arg1[0x48] = x22_5;
            *(arg1 + 0x50) = x8_25;
            *(arg1 + 0x49) = x9_7;
            *x24_4 = x23_4;
            int64_t var_89_2 = 0;
            int64_t var_90_2 = 0;
            if ((var_1e0 & 1) != 0)
            {
                operator delete(var_1d0);
            }
            if ((((var_1e0 & 1) != 0 && (s_4 & 1) != 0) || ((var_1e0 & 1) == 0 && (s_4 & 1) != 0)))
            {
                operator delete(var_70);
                if ((var_240 & 1) != 0)
                {
                    goto label_24140;
                }
            }
            if (((((var_1e0 & 1) != 0 && (s_4 & 1) == 0) || ((var_1e0 & 1) == 0 && (s_4 & 1) == 0)) && (var_240 & 1) != 0))
            {
            label_24140:
                operator delete(var_230);
            }
            char* x23_5;
            if ((*data_57488 & 1) == 0)
            {
                x23_5 = &*(data_57488 + 1);
            }
            else
            {
                x23_5 = *(data_57492 + 6);
            }
            int32_t var_260 = data_57480;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_39 = strlen(x23_5);
            if (x0_39 < -0x10)
            {
                goto label_243fc;
            }
            void* var_248_1;
            void* x24_6;
            if (x0_39 >= 0x17)
            {
                uint64_t x25_1 = ((x0_39 + 0x10) & 0xfffffffffffffff0);
                void* x0_43 = operator new(x25_1);
                x24_6 = x0_43;
                size_t var_250_1 = x0_39;
                var_248_1 = x0_43;
                s_1 = (x25_1 | 1);
            }
            else
            {
                x24_6 = &*s_1[1];
                s_1 = (x0_39 << 1);
            }
            if ((x0_39 >= 0x17 || (x0_39 < 0x17 && x0_39 != 0)))
            {
                memcpy(x24_6, x23_5, x0_39);
            }
            *(x24_6 + x0_39) = 0;
            int32_t x22_8;
            if ((g3::logLevel(&var_260) & 1) == 0)
            {
                x22_8 = 0;
                if ((s_1 & 1) != 0)
                {
                label_242d0:
                    operator delete(var_248_1);
                    if ((x22_8 & 1) != 0)
                    {
                        goto label_24304;
                    }
                    goto label_2432c;
                }
            }
            else
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                uint64_t x22_7 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_48 = strlen(x22_7);
                if (x0_48 < -0x10)
                {
                    goto label_24414;
                }
                void* var_268_1;
                void* x24_7;
                if (x0_48 >= 0x17)
                {
                    uint64_t x25_2 = ((x0_48 + 0x10) & 0xfffffffffffffff0);
                    void* x0_50 = operator new(x25_2);
                    x24_7 = x0_50;
                    size_t var_270_1 = x0_48;
                    var_268_1 = x0_50;
                    s = (x25_2 | 1);
                }
                else
                {
                    x24_7 = (&s | 1);
                    s = (x0_48 << 1);
                }
                if ((x0_48 >= 0x17 || (x0_48 < 0x17 && x0_48 != 0)))
                {
                    memcpy(x24_7, x22_7, x0_48);
                }
                *(x24_7 + x0_48) = 0;
                x22_8 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    operator delete(var_268_1);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_242d0;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_242d0;
                }
            }
            if ((x22_8 & 1) == 0)
            {
                goto label_2432c;
            }
        label_24304:
            LogCapture::LogCapture(&var_1e0, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
            int32_t x0_58 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*var_1e0[8], "read camera fail, errno:", 0x18);
            *x0_28;
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_58);
            LogCapture::~LogCapture();
        label_2432c:
            *arg1 = 0;
            x0_3 = operator new(0x78);
            x0_3[2] = 0;
            *x0_3 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> > + 0x10);
            x0_3[1] = 0;
            x0_3[3] = 0x42ff0000;
            __builtin_memset((x0_3 + 0x1c), 0, 0x3c);
            x0_3[0xd] = 0;
            x0_3[0xb] = &x0_3[4];
            x0_3[0xc] = &x0_3[0xd];
            x0_3[0xe] = 0;
            *arg3 = &x0_3[3];
            arg3[1] = x0_3;
            if (var_220 != 0)
            {
                int64_t x8_48;
                int32_t i_2;
                do
                {
                    x8_48 = __ldaxr((var_220 + 8));
                    i_2 = __stlxr((x8_48 - 1), (var_220 + 8));
                } while (i_2 != 0);
                if (x8_48 == 0)
                {
                    *(*var_220 + 0x10)(var_220);
                    x0_3 = std::__ndk1::__shared_weak_count::__release_weak();
                }
            }
        }
    }
    else
    {
        char* x22_1;
        if ((*data_57488 & 1) == 0)
        {
            x22_1 = &*(data_57488 + 1);
        }
        else
        {
            x22_1 = *(data_57492 + 6);
        }
        int32_t var_200 = data_57480;
        int64_t s_3;
        __builtin_memset(&s_3, 0, 0x18);
        size_t x0_1 = strlen(x22_1);
        if (x0_1 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_243fc:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_24404:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2440c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_24414:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
            int64_t x0_62 = _Unwind_Resume();
            void* x20_3 = var_220;
            if (x20_3 != 0)
            {
                while (true)
                {
                    int64_t x9_12 = __ldaxr((x20_3 + 8));
                    if (__stlxr((x9_12 - 1), (x20_3 + 8)) == 0)
                    {
                        if (x9_12 != 0)
                        {
                            break;
                        }
                        *(*x20_3 + 0x10)(x20_3);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        _Unwind_Resume(x0_62);
                        operator delete(var_1d0);
                        if ((s_4 & 1) != 0)
                        {
                            operator delete(var_70);
                        }
                        if ((((s_4 & 1) == 0 && (var_240 & 1) != 0) || ((s_4 & 1) != 0 && (var_240 & 1) != 0)))
                        {
                            operator delete(var_230);
                        }
                        x20_3 = var_220;
                        if (x20_3 == 0)
                        {
                            break;
                        }
                    }
                }
            }
            while (true)
            {
                _Unwind_Resume(x0_62);
                *var_1e0[8] = x20_3;
                operator delete(x20_3);
                _Unwind_Resume(x0_62);
            }
        }
        else
        {
            void* var_1e8_1;
            void* x23_1;
            if (x0_1 >= 0x17)
            {
                uint64_t x24_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_5 = operator new(x24_1);
                x23_1 = x0_5;
                size_t var_1f0_1 = x0_1;
                var_1e8_1 = x0_5;
                s_3 = (x24_1 | 1);
            }
            else
            {
                x23_1 = &*s_3[1];
                s_3 = (x0_1 << 1);
            }
            if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
            {
                memcpy(x23_1, x22_1, x0_1);
            }
            *(x23_1 + x0_1) = 0;
            int32_t x0_8;
            int128_t v0_1;
            x0_8 = g3::logLevel(&var_200);
            int32_t x21_3;
            if ((x0_8 & 1) == 0)
            {
                x21_3 = 0;
                if ((s_3 & 1) != 0)
                {
                label_23dac:
                    operator delete(var_1e8_1);
                    if ((x21_3 & 1) != 0)
                    {
                        goto label_23de0;
                    }
                    goto label_23e04;
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                uint64_t x21_2 = *PuduCamera::MarkerCamera::TAG;
                size_t x0_10 = strlen(x21_2);
                if (x0_10 < -0x10)
                {
                    goto label_24404;
                }
                void* var_208_1;
                void* x23_2;
                if (x0_10 >= 0x17)
                {
                    uint64_t x24_2 = ((x0_10 + 0x10) & 0xfffffffffffffff0);
                    void* x0_12 = operator new(x24_2);
                    x23_2 = x0_12;
                    size_t var_210_1 = x0_10;
                    var_208_1 = x0_12;
                    s_2 = (x24_2 | 1);
                }
                else
                {
                    x23_2 = (&s_2 | 1);
                    s_2 = (x0_10 << 1);
                }
                if ((x0_10 >= 0x17 || (x0_10 < 0x17 && x0_10 != 0)))
                {
                    memcpy(x23_2, x21_2, x0_10);
                }
                *(x23_2 + x0_10) = 0;
                int32_t x0_15;
                x0_15 = g3::logTag(&s_2);
                x21_3 = x0_15;
                if ((s_2 & 1) != 0)
                {
                    operator delete(var_208_1);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_23dac;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_23dac;
                }
            }
            if ((x21_3 & 1) == 0)
            {
                goto label_23e04;
            }
        label_23de0:
            LogCapture::LogCapture(&var_1e0, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*var_1e0[8], "camera is not opened, try reopen", 0x20);
            LogCapture::~LogCapture();
        label_23e04:
            __builtin_memset(&s_4, 0, 0x18);
            if ((arg1[0x30] & 1) != 0)
            {
                size_t x21_4 = *(arg1 + 0x38);
                if (x21_4 < -0x10)
                {
                    goto label_2440c;
                }
                int64_t x22_3 = *(arg1 + 0x40);
                void* x23_3;
                if (x21_4 >= 0x17)
                {
                    uint64_t x24_3 = ((x21_4 + 0x10) & 0xfffffffffffffff0);
                    void* x0_21 = operator new(x24_3);
                    x23_3 = x0_21;
                    *s_4[8] = x21_4;
                    var_70 = x0_21;
                    s_4 = (x24_3 | 1);
                }
                else
                {
                    x23_3 = (&s_4 | 1);
                    s_4 = (x21_4 << 1);
                }
                if ((x21_4 >= 0x17 || (x21_4 < 0x17 && x21_4 != 0)))
                {
                    memcpy(x23_3, x22_3, x21_4);
                }
                *(x23_3 + x21_4) = 0;
                goto label_23e98;
            }
            var_70 = *(arg1 + 0x40);
            s_4 = *(arg1 + 0x30);
        label_23e98:
            sub_1b4b0(&var_1e0, &s_4, 1);
            if ((s_4 & 1) != 0)
            {
                operator delete(var_70);
            }
            PuduCamera::MarkerCamera::openCamera(arg1, &var_1e0);
            x0_3 = operator new(0x78);
            x0_3[2] = 0;
            void* x20_1 = var_1e0;
            *x0_3 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> > + 0x10);
            x0_3[1] = 0;
            x0_3[3] = 0x42ff0000;
            __builtin_memset((x0_3 + 0x1c), 0, 0x3c);
            x0_3[0xd] = 0;
            x0_3[0xb] = &x0_3[4];
            x0_3[0xc] = &x0_3[0xd];
            x0_3[0xe] = 0;
            *arg3 = &x0_3[3];
            arg3[1] = x0_3;
            if (x20_1 != 0)
            {
                char* x8_22 = *var_1e0[8];
                void* x0_27;
                if (x8_22 == x20_1)
                {
                    x0_27 = x20_1;
                }
                else
                {
                    char* x19_1 = x8_22;
                    do
                    {
                        x19_1 = &x19_1[-0x18];
                        if ((*x19_1 & 1) != 0)
                        {
                            operator delete(*(x8_22 - 8));
                        }
                        x8_22 = x19_1;
                    } while (x20_1 != x19_1);
                    x0_27 = var_1e0;
                }
                *var_1e0[8] = x20_1;
                x0_3 = operator delete(x0_27);
            }
        }
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_3;
}

void sub_24420(int64_t arg1, void* arg2 @ x29, char arg3, void* arg4, char arg5, void* arg6, char arg7, void* arg8, int64_t* arg9, void* arg10) __noreturn
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
        if ((arg5 & 1) == 0)
        {
            goto label_24538;
        }
    }
    else if ((arg5 & 1) == 0)
    {
        goto label_24538;
    }
    operator delete(arg6);
    int64_t* x20_1 = arg9;
    if (x20_1 != 0)
    {
        while (true)
        {
            int64_t x9_1 = __ldaxr(&x20_1[1]);
            if (__stlxr((x9_1 - 1), &x20_1[1]) == 0)
            {
                if (x9_1 != 0)
                {
                    break;
                }
                *(*x20_1 + 0x10)(x20_1);
                std::__ndk1::__shared_weak_count::__release_weak();
                _Unwind_Resume(arg1);
                operator delete(arg10);
                if ((*(arg2 - 0x70) & 1) != 0)
                {
                    operator delete(*(arg2 - 0x60));
                }
                if ((((*(arg2 - 0x70) & 1) == 0 && (arg7 & 1) != 0) || ((*(arg2 - 0x70) & 1) != 0 && (arg7 & 1) != 0)))
                {
                    operator delete(arg8);
                }
            label_24538:
                x20_1 = arg9;
                if (x20_1 == 0)
                {
                    break;
                }
            }
        }
    }
    while (true)
    {
        _Unwind_Resume(arg1);
        arg_a8 = x20_1;
        operator delete(x20_1);
        _Unwind_Resume(arg1);
    }
}

void sub_24450(int64_t arg1, void* arg2 @ x20, void* arg3 @ x29, char arg4, void* arg5, void* arg6, char arg7, void* arg8, char arg9, void* arg10, char arg11, void* arg12) __noreturn
{
    int64_t x19 = arg1;
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    if ((((arg7 & 1) == 0 && (arg9 & 1) != 0) || ((arg7 & 1) != 0 && (arg9 & 1) != 0)))
    {
        operator delete(arg10);
        x19 = _Unwind_Resume(x19);
        if ((arg11 & 1) != 0)
        {
            goto label_2457c;
        }
        if ((*(arg3 - 0x70) & 1) != 0)
        {
            goto label_2458c;
        }
        do
        {
            if ((arg4 & 1) != 0)
            {
                goto label_24534;
            }
            while (true)
            {
                arg2 = arg6;
                if (arg2 == 0)
                {
                    break;
                }
                int64_t x9_1;
                int32_t j;
                do
                {
                    x9_1 = __ldaxr((arg2 + 8));
                    j = __stlxr((x9_1 - 1), (arg2 + 8));
                } while (j != 0);
                if (x9_1 != 0)
                {
                    break;
                }
                *(*arg2 + 0x10)(arg2);
                std::__ndk1::__shared_weak_count::__release_weak();
                _Unwind_Resume(x19);
            label_2457c:
                operator delete(arg12);
                if ((*(arg3 - 0x70) & 1) == 0)
                {
                    break;
                }
            label_2458c:
                operator delete(*(arg3 - 0x60));
                if ((arg4 & 1) != 0)
                {
                label_24534:
                    operator delete(arg5);
                }
            }
        } while (arg2 != 0);
    }
    while (true)
    {
        _Unwind_Resume(x19);
        arg_a8 = arg2;
        operator delete(arg2);
        _Unwind_Resume(x19);
    }
}

void sub_244ac(int64_t arg1, void* arg2 @ x29, char arg3, void* arg4, char arg5, void* arg6, void* arg7, void* arg8) __noreturn
{
    void* x20_1;
    if ((arg3 & 1) == 0)
    {
        while (true)
        {
            x20_1 = arg7;
            if (x20_1 == 0)
            {
                break;
            }
        label_24544:
            int64_t x9_1 = __ldaxr((x20_1 + 8));
            if (__stlxr((x9_1 - 1), (x20_1 + 8)) != 0)
            {
                break;
            }
            if (x9_1 != 0)
            {
                break;
            }
            *(*x20_1 + 0x10)(x20_1);
            std::__ndk1::__shared_weak_count::__release_weak();
            _Unwind_Resume(arg1);
            operator delete(arg8);
            if (((*(arg2 - 0x70) & 1) == 0 && (arg5 & 1) == 0))
            {
                continue;
            }
            if ((*(arg2 - 0x70) & 1) != 0)
            {
                operator delete(*(arg2 - 0x60));
                if ((arg5 & 1) == 0)
                {
                    continue;
                }
            }
            operator delete(arg6);
        }
    }
    else
    {
        operator delete(arg4);
        x20_1 = arg7;
        if (x20_1 != 0)
        {
            goto label_24544;
        }
    }
    while (true)
    {
        _Unwind_Resume(arg1);
        arg_a8 = x20_1;
        operator delete(x20_1);
        _Unwind_Resume(arg1);
    }
}

void sub_244f8(int64_t arg1, int64_t* arg2 @ x20, void* arg3 @ x29, char arg4, void* arg5, int64_t* arg6, char arg7, void* arg8, char arg9, void* arg10) __noreturn
{
    int64_t x19 = arg1;
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
        x19 = _Unwind_Resume(x19);
        if ((arg9 & 1) != 0)
        {
            goto label_2457c;
        }
        if ((*(arg3 - 0x70) & 1) != 0)
        {
            goto label_2458c;
        }
        do
        {
            if ((arg4 & 1) != 0)
            {
                goto label_24534;
            }
            while (true)
            {
                arg2 = arg6;
                if (arg2 == 0)
                {
                    break;
                }
                int64_t x9_1;
                int32_t j;
                do
                {
                    x9_1 = __ldaxr(&arg2[1]);
                    j = __stlxr((x9_1 - 1), &arg2[1]);
                } while (j != 0);
                if (x9_1 != 0)
                {
                    break;
                }
                *(*arg2 + 0x10)(arg2);
                std::__ndk1::__shared_weak_count::__release_weak();
                _Unwind_Resume(x19);
            label_2457c:
                operator delete(arg10);
                if ((*(arg3 - 0x70) & 1) == 0)
                {
                    break;
                }
            label_2458c:
                operator delete(*(arg3 - 0x60));
                if ((arg4 & 1) != 0)
                {
                label_24534:
                    operator delete(arg5);
                }
            }
        } while (arg2 != 0);
    }
    while (true)
    {
        _Unwind_Resume(x19);
        arg_a8 = arg2;
        operator delete(arg2);
        _Unwind_Resume(x19);
    }
}

void** PuduCamera::MarkerCamera::getCurImage(char* arg1, void** arg2 @ x8)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x24 + 0x28);
    uint32_t x9_1 = *arg1;
    int32_t var_1c0;
    int64_t s_3;
    int128_t var_1a0;
    size_t x0_1;
    int32_t x0_3;
    void** x0_34;
    char* x21;
    if ((x9_1 & 1) != 0)
    {
        x0_3 = *(**(arg1 + 0x18) + 0x20)();
        if ((x0_3 & 1) != 0)
        {
            void* x0_5 = *(**(arg1 + 0x18) + 0x28)();
            int64_t* x0_6 = operator new(0x78);
            x0_6[2] = 0;
            *x0_6 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> > + 0x10);
            x0_6[1] = 0;
            x0_6[3] = 0x42ff0000;
            __builtin_memset((x0_6 + 0x1c), 0, 0x3c);
            x0_6[0xd] = 0;
            x0_6[0xe] = 0;
            x0_6[0xb] = &x0_6[4];
            x0_6[0xc] = &x0_6[0xd];
            *arg2 = &x0_6[3];
            arg2[1] = x0_6;
            int128_t v0_1;
            int128_t v1_1;
            int128_t v2_1;
            int128_t v3_1;
            v0_1 = cv::cvarrToMat(x0_5, false, true, 0, nullptr);
            int64_t x8_8 = x0_6[0xa];
            if (x8_8 != 0)
            {
                int32_t temp0_1;
                int32_t i;
                do
                {
                    temp0_1 = __ldaxr((x8_8 + 0x14));
                    i = __stlxr((temp0_1 - 1), (x8_8 + 0x14));
                } while (i != 0);
                if (temp0_1 == 1)
                {
                    v0_1 = cv::Mat::deallocate();
                }
            }
            int32_t x8_10 = *(x0_6 + 0x1c);
            v0_1 = 0;
            *v0_1[8] = 0;
            x0_6[0xa] = 0;
            __builtin_memset(&x0_6[5], 0, 0x20);
            if (x8_10 >= 1)
            {
                int64_t x8_11 = x0_6[0xb];
                int64_t i_1 = 0;
                do
                {
                    *(x8_11 + (i_1 << 2)) = 0;
                    i_1 = (i_1 + 1);
                } while (i_1 < *(x0_6 + 0x1c));
            }
            void* x0_9 = x0_6[0xc];
            v0_1 = var_1a0;
            *(x0_6 + 0x18) = v0_1;
            int128_t var_190;
            *(x0_6 + 0x28) = var_190;
            int128_t var_180;
            *(x0_6 + 0x38) = var_180;
            int128_t var_170;
            *(x0_6 + 0x48) = var_170;
            int32_t x8_12;
            if (x0_9 == &x0_6[0xd])
            {
                x8_12 = v0_1;
            }
            else
            {
                cv::fastFree(x0_9);
                x8_12 = *var_1a0[4];
                x0_9 = &x0_6[0xd];
                x0_6[0xb] = &x0_6[4];
                x0_6[0xc] = &x0_6[0xd];
            }
            int128_t var_160;
            void var_150;
            if (x8_12 > 2)
            {
                v0_1 = var_160;
                var_160 = (&var_1a0 | 8);
                *var_160[8] = &var_150;
                *(x0_6 + 0x58) = v0_1;
            }
            else
            {
                int64_t* x9_8 = *var_160[8];
                *x0_9 = *x9_8;
                *(x0_9 + 8) = x9_8[1];
            }
            var_1a0 = 0x42ff0000;
            __builtin_memset((&var_1a0 | 4), 0, 0x34);
            int32_t x8_28 = *var_1a0[4];
            *var_170[8] = 0;
            int128_t s_4;
            __builtin_memset(&s_4, 0, 0x20);
            if (x8_28 >= 1)
            {
                int64_t i_2 = 0;
                do
                {
                    *(var_160 + (i_2 << 2)) = 0;
                    i_2 = (i_2 + 1);
                } while (i_2 < *var_1a0[4]);
            }
            x0_34 = *var_160[8];
            if (x0_34 != &var_150)
            {
                x0_34 = cv::fastFree(x0_34);
            }
        }
        else
        {
            char* x21_5;
            if ((*data_57488 & 1) == 0)
            {
                x21_5 = &*(data_57488 + 1);
            }
            else
            {
                x21_5 = *(data_57492 + 6);
            }
            int32_t var_1f8 = data_57480;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_11 = strlen(x21_5);
            if (x0_11 >= -0x10)
            {
                void* var_1e0_1;
                void* x22_3;
                if (x0_11 >= 0x17)
                {
                    uint64_t x23_2 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
                    void* x0_20 = operator new(x23_2);
                    x22_3 = x0_20;
                    size_t var_1e8_1 = x0_11;
                    var_1e0_1 = x0_20;
                    s_1 = (x23_2 | 1);
                }
                else
                {
                    x22_3 = &*s_1[1];
                    s_1 = (x0_11 << 1);
                }
                if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
                {
                    memcpy(x22_3, x21_5, x0_11);
                }
                *(x22_3 + x0_11) = 0;
                int32_t x20_7;
                if ((g3::logLevel(&var_1f8) & 1) == 0)
                {
                    x20_7 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_24b34:
                        operator delete(var_1e0_1);
                        if ((x20_7 & 1) == 0)
                        {
                            goto label_24b84;
                        }
                        goto label_24b64;
                    }
                }
                else
                {
                    int64_t s;
                    __builtin_memset(&s, 0, 0x18);
                    uint64_t x20_6 = *PuduCamera::MarkerCamera::TAG;
                    size_t x0_25 = strlen(x20_6);
                    if (x0_25 < -0x10)
                    {
                        goto label_24c1c;
                    }
                    void* var_200_1;
                    void* x22_5;
                    if (x0_25 >= 0x17)
                    {
                        uint64_t x23_4 = ((x0_25 + 0x10) & 0xfffffffffffffff0);
                        void* x0_36 = operator new(x23_4);
                        x22_5 = x0_36;
                        size_t var_208_1 = x0_25;
                        var_200_1 = x0_36;
                        s = (x23_4 | 1);
                    }
                    else
                    {
                        x22_5 = (&s | 1);
                        s = (x0_25 << 1);
                    }
                    if ((x0_25 >= 0x17 || (x0_25 < 0x17 && x0_25 != 0)))
                    {
                        memcpy(x22_5, x20_6, x0_25);
                    }
                    *(x22_5 + x0_25) = 0;
                    x20_7 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        operator delete(var_200_1);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_24b34;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_24b34;
                    }
                }
                if ((x20_7 & 1) == 0)
                {
                    goto label_24b84;
                }
            label_24b64:
                LogCapture::LogCapture(&var_1a0, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
                LogCapture::capturef();
                goto label_24b7c;
            }
        }
    }
    else
    {
        if ((*data_57488 & 1) == 0)
        {
            x21 = &*(data_57488 + 1);
        }
        else
        {
            x21 = *(data_57492 + 6);
        }
        var_1c0 = data_57480;
        __builtin_memset(&s_3, 0, 0x18);
        x0_1 = strlen(x21);
    }
    char s_2;
    void* var_1c8;
    void* var_1a8;
    if ((((x9_1 & 1) == 0 && x0_1 < -0x10) || ((x9_1 & 1) != 0 && (x0_3 & 1) == 0)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_24c14:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_24c1c:
        int64_t x0_44 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
        int64_t x0_46 = _Unwind_Resume(x0_44);
        if ((s_2 & 1) != 0)
        {
            operator delete(var_1c8);
        }
        if ((((s_2 & 1) == 0 && (s_3 & 1) != 0) || ((s_2 & 1) != 0 && (s_3 & 1) != 0)))
        {
            operator delete(var_1a8);
        }
        /* tailcall */
        return PuduCamera::MarkerCamera::getCameraParam(_Unwind_Resume(x0_46));
    }
    if (((x9_1 & 1) == 0 && x0_1 >= -0x10))
    {
        void* x22_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x23_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_13 = operator new(x23_1);
            x22_1 = x0_13;
            size_t var_1b0_1 = x0_1;
            var_1a8 = x0_13;
            s_3 = (x23_1 | 1);
        }
        else
        {
            x22_1 = &*s_3[1];
            s_3 = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x22_1, x21, x0_1);
        }
        *(x22_1 + x0_1) = 0;
        int32_t x20_5;
        if ((g3::logLevel(&var_1c0) & 1) == 0)
        {
            x20_5 = 0;
            if ((s_3 & 1) != 0)
            {
            label_249dc:
                operator delete(var_1a8);
                if ((x20_5 & 1) != 0)
                {
                    goto label_24a0c;
                }
                goto label_24b84;
            }
        }
        else
        {
            __builtin_memset(&s_2, 0, 0x18);
            uint64_t x20_4 = *PuduCamera::MarkerCamera::TAG;
            size_t x0_18 = strlen(x20_4);
            if (x0_18 < -0x10)
            {
                goto label_24c14;
            }
            void* x22_4;
            if (x0_18 >= 0x17)
            {
                uint64_t x23_3 = ((x0_18 + 0x10) & 0xfffffffffffffff0);
                void* x0_27 = operator new(x23_3);
                x22_4 = x0_27;
                size_t var_1d0_1 = x0_18;
                var_1c8 = x0_27;
                s_2 = (x23_3 | 1);
            }
            else
            {
                x22_4 = (&s_2 | 1);
                s_2 = (x0_18 << 1);
            }
            if ((x0_18 >= 0x17 || (x0_18 < 0x17 && x0_18 != 0)))
            {
                memcpy(x22_4, x20_4, x0_18);
            }
            *(x22_4 + x0_18) = 0;
            x20_5 = g3::logTag(&s_2);
            if ((s_2 & 1) != 0)
            {
                operator delete(var_1c8);
                if ((s_3 & 1) != 0)
                {
                    goto label_249dc;
                }
            }
            else if ((s_3 & 1) != 0)
            {
                goto label_249dc;
            }
        }
        if ((x20_5 & 1) == 0)
        {
            goto label_24b84;
        }
    label_24a0c:
        LogCapture::LogCapture(&var_1a0, *PuduCamera::MarkerCamera::TAG, &data_57480, &data_3cde1, &nullptr->ident.version);
        LogCapture::capturef();
    label_24b7c:
        LogCapture::~LogCapture();
    label_24b84:
        x0_34 = operator new(0x78);
        x0_34[2] = 0;
        *x0_34 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> > + 0x10);
        x0_34[1] = 0;
        x0_34[3] = 0x42ff0000;
        x0_34[0xb] = &x0_34[4];
        __builtin_memset((x0_34 + 0x1c), 0, 0x3c);
        x0_34[0xd] = 0;
        x0_34[0xe] = 0;
        x0_34[0xc] = &x0_34[0xd];
        *arg2 = &x0_34[3];
        arg2[1] = x0_34;
    }
    if ((((x9_1 & 1) != 0 && (x0_3 & 1) != 0) || ((x9_1 & 1) == 0 && x0_1 >= -0x10)))
    {
        if (*(x24 + 0x28) != x9)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_34;
    }
}

int64_t sub_24c24(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    /* tailcall */
    return PuduCamera::MarkerCamera::getCameraParam(_Unwind_Resume(arg1));
}

void sub_24c44(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t PuduCamera::MarkerCamera::getCameraParam(int64_t arg1) __pure
{
    return (arg1 + 4);
}

void PuduCamera::MarkerCamera::getLastError(int64_t arg1, int32_t arg2, int64_t* arg3 @ x8)
{
    char* x19 = arg3;
    *arg3 = 0;
    arg3[1] = 0;
    *x19 = 0x1a;
    int64_t* i = data_575b8;
    *(x19 + 0x10) = 0;
    __builtin_strncpy(&x19[1], "unknown error", 0xe);
    if (i != 0)
    {
        int64_t* i_1 = &data_575b8;
        do
        {
            int32_t x11_1 = i[4];
            int32_t x11_2;
            if (x11_1 < arg2)
            {
                x11_2 = 1;
            }
            else
            {
                x11_2 = 0;
            }
            if (x11_1 >= arg2)
            {
                i_1 = i;
            }
            i = i[x11_2];
        } while (i != 0);
        if ((i_1 != &data_575b8 && (i_1[4] <= arg2 && &i_1[5] != x19)))
        {
            uint64_t x1;
            if ((i_1[5] & 1) != 0)
            {
                x1 = *(i_1[6] + 0x38);
            }
            else
            {
                x1 = (i_1 + 0x29);
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(x19, x1);
        }
    }
}

int64_t sub_24e30(int64_t arg1, char* arg2 @ x19)
{
    if ((*arg2 & 1) != 0)
    {
        operator delete(*(arg2 + 0x10));
    }
    void* x0_2;
    int128_t* x8;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return PuduCamera::MarkerCamera::getLastReadingError(x0_2, x8);
}

void PuduCamera::MarkerCamera::getLastReadingError(void* arg1, int128_t* arg2 @ x8)
{
    __builtin_memset(arg2, 0, 0x18);
    if ((*(arg1 + 0x48) & 1) == 0)
    {
        arg2[1] = *(arg1 + 0x58);
        *arg2 = *(arg1 + 0x48);
    }
    else
    {
        size_t x20_1 = *(arg1 + 0x50);
        if (x20_1 < -0x10)
        {
            void** x0_4;
            char* x1_2;
            int32_t x2_2;
            x0_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return sub_24efc(x0_4, x1_2, x2_2);
        }
        int64_t x21_1 = *(arg1 + 0x58);
        void* x19_1;
        if (x20_1 >= 0x17)
        {
            uint64_t x22_1 = ((x20_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x22_1);
            *(arg2 + 8) = x20_1;
            arg2[1] = x0_1;
            *arg2 = (x22_1 | 1);
            x19_1 = x0_1;
        }
        else
        {
            *arg2 = (x20_1 << 1);
            x19_1 = (arg2 + 1);
        }
        if ((x20_1 >= 0x17 || (x20_1 < 0x17 && x20_1 != 0)))
        {
            memcpy(x19_1, x21_1, x20_1);
        }
        *(x19_1 + x20_1) = 0;
    }
}

int64_t sub_24efc(void** arg1, char* arg2, int32_t arg3)
{
    int128_t v0;
    v0 = 0;
    *v0[8] = 0;
    int128_t* x20 = arg1;
    v0 = (construction_vtable_for_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x17] = (construction_vtable_for_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    *x20 = v0;
    std::__ndk1::ios_base::init(&arg1[0x17]);
    arg1[0x28] = 0;
    arg1[0x29] = 0xffffffff;
    *arg1 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x17] = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf();
    uint32_t x1_1;
    if ((*arg2 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = (arg2 + 1);
    }
    int64_t x0_3 = std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::open(&x20[1], x1_1);
    if (x0_3 == 0)
    {
        void* x0_4 = (arg1 + *(*arg1 - 0x18));
        *(x0_4 + 0x20);
        x0_3 = std::__ndk1::ios_base::clear(x0_4);
    }
    return x0_3;
}

int64_t sub_24fc8(int64_t arg1)
{
    std::__ndk1::ios_base::~ios_base();
    char* x0_1;
    char* x1;
    char* x8;
    x0_1 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(x0_1, x1, x8);
}

int64_t std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(char* arg1, char* arg2, char* arg3 @ x8)
{
    __builtin_memset(arg3, 0, 0x18);
    uint64_t x26 = *arg2;
    uint64_t x8 = *arg1;
    uint64_t x21;
    if ((x26 & 1) == 0)
    {
        x21 = (x26 >> 1);
    }
    else
    {
        x21 = *(arg2 + 8);
    }
    int32_t temp0 = (x8 & 1);
    uint64_t x22;
    if (temp0 == 0)
    {
        x22 = (x8 >> 1);
    }
    else
    {
        x22 = *(arg1 + 8);
    }
    uint64_t x8_1 = (x21 + x22);
    void* x23;
    if (temp0 != 0)
    {
        x23 = *(arg1 + 0x10);
    }
    else
    {
        x23 = &arg1[1];
    }
    if (x8_1 < -0x10)
    {
        int64_t x0_6 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        if ((*arg3 & 1) != 0)
        {
            operator delete(*(arg3 + 0x10));
        }
        /* tailcall */
        return std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream(_Unwind_Resume(x0_6));
    }
    void* x24_1;
    if (x8_1 > 0x16)
    {
        uint64_t x25_1 = ((x8_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_4 = operator new(x25_1);
        x24_1 = x0_4;
        *(arg3 + 8) = x22;
        *(arg3 + 0x10) = x0_4;
        *arg3 = (x25_1 | 1);
    }
    else
    {
        char* x24 = arg3;
        *x24 = (x22 << 1);
        x24_1 = &x24[1];
    }
    if (((x8_1 > 0x16 && x22 != 0) || (x8_1 <= 0x16 && x22 != 0)))
    {
        memcpy(x24_1, x23, x22);
    }
    *(x24_1 + x22) = 0;
    void* x1_1;
    if ((x26 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg3, x1_1);
}

int64_t std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x17] = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_ostringstream(void** arg1)
{
    uint32_t x10 = arg1[9];
    arg1[0xe] = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    *arg1 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg1[1] = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((x10 & 1) != 0)
    {
        operator delete(arg1[0xb]);
    }
    arg1[1] = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

void std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
    if ((arg2[5] & 1) != 0)
    {
        operator delete(arg2[7]);
    }
    /* tailcall */
    return operator delete(arg2);
}

int64_t non-virtual_thunk_to_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >::~basic_fstream()(void** arg1)
{
    arg1[-2] = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x16] = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x68);
    *arg1 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t virtual_thunk_to_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >::~basic_fstream()(int64_t* arg1)
{
    void* x8_2 = (arg1 + *(*arg1 - 0x18));
    *x8_2 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(x8_2 + 0xc0) = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x68);
    *(x8_2 + 0x10) = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::~basic_istream(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::~basic_istream(void* arg1)
{
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t virtual_thunk_to_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::~basic_istream()(int64_t* arg1)
{
    *(*arg1 - 0x18);
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t virtual_thunk_to_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::~basic_istream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::~basic_ostream(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::~basic_ostream(void* arg1)
{
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t virtual_thunk_to_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::~basic_ostream()(int64_t* arg1)
{
    *(*arg1 - 0x18);
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t virtual_thunk_to_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::~basic_ostream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >::~basic_fstream(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x18] = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x68);
    arg1[2] = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t non-virtual_thunk_to_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >::~basic_fstream()(void** arg1)
{
    arg1[-2] = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x16] = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x68);
    *arg1 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(&arg1[-2]);
}

int64_t virtual_thunk_to_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> >::~basic_fstream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    *x19 = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(x19 + 0xc0) = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x68);
    *(x19 + 0x10) = (_vtable_for_std::__ndk1::basic_fstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf(void** arg1)
{
    FILE* x20 = arg1[0xf];
    *arg1 = (_vtable_for_std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> > + 0x10);
    if (x20 != 0)
    {
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::sync();
        if (fclose(x20) == 0)
        {
            arg1[0xf] = 0;
        }
        *(*arg1 + 0x18)(arg1, 0, 0);
    }
    if (arg1[0x14] != 0)
    {
        void* x0_4 = arg1[8];
        if (x0_4 != 0)
        {
            operator delete[](x0_4);
        }
    }
    if (*(arg1 + 0xa1) != 0)
    {
        void* x0_5 = arg1[0xd];
        if (x0_5 != 0)
        {
            operator delete[](x0_5);
        }
    }
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t sub_25518(void* arg1, int64_t* arg2 @ x19, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7)
{
    __cxa_begin_catch(arg1);
    __cxa_end_catch();
    if (arg2[0x14] != 0)
    {
        void* x0_1 = arg2[8];
        if (x0_1 != 0)
        {
            operator delete[](x0_1);
        }
    }
    if (*(arg2 + 0xa1) != 0)
    {
        void* x0_2 = arg2[0xd];
        if (x0_2 != 0)
        {
            operator delete[](x0_2);
        }
    }
    *arg2 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t sub_25520(void* arg1, int64_t* arg2 @ x19, FILE* arg3 @ x20, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8)
{
    fclose(arg3);
    __cxa_begin_catch(arg1);
    __cxa_end_catch();
    if (arg2[0x14] != 0)
    {
        void* x0_2 = arg2[8];
        if (x0_2 != 0)
        {
            operator delete[](x0_2);
        }
    }
    if (*(arg2 + 0xa1) != 0)
    {
        void* x0_3 = arg2[0xd];
        if (x0_3 != 0)
        {
            operator delete[](x0_3);
        }
    }
    *arg2 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

void sub_2553c(void* arg1) __noreturn
{
    std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf();
    sub_1908c(arg1);
    /* no return */
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf(void* arg1)
{
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return operator delete(arg1);
}

void* std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::imbue(int64_t* arg1, std::__ndk1::fpos<mbstate_t>* arg2)
{
    *(*arg1 + 0x30)();
    int64_t* x0_1 = std::__ndk1::locale::use_facet(arg2);
    arg1[0x10] = x0_1;
    uint32_t x20_1 = *(arg1 + 0xa2);
    void* x0_2 = *(*x0_1 + 0x38)();
    int32_t x8_4 = (x0_2 & 1);
    *(arg1 + 0xa2) = x8_4;
    if (x20_1 != x8_4)
    {
        uint32_t x8_5 = arg1[0x14];
        __builtin_memset(&arg1[2], 0, 0x30);
        if ((x0_2 & 1) == 0)
        {
            int64_t x8_7;
            if (x8_5 == 0)
            {
                x8_7 = arg1[8];
                if (x8_7 != &arg1[0xb])
                {
                    uint64_t x0_4 = arg1[0xc];
                    *(arg1 + 0xa1) = 0;
                    arg1[0xd] = x8_7;
                    arg1[0xe] = x0_4;
                    x0_2 = operator new[](x0_4);
                    arg1[8] = x0_2;
                    arg1[0x14] = 1;
                }
            }
            if ((x8_5 != 0 || (x8_5 == 0 && x8_7 == &arg1[0xb])))
            {
                uint64_t x0_3 = arg1[0xc];
                arg1[0xe] = x0_3;
                x0_2 = operator new[](x0_3);
                arg1[0xd] = x0_2;
                *(arg1 + 0xa1) = 1;
            }
        }
        else
        {
            if (x8_5 != 0)
            {
                x0_2 = arg1[8];
                if (x0_2 != 0)
                {
                    x0_2 = operator delete[](x0_2);
                }
            }
            char x8_6 = *(arg1 + 0xa1);
            int64_t x9_1 = arg1[0xd];
            int64_t x10_1 = arg1[0xe];
            *(arg1 + 0xa1) = 0;
            arg1[0xe] = 0;
            arg1[0x14] = x8_6;
            arg1[0xc] = x10_1;
            arg1[0xd] = 0;
            arg1[8] = x9_1;
        }
    }
    return x0_2;
}

void* std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::setbuf(void* arg1, int64_t arg2, uint64_t arg3)
{
    uint32_t x8 = *(arg1 + 0xa0);
    __builtin_memset((arg1 + 0x10), 0, 0x30);
    if (x8 != 0)
    {
        void* x0 = *(arg1 + 0x40);
        if (x0 != 0)
        {
            operator delete[](x0);
        }
    }
    if (*(arg1 + 0xa1) != 0)
    {
        void* x0_1 = *(arg1 + 0x68);
        if (x0_1 != 0)
        {
            operator delete[](x0_1);
        }
    }
    *(arg1 + 0x60) = arg3;
    uint32_t x22;
    if (arg3 >= 9)
    {
        x22 = *(arg1 + 0xa2);
        if ((arg2 == 0 || (arg2 != 0 && x22 == 0)))
        {
            *(arg1 + 0x40) = operator new[](arg3);
            *(arg1 + 0xa0) = 1;
            if (x22 != 0)
            {
                goto label_256f4;
            }
        }
        if ((arg2 != 0 && x22 != 0))
        {
            *(arg1 + 0x40) = arg2;
            *(arg1 + 0xa0) = 0;
        label_256f4:
            *(arg1 + 0xa1) = 0;
            *(arg1 + 0x68) = 0;
            *(arg1 + 0x70) = 0;
        }
    }
    else
    {
        uint32_t x22_1 = *(arg1 + 0xa2);
        *(arg1 + 0x40) = (arg1 + 0x58);
        *(arg1 + 0x60) = 8;
        *(arg1 + 0xa0) = 0;
        if (x22_1 != 0)
        {
            goto label_256f4;
        }
    }
    if ((arg3 < 9 || (arg3 >= 9 && (arg2 == 0 || (arg2 != 0 && x22 == 0)))))
    {
        uint64_t x0_5;
        if (arg3 > 8)
        {
            x0_5 = arg3;
        }
        else
        {
            x0_5 = 8;
        }
        *(arg1 + 0x70) = x0_5;
        if ((arg2 == 0 || (arg2 != 0 && x0_5 < 8)))
        {
            *(arg1 + 0x68) = operator new[](x0_5);
            *(arg1 + 0xa1) = 1;
        }
        if ((arg2 != 0 && x0_5 >= 8))
        {
            *(arg1 + 0x68) = arg2;
            *(arg1 + 0xa1) = 0;
        }
    }
    return arg1;
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::seekoff(int64_t* arg1, int64_t arg2, int32_t arg3)
{
    int64_t* x0 = arg1[0x10];
    if (x0 == 0)
    {
        sub_26228();
        /* no return */
    }
    int32_t x0_1 = *(*x0 + 0x30)();
    int64_t x8_2 = arg1[0xf];
    if (x8_2 != 0)
    {
        if ((arg2 == 0 || (arg2 != 0 && x0_1 >= 1)))
        {
            x8_2 = 0;
            if ((*(*arg1 + 0x30)(arg1) == 0 && arg3 <= 2))
            {
                off_t x1_1;
                if (x0_1 > 0)
                {
                    x1_1 = (x0_1 * arg2);
                }
                else
                {
                    x1_1 = 0;
                }
                if (fseeko(arg1[0xf], x1_1, arg3) != 0)
                {
                    goto label_257f0;
                }
                ftello(arg1[0xf]);
                x8_2 = arg1[0x11];
            }
        }
        if ((arg2 != 0 && x0_1 < 1))
        {
        label_257f0:
            x8_2 = 0;
        }
    }
    return x8_2;
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::seekpos(int64_t* arg1, int64_t arg2, off_t arg3)
{
    int32_t x0;
    int32_t x0_2;
    int64_t x20_1;
    if (arg1[0xf] != 0)
    {
        x20_1 = arg2;
        x0 = *(*arg1 + 0x30)();
        if (x0 == 0)
        {
            x0_2 = fseeko(arg1[0xf], arg3, 0);
            if (x0_2 == 0)
            {
                arg1[0x11] = x20_1;
            }
        }
    }
    if (((arg1[0xf] == 0 || (arg1[0xf] != 0 && x0 != 0)) || ((arg1[0xf] != 0 && x0 == 0) && x0_2 != 0)))
    {
        x20_1 = 0;
    }
    return x20_1;
}

uint64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::sync(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int32_t x20_2;
    if (arg1[0xf] == 0)
    {
    label_25a4c:
        x20_2 = 0;
    }
    else
    {
        int64_t* x0 = arg1[0x10];
        if (x0 == 0)
        {
            sub_26228();
            /* no return */
        }
        int32_t x8_2 = *(arg1 + 0x9c);
        if ((x8_2 & 0x10) != 0)
        {
            int32_t x0_2;
            if (arg1[6] != arg1[5])
            {
                x20_2 = -1;
                x0_2 = *(*arg1 + 0x68)(arg1, 0xffffffff);
            }
            if ((arg1[6] == arg1[5] || (arg1[6] != arg1[5] && x0_2 != 0xffffffff)))
            {
                int32_t i;
                int64_t x0_5;
                size_t x22_1;
                do
                {
                    i = *(*arg1[0x10] + 0x28)();
                    int64_t x0_4 = arg1[8];
                    int64_t var_50;
                    x22_1 = (var_50 - x0_4);
                    x0_5 = fwrite(x0_4, 1, x22_1, arg1[0xf]);
                    if (x0_5 != x22_1)
                    {
                        break;
                    }
                } while (i == 1);
                if (x0_5 != x22_1)
                {
                    goto label_25a24;
                }
                if (i == 2)
                {
                    goto label_25a24;
                }
                if (fflush(arg1[0xf]) == 0)
                {
                    goto label_25a4c;
                }
                goto label_25a24;
            }
        }
        else
        {
            if ((x8_2 & 8) == 0)
            {
                goto label_25a4c;
            }
            int64_t x8_3 = arg1[0x12];
            int64_t x20_1;
            int32_t x21_1;
            if (*(arg1 + 0xa2) != 0)
            {
                x21_1 = 0;
                x20_1 = (arg1[4] - arg1[3]);
            }
            else
            {
                int32_t x0_8 = *(*x0 + 0x30)();
                x20_1 = (arg1[0xa] - arg1[9]);
                if (x0_8 >= 1)
                {
                    x21_1 = 0;
                    x20_1 = (x20_1 + ((arg1[4] - arg1[3]) * x0_8));
                }
                else if (arg1[3] == arg1[4])
                {
                    x21_1 = 0;
                }
                else
                {
                    int32_t x0_10 = *(*arg1[0x10] + 0x40)();
                    x21_1 = 1;
                    x20_1 = (((arg1[9] + x20_1) - x0_10) - arg1[8]);
                }
            }
            if (fseeko(arg1[0xf], -(x20_1), 1) == 0)
            {
                if (x21_1 != 0)
                {
                    arg1[0x11] = x8_3;
                }
                int64_t x8_22 = arg1[8];
                *(arg1 + 0x9c) = 0;
                __builtin_memset(&arg1[2], 0, 0x18);
                arg1[9] = x8_22;
                arg1[0xa] = x8_22;
                goto label_25a4c;
            }
        label_25a24:
            x20_2 = -1;
        }
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_2;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::showmanyc() __pure
{
    return 0;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::xsgetn(int64_t* arg1, char* arg2, int64_t arg3)
{
    int64_t x19;
    if (arg3 < 1)
    {
        x19 = 0;
    }
    else
    {
        char* x21_1 = arg2;
        x19 = 0;
        do
        {
            int64_t x1 = arg1[3];
            int64_t x8_1 = arg1[4];
            size_t x23_1;
            if (x1 < x8_1)
            {
                size_t x8_2 = (x8_1 - x1);
                size_t x9_1 = (arg3 - x19);
                size_t x8_3;
                if (x9_1 < x8_2)
                {
                    x8_3 = x9_1;
                }
                else
                {
                    x8_3 = x8_2;
                }
                if (x8_3 < 0x7fffffff)
                {
                    x23_1 = x8_3;
                }
                else
                {
                    x23_1 = 0x7fffffff;
                }
                if (x23_1 != 0)
                {
                    memcpy(x21_1, x1, x23_1);
                    x1 = arg1[3];
                }
                x21_1 = &x21_1[x23_1];
                arg1[3] = (x1 + x23_1);
            }
            else
            {
                int32_t x0_2 = *(*arg1 + 0x50)(arg1, x1);
                if (x0_2 == 0xffffffff)
                {
                    break;
                }
                *x21_1 = x0_2;
                x21_1 = &x21_1[1];
                x23_1 = 1;
            }
            x19 = (x23_1 + x19);
        } while (x19 < arg3);
    }
    return x19;
}

uint64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::underflow(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    uint64_t x0;
    if (arg1[0xf] == 0)
    {
        x0 = 0xffffffff;
    }
    else
    {
        char* x8_6;
        int32_t x9_2;
        if ((*(arg1 + 0x9c) & 8) != 0)
        {
            x8_6 = arg1[3];
            x9_2 = 0;
        }
        else
        {
            uint32_t x8_3 = *(arg1 + 0xa2);
            __builtin_memset(&arg1[5], 0, 0x18);
            int64_t x9_1;
            if (x8_3 == 0)
            {
                x9_1 = 0x70;
            }
            else
            {
                x9_1 = 0x60;
            }
            int64_t x8_4;
            if (x8_3 == 0)
            {
                x8_4 = 0x68;
            }
            else
            {
                x8_4 = 0x40;
            }
            void* x10_1 = *(arg1 + x8_4);
            int64_t x8_5 = *(arg1 + x9_1);
            *(arg1 + 0x9c) = 8;
            x9_2 = 1;
            x8_6 = (x10_1 + x8_5);
            arg1[2] = x10_1;
            arg1[3] = x8_6;
            arg1[4] = x8_6;
        }
        void var_4c;
        if ((((*(arg1 + 0x9c) & 8) != 0 && x8_6 == 0) || ((*(arg1 + 0x9c) & 8) == 0 && x8_6 == 0)))
        {
            x8_6 = (&var_4c | 1);
            arg1[2] = &var_4c;
            arg1[3] = x8_6;
            arg1[4] = x8_6;
            if (x9_2 == 0)
            {
                goto label_25c1c;
            }
            goto label_25bdc;
        }
        if ((((*(arg1 + 0x9c) & 8) != 0 && x8_6 != 0) || ((*(arg1 + 0x9c) & 8) == 0 && x8_6 != 0)))
        {
            size_t x20_1;
            if (x9_2 == 0)
            {
            label_25c1c:
                int64_t x9_4 = arg1[4];
                int64_t x10_3 = (x9_4 - arg1[2]);
                int64_t x10_4;
                if (x10_3 < 0)
                {
                    x10_4 = (x10_3 + 1);
                }
                else
                {
                    x10_4 = x10_3;
                }
                size_t x10_5 = (x10_4 >> 1);
                if (x10_5 < 4)
                {
                    x20_1 = x10_5;
                }
                else
                {
                    x20_1 = 4;
                }
                if (x8_6 == x9_4)
                {
                    goto label_25c4c;
                }
                goto label_25be8;
            }
        label_25bdc:
            x20_1 = 0;
            void* x24_1;
            if (x8_6 != arg1[4])
            {
            label_25be8:
                x0 = *x8_6;
                x24_1 = &arg1[2];
            }
            else
            {
            label_25c4c:
                x24_1 = &arg1[2];
                memmove(*x24_1, (x8_6 - x20_1), x20_1);
                char* x8_11;
                void* x9_6;
                if (*(x24_1 + 0x92) == 0)
                {
                    int64_t x1_2 = arg1[9];
                    int64_t x9_7 = arg1[0xa];
                    if (x9_7 != x1_2)
                    {
                        memmove(arg1[8], x1_2, (x9_7 - x1_2));
                        x1_2 = arg1[9];
                        x9_7 = arg1[0xa];
                    }
                    int64_t x8_12 = arg1[8];
                    int64_t x0_5 = (x8_12 + (x9_7 - x1_2));
                    arg1[9] = x0_5;
                    int64_t x9_9;
                    if (x8_12 == &arg1[0xb])
                    {
                        x9_9 = 8;
                    }
                    else
                    {
                        x9_9 = arg1[0xc];
                    }
                    int64_t x10_7 = arg1[0x11];
                    int64_t x8_13 = (x8_12 + x9_9);
                    size_t x11_1 = (x8_13 - x0_5);
                    int64_t x9_10 = arg1[0xe];
                    FILE* x3_2 = arg1[0xf];
                    arg1[0xa] = x8_13;
                    arg1[0x12] = x10_7;
                    size_t x8_14 = (x9_10 - x20_1);
                    size_t x2_4;
                    if (x11_1 < x8_14)
                    {
                        x2_4 = x11_1;
                    }
                    else
                    {
                        x2_4 = x8_14;
                    }
                    int64_t x0_6 = fread(x0_5, 1, x2_4, x3_2);
                    if (x0_6 == 0)
                    {
                        goto label_25d8c;
                    }
                    int64_t* x0_7 = arg1[0x10];
                    if (x0_7 == 0)
                    {
                        sub_26228();
                        /* no return */
                    }
                    arg1[0xa] = (arg1[9] + x0_6);
                    if (*(*x0_7 + 0x20)() != 3)
                    {
                        void* var_58;
                        x9_6 = var_58;
                        x8_11 = (*x24_1 + x20_1);
                        if (x9_6 == x8_11)
                        {
                            goto label_25d8c;
                        }
                        goto label_25d80;
                    }
                    x8_11 = arg1[8];
                    x9_6 = arg1[0xa];
                    arg1[2] = x8_11;
                    goto label_25d80;
                }
                int64_t x9_5 = arg1[2];
                int64_t x0_3 = fread((x9_5 + x20_1), 1, ((arg1[4] - x20_1) - x9_5), arg1[0xf]);
                if (x0_3 == 0)
                {
                label_25d8c:
                    x0 = 0xffffffff;
                }
                else
                {
                    x8_11 = (arg1[2] + x20_1);
                    x9_6 = &x8_11[x0_3];
                label_25d80:
                    arg1[3] = x8_11;
                    arg1[4] = x9_6;
                    x0 = *x8_11;
                }
            }
            if (*x24_1 == &var_4c)
            {
                __builtin_memset(&arg1[2], 0, 0x18);
            }
        }
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

uint32_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::uflow(int64_t* arg1)
{
    uint32_t x0 = *(*arg1 + 0x48)();
    if (x0 != 0xffffffff)
    {
        char* x8_2 = arg1[3];
        arg1[3] = &x8_2[1];
        x0 = *x8_2;
    }
    return x0;
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::pbackfail(void* arg1, int32_t arg2)
{
    if (*(arg1 + 0x78) != 0)
    {
        void* x9 = *(arg1 + 0x18);
        if (*(arg1 + 0x10) < x9)
        {
            char x0 = arg2;
            if (arg2 == 0xffffffff)
            {
                *(arg1 + 0x18) = (x9 - 1);
                return 0;
            }
            char* x9_1;
            if ((*(arg1 + 0x98) & 0x10) != 0)
            {
                x9_1 = (x9 - 1);
            }
            else
            {
                x9_1 = (x9 - 1);
            }
            if (((*(arg1 + 0x98) & 0x10) != 0 || ((*(arg1 + 0x98) & 0x10) == 0 && *x9_1 == x0)))
            {
                *(arg1 + 0x18) = x9_1;
                *x9_1 = x0;
                return x0;
            }
        }
    }
    return 0xffffffff;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::xsputn(int64_t* arg1, char* arg2, int64_t arg3)
{
    int64_t x21;
    if (arg3 < 1)
    {
        x21 = 0;
    }
    else
    {
        char* x20_1 = arg2;
        x21 = 0;
        while (true)
        {
            int64_t x0 = arg1[6];
            int64_t x8_1 = arg1[7];
            if (x0 >= x8_1)
            {
                if (*(*arg1 + 0x68)(arg1, *x20_1) == 0xffffffff)
                {
                    break;
                }
                x20_1 = &x20_1[1];
                x21 = (x21 + 1);
                if (x21 >= arg3)
                {
                    break;
                }
            }
            else
            {
                size_t x8_2 = (x8_1 - x0);
                size_t x9_1 = (arg3 - x21);
                size_t x23_1;
                if (x9_1 < x8_2)
                {
                    x23_1 = x9_1;
                }
                else
                {
                    x23_1 = x8_2;
                }
                if (x23_1 != 0)
                {
                    memcpy(x0, x20_1, x23_1);
                    x0 = arg1[6];
                }
                x20_1 = &x20_1[x23_1];
                x21 = (x23_1 + x21);
                arg1[6] = (x0 + x23_1);
                if (x21 >= arg3)
                {
                    break;
                }
            }
        }
    }
    return x21;
}

uint64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::overflow(void* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    uint64_t x0_2;
    if (*(arg1 + 0x78) == 0)
    {
    label_2614c:
        x0_2 = 0xffffffff;
    }
    else
    {
        int64_t x2_1;
        void* x25_2;
        int64_t x26_1;
        void* x27_2;
        if ((*(arg1 + 0x9c) & 0x10) != 0)
        {
            x25_2 = (arg1 + 0x28);
            x2_1 = *x25_2;
            x27_2 = (x25_2 + 0x10);
            x26_1 = *x27_2;
        }
        else
        {
            int64_t x8_3 = *(arg1 + 0x60);
            __builtin_memset((arg1 + 0x10), 0, 0x18);
            if (x8_3 < 9)
            {
                x25_2 = (arg1 + 0x28);
                *x25_2 = 0;
                x2_1 = 0;
                x26_1 = 0;
                x27_2 = (x25_2 + 0x10);
                *x27_2 = 0;
                *(x25_2 + 8) = 0;
            }
            else
            {
                if (*(arg1 + 0xa2) == 0)
                {
                    x2_1 = *(arg1 + 0x68);
                    x8_3 = *(arg1 + 0x70);
                }
                else
                {
                    x2_1 = *(arg1 + 0x40);
                }
                x26_1 = ((x2_1 + x8_3) - 1);
                x25_2 = (arg1 + 0x28);
                *(arg1 + 0x28) = x2_1;
                *(arg1 + 0x30) = x2_1;
                x27_2 = (arg1 + 0x38);
                *(arg1 + 0x38) = x26_1;
            }
            *(arg1 + 0x9c) = 0x10;
        }
        void* x3_1 = *(arg1 + 0x30);
        int64_t x28_1 = x2_1;
        if (arg2 != 0xffffffff)
        {
            if (x3_1 == 0)
            {
                void var_6c;
                x3_1 = &var_6c;
                *(arg1 + 0x28) = &var_6c;
                *(arg1 + 0x30) = &var_6c;
                *(arg1 + 0x38) = (&var_6c | 1);
            }
            *x3_1 = arg2;
            x2_1 = *(arg1 + 0x28);
            x3_1 = (*(arg1 + 0x30) + 1);
            *(arg1 + 0x30) = x3_1;
        }
        void* x21_1 = (x3_1 - x2_1);
        if (x3_1 != x2_1)
        {
            int64_t x0;
            FILE* x3_2;
            if (*(arg1 + 0xa2) != 0)
            {
                x3_2 = *(arg1 + 0x78);
                x0 = x2_1;
            }
            else
            {
                int64_t x5_1 = *(arg1 + 0x40);
                int64_t* x0_3 = *(arg1 + 0x80);
                int64_t var_80;
                int64_t x8_10;
                int32_t i;
                if (x0_3 != 0)
                {
                    int32_t i_1 = *(*x0_3 + 0x18)();
                    x8_10 = *(arg1 + 0x28);
                    if (var_80 == x8_10)
                    {
                        goto label_2614c;
                    }
                    i = i_1;
                    int64_t x0_5;
                    int64_t* x0_6;
                    size_t x23_1;
                    while (i != 3)
                    {
                        if (i > 1)
                        {
                            break;
                        }
                        int64_t x0_4 = *(arg1 + 0x40);
                        x23_1 = (x5_1 - x0_4);
                        x0_5 = fwrite(x0_4, 1, x23_1, *(arg1 + 0x78));
                        if (x0_5 != x23_1)
                        {
                            break;
                        }
                        if (i != 1)
                        {
                            break;
                        }
                        int64_t x3_4 = *(arg1 + 0x30);
                        *x25_2 = var_80;
                        *x27_2 = x3_4;
                        x0_6 = *(arg1 + 0x80);
                        *(arg1 + 0x30) = x3_4;
                        if (x0_6 == 0)
                        {
                            break;
                        }
                        int32_t i_2 = *(*x0_6 + 0x18)();
                        x8_10 = *(arg1 + 0x28);
                        i = i_2;
                        if (var_80 == x8_10)
                        {
                            break;
                        }
                    }
                    if (i == 3)
                    {
                        x3_2 = *(arg1 + 0x78);
                        x0 = x8_10;
                        x21_1 = (*(arg1 + 0x30) - x8_10);
                    }
                    else if (!(((x0_5 == x23_1 && i == 1) && x0_6 == 0)))
                    {
                        if ((i != 3 && i > 1))
                        {
                            goto label_2614c;
                        }
                        goto label_2605c;
                    }
                }
                if ((x0_3 == 0 || ((x0_3 != 0 && var_80 != x8_10) && i != 3)))
                {
                    sub_26228();
                    /* no return */
                }
            }
            if (fwrite(x0, 1, x21_1, x3_2) != x21_1)
            {
                goto label_2614c;
            }
        label_2605c:
            *(arg1 + 0x30) = x28_1;
            *x25_2 = x28_1;
            *x27_2 = x26_1;
        }
        if (arg2 == 0xffffffff)
        {
            x0_2 = 0;
        }
        else
        {
            x0_2 = arg2;
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::imbue() __pure
{
    return;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::setbuf() __pure
{
    return;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::seekoff() __pure
{
    return 0;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::seekpos() __pure
{
    return 0;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::sync() __pure
{
    return 0;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::underflow() __pure
{
    return 0xffffffff;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::pbackfail() __pure
{
    return 0xffffffff;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::overflow() __pure
{
    return 0xffffffff;
}

void sub_26228() __noreturn
{
    void* thrown_exception = __cxa_allocate_exception(8);
    std::bad_cast::bad_cast();
    __cxa_throw(thrown_exception, _typeinfo_for_std::bad_cast, std::bad_cast::~bad_cast);
    /* no return */
}

int64_t virtual_thunk_to_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    *x19 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(x19 + 0xb8) = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x17] = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t virtual_thunk_to_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    *x19 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(x19 + 0xb8) = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t virtual_thunk_to_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_ostringstream()(int64_t* arg1)
{
    void* x20 = (arg1 + *(*arg1 - 0x18));
    *x20 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    *(x20 + 0x70) = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    uint32_t x8_3 = *(x20 + 0x48);
    *(x20 + 8) = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((x8_3 & 1) != 0)
    {
        operator delete(*(x20 + 0x58));
    }
    *(x20 + 8) = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_ostringstream(void** arg1)
{
    uint32_t x10 = arg1[9];
    arg1[0xe] = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    *arg1 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    arg1[1] = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((x10 & 1) != 0)
    {
        operator delete(arg1[0xb]);
    }
    arg1[1] = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t virtual_thunk_to_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_ostringstream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    *x19 = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x18);
    *(x19 + 0x70) = (_vtable_for_std::__ndk1::basic_ostringstream<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x40);
    uint32_t x8_3 = *(x19 + 0x48);
    *(x19 + 8) = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((x8_3 & 1) != 0)
    {
        operator delete(*(x19 + 0x58));
    }
    *(x19 + 8) = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_stringbuf(void** arg1)
{
    uint32_t x8 = arg1[8];
    *arg1 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((x8 & 1) != 0)
    {
        operator delete(arg1[0xa]);
    }
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_stringbuf(void** arg1)
{
    uint32_t x8 = arg1[8];
    *arg1 = (_vtable_for_std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > + 0x10);
    if ((x8 & 1) != 0)
    {
        operator delete(arg1[0xa]);
    }
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::seekoff(void* arg1, int64_t arg2, int32_t arg3, int32_t arg4)
{
    int64_t x8 = *(arg1 + 0x58);
    int64_t x9 = *(arg1 + 0x30);
    if (x8 < x9)
    {
        x8 = x9;
        *(arg1 + 0x58) = x9;
    }
    int32_t x10 = (arg4 & 0x18);
    if (x10 == 0)
    {
        return 0;
    }
    if ((arg3 == 1 && x10 == 0x18))
    {
        return 0;
    }
    void* x10_4;
    void* x11_3;
    if (x8 == 0)
    {
        x10_4 = nullptr;
        if (arg3 == 0)
        {
        label_265cc:
            x11_3 = nullptr;
        }
    }
    else if ((*(arg1 + 0x40) & 1) != 0)
    {
        x10_4 = (x8 - *(arg1 + 0x50));
        if (arg3 == 0)
        {
            goto label_265cc;
        }
    }
    else
    {
        x10_4 = (x8 - (arg1 + 0x41));
        if (arg3 == 0)
        {
            goto label_265cc;
        }
    }
    if (((x8 == 0 && arg3 != 0) || x8 != 0))
    {
        if (arg3 == 2)
        {
            x11_3 = x10_4;
        }
        else
        {
            if (arg3 != 1)
            {
                return 0;
            }
            if ((arg4 & 8) != 0)
            {
                x11_3 = (*(arg1 + 0x18) - *(arg1 + 0x10));
            }
            else
            {
                x11_3 = (x9 - *(arg1 + 0x28));
            }
        }
    }
    void* x11_5 = (x11_3 + arg2);
    if (((x11_3 + arg2) >= 0 && x10_4 >= x11_5))
    {
        if (x11_5 != 0)
        {
            if (((arg4 & 8) != 0 && *(arg1 + 0x18) == 0))
            {
                return 0;
            }
            if (((arg4 & 0x10) != 0 && x9 == 0))
            {
                return 0;
            }
        }
        if ((arg4 & 8) != 0)
        {
            *(arg1 + 0x18) = (*(arg1 + 0x10) + x11_5);
            *(arg1 + 0x20) = x8;
        }
        if ((arg4 & 0x10) != 0)
        {
            *(arg1 + 0x30) = (*(arg1 + 0x28) + x11_5);
        }
    }
    return 0;
}

int64_t sub_2668c(int64_t* arg1)
{
    /* jump -> *(*arg1 + 0x20) */
}

uint64_t std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::underflow(void* arg1)
{
    int64_t x8 = *(arg1 + 0x58);
    int64_t x9 = *(arg1 + 0x30);
    if (x8 < x9)
    {
        x8 = x9;
        *(arg1 + 0x58) = x9;
    }
    if ((*(arg1 + 0x60) & 8) == 0)
    {
        return 0xffffffff;
    }
    int64_t x9_2 = *(arg1 + 0x20);
    if (x9_2 < x8)
    {
        x9_2 = x8;
        *(arg1 + 0x20) = x8;
    }
    char* x8_1 = *(arg1 + 0x18);
    if (x8_1 >= x9_2)
    {
        return 0xffffffff;
    }
    return *x8_1;
}

int64_t std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::pbackfail(void* arg1, int32_t arg2)
{
    int64_t x9 = *(arg1 + 0x58);
    int64_t x10 = *(arg1 + 0x30);
    if (x9 < x10)
    {
        x9 = x10;
        *(arg1 + 0x58) = x10;
    }
    void* x10_1 = *(arg1 + 0x18);
    if (*(arg1 + 0x10) < x10_1)
    {
        if (arg2 == 0xffffffff)
        {
            *(arg1 + 0x18) = (x10_1 - 1);
            *(arg1 + 0x20) = x9;
            return 0;
        }
        char* x10_2;
        if ((*(arg1 + 0x60) & 0x10) != 0)
        {
            x10_2 = (x10_1 - 1);
        }
        else
        {
            x10_2 = (x10_1 - 1);
        }
        if (((*(arg1 + 0x60) & 0x10) != 0 || ((*(arg1 + 0x60) & 0x10) == 0 && *x10_2 == arg2)))
        {
            *(arg1 + 0x18) = x10_2;
            *(arg1 + 0x20) = x9;
            *x10_2 = arg2;
            return arg2;
        }
    }
    return 0xffffffff;
}

uint64_t std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::overflow(int64_t* arg1, int32_t arg2)
{
    uint64_t x0;
    if (arg2 == 0xffffffff)
    {
        x0 = 0;
    }
    else
    {
        void* x24_1 = arg1[6];
        void* x8_1 = arg1[7];
        int64_t x22_1 = arg1[2];
        int64_t x23_1 = arg1[3];
        char x19_1 = arg2;
        void* x10_1;
        void* x25_1;
        void* x26_2;
        if (x24_1 == x8_1)
        {
            x25_1 = &arg1[0xc];
            if ((*x25_1 & 0x10) == 0)
            {
                x0 = 0xffffffff;
            }
            else
            {
                x26_2 = &arg1[0xb];
                int64_t x27_1 = *x26_2;
                int64_t x28_1 = *(x26_2 - 0x30);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((x26_2 - 0x18));
                uint64_t x8_3 = *(x26_2 - 0x18);
                char x1_1;
                int64_t x9_1;
                uint64_t x10_2;
                int64_t x10_3;
                if ((x8_3 & 1) != 0)
                {
                    x10_3 = arg1[9];
                    x9_1 = ((arg1[8] & 0xfffffffffffffffe) - 1);
                    x1_1 = (x9_1 - x10_3);
                }
                else
                {
                    x10_2 = (x8_3 >> 1);
                    x9_1 = 0x16;
                    x1_1 = (0x16 - x10_2);
                }
                if ((((x8_3 & 1) != 0 && x9_1 > x10_3) || ((x8_3 & 1) == 0 && 0x16 > x10_2)))
                {
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append((x26_2 - 0x18), x1_1);
                }
                if ((((x8_3 & 1) != 0 && x9_1 <= x10_3) || ((x8_3 & 1) == 0 && 0x16 <= x10_2)))
                {
                    if ((x8_3 & 1) != 0)
                    {
                        arg1[0xa][x9_1] = 0;
                        arg1[9] = x9_1;
                    }
                    else
                    {
                        *(((x26_2 - 0x18) + x9_1) + 1) = 0;
                        *(x26_2 - 0x18) = (x9_1 << 1);
                    }
                }
                uint64_t x8_6 = *(x26_2 - 0x18);
                uint64_t x8_7;
                void* x11_1;
                if ((x8_6 & 1) != 0)
                {
                    x8_7 = arg1[9];
                    x11_1 = arg1[0xa];
                }
                else
                {
                    x11_1 = (x26_2 - 0x17);
                    x8_7 = (x8_6 >> 1);
                }
                x8_1 = (x11_1 + x8_7);
                x24_1 = (x11_1 + (x24_1 - x28_1));
                x10_1 = (x11_1 + (x27_1 - x28_1));
                arg1[6] = x24_1;
                arg1[7] = x8_1;
                arg1[5] = x11_1;
                arg1[0xb] = x10_1;
            }
        }
        else
        {
            x26_2 = &arg1[0xb];
            x10_1 = *x26_2;
            x25_1 = (x26_2 + 8);
        }
        if ((x24_1 != x8_1 || (x24_1 == x8_1 && (*x25_1 & 0x10) != 0)))
        {
            void* var_68 = (x24_1 + 1);
            void* x10_5;
            if ((x24_1 + 1) < x10_1)
            {
                x10_5 = x26_2;
            }
            else
            {
                x10_5 = &var_68;
            }
            int64_t x10_6 = *x10_5;
            *x26_2 = x10_6;
            if ((*x25_1 & 8) != 0)
            {
                void* x12_3;
                if ((arg1[8] & 1) != 0)
                {
                    x12_3 = arg1[0xa];
                }
                else
                {
                    x12_3 = (arg1 + 0x41);
                }
                arg1[2] = x12_3;
                arg1[3] = (x12_3 + (x23_1 - x22_1));
                arg1[4] = x10_6;
            }
            if (x24_1 == x8_1)
            {
                /* jump -> *(*arg1 + 0x68) */
            }
            x0 = x19_1;
            arg1[6] = (x24_1 + 1);
            *x24_1 = x19_1;
        }
    }
    return x0;
}

void std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(char* arg1, char arg2)
{
    uint64_t x8 = *arg1;
    size_t x21;
    uint64_t x25;
    if ((x8 & 1) == 0)
    {
        x25 = (x8 >> 1);
        x21 = 0x16;
    }
    else
    {
        x25 = *(arg1 + 8);
        x21 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    void* x23;
    if ((((x8 & 1) == 0 && x25 != 0x16) || ((x8 & 1) != 0 && x25 != x21)))
    {
        if ((x8 & 1) == 0)
        {
            *arg1 = ((x25 << 1) + 2);
            x23 = &arg1[1];
        label_26a48:
            void* x8_8 = (x23 + x25);
            *x8_8 = arg2;
            *(x8_8 + 1) = 0;
            return;
        }
        x23 = *(arg1 + 0x10);
    label_26a44:
        *(arg1 + 8) = (x25 + 1);
        goto label_26a48;
    }
    if ((((x8 & 1) == 0 && x25 == 0x16) || ((x8 & 1) != 0 && x25 == x21)))
    {
        if (x21 == -0x11)
        {
            char* x0_4;
            size_t x1_1;
            int32_t x2_2;
            x0_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(x0_4, x1_1, x2_2);
        }
        void* x22_1;
        if ((x8 & 1) != 0)
        {
            x22_1 = *(arg1 + 0x10);
        }
        else
        {
            x22_1 = &arg1[1];
        }
        uint64_t x24_1;
        if (x21 > 0x7fffffffffffffe6)
        {
            x24_1 = -0x11;
        }
        else
        {
            int64_t x9_3 = (x21 << 1);
            int64_t x8_4;
            if ((x21 + 1) < x9_3)
            {
                x8_4 = x9_3;
            }
            else
            {
                x8_4 = (x21 + 1);
            }
            if (x8_4 >= 0x17)
            {
                x24_1 = ((x8_4 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x24_1 = 0x17;
            }
        }
        void* x0_1 = operator new(x24_1);
        x23 = x0_1;
        memcpy(x0_1, x22_1, x21);
        if (x21 != 0x16)
        {
            operator delete(x22_1);
        }
        *(arg1 + 0x10) = x23;
        *arg1 = (x24_1 | 1);
        goto label_26a44;
    }
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, size_t arg2, int32_t arg3)
{
    if (arg2 != 0)
    {
        uint64_t x8_1 = *arg1;
        uint64_t x9_1;
        uint64_t x22_1;
        int64_t x26_1;
        if ((x8_1 & 1) != 0)
        {
            x9_1 = *arg1;
            x22_1 = *(arg1 + 8);
            x26_1 = ((x9_1 & 0xfffffffffffffffe) - 1);
        }
        else
        {
            x22_1 = (x8_1 >> 1);
            x26_1 = 0x16;
            x9_1 = x8_1;
        }
        if ((x26_1 - x22_1) < arg2)
        {
            int64_t x9_2 = (x22_1 + arg2);
            if ((-0x11 - x26_1) < (x9_2 - x26_1))
            {
                char* x0_7;
                int64_t x1_2;
                size_t x2_2;
                x0_7 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                /* tailcall */
                return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(x0_7, x1_2, x2_2);
            }
            void* x23_1;
            if ((x8_1 & 1) != 0)
            {
                x23_1 = *(arg1 + 0x10);
            }
            else
            {
                x23_1 = &arg1[1];
            }
            uint64_t x24_1;
            if (x26_1 > 0x7fffffffffffffe6)
            {
                x24_1 = -0x11;
            }
            else
            {
                int64_t x8_2 = (x26_1 << 1);
                int64_t x8_3;
                if (x9_2 < x8_2)
                {
                    x8_3 = x8_2;
                }
                else
                {
                    x8_3 = x9_2;
                }
                if (x8_3 >= 0x17)
                {
                    x24_1 = ((x8_3 + 0x10) & 0xfffffffffffffff0);
                }
                else
                {
                    x24_1 = 0x17;
                }
            }
            int64_t x0_1 = operator new(x24_1);
            if (x22_1 != 0)
            {
                memcpy(x0_1, x23_1, x22_1);
            }
            if (x26_1 != 0x16)
            {
                operator delete(x23_1);
            }
            x9_1 = (x24_1 | 1);
            *(arg1 + 0x10) = x0_1;
            *arg1 = x9_1;
        }
        void* x23_2;
        if ((x9_1 & 1) != 0)
        {
            x23_2 = *(arg1 + 0x10);
        }
        else
        {
            x23_2 = &arg1[1];
        }
        memset((x23_2 + x22_1), arg3, arg2);
        int64_t x8_5 = (x22_1 + arg2);
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = x8_5;
        }
        else
        {
            *arg1 = (x8_5 << 1);
        }
        *(x23_2 + x8_5) = 0;
    }
    return arg1;
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, int64_t arg2, size_t arg3)
{
    uint64_t x8 = *arg1;
    uint64_t x22;
    int64_t x26;
    if ((x8 & 1) != 0)
    {
        x22 = *(arg1 + 8);
        x26 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    else
    {
        x22 = (x8 >> 1);
        x26 = 0x16;
    }
    void* x8_4;
    if (((x26 - x22) >= arg3 && arg3 != 0))
    {
        void* x23_2;
        if ((x8 & 1) != 0)
        {
            x23_2 = *(arg1 + 0x10);
        }
        else
        {
            x23_2 = &arg1[1];
        }
        memcpy((x23_2 + x22), arg2, arg3);
        int64_t x8_3 = (x22 + arg3);
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = x8_3;
            x8_4 = (x23_2 + x8_3);
        }
        else
        {
            *arg1 = (x8_3 << 1);
            x8_4 = (x23_2 + x8_3);
        }
    }
    if ((x26 - x22) < arg3)
    {
        int64_t x27_1 = (x22 + arg3);
        if ((-0x12 - x26) < (x27_1 - x26))
        {
            char* x0_8;
            size_t x1_3;
            int64_t x2_3;
            size_t x3;
            x0_8 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(x0_8, x1_3, x2_3, x3);
        }
        void* x23_1;
        if ((x8 & 1) != 0)
        {
            x23_1 = *(arg1 + 0x10);
        }
        else
        {
            x23_1 = &arg1[1];
        }
        uint64_t x24_1;
        if (x26 > 0x7fffffffffffffe6)
        {
            x24_1 = -0x11;
        }
        else
        {
            int64_t x8_1 = (x26 << 1);
            int64_t x8_2;
            if (x27_1 < x8_1)
            {
                x8_2 = x8_1;
            }
            else
            {
                x8_2 = x27_1;
            }
            if (x8_2 >= 0x17)
            {
                x24_1 = ((x8_2 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x24_1 = 0x17;
            }
        }
        void* x0_2 = operator new(x24_1);
        if (x22 != 0)
        {
            memcpy(x0_2, x23_1, x22);
        }
        memcpy((x0_2 + x22), arg2, arg3);
        if (x26 != 0x16)
        {
            operator delete(x23_1);
        }
        *arg1 = (x24_1 | 1);
        x8_4 = (x0_2 + x27_1);
        *(arg1 + 8) = x27_1;
        *(arg1 + 0x10) = x0_2;
    }
    if (((x26 - x22) < arg3 || ((x26 - x22) >= arg3 && arg3 != 0)))
    {
        *x8_4 = 0;
    }
    return arg1;
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(char* arg1, size_t arg2, int64_t arg3, size_t arg4)
{
    uint64_t x8 = *arg1;
    int64_t x21 = arg3;
    uint64_t x27;
    if ((x8 & 1) != 0)
    {
        x27 = *(arg1 + 8);
    }
    else
    {
        x27 = (x8 >> 1);
    }
    if ((((x8 & 1) != 0 && x27 < arg2) || ((x8 & 1) == 0 && x27 < arg2)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
    label_26f48:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
    }
    if ((((x8 & 1) != 0 && x27 >= arg2) || ((x8 & 1) == 0 && x27 >= arg2)))
    {
        int64_t x28_1;
        if ((x8 & 1) != 0)
        {
            x28_1 = ((*arg1 & 0xfffffffffffffffe) - 1);
        }
        else
        {
            x28_1 = 0x16;
        }
        void* x8_6;
        if (((x28_1 - x27) >= arg4 && arg4 != 0))
        {
            void* x23_2;
            if ((x8 & 1) != 0)
            {
                x23_2 = *(arg1 + 0x10);
            }
            else
            {
                x23_2 = &arg1[1];
            }
            void* x22_1 = (x23_2 + arg2);
            if (x27 != arg2)
            {
                bool c_1;
                bool z_1;
                if ((x23_2 + x27) > x21)
                {
                    c_1 = x22_1 < x21;
                    z_1 = x22_1 == x21;
                }
                else
                {
                    z_1 = false;
                    c_1 = true;
                }
                if ((z_1 || c_1))
                {
                    x21 = (x21 + arg4);
                }
                memmove((x22_1 + arg4), x22_1, (x27 - arg2));
            }
            memmove(x22_1, x21, arg4);
            int64_t x8_5 = (x27 + arg4);
            if ((*arg1 & 1) != 0)
            {
                *(arg1 + 8) = x8_5;
                x8_6 = (x23_2 + x8_5);
            }
            else
            {
                *arg1 = (x8_5 << 1);
                x8_6 = (x23_2 + x8_5);
            }
        }
        if ((x28_1 - x27) < arg4)
        {
            int64_t x23_1 = (x27 + arg4);
            if ((-0x12 - x28_1) < (x23_1 - x28_1))
            {
                goto label_26f48;
            }
            void* x8_1;
            if ((x8 & 1) != 0)
            {
                x8_1 = *(arg1 + 0x10);
            }
            else
            {
                x8_1 = &arg1[1];
            }
            uint64_t x24_1;
            if (x28_1 > 0x7fffffffffffffe6)
            {
                x24_1 = -0x11;
            }
            else
            {
                int64_t x8_2 = (x28_1 << 1);
                int64_t x8_3;
                if (x23_1 < x8_2)
                {
                    x8_3 = x8_2;
                }
                else
                {
                    x8_3 = x23_1;
                }
                if (x8_3 >= 0x17)
                {
                    x24_1 = ((x8_3 + 0x10) & 0xfffffffffffffff0);
                }
                else
                {
                    x24_1 = 0x17;
                }
            }
            void* x0_3 = operator new(x24_1);
            if (arg2 != 0)
            {
                memcpy(x0_3, x8_1, arg2);
            }
            void* x26_1 = (x0_3 + arg2);
            memcpy(x26_1, x21, arg4);
            if (x27 != arg2)
            {
                memcpy((x26_1 + arg4), (x8_1 + arg2), (x27 - arg2));
            }
            if (x28_1 != 0x16)
            {
                operator delete(x8_1);
            }
            *arg1 = (x24_1 | 1);
            x8_6 = (x0_3 + x23_1);
            *(arg1 + 8) = x23_1;
            *(arg1 + 0x10) = x0_3;
        }
        if ((((x28_1 - x27) >= arg4 && arg4 != 0) || (x28_1 - x27) < arg4))
        {
            *x8_6 = 0;
        }
        if (((((x28_1 - x27) >= arg4 && arg4 != 0) || (x28_1 - x27) < arg4) || ((x28_1 - x27) >= arg4 && arg4 == 0)))
        {
            return arg1;
        }
    }
}

void std::__ndk1::__basic_string_common<true>::__throw_out_of_range() __noreturn
{
    sub_26f60();
    /* no return */
}

void sub_26f60() __noreturn
{
    char* thrown_exception = __cxa_allocate_exception(0x10);
    sub_26fb0(thrown_exception);
    __cxa_throw(thrown_exception, _typeinfo_for_std::out_of_range, std::out_of_range::~out_of_range);
    /* no return */
}

int64_t sub_26fb0(char* arg1)
{
    int64_t x0 = std::logic_error::logic_error(arg1);
    *arg1 = (_vtable_for_std::out_of_range + 0x10);
    return x0;
}

void nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(int64_t* arg1, char arg2)
{
    uint32_t x8 = arg2;
    void* x0_1;
    if (x8 == 3)
    {
        x0_1 = *arg1;
        if ((*x0_1 & 1) != 0)
        {
            operator delete(*(x0_1 + 0x10));
        }
    }
    if (x8 == 2)
    {
        int64_t* x20_1 = *arg1;
        void* x21_1 = *x20_1;
        if (x21_1 != 0)
        {
            char* x22_1 = x20_1[1];
            void* x0_3 = x21_1;
            if (x22_1 != x21_1)
            {
                do
                {
                    x22_1 = &x22_1[-0x10];
                    *x22_1;
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x22_1[8]);
                } while (x21_1 != x22_1);
                x0_3 = *x20_1;
            }
            x20_1[1] = x21_1;
            operator delete(x0_3);
            x20_1 = *arg1;
        }
        x0_1 = x20_1;
    }
    if ((x8 != 3 && x8 != 2))
    {
        if (x8 != 1)
        {
            return;
        }
        std::__ndk1::fpos<mbstate_t>* x0 = *arg1;
        *(x0 + 8);
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(x0);
    }
    if (((x8 == 3 && (*x0_1 & 1) != 0) || (x8 != 3 && x8 != 2)))
    {
        x0_1 = *arg1;
    }
    /* tailcall */
    return operator delete(x0_1);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(std::__ndk1::fpos<mbstate_t>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(arg1);
    arg2[7];
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg2[8]);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__find_equal<PuduCamera::ErrorCode>(int64_t* arg1, int64_t* arg2, void** arg3, int64_t** arg4, int32_t* arg5)
{
    int64_t* i_5;
    if (&arg1[1] != arg2)
    {
        int32_t x9_1 = *arg5;
        int32_t x10_1 = arg2[4];
        if (x9_1 >= x10_1)
        {
            if (x10_1 >= x9_1)
            {
                *arg3 = arg2;
                *arg4 = arg2;
                return arg4;
            }
            int64_t* i_1 = arg2[1];
            if (i_1 == 0)
            {
                int64_t** x11_1 = &arg2[2];
                i_5 = *x11_1;
                if (*i_5 != arg2)
                {
                    int64_t* i;
                    do
                    {
                        i = *x11_1;
                        x11_1 = &i[2];
                        i_5 = *x11_1;
                    } while (*i_5 != i);
                }
            }
            else
            {
                do
                {
                    i_5 = i_1;
                    i_1 = *i_1;
                } while (i_1 != 0);
            }
            if ((i_5 != &arg1[1] && x9_1 >= i_5[4]))
            {
                i_5 = arg1[1];
                if (i_5 == 0)
                {
                    goto label_272b8;
                }
                void* i_8 = &arg1[1];
                while (true)
                {
                    int32_t x8_2 = i_5[4];
                    int64_t* i_10;
                    if (x9_1 >= x8_2)
                    {
                        if (x8_2 < x9_1)
                        {
                            i_8 = &i_5[1];
                            i_10 = *i_8;
                        }
                        if ((x8_2 >= x9_1 || (x8_2 < x9_1 && i_10 == 0)))
                        {
                            *arg3 = i_5;
                            return i_8;
                        }
                    }
                    else
                    {
                        i_10 = *i_5;
                        if (i_10 == 0)
                        {
                            break;
                        }
                        i_8 = i_5;
                    }
                    i_5 = i_10;
                }
                goto label_2725c;
            }
            if (arg2[1] == 0)
            {
                *arg3 = arg2;
                return &arg2[1];
            }
        label_2725c:
            *arg3 = i_5;
            return i_5;
        }
    }
    int64_t* i_4 = *arg2;
    int64_t* i_6 = arg2;
    if (*arg1 != arg2)
    {
        if (i_4 == 0)
        {
            i_6 = arg2;
            int64_t* i_2;
            do
            {
                i_2 = i_6;
                i_6 = i_6[2];
            } while (*i_6 == i_2);
        }
        else
        {
            int64_t* i_3 = i_4;
            do
            {
                i_6 = i_3;
                i_3 = i_3[1];
            } while (i_3 != 0);
        }
        int32_t x9_3 = *arg5;
        if (i_6[4] >= x9_3)
        {
            i_5 = arg1[1];
            if (i_5 == 0)
            {
            label_272b8:
                *arg3 = &arg1[1];
                return &arg1[1];
            }
            void* i_7 = &arg1[1];
            while (true)
            {
                int32_t x8 = i_5[4];
                int64_t* i_9;
                if (x9_3 >= x8)
                {
                    if (x8 < x9_3)
                    {
                        i_7 = &i_5[1];
                        i_9 = *i_7;
                    }
                    if ((x8 >= x9_3 || (x8 < x9_3 && i_9 == 0)))
                    {
                        *arg3 = i_5;
                        return i_7;
                    }
                }
                else
                {
                    i_9 = *i_5;
                    if (i_9 == 0)
                    {
                        break;
                    }
                    i_7 = i_5;
                }
                i_5 = i_9;
            }
            goto label_2725c;
        }
    }
    if (i_4 == 0)
    {
        *arg3 = arg2;
        return arg2;
    }
    *arg3 = i_6;
    return &i_6[1];
}

void* std::__ndk1::__tree<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<PuduCamera::ErrorCode, std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<PuduCamera::ErrorCode>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<PuduCamera::ErrorCode, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__construct_node<std::__ndk1::pair<PuduCamera::ErrorCode const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > const&>(int64_t arg1, int32_t* arg2, int64_t* arg3 @ x8)
{
    void* x0;
    int128_t v0;
    x0 = operator new(0x40);
    *arg3 = x0;
    arg3[1] = (arg1 + 8);
    arg3[2] = 0;
    *(x0 + 0x20) = *arg2;
    void* x0_1 = (x0 + 0x28);
    *x0_1 = 0;
    *(x0 + 0x30) = 0;
    *(x0 + 0x38) = 0;
    if ((arg2[2] & 1) == 0)
    {
        v0 = *(arg2 + 8);
        *(x0_1 + 0x10) = *(arg2 + 0x18);
        *x0_1 = v0;
    }
    else
    {
        size_t x21_1 = *(arg2 + 0x10);
        if (x21_1 < -0x10)
        {
            int64_t x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            *arg3 = 0;
            operator delete(x0);
            /* tailcall */
            return std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf(_Unwind_Resume(x0_5));
        }
        int64_t x22_1 = *(arg2 + 0x18);
        void* x23_1;
        if (x21_1 >= 0x17)
        {
            uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x24_1);
            x23_1 = x0_3;
            *(x0 + 0x30) = x21_1;
            *(x0 + 0x38) = x0_3;
            *(x0 + 0x28) = (x24_1 | 1);
        }
        else
        {
            x23_1 = (x0 + 0x29);
            *(x0 + 0x28) = (x21_1 << 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            x0_1 = memcpy(x23_1, x22_1, x21_1);
        }
        *(x23_1 + x21_1) = 0;
    }
    arg3[2] = 1;
    return x0_1;
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf(void** arg1)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::locale();
    __builtin_memset(&arg1[2], 0, 0x48);
    __builtin_memset(&arg1[0x10], 0, 0x23);
    *arg1 = (_vtable_for_std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> > + 0x10);
    __builtin_memset(&arg1[0xc], 0, 0x20);
    void var_50;
    std::__ndk1::locale::locale(&var_50);
    int32_t x0_3 = std::__ndk1::locale::has_facet(&var_50);
    std::__ndk1::locale::~locale();
    if ((x0_3 & 1) != 0)
    {
        std::__ndk1::locale::locale(&var_50);
        arg1[0x10] = std::__ndk1::locale::use_facet(&var_50);
        std::__ndk1::locale::~locale();
        *(arg1 + 0xa2) = (*(*arg1[0x10] + 0x38)() & 1);
    }
    int64_t x0_10 = *(*arg1 + 0x18)(arg1, 0, 0x1000);
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_10;
}

char* nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(char* arg1)
{
    char* s = operator new(0x18);
    __builtin_memset(s, 0, 0x18);
    size_t x0_1 = strlen(arg1);
    if (x0_1 < -0x10)
    {
        int64_t x0_7 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        operator delete(s);
        std::__ndk1::fpos<mbstate_t>* x0_10;
        int32_t x1_2;
        int128_t* x8_3;
        x0_10 = _Unwind_Resume(x0_7);
        /* tailcall */
        return nlohmann::detail::exception::name(x0_10, x1_2, x8_3);
    }
    void* x22_1;
    if (x0_1 >= 0x17)
    {
        uint64_t x23_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_3 = operator new(x23_1);
        x22_1 = x0_3;
        *(s + 8) = x0_1;
        *(s + 0x10) = x0_3;
        *s = (x23_1 | 1);
    }
    else
    {
        *s = (x0_1 << 1);
        x22_1 = &s[1];
    }
    if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
    {
        memcpy(x22_1, arg1, x0_1);
    }
    *(x22_1 + x0_1) = 0;
    return s;
}

int128_t* nlohmann::detail::exception::name(std::__ndk1::fpos<mbstate_t>* arg1, int32_t arg2, int128_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >("[json.exception.", arg1);
    char var_88;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_88, ".");
    void* x8_1 = s[1];
    int128_t var_70 = *s;
    __builtin_memset(s, 0, 0x18);
    std::__ndk1::to_string(arg2);
    char var_a0;
    void* var_90;
    uint64_t x1_1;
    if ((var_a0 & 1) == 0)
    {
        x1_1 = (&var_a0 | 1);
    }
    else
    {
        x1_1 = var_90;
    }
    int128_t* s_1;
    int128_t v0_1;
    s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_70, x1_1);
    void* x8_3 = s_1[1];
    int128_t var_50 = *s_1;
    __builtin_memset(s_1, 0, 0x18);
    int128_t* s_2;
    int128_t v0_2;
    s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_50, &data_3cee2);
    arg3[1] = s_2[1];
    *arg3 = *s_2;
    __builtin_memset(s_2, 0, 0x18);
    if ((var_50 & 1) != 0)
    {
        s_2 = operator delete(x8_3);
    }
    if ((((var_50 & 1) != 0 && (var_a0 & 1) != 0) || ((var_50 & 1) == 0 && (var_a0 & 1) != 0)))
    {
        s_2 = operator delete(var_90);
        if ((var_70 & 1) != 0)
        {
            goto label_27734;
        }
    }
    if ((((((((var_50 & 1) != 0 && (var_a0 & 1) == 0) || ((var_50 & 1) == 0 && (var_a0 & 1) == 0)) && (var_70 & 1) == 0) || ((var_50 & 1) != 0 && (var_a0 & 1) != 0)) || ((var_50 & 1) == 0 && (var_a0 & 1) != 0)) && (var_88 & 1) != 0))
    {
        goto label_276e8;
    }
    if (((((var_50 & 1) != 0 && (var_a0 & 1) == 0) || ((var_50 & 1) == 0 && (var_a0 & 1) == 0)) && (var_70 & 1) != 0))
    {
    label_27734:
        s_2 = operator delete(x8_1);
        if ((var_88 & 1) != 0)
        {
        label_276e8:
            void* var_78;
            s_2 = operator delete(var_78);
        }
    }
    if (((((((((var_50 & 1) != 0 && (var_a0 & 1) == 0) || ((var_50 & 1) == 0 && (var_a0 & 1) == 0)) && (var_70 & 1) == 0) || ((var_50 & 1) != 0 && (var_a0 & 1) != 0)) || ((var_50 & 1) == 0 && (var_a0 & 1) != 0)) && (var_88 & 1) == 0) || ((((var_50 & 1) != 0 && (var_a0 & 1) == 0) || ((var_50 & 1) == 0 && (var_a0 & 1) == 0)) && (var_70 & 1) != 0)))
    {
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return s_2;
    }
}

int64_t std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(char* arg1, char* arg2, char* arg3 @ x8)
{
    __builtin_memset(arg3, 0, 0x18);
    size_t x0 = strlen(arg1);
    uint64_t x26 = *arg2;
    uint64_t x22;
    if ((x26 & 1) == 0)
    {
        x22 = (x26 >> 1);
    }
    else
    {
        x22 = *(arg2 + 8);
    }
    int64_t x8_1 = (x22 + x0);
    if (x8_1 < -0x10)
    {
        int64_t x0_7 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        if ((*arg3 & 1) != 0)
        {
            operator delete(*(arg3 + 0x10));
        }
        /* tailcall */
        return nlohmann::detail::other_error::~other_error(_Unwind_Resume(x0_7));
    }
    void* x24_1;
    if (x8_1 > 0x16)
    {
        uint64_t x25_1 = ((x8_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_5 = operator new(x25_1);
        x24_1 = x0_5;
        *(arg3 + 8) = x0;
        *(arg3 + 0x10) = x0_5;
        *arg3 = (x25_1 | 1);
    }
    else
    {
        char* x24 = arg3;
        *x24 = (x0 << 1);
        x24_1 = &x24[1];
    }
    if (((x8_1 > 0x16 && x0 != 0) || (x8_1 <= 0x16 && x0 != 0)))
    {
        memcpy(x24_1, arg1, x0);
    }
    *(x24_1 + x0) = 0;
    void* x1_1;
    if ((x26 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg3, x1_1);
}

int64_t nlohmann::detail::other_error::~other_error(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t nlohmann::detail::exception::what(int64_t arg1)
{
    /* tailcall */
    return std::runtime_error::what();
}

int64_t nlohmann::detail::exception::~exception(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

FILE* std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::open(FILE* arg1, char* arg2, int32_t arg3)
{
    FILE* x0;
    if (arg1->_old_offset != 0)
    {
        x0 = nullptr;
    }
    else
    {
        uint64_t x8_2 = ((arg3 & 0xfffffffd) - 1);
        x0 = nullptr;
        if (x8_2 <= 0x3b)
        {
            char* x8_3 = "w";
            switch (x8_2)
            {
                case 0:
                case 0x10:
                {
                    x8_3 = "a";
                    break;
                }
                case 4:
                case 0x14:
                {
                    x8_3 = &data_3cef1;
                    break;
                }
                case 7:
                {
                    x8_3 = "r";
                    break;
                }
                case 8:
                case 0x18:
                {
                    x8_3 = &data_3ceeb;
                    break;
                }
                case 0xb:
                {
                    x8_3 = &data_3cef4;
                    break;
                }
                case 0xc:
                case 0x1c:
                {
                    x8_3 = &data_3ceff;
                    break;
                }
                case 0x13:
                case 0x33:
                {
                    x8_3 = &data_3ceee;
                    break;
                }
                case 0x17:
                {
                    x8_3 = &data_3cee5;
                    break;
                }
                case 0x1b:
                {
                    x8_3 = &data_3cef7;
                    break;
                }
                case 0x37:
                {
                    x8_3 = &data_3cee8;
                    break;
                }
                case 0x3b:
                {
                    x8_3 = &data_3cefb;
                    break;
                }
            }
            if ((((((((((((((((((x8_2 == 0 || x8_2 == 4) || x8_2 == 7) || x8_2 == 8) || x8_2 == 0xb) || x8_2 == 0xc) || x8_2 == 0xf) || x8_2 == 0x10) || x8_2 == 0x13) || x8_2 == 0x14) || x8_2 == 0x17) || x8_2 == 0x18) || x8_2 == 0x1b) || x8_2 == 0x1c) || x8_2 == 0x2f) || x8_2 == 0x33) || x8_2 == 0x37) || x8_2 == 0x3b))
            {
                x0 = fopen(arg2, x8_3);
                arg1->_old_offset = x0;
                if (x0 != 0)
                {
                    arg1->_codecvt = arg3;
                    int32_t x0_2;
                    if ((arg3 & 2) != 0)
                    {
                        x0_2 = fseek(x0, 0, 2);
                        if (x0_2 != 0)
                        {
                            fclose(arg1->_old_offset);
                            x0 = nullptr;
                            arg1->_old_offset = 0;
                        }
                    }
                    if (((arg3 & 2) == 0 || ((arg3 & 2) != 0 && x0_2 == 0)))
                    {
                        x0 = arg1;
                    }
                }
            }
        }
    }
    return x0;
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parser(void* arg1, int128_t* arg2, void* arg3, char arg4)
{
    int64_t* x8 = *(arg3 + 0x20);
    if (x8 == 0)
    {
        *(arg1 + 0x20) = 0;
    }
    else if (arg3 == x8)
    {
        *(arg1 + 0x20) = arg1;
        *(**(arg3 + 0x20) + 0x18)();
    }
    else
    {
        int64_t x0_1;
        int128_t v0;
        x0_1 = *(*x8 + 0x10)(x8);
        *(arg1 + 0x20) = x0_1;
    }
    *(arg1 + 0x30) = 0;
    *(arg1 + 0x38) = *arg2;
    *arg2 = 0;
    *(arg2 + 8) = 0;
    *(arg1 + 0x48) = 0xffffffff;
    *(arg1 + 0x4c) = 0;
    __builtin_memset((arg1 + 0x50), 0, 0x48);
    *(arg1 + 0x98) = &data_3cde1;
    __builtin_memset((arg1 + 0xa0), 0, 0x18);
    char* x9_3 = *localeconv();
    char x9_4;
    if (x9_3 == 0)
    {
        x9_4 = 0x2e;
    }
    else
    {
        x9_4 = *x9_3;
    }
    *(arg1 + 0xb8) = x9_4;
    *(arg1 + 0xc0) = (arg4 & 1);
    int32_t x0_5 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
    *(arg1 + 0x30) = x0_5;
    return x0_5;
}

void sub_27b68(int64_t arg1, void* arg2 @ x19) __noreturn
{
    if ((*(arg2 + 0x80) & 1) != 0)
    {
        operator delete(*(arg2 + 0x90));
    }
    void* x0_1 = *(arg2 + 0x68);
    if (x0_1 != 0)
    {
        *(arg2 + 0x70) = x0_1;
        operator delete(x0_1);
    }
    int64_t* x21 = *(arg2 + 0x40);
    if (x21 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x21[1]);
            i = __stlxr((x9_1 - 1), &x21[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x21 + 0x10)(x21);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    int64_t* x0_4 = *(arg2 + 0x20);
    int64_t x8_4;
    if (arg2 == x0_4)
    {
        x8_4 = *(*x0_4 + 0x20);
    }
    if ((arg2 != x0_4 && x0_4 != 0))
    {
        x8_4 = *(*x0_4 + 0x28);
    }
    if ((arg2 == x0_4 || (arg2 != x0_4 && x0_4 != 0)))
    {
        x8_4();
    }
    sub_1908c(_Unwind_Resume(arg1));
    /* no return */
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(std::__ndk1::fpos<mbstate_t>* arg1, int32_t arg2, char* arg3)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t* x0 = *(arg1 + 0x20);
    int64_t x0_10;
    char var_1a8;
    void* var_198;
    int128_t var_190;
    char var_148;
    void* var_138;
    char* var_100;
    if (x0 == 0)
    {
        char x9_1 = *(arg1 + 0xc0);
        var_100 = arg3;
        int128_t s;
        __builtin_memset(&s, 0, 0x11);
        int64_t var_f8_1 = {0};
        char var_d7_1 = x9_1;
        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(arg1);
        if ((arg2 & 1) != 0)
        {
            int32_t x0_4 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
            *(arg1 + 0x30) = x0_4;
            if (x0_4 != 0xf)
            {
                std::__ndk1::fpos<mbstate_t>* x21_1 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t v0_1 = *(arg1 + 0x50);
                int64_t x8_3 = *(arg1 + 0x60);
                char var_1c0_1 = 0;
                int64_t var_1b8_1 = 0;
                void* var_1b0_1 = nullptr;
                __builtin_strcpy(&var_1c0_1, "\nvalue");
                int64_t var_180_1 = x8_3;
                var_190 = v0_1;
                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[6]);
                nlohmann::detail::parse_error::create(0x65, &var_190, &var_1a8);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(&var_100, x21_1, &var_148);
                void* var_170_1 = (_vtable_for_nlohmann::detail::exception + 0x10);
                std::runtime_error::~runtime_error();
                std::exception::~exception();
                if ((var_1a8 & 1) != 0)
                {
                    operator delete(var_198);
                }
                if ((((var_1a8 & 1) != 0 && (var_1c0_1 & 1) != 0) || ((var_1a8 & 1) == 0 && (var_1c0_1 & 1) != 0)))
                {
                    operator delete(var_1b0_1);
                    if ((var_148 & 1) != 0)
                    {
                        goto label_27d54;
                    }
                }
                if (((((var_1a8 & 1) != 0 && (var_1c0_1 & 1) == 0) || ((var_1a8 & 1) == 0 && (var_1c0_1 & 1) == 0)) && (var_148 & 1) != 0))
                {
                label_27d54:
                    operator delete(var_138);
                }
            }
        }
        char var_d8;
        if (var_d8 != 0)
        {
            char x1_2 = *arg3;
            *arg3 = 8;
            char var_1f0_1 = x1_2;
            int64_t x8_9 = *(arg3 + 8);
            *(arg3 + 8) = 0;
            int64_t var_1e8 = x8_9;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_1e8);
        }
        x0_10 = var_f8_1;
        if (x0_10 != 0)
        {
            var_f8_1 = x0_10;
            x0_10 = operator delete(x0_10);
        }
    }
    else
    {
        void var_130;
        int64_t* var_110_1;
        if (arg1 == x0)
        {
            var_110_1 = &var_130;
            *(*x0 + 0x18)();
        }
        else
        {
            var_110_1 = *(*x0 + 0x10)();
        }
        *(arg1 + 0xc0);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(&var_100, arg3, &var_130);
        int64_t x8_13;
        if (&var_130 == var_110_1)
        {
            x8_13 = *(*var_110_1 + 0x20);
        }
        if ((&var_130 != var_110_1 && var_110_1 != 0))
        {
            x8_13 = *(*var_110_1 + 0x28);
        }
        if ((&var_130 == var_110_1 || (&var_130 != var_110_1 && var_110_1 != 0)))
        {
            x8_13();
        }
        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(arg1);
        if ((arg2 & 1) != 0)
        {
            int32_t x0_15 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
            *(arg1 + 0x30) = x0_15;
            if (x0_15 != 0xf)
            {
                std::__ndk1::fpos<mbstate_t>* x21_2 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t v0_2 = *(arg1 + 0x50);
                int64_t x8_15 = *(arg1 + 0x60);
                char var_1c0_2 = 0;
                int64_t var_1b8_2 = 0;
                void* var_1b0_2 = nullptr;
                __builtin_strcpy(&var_1c0_2, "\nvalue");
                int64_t var_180_2 = x8_15;
                var_190 = v0_2;
                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[6]);
                nlohmann::detail::parse_error::create(0x65, &var_190, &var_1a8);
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(&var_100, x21_2, &var_148);
                void* var_170_2 = (_vtable_for_nlohmann::detail::exception + 0x10);
                std::runtime_error::~runtime_error();
                std::exception::~exception();
                if ((var_1a8 & 1) != 0)
                {
                    operator delete(var_198);
                }
                if ((((var_1a8 & 1) != 0 && (var_1c0_2 & 1) != 0) || ((var_1a8 & 1) == 0 && (var_1c0_2 & 1) != 0)))
                {
                    operator delete(var_1b0_2);
                    if ((var_148 & 1) != 0)
                    {
                        goto label_27edc;
                    }
                }
                if (((((var_1a8 & 1) != 0 && (var_1c0_2 & 1) == 0) || ((var_1a8 & 1) == 0 && (var_1c0_2 & 1) == 0)) && (var_148 & 1) != 0))
                {
                label_27edc:
                    operator delete(var_138);
                }
            }
        }
        char var_a8;
        int64_t* x0_20;
        uint32_t x8_22;
        if (var_a8 == 0)
        {
            x8_22 = *arg3;
            if (x8_22 == 8)
            {
                *arg3 = 0;
                uint8_t var_1e0_1 = x8_22;
                int64_t x8_23 = *(arg3 + 8);
                int64_t var_1d8;
                x0_20 = &var_1d8;
                *(arg3 + 8) = 0;
                var_1d8 = x8_23;
            }
        }
        else
        {
            char x1_6 = *arg3;
            *arg3 = 8;
            char var_1d0_1 = x1_6;
            int64_t x8_21 = *(arg3 + 8);
            int64_t var_1c8;
            x0_20 = &var_1c8;
            *(arg3 + 8) = 0;
            var_1c8 = x8_21;
        }
        if ((var_a8 != 0 || (var_a8 == 0 && x8_22 == 8)))
        {
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(x0_20);
        }
        x0_10 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser();
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_10;
}

int64_t std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_stream_adapter, std::__ndk1::allocator<nlohmann::detail::input_stream_adapter> >::~__shared_ptr_emplace(void** arg1)
{
    int64_t* x10 = arg1[4];
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_stream_adapter, std::__ndk1::allocator<nlohmann::detail::input_stream_adapter> > + 0x10);
    arg1[3] = (_vtable_for_nlohmann::detail::input_stream_adapter + 0x10);
    void* x0 = (x10 + *(*x10 - 0x18));
    *(x0 + 0x20);
    std::__ndk1::ios_base::clear(x0);
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

void sub_281a8(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_stream_adapter, std::__ndk1::allocator<nlohmann::detail::input_stream_adapter> >::~__shared_ptr_emplace(void** arg1)
{
    int64_t* x10 = arg1[4];
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_stream_adapter, std::__ndk1::allocator<nlohmann::detail::input_stream_adapter> > + 0x10);
    arg1[3] = (_vtable_for_nlohmann::detail::input_stream_adapter + 0x10);
    void* x0 = (x10 + *(*x10 - 0x18));
    *(x0 + 0x20);
    std::__ndk1::ios_base::clear(x0);
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

void sub_28210(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_stream_adapter, std::__ndk1::allocator<nlohmann::detail::input_stream_adapter> >::__on_zero_shared(void* arg1)
{
    /* jump -> *(*(arg1 + 0x18) + 8) */
}

int64_t std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_stream_adapter, std::__ndk1::allocator<nlohmann::detail::input_stream_adapter> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

uint32_t nlohmann::detail::input_stream_adapter::get_character(void* arg1)
{
    int64_t* x0 = *(arg1 + 0x10);
    char* x8 = x0[3];
    uint32_t x0_1;
    if (x8 != x0[4])
    {
        x0[3] = &x8[1];
        x0_1 = *x8;
    }
    else
    {
        x0_1 = *(*x0 + 0x50)();
        if (x0_1 == 0xffffffff)
        {
            int64_t* x8_3 = *(arg1 + 8);
            void* x0_2 = (x8_3 + *(*x8_3 - 0x18));
            *(x0_2 + 0x20);
            std::__ndk1::ios_base::clear(x0_2);
            x0_1 = -1;
        }
    }
    return x0_1;
}

int64_t nlohmann::detail::input_stream_adapter::~input_stream_adapter(int64_t* arg1)
{
    int64_t* x8 = arg1[1];
    *arg1 = (_vtable_for_nlohmann::detail::input_stream_adapter + 0x10);
    void* x0 = (x8 + *(*x8 - 0x18));
    *(x0 + 0x20);
    return std::__ndk1::ios_base::clear(x0);
}

void sub_282d0(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t nlohmann::detail::input_stream_adapter::~input_stream_adapter(int64_t* arg1)
{
    int64_t* x8 = arg1[1];
    *arg1 = (_vtable_for_nlohmann::detail::input_stream_adapter + 0x10);
    void* x0 = (x8 + *(*x8 - 0x18));
    *(x0 + 0x20);
    std::__ndk1::ios_base::clear(x0);
    /* tailcall */
    return operator delete(arg1);
}

void sub_28320(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan(void* arg1)
{
    char const* const x8_11;
    if (*(arg1 + 0x18) != 0)
    {
    label_283d0:
        while (true)
        {
            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            uint64_t x8_8 = (*(arg1 + 0x10) + 1);
            if (x8_8 <= 0x7e)
            {
                switch (x8_8)
                {
                    case 0:
                    case 1:
                    {
                        return 0xf;
                        break;
                    }
                    case 0xa:
                    case 0xb:
                    case 0xe:
                    case 0x21:
                    {
                        continue;
                    }
                    case 0x23:
                    {
                        /* tailcall */
                        return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string();
                    }
                    case 0x2d:
                    {
                        return 0xd;
                        break;
                    }
                    case 0x2e:
                    case 0x31:
                    case 0x32:
                    case 0x33:
                    case 0x34:
                    case 0x35:
                    case 0x36:
                    case 0x37:
                    case 0x38:
                    case 0x39:
                    case 0x3a:
                    {
                        /* tailcall */
                        return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_number();
                    }
                    case 0x3b:
                    {
                        return 0xc;
                        break;
                    }
                    case 0x5c:
                    {
                        return 8;
                        break;
                    }
                    case 0x5e:
                    {
                        return 0xa;
                        break;
                    }
                    case 0x67:
                    {
                        if ((((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x61 && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x6c) && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x73) && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x65))
                        {
                            return 2;
                        }
                        break;
                    }
                    case 0x6f:
                    {
                        if (((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x75 && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x6c) && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x6c))
                        {
                            return 3;
                        }
                        break;
                    }
                    case 0x75:
                    {
                        if (((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x72 && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x75) && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x65))
                        {
                            return 1;
                        }
                        break;
                    }
                    case 0x7c:
                    {
                        return 9;
                        break;
                    }
                    case 0x7e:
                    {
                        return 0xb;
                        break;
                    }
                }
            }
            x8_11 = "invalid literal";
            break;
        }
    }
    else
    {
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() != 0xef)
        {
            void* x8_2 = (arg1 + 0x20);
            int64_t x9_1 = *x8_2;
            int64_t x10_1 = *(x8_2 - 8);
            *(x8_2 - 0xc) = 1;
            *(x8_2 - 8) = (x10_1 - 1);
            if (x9_1 == 0)
            {
                x8_2 = (arg1 + 0x28);
                x9_1 = *x8_2;
            }
            *x8_2 = (x9_1 - 1);
            if (*(arg1 + 0x10) != 0xffffffff)
            {
                *(arg1 + 0x38) = (*(arg1 + 0x38) - 1);
            }
            goto label_283d0;
        }
        if ((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0xbb && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0xbf))
        {
            goto label_283d0;
        }
        x8_11 = "invalid BOM; must be 0xEF 0xBB 0…";
    }
    *(arg1 + 0x60) = x8_11;
    return 0xe;
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get(int64_t* arg1)
{
    uint32_t x8 = *(arg1 + 0x14);
    int128_t v1;
    v1 = 1;
    *v1[8] = 1;
    *(arg1 + 0x18) = (*(arg1 + 0x18) + v1);
    int32_t x20;
    void* x25_1;
    if (x8 == 0)
    {
        x25_1 = &arg1[2];
        int32_t x0_2 = ***arg1();
        x20 = x0_2;
        *x25_1 = x0_2;
    }
    else
    {
        x25_1 = &arg1[2];
        x20 = *x25_1;
        *(x25_1 + 4) = 0;
    }
    int32_t x0_7;
    if (((x8 == 0 && x20 != 0xffffffff) || (x8 != 0 && x20 != 0xffffffff)))
    {
        char* x9_1 = arg1[7];
        int64_t x8_1 = arg1[8];
        if (x9_1 < x8_1)
        {
            *x9_1 = x20;
            arg1[7] = (arg1[7] + 1);
        }
        else
        {
            void* x21_1 = arg1[6];
            void* x22_1 = (x9_1 - x21_1);
            if ((x22_1 + 1) < 0)
            {
                /* tailcall */
                return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string(std::__ndk1::__vector_base_common<true>::__throw_length_error());
            }
            void* x8_4 = (x8_1 - x21_1);
            uint64_t x24_1;
            if (x8_4 > 0x3ffffffffffffffe)
            {
                x24_1 = 0x7fffffffffffffff;
            }
            else
            {
                uint64_t x8_5 = (x8_4 << 1);
                if (x8_5 < (x22_1 + 1))
                {
                    x24_1 = (x22_1 + 1);
                }
                else
                {
                    x24_1 = x8_5;
                }
            }
            struct Elf64_Header* const x23_1;
            if ((x8_4 > 0x3ffffffffffffffe || (x8_4 <= 0x3ffffffffffffffe && x24_1 != 0)))
            {
                x23_1 = operator new(x24_1);
            }
            if ((x8_4 <= 0x3ffffffffffffffe && x24_1 == 0))
            {
                x23_1 = nullptr;
            }
            void* x26_1 = (x23_1 + x22_1);
            *x26_1 = x20;
            if (x22_1 >= 1)
            {
                memcpy(x23_1, x21_1, x22_1);
            }
            arg1[6] = x23_1;
            arg1[7] = (x26_1 + 1);
            arg1[8] = (x23_1 + x24_1);
            if (x21_1 != 0)
            {
                operator delete(x21_1);
            }
        }
        x0_7 = *x25_1;
        if (x0_7 == 0xa)
        {
            int64_t x8_9 = (arg1[5] + 1);
            arg1[4] = 0;
            arg1[5] = x8_9;
        }
    }
    if (((x8 == 0 && x20 == 0xffffffff) || (x8 != 0 && x20 == 0xffffffff)))
    {
        x0_7 = -1;
    }
    return x0_7;
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string(void* arg1)
{
    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset();
    int64_t x0_34;
    while (true)
    {
        uint64_t x8_1 = (nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() + 1);
        char const* const x8_2;
        if (x8_1 > 0xf5)
        {
        label_28990:
            x8_2 = "invalid string: ill-formed UTF-8…";
        label_28b14:
            *(arg1 + 0x60) = x8_2;
            x0_34 = 0xe;
            break;
        }
        x8_2 = "invalid string: missing closing …";
        switch (x8_1)
        {
            case 0:
            {
                goto label_28b14;
            }
            case 1:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 2:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 3:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 4:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 5:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 6:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 7:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 8:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 9:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0xa:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0xb:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0xc:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0xd:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0xe:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0xf:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x10:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x11:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x12:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x13:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x14:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x15:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x16:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x17:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x18:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x19:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x1a:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x1b:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x1c:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x1d:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x1e:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x1f:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x20:
            {
                x8_2 = "invalid string: control characte…";
                goto label_28b14;
            }
            case 0x21:
            case 0x22:
            case 0x24:
            case 0x25:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2a:
            case 0x2b:
            case 0x2c:
            case 0x2d:
            case 0x2e:
            case 0x2f:
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x33:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
            case 0x38:
            case 0x39:
            case 0x3a:
            case 0x3b:
            case 0x3c:
            case 0x3d:
            case 0x3e:
            case 0x3f:
            case 0x40:
            case 0x41:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4a:
            case 0x4b:
            case 0x4c:
            case 0x4d:
            case 0x4e:
            case 0x4f:
            case 0x50:
            case 0x51:
            case 0x52:
            case 0x53:
            case 0x54:
            case 0x55:
            case 0x56:
            case 0x57:
            case 0x58:
            case 0x59:
            case 0x5a:
            case 0x5b:
            case 0x5c:
            case 0x5e:
            case 0x5f:
            case 0x60:
            case 0x61:
            case 0x62:
            case 0x63:
            case 0x64:
            case 0x65:
            case 0x66:
            case 0x67:
            case 0x68:
            case 0x69:
            case 0x6a:
            case 0x6b:
            case 0x6c:
            case 0x6d:
            case 0x6e:
            case 0x6f:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x75:
            case 0x76:
            case 0x77:
            case 0x78:
            case 0x79:
            case 0x7a:
            case 0x7b:
            case 0x7c:
            case 0x7d:
            case 0x7e:
            case 0x7f:
            case 0x80:
            {
                *(arg1 + 0x10);
            label_286a4:
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                continue;
            }
            case 0x23:
            {
                x0_34 = 4;
                break;
                break;
            }
            case 0x5d:
            {
                uint64_t x9_2 = (nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x22);
                x8_2 = "invalid string: forbidden charac…";
                if (x9_2 > 0x53)
                {
                    goto label_28b14;
                }
                if (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((x9_2 == 1 || x9_2 == 2) || x9_2 == 3) || x9_2 == 4) || x9_2 == 5) || x9_2 == 6) || x9_2 == 7) || x9_2 == 8) || x9_2 == 9) || x9_2 == 0xa) || x9_2 == 0xb) || x9_2 == 0xc) || x9_2 == 0xe) || x9_2 == 0xf) || x9_2 == 0x10) || x9_2 == 0x11) || x9_2 == 0x12) || x9_2 == 0x13) || x9_2 == 0x14) || x9_2 == 0x15) || x9_2 == 0x16) || x9_2 == 0x17) || x9_2 == 0x18) || x9_2 == 0x19) || x9_2 == 0x1a) || x9_2 == 0x1b) || x9_2 == 0x1c) || x9_2 == 0x1d) || x9_2 == 0x1e) || x9_2 == 0x1f) || x9_2 == 0x20) || x9_2 == 0x21) || x9_2 == 0x22) || x9_2 == 0x23) || x9_2 == 0x24) || x9_2 == 0x25) || x9_2 == 0x26) || x9_2 == 0x27) || x9_2 == 0x28) || x9_2 == 0x29) || x9_2 == 0x2a) || x9_2 == 0x2b) || x9_2 == 0x2c) || x9_2 == 0x2d) || x9_2 == 0x2e) || x9_2 == 0x2f) || x9_2 == 0x30) || x9_2 == 0x31) || x9_2 == 0x32) || x9_2 == 0x33) || x9_2 == 0x34) || x9_2 == 0x35) || x9_2 == 0x36) || x9_2 == 0x37) || x9_2 == 0x38) || x9_2 == 0x39) || x9_2 == 0x3b) || x9_2 == 0x3c) || x9_2 == 0x3d) || x9_2 == 0x3e) || x9_2 == 0x3f) || x9_2 == 0x41) || x9_2 == 0x42) || x9_2 == 0x43) || x9_2 == 0x45) || x9_2 == 0x46) || x9_2 == 0x47) || x9_2 == 0x48) || x9_2 == 0x49) || x9_2 == 0x4a) || x9_2 == 0x4b) || x9_2 == 0x4d) || x9_2 == 0x4e) || x9_2 == 0x4f) || x9_2 == 0x51))
                {
                    goto label_28b14;
                }
                if (x9_2 == 0x52)
                {
                    goto label_286a4;
                }
                if (x9_2 == 0x53)
                {
                    int32_t x0_20 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint();
                    if (x0_20 != 0xffffffff)
                    {
                        int32_t x8_10 = (x0_20 & 0xfffffc00);
                        int32_t x21_1 = x0_20;
                        int32_t x0_22;
                        int32_t x0_24;
                        int32_t x0_26;
                        if (x8_10 == 0xd800)  {  // {"20__shared_ptr_emplaceIN8nlohman…"}}
                        {
                            x0_22 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                            if (x0_22 == 0x5c)
                            {
                                x0_24 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                                if (x0_24 == 0x75)
                                {
                                    x0_26 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint();
                                    if ((x0_26 != 0xffffffff && (x0_26 >> 0xa) == 0x37))
                                    {
                                        x21_1 = ((x0_26 + (x21_1 << 0xa)) - 0x35fdc00);
                                        if (x21_1 <= 0x7f)
                                        {
                                            goto label_2891c;
                                        }
                                    }
                                }
                            }
                            if (((x0_22 != 0x5c || (x0_22 == 0x5c && x0_24 != 0x75)) || (((x0_22 == 0x5c && x0_24 == 0x75) && x0_26 != 0xffffffff) && (x0_26 >> 0xa) != 0x37)))
                            {
                                x8_2 = "invalid string: surrogate U+DC00…";
                                goto label_28b14;
                            }
                        }
                        else
                        {
                            if (x8_10 == 0xdc00)  {  // {"SA_NS_4lessIS3_EELb1EEENS7_ISA_E…"}}
                            {
                                x8_2 = "invalid string: surrogate U+DC00…";
                                goto label_28b14;
                            }
                            if (x21_1 <= 0x7f)
                            {
                            label_2891c:
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                                continue;
                            }
                        }
                        if ((((((x8_10 == 0xd800 && x0_22 == 0x5c) && x0_24 == 0x75) && x0_26 != 0xffffffff) && (x0_26 >> 0xa) == 0x37) || x8_10 != 0xd800))  {  // {"20__shared_ptr_emplaceIN8nlohman…"}}
                        {
                            if (x21_1 <= 0x7ff)
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                                goto label_286a4;
                            }
                            if (x21_1 >= 0x10000)  {  // {"_function_callE"}}
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                            }
                            else
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                            }
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                            continue;
                        }
                    }
                    x8_2 = "invalid string: '\u' must be fol…";
                    goto label_28b14;
                }
                break;
            }
            case 0x81:
            case 0x82:
            case 0x83:
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x87:
            case 0x88:
            case 0x89:
            case 0x8a:
            case 0x8b:
            case 0x8c:
            case 0x8d:
            case 0x8e:
            case 0x8f:
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
            case 0x98:
            case 0x99:
            case 0x9a:
            case 0x9b:
            case 0x9c:
            case 0x9d:
            case 0x9e:
            case 0x9f:
            case 0xa0:
            case 0xa1:
            case 0xa2:
            case 0xa3:
            case 0xa4:
            case 0xa5:
            case 0xa6:
            case 0xa7:
            case 0xa8:
            case 0xa9:
            case 0xaa:
            case 0xab:
            case 0xac:
            case 0xad:
            case 0xae:
            case 0xaf:
            case 0xb0:
            case 0xb1:
            case 0xb2:
            case 0xb3:
            case 0xb4:
            case 0xb5:
            case 0xb6:
            case 0xb7:
            case 0xb8:
            case 0xb9:
            case 0xba:
            case 0xbb:
            case 0xbc:
            case 0xbd:
            case 0xbe:
            case 0xbf:
            case 0xc0:
            case 0xc1:
            case 0xc2:
            {
                goto label_28990;
            }
            case 0xc3:
            case 0xc4:
            case 0xc5:
            case 0xc6:
            case 0xc7:
            case 0xc8:
            case 0xc9:
            case 0xca:
            case 0xcb:
            case 0xcc:
            case 0xcd:
            case 0xce:
            case 0xcf:
            case 0xd0:
            case 0xd1:
            case 0xd2:
            case 0xd3:
            case 0xd4:
            case 0xd5:
            case 0xd6:
            case 0xd7:
            case 0xd8:
            case 0xd9:
            case 0xda:
            case 0xdb:
            case 0xdc:
            case 0xdd:
            case 0xde:
            case 0xdf:
            case 0xe0:
            {
                *(arg1 + 0x10);
            label_28708:
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffc0) != 0x80)
                {
                    goto label_28990;
                }
                goto label_286a4;
            }
            case 0xe1:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffe0) != 0xa0)
                {
                    goto label_28990;
                }
                goto label_28708;
            }
            case 0xe2:
            case 0xe3:
            case 0xe4:
            case 0xe5:
            case 0xe6:
            case 0xe7:
            case 0xe8:
            case 0xe9:
            case 0xea:
            case 0xeb:
            case 0xec:
            case 0xed:
            case 0xef:
            case 0xf0:
            {
                *(arg1 + 0x10);
            label_286e8:
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffc0) != 0x80)
                {
                    goto label_28990;
                }
                goto label_28708;
            }
            case 0xee:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffe0) != 0x80)
                {
                    goto label_28990;
                }
                goto label_28708;
            }
            case 0xf1:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) - 0x90) > 0x2f)
                {
                    goto label_28990;
                }
                goto label_286e8;
            }
            case 0xf2:
            case 0xf3:
            case 0xf4:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffc0) != 0x80)
                {
                    goto label_28990;
                }
                goto label_286e8;
            }
            case 0xf5:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xfffffff0) != 0x80)
                {
                    goto label_28990;
                }
                goto label_286e8;
            }
        }
    }
    return x0_34;
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_number(void* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset();
    int32_t x1 = *(arg1 + 0x10);
    int32_t x0_3;
    char x20_1;
    int32_t x22_1;
    if ((x1 - 0x31) < 9)
    {
        x20_1 = (arg1 + 0x48);
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x20_1);
        x22_1 = 5;
    }
    else if (x1 == 0x30)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
        x22_1 = 5;
    }
    else
    {
        if (x1 == 0x2d)
        {
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
        }
        x0_3 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
        if ((x0_3 - 0x31) < 9)
        {
            *(arg1 + 0x10);
            x20_1 = (arg1 + 0x48);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x20_1);
            x22_1 = 6;
        }
    }
    char x0_8;
    char x0_20;
    int64_t x0_30;
    char const* const x8_21;
    if (((x1 - 0x31) < 9 || (((x1 - 0x31) >= 9 && x1 != 0x30) && (x0_3 - 0x31) < 9)))
    {
        int32_t x0_7;
        while (true)
        {
            x0_7 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            if ((x0_7 - 0x30) >= 0xa)
            {
                break;
            }
            *(arg1 + 0x10);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x20_1);
        }
        if (x0_7 != 0x2e)
        {
            if (x0_7 == 0x45)
            {
            label_28c24:
                *(arg1 + 0x10);
                x0_8 = x20_1;
                goto label_28c2c;
            }
            if (x0_7 == 0x65)
            {
                goto label_28c24;
            }
            goto label_28c90;
        }
        *(arg1 + 0x80);
        x0_20 = x20_1;
    label_28d38:
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x0_20);
        if ((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x30) > 9)
        {
            x8_21 = "invalid number; expected digit a…";
            goto label_28ecc;
        }
        *(arg1 + 0x10);
        x20_1 = (arg1 + 0x48);
        int32_t x0_25;
        while (true)
        {
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x20_1);
            x0_25 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            if ((x0_25 - 0x30) >= 0xa)
            {
                break;
            }
            *(arg1 + 0x10);
        }
        if (x0_25 == 0x45)
        {
            goto label_28c24;
        }
        if (x0_25 == 0x65)
        {
            goto label_28c24;
        }
    label_28c88:
        x22_1 = 7;
    label_28c90:
        void* x8_7 = (arg1 + 0x20);
        int64_t x9_1 = *x8_7;
        int64_t x10_1 = *(x8_7 - 8);
        *(x8_7 - 0xc) = 1;
        *(x8_7 - 8) = (x10_1 - 1);
        if (x9_1 == 0)
        {
            x8_7 = (arg1 + 0x28);
            x9_1 = *x8_7;
        }
        *x8_7 = (x9_1 - 1);
        if (*(arg1 + 0x10) != 0xffffffff)
        {
            *(arg1 + 0x38) = (*(arg1 + 0x38) - 1);
        }
        char* var_40 = nullptr;
        int32_t* x0_17 = __errno();
        *x0_17 = 0;
        void* x22_3;
        if (x22_1 == 5)
        {
            x22_3 = (arg1 + 0x48);
            char* x0_19;
            if ((*x22_3 & 1) != 0)
            {
                x0_19 = *(arg1 + 0x58);
            }
            else
            {
                x0_19 = (x22_3 + 1);
            }
            int64_t x0_31 = strtoull(x0_19, &var_40, 0xa);
            if (*x0_17 == 0)
            {
                *(arg1 + 0x70) = x0_31;
                x0_30 = 5;
            }
        }
        if (x22_1 == 6)
        {
            x22_3 = (arg1 + 0x48);
            void* x0_18;
            if ((*x22_3 & 1) != 0)
            {
                x0_18 = *(arg1 + 0x58);
            }
            else
            {
                x0_18 = (x22_3 + 1);
            }
            int64_t x0_29 = strtoll(x0_18, &var_40, 0xa);
            if (*x0_17 == 0)
            {
                *(arg1 + 0x68) = x0_29;
                x0_30 = 6;
            }
        }
        if (((x22_1 == 5 && *x0_17 != 0) || (x22_1 == 6 && *x0_17 != 0)))
        {
            if ((*(arg1 + 0x48) & 1) == 0)
            {
                goto label_28e14;
            }
            goto label_28e1c;
        }
        if ((x22_1 != 5 && x22_1 != 6))
        {
            x22_3 = (arg1 + 0x48);
            char* x0_32;
            if ((*(arg1 + 0x48) & 1) != 0)
            {
            label_28e1c:
                x0_32 = *(arg1 + 0x58);
                goto label_28e28;
            }
        label_28e14:
            x0_32 = (x22_3 + 1);
        label_28e28:
            x0_30 = 7;
            *(arg1 + 0x78) = strtod(x0_32, &var_40);
        }
    }
    if ((x1 - 0x31) >= 9)
    {
        if (((x1 != 0x30 && (x0_3 - 0x31) >= 9) && x0_3 == 0x30))
        {
            *(arg1 + 0x10);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
            x22_1 = 6;
        }
        if ((x1 == 0x30 || ((x1 != 0x30 && (x0_3 - 0x31) >= 9) && x0_3 == 0x30)))
        {
            int32_t x0_35 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            if ((x0_35 != 0x65 && x0_35 != 0x45))
            {
                if (x0_35 != 0x2e)
                {
                    goto label_28c90;
                }
                *(arg1 + 0x80);
                x0_20 = (arg1 + 0x48);
                goto label_28d38;
            }
            *(arg1 + 0x10);
            x0_8 = (arg1 + 0x48);
        label_28c2c:
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x0_8);
            int32_t x0_10 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            char x0_11;
            if ((x0_10 - 0x30) < 0xa)
            {
                *(arg1 + 0x10);
                x0_11 = (arg1 + 0x48);
            label_28c4c:
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x0_11);
                if ((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x30) <= 9)
                {
                    int32_t i;
                    do
                    {
                        *(arg1 + 0x10);
                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                        i = (nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x30);
                    } while (i < 0xa);
                }
                goto label_28c88;
            }
            if (x0_10 == 0x2d)
            {
            label_28da0:
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                if ((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x30) >= 0xa)
                {
                    x8_21 = "invalid number; expected digit a…";
                    goto label_28ecc;
                }
                *(arg1 + 0x10);
                x0_11 = (arg1 + 0x48);
                goto label_28c4c;
            }
            if (x0_10 == 0x2b)
            {
                goto label_28da0;
            }
            x8_21 = "invalid number; expected '+', '-…";
            goto label_28ecc;
        }
        if (((x1 != 0x30 && (x0_3 - 0x31) >= 9) && x0_3 != 0x30))
        {
            x8_21 = "invalid number; expected digit a…";
        label_28ecc:
            *(arg1 + 0x60) = x8_21;
            x0_30 = 0xe;
        }
    }
    if ((((x1 - 0x31) < 9 || (((x1 - 0x31) >= 9 && x1 != 0x30) && (x0_3 - 0x31) < 9)) || ((((x1 - 0x31) >= 9 && x1 != 0x30) && (x0_3 - 0x31) >= 9) && x0_3 != 0x30)))
    {
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_30;
    }
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset(char* arg1)
{
    char* x19 = arg1;
    if ((arg1[0x48] & 1) != 0)
    {
        **(x19 + 0x58) = 0;
        *(x19 + 0x50) = 0;
    }
    else
    {
        *(x19 + 0x48) = 0;
    }
    char* x20 = *(x19 + 0x30);
    int64_t x8_2 = *(x19 + 0x40);
    char x22 = *(x19 + 0x10);
    *(x19 + 0x38) = x20;
    void* x8_3 = (x8_2 - x20);
    if (x8_2 > x20)
    {
        *x20 = x22;
        *(x19 + 0x38) = (*(x19 + 0x38) + 1);
    }
    else
    {
        int64_t x21_1;
        if (x8_3 > 0x3ffffffffffffffe)
        {
            x21_1 = 0x7fffffffffffffff;
        }
        else
        {
            int64_t x8_6 = (x8_3 << 1);
            if (x8_6 != 0)
            {
                x21_1 = x8_6;
            }
            else
            {
                x21_1 = 1;
            }
        }
        arg1 = operator new(x21_1);
        *arg1 = x22;
        *(x19 + 0x30) = arg1;
        *(x19 + 0x38) = &arg1[1];
        *(x19 + 0x40) = &arg1[x21_1];
        if (x20 != 0)
        {
            /* tailcall */
            return operator delete(x20);
        }
    }
}

void sub_28fbc(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint(void* arg1)
{
    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
    int32_t x8 = *(arg1 + 0x10);
    int32_t x20 = (x8 - 0x30);
    if (x20 >= 0xa)
    {
        if ((x8 - 0x41) <= 5)
        {
            x20 = (x8 - 0x37);
        }
        if (((x8 - 0x41) > 5 && (x8 - 0x61) <= 5))
        {
            x20 = (x8 - 0x57);
        }
    }
    uint64_t x0_3;
    if ((((x20 >= 0xa && (x8 - 0x41) <= 5) || ((x20 >= 0xa && (x8 - 0x41) > 5) && (x8 - 0x61) <= 5)) || x20 < 0xa))
    {
        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
        int32_t x8_1 = *(arg1 + 0x10);
        int32_t x21_1 = (x8_1 - 0x30);
        if (x21_1 >= 0xa)
        {
            if ((x8_1 - 0x41) < 6)
            {
                x21_1 = (x8_1 - 0x37);
            }
            else
            {
                if ((x8_1 - 0x61) > 5)
                {
                    goto label_290d4;
                }
                x21_1 = (x8_1 - 0x57);
            }
        }
        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
        int32_t x8_2 = *(arg1 + 0x10);
        int32_t x22_1 = (x8_2 - 0x30);
        if (x22_1 >= 0xa)
        {
            if ((x8_2 - 0x41) < 6)
            {
                x22_1 = (x8_2 - 0x37);
            }
            else
            {
                if ((x8_2 - 0x61) > 5)
                {
                    goto label_290d4;
                }
                x22_1 = (x8_2 - 0x57);
            }
        }
        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
        int32_t x8_3 = *(arg1 + 0x10);
        int32_t x9_7 = (x8_3 - 0x30);
        if (x9_7 >= 0xa)
        {
            if ((x8_3 - 0x41) < 6)
            {
                x9_7 = (x8_3 - 0x37);
            }
            else
            {
                if ((x8_3 - 0x61) > 5)
                {
                    goto label_290d4;
                }
                x9_7 = (x8_3 - 0x57);
            }
        }
        x0_3 = (x9_7 + (((x20 << 0xc) + (x21_1 << 8)) + (x22_1 << 4)));
    }
    if (((x20 >= 0xa && (x8 - 0x41) > 5) && (x8 - 0x61) > 5))
    {
    label_290d4:
        x0_3 = 0xffffffff;
    }
    return x0_3;
}

int64_t* nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(int64_t* arg1, int64_t arg2, void* arg3, char arg4)
{
    *arg1 = arg2;
    arg1[0xb] = 0;
    *(arg1 + 8) = {0};
    __builtin_memset(&arg1[3], 0, 0x40);
    int64_t* x0 = *(arg3 + 0x20);
    if (x0 == 0)
    {
        arg1[0x10] = 0;
    }
    else if (arg3 == x0)
    {
        arg1[0x10] = &arg1[0xc];
        x0 = *(**(arg3 + 0x20) + 0x18)();
    }
    else
    {
        x0 = *(*x0 + 0x10)();
        arg1[0x10] = x0;
    }
    arg1[0x14] = 0;
    int64_t x8_5 = arg1[5];
    arg1[0x12] = (arg4 & 1);
    arg1[0x13] = 8;
    if (x8_5 == (arg1[6] << 6))
    {
        if ((x8_5 + 1) < 0)
        {
            int64_t x0_4 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            arg1[0x13];
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg1[0x14]);
            int64_t* x0_6 = arg1[0x10];
            int64_t x8_11;
            if (&arg1[0xc] == x0_6)
            {
                x8_11 = *(*x0_6 + 0x20);
                goto label_2926c;
            }
            void* x0_7;
            if (x0_6 != 0)
            {
                void* x0_10;
                while (true)
                {
                    x8_11 = *(*x0_6 + 0x28);
                label_2926c:
                    x8_11(x0_6);
                    x0_7 = arg1[7];
                    void* x0_9;
                    if (x0_7 != 0)
                    {
                    label_29288:
                        operator delete(x0_7);
                        x0_9 = arg1[4];
                    }
                    else
                    {
                    label_2924c:
                        x0_9 = arg1[4];
                    }
                    if (((x0_7 != 0 && x0_9 == 0) || (x0_7 == 0 && x0_9 == 0)))
                    {
                        x0_10 = arg1[1];
                        if (x0_10 != 0)
                        {
                            break;
                        }
                    }
                    if (((x0_7 != 0 && x0_9 != 0) || (x0_7 == 0 && x0_9 != 0)))
                    {
                        operator delete(x0_9);
                        x0_10 = arg1[1];
                        if (x0_10 != 0)
                        {
                            break;
                        }
                    }
                    x0_6 = _Unwind_Resume(x0_4);
                }
                arg1[2] = x0_10;
                operator delete(x0_10);
                uint64_t x0_12;
                uint64_t x1_3;
                x0_12 = _Unwind_Resume(x0_4);
                /* tailcall */
                return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(x0_12, x1_3);
            }
            x0_7 = arg1[7];
            if (x0_7 != 0)
            {
                goto label_29288;
            }
            goto label_2924c;
        }
        x0 = std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&arg1[4]);
        x8_5 = arg1[5];
    }
    int64_t* x10_1 = arg1[4];
    arg1[5] = (x8_5 + 1);
    int64_t x9_4 = ((x8_5 >> 3) & 0x1ffffffffffffff8);
    *(x10_1 + x9_4) = (*(x10_1 + x9_4) | (1 << x8_5));
    return x0;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(void* arg1, uint64_t arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    void* s_1;
    __builtin_memset(&s_1, 0, 0x18);
    while (true)
    {
        uint64_t x8_2 = (*(arg1 + 0x30) - 1);
        int64_t s;
        void* var_108;
        char var_100;
        void* var_f0;
        int128_t var_e0;
        void* var_c0;
        char var_98;
        void* s_4;
        int32_t x0_46;
        int32_t x19_1;
        if (x8_2 > 0xd)
        {
        label_29660:
            std::__ndk1::fpos<mbstate_t>* x22_1 = *(arg1 + 0x50);
            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
            int128_t v0_1 = *(arg1 + 0x50);
            int64_t x8_19 = *(arg1 + 0x60);
            __builtin_memset(&s, 0, 0x18);
            __builtin_strcpy(&s, "\nvalue");
            int64_t var_d0_1 = x8_19;
            var_e0 = v0_1;
            nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->type);
            nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
            x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_1, &var_98);
        label_29774:
            x19_1 = x0_46;
            var_c0 = (_vtable_for_nlohmann::detail::exception + 0x10);
            std::runtime_error::~runtime_error();
            std::exception::~exception();
        label_29794:
            if ((var_100 & 1) != 0)
            {
            label_29b04:
                operator delete(var_f0);
                if ((s & 1) != 0)
                {
                label_29b14:
                    operator delete(var_108);
                    if ((var_98 & 1) != 0)
                    {
                        goto label_29b24;
                    }
                    goto label_297a8;
                }
                goto label_297a4;
            }
        label_2979c:
            if ((s & 1) != 0)
            {
                goto label_29b14;
            }
        label_297a4:
            if ((var_98 & 1) != 0)
            {
            label_29b24:
                void* var_88;
                operator delete(var_88);
                s_4 = s_1;
                if (s_4 != 0)
                {
                    goto label_297b0;
                }
            label_297bc:
                if (*(x23 + 0x28) != x8)
                {
                    break;
                }
                return (x19_1 & 1);
            }
        label_297a8:
            s_4 = s_1;
            if (s_4 != 0)
            {
                goto label_297b0;
            }
            goto label_297bc;
        }
        int64_t var_78_1;
        int64_t var_70;
        int32_t x0_10;
        switch (x8_2)
        {
            case 0:
            {
                var_c0 = 1;
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg2, &var_c0);
            label_2946c:
                int64_t x8_5 = var_78_1;
                if (x8_5 == 0)
                {
                label_29650:
                    x19_1 = 1;
                    s_4 = s_1;
                    if (s_4 != 0)
                    {
                        goto label_297b0;
                    }
                }
                else
                {
                    int32_t x0_21;
                    int32_t x0_25;
                    int32_t x0_28;
                    int32_t x0_30;
                    bool cond:8_1;
                    do
                    {
                        int32_t x0_23;
                        if ((*(s_1 + (((x8_5 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_5 - 1))) == 0)
                        {
                            x0_25 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            *(arg1 + 0x30) = x0_25;
                            if (x0_25 == 0xd)
                            {
                                x0_28 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                *(arg1 + 0x30) = x0_28;
                                if (x0_28 != 4)
                                {
                                    std::__ndk1::fpos<mbstate_t>* x22_5 = *(arg1 + 0x50);
                                    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                    int128_t v0_5 = *(arg1 + 0x50);
                                    int64_t x8_28 = *(arg1 + 0x60);
                                    s = 0;
                                    int64_t var_110_1 = 0;
                                    s = 0x14;
                                    var_108 = nullptr;
                                    int64_t var_d0_5 = x8_28;
                                    var_e0 = v0_5;
                                    __builtin_strncpy(&*s[1], "object key", 0xb);
                                    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->ident.file_class);
                                    nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                                    x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_5, &var_98);
                                    break;
                                }
                                x0_30 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg2);
                                if ((x0_30 & 1) == 0)
                                {
                                    break;
                                }
                                int32_t x0_32 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                *(arg1 + 0x30) = x0_32;
                                if (x0_32 != 0xc)
                                {
                                    std::__ndk1::fpos<mbstate_t>* x22_6 = *(arg1 + 0x50);
                                    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                    int128_t v0_6 = *(arg1 + 0x50);
                                    int64_t x8_29 = *(arg1 + 0x60);
                                    __builtin_memset(&s, 0, 0x18);
                                    __builtin_strncpy(&s, " object separator", 0x12);
                                    int64_t var_d0_6 = x8_29;
                                    var_e0 = v0_6;
                                    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[3]);
                                    nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                                    x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_6, &var_98);
                                    break;
                                }
                                *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                break;
                            }
                            if (x0_25 != 0xb)
                            {
                                std::__ndk1::fpos<mbstate_t>* x22_4 = *(arg1 + 0x50);
                                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                int128_t v0_4 = *(arg1 + 0x50);
                                int64_t x8_27 = *(arg1 + 0x60);
                                s = 0xc;
                                __builtin_strncpy(&*s[1], "object", 0x17);
                                int64_t var_d0_4 = x8_27;
                                var_e0 = v0_4;
                                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[2]);
                                nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                                x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_4, &var_98);
                                break;
                            }
                            x0_23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object();
                        }
                        else
                        {
                            x0_21 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            *(arg1 + 0x30) = x0_21;
                            if (x0_21 == 0xd)
                            {
                                *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                break;
                            }
                            if (x0_21 != 0xa)
                            {
                                std::__ndk1::fpos<mbstate_t>* x22_3 = *(arg1 + 0x50);
                                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                int128_t v0_3 = *(arg1 + 0x50);
                                int64_t x8_26 = *(arg1 + 0x60);
                                __builtin_memset(&s, 0, 0x18);
                                __builtin_strcpy(&s, "\narray");
                                int64_t var_d0_3 = x8_26;
                                var_e0 = v0_3;
                                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[1]);
                                nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                                x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_3, &var_98);
                                break;
                            }
                            x0_23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array();
                        }
                        if ((x0_23 & 1) == 0)
                        {
                            break;
                        }
                        x8_5 = (var_78_1 - 1);
                        cond:8_1 = var_78_1 != 1;
                        var_78_1 = x8_5;
                    } while (cond:8_1);
                    if (((((*(s_1 + (((x8_5 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_5 - 1))) == 0 && x0_25 == 0xd) && x0_28 == 4) && (x0_30 & 1) == 0))
                    {
                        goto label_297ec;
                    }
                    if ((((*(s_1 + (((x8_5 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_5 - 1))) == 0 && x0_25 == 0xd) && x0_28 != 4))
                    {
                        goto label_29774;
                    }
                    if (!(((*(s_1 + (((x8_5 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_5 - 1))) != 0 && x0_21 == 0xd)))
                    {
                        goto label_29650;
                    }
                    continue;
                }
                goto label_297bc;
            }
            case 1:
            {
                var_c0 = 0;
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg2, &var_c0);
                goto label_2946c;
            }
            case 2:
            {
                var_c0 = nullptr;
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(arg2, &var_c0);
                goto label_2946c;
            }
            case 3:
            {
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg2, (arg1 + 0x80));
                goto label_2946c;
            }
            case 4:
            {
                var_c0 = *(arg1 + 0xa8);
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(arg2, &var_c0);
                goto label_2946c;
            }
            case 5:
            {
                var_c0 = *(arg1 + 0xa0);
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(arg2, &var_c0);
                goto label_2946c;
            }
            case 6:
            {
                void* v0 = *(arg1 + 0xb0);
                double temp0_1 = vabs_f64(v0);
                (temp0_1 - inf.0);
                if (temp0_1 < inf.0)
                {
                label_29408:
                    var_c0 = v0;
                    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(arg2, &var_c0);
                    goto label_2946c;
                }
                if (temp0_1 > inf.0)
                {
                    goto label_29408;
                }
                std::__ndk1::fpos<mbstate_t>* x20_1 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t* s_2;
                int128_t v0_7;
                s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s, nullptr, "number overflow parsing '");
                var_f0 = s_2[1];
                var_100 = *s_2;
                __builtin_memset(s_2, 0, 0x18);
                int128_t* s_3;
                int128_t v0_8;
                s_3 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_100, "'");
                void* x8_31 = s_3[1];
                var_e0 = *s_3;
                __builtin_memset(s_3, 0, 0x18);
                nlohmann::detail::out_of_range::create(0x196, &var_e0);
                x19_1 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x20_1, &var_98);
                var_c0 = (_vtable_for_nlohmann::detail::exception + 0x10);
                std::runtime_error::~runtime_error();
                std::exception::~exception();
                if ((var_e0 & 1) == 0)
                {
                    goto label_29794;
                }
                operator delete(x8_31);
                if ((var_100 & 1) != 0)
                {
                    goto label_29b04;
                }
                goto label_2979c;
            }
            case 7:
            {
                if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(arg2) & 1) == 0)
                {
                    goto label_297ec;
                }
                int32_t x0_18 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                *(arg1 + 0x30) = x0_18;
                if (x0_18 == 0xa)
                {
                    x0_10 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array();
                    goto label_29468;
                }
                int64_t x8_12 = var_78_1;
                if ((x8_12 == (var_70 << 6) && (x8_12 + 1) >= 0))
                {
                    std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&s_1);
                    x8_12 = var_78_1;
                }
                if ((x8_12 != (var_70 << 6) || (x8_12 == (var_70 << 6) && (x8_12 + 1) >= 0)))
                {
                    var_78_1 = (x8_12 + 1);
                    void* s_5 = s_1;
                    int64_t x10_5 = ((x8_12 >> 3) & 0x1ffffffffffffff8);
                    *(s_5 + x10_5) = (*(s_5 + x10_5) | (1 << x8_12));
                    continue;
                }
            label_29c58:
                std::__ndk1::__vector_base_common<true>::__throw_length_error();
                break;
                break;
            }
            case 8:
            {
                if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_object(arg2) & 1) != 0)
                {
                    int32_t x0_8 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                    *(arg1 + 0x30) = x0_8;
                    if (x0_8 == 0xb)
                    {
                        x0_10 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object();
                    label_29468:
                        if ((x0_10 & 1) != 0)
                        {
                            goto label_2946c;
                        }
                        goto label_297ec;
                    }
                    if (x0_8 != 4)
                    {
                        std::__ndk1::fpos<mbstate_t>* x22_7 = *(arg1 + 0x50);
                        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                        int128_t v0_9 = *(arg1 + 0x50);
                        int64_t x8_37 = *(arg1 + 0x60);
                        s = 0;
                        int64_t var_110_2 = 0;
                        s = 0x14;
                        var_108 = nullptr;
                        int64_t var_d0_8 = x8_37;
                        var_e0 = v0_9;
                        __builtin_strncpy(&*s[1], "object key", 0xb);
                        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->ident.file_class);
                        nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                        x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_7, &var_98);
                        goto label_29774;
                    }
                    if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg2) & 1) == 0)
                    {
                        goto label_297ec;
                    }
                    int32_t x0_38 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                    *(arg1 + 0x30) = x0_38;
                    if (x0_38 != 0xc)
                    {
                        std::__ndk1::fpos<mbstate_t>* x22_8 = *(arg1 + 0x50);
                        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                        int128_t v0_10 = *(arg1 + 0x50);
                        int64_t x8_38 = *(arg1 + 0x60);
                        __builtin_memset(&s, 0, 0x18);
                        __builtin_strncpy(&s, " object separator", 0x12);
                        int64_t var_d0_9 = x8_38;
                        var_e0 = v0_10;
                        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[3]);
                        nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                        x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_8, &var_98);
                        goto label_29774;
                    }
                    int64_t x8_9 = var_78_1;
                    if (x8_9 == (var_70 << 6))
                    {
                        if ((x8_9 + 1) < 0)
                        {
                            std::__ndk1::__vector_base_common<true>::__throw_length_error();
                        }
                        else
                        {
                            std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&s_1);
                            x8_9 = var_78_1;
                        }
                    }
                    if ((x8_9 != (var_70 << 6) || (x8_9 == (var_70 << 6) && (x8_9 + 1) >= 0)))
                    {
                        var_78_1 = (x8_9 + 1);
                        void* s_6 = s_1;
                        int64_t x10_7 = ((x8_9 >> 3) & 0x1ffffffffffffff8);
                        *(s_6 + x10_7) = (*(s_6 + x10_7) & !((1 << x8_9)));
                        *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                        continue;
                    }
                    goto label_29c58;
                }
            label_297ec:
                x19_1 = 0;
                s_4 = s_1;
                if (s_4 != 0)
                {
                label_297b0:
                    operator delete(s_4);
                }
                goto label_297bc;
            }
            case 9:
            case 0xa:
            case 0xb:
            case 0xc:
            {
                goto label_29660;
            }
            case 0xd:
            {
                std::__ndk1::fpos<mbstate_t>* x22_2 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t v0_2 = *(arg1 + 0x50);
                int64_t x8_20 = *(arg1 + 0x60);
                __builtin_memset(&s, 0, 0x18);
                __builtin_strcpy(&s, "\nvalue");
                int64_t var_d0_2 = x8_20;
                var_e0 = v0_2;
                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, nullptr);
                nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_2, &var_98);
                goto label_29774;
            }
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(void* arg1, int64_t arg2, int64_t arg3, void* arg4)
{
    uint32_t x8 = *(arg1 + 0x90);
    *(arg1 + 0x58) = 1;
    if (x8 != 0)
    {
        int64_t x8_2 = (*(arg4 + 8) * 0x51eb851f);
        uint64_t x8_6 = ((((x8_2 >> 0x25) + (x8_2 >> 0x3f)) % 0x64) - 1);
        if (x8_6 <= 4)
        {
            void* var_18 = arg4;
            struct typeinfo_for_nlohmann::detail::other_error* const tinfo;
            void* thrown_exception;
            switch (x8_6)
            {
                case 0:
                {
                    void* thrown_exception_1 = __cxa_allocate_exception(0x28);
                    thrown_exception = thrown_exception_1;
                    nlohmann::detail::parse_error::parse_error(thrown_exception_1);
                    tinfo = _typeinfo_for_nlohmann::detail::parse_error;
                    break;
                }
                case 1:
                {
                    void* thrown_exception_2 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_2;
                    nlohmann::detail::invalid_iterator::invalid_iterator(thrown_exception_2);
                    tinfo = _typeinfo_for_nlohmann::detail::invalid_iterator;
                    break;
                }
                case 2:
                {
                    void* thrown_exception_3 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_3;
                    nlohmann::detail::type_error::type_error(thrown_exception_3);
                    tinfo = _typeinfo_for_nlohmann::detail::type_error;
                    break;
                }
                case 3:
                {
                    void* thrown_exception_4 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_4;
                    nlohmann::detail::out_of_range::out_of_range(thrown_exception_4);
                    tinfo = _typeinfo_for_nlohmann::detail::out_of_range;
                    break;
                }
                case 4:
                {
                    std::__ndk1::fpos<mbstate_t>* thrown_exception_5 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_5;
                    nlohmann::detail::other_error::other_error(thrown_exception_5);
                    tinfo = _typeinfo_for_nlohmann::detail::other_error;
                    break;
                }
            }
            __cxa_throw(thrown_exception, tinfo, nlohmann::detail::exception::~exception);
            /* no return */
        }
    }
    return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string(void* arg1, char* arg2 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    __builtin_memset(arg2, 0, 0x18);
    char* x22 = *(arg1 + 0x30);
    int64_t x23 = *(arg1 + 0x38);
    if (x22 != x23)
    {
        do
        {
            if (*x22 > 0x1f)
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(arg2);
            }
            else
            {
                char var_50_1 = 0;
                int64_t var_58 = 0;
                snprintf();
                strlen(&var_58);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg2, &var_58);
            }
            x22 = &x22[1];
        } while (x23 != x22);
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t nlohmann::detail::parse_error::create(int32_t arg1, std::__ndk1::fpos<mbstate_t>* arg2, char* arg3, int64_t* arg4 @ x8)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t var_100 = 0;
    int64_t var_f8 = 0;
    var_100 = 0x16;
    void* var_f0 = nullptr;
    __builtin_strcpy(&*var_100[1], "parse_error");
    nlohmann::detail::exception::name(&var_100, arg1);
    char var_e8;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_e8, "parse error");
    void* x8_1 = s[1];
    int128_t var_d0 = *s;
    __builtin_memset(s, 0, 0x18);
    nlohmann::detail::parse_error::position_string(arg2);
    char var_118;
    uint64_t var_108;
    uint64_t x1_1;
    if ((var_118 & 1) == 0)
    {
        x1_1 = (&var_118 | 1);
    }
    else
    {
        x1_1 = var_108;
    }
    int128_t* s_1;
    int128_t v0_1;
    s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_d0, x1_1);
    void* x8_3 = s_1[1];
    int128_t var_b0 = *s_1;
    __builtin_memset(s_1, 0, 0x18);
    int128_t* s_2;
    int128_t v0_2;
    s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_b0, ": ");
    void* x8_4 = s_2[1];
    int128_t var_90 = *s_2;
    __builtin_memset(s_2, 0, 0x18);
    *(arg3 + 8);
    void* x1_2;
    if ((*arg3 & 1) != 0)
    {
        x1_2 = *(arg3 + 0x10);
    }
    else
    {
        x1_2 = &arg3[1];
    }
    int128_t* s_3;
    int128_t v0_3;
    s_3 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_90, x1_2);
    void* x8_6 = s_3[1];
    int128_t var_70 = *s_3;
    __builtin_memset(s_3, 0, 0x18);
    if ((var_90 & 1) != 0)
    {
        operator delete(x8_4);
    }
    if ((((var_90 & 1) != 0 && (var_b0 & 1) != 0) || ((var_90 & 1) == 0 && (var_b0 & 1) != 0)))
    {
        operator delete(x8_3);
        if ((var_118 & 1) != 0)
        {
            goto label_2a26c;
        }
    }
    if (((var_118 & 1) != 0 && (((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0))))
    {
    label_2a26c:
        operator delete(var_108);
        if ((var_d0 & 1) != 0)
        {
        label_2a27c:
            operator delete(x8_1);
            if ((var_e8 & 1) != 0)
            {
                goto label_2a28c;
            }
        }
    }
    if (((((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) != 0) && (var_d0 & 1) == 0) || (((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) == 0) || ((var_90 & 1) != 0 && (var_b0 & 1) != 0)) || ((var_90 & 1) == 0 && (var_b0 & 1) != 0)) && (var_d0 & 1) == 0)) && (var_e8 & 1) == 0) || (((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) != 0) && (var_d0 & 1) != 0)))
    {
        if ((var_100 & 1) != 0)
        {
            goto label_2a1bc;
        }
    label_2a1c8:
        int64_t x21_1 = *arg2;
        arg4[1] = arg1;
        *arg4 = (_vtable_for_nlohmann::detail::exception + 0x10);
        int64_t x0_8 = std::runtime_error::runtime_error(&arg4[2]);
        uint32_t x8_14 = var_70;
        arg4[4] = x21_1;
        *arg4 = (_vtable_for_nlohmann::detail::parse_error + 0x10);
        if ((x8_14 & 1) != 0)
        {
            x0_8 = operator delete(x8_6);
        }
        if (*(x23 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_8;
    }
    if ((((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) != 0) && (var_d0 & 1) == 0) || (((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) == 0) || ((var_90 & 1) != 0 && (var_b0 & 1) != 0)) || ((var_90 & 1) == 0 && (var_b0 & 1) != 0)) && (var_d0 & 1) == 0)) && (var_e8 & 1) != 0))
    {
    label_2a28c:
        void* var_d8;
        operator delete(var_d8);
        if ((var_100 & 1) != 0)
        {
        label_2a1bc:
            operator delete(var_f0);
        }
        goto label_2a1c8;
    }
    if ((((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) == 0) || ((var_90 & 1) != 0 && (var_b0 & 1) != 0)) || ((var_90 & 1) == 0 && (var_b0 & 1) != 0)) && (var_d0 & 1) != 0))
    {
        goto label_2a27c;
    }
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(void* arg1, int32_t arg2, char* arg3, char* arg4 @ x8)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    __builtin_memset(arg4, 0, 0x18);
    *arg4 = 0x1a;
    __builtin_strncpy(&arg4[1], "syntax error ", 0xe);
    uint64_t x8_1 = *arg3;
    uint64_t x8_2;
    if ((x8_1 & 1) == 0)
    {
        x8_2 = (x8_1 >> 1);
    }
    else
    {
        x8_2 = *(arg3 + 8);
    }
    int64_t s_1;
    int128_t var_70;
    if (x8_2 != 0)
    {
        std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >("while parsing ", arg3);
        int128_t* s_2;
        int128_t v0_1;
        s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_1, &data_3cde0);
        void* x8_3 = s_2[1];
        var_70 = *s_2;
        __builtin_memset(s_2, 0, 0x18);
        uint64_t x1_1;
        if ((var_70 & 1) == 0)
        {
            x1_1 = (&var_70 | 1);
        }
        else
        {
            x1_1 = x8_3;
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, x1_1);
        if ((var_70 & 1) != 0)
        {
            operator delete(x8_3);
        }
        void* var_80;
        if ((s_1 & 1) != 0)
        {
            operator delete(var_80);
        }
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, &data_3dbdf);
    int64_t x8_7 = *(arg1 + 0x30);
    int64_t x0_17;
    void* x0_24;
    if (x8_7 == 0xe)
    {
        char* x22_1 = *(arg1 + 0x98);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        size_t x0_6 = strlen(x22_1);
        if (x0_6 < -0x10)
        {
            goto label_2a8d0;
        }
        void* var_b8_1;
        void* x24_1;
        if (x0_6 >= 0x17)
        {
            uint64_t x25_1 = ((x0_6 + 0x10) & 0xfffffffffffffff0);
            void* x0_10 = operator new(x25_1);
            x24_1 = x0_10;
            size_t var_c0_1 = x0_6;
            var_b8_1 = x0_10;
            s = (x25_1 | 1);
        }
        else
        {
            x24_1 = (&s | 1);
            s = (x0_6 << 1);
        }
        if ((x0_6 >= 0x17 || (x0_6 < 0x17 && x0_6 != 0)))
        {
            memcpy(x24_1, x22_1, x0_6);
        }
        *(x24_1 + x0_6) = 0;
        int128_t* s_3;
        int128_t v0_2;
        s_3 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s, "; last read: '");
        void* x8_12 = s_3[1];
        int128_t var_b0 = *s_3;
        __builtin_memset(s_3, 0, 0x18);
        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
        char var_e0;
        uint64_t var_d0;
        uint64_t x1_3;
        if ((var_e0 & 1) == 0)
        {
            x1_3 = (&var_e0 | 1);
        }
        else
        {
            x1_3 = var_d0;
        }
        int128_t* s_4;
        int128_t v0_3;
        s_4 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_b0, x1_3);
        void* x8_14 = s_4[1];
        s_1 = *s_4;
        __builtin_memset(s_4, 0, 0x18);
        int128_t* s_5;
        int128_t v0_4;
        s_5 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_1, "'");
        uint64_t x8_15 = s_5[1];
        var_70 = *s_5;
        __builtin_memset(s_5, 0, 0x18);
        uint64_t x1_4;
        if ((var_70 & 1) == 0)
        {
            x1_4 = (&var_70 | 1);
        }
        else
        {
            x1_4 = x8_15;
        }
        x0_17 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, x1_4);
        if ((var_70 & 1) != 0)
        {
            x0_17 = operator delete(x8_15);
        }
        if ((((var_70 & 1) != 0 && (s_1 & 1) != 0) || ((var_70 & 1) == 0 && (s_1 & 1) != 0)))
        {
            x0_17 = operator delete(x8_14);
            if ((var_e0 & 1) != 0)
            {
                goto label_2a760;
            }
        }
        if (((var_e0 & 1) != 0 && (((var_70 & 1) != 0 && (s_1 & 1) == 0) || ((var_70 & 1) == 0 && (s_1 & 1) == 0))))
        {
        label_2a760:
            x0_17 = operator delete(var_d0);
            if ((var_b0 & 1) != 0)
            {
            label_2a770:
                x0_17 = operator delete(x8_12);
                if ((s & 1) != 0)
                {
                    goto label_2a77c;
                }
            }
        }
        if ((((((((var_70 & 1) != 0 && (s_1 & 1) == 0) || ((var_70 & 1) == 0 && (s_1 & 1) == 0)) && (var_e0 & 1) != 0) && (var_b0 & 1) == 0) || (((((((var_70 & 1) != 0 && (s_1 & 1) == 0) || ((var_70 & 1) == 0 && (s_1 & 1) == 0)) && (var_e0 & 1) == 0) || ((var_70 & 1) != 0 && (s_1 & 1) != 0)) || ((var_70 & 1) == 0 && (s_1 & 1) != 0)) && (var_b0 & 1) == 0)) && (s & 1) != 0))
        {
        label_2a77c:
            x0_24 = var_b8_1;
            goto label_2a780;
        }
        if ((((((((var_70 & 1) != 0 && (s_1 & 1) == 0) || ((var_70 & 1) == 0 && (s_1 & 1) == 0)) && (var_e0 & 1) == 0) || ((var_70 & 1) != 0 && (s_1 & 1) != 0)) || ((var_70 & 1) == 0 && (s_1 & 1) != 0)) && (var_b0 & 1) != 0))
        {
            goto label_2a770;
        }
    }
    else
    {
        char* x21_1;
        if (x8_7 > 0x10)
        {
            x21_1 = "unknown token";
        }
        else
        {
            x21_1 = &data_56240[x8_7];
        }
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_8 = strlen(x21_1);
        if (x0_8 < -0x10)
        {
            goto label_2a8d8;
        }
        void* var_80_1;
        void* x23_2;
        if (x0_8 >= 0x17)
        {
            uint64_t x24_2 = ((x0_8 + 0x10) & 0xfffffffffffffff0);
            void* x0_19 = operator new(x24_2);
            x23_2 = x0_19;
            size_t var_88_1 = x0_8;
            var_80_1 = x0_19;
            s_1 = (x24_2 | 1);
        }
        else
        {
            x23_2 = (&s_1 | 1);
            s_1 = (x0_8 << 1);
        }
        if ((x0_8 >= 0x17 || (x0_8 < 0x17 && x0_8 != 0)))
        {
            memcpy(x23_2, x21_1, x0_8);
        }
        *(x23_2 + x0_8) = 0;
        int128_t* s_6;
        int128_t v0_5;
        s_6 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_1, nullptr, "unexpected ");
        uint64_t x8_24 = s_6[1];
        var_70 = *s_6;
        __builtin_memset(s_6, 0, 0x18);
        uint64_t x1_6;
        if ((var_70 & 1) == 0)
        {
            x1_6 = (&var_70 | 1);
        }
        else
        {
            x1_6 = x8_24;
        }
        x0_17 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, x1_6);
        if ((var_70 & 1) != 0)
        {
            x0_17 = operator delete(x8_24);
        }
        if ((s_1 & 1) != 0)
        {
            x0_24 = var_80_1;
        label_2a780:
            x0_17 = operator delete(x0_24);
        }
    }
    if (arg2 != 0)
    {
        char* x20_1;
        if ((arg2 - 1) > 0xf)
        {
            x20_1 = "unknown token";
        }
        else
        {
            x20_1 = &data_562c8[(arg2 - 1)];
        }
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_30 = strlen(x20_1);
        if (x0_30 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2a8d0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2a8d8:
            int64_t x0_38 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((*arg4 & 1) != 0)
            {
                operator delete(*(arg4 + 0x10));
            }
            /* tailcall */
            return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(x0_38));
        }
        void* var_80_3;
        void* x22_3;
        if (x0_30 >= 0x17)
        {
            uint64_t x23_3 = ((x0_30 + 0x10) & 0xfffffffffffffff0);
            void* x0_32 = operator new(x23_3);
            x22_3 = x0_32;
            size_t var_88_2 = x0_30;
            var_80_3 = x0_32;
            s_1 = (x23_3 | 1);
        }
        else
        {
            x22_3 = (&s_1 | 1);
            s_1 = (x0_30 << 1);
        }
        if ((x0_30 >= 0x17 || (x0_30 < 0x17 && x0_30 != 0)))
        {
            memcpy(x22_3, x20_1, x0_30);
        }
        *(x22_3 + x0_30) = 0;
        int128_t* s_7;
        int128_t v0_6;
        s_7 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_1, nullptr, "; expected ");
        uint64_t x8_36 = s_7[1];
        var_70 = *s_7;
        __builtin_memset(s_7, 0, 0x18);
        uint64_t x1_8;
        if ((var_70 & 1) == 0)
        {
            x1_8 = (&var_70 | 1);
        }
        else
        {
            x1_8 = x8_36;
        }
        x0_17 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, x1_8);
        if ((var_70 & 1) != 0)
        {
            x0_17 = operator delete(x8_36);
        }
        if ((s_1 & 1) != 0)
        {
            x0_17 = operator delete(var_80_3);
        }
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_17;
}

int64_t sub_2a8e8(int64_t arg1, char* arg2 @ x19, void* arg3 @ x29, char arg4, void* arg5)
{
    if ((*(arg3 - 0x60) & 1) != 0)
    {
        operator delete(*(arg3 - 0x50));
    }
    if ((((*(arg3 - 0x60) & 1) == 0 && (arg4 & 1) != 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        if ((*arg2 & 1) != 0)
        {
            goto label_2aa10;
        }
    }
    if (((((*(arg3 - 0x60) & 1) == 0 && (arg4 & 1) == 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg4 & 1) == 0)) && (*arg2 & 1) != 0))
    {
    label_2aa10:
        operator delete(*(arg2 + 0x10));
    }
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(arg1));
}

int64_t sub_2a8ec(int64_t arg1, char* arg2 @ x19, void* arg3 @ x29, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11)
{
    if ((*(arg3 - 0x60) & 1) != 0)
    {
        operator delete(*(arg3 - 0x50));
    }
    if ((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) != 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) != 0)))
    {
        operator delete(arg11);
        if ((arg4 & 1) != 0)
        {
            goto label_2a960;
        }
    }
    if (((arg4 & 1) != 0 && (((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0))))
    {
    label_2a960:
        operator delete(arg5);
        if ((arg8 & 1) != 0)
        {
        label_2a970:
            operator delete(arg9);
            if ((arg6 & 1) != 0)
            {
                goto label_2a9ec;
            }
        }
    }
    if (((((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) != 0) && (arg8 & 1) == 0) || (((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) == 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) != 0)) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) != 0)) && (arg8 & 1) == 0)) && (arg6 & 1) == 0) || (((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) != 0) && (arg8 & 1) != 0)))
    {
        if ((*arg2 & 1) == 0)
        {
            goto label_2aa18;
        }
    label_2aa10:
        operator delete(*(arg2 + 0x10));
    label_2aa18:
        /* tailcall */
        return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(arg1));
    }
    if ((((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) != 0) && (arg8 & 1) == 0) || (((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) == 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) != 0)) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) != 0)) && (arg8 & 1) == 0)) && (arg6 & 1) != 0))
    {
    label_2a9ec:
        operator delete(arg7);
        if ((*arg2 & 1) != 0)
        {
            goto label_2aa10;
        }
        goto label_2aa18;
    }
    if ((((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) == 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) != 0)) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) != 0)) && (arg8 & 1) != 0))
    {
        goto label_2a970;
    }
}

int64_t sub_2a990(int64_t arg1, char* arg2 @ x19, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) != 0 && (*arg2 & 1) != 0) || ((arg3 & 1) == 0 && (*arg2 & 1) != 0)))
    {
        operator delete(*(arg2 + 0x10));
    }
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(arg1));
}

int64_t sub_2a9dc(int64_t arg1, char* arg2 @ x19, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (*arg2 & 1) != 0) || ((arg3 & 1) != 0 && (*arg2 & 1) != 0)))
    {
        operator delete(*(arg2 + 0x10));
    }
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(arg1));
}

void* nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(void* arg1)
{
    *(arg1 + 0x98);
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy((arg1 + 0xa0));
    int64_t* x0_1 = *(arg1 + 0x80);
    int64_t x8_2;
    if ((arg1 + 0x60) == x0_1)
    {
        x8_2 = *(*x0_1 + 0x20);
    }
    if (((arg1 + 0x60) != x0_1 && x0_1 != 0))
    {
        x8_2 = *(*x0_1 + 0x28);
    }
    if (((arg1 + 0x60) == x0_1 || ((arg1 + 0x60) != x0_1 && x0_1 != 0)))
    {
        x8_2();
    }
    void* x0_2 = *(arg1 + 0x38);
    if (x0_2 != 0)
    {
        operator delete(x0_2);
    }
    void* x0_3 = *(arg1 + 0x20);
    if (x0_3 != 0)
    {
        operator delete(x0_3);
    }
    void* x0_4 = *(arg1 + 8);
    if (x0_4 == 0)
    {
        return x0_4;
    }
    *(arg1 + 0x10) = x0_4;
    /* tailcall */
    return operator delete(x0_4);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(void* arg1, uint64_t arg2)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    void* s_1;
    __builtin_memset(&s_1, 0, 0x18);
    while (true)
    {
        uint64_t x8_2 = (*(arg1 + 0x30) - 1);
        int64_t s;
        void* var_118;
        char var_110;
        void* var_100;
        int128_t var_f0;
        char var_b0;
        void* s_4;
        int32_t x0_42;
        int32_t x19_1;
        if (x8_2 > 0xd)
        {
        label_2ae90:
            std::__ndk1::fpos<mbstate_t>* x22_1 = *(arg1 + 0x50);
            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
            int128_t v0_1 = *(arg1 + 0x50);
            int64_t x8_29 = *(arg1 + 0x60);
            __builtin_memset(&s, 0, 0x18);
            __builtin_strcpy(&s, "\nvalue");
            int64_t var_e0_1 = x8_29;
            var_f0 = v0_1;
            nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->type);
            nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
            x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_1, &var_b0);
        label_2afa4:
            x19_1 = x0_42;
            void* var_d8_1 = (_vtable_for_nlohmann::detail::exception + 0x10);
            std::runtime_error::~runtime_error();
            std::exception::~exception();
        label_2afc4:
            if ((var_110 & 1) != 0)
            {
            label_2b334:
                operator delete(var_100);
                if ((s & 1) != 0)
                {
                label_2b344:
                    operator delete(var_118);
                    if ((var_b0 & 1) != 0)
                    {
                        goto label_2b354;
                    }
                    goto label_2afd8;
                }
                goto label_2afd4;
            }
        label_2afcc:
            if ((s & 1) != 0)
            {
                goto label_2b344;
            }
        label_2afd4:
            if ((var_b0 & 1) != 0)
            {
            label_2b354:
                void* var_a0;
                operator delete(var_a0);
                s_4 = s_1;
                if (s_4 != 0)
                {
                    goto label_2afe0;
                }
            label_2afec:
                if (*(x24 + 0x28) != x8)
                {
                    break;
                }
                return (x19_1 & 1);
            }
        label_2afd8:
            s_4 = s_1;
            if (s_4 != 0)
            {
                goto label_2afe0;
            }
            goto label_2afec;
        }
        double var_d8;
        int64_t var_90_1;
        int64_t var_88;
        int64_t x8_8;
        switch (x8_2)
        {
            case 0:
            {
                var_d8 = 1;
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg2);
            label_2ac18:
                x8_8 = var_90_1;
                if (x8_8 == 0)
                {
                label_2ae80:
                    x19_1 = 1;
                    s_4 = s_1;
                    if (s_4 != 0)
                    {
                    label_2afe0:
                        operator delete(s_4);
                    }
                }
                else
                {
                label_2ac94:
                    int32_t x0_12;
                    int32_t x0_14;
                    int32_t x0_16;
                    bool cond:7_1;
                    do
                    {
                        if ((*(s_1 + (((x8_8 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_8 - 1))) == 0)
                        {
                            x0_14 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            *(arg1 + 0x30) = x0_14;
                            if (x0_14 == 0xd)
                            {
                                x0_16 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                *(arg1 + 0x30) = x0_16;
                                break;
                            }
                            if (x0_14 != 0xb)
                            {
                                std::__ndk1::fpos<mbstate_t>* x22_4 = *(arg1 + 0x50);
                                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                int128_t v0_4 = *(arg1 + 0x50);
                                int64_t x8_37 = *(arg1 + 0x60);
                                s = 0xc;
                                __builtin_strncpy(&*s[1], "object", 0x17);
                                int64_t var_e0_4 = x8_37;
                                var_f0 = v0_4;
                                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[2]);
                                nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                                x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_4, &var_b0);
                                break;
                            }
                        }
                        else
                        {
                            x0_12 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            *(arg1 + 0x30) = x0_12;
                            if (x0_12 == 0xd)
                            {
                                *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                break;
                            }
                            if (x0_12 != 0xa)
                            {
                                std::__ndk1::fpos<mbstate_t>* x22_3 = *(arg1 + 0x50);
                                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                int128_t v0_3 = *(arg1 + 0x50);
                                int64_t x8_36 = *(arg1 + 0x60);
                                __builtin_memset(&s, 0, 0x18);
                                __builtin_strcpy(&s, "\narray");
                                int64_t var_e0_3 = x8_36;
                                var_f0 = v0_3;
                                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[1]);
                                nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                                x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_3, &var_b0);
                                break;
                            }
                        }
                        *(arg2 + 0x10) = (*(arg2 + 0x10) - 8);
                        x8_8 = (var_90_1 - 1);
                        cond:7_1 = var_90_1 != 1;
                        var_90_1 = x8_8;
                    } while (cond:7_1);
                    if (((*(s_1 + (((x8_8 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_8 - 1))) == 0 && x0_14 == 0xd))
                    {
                        if (x0_16 != 4)
                        {
                            std::__ndk1::fpos<mbstate_t>* x22_5 = *(arg1 + 0x50);
                            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                            int128_t v0_5 = *(arg1 + 0x50);
                            int64_t x8_38 = *(arg1 + 0x60);
                            s = 0;
                            int64_t var_120_1 = 0;
                            s = 0x14;
                            var_118 = nullptr;
                            int64_t var_e0_5 = x8_38;
                            var_f0 = v0_5;
                            __builtin_strncpy(&*s[1], "object key", 0xb);
                            nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->ident.file_class);
                            nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                            x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_5, &var_b0);
                            goto label_2afa4;
                        }
                        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg2) & 1) == 0)
                        {
                            goto label_2b0a4;
                        }
                        int32_t x0_20 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                        *(arg1 + 0x30) = x0_20;
                        if (x0_20 != 0xc)
                        {
                            std::__ndk1::fpos<mbstate_t>* x22_6 = *(arg1 + 0x50);
                            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                            int128_t v0_6 = *(arg1 + 0x50);
                            int64_t x8_39 = *(arg1 + 0x60);
                            __builtin_memset(&s, 0, 0x18);
                            __builtin_strncpy(&s, " object separator", 0x12);
                            int64_t var_e0_6 = x8_39;
                            var_f0 = v0_6;
                            nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[3]);
                            nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                            x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_6, &var_b0);
                        }
                        else
                        {
                            *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            continue;
                        }
                        goto label_2afa4;
                    }
                    if ((((*(s_1 + (((x8_8 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_8 - 1))) == 0 && x0_14 != 0xd) && x0_14 != 0xb))
                    {
                        goto label_2afa4;
                    }
                    if (!(((*(s_1 + (((x8_8 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_8 - 1))) != 0 && x0_12 == 0xd)))
                    {
                        goto label_2ae80;
                    }
                    continue;
                }
                goto label_2afec;
            }
            case 1:
            {
                var_d8 = 0;
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg2);
                goto label_2ac18;
            }
            case 2:
            {
                var_d8 = 0.0;
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(arg2);
                goto label_2ac18;
            }
            case 3:
            {
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg2);
                goto label_2ac18;
            }
            case 4:
            {
                var_d8 = *(arg1 + 0xa8);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(arg2);
                goto label_2ac18;
            }
            case 5:
            {
                var_d8 = *(arg1 + 0xa0);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(arg2);
                goto label_2ac18;
            }
            case 6:
            {
                double v0 = *(arg1 + 0xb0);
                double temp0_1 = vabs_f64(v0);
                (temp0_1 - inf.0);
                if (temp0_1 < inf.0)
                {
                label_2abf0:
                    var_d8 = v0;
                    nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(arg2);
                    goto label_2ac18;
                }
                if (temp0_1 > inf.0)
                {
                    goto label_2abf0;
                }
                std::__ndk1::fpos<mbstate_t>* x20_1 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t* s_2;
                int128_t v0_7;
                s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s, nullptr, "number overflow parsing '");
                var_100 = s_2[1];
                var_110 = *s_2;
                __builtin_memset(s_2, 0, 0x18);
                int128_t* s_3;
                int128_t v0_8;
                s_3 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_110, "'");
                void* x8_41 = s_3[1];
                var_f0 = *s_3;
                __builtin_memset(s_3, 0, 0x18);
                nlohmann::detail::out_of_range::create(0x196, &var_f0);
                x19_1 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x20_1, &var_b0);
                void* var_d8_2 = (_vtable_for_nlohmann::detail::exception + 0x10);
                std::runtime_error::~runtime_error();
                std::exception::~exception();
                if ((var_f0 & 1) == 0)
                {
                    goto label_2afc4;
                }
                operator delete(x8_41);
                if ((var_110 & 1) != 0)
                {
                    goto label_2b334;
                }
                goto label_2afcc;
            }
            case 7:
            {
                var_b0 = 2;
                double x0_24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg2);
                var_d8 = x0_24;
                int64_t* x8_14 = *(arg2 + 0x10);
                if (x8_14 >= *(arg2 + 0x18))
                {
                    std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>((arg2 + 8));
                }
                else
                {
                    *x8_14 = x0_24;
                    *(arg2 + 0x10) = (*(arg2 + 0x10) + 8);
                }
                int32_t x0_34 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                *(arg1 + 0x30) = x0_34;
                if (x0_34 == 0xa)
                {
                    goto label_2adc0;
                }
                int64_t x8_22 = var_90_1;
                if ((x8_22 == (var_88 << 6) && (x8_22 + 1) >= 0))
                {
                    std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&s_1);
                    x8_22 = var_90_1;
                }
                if ((x8_22 != (var_88 << 6) || (x8_22 == (var_88 << 6) && (x8_22 + 1) >= 0)))
                {
                    var_90_1 = (x8_22 + 1);
                    void* s_5 = s_1;
                    int64_t x10_5 = ((x8_22 >> 3) & 0x1ffffffffffffff8);
                    *(s_5 + x10_5) = (*(s_5 + x10_5) | (1 << x8_22));
                    continue;
                }
            label_2b488:
                std::__ndk1::__vector_base_common<true>::__throw_length_error();
                break;
                break;
            }
            case 8:
            {
                var_b0 = 1;
                double x0_6 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg2);
                var_d8 = x0_6;
                double* x8_3 = *(arg2 + 0x10);
                if (x8_3 >= *(arg2 + 0x18))
                {
                    std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>((arg2 + 8));
                }
                else
                {
                    *x8_3 = x0_6;
                    *(arg2 + 0x10) = (*(arg2 + 0x10) + 8);
                }
                int32_t x0_27 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                *(arg1 + 0x30) = x0_27;
                if (x0_27 == 0xb)
                {
                label_2adc0:
                    *(arg2 + 0x10) = (*(arg2 + 0x10) - 8);
                    x8_8 = var_90_1;
                    if (x8_8 == 0)
                    {
                        goto label_2ae80;
                    }
                    goto label_2ac94;
                }
                if (x0_27 != 4)
                {
                    std::__ndk1::fpos<mbstate_t>* x22_7 = *(arg1 + 0x50);
                    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                    int128_t v0_9 = *(arg1 + 0x50);
                    int64_t x8_47 = *(arg1 + 0x60);
                    s = 0;
                    int64_t var_120_2 = 0;
                    s = 0x14;
                    var_118 = nullptr;
                    int64_t var_e0_8 = x8_47;
                    var_f0 = v0_9;
                    __builtin_strncpy(&*s[1], "object key", 0xb);
                    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->ident.file_class);
                    nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                    x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_7, &var_b0);
                    goto label_2afa4;
                }
                if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg2) & 1) != 0)
                {
                    int32_t x0_31 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                    *(arg1 + 0x30) = x0_31;
                    if (x0_31 != 0xc)
                    {
                        std::__ndk1::fpos<mbstate_t>* x22_8 = *(arg1 + 0x50);
                        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                        int128_t v0_10 = *(arg1 + 0x50);
                        int64_t x8_48 = *(arg1 + 0x60);
                        __builtin_memset(&s, 0, 0x18);
                        __builtin_strncpy(&s, " object separator", 0x12);
                        int64_t var_e0_9 = x8_48;
                        var_f0 = v0_10;
                        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[3]);
                        nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                        x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_8, &var_b0);
                        goto label_2afa4;
                    }
                    int64_t x8_17 = var_90_1;
                    if (x8_17 == (var_88 << 6))
                    {
                        if ((x8_17 + 1) < 0)
                        {
                            std::__ndk1::__vector_base_common<true>::__throw_length_error();
                        }
                        else
                        {
                            std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&s_1);
                            x8_17 = var_90_1;
                        }
                    }
                    if ((x8_17 != (var_88 << 6) || (x8_17 == (var_88 << 6) && (x8_17 + 1) >= 0)))
                    {
                        var_90_1 = (x8_17 + 1);
                        void* s_6 = s_1;
                        int64_t x10_7 = ((x8_17 >> 3) & 0x1ffffffffffffff8);
                        *(s_6 + x10_7) = (*(s_6 + x10_7) & !((1 << x8_17)));
                        *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                        continue;
                    }
                    goto label_2b488;
                }
            label_2b0a4:
                x19_1 = 0;
                s_4 = s_1;
                if (s_4 != 0)
                {
                    goto label_2afe0;
                }
                goto label_2afec;
            }
            case 9:
            case 0xa:
            case 0xb:
            case 0xc:
            {
                goto label_2ae90;
            }
            case 0xd:
            {
                std::__ndk1::fpos<mbstate_t>* x22_2 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t v0_2 = *(arg1 + 0x50);
                int64_t x8_30 = *(arg1 + 0x60);
                __builtin_memset(&s, 0, 0x18);
                __builtin_strcpy(&s, "\nvalue");
                int64_t var_e0_2 = x8_30;
                var_f0 = v0_2;
                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, nullptr);
                nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_2, &var_b0);
                goto label_2afa4;
            }
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(void* arg1, int64_t arg2, int64_t arg3, void* arg4)
{
    uint32_t x8 = *(arg1 + 0x29);
    *(arg1 + 0x28) = 1;
    if (x8 != 0)
    {
        int64_t x8_2 = (*(arg4 + 8) * 0x51eb851f);
        uint64_t x8_6 = ((((x8_2 >> 0x25) + (x8_2 >> 0x3f)) % 0x64) - 1);
        if (x8_6 <= 4)
        {
            void* var_18 = arg4;
            struct typeinfo_for_nlohmann::detail::other_error* const tinfo;
            void* thrown_exception;
            switch (x8_6)
            {
                case 0:
                {
                    void* thrown_exception_1 = __cxa_allocate_exception(0x28);
                    thrown_exception = thrown_exception_1;
                    nlohmann::detail::parse_error::parse_error(thrown_exception_1);
                    tinfo = _typeinfo_for_nlohmann::detail::parse_error;
                    break;
                }
                case 1:
                {
                    void* thrown_exception_2 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_2;
                    nlohmann::detail::invalid_iterator::invalid_iterator(thrown_exception_2);
                    tinfo = _typeinfo_for_nlohmann::detail::invalid_iterator;
                    break;
                }
                case 2:
                {
                    void* thrown_exception_3 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_3;
                    nlohmann::detail::type_error::type_error(thrown_exception_3);
                    tinfo = _typeinfo_for_nlohmann::detail::type_error;
                    break;
                }
                case 3:
                {
                    void* thrown_exception_4 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_4;
                    nlohmann::detail::out_of_range::out_of_range(thrown_exception_4);
                    tinfo = _typeinfo_for_nlohmann::detail::out_of_range;
                    break;
                }
                case 4:
                {
                    std::__ndk1::fpos<mbstate_t>* thrown_exception_5 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_5;
                    nlohmann::detail::other_error::other_error(thrown_exception_5);
                    tinfo = _typeinfo_for_nlohmann::detail::other_error;
                    break;
                }
            }
            __cxa_throw(thrown_exception, tinfo, nlohmann::detail::exception::~exception);
            /* no return */
        }
    }
    return 0;
}

void std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(void* arg1, int64_t arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    if (arg2 > (*(arg1 + 0x10) << 6))
    {
        void* s;
        __builtin_memset(&s, 0, 0x18);
        if ((arg2 & 0xffffffff80000000) != 0)
        {
            int64_t x0_3 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* s_1 = s;
            if (s_1 != 0)
            {
                operator delete(s_1);
            }
            int64_t* x0_6;
            int64_t* x1_1;
            int64_t* x2;
            x0_6 = _Unwind_Resume(x0_3);
            /* tailcall */
            return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(x0_6, x1_1, x2);
        }
        void* x19_1 = arg1;
        s = operator new(((((arg2 - 1) >> 6) + 1) << 3));
        int64_t var_68_1 = 0;
        int64_t x8_4 = *x19_1;
        int64_t x9_1 = *(x19_1 + 8);
        int32_t var_40_1 = 0;
        int64_t var_48 = x8_4;
        int64_t var_58_1 = (x8_4 + ((x9_1 >> 3) & 0x1ffffffffffffff8));
        int32_t var_50_1 = (x9_1 & 0x3f);
        int128_t v0_1;
        int128_t v1_1;
        v0_1 = std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(&s, &var_48);
        v1_1 = *x19_1;
        *x19_1 = s;
        s = v1_1;
        int64_t x9_3 = *(x19_1 + 0x10);
        arg1 = v1_1;
        *(x19_1 + 0x10) = (((arg2 - 1) >> 6) + 1);
        int64_t var_60_2 = x9_3;
        if (arg1 != 0)
        {
            operator delete(arg1);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(int64_t* arg1, int64_t* arg2, int64_t* arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t* x19 = *arg2;
    uint64_t x23 = arg2[1];
    int64_t x8_1 = *arg3;
    uint64_t x9 = arg3[1];
    int64_t x10 = arg1[1];
    int64_t x24 = ((x9 - x23) + ((x8_1 - x19) << 3));
    int64_t x12_1 = (x24 + x10);
    arg1[1] = x12_1;
    int64_t* x11_3;
    if ((x10 == 0 || (x10 != 0 && ((x12_1 - 1) ^ (x10 - 1)) > 0x3f)))
    {
        x11_3 = *arg1;
        if (x12_1 > 0x40)
        {
            *(x11_3 + (((x12_1 - 1) >> 3) & 0x1ffffffffffffff8)) = 0;
        }
        else
        {
            *x11_3 = 0;
        }
    }
    if ((x10 != 0 && ((x12_1 - 1) ^ (x10 - 1)) <= 0x3f))
    {
        x11_3 = *arg1;
    }
    int32_t x10_1 = (x10 & 0x3f);
    void* x20 = (x11_3 + ((x10 >> 3) & 0x1ffffffffffffff8));
    if (x23 != x10_1)
    {
        int64_t var_78 = x8_1;
        int64_t* var_68 = x19;
        int32_t var_60_1 = x23;
        int32_t var_70_1 = x9;
        void* var_88 = x20;
        int32_t var_80_1 = x10_1;
        std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(&var_68, &var_78, &var_88);
    }
    else
    {
        if (x24 >= 1)
        {
            if (x23 != 0)
            {
                uint64_t x8_2 = (0x40 - x23);
                int64_t x11_4;
                if (x24 < x8_2)
                {
                    x11_4 = x24;
                }
                else
                {
                    x11_4 = x8_2;
                }
                int64_t x10_2 = *x19;
                x19 = &x19[1];
                x24 = (x24 - x11_4);
                int64_t x11_5 = (x11_4 + x23);
                int64_t x8_5 = ((-1 >> (x8_2 - x11_4)) & (-1 << x23));
                int64_t x12_9;
                if (x11_5 < 0)
                {
                    x12_9 = (x11_5 + 0x3f);
                }
                else
                {
                    x12_9 = x11_5;
                }
                int64_t x9_2 = (x12_9 >> 6);
                *x20 = ((*x20 & !(x8_5)) | (x10_2 & x8_5));
                x20 = (x20 + (x9_2 << 3));
                x23 = (x11_5 - (x9_2 << 6));
            }
            int64_t x26_1;
            if (x24 < 0)
            {
                x26_1 = (x24 + 0x3f);
            }
            else
            {
                x26_1 = x24;
            }
            int64_t x25_1 = (x26_1 >> 6);
            size_t x21_1 = (x25_1 << 3);
            memmove(x20, x19, x21_1);
            int64_t x8_10 = (x24 - (x26_1 & 0xffffffffffffffc0));
            x20 = (x20 + x21_1);
            if (x8_10 >= 1)
            {
                uint64_t x9_4 = (-1 >> -(x8_10));
                x23 = x8_10;
                *x20 = ((*x20 & !(x9_4)) | (x19[x25_1] & x9_4));
            }
        }
        void* var_98_1 = x20;
        int32_t var_90_1 = x23;
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(int64_t* arg1, int64_t* arg2, int64_t* arg3, int64_t* arg4 @ x8)
{
    int64_t* x12 = *arg1;
    uint64_t x11 = arg1[1];
    int64_t i_1 = ((arg2[1] + ((*arg2 - x12) << 3)) - x11);
    int32_t x11_5;
    if (i_1 <= 0)
    {
        x11_5 = arg3[1];
    }
    else
    {
        int32_t* x10_2;
        if (x11 == 0)
        {
            x10_2 = &arg3[1];
            x11_5 = *x10_2;
        }
        else
        {
            uint64_t i_6 = (0x40 - x11);
            x10_2 = &arg3[1];
            uint64_t x17_1 = *x10_2;
            uint64_t i_2;
            if (i_1 < i_6)
            {
                i_2 = i_1;
            }
            else
            {
                i_2 = i_6;
            }
            int64_t* x1 = *arg3;
            uint64_t i_7 = (0x40 - x17_1);
            int64_t x12_2 = (((-1 >> (i_6 - i_2)) & (-1 << x11)) & *x12);
            uint64_t i_5;
            if (i_2 > i_7)
            {
                i_5 = i_7;
            }
            else
            {
                i_5 = i_2;
            }
            uint64_t x6_1;
            if (x17_1 > x11)
            {
                x6_1 = (x12_2 << (x17_1 - x11));
            }
            else
            {
                x6_1 = (x12_2 >> (x11 - x17_1));
            }
            uint64_t x15_8 = (i_2 - i_5);
            x11_5 = ((x17_1 + i_5) & 0x3f);
            i_1 = (i_1 - i_2);
            void* x16_4 = (x1 + (((i_5 + x17_1) >> 3) & 0x1ffffffffffffff8));
            *x1 = ((*x1 & !(((-1 >> (i_7 - i_5)) & (-1 << x17_1)))) | x6_1);
            *arg3 = x16_4;
            *x10_2 = x11_5;
            if (x15_8 >= 1)
            {
                *x16_4 = ((x12_2 >> (i_5 + arg1[1])) | (*x16_4 & !((-1 >> -(x15_8)))));
                x11_5 = x15_8;
                *x10_2 = x15_8;
            }
            x12 = (*arg1 + 8);
            *arg1 = x12;
        }
        uint64_t x13_3 = x11_5;
        int64_t x14_2 = (-1 << x13_3);
        if (i_1 >= 0x40)
        {
            int64_t i = i_1;
            do
            {
                int64_t* x3_1 = *arg3;
                int64_t x12_5 = *x12;
                i = (i - 0x40);
                *x3_1 = ((*x3_1 & !(x14_2)) | (x12_5 << x13_3));
                *arg3 = &x3_1[1];
                x3_1[1] = ((x3_1[1] & x14_2) | (x12_5 >> (0x40 - x11_5)));
                x12 = (*arg1 + 8);
                *arg1 = x12;
            } while (i > 0x3f);
            i_1 = (i_1 & 0x3f);
        }
        if (i_1 >= 1)
        {
            int64_t* x3_3 = *arg3;
            uint64_t i_4 = (0x40 - x11_5);
            int64_t i_3;
            if (i_1 > i_4)
            {
                i_3 = i_4;
            }
            else
            {
                i_3 = i_1;
            }
            int64_t x15_11 = (*x12 & (-1 >> -(i_1)));
            int64_t x9_2 = (i_1 - i_3);
            x11_5 = ((x11_5 + i_3) & 0x3f);
            void* x13_5 = (x3_3 + (((i_3 + x13_3) >> 3) & 0x1ffffffffffffff8));
            *x3_3 = ((*x3_3 & !(((-1 >> (i_4 - i_3)) & x14_2))) | (x15_11 << x13_3));
            *arg3 = x13_5;
            arg3[1] = x11_5;
            if (x9_2 >= 1)
            {
                *x13_5 = ((*x13_5 & !((-1 >> -(x9_2)))) | (x15_11 >> i_3));
                x11_5 = x9_2;
                *x10_2 = x9_2;
            }
        }
    }
    arg4[1] = x11_5;
    *arg4 = *arg3;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_object(std::__ndk1::fpos<mbstate_t>* arg1, uint64_t arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t x8_1 = *(arg1 + 8);
    int64_t x9 = *(arg1 + 0x10);
    char var_88 = 0;
    uint32_t var_70 = ((x9 - x8_1) >> 3);
    int64_t* x0 = *(arg1 + 0x80);
    if (x0 == 0)
    {
        sub_2cc60();
        /* no return */
    }
    int32_t x0_1 = *(*x0 + 0x30)();
    int64_t x8_6 = *(arg1 + 0x28);
    int64_t x9_1 = *(arg1 + 0x30);
    if (x8_6 == (x9_1 << 6))
    {
        if ((x8_6 + 1) < 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        else
        {
            std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve((arg1 + 0x20));
            x8_6 = *(arg1 + 0x28);
        }
    }
    if ((x8_6 != (x9_1 << 6) || (x8_6 == (x9_1 << 6) && (x8_6 + 1) >= 0)))
    {
        int64_t x9_3 = *(arg1 + 0x20);
        *(arg1 + 0x28) = (x8_6 + 1);
        uint64_t x10_2 = (x8_6 >> 6);
        int64_t x8_9 = (1 << x8_6);
        int64_t x8_10;
        if ((x0_1 & 1) == 0)
        {
            x8_10 = (*(x9_3 + (x10_2 << 3)) & !(x8_9));
        }
        else
        {
            x8_10 = (*(x9_3 + (x10_2 << 3)) | x8_9);
        }
        *(x9_3 + (x10_2 << 3)) = x8_10;
        var_70 = 1;
        int64_t x0_4;
        int64_t x1_3;
        x0_4 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg1, &var_70);
        int64_t var_58_1 = x0_4;
        int64_t var_50_1 = x1_3;
        int64_t* x8_11 = *(arg1 + 0x10);
        void* x8_13;
        if (x8_11 == *(arg1 + 0x18))
        {
            std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>((arg1 + 8));
            x8_13 = *(arg1 + 0x10);
        }
        else
        {
            *x8_11 = x1_3;
            x8_13 = (*(arg1 + 0x10) + 8);
            *(arg1 + 0x10) = x8_13;
        }
        char* x8_14;
        int64_t x8_15;
        if (((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)))
        {
            x8_14 = *(x8_13 - 8);
            if (x8_14 != 0)
            {
                x8_15 = *x8_14;
            }
        }
        if ((((((x8_11 == *(arg1 + 0x18) && arg2 == -1) || (x8_11 != *(arg1 + 0x18) && arg2 == -1)) || (((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 == 0)) || (((((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 != 0) && x8_15 > 2) && 1 >= arg2)) || (((((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 != 0) && x8_15 <= 2) && *(&data_3e130 + (x8_15 << 3)) >= arg2)))
        {
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return 1;
        }
    }
    void* thrown_exception = __cxa_allocate_exception(0x20);
    std::__ndk1::to_string(arg2);
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&var_88, nullptr, "excessive object size: ");
    int64_t var_60 = s[1];
    var_70 = *s;
    __builtin_memset(s, 0, 0x18);
    nlohmann::detail::out_of_range::create(0x198, &var_70);
    __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::out_of_range, nlohmann::detail::exception::~exception);
    /* no return */
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object(void* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = *(arg1 + 0x10);
    char var_98;
    int32_t var_78;
    if (*(x8_1 - 8) != 0)
    {
        var_98 = 1;
        var_78 = (((x8_1 - *(arg1 + 8)) >> 3) - 1);
        int64_t* x0 = *(arg1 + 0x80);
        if (x0 == 0)
        {
            sub_2cc60();
            /* no return */
        }
        int32_t x0_1;
        int128_t v0;
        x0_1 = *(*x0 + 0x30)();
        if ((x0_1 & 1) == 0)
        {
            char var_58;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(&var_58);
            char* x8_8 = *(*(arg1 + 0x10) - 8);
            char x1_2 = *x8_8;
            *x8_8 = var_58;
            int64_t var_50;
            int64_t x9_3 = var_50;
            var_58 = x1_2;
            int64_t x10_1 = *(x8_8 + 8);
            *(x8_8 + 8) = x9_3;
            var_50 = x10_1;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_50);
        }
    }
    void* x9_4 = *(arg1 + 0x10);
    void* x8_9 = (x9_4 - 8);
    int64_t x10_3 = (*(arg1 + 0x28) - 1);
    bool cond:0 = *(arg1 + 8) == x8_9;
    *(arg1 + 0x10) = x8_9;
    *(arg1 + 0x28) = x10_3;
    if (!(cond:0))
    {
        char* x9_5 = *(x9_4 - 0x10);
        if ((x9_5 != 0 && *x9_5 == 1))
        {
            var_78 = x9_5;
            int128_t var_68_1 = data_3c5f0;
            int64_t* i_2 = **(x9_5 + 8);
            while (true)
            {
                char* x8_10 = *(x8_9 - 8);
                var_98 = x8_10;
                int64_t var_90_1 = 0;
                int64_t var_88_1 = 0;
                int64_t var_80_1 = -0x8000000000000000;
                uint32_t x9_8 = *x8_10;
                if (x9_8 == 2)
                {
                    int64_t var_88_2 = *(*(x8_10 + 8) + 8);
                }
                else if (x9_8 != 1)
                {
                    int64_t var_80_2 = 1;
                }
                else
                {
                    int64_t var_90_2 = (*(x8_10 + 8) + 8);
                }
                if ((nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(&var_78) & 1) != 0)
                {
                    break;
                }
                char* x0_6;
                int128_t v0_1;
                x0_6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator->();
                if (*x0_6 == 8)
                {
                    int64_t var_b8_1 = var_78;
                    int64_t var_a0_1 = *var_68_1[8];
                    int128_t var_b0_1 = i_2;
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, 0>(*(*(arg1 + 0x10) - 8));
                    break;
                }
                uint32_t x8_17 = *var_78;
                if (x8_17 == 2)
                {
                    var_68_1 = (var_68_1 + 0x10);
                    x8_9 = *(arg1 + 0x10);
                }
                else if (x8_17 != 1)
                {
                    *var_68_1[8] = (*var_68_1[8] + 1);
                    x8_9 = *(arg1 + 0x10);
                }
                else
                {
                    int64_t* i_3 = i_2;
                    int64_t* i = i_3[1];
                    int64_t* i_1;
                    if (i == 0)
                    {
                        while (true)
                        {
                            i_1 = i_3[2];
                            if (*i_1 == i_3)
                            {
                                break;
                            }
                            i_3 = i_3[2];
                        }
                    }
                    else
                    {
                        do
                        {
                            i_1 = i;
                            i = *i;
                        } while (i != 0);
                    }
                    i_2 = i_1;
                    x8_9 = *(arg1 + 0x10);
                }
            }
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(void* arg1, std::__ndk1::fpos<mbstate_t>** arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    char var_88 = 3;
    int64_t var_80 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
    int64_t x8_1 = *(arg1 + 8);
    int64_t x9 = *(arg1 + 0x10);
    char var_68 = 4;
    uint32_t x8_3 = ((x9 - x8_1) >> 3);
    int64_t* x0_2 = *(arg1 + 0x80);
    if (x0_2 == 0)
    {
        sub_2cc60();
        /* no return */
    }
    int32_t x0_3 = *(*x0_2 + 0x30)();
    int64_t x8_6 = *(arg1 + 0x40);
    int64_t var_90;
    if (x8_6 == (*(arg1 + 0x48) << 6))
    {
        if ((x8_6 + 1) < 0)
        {
            int64_t x0_13 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_90);
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_80);
            std::__ndk1::fpos<mbstate_t>* x0_17;
            uint64_t x1_10;
            x0_17 = _Unwind_Resume(x0_13);
            /* tailcall */
            return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(x0_17, x1_10);
        }
        std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve((arg1 + 0x38));
        x8_6 = *(arg1 + 0x40);
    }
    int64_t x9_3 = *(arg1 + 0x38);
    *(arg1 + 0x40) = (x8_6 + 1);
    int64_t x8_9 = (1 << x8_6);
    uint64_t x10_2 = ((x8_6 >> 6) << 3);
    if ((x0_3 & 1) == 0)
    {
        *(x9_3 + x10_2) = (*(x9_3 + x10_2) & !(x8_9));
    }
    else
    {
        *(x9_3 + x10_2) = (*(x9_3 + x10_2) | x8_9);
        if (*(*(arg1 + 0x10) - 8) != 0)
        {
            char var_98;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(&var_98);
            std::__ndk1::fpos<mbstate_t>** x22_1 = *(*(*(arg1 + 0x10) - 8) + 8);
            std::__ndk1::fpos<mbstate_t>** var_70_1 = arg2;
            int64_t* x0_7 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x22_1, &var_68);
            void* x8_15 = *x0_7;
            if (x8_15 == 0)
            {
                std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(x22_1);
                int64_t x8_16 = var_68;
                int64_t* x1_5 = x8_3;
                *x1_5 = 0;
                x1_5[1] = 0;
                x1_5[2] = x8_16;
                *x0_7 = x1_5;
                std::__ndk1::fpos<mbstate_t>* x8_18 = **x22_1;
                if (x8_18 != 0)
                {
                    *x22_1 = x8_18;
                    x1_5 = *x0_7;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x22_1[1], x1_5);
                x22_1[2] = (x22_1[2] + 1);
                x8_15 = x8_3;
            }
            char x1_6 = *(x8_15 + 0x38);
            *(x8_15 + 0x38) = var_98;
            var_98 = x1_6;
            int64_t x10_3 = *(x8_15 + 0x40);
            *(x8_15 + 0x40) = var_90;
            var_90 = x10_3;
            *(arg1 + 0x50) = (x8_15 + 0x38);
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_90);
        }
    }
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_80);
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(std::__ndk1::fpos<mbstate_t>* arg1, uint64_t arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t x8_1 = *(arg1 + 8);
    int64_t x9 = *(arg1 + 0x10);
    char var_88 = 2;
    uint32_t var_70 = ((x9 - x8_1) >> 3);
    int64_t* x0 = *(arg1 + 0x80);
    if (x0 == 0)
    {
        sub_2cc60();
        /* no return */
    }
    int32_t x0_1 = *(*x0 + 0x30)();
    int64_t x8_6 = *(arg1 + 0x28);
    int64_t x9_1 = *(arg1 + 0x30);
    if (x8_6 == (x9_1 << 6))
    {
        if ((x8_6 + 1) < 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        else
        {
            std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve((arg1 + 0x20));
            x8_6 = *(arg1 + 0x28);
        }
    }
    if ((x8_6 != (x9_1 << 6) || (x8_6 == (x9_1 << 6) && (x8_6 + 1) >= 0)))
    {
        int64_t x9_3 = *(arg1 + 0x20);
        *(arg1 + 0x28) = (x8_6 + 1);
        uint64_t x10_2 = (x8_6 >> 6);
        int64_t x8_9 = (1 << x8_6);
        int64_t x8_10;
        if ((x0_1 & 1) == 0)
        {
            x8_10 = (*(x9_3 + (x10_2 << 3)) & !(x8_9));
        }
        else
        {
            x8_10 = (*(x9_3 + (x10_2 << 3)) | x8_9);
        }
        *(x9_3 + (x10_2 << 3)) = x8_10;
        var_70 = 2;
        int64_t x0_4;
        int64_t x1_3;
        x0_4 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg1, &var_70);
        int64_t var_58_1 = x0_4;
        int64_t var_50_1 = x1_3;
        int64_t* x8_11 = *(arg1 + 0x10);
        void* x8_13;
        if (x8_11 == *(arg1 + 0x18))
        {
            std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>((arg1 + 8));
            x8_13 = *(arg1 + 0x10);
        }
        else
        {
            *x8_11 = x1_3;
            x8_13 = (*(arg1 + 0x10) + 8);
            *(arg1 + 0x10) = x8_13;
        }
        char* x8_14;
        int64_t x8_15;
        if (((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)))
        {
            x8_14 = *(x8_13 - 8);
            if (x8_14 != 0)
            {
                x8_15 = *x8_14;
            }
        }
        if ((((((x8_11 == *(arg1 + 0x18) && arg2 == -1) || (x8_11 != *(arg1 + 0x18) && arg2 == -1)) || (((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 == 0)) || (((((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 != 0) && x8_15 > 2) && 1 >= arg2)) || (((((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 != 0) && x8_15 <= 2) && *(&data_3e130 + (x8_15 << 3)) >= arg2)))
        {
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return 1;
        }
    }
    void* thrown_exception = __cxa_allocate_exception(0x20);
    std::__ndk1::to_string(arg2);
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&var_88, nullptr, "excessive array size: ");
    int64_t var_60 = s[1];
    var_70 = *s;
    __builtin_memset(s, 0, 0x18);
    nlohmann::detail::out_of_range::create(0x198, &var_70);
    __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::out_of_range, nlohmann::detail::exception::~exception);
    /* no return */
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array(void* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = *(arg1 + 0x10);
    if (*(x8_1 - 8) == 0)
    {
        int64_t x8_9 = *(arg1 + 0x28);
        *(arg1 + 0x10) = (x8_1 - 8);
        *(arg1 + 0x28) = (x8_9 - 1);
    }
    else
    {
        char var_40 = 3;
        int32_t var_3c = (((x8_1 - *(arg1 + 8)) >> 3) - 1);
        int64_t* x0 = *(arg1 + 0x80);
        if (x0 == 0)
        {
            sub_2cc60();
            /* no return */
        }
        if ((*(*x0 + 0x30)() & 1) != 0)
        {
            int64_t x9_4 = (*(arg1 + 0x28) - 1);
            *(arg1 + 0x10) = (*(arg1 + 0x10) - 8);
            *(arg1 + 0x28) = x9_4;
        }
        else
        {
            char var_50;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(&var_50);
            char* x8_12 = *(*(arg1 + 0x10) - 8);
            char x1_2 = *x8_12;
            *x8_12 = var_50;
            int64_t var_48;
            int64_t x9_6 = var_48;
            var_50 = x1_2;
            int64_t x10_1 = *(x8_12 + 8);
            *(x8_12 + 8) = x9_6;
            var_48 = x10_1;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            void* x8_13 = *(arg1 + 0x10);
            int64_t x9_8 = (*(arg1 + 0x28) - 1);
            bool cond:0_1 = *(arg1 + 8) == (x8_13 - 8);
            *(arg1 + 0x10) = (x8_13 - 8);
            *(arg1 + 0x28) = x9_8;
            if (!(cond:0_1))
            {
                char* x8_14 = *(x8_13 - 0x10);
                if (*x8_14 == 2)
                {
                    void* x19_1 = *(x8_14 + 8);
                    char* x21_2 = (*(x19_1 + 8) - 0x10);
                    *x21_2;
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_2[8]);
                    *(x19_1 + 8) = x21_2;
                }
            }
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 1;
}

int64_t nlohmann::detail::out_of_range::create(int32_t arg1, char* arg2, int64_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t var_80 = 0;
    int64_t var_78 = 0;
    var_80 = 0x18;
    void* var_70 = nullptr;
    __builtin_strncpy(&*var_80[1], "out_of_range", 0xd);
    nlohmann::detail::exception::name(&var_80, arg1);
    *(arg2 + 8);
    void* x1_1;
    if ((*arg2 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    char var_68;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_68, x1_1);
    void* x8_2 = s[1];
    int128_t var_50 = *s;
    __builtin_memset(s, 0, 0x18);
    void* var_58;
    if ((var_68 & 1) != 0)
    {
        operator delete(var_58);
    }
    if ((var_80 & 1) != 0)
    {
        operator delete(var_70);
    }
    arg3[1] = arg1;
    *arg3 = (_vtable_for_nlohmann::detail::exception + 0x10);
    int64_t x0_5 = std::runtime_error::runtime_error(&arg3[2]);
    uint32_t x8_6 = var_50;
    *arg3 = (_vtable_for_nlohmann::detail::out_of_range + 0x10);
    if ((x8_6 & 1) != 0)
    {
        x0_5 = operator delete(x8_2);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t nlohmann::detail::exception::~exception(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    /* tailcall */
    return std::exception::~exception();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(char** arg1, char* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        uint64_t x8_4 = *arg2;
        char var_50 = x8_4;
        int64_t** s_1;
        if (x8_4 <= 7)
        {
            switch (x8_4)
            {
                case 1:
                {
                    int64_t** s_2 = operator new(0x18);
                    s_2[1] = 0;
                    s_2[2] = 0;
                    *s_2 = &s_2[1];
                    s_1 = s_2;
                    if ((arg3 & 1) == 0)
                    {
                        goto label_2ca44;
                    }
                    goto label_2ca0c;
                }
                case 2:
                {
                    int64_t** s = operator new(0x18);
                    __builtin_memset(s, 0, 0x18);
                    s_1 = s;
                    if ((arg3 & 1) == 0)
                    {
                        goto label_2ca44;
                    }
                    goto label_2ca0c;
                }
                case 3:
                {
                    s_1 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_3cde1);
                    if ((arg3 & 1) == 0)
                    {
                        goto label_2ca44;
                    }
                    goto label_2ca0c;
                }
                case 4:
                {
                    s_1 = 0;
                    if ((arg3 & 1) == 0)
                    {
                        goto label_2ca44;
                    }
                    goto label_2ca0c;
                }
            }
        }
        s_1 = nullptr;
        void* x21_1;
        if ((arg3 & 1) != 0)
        {
        label_2ca0c:
            x21_1 = &arg1[2];
        label_2ca84:
            void* x8_12 = arg1[2];
            if (arg1[1] == x8_12)
            {
                char x8_17 = var_50;
                int64_t** s_3 = s_1;
                var_50 = 0;
                s_1 = nullptr;
                char var_60_1 = x8_17;
                int64_t** s_6 = s_3;
                char* x9_8 = *arg1;
                char x1 = *x9_8;
                *x9_8 = x8_17;
                char var_60_2 = x1;
                int64_t** s_7 = *(x9_8 + 8);
                *(x9_8 + 8) = s_6;
                s_6 = s_7;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_6);
                *arg1;
            label_2cc04:
                x20_1 = 1;
                goto label_2cc10;
            }
            char* x8_13 = *(x8_12 - 8);
            if (x8_13 == 0)
            {
                goto label_2cb9c;
            }
            if (*x8_13 != 2)
            {
                int64_t x8_20 = (arg1[8] - 1);
                int64_t x9_10 = *(arg1[7] + ((x8_20 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_20;
                if (((1 << x8_20) & x9_10) == 0)
                {
                    goto label_2cb9c;
                }
                char x8_21 = var_50;
                int64_t** s_4 = s_1;
                var_50 = 0;
                s_1 = nullptr;
                char var_70_1 = x8_21;
                int64_t** s_5 = s_4;
                char* x9_11 = arg1[0xa];
                char x1_1 = *x9_11;
                *x9_11 = x8_21;
                char var_70_2 = x1_1;
                int64_t** s_8 = *(x9_11 + 8);
                *(x9_11 + 8) = s_5;
                s_5 = s_8;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_5);
                arg1[0xa];
                goto label_2cc04;
            }
            std::__ndk1::fpos<mbstate_t>* x0_2 = *(x8_13 + 8);
            char* x8_14 = *(x0_2 + 8);
            if (x8_14 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_14 = var_50;
                *(x8_14 + 8) = s_1;
                var_50 = 0;
                s_1 = nullptr;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21_1 - 8) + 8) + 8);
            goto label_2cc04;
        }
    label_2ca44:
        x21_1 = &arg1[2];
        char var_40 = 5;
        uint32_t var_3c = ((*x21_1 - *(x21_1 - 8)) >> 3);
        int64_t* x0 = *(x21_1 + 0x70);
        if (x0 == 0)
        {
            sub_2cc60();
            /* no return */
        }
        if ((*(*x0 + 0x30)() & 1) != 0)
        {
            goto label_2ca84;
        }
    label_2cb9c:
        x20_1 = 0;
    label_2cc10:
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_1);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

void sub_2cc60() __noreturn
{
    void** thrown_exception = __cxa_allocate_exception(8);
    *thrown_exception = (_vtable_for_std::__ndk1::bad_function_call + 0x10);
    __cxa_throw(thrown_exception, _typeinfo_for_std::__ndk1::bad_function_call, std::exception::~exception);
    /* no return */
}

int64_t std::__ndk1::bad_function_call::~bad_function_call(void* arg1)
{
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(int64_t* arg1, char* arg2)
{
    int64_t x9 = *arg1;
    int64_t x21 = ((arg1[1] - x9) >> 4);
    if (((x21 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_7;
        int64_t* x1_2;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>(x0_7, x1_2);
    }
    int64_t x9_1 = (arg1[2] - x9);
    int64_t x0_2;
    int64_t x22;
    if (0x7fffffffffffffe < (x9_1 >> 4))
    {
        x22 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_2 = (x9_1 >> 3);
        if (x9_2 < (x21 + 1))
        {
            x22 = (x21 + 1);
        }
        else
        {
            x22 = x9_2;
        }
        if (x22 == 0)
        {
            x0_2 = 0;
        }
        else if ((x22 >> 0x3c) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_1 >> 4) || (0x7fffffffffffffe >= (x9_1 >> 4) && x22 != 0)))
    {
        x0_2 = operator new((x22 << 4));
    }
    char* x12 = (x0_2 + (x21 << 4));
    *x12 = *arg2;
    *(x12 + 8) = *(arg2 + 8);
    *arg2 = 0;
    *(arg2 + 8) = 0;
    void* x20_1 = *arg1;
    char* x10_2 = arg1[1];
    int64_t x8_6 = (x0_2 + (x22 << 4));
    if (x10_2 == x20_1)
    {
        *arg1 = x12;
        arg1[1] = &x12[0x10];
        arg1[2] = x8_6;
    }
    else
    {
        int64_t x11_4 = (x21 + (-1 ^ (((x10_2 - 0x10) - x20_1) >> 4)));
        void* x12_1 = (x12 - 8);
        do
        {
            x10_2 = &x10_2[-0x10];
            *(x12_1 - 8) = *x10_2;
            *x12_1 = *(x10_2 + 8);
            x12_1 = (x12_1 - 0x10);
            *x10_2 = 0;
            *(x10_2 + 8) = 0;
        } while (x20_1 != x10_2);
        x20_1 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x11_4 << 4));
        arg1[1] = &x12[0x10];
        arg1[2] = x8_6;
        if (x21_1 != x20_1)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x20_1 != x21_1);
        }
    }
    if (((x10_2 == x20_1 && x20_1 != 0) || (x10_2 != x20_1 && x20_1 != 0)))
    {
        /* tailcall */
        return operator delete(x20_1);
    }
    if (((x10_2 == x20_1 && x20_1 == 0) || (x10_2 != x20_1 && x20_1 == 0)))
    {
        return x0_2;
    }
}

void std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>(int64_t* arg1, int64_t* arg2)
{
    void* x20 = *arg1;
    size_t x21 = (arg1[1] - x20);
    int64_t x24 = (x21 >> 3);
    if (((x24 + 1) >> 0x3d) != 0)
    {
        uint8_t* x0_6;
        char* x1_2;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(x0_6, x1_2);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t* x23;
    int64_t x25;
    if (0xffffffffffffffe < (x9_2 >> 3))
    {
        x25 = 0x1fffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 2);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x23 = nullptr;
        }
        else if ((x25 >> 0x3d) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0xffffffffffffffe < (x9_2 >> 3) || (0xffffffffffffffe >= (x9_2 >> 3) && x25 != 0)))
    {
        x23 = operator new((x25 << 3));
    }
    void* x24_1 = &x23[x24];
    *x24_1 = *arg2;
    if (x21 >= 1)
    {
        memcpy(x23, x20, x21);
    }
    *arg1 = x23;
    arg1[1] = (x24_1 + 8);
    arg1[2] = &x23[x25];
    if (x20 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x20);
}

void nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(uint8_t* arg1, char* arg2)
{
    uint32_t x9 = *arg2;
    *(arg1 + 8) = 0;
    uint64_t x8 = (x9 - 1);
    *arg1 = x9;
    if (x8 <= 6)
    {
        uint8_t* x20_1;
        switch (x8)
        {
            case 0:
            {
                x20_1 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > > const&>(*(arg2 + 8));
                break;
            }
            case 1:
            {
                *(arg2 + 8);
                uint8_t* x0_2 = operator new(0x18);
                x20_1 = x0_2;
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::vector(x0_2);
                break;
            }
            case 2:
            {
                x20_1 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(*(arg2 + 8));
                break;
            }
            case 3:
            {
                x20_1 = arg2[8];
                break;
            }
            case 4:
            case 5:
            case 6:
            {
                x20_1 = *(arg2 + 8);
                break;
            }
        }
        *(arg1 + 8) = x20_1;
    }
}

char* nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator->(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x9 = _ReadStatusReg(tpidr_el0);
    char* x0 = *arg1;
    uint32_t x10_1 = *x0;
    if (x10_1 == 2)
    {
        x0 = arg1[2];
    }
    else if (x10_1 == 1)
    {
        x0 = (arg1[1] + 0x38);
    }
    else if (arg1[3] != 0)
    {
        void* thrown_exception = __cxa_allocate_exception(0x20);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        __builtin_strncpy(&s, " cannot get value", 0x12);
        nlohmann::detail::invalid_iterator::create(0xd6, &s);
        __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::invalid_iterator, nlohmann::detail::exception::~exception);
        /* no return */
    }
    if (*(x9 + 0x28) != *(x9 + 0x28))
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

void nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, 0>(char* arg1, int64_t* arg2, int64_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x21 + 0x28);
    int64_t s_1;
    if (*arg2 != arg1)
    {
        void* thrown_exception = __cxa_allocate_exception(0x20);
        __builtin_memset(&s_1, 0, 0x18);
        int64_t x0_5;
        int128_t v0;
        x0_5 = operator new(0x30);
        s_1 = data_3c600;
        int64_t var_60 = x0_5;
        __builtin_strncpy(x0_5, "iterator does not fit current value", 0x24);
        nlohmann::detail::invalid_iterator::create(0xca, &s_1);
        __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::invalid_iterator, nlohmann::detail::exception::~exception);
        /* no return */
    }
    *arg3 = arg1;
    arg3[1] = 0;
    arg3[2] = 0;
    arg3[3] = -0x8000000000000000;
    uint32_t x8 = *arg1;
    if (x8 == 2)
    {
        void* x22_1 = *(arg1 + 8);
        int64_t x8_2 = *(x22_1 + 8);
        arg3[2] = x8_2;
        char* i_2 = arg2[2];
        void* x20_1 = &i_2[0x10];
        char* i;
        if (x20_1 == x8_2)
        {
            i = i_2;
        }
        else
        {
            i = i_2;
            do
            {
                char* i_1 = i;
                i = &i[0x10];
                char x9_2 = *i;
                int64_t x10_1 = *(i_1 + 0x18);
                *i = 0;
                char x1_1 = *i_1;
                *(i_1 + 0x18) = 0;
                *i_1 = x9_2;
                s_1 = x1_1;
                int64_t x9_3 = *(i_1 + 8);
                *(i_1 + 8) = x10_1;
                int64_t var_68 = x9_3;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
            } while ((x8_2 - 0x10) != i);
            x20_1 = *(x22_1 + 8);
        }
        if ((x20_1 == x8_2 || (x20_1 != x8_2 && x20_1 != i)))
        {
            do
            {
                x20_1 = (x20_1 - 0x10);
                *x20_1;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy((x20_1 + 8));
            } while (i != x20_1);
        }
        *(x22_1 + 8) = i;
        arg3[2] = i_2;
    }
    else if (x8 == 1)
    {
        int64_t x0 = *(arg1 + 8);
        arg3[1] = (x0 + 8);
        arg2[1];
        arg3[1] = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::erase(x0);
    }
    else
    {
        arg3[3] = 1;
        if ((x8 - 3) > 4)
        {
            void* thrown_exception_1 = __cxa_allocate_exception(0x20);
            int64_t x8_6 = *arg1;
            char* x20_2;
            if (x8_6 > 8)
            {
                x20_2 = "number";
            }
            else
            {
                x20_2 = &data_56348[x8_6];
            }
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            size_t x0_9 = strlen(x20_2);
            if (x0_9 < -0x10)
            {
                x0_9 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            }
            int64_t x22_2;
            if (x0_9 >= 0x17)
            {
                uint64_t x23_1 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                int64_t x0_11 = operator new(x23_1);
                x22_2 = x0_11;
                size_t var_80_1 = x0_9;
                int64_t var_78_1 = x0_11;
                s = (x23_1 | 1);
            }
            else
            {
                x22_2 = (&s | 1);
                s = (x0_9 << 1);
            }
            if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
            {
                memcpy(x22_2, x20_2, x0_9);
            }
            *(x22_2 + x0_9) = 0;
            int128_t* s_2;
            int128_t v0_1;
            s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s, nullptr, "cannot use erase() with ");
            int64_t var_60_1 = s_2[1];
            s_1 = *s_2;
            __builtin_memset(s_2, 0, 0x18);
            nlohmann::detail::type_error::create(0x133, &s_1);
            __cxa_throw(thrown_exception_1, _typeinfo_for_nlohmann::detail::type_error, nlohmann::detail::exception::~exception);
            /* no return */
        }
        if (arg2[3] != 0)
        {
            void* thrown_exception_2 = __cxa_allocate_exception(0x20);
            __builtin_memset(&s_1, 0, 0x18);
            __builtin_strncpy(&s_1, "*iterator out of range", 0x17);
            nlohmann::detail::invalid_iterator::create(0xcd, &s_1);
            __cxa_throw(thrown_exception_2, _typeinfo_for_nlohmann::detail::invalid_iterator, nlohmann::detail::exception::~exception);
            /* no return */
        }
        if (x8 == 3)
        {
            void* x0_2 = *(arg1 + 8);
            if ((*x0_2 & 1) != 0)
            {
                operator delete(*(x0_2 + 0x10));
                x0_2 = *(arg1 + 8);
            }
            operator delete(x0_2);
            *(arg1 + 8) = 0;
        }
        *arg1 = 0;
    }
    if (*(x21 + 0x28) != x9)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t** nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > > const&>(int64_t* arg1)
{
    int64_t** x0 = operator new(0x18);
    x0[1] = 0;
    x0[2] = 0;
    *x0 = &x0[1];
    int64_t* i = *arg1;
    while (i != &arg1[1])
    {
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__emplace_hint_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > const&>(x0, &x0[1], &i[4]);
        int64_t* j = i[1];
        if (j != 0)
        {
            do
            {
                i = j;
                j = *j;
            } while (j != 0);
        }
        else
        {
            void* x8_2 = &i[2];
            int64_t* i_1 = *x8_2;
            if (*i_1 == i)
            {
                i = i_1;
            }
            else
            {
                void* j_1;
                do
                {
                    j_1 = *x8_2;
                    x8_2 = (j_1 + 0x10);
                    i = *x8_2;
                } while (*i != j_1);
            }
        }
    }
    return x0;
}

std::__ndk1::fpos<mbstate_t>* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__emplace_hint_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > const&>(int64_t* arg1, std::__ndk1::fpos<mbstate_t>** arg2, int64_t arg3, char* arg4)
{
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    std::__ndk1::fpos<mbstate_t> var_78;
    int64_t var_70;
    int64_t* x0 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2, &var_70, &var_78);
    std::__ndk1::fpos<mbstate_t>* x19 = *x0;
    if (x19 == 0)
    {
        std::__ndk1::fpos<mbstate_t>* x0_1;
        int128_t v0_1;
        x0_1 = operator new(0x48);
        *(x0_1 + 0x20) = 0;
        *(x0_1 + 0x28) = 0;
        *(x0_1 + 0x30) = 0;
        x19 = x0_1;
        if ((*arg4 & 1) == 0)
        {
            v0_1 = *arg4;
            *(x0_1 + 0x30) = *(arg4 + 0x10);
            *(x0_1 + 0x20) = v0_1;
        }
        else
        {
            size_t x24_1 = *(arg4 + 8);
            if (x24_1 < -0x10)
            {
                int64_t x0_9 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                operator delete(x19);
                std::__ndk1::fpos<mbstate_t>** x0_12;
                void* x1_3;
                void** x2_2;
                void* x3_1;
                char* x4_1;
                x0_12 = _Unwind_Resume(x0_9);
                /* tailcall */
                return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_12, x1_3, x2_2, x3_1, x4_1);
            }
            int64_t x25_1 = *(arg4 + 0x10);
            void* x26_1;
            if (x24_1 >= 0x17)
            {
                uint64_t x27_1 = ((x24_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_3 = operator new(x27_1);
                x26_1 = x0_3;
                *(x19 + 0x28) = x24_1;
                *(x19 + 0x30) = x0_3;
                *(x19 + 0x20) = (x27_1 | 1);
            }
            else
            {
                x26_1 = (x19 + 0x21);
                *(x19 + 0x20) = (x24_1 << 1);
            }
            if ((x24_1 >= 0x17 || (x24_1 < 0x17 && x24_1 != 0)))
            {
                memcpy(x26_1, x25_1, x24_1);
            }
            *(x26_1 + x24_1) = 0;
        }
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json((x19 + 0x38));
        int64_t x8_6 = var_70;
        *x19 = 0;
        *(x19 + 8) = 0;
        *(x19 + 0x10) = x8_6;
        *x0 = x19;
        int64_t x8_8 = **arg1;
        std::__ndk1::fpos<mbstate_t>* x1_2;
        if (x8_8 == 0)
        {
            x1_2 = x19;
        }
        else
        {
            *arg1 = x8_8;
            x1_2 = *x0;
        }
        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(arg1[1], x1_2);
        arg1[2] = (arg1[2] + 1);
    }
    if (*(x28 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

void* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::fpos<mbstate_t>** arg1, void* arg2, void** arg3, void* arg4, char* arg5)
{
    std::__ndk1::fpos<mbstate_t>** x0_6;
    void** x8_10;
    void* i_7;
    if (&arg1[1] == arg2)
    {
    label_2d7f4:
        void* i_4 = *arg2;
        void* i_5 = arg2;
        if (*arg1 != arg2)
        {
            if (i_4 == 0)
            {
                i_5 = arg2;
                void* i;
                do
                {
                    i = i_5;
                    i_5 = *(i_5 + 0x10);
                } while (*i_5 == i);
            }
            else
            {
                void* i_1 = i_4;
                do
                {
                    i_5 = i_1;
                    i_1 = *(i_1 + 8);
                } while (i_1 != 0);
            }
            uint64_t x9_5 = *(i_5 + 0x20);
            uint64_t x10_2 = *arg5;
            uint64_t x20_3;
            if ((x10_2 & 1) == 0)
            {
                x20_3 = (x10_2 >> 1);
            }
            else
            {
                x20_3 = *(arg5 + 8);
            }
            uint64_t x22_2;
            if ((x9_5 & 1) == 0)
            {
                x22_2 = (x9_5 >> 1);
            }
            else
            {
                x22_2 = *(i_5 + 0x28);
            }
            uint64_t x2_2;
            if (x20_3 < x22_2)
            {
                x2_2 = x20_3;
            }
            else
            {
                x2_2 = x22_2;
            }
            int32_t x0_5;
            if (x2_2 != 0)
            {
                void* x0_4;
                if ((x9_5 & 1) != 0)
                {
                    x0_4 = *(i_5 + 0x30);
                }
                else
                {
                    x0_4 = (i_5 + 0x21);
                }
                void* x1_2;
                if ((x10_2 & 1) != 0)
                {
                    x1_2 = *(arg5 + 0x10);
                }
                else
                {
                    x1_2 = &arg5[1];
                }
                x0_5 = memcmp(x0_4, x1_2, x2_2);
            }
            if (((x2_2 == 0 || (x2_2 != 0 && x0_5 == 0)) && x22_2 >= x20_3))
            {
            label_2d8dc:
                x0_6 = arg1;
            label_2d904:
                /* tailcall */
                return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_6, arg3);
            }
            if (((x2_2 != 0 && x0_5 != 0) && (x0_5 & 0x80000000) == 0))
            {
                goto label_2d8dc;
            }
        }
        if (i_4 == 0)
        {
            x8_10 = arg3;
            i_7 = arg2;
        label_2d92c:
            *x8_10 = arg2;
            goto label_2da1c;
        }
        i_7 = (i_5 + 8);
        *arg3 = i_5;
    label_2da1c:
        return i_7;
    }
    uint64_t x19_1 = *(arg2 + 0x20);
    uint64_t x23_1 = *arg5;
    uint64_t x22_1;
    if ((x19_1 & 1) == 0)
    {
        x22_1 = (x19_1 >> 1);
    }
    else
    {
        x22_1 = *(arg2 + 0x28);
    }
    uint64_t x27_1;
    if ((x23_1 & 1) == 0)
    {
        x27_1 = (x23_1 >> 1);
    }
    else
    {
        x27_1 = *(arg5 + 8);
    }
    uint64_t x24_1;
    if (x22_1 < x27_1)
    {
        x24_1 = x22_1;
    }
    else
    {
        x24_1 = x27_1;
    }
    int32_t x0_1;
    void* x25_1;
    void* x26_1;
    if (x24_1 != 0)
    {
        if ((x23_1 & 1) != 0)
        {
            x26_1 = *(arg5 + 0x10);
        }
        else
        {
            x26_1 = &arg5[1];
        }
        if ((x19_1 & 1) != 0)
        {
            x25_1 = *(arg2 + 0x30);
        }
        else
        {
            x25_1 = (arg2 + 0x21);
        }
        x0_1 = memcmp(x26_1, x25_1, x24_1);
    }
    if ((x24_1 == 0 || (x24_1 != 0 && x0_1 == 0)))
    {
        if (x27_1 < x22_1)
        {
            goto label_2d7f4;
        }
        if (x24_1 != 0)
        {
            if ((x19_1 & 1) != 0)
            {
                x25_1 = *(arg2 + 0x30);
            }
            else
            {
                x25_1 = (arg2 + 0x21);
            }
            if ((x23_1 & 1) != 0)
            {
                x26_1 = *(arg5 + 0x10);
            }
            else
            {
                x26_1 = &arg5[1];
            }
            goto label_2d848;
        }
    }
    if ((x24_1 != 0 && x0_1 != 0))
    {
        if ((x0_1 & 0x80000000) != 0)
        {
            goto label_2d7f4;
        }
    label_2d848:
        int32_t x0_3 = memcmp(x25_1, x26_1, x24_1);
        if (x0_3 != 0)
        {
            if ((x0_3 & 0x80000000) == 0)
            {
                goto label_2d858;
            }
            goto label_2d940;
        }
    }
    if ((((x24_1 == 0 || (x24_1 != 0 && x0_1 == 0)) && x27_1 >= x22_1) || (x24_1 != 0 && x0_1 != 0)))
    {
        if (x22_1 >= x27_1)
        {
        label_2d858:
            i_7 = arg4;
            *arg3 = arg2;
            *i_7 = arg2;
            goto label_2da1c;
        }
    label_2d940:
        i_7 = (arg2 + 8);
        void* i_3 = *i_7;
        void* i_6;
        if (i_3 == 0)
        {
            void* x8_12 = (arg2 + 0x10);
            i_6 = *x8_12;
            if (*i_6 != arg2)
            {
                void* i_2;
                do
                {
                    i_2 = *x8_12;
                    x8_12 = (i_2 + 0x10);
                    i_6 = *x8_12;
                } while (*i_6 != i_2);
            }
        }
        else
        {
            do
            {
                i_6 = i_3;
                i_3 = *i_3;
            } while (i_3 != 0);
        }
        if (i_6 != &arg1[1])
        {
            uint64_t x9_8 = *(i_6 + 0x20);
            uint64_t x19_2;
            if ((x9_8 & 1) == 0)
            {
                x19_2 = (x9_8 >> 1);
            }
            else
            {
                x19_2 = *(i_6 + 0x28);
            }
            uint64_t x2_5;
            if (x19_2 < x27_1)
            {
                x2_5 = x19_2;
            }
            else
            {
                x2_5 = x27_1;
            }
            int32_t x0_9;
            if (x2_5 != 0)
            {
                void* x0_8;
                if ((x23_1 & 1) != 0)
                {
                    x0_8 = *(arg5 + 0x10);
                }
                else
                {
                    x0_8 = &arg5[1];
                }
                void* x1_5;
                if ((x9_8 & 1) != 0)
                {
                    x1_5 = *(i_6 + 0x30);
                }
                else
                {
                    x1_5 = (i_6 + 0x21);
                }
                x0_9 = memcmp(x0_8, x1_5, x2_5);
            }
            if (((x2_5 == 0 || (x2_5 != 0 && x0_9 == 0)) && x27_1 >= x19_2))
            {
            label_2d9d8:
                x0_6 = arg1;
                goto label_2d904;
            }
            if (((x2_5 != 0 && x0_9 != 0) && (x0_9 & 0x80000000) == 0))
            {
                goto label_2d9d8;
            }
        }
        if (*(arg2 + 8) == 0)
        {
            x8_10 = arg3;
            goto label_2d92c;
        }
        i_7 = i_6;
        *arg3 = i_6;
        goto label_2da1c;
    }
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, void** arg2, char* arg3)
{
    int64_t* x20_1 = (arg1 + 8);
    int64_t* x24 = *x20_1;
    if (x24 == 0)
    {
        *arg2 = x20_1;
    }
    else
    {
        uint64_t x8_1 = *arg3;
        x20_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x25_1;
        if (temp0_1 == 0)
        {
            x25_1 = (x8_1 >> 1);
        }
        else
        {
            x25_1 = *(arg3 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg3 + 0x10);
        }
        else
        {
            x21_1 = &arg3[1];
        }
        while (true)
        {
            uint64_t x28_1 = x24[4];
            uint64_t x26_1;
            if ((x28_1 & 1) == 0)
            {
                x26_1 = (x28_1 >> 1);
            }
            else
            {
                x26_1 = x24[5];
            }
            uint64_t x22_1;
            if (x26_1 < x25_1)
            {
                x22_1 = x26_1;
            }
            else
            {
                x22_1 = x25_1;
            }
            int32_t x0_1;
            void* x23_1;
            if (x22_1 != 0)
            {
                if ((x28_1 & 1) != 0)
                {
                    x23_1 = x24[6];
                }
                else
                {
                    x23_1 = (x24 + 0x21);
                }
                x0_1 = memcmp(x21_1, x23_1, x22_1);
            }
            int64_t* x8_2;
            if ((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)))
            {
                if (x25_1 < x26_1)
                {
                label_2dacc:
                    x8_2 = *x24;
                    if (x8_2 == 0)
                    {
                        *arg2 = x24;
                        x20_1 = x24;
                        break;
                    }
                    x20_1 = x24;
                    goto label_2da74;
                }
                if (x22_1 != 0)
                {
                    if ((x28_1 & 1) != 0)
                    {
                        x23_1 = x24[6];
                    }
                    else
                    {
                        x23_1 = (x24 + 0x21);
                    }
                    goto label_2daf8;
                }
            }
            if ((x22_1 != 0 && x0_1 != 0))
            {
                if ((x0_1 & 0x80000000) != 0)
                {
                    goto label_2dacc;
                }
            label_2daf8:
                int32_t x0_3 = memcmp(x23_1, x21_1, x22_1);
                if (x0_3 != 0)
                {
                    if ((x0_3 & 0x80000000) == 0)
                    {
                        goto label_2db1c;
                    }
                    goto label_2db14;
                }
            }
            if ((((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)) && x25_1 >= x26_1) || (x22_1 != 0 && x0_1 != 0)))
            {
                if (x26_1 >= x25_1)
                {
                label_2db1c:
                    *arg2 = x24;
                    break;
                }
            label_2db14:
                x20_1 = &x24[1];
                x8_2 = *x20_1;
                if (x8_2 == 0)
                {
                    goto label_2db1c;
                }
            label_2da74:
                x24 = x8_2;
            }
        }
    }
    return x20_1;
}

uint64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::vector(uint64_t* arg1, int64_t* arg2)
{
    __builtin_memset(arg1, 0, 0x18);
    int64_t x8 = *arg2;
    int64_t x9 = arg2[1];
    uint64_t x0 = (x9 - x8);
    if (x9 != x8)
    {
        int64_t x21_1 = (x0 >> 4);
        if ((x21_1 >> 0x3c) != 0)
        {
            int64_t x0_2 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            uint64_t x21_3 = *arg1;
            if (x21_3 != 0)
            {
                char* x22_1 = arg1[1];
                uint64_t x0_3 = x21_3;
                if (x22_1 != x21_3)
                {
                    do
                    {
                        x22_1 = &x22_1[-0x10];
                        *x22_1;
                        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x22_1[8]);
                    } while (x21_3 != x22_1);
                    x0_3 = *arg1;
                }
                arg1[1] = x21_3;
                operator delete(x0_3);
            }
            /* tailcall */
            return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(_Unwind_Resume(x0_2));
        }
        x0 = operator new(x0);
        *arg1 = x0;
        arg1[1] = x0;
        arg1[2] = (x0 + (x21_1 << 4));
        int64_t x21_2 = *arg2;
        int64_t x20_2 = arg2[1];
        if (x21_2 != x20_2)
        {
            do
            {
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(x0);
                x21_2 = (x21_2 + 0x10);
                x0 = (arg1[1] + 0x10);
                arg1[1] = x0;
            } while (x20_2 != x21_2);
        }
    }
    return x0;
}

int128_t* nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(char* arg1)
{
    int128_t* s;
    int128_t v0;
    s = operator new(0x18);
    __builtin_memset(s, 0, 0x18);
    if ((*arg1 & 1) == 0)
    {
        s[1] = *(arg1 + 0x10);
        *s = *arg1;
    }
    else
    {
        size_t x20_1 = *(arg1 + 8);
        if (x20_1 < -0x10)
        {
            int64_t x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            operator delete(s);
            int32_t x0_8;
            char* x1_2;
            int64_t* x8_5;
            x0_8 = _Unwind_Resume(x0_5);
            /* tailcall */
            return nlohmann::detail::invalid_iterator::create(x0_8, x1_2, x8_5);
        }
        int64_t x21_1 = *(arg1 + 0x10);
        void* x22_2;
        if (x20_1 >= 0x17)
        {
            uint64_t x23_1 = ((x20_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x23_1);
            x22_2 = x0_1;
            *(s + 8) = x20_1;
            s[1] = x0_1;
            *s = (x23_1 | 1);
        }
        else
        {
            *s = (x20_1 << 1);
            x22_2 = (s + 1);
        }
        if ((x20_1 >= 0x17 || (x20_1 < 0x17 && x20_1 != 0)))
        {
            memcpy(x22_2, x21_1, x20_1);
        }
        *(x22_2 + x20_1) = 0;
    }
    return s;
}

int64_t nlohmann::detail::invalid_iterator::create(int32_t arg1, char* arg2, int64_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    __builtin_strncpy(&s, " invalid_iterator", 0x12);
    nlohmann::detail::exception::name(&s, arg1);
    *(arg2 + 8);
    void* x1_1;
    if ((*arg2 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    char var_68;
    int128_t* s_1;
    int128_t v0;
    s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_68, x1_1);
    void* x8_2 = s_1[1];
    int128_t var_50 = *s_1;
    __builtin_memset(s_1, 0, 0x18);
    void* var_58;
    if ((var_68 & 1) != 0)
    {
        operator delete(var_58);
    }
    void* var_70;
    if ((s & 1) != 0)
    {
        operator delete(var_70);
    }
    arg3[1] = arg1;
    *arg3 = (_vtable_for_nlohmann::detail::exception + 0x10);
    int64_t x0_5 = std::runtime_error::runtime_error(&arg3[2]);
    uint32_t x8_6 = var_50;
    *arg3 = (_vtable_for_nlohmann::detail::invalid_iterator + 0x10);
    if ((x8_6 & 1) != 0)
    {
        x0_5 = operator delete(x8_2);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t nlohmann::detail::invalid_iterator::~invalid_iterator(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t nlohmann::detail::type_error::create(int32_t arg1, char* arg2, int64_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t var_80 = 0;
    int64_t var_78 = 0;
    var_80 = 0x14;
    void* var_70 = nullptr;
    __builtin_strncpy(&*var_80[1], "type_error", 0xb);
    nlohmann::detail::exception::name(&var_80, arg1);
    *(arg2 + 8);
    void* x1_1;
    if ((*arg2 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    char var_68;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_68, x1_1);
    void* x8_2 = s[1];
    int128_t var_50 = *s;
    __builtin_memset(s, 0, 0x18);
    void* var_58;
    if ((var_68 & 1) != 0)
    {
        operator delete(var_58);
    }
    if ((var_80 & 1) != 0)
    {
        operator delete(var_70);
    }
    arg3[1] = arg1;
    *arg3 = (_vtable_for_nlohmann::detail::exception + 0x10);
    int64_t x0_5 = std::runtime_error::runtime_error(&arg3[2]);
    uint32_t x8_6 = var_50;
    *arg3 = (_vtable_for_nlohmann::detail::type_error + 0x10);
    if ((x8_6 & 1) != 0)
    {
        x0_5 = operator delete(x8_2);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::erase(int64_t* arg1, void* arg2)
{
    int64_t* i_1 = *(arg2 + 8);
    int64_t* i_2;
    if (i_1 == 0)
    {
        int64_t** x8_1 = (arg2 + 0x10);
        i_2 = *x8_1;
        if (*i_2 != arg2)
        {
            int64_t* i;
            do
            {
                i = *x8_1;
                x8_1 = &i[2];
                i_2 = *x8_1;
            } while (*i_2 != i);
        }
    }
    else
    {
        do
        {
            i_2 = i_1;
            i_1 = *i_1;
        } while (i_1 != 0);
    }
    if (*arg1 == arg2)
    {
        *arg1 = i_2;
    }
    std::__ndk1::fpos<mbstate_t>* x8_4 = arg1[1];
    arg1[2] = (arg1[2] - 1);
    std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(x8_4, arg2);
    *(arg2 + 0x38);
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy((arg2 + 0x40));
    if ((*(arg2 + 0x20) & 1) != 0)
    {
        operator delete(*(arg2 + 0x30));
    }
    operator delete(arg2);
    return i_2;
}

void std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(int64_t* arg1, int64_t* arg2)
{
    int64_t* x9 = *arg2;
    int64_t* i;
    int64_t* i_1;
    if (x9 == 0)
    {
        i_1 = arg2;
        x9 = i_1[1];
    }
    else
    {
        i = arg2[1];
        if (i == 0)
        {
            i_1 = arg2;
        }
        else
        {
            do
            {
                i_1 = i;
                i = *i;
            } while (i != 0);
            x9 = i_1[1];
        }
    }
    int32_t x11;
    void* x12;
    if ((((x9 != 0 && i == 0) || x9 == 0) || ((x9 != 0 && i != 0) && x9 != 0)))
    {
        x12 = &i_1[2];
        x11 = 1;
        x9[2] = *x12;
    }
    if ((x9 == 0 || (i != 0 && x9 == 0)))
    {
        x11 = 0;
        x12 = &i_1[2];
    }
    int64_t* x13 = i_1[2];
    int64_t* x8_2 = *x13;
    if (x8_2 != i_1)
    {
        x13[1] = x9;
    }
    else
    {
        *x13 = x9;
        if (i_1 == arg1)
        {
            x8_2 = nullptr;
            arg1 = x9;
        }
        else
        {
            x8_2 = x13[1];
        }
    }
    uint32_t x13_1 = i_1[3];
    if (i_1 != arg2)
    {
        void** x14_1 = arg2[2];
        *x12 = x14_1;
        int64_t x12_4;
        if (*arg2[2] == arg2)
        {
            x12_4 = 0;
        }
        else
        {
            x12_4 = 8;
        }
        *(x14_1 + x12_4) = i_1;
        void* x12_5 = *arg2;
        *i_1 = x12_5;
        *(x12_5 + 0x10) = i_1;
        void* x12_6 = arg2[1];
        i_1[1] = x12_6;
        if (x12_6 != 0)
        {
            *(x12_6 + 0x10) = i_1;
        }
        if (arg1 == arg2)
        {
            arg1 = i_1;
        }
        i_1[3] = arg2[3];
    }
    if ((x13_1 != 0 && arg1 != 0))
    {
        if ((x11 & 1) == 0)
        {
            void* x9_3;
            void* x10_3;
            void* x11_9;
            while (true)
            {
                int64_t* x11_2 = x8_2[2];
                uint32_t x12_9 = x8_2[3];
                int64_t* x11_4;
                if (*x11_2 == x8_2)
                {
                    void* x9_4;
                    void* x10_4;
                    void* x11_5;
                    char* x11_10;
                    if (x12_9 != 0)
                    {
                        x11_5 = *x8_2;
                        if (x11_5 == 0)
                        {
                        label_2e288:
                            int64_t** x12_14 = x8_2[1];
                            if (x12_14 != 0)
                            {
                                if (x12_14[3] != 0)
                                {
                                    goto label_2e298;
                                }
                                if (x11_5 == 0)
                                {
                                    goto label_2e410;
                                }
                                x11_10 = (x11_5 + 0x18);
                                if (*x11_10 == 0)
                                {
                                    goto label_2e3e8;
                                }
                                x12_14 = x8_2[1];
                            label_2e410:
                                x9_4 = &x12_14[3];
                                *x9_4 = 1;
                                x11_10 = &x8_2[3];
                                *x11_10 = 0;
                                int64_t* x10_5 = *x12_14;
                                *(x11_10 - 0x10) = x10_5;
                                if (x10_5 != 0)
                                {
                                    x10_5[2] = x8_2;
                                }
                                x10_4 = &x12_14[2];
                                *x10_4 = x8_2[2];
                                int64_t*** x13_13 = x8_2[2];
                                int64_t x14_8;
                                if (*x13_13 == x8_2)
                                {
                                    x14_8 = 0;
                                }
                                else
                                {
                                    x14_8 = 8;
                                }
                                *(x13_13 + x14_8) = x12_14;
                                *x12_14 = x8_2;
                                x8_2[2] = x12_14;
                                goto label_2e454;
                            }
                        label_2e298:
                            x11_4 = x8_2[2];
                            x8_2[3] = 0;
                            if (x11_4 == arg1)
                            {
                                goto label_2e378;
                            }
                        }
                    }
                    else
                    {
                        x8_2[3] = 1;
                        x11_2[3] = 0;
                        int64_t* x12_13 = x8_2[1];
                        *x11_2 = x12_13;
                        if (x12_13 != 0)
                        {
                            x12_13[2] = x11_2;
                        }
                        x8_2[2] = x11_2[2];
                        int64_t** x13_9 = x11_2[2];
                        if (*x13_9 == x11_2)
                        {
                            *x13_9 = x8_2;
                            x12_13 = *x11_2;
                        }
                        else
                        {
                            x13_9[1] = x8_2;
                        }
                        x8_2[1] = x11_2;
                        x11_2[2] = x8_2;
                        if (arg1 == x11_2)
                        {
                            arg1 = x8_2;
                        }
                        x8_2 = x12_13;
                        x11_5 = *x8_2;
                        if (x11_5 == 0)
                        {
                            goto label_2e288;
                        }
                    }
                    if (((x12_9 != 0 && x11_5 != 0) || x12_9 == 0))
                    {
                        if (*(x11_5 + 0x18) != 0)
                        {
                            goto label_2e288;
                        }
                        x11_10 = (x11_5 + 0x18);
                    label_2e3e8:
                        x10_4 = &x8_2[2];
                        x9_4 = &x8_2[3];
                    label_2e454:
                        void** x8_5 = *x10_4;
                        *x9_4 = x8_5[3];
                        x8_5[3] = 1;
                        *x11_10 = 1;
                        void* x9_7 = *x8_5;
                        void* x10_8 = *(x9_7 + 8);
                        *x8_5 = x10_8;
                        if (x10_8 != 0)
                        {
                            *(x10_8 + 0x10) = x8_5;
                        }
                        *(x9_7 + 0x10) = x8_5[2];
                        int64_t* x10_10 = x8_5[2];
                        int64_t x11_13;
                        if (*x10_10 == x8_5)
                        {
                            x11_13 = 0;
                        }
                        else
                        {
                            x11_13 = 8;
                        }
                        *(x10_10 + x11_13) = x9_7;
                        *(x9_7 + 8) = x8_5;
                        x8_5[2] = x9_7;
                        return;
                    }
                }
                else
                {
                    void* x11_7;
                    void* x12_10;
                    if (x12_9 != 0)
                    {
                        x12_10 = *x8_2;
                        if (x12_10 == 0)
                        {
                        label_2e250:
                            x11_7 = x8_2[1];
                            if (x11_7 != 0)
                            {
                                if (*(x11_7 + 0x18) != 0)
                                {
                                    goto label_2e260;
                                }
                            label_2e388:
                                x11_9 = (x11_7 + 0x18);
                                if (*x11_9 == 0)
                                {
                                    x10_3 = &x8_2[2];
                                    x9_3 = &x8_2[3];
                                    break;
                                }
                                goto label_2e39c;
                            }
                        label_2e260:
                            x11_4 = x8_2[2];
                            x8_2[3] = 0;
                            if (x11_4 == arg1)
                            {
                                x11_4 = arg1;
                            label_2e378:
                                x11_4[3] = 1;
                                return;
                            }
                        }
                    }
                    else
                    {
                        x8_2[3] = 1;
                        int64_t** x12_12 = x11_2[1];
                        x11_2[3] = 0;
                        int64_t* x13_5 = *x12_12;
                        x11_2[1] = x13_5;
                        if (x13_5 != 0)
                        {
                            x13_5[2] = x11_2;
                        }
                        x12_12[2] = x11_2[2];
                        int64_t* x13_7 = x11_2[2];
                        int64_t x14_3;
                        if (*x13_7 == x11_2)
                        {
                            x14_3 = 0;
                        }
                        else
                        {
                            x14_3 = 8;
                        }
                        *(x13_7 + x14_3) = x12_12;
                        *x12_12 = x11_2;
                        x11_2[2] = x12_12;
                        void* x11_6 = *x8_2;
                        if (arg1 == x11_6)
                        {
                            arg1 = x8_2;
                        }
                        x8_2 = *(x11_6 + 8);
                        x12_10 = *x8_2;
                        if (x12_10 == 0)
                        {
                            goto label_2e250;
                        }
                    }
                    if (((x12_9 != 0 && x12_10 != 0) || x12_9 == 0))
                    {
                        if (*(x12_10 + 0x18) != 0)
                        {
                            goto label_2e250;
                        }
                        x11_7 = x8_2[1];
                        if (x11_7 != 0)
                        {
                            goto label_2e388;
                        }
                    label_2e39c:
                        x9_3 = (x12_10 + 0x18);
                        *x9_3 = 1;
                        x11_9 = &x8_2[3];
                        *x11_9 = 0;
                        void* x10_1 = *(x9_3 - 0x10);
                        *x8_2 = x10_1;
                        if (x10_1 != 0)
                        {
                            *(x10_1 + 0x10) = x8_2;
                        }
                        x10_3 = (x12_10 + 0x10);
                        *x10_3 = x8_2[2];
                        void** x13_11 = x8_2[2];
                        int64_t x14_6;
                        if (*x13_11 == x8_2)
                        {
                            x14_6 = 0;
                        }
                        else
                        {
                            x14_6 = 8;
                        }
                        *(x13_11 + x14_6) = x12_10;
                        *(x12_10 + 8) = x8_2;
                        x8_2[2] = x12_10;
                        break;
                    }
                }
                if (x11_4[3] == 0)
                {
                    goto label_2e378;
                }
                int64_t* x8_3 = x11_4[2];
                int32_t x11_1;
                if (*x8_3 == x11_4)
                {
                    x11_1 = 1;
                }
                else
                {
                    x11_1 = 0;
                }
                x8_2 = x8_3[x11_1];
            }
            void* x8_6 = *x10_3;
            *x9_3 = *(x8_6 + 0x18);
            *(x8_6 + 0x18) = 1;
            *x11_9 = 1;
            void** x9_8 = *(x8_6 + 8);
            void* x10_12 = *x9_8;
            *(x8_6 + 8) = x10_12;
            if (x10_12 != 0)
            {
                *(x10_12 + 0x10) = x8_6;
            }
            x9_8[2] = *(x8_6 + 0x10);
            void*** x10_14 = *(x8_6 + 0x10);
            int64_t x11_15;
            if (*x10_14 == x8_6)
            {
                x11_15 = 0;
            }
            else
            {
                x11_15 = 8;
            }
            *(x10_14 + x11_15) = x9_8;
            *x9_8 = x8_6;
            *(x8_6 + 0x10) = x9_8;
            return;
        }
        x9[3] = 1;
    }
}

int64_t nlohmann::detail::type_error::~type_error(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t arg1, int64_t arg2, int64_t* arg3, int64_t* arg4 @ x8)
{
    void* x0;
    int128_t v0;
    x0 = operator new(0x48);
    *arg4 = x0;
    arg4[1] = (arg1 + 8);
    arg4[2] = 0;
    char* x8 = *arg3;
    int64_t* x0_1 = (x0 + 0x20);
    *x0_1 = 0;
    *(x0 + 0x28) = 0;
    *(x0 + 0x30) = 0;
    if ((*x8 & 1) == 0)
    {
        v0 = *x8;
        x0_1[2] = *(x8 + 0x10);
        *x0_1 = v0;
    }
    else
    {
        size_t x21_1 = *(x8 + 8);
        if (x21_1 < -0x10)
        {
            int64_t x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            *arg4 = 0;
            operator delete(x0);
            /* tailcall */
            return nlohmann::detail::out_of_range::~out_of_range(_Unwind_Resume(x0_5));
        }
        int64_t x22_1 = *(x8 + 0x10);
        void* x23_1;
        if (x21_1 >= 0x17)
        {
            uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x24_1);
            x23_1 = x0_3;
            *(x0 + 0x28) = x21_1;
            *(x0 + 0x30) = x0_3;
            *(x0 + 0x20) = (x24_1 | 1);
        }
        else
        {
            x23_1 = (x0 + 0x21);
            *(x0 + 0x20) = (x21_1 << 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            x0_1 = memcpy(x23_1, x22_1, x21_1);
        }
        *(x23_1 + x21_1) = 0;
    }
    *(x0 + 0x38) = 0;
    *(x0 + 0x40) = 0;
    arg4[2] = 1;
    return x0_1;
}

int64_t nlohmann::detail::out_of_range::~out_of_range(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(int64_t* arg1, int64_t* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 7;
        int64_t var_48 = *arg2;
        int64_t* x0;
        int32_t x0_1;
        void* x21;
        if ((arg3 & 1) == 0)
        {
            x21 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21 - *(x21 - 8)) >> 3);
            x0 = *(x21 + 0x70);
            if (x0 == 0)
            {
                sub_2cc60();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_2e854:
                x20_1 = 0;
            label_2e888:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                int64_t x9_9 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                int64_t var_58 = x9_9;
                char* x9_10 = *arg1;
                char x1 = *x9_10;
                *x9_10 = x8_14;
                char var_60_2 = x1;
                int64_t x10_2 = *(x9_10 + 8);
                *(x9_10 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_2e87c:
                x20_1 = 1;
                goto label_2e888;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_2e854;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_12 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_12) == 0)
                {
                    goto label_2e854;
                }
                char x8_18 = var_50;
                int64_t x9_13 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                int64_t var_68 = x9_13;
                char* x9_14 = arg1[0xa];
                char x1_1 = *x9_14;
                *x9_14 = x8_18;
                char var_70_2 = x1_1;
                int64_t x10_6 = *(x9_14 + 8);
                *(x9_14 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_2e87c;
            }
            std::__ndk1::fpos<mbstate_t>* x0_2 = *(x8_10 + 8);
            char* x8_11 = *(x0_2 + 8);
            if (x8_11 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21 - 8) + 8) + 8);
            goto label_2e87c;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(char** arg1, char* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 4;
        uint64_t var_48 = *arg2;
        int64_t* x0;
        int32_t x0_1;
        void* x21;
        if ((arg3 & 1) == 0)
        {
            x21 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21 - *(x21 - 8)) >> 3);
            x0 = *(x21 + 0x70);
            if (x0 == 0)
            {
                sub_2cc60();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_2eaac:
                x20_1 = 0;
            label_2eae0:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                uint64_t x9_9 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                uint64_t var_58 = x9_9;
                char* x9_10 = *arg1;
                char x1 = *x9_10;
                *x9_10 = x8_14;
                char var_60_2 = x1;
                uint64_t x10_2 = *(x9_10 + 8);
                *(x9_10 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_2ead4:
                x20_1 = 1;
                goto label_2eae0;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_2eaac;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_12 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_12) == 0)
                {
                    goto label_2eaac;
                }
                char x8_18 = var_50;
                uint64_t x9_13 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                uint64_t var_68 = x9_13;
                char* x9_14 = arg1[0xa];
                char x1_1 = *x9_14;
                *x9_14 = x8_18;
                char var_70_2 = x1_1;
                uint64_t x10_6 = *(x9_14 + 8);
                *(x9_14 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_2ead4;
            }
            std::__ndk1::fpos<mbstate_t>* x0_2 = *(x8_10 + 8);
            char* x8_11 = *(x0_2 + 8);
            if (x8_11 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21 - 8) + 8) + 8);
            goto label_2ead4;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(int64_t* arg1, int64_t arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x19_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x19_1 = 0;
    }
    else
    {
        char var_50 = 0;
        int64_t var_48 = 0;
        int64_t* x0;
        int32_t x0_1;
        void* x20;
        if ((arg3 & 1) == 0)
        {
            x20 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x20 - *(x20 - 8)) >> 3);
            x0 = *(x20 + 0x70);
            if (x0 == 0)
            {
                sub_2cc60();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_2ecf4:
                x19_1 = 0;
            label_2ed2c:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x20 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                int64_t x9_8 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                int64_t var_58 = x9_8;
                char* x9_9 = *arg1;
                char x1 = *x9_9;
                *x9_9 = x8_14;
                char var_60_2 = x1;
                int64_t x10_2 = *(x9_9 + 8);
                *(x9_9 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_2ed1c:
                x19_1 = 1;
                goto label_2ed2c;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_2ecf4;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_11 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_11) == 0)
                {
                    goto label_2ecf4;
                }
                char x8_18 = var_50;
                int64_t x9_12 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                int64_t var_68 = x9_12;
                char* x9_13 = arg1[0xa];
                char x1_1 = *x9_13;
                *x9_13 = x8_18;
                char var_70_2 = x1_1;
                int64_t x10_6 = *(x9_13 + 8);
                *(x9_13 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_2ed1c;
            }
            std::__ndk1::fpos<mbstate_t>* x0_2 = *(x8_10 + 8);
            char* x8_11 = *(x0_2 + 8);
            if (x8_11 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x20 - 8) + 8) + 8);
            goto label_2ed1c;
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(int64_t* arg1, int64_t* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 5;
        int64_t var_48 = *arg2;
        int64_t* x0;
        int32_t x0_1;
        void* x21;
        if ((arg3 & 1) == 0)
        {
            x21 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21 - *(x21 - 8)) >> 3);
            x0 = *(x21 + 0x70);
            if (x0 == 0)
            {
                sub_2cc60();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_2ef50:
                x20_1 = 0;
            label_2ef84:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_8 = arg1[2];
            if (arg1[1] == x8_8)
            {
                char x8_13 = var_50;
                int64_t x9_9 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_13;
                int64_t var_58 = x9_9;
                char* x9_10 = *arg1;
                char x1 = *x9_10;
                *x9_10 = x8_13;
                char var_60_2 = x1;
                int64_t x10_3 = *(x9_10 + 8);
                *(x9_10 + 8) = var_58;
                var_58 = x10_3;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_2ef78:
                x20_1 = 1;
                goto label_2ef84;
            }
            char* x8_9 = *(x8_8 - 8);
            if (x8_9 == 0)
            {
                goto label_2ef50;
            }
            if (*x8_9 != 2)
            {
                int64_t x8_16 = (arg1[8] - 1);
                int64_t x9_12 = *(arg1[7] + ((x8_16 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_16;
                if (((1 << x8_16) & x9_12) == 0)
                {
                    goto label_2ef50;
                }
                char x8_17 = var_50;
                int64_t x9_13 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_17;
                int64_t var_68 = x9_13;
                char* x9_14 = arg1[0xa];
                char x1_1 = *x9_14;
                *x9_14 = x8_17;
                char var_70_2 = x1_1;
                int64_t x10_7 = *(x9_14 + 8);
                *(x9_14 + 8) = var_68;
                var_68 = x10_7;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_2ef78;
            }
            std::__ndk1::fpos<mbstate_t>* x0_2 = *(x8_9 + 8);
            char* x8_10 = *(x0_2 + 8);
            if (x8_10 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_10 = var_50;
                *(x8_10 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21 - 8) + 8) + 8);
            goto label_2ef78;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(int64_t* arg1, std::__ndk1::fpos<mbstate_t>** arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 3;
        int64_t var_48 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
        int64_t* x0_2;
        int32_t x0_3;
        void* x21_1;
        if ((arg3 & 1) == 0)
        {
            x21_1 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21_1 - *(x21_1 - 8)) >> 3);
            x0_2 = *(x21_1 + 0x70);
            if (x0_2 == 0)
            {
                sub_2cc60();
                /* no return */
            }
            x0_3 = *(*x0_2 + 0x30)();
            if ((x0_3 & 1) == 0)
            {
            label_2f1b0:
                x20_1 = 0;
            label_2f1e4:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21_1 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0_2 != 0) && (x0_3 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                int64_t x9_8 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                int64_t var_58 = x9_8;
                char* x9_9 = *arg1;
                char x1 = *x9_9;
                *x9_9 = x8_14;
                char var_60_2 = x1;
                int64_t x10_2 = *(x9_9 + 8);
                *(x9_9 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_2f1d8:
                x20_1 = 1;
                goto label_2f1e4;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_2f1b0;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_11 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_11) == 0)
                {
                    goto label_2f1b0;
                }
                char x8_18 = var_50;
                int64_t x9_12 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                int64_t var_68 = x9_12;
                char* x9_13 = arg1[0xa];
                char x1_1 = *x9_13;
                *x9_13 = x8_18;
                char var_70_2 = x1_1;
                int64_t x10_6 = *(x9_13 + 8);
                *(x9_13 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_2f1d8;
            }
            std::__ndk1::fpos<mbstate_t>* x0_4 = *(x8_10 + 8);
            char* x8_11 = *(x0_4 + 8);
            if (x8_11 >= *(x0_4 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_4);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_4 + 8) = (*(x0_4 + 8) + 0x10);
            }
            *(*(*(*x21_1 - 8) + 8) + 8);
            goto label_2f1d8;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(int64_t* arg1, int64_t* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 6;
        int64_t var_48 = *arg2;
        int64_t* x0;
        int32_t x0_1;
        void* x21;
        if ((arg3 & 1) == 0)
        {
            x21 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21 - *(x21 - 8)) >> 3);
            x0 = *(x21 + 0x70);
            if (x0 == 0)
            {
                sub_2cc60();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_2f408:
                x20_1 = 0;
            label_2f43c:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                int64_t x9_9 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                int64_t var_58 = x9_9;
                char* x9_10 = *arg1;
                char x1 = *x9_10;
                *x9_10 = x8_14;
                char var_60_2 = x1;
                int64_t x10_2 = *(x9_10 + 8);
                *(x9_10 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_2f430:
                x20_1 = 1;
                goto label_2f43c;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_2f408;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_12 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_12) == 0)
                {
                    goto label_2f408;
                }
                char x8_18 = var_50;
                int64_t x9_13 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                int64_t var_68 = x9_13;
                char* x9_14 = arg1[0xa];
                char x1_1 = *x9_14;
                *x9_14 = x8_18;
                char var_70_2 = x1_1;
                int64_t x10_6 = *(x9_14 + 8);
                *(x9_14 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_2f430;
            }
            std::__ndk1::fpos<mbstate_t>* x0_2 = *(x8_10 + 8);
            char* x8_11 = *(x0_2 + 8);
            if (x8_11 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21 - 8) + 8) + 8);
            goto label_2f430;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::parse_error::parse_error(void** arg1, void* arg2)
{
    int64_t* x20 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x20[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x20 = (_vtable_for_nlohmann::detail::parse_error + 0x10);
    x20[4] = *(arg2 + 0x20);
    return x0_1;
}

int64_t nlohmann::detail::out_of_range::out_of_range(void** arg1, void* arg2)
{
    int64_t* x19 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x19[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x19 = (_vtable_for_nlohmann::detail::out_of_range + 0x10);
    return x0_1;
}

int64_t nlohmann::detail::invalid_iterator::invalid_iterator(void** arg1, void* arg2)
{
    int64_t* x19 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x19[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x19 = (_vtable_for_nlohmann::detail::invalid_iterator + 0x10);
    return x0_1;
}

int64_t nlohmann::detail::type_error::type_error(void** arg1, void* arg2)
{
    int64_t* x19 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x19[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x19 = (_vtable_for_nlohmann::detail::type_error + 0x10);
    return x0_1;
}

int64_t nlohmann::detail::other_error::other_error(void** arg1, void* arg2)
{
    int64_t* x19 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x19[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x19 = (_vtable_for_nlohmann::detail::other_error + 0x10);
    return x0_1;
}

int64_t nlohmann::detail::parse_error::~parse_error(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int128_t* nlohmann::detail::parse_error::position_string(void* arg1, int128_t* arg2 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    std::__ndk1::to_string((*(arg1 + 0x10) + 1));
    char var_88;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&var_88, nullptr, " at line ");
    void* x8_2 = s[1];
    int128_t var_70 = *s;
    __builtin_memset(s, 0, 0x18);
    int128_t* s_1;
    int128_t v0_1;
    s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_70, ", column ");
    void* x8_3 = s_1[1];
    int128_t var_50 = *s_1;
    __builtin_memset(s_1, 0, 0x18);
    std::__ndk1::to_string(*(arg1 + 8));
    char var_a0;
    void* var_90;
    uint64_t x1;
    if ((var_a0 & 1) == 0)
    {
        x1 = (&var_a0 | 1);
    }
    else
    {
        x1 = var_90;
    }
    int128_t* s_2;
    int128_t v0_2;
    s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_50, x1);
    arg2[1] = s_2[1];
    *arg2 = *s_2;
    __builtin_memset(s_2, 0, 0x18);
    if ((var_a0 & 1) != 0)
    {
        s_2 = operator delete(var_90);
    }
    if ((((var_a0 & 1) != 0 && (var_50 & 1) != 0) || ((var_a0 & 1) == 0 && (var_50 & 1) != 0)))
    {
        s_2 = operator delete(x8_3);
        if ((var_70 & 1) != 0)
        {
            goto label_2f7a0;
        }
    }
    if ((((((((var_a0 & 1) != 0 && (var_50 & 1) == 0) || ((var_a0 & 1) == 0 && (var_50 & 1) == 0)) && (var_70 & 1) == 0) || ((var_a0 & 1) != 0 && (var_50 & 1) != 0)) || ((var_a0 & 1) == 0 && (var_50 & 1) != 0)) && (var_88 & 1) != 0))
    {
        goto label_2f754;
    }
    if (((((var_a0 & 1) != 0 && (var_50 & 1) == 0) || ((var_a0 & 1) == 0 && (var_50 & 1) == 0)) && (var_70 & 1) != 0))
    {
    label_2f7a0:
        s_2 = operator delete(x8_2);
        if ((var_88 & 1) != 0)
        {
        label_2f754:
            void* var_78;
            s_2 = operator delete(var_78);
        }
    }
    if (((((((((var_a0 & 1) != 0 && (var_50 & 1) == 0) || ((var_a0 & 1) == 0 && (var_50 & 1) == 0)) && (var_70 & 1) == 0) || ((var_a0 & 1) != 0 && (var_50 & 1) != 0)) || ((var_a0 & 1) == 0 && (var_50 & 1) != 0)) && (var_88 & 1) == 0) || ((((var_a0 & 1) != 0 && (var_50 & 1) == 0) || ((var_a0 & 1) == 0 && (var_50 & 1) == 0)) && (var_70 & 1) != 0)))
    {
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return s_2;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(void* arg1)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    std::__ndk1::fpos<mbstate_t>** x20 = *(*(*(arg1 + 0x10) - 8) + 8);
    int64_t x1;
    int64_t var_60 = x1;
    int64_t var_58;
    int64_t* x0_1 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x20, &var_58);
    int64_t* x8_3 = *x0_1;
    if (x8_3 == 0)
    {
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(x20);
        int64_t x8_4 = var_58;
        int64_t* var_50;
        int64_t* x1_3 = var_50;
        *x1_3 = 0;
        x1_3[1] = 0;
        x1_3[2] = x8_4;
        *x0_1 = x1_3;
        std::__ndk1::fpos<mbstate_t>* x8_6 = **x20;
        if (x8_6 != 0)
        {
            *x20 = x8_6;
            x1_3 = *x0_1;
        }
        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x20[1], x1_3);
        x20[2] = (x20[2] + 1);
        x8_3 = var_50;
    }
    *(arg1 + 0x20) = &x8_3[7];
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 1;
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(int64_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_1;
    if (arg1[1] == x8_1)
    {
        uint64_t x22_1 = *arg2;
        char var_48_1 = x22_1;
        int64_t** s_4;
        if ((x22_1 > 7 || (x22_1 <= 7 && (((x22_1 == 0 || x22_1 == 5) || x22_1 == 6) || x22_1 == 7))))
        {
            s_4 = nullptr;
        }
        if (x22_1 <= 7)
        {
            switch (x22_1)
            {
                case 1:
                {
                    int64_t** s_5 = operator new(0x18);
                    s_5[1] = 0;
                    s_5[2] = 0;
                    *s_5 = &s_5[1];
                    s_4 = s_5;
                    break;
                }
                case 2:
                {
                    int64_t** s = operator new(0x18);
                    __builtin_memset(s, 0, 0x18);
                    s_4 = s;
                    break;
                }
                case 3:
                {
                    s_4 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_3cde1);
                    break;
                }
                case 4:
                {
                    s_4 = 0;
                    break;
                }
            }
        }
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = x22_1;
        char var_48_2 = x1;
        int64_t** s_7 = *(x8_7 + 8);
        *(x8_7 + 8) = s_4;
        s_4 = s_7;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_4);
        x0_1 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            uint64_t x22_2 = *arg2;
            char var_58_1 = x22_2;
            int64_t** s_3;
            if ((x22_2 > 7 || (x22_2 <= 7 && (((x22_2 == 0 || x22_2 == 5) || x22_2 == 6) || x22_2 == 7))))
            {
                s_3 = nullptr;
            }
            if (x22_2 <= 7)
            {
                switch (x22_2)
                {
                    case 1:
                    {
                        int64_t** s_6 = operator new(0x18);
                        s_6[1] = 0;
                        s_6[2] = 0;
                        *s_6 = &s_6[1];
                        s_3 = s_6;
                        break;
                    }
                    case 2:
                    {
                        int64_t** s_1 = operator new(0x18);
                        __builtin_memset(s_1, 0, 0x18);
                        s_3 = s_1;
                        break;
                    }
                    case 3:
                    {
                        s_3 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_3cde1);
                        break;
                    }
                    case 4:
                    {
                        s_3 = 0;
                        break;
                    }
                }
            }
            char* x8_8 = arg1[4];
            char x1_1 = *x8_8;
            *x8_8 = x22_2;
            char var_58_2 = x1_1;
            int64_t** s_8 = *(x8_8 + 8);
            *(x8_8 + 8) = s_3;
            s_3 = s_8;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_3);
            x0_1 = arg1[4];
        }
        else
        {
            std::__ndk1::fpos<mbstate_t>* x20_1 = *(x8_2 + 8);
            char* x22 = *(x20_1 + 8);
            if (x22 >= *(x20_1 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(x20_1);
            }
            else
            {
                uint64_t x8_4 = *arg2;
                *x22 = x8_4;
                if ((x8_4 > 7 || (x8_4 <= 7 && (((x8_4 == 0 || x8_4 == 5) || x8_4 == 6) || x8_4 == 7))))
                {
                    *(x22 + 8) = 0;
                }
                if (x8_4 <= 7)
                {
                    switch (x8_4)
                    {
                        case 1:
                        {
                            int64_t** x0_6 = operator new(0x18);
                            x0_6[1] = 0;
                            x0_6[2] = 0;
                            *x0_6 = &x0_6[1];
                            *(x22 + 8) = x0_6;
                            break;
                        }
                        case 2:
                        {
                            int64_t s_2 = operator new(0x18);
                            __builtin_memset(s_2, 0, 0x18);
                            *(x22 + 8) = s_2;
                            break;
                        }
                        case 3:
                        {
                            *(x22 + 8) = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_3cde1);
                            break;
                        }
                        case 4:
                        {
                            x22[8] = 0;
                            break;
                        }
                    }
                }
                *(x20_1 + 8) = (*(x20_1 + 8) + 0x10);
            }
            x0_1 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

void std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>(int64_t* arg1, int64_t* arg2)
{
    void* x20 = *arg1;
    size_t x21 = (arg1[1] - x20);
    int64_t x24 = (x21 >> 3);
    if (((x24 + 1) >> 0x3d) != 0)
    {
        int64_t* x0_6;
        char* x1_2;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(x0_6, x1_2, x20);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t* x23;
    int64_t x25;
    if (0xffffffffffffffe < (x9_2 >> 3))
    {
        x25 = 0x1fffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 2);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x23 = nullptr;
        }
        else if ((x25 >> 0x3d) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0xffffffffffffffe < (x9_2 >> 3) || (0xffffffffffffffe >= (x9_2 >> 3) && x25 != 0)))
    {
        x23 = operator new((x25 << 3));
    }
    void* x24_1 = &x23[x24];
    *x24_1 = *arg2;
    if (x21 >= 1)
    {
        memcpy(x23, x20, x21);
    }
    *arg1 = x23;
    arg1[1] = (x24_1 + 8);
    arg1[2] = &x23[x25];
    if (x20 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x20);
}

void std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(int64_t* arg1, char* arg2, void* arg3 @ x20)
{
    void* var_20 = arg3;
    int64_t x23 = *arg1;
    char* x22 = arg1[1];
    int64_t* x19 = arg1;
    int64_t x24 = ((x22 - x23) >> 4);
    if (((x24 + 1) >> 0x3c) != 0)
    {
        int64_t x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        if (arg3 != 0)
        {
            operator delete(arg3);
        }
        int64_t* x0_9;
        int64_t* x1_2;
        x0_9 = _Unwind_Resume(x0_6);
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(x0_9, x1_2);
    }
    int64_t x9_2 = (x19[2] - x23);
    int64_t* x20;
    int64_t x25;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x25 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x20 = nullptr;
        }
        else if ((x25 >> 0x3c) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x25 != 0)))
    {
        x20 = operator new((x25 << 4));
    }
    uint64_t x8_3 = *arg2;
    void* x26 = &x20[(x24 * 2)];
    *x26 = x8_3;
    if ((x8_3 > 7 || (x8_3 <= 7 && (((x8_3 == 0 || x8_3 == 5) || x8_3 == 6) || x8_3 == 7))))
    {
        *(x26 + 8) = 0;
    }
    if (x8_3 <= 7)
    {
        switch (x8_3)
        {
            case 1:
            {
                arg1 = operator new(0x18);
                arg1[1] = 0;
                arg1[2] = 0;
                *arg1 = &arg1[1];
                *(x26 + 8) = arg1;
                break;
            }
            case 2:
            {
                arg1 = operator new(0x18);
                __builtin_memset(arg1, 0, 0x18);
                *(x26 + 8) = arg1;
                break;
            }
            case 3:
            {
                *(x26 + 8) = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_3cde1);
                x23 = *x19;
                x22 = x19[1];
                break;
            }
            case 4:
            {
                *(x26 + 8) = 0;
                break;
            }
        }
    }
    void* x9_4 = (x26 + 0x10);
    char* x21_3;
    if (x22 == x23)
    {
        x21_3 = x22;
    }
    else
    {
        int64_t x10_5 = (x24 + (-1 ^ (((x22 - 0x10) - x23) >> 4)));
        void* x11_2 = (&x20[(x24 * 2)] - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_2 - 8) = *x22;
            *x11_2 = *(x22 + 8);
            x11_2 = (x11_2 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x23 != x22);
        x21_3 = *x19;
        x22 = x19[1];
        x26 = &x20[(x10_5 * 2)];
    }
    *x19 = x26;
    x19[1] = x9_4;
    x19[2] = &x20[(x25 * 2)];
    if (x22 != x21_3)
    {
        do
        {
            x22 = &x22[-0x10];
            *x22;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x22[8]);
        } while (x21_3 != x22);
    }
    if (x21_3 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x21_3);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 7;
        int64_t var_30 = *arg2;
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = 7;
        char var_38_2 = x1;
        int64_t x10_1 = *(x8_7 + 8);
        *(x8_7 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 7;
            int64_t var_40 = *arg2;
            char* x8_9 = arg1[4];
            char x1_1 = *x8_9;
            *x8_9 = 7;
            char var_48_2 = x1_1;
            int64_t x10_2 = *(x8_9 + 8);
            *(x8_9 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            double** x0 = *(x8_2 + 8);
            char* x8_3 = x0[1];
            if (x8_3 >= x0[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<double&>(x0);
            }
            else
            {
                *(x8_3 + 8) = 0;
                int64_t x9_3 = *arg2;
                *x8_3 = 7;
                *(x8_3 + 8) = x9_3;
                x0[1] = &x0[1][2];
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<double&>(int64_t* arg1, int64_t* arg2)
{
    void* x19 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        char** x0_7;
        char* x1_2;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(x0_7, x1_2);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    char* x11 = (x0_2 + (x23 << 4));
    int64_t x8_3 = (x0_2 + (x24 << 4));
    *(x11 + 8) = *arg2;
    *x11 = 7;
    if (x22 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x23 + (-1 ^ (((x22 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_1 - 8) = *x22;
            *x11_1 = *(x22 + 8);
            x11_1 = (x11_1 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x22 == x19 && x19 != 0) || (x22 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x22 == x19 && x19 == 0) || (x22 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

char* nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(char** arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    char* x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 4;
        uint64_t var_30 = *arg2;
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = 4;
        char var_38_2 = x1;
        uint64_t x10_1 = *(x8_7 + 8);
        *(x8_7 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 4;
            uint64_t var_40 = *arg2;
            char* x8_9 = arg1[4];
            char x1_1 = *x8_9;
            *x8_9 = 4;
            char var_48_2 = x1_1;
            uint64_t x10_2 = *(x8_9 + 8);
            *(x8_9 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            bool** x0 = *(x8_2 + 8);
            char* x8_3 = x0[1];
            if (x8_3 >= x0[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<bool&>(x0);
            }
            else
            {
                *(x8_3 + 8) = 0;
                uint64_t x9_3 = *arg2;
                *x8_3 = 4;
                *(x8_3 + 8) = x9_3;
                x0[1] = &x0[1][0x10];
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<bool&>(int64_t* arg1, char* arg2)
{
    void* x19 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(std::__ndk1::__vector_base_common<true>::__throw_length_error());
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    char* x11 = (x0_2 + (x23 << 4));
    int64_t x8_3 = (x0_2 + (x24 << 4));
    *(x11 + 8) = *arg2;
    *x11 = 4;
    if (x22 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x23 + (-1 ^ (((x22 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_1 - 8) = *x22;
            *x11_1 = *(x22 + 8);
            x11_1 = (x11_1 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x22 == x19 && x19 != 0) || (x22 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x22 == x19 && x19 == 0) || (x22 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 0;
        int64_t var_30 = 0;
        char* x8_6 = *arg1;
        char x1_1 = *x8_6;
        *x8_6 = 0;
        char var_38_2 = x1_1;
        int64_t x10_1 = *(x8_6 + 8);
        *(x8_6 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 0;
            int64_t var_40 = 0;
            char* x8_7 = arg1[4];
            char x1_2 = *x8_7;
            *x8_7 = 0;
            char var_48_2 = x1_2;
            int64_t x10_2 = *(x8_7 + 8);
            *(x8_7 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            std::nullptr_t* x0 = *(x8_2 + 8);
            char* x8_3 = *(x0 + 8);
            if (x8_3 >= *(x0 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::nullptr_t>(x0);
            }
            else
            {
                *x8_3 = 0;
                *(x8_3 + 8) = 0;
                *(x0 + 8) = (*(x0 + 8) + 0x10);
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::nullptr_t>(int64_t* arg1)
{
    void* x19 = *arg1;
    char* x21 = arg1[1];
    int64_t x22 = ((x21 - x19) >> 4);
    if (((x22 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_7;
        int64_t* x1_3;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(x0_7, x1_3);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x23;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x23 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x22 + 1))
        {
            x23 = (x22 + 1);
        }
        else
        {
            x23 = x9_3;
        }
        if (x23 == 0)
        {
            x0_2 = 0;
        }
        else if ((x23 >> 0x3c) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x23 != 0)))
    {
        x0_2 = operator new((x23 << 4));
    }
    char* x11 = (x0_2 + (x22 << 4));
    int64_t x8_3 = (x0_2 + (x23 << 4));
    *x11 = 0;
    *(x11 + 8) = 0;
    if (x21 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x22 + (-1 ^ (((x21 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x21 = &x21[-0x10];
            *(x11_1 - 8) = *x21;
            *x11_1 = *(x21 + 8);
            x11_1 = (x11_1 - 0x10);
            *x21 = 0;
            *(x21 + 8) = 0;
        } while (x19 != x21);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x21 == x19 && x19 != 0) || (x21 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x21 == x19 && x19 == 0) || (x21 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 5;
        int64_t var_30 = *arg2;
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = 5;
        char var_38_2 = x1;
        int64_t x10_1 = *(x8_7 + 8);
        *(x8_7 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 5;
            int64_t var_40 = *arg2;
            char* x8_9 = arg1[4];
            char x1_1 = *x8_9;
            *x8_9 = 5;
            char var_48_2 = x1_1;
            int64_t x10_2 = *(x8_9 + 8);
            *(x8_9 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            int64_t** x0 = *(x8_2 + 8);
            char* x8_3 = x0[1];
            if (x8_3 >= x0[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<int64_t&>(x0);
            }
            else
            {
                *(x8_3 + 8) = 0;
                int64_t x9_3 = *arg2;
                *x8_3 = 5;
                *(x8_3 + 8) = x9_3;
                x0[1] = &x0[1][2];
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<int64_t&>(int64_t* arg1, int64_t* arg2)
{
    void* x19 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_7;
        std::__ndk1::fpos<mbstate_t>** x1_2;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(x0_7, x1_2);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    char* x11 = (x0_2 + (x23 << 4));
    int64_t x8_3 = (x0_2 + (x24 << 4));
    *(x11 + 8) = *arg2;
    *x11 = 5;
    if (x22 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x23 + (-1 ^ (((x22 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_1 - 8) = *x22;
            *x11_1 = *(x22 + 8);
            x11_1 = (x11_1 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x22 == x19 && x19 != 0) || (x22 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x22 == x19 && x19 == 0) || (x22 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(int64_t* arg1, std::__ndk1::fpos<mbstate_t>** arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_5;
    if (arg1[1] == x8_1)
    {
        char var_48_1 = 3;
        int64_t var_40 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
        char* x8_6 = *arg1;
        char x1 = *x8_6;
        *x8_6 = 3;
        char var_48_2 = x1;
        int64_t x10_1 = *(x8_6 + 8);
        *(x8_6 + 8) = var_40;
        var_40 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
        x0_5 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_58_1 = 3;
            int64_t var_50 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
            char* x8_7 = arg1[4];
            char x1_1 = *x8_7;
            *x8_7 = 3;
            char var_58_2 = x1_1;
            int64_t x10_2 = *(x8_7 + 8);
            *(x8_7 + 8) = var_50;
            var_50 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_50);
            x0_5 = arg1[4];
        }
        else
        {
            std::__ndk1::fpos<mbstate_t>** x20_1 = *(x8_2 + 8);
            char* x22_1 = x20_1[1];
            if (x22_1 >= x20_1[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(x20_1);
            }
            else
            {
                *(x22_1 + 8) = 0;
                *x22_1 = 3;
                *(x22_1 + 8) = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
                x20_1[1] = (x20_1[1] + 0x10);
            }
            x0_5 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(int64_t* arg1, std::__ndk1::fpos<mbstate_t>** arg2, void* arg3 @ x21)
{
    void* var_28 = arg3;
    int64_t x9 = *arg1;
    int64_t x22 = ((arg1[1] - x9) >> 4);
    if (((x22 + 1) >> 0x3c) != 0)
    {
        int64_t x0_9 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        if (arg3 != 0)
        {
            operator delete(arg3);
        }
        int64_t* x0_12;
        int64_t* x1_2;
        x0_12 = _Unwind_Resume(x0_9);
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(x0_12, x1_2);
    }
    int64_t x9_1 = (arg1[2] - x9);
    int64_t x21;
    int64_t x23;
    if (0x7fffffffffffffe < (x9_1 >> 4))
    {
        x23 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_2 = (x9_1 >> 3);
        if (x9_2 < (x22 + 1))
        {
            x23 = (x22 + 1);
        }
        else
        {
            x23 = x9_2;
        }
        if (x23 == 0)
        {
            x21 = 0;
        }
        else if ((x23 >> 0x3c) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_1 >> 4) || (0x7fffffffffffffe >= (x9_1 >> 4) && x23 != 0)))
    {
        x21 = operator new((x23 << 4));
    }
    char* x24 = (x21 + (x22 << 4));
    *(x24 + 8) = 0;
    *x24 = 3;
    int64_t x0_4 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
    *(x24 + 8) = x0_4;
    void* x20_1 = *arg1;
    char* x10_2 = arg1[1];
    int64_t x8_4 = (x21 + (x23 << 4));
    if (x10_2 == x20_1)
    {
        *arg1 = x24;
        arg1[1] = &x24[0x10];
        arg1[2] = x8_4;
    }
    else
    {
        int64_t x11_4 = (x22 + (-1 ^ (((x10_2 - 0x10) - x20_1) >> 4)));
        void* x12_1 = ((x21 + (x22 << 4)) - 8);
        do
        {
            x10_2 = &x10_2[-0x10];
            *(x12_1 - 8) = *x10_2;
            *x12_1 = *(x10_2 + 8);
            x12_1 = (x12_1 - 0x10);
            *x10_2 = 0;
            *(x10_2 + 8) = 0;
        } while (x20_1 != x10_2);
        x20_1 = *arg1;
        char* x22_1 = arg1[1];
        *arg1 = (x21 + (x11_4 << 4));
        arg1[1] = &x24[0x10];
        arg1[2] = x8_4;
        if (x22_1 != x20_1)
        {
            do
            {
                x22_1 = &x22_1[-0x10];
                *x22_1;
                x0_4 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x22_1[8]);
            } while (x20_1 != x22_1);
        }
    }
    if (((x10_2 == x20_1 && x20_1 != 0) || (x10_2 != x20_1 && x20_1 != 0)))
    {
        /* tailcall */
        return operator delete(x20_1);
    }
    if (((x10_2 == x20_1 && x20_1 == 0) || (x10_2 != x20_1 && x20_1 == 0)))
    {
        return x0_4;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 6;
        int64_t var_30 = *arg2;
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = 6;
        char var_38_2 = x1;
        int64_t x10_1 = *(x8_7 + 8);
        *(x8_7 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 6;
            int64_t var_40 = *arg2;
            char* x8_9 = arg1[4];
            char x1_1 = *x8_9;
            *x8_9 = 6;
            char var_48_2 = x1_1;
            int64_t x10_2 = *(x8_9 + 8);
            *(x8_9 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            uint64_t** x0 = *(x8_2 + 8);
            char* x8_3 = x0[1];
            if (x8_3 >= x0[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<uint64_t&>(x0);
            }
            else
            {
                *(x8_3 + 8) = 0;
                int64_t x9_3 = *arg2;
                *x8_3 = 6;
                *(x8_3 + 8) = x9_3;
                x0[1] = &x0[1][2];
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<uint64_t&>(int64_t* arg1, int64_t* arg2)
{
    void* x19 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_7;
        char* x1_2;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xc]>(x0_7, x1_2);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_18fbc();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    char* x11 = (x0_2 + (x23 << 4));
    int64_t x8_3 = (x0_2 + (x24 << 4));
    *(x11 + 8) = *arg2;
    *x11 = 6;
    if (x22 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x23 + (-1 ^ (((x22 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_1 - 8) = *x22;
            *x11_1 = *(x22 + 8);
            x11_1 = (x11_1 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x22 == x19 && x19 != 0) || (x22 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x22 == x19 && x19 == 0) || (x22 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xc]>(void* arg1, char* arg2)
{
    int64_t* i = *(arg1 + 8);
    int64_t* i_1;
    if (i != 0)
    {
        uint64_t x0_1 = strlen(arg2);
        i_1 = (arg1 + 8);
        do
        {
            uint64_t x8_1 = i[4];
            uint64_t x24_1;
            if ((x8_1 & 1) == 0)
            {
                x24_1 = (x8_1 >> 1);
            }
            else
            {
                x24_1 = i[5];
            }
            if (x0_1 == -1)
            {
                break;
            }
            uint64_t x2_1;
            if (x24_1 > x0_1)
            {
                x2_1 = x0_1;
            }
            else
            {
                x2_1 = x24_1;
            }
            int32_t x0_5;
            int32_t x8_2;
            if (x2_1 != 0)
            {
                void* x0_4;
                if ((x8_1 & 1) != 0)
                {
                    x0_4 = i[6];
                }
                else
                {
                    x0_4 = (i + 0x21);
                }
                x0_5 = memcmp(x0_4, arg2, x2_1);
                x8_2 = x0_5;
            }
            if ((x2_1 == 0 || (x2_1 != 0 && x0_5 == 0)))
            {
                int32_t x8_3;
                if (x24_1 > x0_1)
                {
                    x8_3 = 1;
                }
                else
                {
                    x8_3 = 0;
                }
                if (x24_1 >= x0_1)
                {
                    x8_2 = x8_3;
                }
                else
                {
                    x8_2 = -1;
                }
            }
            int32_t x8_4;
            if (x8_2 < 0)
            {
                x8_4 = 1;
            }
            else
            {
                x8_4 = 0;
            }
            if (x8_2 >= 0)
            {
                i_1 = i;
            }
            i = i[x8_4];
        } while (i != 0);
        if (x0_1 == -1)
        {
            std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
        }
        else
        {
            if (i_1 == (arg1 + 8))
            {
                goto label_30ed0;
            }
            uint64_t x0_7 = strlen(arg2);
            uint64_t x8_5 = i_1[4];
            uint64_t x23;
            if ((x8_5 & 1) == 0)
            {
                x23 = (x8_5 >> 1);
            }
            else
            {
                x23 = i_1[5];
            }
            if (x0_7 != -1)
            {
                uint64_t x2_2;
                if (x23 > x0_7)
                {
                    x2_2 = x0_7;
                }
                else
                {
                    x2_2 = x23;
                }
                int32_t x0_11;
                int32_t x8_6;
                if (x2_2 != 0)
                {
                    void* x0_10;
                    if ((x8_5 & 1) != 0)
                    {
                        x0_10 = i_1[6];
                    }
                    else
                    {
                        x0_10 = (i_1 + 0x21);
                    }
                    x0_11 = memcmp(x0_10, arg2, x2_2);
                    x8_6 = x0_11;
                }
                if ((x2_2 == 0 || (x2_2 != 0 && x0_11 == 0)))
                {
                    if (x23 > x0_7)
                    {
                        x8_6 = 1;
                    }
                    else
                    {
                        x8_6 = 0;
                    }
                    if (x23 < x0_7)
                    {
                        goto label_30ee8;
                    }
                }
                if (((x2_2 != 0 && x0_11 != 0) || ((x2_2 == 0 || (x2_2 != 0 && x0_11 == 0)) && x23 >= x0_7)))
                {
                    if (x8_6 >= 1)
                    {
                        goto label_30ed0;
                    }
                    goto label_30ee8;
                }
            }
        }
        sub_1908c(std::__ndk1::__basic_string_common<true>::__throw_out_of_range());
        /* no return */
    }
label_30ed0:
    i_1 = (arg1 + 8);
label_30ee8:
    return i_1;
}

int64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    char* x9_1 = *arg1;
    if (x9_1 != *arg2)
    {
        void* thrown_exception = __cxa_allocate_exception(0x20);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        void* x0_1;
        int128_t v0;
        x0_1 = operator new(0x40);
        v0 = data_3c610;
        void* var_40 = x0_1;
        *(x0_1 + 0x30) = 0;
        s = v0;
        __builtin_strncpy(x0_1, "cannot compare iterators of different containers", 0x30);
        nlohmann::detail::invalid_iterator::create(0xd4, &s);
        __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::invalid_iterator, nlohmann::detail::exception::~exception);
        /* no return */
    }
    uint32_t x9_2 = *x9_1;
    int64_t x9_3;
    int64_t x10_1;
    if (x9_2 == 2)
    {
        x9_3 = arg1[2];
        x10_1 = arg2[2];
    }
    else if (x9_2 != 1)
    {
        x9_3 = arg1[3];
        x10_1 = arg2[3];
    }
    else
    {
        x9_3 = arg1[1];
        x10_1 = arg2[1];
    }
    int64_t x0;
    if (x9_3 == x10_1)
    {
        x0 = 1;
    }
    else
    {
        x0 = 0;
    }
    if (*(x8 + 0x28) != *(x8 + 0x28))
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

void nlohmann::detail::from_json<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, int32_t, 0>(char* arg1, uint32_t* arg2)
{
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x8 + 0x28);
    uint64_t x9_2 = (*arg1 - 4);
    if (x9_2 > 3)
    {
        void* thrown_exception = __cxa_allocate_exception(0x20);
        int64_t x8_2 = *arg1;
        char* x20;
        if (x8_2 > 8)
        {
            x20 = "number";
        }
        else
        {
            x20 = &data_56348[x8_2];
        }
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        size_t x0_1 = strlen(x20);
        if (x0_1 < -0x10)
        {
            x0_1 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        int64_t x22;
        if (x0_1 >= 0x17)
        {
            uint64_t x23_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            int64_t x0_3 = operator new(x23_1);
            x22 = x0_3;
            size_t var_70_1 = x0_1;
            int64_t var_68_1 = x0_3;
            s = (x23_1 | 1);
        }
        else
        {
            x22 = (&s | 1);
            s = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x22, x20, x0_1);
        }
        *(x22 + x0_1) = 0;
        int128_t* s_1;
        int128_t v0_1;
        s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s, nullptr, "type must be number, but is ");
        int64_t var_50 = s_1[1];
        int128_t var_60 = *s_1;
        __builtin_memset(s_1, 0, 0x18);
        nlohmann::detail::type_error::create(0x12e, &var_60);
        __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::type_error, nlohmann::detail::exception::~exception);
        /* no return */
    }
    uint32_t x9_3;
    if ((x9_2 == 1 || x9_2 == 2))
    {
        x9_3 = *(arg1 + 8);
    }
    if (x9_2 == 0)
    {
        x9_3 = arg1[8];
    }
    if (x9_2 == 3)
    {
        x9_3 = vcvt_s64_f64(*(arg1 + 8));
    }
    *arg2 = x9_3;
    if (*(x8 + 0x28) != x9)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xd]>(void* arg1, char* arg2)
{
    int64_t* i = *(arg1 + 8);
    int64_t* i_1;
    if (i != 0)
    {
        uint64_t x0_1 = strlen(arg2);
        i_1 = (arg1 + 8);
        do
        {
            uint64_t x8_1 = i[4];
            uint64_t x24_1;
            if ((x8_1 & 1) == 0)
            {
                x24_1 = (x8_1 >> 1);
            }
            else
            {
                x24_1 = i[5];
            }
            if (x0_1 == -1)
            {
                break;
            }
            uint64_t x2_1;
            if (x24_1 > x0_1)
            {
                x2_1 = x0_1;
            }
            else
            {
                x2_1 = x24_1;
            }
            int32_t x0_5;
            int32_t x8_2;
            if (x2_1 != 0)
            {
                void* x0_4;
                if ((x8_1 & 1) != 0)
                {
                    x0_4 = i[6];
                }
                else
                {
                    x0_4 = (i + 0x21);
                }
                x0_5 = memcmp(x0_4, arg2, x2_1);
                x8_2 = x0_5;
            }
            if ((x2_1 == 0 || (x2_1 != 0 && x0_5 == 0)))
            {
                int32_t x8_3;
                if (x24_1 > x0_1)
                {
                    x8_3 = 1;
                }
                else
                {
                    x8_3 = 0;
                }
                if (x24_1 >= x0_1)
                {
                    x8_2 = x8_3;
                }
                else
                {
                    x8_2 = -1;
                }
            }
            int32_t x8_4;
            if (x8_2 < 0)
            {
                x8_4 = 1;
            }
            else
            {
                x8_4 = 0;
            }
            if (x8_2 >= 0)
            {
                i_1 = i;
            }
            i = i[x8_4];
        } while (i != 0);
        if (x0_1 == -1)
        {
            std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
        }
        else
        {
            if (i_1 == (arg1 + 8))
            {
                goto label_31350;
            }
            uint64_t x0_7 = strlen(arg2);
            uint64_t x8_5 = i_1[4];
            uint64_t x23;
            if ((x8_5 & 1) == 0)
            {
                x23 = (x8_5 >> 1);
            }
            else
            {
                x23 = i_1[5];
            }
            if (x0_7 != -1)
            {
                uint64_t x2_2;
                if (x23 > x0_7)
                {
                    x2_2 = x0_7;
                }
                else
                {
                    x2_2 = x23;
                }
                int32_t x0_11;
                int32_t x8_6;
                if (x2_2 != 0)
                {
                    void* x0_10;
                    if ((x8_5 & 1) != 0)
                    {
                        x0_10 = i_1[6];
                    }
                    else
                    {
                        x0_10 = (i_1 + 0x21);
                    }
                    x0_11 = memcmp(x0_10, arg2, x2_2);
                    x8_6 = x0_11;
                }
                if ((x2_2 == 0 || (x2_2 != 0 && x0_11 == 0)))
                {
                    if (x23 > x0_7)
                    {
                        x8_6 = 1;
                    }
                    else
                    {
                        x8_6 = 0;
                    }
                    if (x23 < x0_7)
                    {
                        goto label_31368;
                    }
                }
                if (((x2_2 != 0 && x0_11 != 0) || ((x2_2 == 0 || (x2_2 != 0 && x0_11 == 0)) && x23 >= x0_7)))
                {
                    if (x8_6 >= 1)
                    {
                        goto label_31350;
                    }
                    goto label_31368;
                }
            }
        }
        sub_1908c(std::__ndk1::__basic_string_common<true>::__throw_out_of_range());
        /* no return */
    }
label_31350:
    i_1 = (arg1 + 8);
label_31368:
    return i_1;
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xa]>(void* arg1, char* arg2)
{
    int64_t* i = *(arg1 + 8);
    int64_t* i_1;
    if (i != 0)
    {
        uint64_t x0_1 = strlen(arg2);
        i_1 = (arg1 + 8);
        do
        {
            uint64_t x8_1 = i[4];
            uint64_t x24_1;
            if ((x8_1 & 1) == 0)
            {
                x24_1 = (x8_1 >> 1);
            }
            else
            {
                x24_1 = i[5];
            }
            if (x0_1 == -1)
            {
                break;
            }
            uint64_t x2_1;
            if (x24_1 > x0_1)
            {
                x2_1 = x0_1;
            }
            else
            {
                x2_1 = x24_1;
            }
            int32_t x0_5;
            int32_t x8_2;
            if (x2_1 != 0)
            {
                void* x0_4;
                if ((x8_1 & 1) != 0)
                {
                    x0_4 = i[6];
                }
                else
                {
                    x0_4 = (i + 0x21);
                }
                x0_5 = memcmp(x0_4, arg2, x2_1);
                x8_2 = x0_5;
            }
            if ((x2_1 == 0 || (x2_1 != 0 && x0_5 == 0)))
            {
                int32_t x8_3;
                if (x24_1 > x0_1)
                {
                    x8_3 = 1;
                }
                else
                {
                    x8_3 = 0;
                }
                if (x24_1 >= x0_1)
                {
                    x8_2 = x8_3;
                }
                else
                {
                    x8_2 = -1;
                }
            }
            int32_t x8_4;
            if (x8_2 < 0)
            {
                x8_4 = 1;
            }
            else
            {
                x8_4 = 0;
            }
            if (x8_2 >= 0)
            {
                i_1 = i;
            }
            i = i[x8_4];
        } while (i != 0);
        if (x0_1 == -1)
        {
            std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
        }
        else
        {
            if (i_1 == (arg1 + 8))
            {
                goto label_31488;
            }
            uint64_t x0_7 = strlen(arg2);
            uint64_t x8_5 = i_1[4];
            uint64_t x23;
            if ((x8_5 & 1) == 0)
            {
                x23 = (x8_5 >> 1);
            }
            else
            {
                x23 = i_1[5];
            }
            if (x0_7 != -1)
            {
                uint64_t x2_2;
                if (x23 > x0_7)
                {
                    x2_2 = x0_7;
                }
                else
                {
                    x2_2 = x23;
                }
                int32_t x0_11;
                int32_t x8_6;
                if (x2_2 != 0)
                {
                    void* x0_10;
                    if ((x8_5 & 1) != 0)
                    {
                        x0_10 = i_1[6];
                    }
                    else
                    {
                        x0_10 = (i_1 + 0x21);
                    }
                    x0_11 = memcmp(x0_10, arg2, x2_2);
                    x8_6 = x0_11;
                }
                if ((x2_2 == 0 || (x2_2 != 0 && x0_11 == 0)))
                {
                    if (x23 > x0_7)
                    {
                        x8_6 = 1;
                    }
                    else
                    {
                        x8_6 = 0;
                    }
                    if (x23 < x0_7)
                    {
                        goto label_314a0;
                    }
                }
                if (((x2_2 != 0 && x0_11 != 0) || ((x2_2 == 0 || (x2_2 != 0 && x0_11 == 0)) && x23 >= x0_7)))
                {
                    if (x8_6 >= 1)
                    {
                        goto label_31488;
                    }
                    goto label_314a0;
                }
            }
        }
        sub_1908c(std::__ndk1::__basic_string_common<true>::__throw_out_of_range());
        /* no return */
    }
label_31488:
    i_1 = (arg1 + 8);
label_314a0:
    return i_1;
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::find<char[0xe]>(void* arg1, char* arg2)
{
    int64_t* i = *(arg1 + 8);
    int64_t* i_1;
    if (i != 0)
    {
        uint64_t x0_1 = strlen(arg2);
        i_1 = (arg1 + 8);
        do
        {
            uint64_t x8_1 = i[4];
            uint64_t x24_1;
            if ((x8_1 & 1) == 0)
            {
                x24_1 = (x8_1 >> 1);
            }
            else
            {
                x24_1 = i[5];
            }
            if (x0_1 == -1)
            {
                break;
            }
            uint64_t x2_1;
            if (x24_1 > x0_1)
            {
                x2_1 = x0_1;
            }
            else
            {
                x2_1 = x24_1;
            }
            int32_t x0_5;
            int32_t x8_2;
            if (x2_1 != 0)
            {
                void* x0_4;
                if ((x8_1 & 1) != 0)
                {
                    x0_4 = i[6];
                }
                else
                {
                    x0_4 = (i + 0x21);
                }
                x0_5 = memcmp(x0_4, arg2, x2_1);
                x8_2 = x0_5;
            }
            if ((x2_1 == 0 || (x2_1 != 0 && x0_5 == 0)))
            {
                int32_t x8_3;
                if (x24_1 > x0_1)
                {
                    x8_3 = 1;
                }
                else
                {
                    x8_3 = 0;
                }
                if (x24_1 >= x0_1)
                {
                    x8_2 = x8_3;
                }
                else
                {
                    x8_2 = -1;
                }
            }
            int32_t x8_4;
            if (x8_2 < 0)
            {
                x8_4 = 1;
            }
            else
            {
                x8_4 = 0;
            }
            if (x8_2 >= 0)
            {
                i_1 = i;
            }
            i = i[x8_4];
        } while (i != 0);
        if (x0_1 == -1)
        {
            std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
        }
        else
        {
            if (i_1 == (arg1 + 8))
            {
                goto label_315c0;
            }
            uint64_t x0_7 = strlen(arg2);
            uint64_t x8_5 = i_1[4];
            uint64_t x23;
            if ((x8_5 & 1) == 0)
            {
                x23 = (x8_5 >> 1);
            }
            else
            {
                x23 = i_1[5];
            }
            if (x0_7 != -1)
            {
                uint64_t x2_2;
                if (x23 > x0_7)
                {
                    x2_2 = x0_7;
                }
                else
                {
                    x2_2 = x23;
                }
                int32_t x0_11;
                int32_t x8_6;
                if (x2_2 != 0)
                {
                    void* x0_10;
                    if ((x8_5 & 1) != 0)
                    {
                        x0_10 = i_1[6];
                    }
                    else
                    {
                        x0_10 = (i_1 + 0x21);
                    }
                    x0_11 = memcmp(x0_10, arg2, x2_2);
                    x8_6 = x0_11;
                }
                if ((x2_2 == 0 || (x2_2 != 0 && x0_11 == 0)))
                {
                    if (x23 > x0_7)
                    {
                        x8_6 = 1;
                    }
                    else
                    {
                        x8_6 = 0;
                    }
                    if (x23 < x0_7)
                    {
                        goto label_315d8;
                    }
                }
                if (((x2_2 != 0 && x0_11 != 0) || ((x2_2 == 0 || (x2_2 != 0 && x0_11 == 0)) && x23 >= x0_7)))
                {
                    if (x8_6 >= 1)
                    {
                        goto label_315c0;
                    }
                    goto label_315d8;
                }
            }
        }
        sub_1908c(std::__ndk1::__basic_string_common<true>::__throw_out_of_range());
        /* no return */
    }
label_315c0:
    i_1 = (arg1 + 8);
label_315d8:
    return i_1;
}

int64_t std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> >::~__shared_ptr_emplace(void** arg1)
{
    int64_t x8 = arg1[0xa];
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> > + 0x10);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg1 + 0x1c);
    arg1[0xa] = 0;
    __builtin_memset(&arg1[5], 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = arg1[0xb];
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0x1c));
    }
    void* x0_1 = arg1[0xc];
    if (x0_1 != &arg1[0xd])
    {
        cv::fastFree(x0_1);
    }
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

void sub_31690(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> >::~__shared_ptr_emplace(void** arg1)
{
    int64_t x8 = arg1[0xa];
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> > + 0x10);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg1 + 0x1c);
    arg1[0xa] = 0;
    __builtin_memset(&arg1[5], 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = arg1[0xb];
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0x1c));
    }
    void* x0_1 = arg1[0xc];
    if (x0_1 != &arg1[0xd])
    {
        cv::fastFree(x0_1);
    }
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

void sub_31740(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

void* std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__on_zero_shared(void* arg1)
{
    int64_t x8 = *(arg1 + 0x50);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg1 + 0x1c);
    *(arg1 + 0x50) = 0;
    __builtin_memset((arg1 + 0x28), 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = *(arg1 + 0x58);
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0x1c));
    }
    void* x0_1 = *(arg1 + 0x60);
    if (x0_1 != (arg1 + 0x68))
    {
        x0_1 = cv::fastFree(x0_1);
    }
    return x0_1;
}

void sub_317d4(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t std::__ndk1::__shared_ptr_emplace<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void std::__ndk1::basic_stringbuf<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::str(void* arg1, char* arg2 @ x8)
{
    int32_t x9 = *(arg1 + 0x60);
    void* x19_1;
    void* x22_1;
    int128_t v0;
    int128_t v1;
    if ((x9 & 0x10) != 0)
    {
        int64_t x21_1 = *(arg1 + 0x58);
        int64_t x8 = *(arg1 + 0x30);
        if (x21_1 < x8)
        {
            x21_1 = x8;
            *(arg1 + 0x58) = x8;
        }
        void* x23_1 = *(arg1 + 0x28);
        __builtin_memset(arg2, 0, 0x18);
        x22_1 = (x21_1 - x23_1);
        if (x22_1 >= -0x10)
        {
            if (x22_1 > 0x16)
            {
                void* x20_1 = ((x22_1 + 0x10) & 0xfffffffffffffff0);
                arg1 = operator new(x20_1);
                *(arg2 + 8) = x22_1;
                *(arg2 + 0x10) = arg1;
                *arg2 = (x20_1 | 1);
                x19_1 = arg1;
                if (x23_1 == x21_1)
                {
                    goto label_319d0;
                }
            }
            else
            {
                *arg2 = (x22_1 << 1);
                x19_1 = &arg2[1];
                if (x23_1 == x21_1)
                {
                    goto label_319d0;
                }
            }
            void* x8_2;
            if (x22_1 < 0x20)
            {
                x8_2 = x19_1;
            label_31934:
                do
                {
                    char x9_1 = *x23_1;
                    x23_1 = (x23_1 + 1);
                    *x8_2 = x9_1;
                    x8_2 = (x8_2 + 1);
                } while (x21_1 != x23_1);
                goto label_319cc;
            }
            if (x19_1 < x21_1)
            {
                x8_2 = x19_1;
                if (x23_1 < (x19_1 + x22_1))
                {
                    goto label_31934;
                }
            }
            void* i_4 = (x22_1 & 0xffffffffffffffe0);
            void* x11_1 = (x19_1 + 0x10);
            x8_2 = (x19_1 + i_4);
            void* x12_1 = (x23_1 + 0x10);
            void* i_2 = i_4;
            void* i;
            do
            {
                v0 = *(x12_1 - 0x10);
                v1 = *x12_1;
                i = i_2;
                i_2 = (i_2 - 0x20);
                x12_1 = (x12_1 + 0x20);
                *(x11_1 - 0x10) = v0;
                *x11_1 = v1;
                x11_1 = (x11_1 + 0x20);
            } while (i != 0x20);
            x23_1 = (x23_1 + i_4);
            if (i_4 == x22_1)
            {
                goto label_319cc;
            }
            goto label_31934;
        }
    }
    else
    {
        if ((x9 & 8) == 0)
        {
            __builtin_memset(arg2, 0, 0x18);
        label_319e4:
            return;
        }
        char* x23_2 = *(arg1 + 0x10);
        int64_t x21_2 = *(arg1 + 0x20);
        __builtin_memset(arg2, 0, 0x18);
        x22_1 = (x21_2 - x23_2);
        if (x22_1 >= -0x10)
        {
            if (x22_1 > 0x16)
            {
                uint64_t x20_2 = ((x22_1 + 0x10) & 0xfffffffffffffff0);
                arg1 = operator new(x20_2);
                *(arg2 + 8) = x22_1;
                *(arg2 + 0x10) = arg1;
                *arg2 = (x20_2 | 1);
                x19_1 = arg1;
                if (x23_2 == x21_2)
                {
                    goto label_319d0;
                }
            }
            else
            {
                *arg2 = (x22_1 << 1);
                x19_1 = &arg2[1];
                if (x23_2 == x21_2)
                {
                    goto label_319d0;
                }
            }
            void* x8_4;
            if (x22_1 < 0x20)
            {
                x8_4 = x19_1;
            label_319c8:
                do
                {
                    char x9_2 = *x23_2;
                    x23_2 = &x23_2[1];
                    *x8_4 = x9_2;
                    x8_4 = (x8_4 + 1);
                } while (x21_2 != x23_2);
                goto label_319cc;
            }
            if (x19_1 < x21_2)
            {
                x8_4 = x19_1;
                if (x23_2 < (x19_1 + x22_1))
                {
                    goto label_319c8;
                }
            }
            void* i_5 = (x22_1 & 0xffffffffffffffe0);
            void* x11_2 = (x19_1 + 0x10);
            x8_4 = (x19_1 + i_5);
            void* x12_2 = &x23_2[0x10];
            void* i_3 = i_5;
            void* i_1;
            do
            {
                v0 = *(x12_2 - 0x10);
                v1 = *x12_2;
                i_1 = i_3;
                i_3 = (i_3 - 0x20);
                x12_2 = (x12_2 + 0x20);
                *(x11_2 - 0x10) = v0;
                *x11_2 = v1;
                x11_2 = (x11_2 + 0x20);
            } while (i_1 != 0x20);
            x23_2 = (x23_2 + i_5);
            if (x22_1 != i_5)
            {
                goto label_319c8;
            }
        label_319cc:
            x19_1 = (x19_1 + x22_1);
        label_319d0:
            *x19_1 = 0;
            goto label_319e4;
        }
    }
    int64_t x0_3;
    int64_t* x1;
    int64_t* x2;
    x0_3 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::__init<std::__ndk1::istreambuf_iterator<char, std::__ndk1::char_traits<char> > >(x0_3, x1, x2);
}

void std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::__init<std::__ndk1::istreambuf_iterator<char, std::__ndk1::char_traits<char> > >(int64_t arg1, int64_t* arg2, int64_t* arg3)
{
    int64_t* x21 = arg3;
    int64_t* x20 = arg2;
    char x19 = arg1;
    __builtin_memset(arg1, 0, 0x18);
    while (true)
    {
        if ((x20 != 0 && x20[3] == x20[4]))
        {
            arg1 = *(*x20 + 0x48)(x20);
            if (arg1 == 0xffffffff)
            {
                x20 = nullptr;
            }
        }
        if (((((x20 == 0 || (x20 != 0 && x20[3] != x20[4])) && x21 != 0) || ((x20 != 0 && x20[3] == x20[4]) && x21 != 0)) && x21[3] == x21[4]))
        {
            arg1 = *(*x21 + 0x48)(x21);
        }
        if (((((x20 == 0 || (x20 != 0 && x20[3] != x20[4])) && x21 == 0) || ((x20 != 0 && x20[3] == x20[4]) && x21 == 0)) || (((((x20 == 0 || (x20 != 0 && x20[3] != x20[4])) && x21 != 0) || ((x20 != 0 && x20[3] == x20[4]) && x21 != 0)) && x21[3] == x21[4]) && arg1 == 0xffffffff)))
        {
            if (x20 == 0)
            {
                break;
            }
            x21 = nullptr;
        }
        if ((((((x20 == 0 || (x20 != 0 && x20[3] != x20[4])) && x21 != 0) || ((x20 != 0 && x20[3] == x20[4]) && x21 != 0)) && (x21[3] != x21[4] || (x21[3] == x21[4] && arg1 != 0xffffffff))) && x20 != 0))
        {
            break;
        }
        char* x8_8 = x20[3];
        if (x8_8 == x20[4])
        {
            *(*x20 + 0x48)(x20);
        }
        else
        {
            *x8_8;
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x19);
        int64_t x8_11 = x20[3];
        if (x8_11 != x20[4])
        {
            x20[3] = (x8_11 + 1);
        }
        else
        {
            *(*x20 + 0x50)(x20);
        }
    }
}

void sub_31ae4(char* arg1 @ x19) __noreturn
{
    void* exceptionObject;
    __cxa_begin_catch(exceptionObject);
    if ((*arg1 & 1) != 0)
    {
        operator delete(*(arg1 + 0x10));
    }
    __cxa_rethrow();
    /* no return */
}

int64_t cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L(void** arg1)
{
    *arg1 = (_vtable_for_cv::CvCaptureCAM_V4L + 0x10);
    int64_t x0 = sub_31b6c(arg1);
    if ((arg1[3] & 1) != 0)
    {
        /* tailcall */
        return operator delete(arg1[5]);
    }
    return x0;
}

void sub_31b58(void* arg1, int64_t arg2 @ x19) __noreturn
{
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string();
    sub_1908c(arg1);
    /* no return */
}

void sub_31b6c(uint64_t arg1)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    uint64_t x19 = arg1;
    uint64_t x8_1 = *(arg1 + 0x18);
    if ((((x8_1 & 1) != 0 && *(x19 + 0x20) != 0) || ((x8_1 & 1) == 0 && (x8_1 >> 1) != 0)))
    {
        arg1 = *(x19 + 8);
        if (arg1 != 0xffffffff)
        {
            *(x19 + 0x36c) = 1;
            char s_1;
            void var_1b8;
            void var_1b0;
            if (ioctl(arg1, 0x40045613, (x19 + 0x36c)) == 0xffffffff)
            {
                char* x21_1;
                if ((*data_57650 & 1) == 0)
                {
                    x21_1 = &*(data_57650 + 1);
                }
                else
                {
                    x21_1 = *(data_5765a + 6);
                }
                int32_t var_1d8 = data_57648;
                int64_t s_3;
                __builtin_memset(&s_3, 0, 0x18);
                size_t x0_2 = strlen(x21_1);
                int64_t s_2;
                int32_t x0_7;
                size_t x0_9;
                uint64_t x20_2;
                int32_t x20_3;
                if (x0_2 < -0x10)
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                }
                else
                {
                    void* var_1c0_1;
                    void* x22_1;
                    if (x0_2 >= 0x17)
                    {
                        uint64_t x23_1 = ((x0_2 + 0x10) & 0xfffffffffffffff0);
                        void* x0_4 = operator new(x23_1);
                        x22_1 = x0_4;
                        size_t var_1c8_1 = x0_2;
                        var_1c0_1 = x0_4;
                        s_3 = (x23_1 | 1);
                    }
                    else
                    {
                        x22_1 = &*s_3[1];
                        s_3 = (x0_2 << 1);
                    }
                    if ((x0_2 >= 0x17 || (x0_2 < 0x17 && x0_2 != 0)))
                    {
                        memcpy(x22_1, x21_1, x0_2);
                    }
                    *(x22_1 + x0_2) = 0;
                    x0_7 = g3::logLevel(&var_1d8);
                    if ((x0_7 & 1) == 0)
                    {
                        x20_3 = 0;
                        if ((s_3 & 1) != 0)
                        {
                        label_31d4c:
                            operator delete(var_1c0_1);
                            if ((x20_3 & 1) != 0)
                            {
                                goto label_31d80;
                            }
                        }
                    }
                    else
                    {
                        __builtin_memset(&s_2, 0, 0x18);
                        x20_2 = *cv::TAG;
                        x0_9 = strlen(x20_2);
                    }
                }
                if ((x0_2 < -0x10 || ((x0_2 >= -0x10 && (x0_7 & 1) != 0) && x0_9 < -0x10)))
                {
                    int64_t x0_40 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                    void* var_1f8;
                    if ((s_1 & 1) != 0)
                    {
                        operator delete(var_1f8);
                    }
                    /* tailcall */
                    return cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L(_Unwind_Resume(x0_40));
                }
                if (x0_2 >= -0x10)
                {
                    if (((x0_7 & 1) != 0 && x0_9 >= -0x10))
                    {
                        void* var_1e0_1;
                        void* x22_2;
                        if (x0_9 >= 0x17)
                        {
                            uint64_t x23_2 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                            void* x0_11 = operator new(x23_2);
                            x22_2 = x0_11;
                            size_t var_1e8_1 = x0_9;
                            var_1e0_1 = x0_11;
                            s_2 = (x23_2 | 1);
                        }
                        else
                        {
                            x22_2 = (&s_2 | 1);
                            s_2 = (x0_9 << 1);
                        }
                        if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
                        {
                            memcpy(x22_2, x20_2, x0_9);
                        }
                        *(x22_2 + x0_9) = 0;
                        x20_3 = g3::logTag(&s_2);
                        if ((s_2 & 1) != 0)
                        {
                            operator delete(var_1e0_1);
                            if ((s_3 & 1) != 0)
                            {
                                goto label_31d4c;
                            }
                        }
                        else if ((s_3 & 1) != 0)
                        {
                            goto label_31d4c;
                        }
                    }
                    if (((((x0_7 & 1) == 0 && (s_3 & 1) == 0) || ((x0_7 & 1) != 0 && x0_9 >= -0x10)) && (x20_3 & 1) != 0))
                    {
                    label_31d80:
                        LogCapture::LogCapture(&var_1b8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "Unable to stop the stream", 0x19);
                        LogCapture::~LogCapture();
                    }
                }
            }
            if (*(x19 + 0x358) != 0)
            {
                int64_t i = 0;
                void* x24_1 = (x19 + 0xe8);
                int32_t x0_20;
                size_t x0_22;
                do
                {
                    x0_20 = munmap(*(x24_1 - 8), *x24_1);
                    if (x0_20 == 0xffffffff)
                    {
                        char* x26_1;
                        if ((*data_57650 & 1) == 0)
                        {
                            x26_1 = &*(data_57650 + 1);
                        }
                        else
                        {
                            x26_1 = *(data_5765a + 6);
                        }
                        int32_t var_210 = data_57648;
                        __builtin_memset(&s_1, 0, 0x18);
                        x0_22 = strlen(x26_1);
                        if (x0_22 < -0x10)
                        {
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                            break;
                        }
                        void* var_1f8_1;
                        void* x27_1;
                        if (x0_22 >= 0x17)
                        {
                            uint64_t x28_1 = ((x0_22 + 0x10) & 0xfffffffffffffff0);
                            void* x0_24 = operator new(x28_1);
                            x27_1 = x0_24;
                            size_t var_200_1 = x0_22;
                            var_1f8_1 = x0_24;
                            s_1 = (x28_1 | 1);
                        }
                        else
                        {
                            void var_207;
                            x27_1 = &var_207;
                            s_1 = (x0_22 << 1);
                        }
                        if ((x0_22 >= 0x17 || (x0_22 < 0x17 && x0_22 != 0)))
                        {
                            memcpy(x27_1, x26_1, x0_22);
                        }
                        *(x27_1 + x0_22) = 0;
                        int32_t x0_27 = g3::logLevel(&var_210);
                        int32_t x25_3;
                        if ((x0_27 & 1) == 0)
                        {
                            x25_3 = 0;
                            if ((s_1 & 1) != 0)
                            {
                            label_31f44:
                                operator delete(var_1f8_1);
                                if ((x25_3 & 1) != 0)
                                {
                                    goto label_31f70;
                                }
                            }
                        }
                        else
                        {
                            int64_t s;
                            __builtin_memset(&s, 0, 0x18);
                            uint64_t x25_2 = *cv::TAG;
                            size_t x0_29 = strlen(x25_2);
                            if (x0_29 < -0x10)
                            {
                                break;
                            }
                            void* var_218_1;
                            void* x27_2;
                            if (x0_29 >= 0x17)
                            {
                                uint64_t x28_2 = ((x0_29 + 0x10) & 0xfffffffffffffff0);
                                void* x0_31 = operator new(x28_2);
                                x27_2 = x0_31;
                                size_t var_220_1 = x0_29;
                                var_218_1 = x0_31;
                                s = (x28_2 | 1);
                            }
                            else
                            {
                                x27_2 = (&s | 1);
                                s = (x0_29 << 1);
                            }
                            if ((x0_29 >= 0x17 || (x0_29 < 0x17 && x0_29 != 0)))
                            {
                                memcpy(x27_2, x25_2, x0_29);
                            }
                            *(x27_2 + x0_29) = 0;
                            x25_3 = g3::logTag(&s);
                            if ((s & 1) != 0)
                            {
                                operator delete(var_218_1);
                                if ((s_1 & 1) != 0)
                                {
                                    goto label_31f44;
                                }
                            }
                            else if ((s_1 & 1) != 0)
                            {
                                goto label_31f44;
                            }
                        }
                        if (((((x0_27 & 1) == 0 && (s_1 & 1) == 0) || (x0_27 & 1) != 0) && (x25_3 & 1) != 0))
                        {
                        label_31f70:
                            LogCapture::LogCapture(&var_1b8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "munmap", 6);
                            LogCapture::~LogCapture();
                        }
                    }
                    i = (i + 1);
                    x24_1 = (x24_1 + 0x10);
                } while (i < *(x19 + 0x358));
                if ((x0_20 == 0xffffffff && x0_22 < -0x10))
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_3203c:
                    __stack_chk_fail();
                    /* no return */
                }
            }
            int64_t x0_39 = *(x19 + 0x180);
            if (x0_39 != 0)
            {
                free(x0_39);
                *(x19 + 0x180) = 0;
            }
            arg1 = *(x19 + 8);
            if (arg1 != 0xffffffff)
            {
                close(arg1);
            }
        }
        if (*(x19 + 0xd9) != 0)
        {
            arg1 = *(x19 + 0x90);
            if (arg1 != 0)
            {
                cvFree_(arg1);
                *(x19 + 0x90) = 0;
            }
        }
        if ((*(x19 + 0x18) & 1) != 0)
        {
            **(x19 + 0x28) = 0;
            *(x19 + 0x20) = 0;
        }
        else
        {
            *(x19 + 0x18) = 0;
        }
    }
    if (*(x24 + 0x28) == x8)
    {
        return;
    }
    goto label_3203c;
}

int64_t sub_32060(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L(_Unwind_Resume(x0_1));
}

int64_t sub_32064(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L(_Unwind_Resume(arg1));
}

int64_t sub_32084(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L(_Unwind_Resume(arg1));
}

int64_t sub_320cc(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L(_Unwind_Resume(arg1));
}

int64_t cv::CvCaptureCAM_V4L::~CvCaptureCAM_V4L(void** arg1)
{
    void* x19 = arg1;
    *arg1 = (_vtable_for_cv::CvCaptureCAM_V4L + 0x10);
    sub_31b6c(arg1);
    if ((*(x19 + 0x18) & 1) != 0)
    {
        operator delete(*(x19 + 0x28));
    }
    /* tailcall */
    return operator delete(x19);
}

void sub_3212c(void* arg1, int64_t arg2 @ x19) __noreturn
{
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string();
    sub_1908c(arg1);
    /* no return */
}

int64_t cv::CvCaptureCAM_V4L::open(uint64_t arg1, int32_t arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int32_t x8_1 = data_57718;
    int64_t x0_20;
    if (x8_1 == 0)
    {
        int32_t i = 0;
        do
        {
            sprintf();
            int32_t x0 = open();
            if (x0 != 0xffffffff)
            {
                int32_t x9_2 = (data_57718 + 1);
                data_5771c = (data_5771c | (1 << i));
                data_57718 = x9_2;
                close(x0);
            }
            i = (i + 1);
        } while (i != 8);
        if (data_57718 == 0)
        {
        label_32344:
            x0_20 = 0;
        }
    }
    if ((x8_1 != 0 || (x8_1 == 0 && data_57718 != 0)))
    {
        if ((arg2 & 0x80000000) != 0)
        {
            int32_t x8_7 = data_5771c;
            if ((x8_7 & 1) == 0)
            {
                if ((x8_7 & 2) != 0)
                {
                    goto label_3245c;
                }
                if ((x8_7 & 4) != 0)
                {
                    goto label_3245c;
                }
                if ((x8_7 & 8) != 0)
                {
                    goto label_3245c;
                }
                if ((x8_7 & 0x10) != 0)
                {
                    goto label_3245c;
                }
                if ((x8_7 & 0x20) != 0)
                {
                    goto label_3245c;
                }
                if ((x8_7 & 0x40) != 0)
                {
                    goto label_3245c;
                }
                if ((x8_7 & 0x80) != 0)
                {
                    goto label_3245c;
                }
                goto label_32344;
            }
        label_3245c:
            sprintf();
            *(arg1 + 0xc8) = 0;
            *(arg1 + 0x10) = 1;
            *(arg1 + 0xd8) = 1;
            void var_c0;
            strlen(&var_c0);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 0x18), &var_c0);
            *(arg1 + 0xda) = 1;
            __builtin_memset((arg1 + 0x3b8), 0, 0x58);
            *(arg1 + 0x3bc) = 1;
            *(arg1 + 0x3f4) = 1;
            if (sub_32620(arg1, (arg3 & 1)) == 1)
            {
                x0_20 = 1;
            }
            else
            {
                x0_20 = 0;
            }
        }
        else
        {
            if ((data_5771c & (1 << arg2)) != 0)
            {
                goto label_3245c;
            }
            char* x21_1;
            if ((*data_57650 & 1) == 0)
            {
                x21_1 = &*(data_57650 + 1);
            }
            else
            {
                x21_1 = *(data_5765a + 6);
            }
            int32_t var_228 = data_57648;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_2 = strlen(x21_1);
            char s;
            void* var_210_1;
            int32_t x0_7;
            size_t x0_9;
            uint64_t x20_2;
            if (x0_2 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            }
            else
            {
                void* x22_1;
                if (x0_2 >= 0x17)
                {
                    uint64_t x23_1 = ((x0_2 + 0x10) & 0xfffffffffffffff0);
                    void* x0_4 = operator new(x23_1);
                    x22_1 = x0_4;
                    size_t var_218_1 = x0_2;
                    var_210_1 = x0_4;
                    s_1 = (x23_1 | 1);
                }
                else
                {
                    x22_1 = &*s_1[1];
                    s_1 = (x0_2 << 1);
                }
                if ((x0_2 >= 0x17 || (x0_2 < 0x17 && x0_2 != 0)))
                {
                    memcpy(x22_1, x21_1, x0_2);
                }
                *(x22_1 + x0_2) = 0;
                x0_7 = g3::logLevel(&var_228);
                if ((x0_7 & 1) != 0)
                {
                    __builtin_memset(&s, 0, 0x18);
                    x20_2 = *cv::TAG;
                    x0_9 = strlen(x20_2);
                }
            }
            void* var_230;
            if ((x0_2 < -0x10 || ((x0_2 >= -0x10 && (x0_7 & 1) != 0) && x0_9 < -0x10)))
            {
                int64_t x19_2 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                if ((s & 1) != 0)
                {
                    operator delete(var_230);
                }
                if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
                {
                    operator delete(var_210_1);
                    x19_2 = _Unwind_Resume(x19_2);
                    LogCapture::~LogCapture();
                }
                uint64_t x0_33;
                uint64_t x1_9;
                int32_t x2_5;
                x0_33 = _Unwind_Resume(x19_2);
                /* tailcall */
                return cv::CvCaptureCAM_V4L::open(x0_33, x1_9, x2_5);
            }
            if (x0_2 >= -0x10)
            {
                int32_t x20_3;
                if (((x0_7 & 1) != 0 && x0_9 >= -0x10))
                {
                    void* x22_2;
                    if (x0_9 >= 0x17)
                    {
                        uint64_t x23_2 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                        void* x0_12 = operator new(x23_2);
                        x22_2 = x0_12;
                        size_t var_238_1 = x0_9;
                        var_230 = x0_12;
                        s = (x23_2 | 1);
                    }
                    else
                    {
                        x22_2 = (&s | 1);
                        s = (x0_9 << 1);
                    }
                    if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
                    {
                        memcpy(x22_2, x20_2, x0_9);
                    }
                    *(x22_2 + x0_9) = 0;
                    x20_3 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        operator delete(var_230);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_3233c;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_3233c;
                    }
                }
                if ((x0_7 & 1) == 0)
                {
                    x20_3 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_3233c:
                        operator delete(var_210_1);
                        if ((x20_3 & 1) == 0)
                        {
                            goto label_32344;
                        }
                        goto label_323d4;
                    }
                }
                if (((x0_7 & 1) == 0 || ((x0_7 & 1) != 0 && x0_9 >= -0x10)))
                {
                    if ((x20_3 & 1) == 0)
                    {
                        goto label_32344;
                    }
                label_323d4:
                    void var_208;
                    LogCapture::LogCapture(&var_208, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                    void var_200;
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_200, "VIDEOIO ERROR: V4L: index ", 0x1a)), " is not correct!", 0x10);
                    LogCapture::~LogCapture();
                    x0_20 = 0;
                }
            }
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_20;
}

int64_t cv::CvCaptureCAM_V4L::open(uint64_t arg1, uint64_t arg2, int32_t arg3)
{
    *(arg1 + 0xc8) = 0;
    *(arg1 + 0x10) = 1;
    *(arg1 + 0xd8) = 1;
    strlen(arg2);
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 0x18), arg2);
    *(arg1 + 0xda) = 1;
    __builtin_memset((arg1 + 0x3b8), 0, 0x58);
    *(arg1 + 0x3bc) = 1;
    *(arg1 + 0x3f4) = 1;
    int64_t x0_5;
    if (sub_32620(arg1, (arg3 & 1)) == 1)
    {
        x0_5 = 1;
    }
    else
    {
        x0_5 = 0;
    }
    return x0_5;
}

int64_t sub_32620(uint64_t arg1, int32_t arg2)
{
    int64_t v8;
    int64_t var_70 = v8;
    char* x28;
    char* var_60 = x28;
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    void* x20;
    if ((*(arg1 + 0x18) & 1) != 0)
    {
        x20 = *(arg1 + 0x28);
    }
    else
    {
        x20 = (arg1 + 0x19);
    }
    int32_t x0_1;
    int128_t v0;
    x0_1 = open();
    *(arg1 + 8) = x0_1;
    if (x0_1 == 0xffffffff)
    {
        goto label_33edc;
    }
    v0 = 0;
    *v0[8] = 0;
    __builtin_memset((arg1 + 0x190), 0, 0x68);
    if (ioctl(v0) == 0xffffffff)
    {
        goto label_33edc;
    }
    int32_t var_1c8;
    int32_t x0_4;
    int128_t v0_1;
    x0_4 = ioctl(*(arg1 + 8), 0x80045626, &var_1c8);
    if (x0_4 == 0xffffffff)
    {
        goto label_33edc;
    }
    v0_1 = 0;
    *v0_1[8] = 0;
    *(arg1 + 0x238) = {0};
    *(arg1 + 0x228) = {0};
    *(arg1 + 0x218) = {0};
    *(arg1 + 0x208) = {0};
    *(arg1 + 0x1f8) = {0};
    uint64_t x0_5 = *(arg1 + 8);
    *(arg1 + 0x1f8) = var_1c8;
    if (ioctl(x0_5, 0xc050561a, (arg1 + 0x1f8), v0_1) == 0xffffffff)
    {
        goto label_33edc;
    }
    int32_t i = 0;
    do
    {
        sub_39de8(arg1, (i + 0x980900));
        i = (i + 1);
    } while (i != 0x2b);
    uint64_t x21_1 = 0x8000000;
    int32_t* x0_9;
    do
    {
        sub_39de8(arg1, x21_1);
        x0_9 = __errno();
        x21_1 = (x21_1 + 1);
    } while (*x0_9 != 0x16);
    sub_39de8(arg1, 0x9a090a);
    char* x25_1;
    if ((*data_575d0 & 1) == 0)
    {
        x25_1 = &*(data_575d0 + 1);
    }
    else
    {
        x25_1 = *(data_575da + 6);
    }
    int32_t var_328 = data_575c8;
    int64_t s_21;
    __builtin_memset(&s_21, 0, 0x18);
    uint64_t x0_12 = strlen(x25_1);
    if (x0_12 < -0x10)
    {
        goto label_3473c;
    }
    int64_t* var_310_1;
    int64_t* x26_1;
    if (x0_12 >= 0x17)
    {
        uint64_t x27_1 = ((x0_12 + 0x10) & 0xfffffffffffffff0);
        int64_t* x0_14 = operator new(x27_1);
        x26_1 = x0_14;
        var_310_1 = x0_14;
        s_21 = (x27_1 | 1);
        uint64_t var_318_1 = x0_12;
    }
    else
    {
        x26_1 = &*s_21[1];
        s_21 = (x0_12 << 1);
    }
    if ((x0_12 >= 0x17 || (x0_12 < 0x17 && x0_12 != 0)))
    {
        memcpy(x26_1, x25_1, x0_12);
    }
    *(x26_1 + x0_12) = 0;
    int32_t x0_17;
    int128_t v0_2;
    x0_17 = g3::logLevel(&var_328);
    if ((x0_17 & 1) == 0)
    {
        x21_1 = 0;
        if ((s_21 & 1) != 0)
        {
        label_32890:
            operator delete(var_310_1);
            if ((x21_1 & 1) != 0)
            {
                goto label_3298c;
            }
        }
    }
    else
    {
        int64_t s_20;
        __builtin_memset(&s_20, 0, 0x18);
        uint64_t x25_2 = *cv::TAG;
        int64_t* x0_19 = strlen(x25_2);
        if (x0_19 < -0x10)
        {
            goto label_34754;
        }
        char* var_330_1;
        char* x21_2;
        if (x0_19 >= 0x17)
        {
            uint64_t x27_2 = (&x0_19[2] & 0xfffffffffffffff0);
            char* x0_24 = operator new(x27_2);
            x21_2 = x0_24;
            var_330_1 = x0_24;
            s_20 = (x27_2 | 1);
            int64_t* var_338_1 = x0_19;
        }
        else
        {
            x21_2 = (&s_20 | 1);
            s_20 = (x0_19 << 1);
        }
        if ((x0_19 >= 0x17 || (x0_19 < 0x17 && x0_19 != 0)))
        {
            memcpy(x21_2, x25_2, x0_19);
        }
        *(x21_2 + x0_19) = 0;
        int32_t x0_27;
        x0_27 = g3::logTag(&s_20);
        x21_1 = x0_27;
        if ((s_20 & 1) != 0)
        {
            operator delete(var_330_1);
            if ((s_21 & 1) != 0)
            {
                goto label_32890;
            }
        }
        else if ((s_21 & 1) != 0)
        {
            goto label_32890;
        }
    }
    int128_t s_31;
    if (((((x0_17 & 1) == 0 && (s_21 & 1) == 0) || (x0_17 & 1) != 0) && (x21_1 & 1) != 0))
    {
    label_3298c:
        LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_575c8, &data_3cde1, &nullptr->ident.version);
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "finish v4l2 scan controls", 0x19);
        LogCapture::~LogCapture();
    }
    int32_t* x22_1;
    if ((((((((x0_17 & 1) == 0 && (s_21 & 1) == 0) || (x0_17 & 1) != 0) && (x21_1 & 1) == 0) || ((x0_17 & 1) == 0 && (s_21 & 1) != 0)) && (*(arg1 + 0x1e4) & 1) != 0) || (((((x0_17 & 1) == 0 && (s_21 & 1) == 0) || (x0_17 & 1) != 0) && (x21_1 & 1) != 0) && (*(arg1 + 0x1e4) & 1) != 0)))
    {
        int64_t x0_237;
        if (*(arg1 + 0x1f8) != 0)
        {
            v0_2 = 0;
            *v0_2[8] = 0;
            __builtin_memset((arg1 + 0x1f8), 0, 0x50);
            uint64_t x0_30 = *(arg1 + 8);
            *(arg1 + 0x1f8) = 1;
            int32_t x0_31;
            x0_31 = ioctl(x0_30, 0xc050561a, (arg1 + 0x1f8), v0_2);
            if (x0_31 != 0xffffffff)
            {
                goto label_329f0;
            }
            if ((*data_57650 & 1) == 0)
            {
                x21_1 = &*(data_57650 + 1);
            }
            else
            {
                x21_1 = *(data_5765a + 6);
            }
            int32_t var_398 = data_57648;
            int64_t s_17;
            __builtin_memset(&s_17, 0, 0x18);
            size_t x0_70 = strlen(x21_1);
            if (x0_70 < -0x10)
            {
                goto label_3475c;
            }
            void* var_380_1;
            void* x22_4;
            if (x0_70 >= 0x17)
            {
                uint64_t x23_6 = ((x0_70 + 0x10) & 0xfffffffffffffff0);
                void* x0_170 = operator new(x23_6);
                x22_4 = x0_170;
                var_380_1 = x0_170;
                s_17 = (x23_6 | 1);
                size_t var_388_1 = x0_70;
            }
            else
            {
                x22_4 = &*s_17[1];
                s_17 = (x0_70 << 1);
            }
            if ((x0_70 >= 0x17 || (x0_70 < 0x17 && x0_70 != 0)))
            {
                memcpy(x22_4, x21_1, x0_70);
            }
            *(x22_4 + x0_70) = 0;
            int32_t x20_9;
            if ((g3::logLevel(&var_398) & 1) == 0)
            {
                x20_9 = 0;
                if ((s_17 & 1) != 0)
                {
                label_338cc:
                    operator delete(var_380_1);
                    if ((x20_9 & 1) == 0)
                    {
                        goto label_33edc;
                    }
                    goto label_33cb8;
                }
            }
            else
            {
                int64_t s_16;
                __builtin_memset(&s_16, 0, 0x18);
                uint64_t x20_8 = *cv::TAG;
                size_t x0_175 = strlen(x20_8);
                if (x0_175 < -0x10)
                {
                    goto label_3477c;
                }
                void* var_3a0_1;
                void* x22_7;
                if (x0_175 >= 0x17)
                {
                    uint64_t x23_10 = ((x0_175 + 0x10) & 0xfffffffffffffff0);
                    void* x0_206 = operator new(x23_10);
                    x22_7 = x0_206;
                    var_3a0_1 = x0_206;
                    s_16 = (x23_10 | 1);
                    size_t var_3a8_1 = x0_175;
                }
                else
                {
                    x22_7 = (&s_16 | 1);
                    s_16 = (x0_175 << 1);
                }
                if ((x0_175 >= 0x17 || (x0_175 < 0x17 && x0_175 != 0)))
                {
                    memcpy(x22_7, x20_8, x0_175);
                }
                *(x22_7 + x0_175) = 0;
                x20_9 = g3::logTag(&s_16);
                if ((s_16 & 1) != 0)
                {
                    operator delete(var_3a0_1);
                    if ((s_17 & 1) != 0)
                    {
                        goto label_338cc;
                    }
                }
                else if ((s_17 & 1) != 0)
                {
                    goto label_338cc;
                }
            }
            if ((x20_9 & 1) == 0)
            {
                goto label_33edc;
            }
        label_33cb8:
            LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "VIDEOIO ERROR: V4L2: Aren't able…", 0x36);
        label_33ed4:
            LogCapture::~LogCapture();
        label_33edc:
            sub_31b6c(arg1);
        label_33ee0:
            x0_237 = 0xffffffff;
        }
        else
        {
        label_329f0:
            v0_2 = 0;
            *v0_2[8] = 0;
            *(arg1 + 0x308) = {0};
            *(arg1 + 0x2f8) = {0};
            *(arg1 + 0x2e8) = {0};
            *(arg1 + 0x2d8) = {0};
            *(arg1 + 0x2c8) = {0};
            *(arg1 + 0x2b8) = {0};
            *(arg1 + 0x2a8) = {0};
            *(arg1 + 0x298) = {0};
            *(arg1 + 0x288) = {0};
            *(arg1 + 0x278) = {0};
            *(arg1 + 0x248) = {0};
            *(arg1 + 0x268) = {0};
            *(arg1 + 0x258) = {0};
            uint64_t x0_32 = *(arg1 + 8);
            *(arg1 + 0x248) = 1;
            if (ioctl(x0_32, 0xc0d05604, v0_2) == 0xffffffff)
            {
                if ((*data_57650 & 1) == 0)
                {
                    x21_1 = &*(data_57650 + 1);
                }
                else
                {
                    x21_1 = *(data_5765a + 6);
                }
                int32_t var_3d0 = data_57648;
                int64_t s_15;
                __builtin_memset(&s_15, 0, 0x18);
                size_t x0_46 = strlen(x21_1);
                if (x0_46 < -0x10)
                {
                    goto label_3475c;
                }
                void* var_3b8_1;
                void* x22_3;
                if (x0_46 >= 0x17)
                {
                    uint64_t x23_4 = ((x0_46 + 0x10) & 0xfffffffffffffff0);
                    void* x0_72 = operator new(x23_4);
                    x22_3 = x0_72;
                    size_t var_3c0_1 = x0_46;
                    var_3b8_1 = x0_72;
                    s_15 = (x23_4 | 1);
                }
                else
                {
                    x22_3 = &*s_15[1];
                    s_15 = (x0_46 << 1);
                }
                if ((x0_46 >= 0x17 || (x0_46 < 0x17 && x0_46 != 0)))
                {
                    memcpy(x22_3, x21_1, x0_46);
                }
                *(x22_3 + x0_46) = 0;
                int32_t x20_5;
                if ((g3::logLevel(&var_3d0) & 1) == 0)
                {
                    x20_5 = 0;
                    if ((s_15 & 1) != 0)
                    {
                    label_32ea8:
                        operator delete(var_3b8_1);
                        if ((x20_5 & 1) == 0)
                        {
                            goto label_33edc;
                        }
                        goto label_33a70;
                    }
                }
                else
                {
                    int64_t s_14;
                    __builtin_memset(&s_14, 0, 0x18);
                    uint64_t x20_4 = *cv::TAG;
                    size_t x0_77 = strlen(x20_4);
                    if (x0_77 < -0x10)
                    {
                        goto label_34774;
                    }
                    void* var_3d8_1;
                    void* x22_5;
                    if (x0_77 >= 0x17)
                    {
                        uint64_t x23_8 = ((x0_77 + 0x10) & 0xfffffffffffffff0);
                        void* x0_188 = operator new(x23_8);
                        x22_5 = x0_188;
                        size_t var_3e0_1 = x0_77;
                        var_3d8_1 = x0_188;
                        s_14 = (x23_8 | 1);
                    }
                    else
                    {
                        x22_5 = (&s_14 | 1);
                        s_14 = (x0_77 << 1);
                    }
                    if ((x0_77 >= 0x17 || (x0_77 < 0x17 && x0_77 != 0)))
                    {
                        memcpy(x22_5, x20_4, x0_77);
                    }
                    *(x22_5 + x0_77) = 0;
                    x20_5 = g3::logTag(&s_14);
                    if ((s_14 & 1) != 0)
                    {
                        operator delete(var_3d8_1);
                        if ((s_15 & 1) != 0)
                        {
                            goto label_32ea8;
                        }
                    }
                    else if ((s_15 & 1) != 0)
                    {
                        goto label_32ea8;
                    }
                }
                if ((x20_5 & 1) == 0)
                {
                    goto label_33edc;
                }
            label_33a70:
                LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "VIDEOIO ERROR: V4L2: Could not o…", 0x42);
                goto label_33ed4;
            }
            char* x24_2;
            if ((*data_575d0 & 1) == 0)
            {
                x24_2 = &*(data_575d0 + 1);
            }
            else
            {
                x24_2 = *(data_575da + 6);
            }
            int32_t var_248 = data_575c8;
            int64_t s_29;
            __builtin_memset(&s_29, 0, 0x18);
            uint64_t x0_35 = strlen(x24_2);
            char s_7;
            void* var_498;
            char s_24;
            char* var_2c0;
            char s_25;
            void* var_2a0;
            char s_27;
            int64_t* var_268;
            if (x0_35 < -0x10)
            {
            label_34714:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3471c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_34724:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3472c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_34734:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3473c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_34744:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3474c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_34754:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3475c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_34764:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3476c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_34774:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3477c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_34784:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3478c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_34794:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_3479c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_347a4:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_347ac:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_347b4:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_347c0:
                int64_t x19_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                if ((s_7 & 1) != 0)
                {
                    operator delete(var_498);
                    x19_4 = _Unwind_Resume(x19_4);
                    if ((s_24 & 1) != 0)
                    {
                        operator delete(var_2c0);
                    }
                    if ((((s_24 & 1) == 0 && (s_25 & 1) != 0) || ((s_24 & 1) != 0 && (s_25 & 1) != 0)))
                    {
                        operator delete(var_2a0);
                        x19_4 = _Unwind_Resume(x19_4);
                        if ((s_27 & 1) != 0)
                        {
                            operator delete(var_268);
                            x19_4 = _Unwind_Resume(x19_4);
                            LogCapture::~LogCapture();
                        }
                    }
                }
                /* tailcall */
                return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19_4));
            }
            void* var_230_1;
            void* x25_4;
            if (x0_35 >= 0x17)
            {
                x26_1 = ((x0_35 + 0x10) & 0xfffffffffffffff0);
                void* x0_62 = operator new(x26_1);
                x25_4 = x0_62;
                var_230_1 = x0_62;
                s_29 = (x26_1 | 1);
                uint64_t var_238_1 = x0_35;
            }
            else
            {
                x25_4 = &*s_29[1];
                s_29 = (x0_35 << 1);
            }
            if ((x0_35 >= 0x17 || (x0_35 < 0x17 && x0_35 != 0)))
            {
                memcpy(x25_4, x24_2, x0_35);
            }
            *(x25_4 + x0_35) = 0;
            int32_t x0_65;
            int128_t v0_3;
            x0_65 = g3::logLevel(&var_248);
            if ((x0_65 & 1) == 0)
            {
                x21_1 = 0;
                if ((s_29 & 1) != 0)
                {
                label_32d98:
                    operator delete(var_230_1);
                    if ((x21_1 & 1) == 0)
                    {
                        goto label_32f64;
                    }
                    goto label_32f38;
                }
            }
            else
            {
                int64_t s_28;
                __builtin_memset(&s_28, 0, 0x18);
                uint64_t x24_5 = *cv::TAG;
                size_t x0_67 = strlen(x24_5);
                if (x0_67 < -0x10)
                {
                    goto label_3476c;
                }
                void* var_250_1;
                void* x21_6;
                if (x0_67 >= 0x17)
                {
                    x26_1 = ((x0_67 + 0x10) & 0xfffffffffffffff0);
                    void* x0_80 = operator new(x26_1);
                    x21_6 = x0_80;
                    var_250_1 = x0_80;
                    s_28 = (x26_1 | 1);
                    size_t var_258_1 = x0_67;
                }
                else
                {
                    x21_6 = (&s_28 | 1);
                    s_28 = (x0_67 << 1);
                }
                if ((x0_67 >= 0x17 || (x0_67 < 0x17 && x0_67 != 0)))
                {
                    memcpy(x21_6, x24_5, x0_67);
                }
                *(x21_6 + x0_67) = 0;
                int32_t x0_83;
                x0_83 = g3::logTag(&s_28);
                x21_1 = x0_83;
                if ((s_28 & 1) != 0)
                {
                    operator delete(var_250_1);
                    if ((s_29 & 1) != 0)
                    {
                        goto label_32d98;
                    }
                }
                else if ((s_29 & 1) != 0)
                {
                    goto label_32d98;
                }
            }
            if ((x21_1 & 1) == 0)
            {
                goto label_32f64;
            }
        label_32f38:
            LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_575c8, &data_3cde1, &nullptr->ident.version);
            uint32_t x0_86 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "autosetup capture mode v4l2 pale…", 0x24);
            *(arg1 + 0xc8);
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_86);
            LogCapture::~LogCapture();
        label_32f64:
            v0_3 = 0x100000000;
            int64_t var_220 = 0x100000000;
            if (ioctl(*(arg1 + 8), 0xc0405602, &var_220, v0_3) != 0xffffffff)
            {
                size_t x0_91;
                int32_t x0_96;
                size_t x0_98;
                int32_t i_1;
                do
                {
                    if ((*data_575d0 & 1) == 0)
                    {
                        x24_2 = &*(data_575d0 + 1);
                    }
                    else
                    {
                        x24_2 = *(data_575da + 6);
                    }
                    int32_t var_280 = data_575c8;
                    __builtin_memset(&s_27, 0, 0x18);
                    x0_91 = strlen(x24_2);
                    if (x0_91 < -0x10)
                    {
                        break;
                    }
                    if (x0_91 >= 0x17)
                    {
                        x28 = ((x0_91 + 0x10) & 0xfffffffffffffff0);
                        int64_t* x0_93 = operator new(x28);
                        x26_1 = x0_93;
                        var_268 = x0_93;
                        s_27 = (x28 | 1);
                        size_t var_270_1 = x0_91;
                    }
                    else
                    {
                        void var_277;
                        x26_1 = &var_277;
                        s_27 = (x0_91 << 1);
                    }
                    if ((x0_91 >= 0x17 || (x0_91 < 0x17 && x0_91 != 0)))
                    {
                        memcpy(x26_1, x24_2, x0_91);
                    }
                    *(x26_1 + x0_91) = 0;
                    x0_96 = g3::logLevel(&var_280);
                    if ((x0_96 & 1) == 0)
                    {
                        x21_1 = 0;
                        if ((s_27 & 1) != 0)
                        {
                        label_330b0:
                            operator delete(var_268);
                            if ((x21_1 & 1) != 0)
                            {
                                goto label_33138;
                            }
                        }
                    }
                    else
                    {
                        int64_t s_26;
                        __builtin_memset(&s_26, 0, 0x18);
                        x21_1 = *cv::TAG;
                        x0_98 = strlen(x21_1);
                        if (x0_98 < -0x10)
                        {
                            break;
                        }
                        int64_t* var_288_1;
                        if (x0_98 >= 0x17)
                        {
                            x28 = ((x0_98 + 0x10) & 0xfffffffffffffff0);
                            int64_t* x0_101 = operator new(x28);
                            x26_1 = x0_101;
                            var_288_1 = x0_101;
                            s_26 = (x28 | 1);
                            size_t var_290_1 = x0_98;
                        }
                        else
                        {
                            x26_1 = (&s_26 | 1);
                            s_26 = (x0_98 << 1);
                        }
                        if ((x0_98 >= 0x17 || (x0_98 < 0x17 && x0_98 != 0)))
                        {
                            memcpy(x26_1, x21_1, x0_98);
                        }
                        *(x26_1 + x0_98) = 0;
                        x21_1 = g3::logTag(&s_26);
                        if ((s_26 & 1) != 0)
                        {
                            operator delete(var_288_1);
                            if ((s_27 & 1) != 0)
                            {
                                goto label_330b0;
                            }
                        }
                        else if ((s_27 & 1) != 0)
                        {
                            goto label_330b0;
                        }
                    }
                    if (((((x0_96 & 1) == 0 && (s_27 & 1) == 0) || (x0_96 & 1) != 0) && (x21_1 & 1) != 0))
                    {
                    label_33138:
                        LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_575c8, &data_3cde1, &nullptr->ident.version);
                        std::__ndk1::fpos<mbstate_t>* x0_109 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "pixelformat type ", 0x11)), &data_3cde0, 1);
                        int64_t var_1f8;
                        uint8_t var_224 = *var_1f8[4];
                        std::__ndk1::fpos<mbstate_t>* x0_110 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_109, &var_224, 1);
                        var_224 = (*var_1f8[4] >> 8);
                        std::__ndk1::fpos<mbstate_t>* x0_111 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_110, &var_224, 1);
                        var_224 = *var_1f8[6];
                        std::__ndk1::fpos<mbstate_t>* x0_112 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_111, &var_224, 1);
                        var_224 = *var_1f8[7];
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_112, &var_224, 1);
                        LogCapture::~LogCapture();
                    }
                    var_220 = (var_220 + 1);
                    i_1 = ioctl(*(arg1 + 8), 0xc0405602, &var_220);
                } while (i_1 != 0xffffffff);
                if (((x0_91 >= -0x10 && (x0_96 & 1) != 0) && x0_98 < -0x10))
                {
                    goto label_34724;
                }
                if (x0_91 < -0x10)
                {
                    goto label_34714;
                }
            }
            int128_t v0_4;
            if (*(arg1 + 0xc8) == 0)
            {
            label_3321c:
                int64_t i_2 = 0;
                size_t x0_117;
                int32_t x0_122;
                size_t x0_124;
                do
                {
                    *(arg1 + 0xc8) = *("BGR3RGB3YV12411PUYVYBA81GBRGS910…" + (i_2 << 2));
                    if ((*data_575d0 & 1) == 0)
                    {
                        x28 = &*(data_575d0 + 1);
                    }
                    else
                    {
                        x28 = *(data_575da + 6);
                    }
                    int32_t var_2b8 = data_575c8;
                    __builtin_memset(&s_25, 0, 0x18);
                    x0_117 = strlen(x28);
                    if (x0_117 < -0x10)
                    {
                        break;
                    }
                    void* x25_6;
                    if (x0_117 >= 0x17)
                    {
                        uint64_t x27_3 = ((x0_117 + 0x10) & 0xfffffffffffffff0);
                        void* x0_119 = operator new(x27_3);
                        x25_6 = x0_119;
                        var_2a0 = x0_119;
                        s_25 = (x27_3 | 1);
                        size_t var_2a8_1 = x0_117;
                    }
                    else
                    {
                        void var_2af;
                        x25_6 = &var_2af;
                        s_25 = (x0_117 << 1);
                    }
                    if ((x0_117 >= 0x17 || (x0_117 < 0x17 && x0_117 != 0)))
                    {
                        memcpy(x25_6, x28, x0_117);
                    }
                    *(x25_6 + x0_117) = 0;
                    x0_122 = g3::logLevel(&var_2b8);
                    if ((x0_122 & 1) == 0)
                    {
                        x21_1 = 0;
                        if ((s_25 & 1) != 0)
                        {
                        label_33328:
                            operator delete(var_2a0);
                            if ((x21_1 & 1) != 0)
                            {
                                goto label_333b0;
                            }
                        }
                    }
                    else
                    {
                        __builtin_memset(&s_24, 0, 0x18);
                        x21_1 = *cv::TAG;
                        x0_124 = strlen(x21_1);
                        if (x0_124 < -0x10)
                        {
                            break;
                        }
                        char* x25_7;
                        if (x0_124 >= 0x17)
                        {
                            uint64_t x27_4 = ((x0_124 + 0x10) & 0xfffffffffffffff0);
                            char* x0_127 = operator new(x27_4);
                            x25_7 = x0_127;
                            var_2c0 = x0_127;
                            s_24 = (x27_4 | 1);
                            size_t var_2c8_1 = x0_124;
                        }
                        else
                        {
                            x25_7 = (&s_24 | 1);
                            s_24 = (x0_124 << 1);
                        }
                        if ((x0_124 >= 0x17 || (x0_124 < 0x17 && x0_124 != 0)))
                        {
                            memcpy(x25_7, x21_1, x0_124);
                        }
                        x25_7[x0_124] = 0;
                        x21_1 = g3::logTag(&s_24);
                        if ((s_24 & 1) != 0)
                        {
                            operator delete(var_2c0);
                            if ((s_25 & 1) != 0)
                            {
                                goto label_33328;
                            }
                        }
                        else if ((s_25 & 1) != 0)
                        {
                            goto label_33328;
                        }
                    }
                    if (((((x0_122 & 1) == 0 && (s_25 & 1) == 0) || (x0_122 & 1) != 0) && (x21_1 & 1) != 0))
                    {
                    label_333b0:
                        LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_575c8, &data_3cde1, &nullptr->ident.version);
                        uint32_t x0_133 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "try order palette ", 0x12);
                        *(arg1 + 0xc8);
                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_133);
                        LogCapture::~LogCapture();
                    }
                    int32_t x0_135;
                    x0_135 = sub_3a160(arg1);
                    if ((x0_135 & 1) != 0)
                    {
                        goto label_3340c;
                    }
                    i_2 = (i_2 + 1);
                } while (i_2 <= 0xa);
                if (((x0_117 >= -0x10 && (x0_122 & 1) != 0) && x0_124 < -0x10))
                {
                    goto label_3472c;
                }
                if (x0_117 < -0x10)
                {
                    goto label_3471c;
                }
                if ((*data_57650 & 1) == 0)
                {
                    x21_1 = &*(data_57650 + 1);
                }
                else
                {
                    x21_1 = *(data_5765a + 6);
                }
                int32_t var_2f0 = data_57648;
                int64_t s_23;
                __builtin_memset(&s_23, 0, 0x18);
                size_t x0_167 = strlen(x21_1);
                if (x0_167 < -0x10)
                {
                    goto label_3475c;
                }
                void* var_2d8_1;
                void* x22_6;
                if (x0_167 >= 0x17)
                {
                    uint64_t x23_7 = ((x0_167 + 0x10) & 0xfffffffffffffff0);
                    void* x0_180 = operator new(x23_7);
                    x22_6 = x0_180;
                    var_2d8_1 = x0_180;
                    s_23 = (x23_7 | 1);
                    size_t var_2e0_1 = x0_167;
                }
                else
                {
                    x22_6 = &*s_23[1];
                    s_23 = (x0_167 << 1);
                }
                if ((x0_167 >= 0x17 || (x0_167 < 0x17 && x0_167 != 0)))
                {
                    memcpy(x22_6, x21_1, x0_167);
                }
                *(x22_6 + x0_167) = 0;
                int32_t x20_12;
                if ((g3::logLevel(&var_2f0) & 1) == 0)
                {
                    x20_12 = 0;
                    if ((s_23 & 1) != 0)
                    {
                    label_339e0:
                        operator delete(var_2d8_1);
                        if ((x20_12 & 1) == 0)
                        {
                            goto label_33edc;
                        }
                        goto label_33eb8;
                    }
                }
                else
                {
                    int64_t s_22;
                    __builtin_memset(&s_22, 0, 0x18);
                    uint64_t x20_11 = *cv::TAG;
                    size_t x0_185 = strlen(x20_11);
                    if (x0_185 < -0x10)
                    {
                        goto label_34784;
                    }
                    void* var_2f8_1;
                    void* x22_9;
                    if (x0_185 >= 0x17)
                    {
                        uint64_t x23_13 = ((x0_185 + 0x10) & 0xfffffffffffffff0);
                        void* x0_230 = operator new(x23_13);
                        x22_9 = x0_230;
                        var_2f8_1 = x0_230;
                        s_22 = (x23_13 | 1);
                        size_t var_300_1 = x0_185;
                    }
                    else
                    {
                        x22_9 = (&s_22 | 1);
                        s_22 = (x0_185 << 1);
                    }
                    if ((x0_185 >= 0x17 || (x0_185 < 0x17 && x0_185 != 0)))
                    {
                        memcpy(x22_9, x20_11, x0_185);
                    }
                    *(x22_9 + x0_185) = 0;
                    x20_12 = g3::logTag(&s_22);
                    if ((s_22 & 1) != 0)
                    {
                        operator delete(var_2f8_1);
                        if ((s_23 & 1) != 0)
                        {
                            goto label_339e0;
                        }
                    }
                    else if ((s_23 & 1) != 0)
                    {
                        goto label_339e0;
                    }
                }
                if ((x20_12 & 1) == 0)
                {
                    goto label_33edc;
                }
            label_33eb8:
                LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "VIDEOIO ERROR: V4L2: Pixel forma…", 0x4c);
                goto label_33ed4;
            }
            int32_t x0_115;
            x0_115 = sub_3a160(arg1);
            if ((x0_115 & 1) == 0)
            {
                goto label_3321c;
            }
        label_3340c:
            v0_4 = 0;
            *v0_4[8] = 0;
            __builtin_memset(&s_31, 0, 0xc8);
            var_1c8 = 1;
            int32_t var_1bc_1 = 1;
            int32_t var_1b8_1 = *(arg1 + 0xd4);
            int128_t v0_5;
            int128_t v1_1;
            v0_5 = ioctl(*(arg1 + 8), 0xc0cc5616, &var_1c8, v0_4);
            int32_t x8_86 = *(arg1 + 0x260);
            int32_t x9_15 = (*(arg1 + 0x250) << 1);
            if (x8_86 < x9_15)
            {
                x8_86 = x9_15;
                *(arg1 + 0x260) = x9_15;
            }
            int32_t x8_87 = (*(arg1 + 0x254) * x8_86);
            if (*(arg1 + 0x264) < x8_87)
            {
                *(arg1 + 0x264) = x8_87;
            }
            v0_5 = 0;
            *v0_5[8] = 0;
            *(arg1 + 0x358) = {0};
            v1_1 = 0x100000004;
            uint64_t x0_138 = *(arg1 + 8);
            *(arg1 + 0x368) = 0;
            *(arg1 + 0x358) = 0x100000004;
            *(arg1 + 0x360) = 1;
            int32_t x0_139;
            int128_t v0_6;
            x0_139 = ioctl(x0_138, 0xc0145608, (arg1 + 0x358), v0_5, v1_1);
            int32_t x8_90;
            int32_t x20_6;
            if (x0_139 != 0xffffffff)
            {
                x20_6 = 3;
                size_t x0_141;
                int32_t i_3;
                do
                {
                    x8_90 = *(arg1 + 0x358);
                    if (x8_90 >= (x20_6 + 1))
                    {
                        break;
                    }
                    if (x20_6 == 0)
                    {
                        break;
                    }
                    if ((*data_57650 & 1) == 0)
                    {
                        x26_1 = &*(data_57650 + 1);
                    }
                    else
                    {
                        x26_1 = *(data_5765a + 6);
                    }
                    int32_t var_4b0 = data_57648;
                    __builtin_memset(&s_7, 0, 0x18);
                    x0_141 = strlen(x26_1);
                    if (x0_141 < -0x10)
                    {
                        break;
                    }
                    void* x27_5;
                    if (x0_141 >= 0x17)
                    {
                        uint64_t x25_8 = ((x0_141 + 0x10) & 0xfffffffffffffff0);
                        void* x0_143 = operator new(x25_8);
                        x27_5 = x0_143;
                        size_t var_4a0_1 = x0_141;
                        var_498 = x0_143;
                        s_7 = (x25_8 | 1);
                    }
                    else
                    {
                        void var_4a7;
                        x27_5 = &var_4a7;
                        s_7 = (x0_141 << 1);
                    }
                    if ((x0_141 >= 0x17 || (x0_141 < 0x17 && x0_141 != 0)))
                    {
                        memcpy(x27_5, x26_1, x0_141);
                    }
                    *(x27_5 + x0_141) = 0;
                    if ((g3::logLevel(&var_4b0) & 1) == 0)
                    {
                        x21_1 = 0;
                        if ((s_7 & 1) != 0)
                        {
                        label_33620:
                            operator delete(var_498);
                            if ((x21_1 & 1) == 0)
                            {
                                goto label_336fc;
                            }
                            goto label_336a8;
                        }
                    }
                    else
                    {
                        int64_t s_6;
                        __builtin_memset(&s_6, 0, 0x18);
                        x21_1 = *cv::TAG;
                        size_t x0_148 = strlen(x21_1);
                        if (x0_148 < -0x10)
                        {
                            goto label_3474c;
                        }
                        void* var_4b8_1;
                        void* x27_6;
                        if (x0_148 >= 0x17)
                        {
                            uint64_t x25_9 = ((x0_148 + 0x10) & 0xfffffffffffffff0);
                            void* x0_151 = operator new(x25_9);
                            x27_6 = x0_151;
                            size_t var_4c0_1 = x0_148;
                            var_4b8_1 = x0_151;
                            s_6 = (x25_9 | 1);
                        }
                        else
                        {
                            x27_6 = (&s_6 | 1);
                            s_6 = (x0_148 << 1);
                        }
                        if ((x0_148 >= 0x17 || (x0_148 < 0x17 && x0_148 != 0)))
                        {
                            memcpy(x27_6, x21_1, x0_148);
                        }
                        *(x27_6 + x0_148) = 0;
                        x21_1 = g3::logTag(&s_6);
                        if ((s_6 & 1) != 0)
                        {
                            operator delete(var_4b8_1);
                            if ((s_7 & 1) != 0)
                            {
                                goto label_33620;
                            }
                        }
                        else if ((s_7 & 1) != 0)
                        {
                            goto label_33620;
                        }
                    }
                    if ((x21_1 & 1) == 0)
                    {
                        goto label_336fc;
                    }
                label_336a8:
                    LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "Insufficient buffer memory on ", 0x1e), x20, strlen(x20)), " -- decreaseing buffers", 0x17);
                    LogCapture::~LogCapture();
                label_336fc:
                    *(arg1 + 0x358) = x20_6;
                    *(arg1 + 0x35c) = 0x100000001;
                    i_3 = ioctl(*(arg1 + 8), 0xc0145608, (arg1 + 0x358));
                    x20_6 = (x20_6 - 1);
                } while (i_3 != 0xffffffff);
                if (!((x8_90 < (x20_6 + 1) && x20_6 == 0)))
                {
                    if (x8_90 >= (x20_6 + 1))
                    {
                        data_57720 = 0;
                        if (x8_90 != 0)
                        {
                            int32_t i_4 = 0;
                            int32_t x0_196;
                            int64_t x0_197;
                            do
                            {
                                v0_6 = 0;
                                *v0_6[8] = 0;
                                int32_t var_1d8_1 = {0};
                                int128_t s_30;
                                __builtin_memset(&s_30, 0, 0x3c);
                                *var_220[4] = 1;
                                int96_t var_1e8_1;
                                *var_1e8_1[4] = 1;
                                var_220 = i_4;
                                x0_196 = ioctl(*(arg1 + 8), 0xc0585609, &var_220, v0_6);
                                if (x0_196 == 0xffffffff)
                                {
                                    break;
                                }
                                uint64_t x1_35 = var_1d8_1;
                                *(((arg1 + 0xe0) + (data_57720 << 4)) + 8) = x1_35;
                                x0_197 = mmap(0, x1_35, 3, 1, *(arg1 + 8));
                                uint64_t x26_3 = data_57720;
                                *((arg1 + 0xe0) + (x26_3 << 4)) = x0_197;
                                if (x0_197 == -1)
                                {
                                    break;
                                }
                                if (x26_3 == 0)
                                {
                                    uint64_t x20_14 = var_1d8_1;
                                    int64_t x0_199;
                                    x0_199 = malloc(x20_14);
                                    *(arg1 + 0x180) = x0_199;
                                    *(arg1 + 0x188) = x20_14;
                                }
                                i_4 = (x26_3 + 1);
                                data_57720 = i_4;
                            } while (i_4 < *(arg1 + 0x358));
                            if (x0_196 == 0xffffffff)
                            {
                                if ((*data_57650 & 1) == 0)
                                {
                                    x21_1 = &*(data_57650 + 1);
                                }
                                else
                                {
                                    x21_1 = *(data_5765a + 6);
                                }
                                int32_t var_4e8 = data_57648;
                                int64_t s_5;
                                __builtin_memset(&s_5, 0, 0x18);
                                size_t x0_287 = strlen(x21_1);
                                if (x0_287 < -0x10)
                                {
                                    goto label_3475c;
                                }
                                void* var_4d0_1;
                                void* x22_14;
                                if (x0_287 >= 0x17)
                                {
                                    uint64_t x23_16 = ((x0_287 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_299 = operator new(x23_16);
                                    x22_14 = x0_299;
                                    size_t var_4d8_1 = x0_287;
                                    var_4d0_1 = x0_299;
                                    s_5 = (x23_16 | 1);
                                }
                                else
                                {
                                    x22_14 = &*s_5[1];
                                    s_5 = (x0_287 << 1);
                                }
                                if ((x0_287 >= 0x17 || (x0_287 < 0x17 && x0_287 != 0)))
                                {
                                    memcpy(x22_14, x21_1, x0_287);
                                }
                                *(x22_14 + x0_287) = 0;
                                int32_t x20_24;
                                if ((g3::logLevel(&var_4e8) & 1) == 0)
                                {
                                    x20_24 = 0;
                                    if ((s_5 & 1) != 0)
                                    {
                                    label_344f0:
                                        operator delete(var_4d0_1);
                                        if ((x20_24 & 1) == 0)
                                        {
                                            goto label_33edc;
                                        }
                                        goto label_34628;
                                    }
                                }
                                else
                                {
                                    int64_t s_4;
                                    __builtin_memset(&s_4, 0, 0x18);
                                    uint64_t x20_23 = *cv::TAG;
                                    size_t x0_304 = strlen(x20_23);
                                    if (x0_304 < -0x10)
                                    {
                                        goto label_347b4;
                                    }
                                    void* var_4f0_1;
                                    void* x22_17;
                                    if (x0_304 >= 0x17)
                                    {
                                        uint64_t x23_18 = ((x0_304 + 0x10) & 0xfffffffffffffff0);
                                        void* x0_315 = operator new(x23_18);
                                        x22_17 = x0_315;
                                        size_t var_4f8_1 = x0_304;
                                        var_4f0_1 = x0_315;
                                        s_4 = (x23_18 | 1);
                                    }
                                    else
                                    {
                                        x22_17 = (&s_4 | 1);
                                        s_4 = (x0_304 << 1);
                                    }
                                    if ((x0_304 >= 0x17 || (x0_304 < 0x17 && x0_304 != 0)))
                                    {
                                        memcpy(x22_17, x20_23, x0_304);
                                    }
                                    *(x22_17 + x0_304) = 0;
                                    x20_24 = g3::logTag(&s_4);
                                    if ((s_4 & 1) != 0)
                                    {
                                        operator delete(var_4f0_1);
                                        if ((s_5 & 1) != 0)
                                        {
                                            goto label_344f0;
                                        }
                                    }
                                    else if ((s_5 & 1) != 0)
                                    {
                                        goto label_344f0;
                                    }
                                }
                                if ((x20_24 & 1) == 0)
                                {
                                    goto label_33edc;
                                }
                            label_34628:
                                LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "VIDIOC_QUERYBUF", 0xf);
                                goto label_33ed4;
                            }
                            if (!((x0_196 != 0xffffffff && x0_197 == -1)))
                            {
                                goto label_33b68;
                            }
                            if ((*data_57650 & 1) == 0)
                            {
                                x21_1 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x21_1 = *(data_5765a + 6);
                            }
                            int32_t var_520 = data_57648;
                            int64_t s_3;
                            __builtin_memset(&s_3, 0, 0x18);
                            size_t x0_289 = strlen(x21_1);
                            if (x0_289 < -0x10)
                            {
                                goto label_3475c;
                            }
                            void* var_508_1;
                            void* x22_15;
                            if (x0_289 >= 0x17)
                            {
                                uint64_t x23_17 = ((x0_289 + 0x10) & 0xfffffffffffffff0);
                                void* x0_307 = operator new(x23_17);
                                x22_15 = x0_307;
                                size_t var_510_1 = x0_289;
                                var_508_1 = x0_307;
                                s_3 = (x23_17 | 1);
                            }
                            else
                            {
                                x22_15 = &*s_3[1];
                                s_3 = (x0_289 << 1);
                            }
                            if ((x0_289 >= 0x17 || (x0_289 < 0x17 && x0_289 != 0)))
                            {
                                memcpy(x22_15, x21_1, x0_289);
                            }
                            *(x22_15 + x0_289) = 0;
                            int32_t x20_26;
                            if ((g3::logLevel(&var_520) & 1) == 0)
                            {
                                x20_26 = 0;
                                if ((s_3 & 1) != 0)
                                {
                                label_34598:
                                    operator delete(var_508_1);
                                    if ((x20_26 & 1) == 0)
                                    {
                                        goto label_33edc;
                                    }
                                    goto label_346dc;
                                }
                            }
                            else
                            {
                                int64_t s_2;
                                __builtin_memset(&s_2, 0, 0x18);
                                uint64_t x20_25 = *cv::TAG;
                                size_t x0_312 = strlen(x20_25);
                                if (x0_312 < -0x10)
                                {
                                    goto label_347c0;
                                }
                                void* var_528_1;
                                void* x22_18;
                                if (x0_312 >= 0x17)
                                {
                                    uint64_t x23_19 = ((x0_312 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_323 = operator new(x23_19);
                                    x22_18 = x0_323;
                                    size_t var_530_1 = x0_312;
                                    var_528_1 = x0_323;
                                    s_2 = (x23_19 | 1);
                                }
                                else
                                {
                                    x22_18 = (&s_2 | 1);
                                    s_2 = (x0_312 << 1);
                                }
                                if ((x0_312 >= 0x17 || (x0_312 < 0x17 && x0_312 != 0)))
                                {
                                    memcpy(x22_18, x20_25, x0_312);
                                }
                                *(x22_18 + x0_312) = 0;
                                x20_26 = g3::logTag(&s_2);
                                if ((s_2 & 1) != 0)
                                {
                                    operator delete(var_528_1);
                                    if ((s_3 & 1) != 0)
                                    {
                                        goto label_34598;
                                    }
                                }
                                else if ((s_3 & 1) != 0)
                                {
                                    goto label_34598;
                                }
                            }
                            if ((x20_26 & 1) == 0)
                            {
                                goto label_33edc;
                            }
                        label_346dc:
                            LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "mmap", 4);
                            goto label_33ed4;
                        }
                    label_33b68:
                        sub_39c1c(arg1, (arg2 & 1));
                        *(arg1 + 0x10) = 1;
                        char* x20_15;
                        if ((*data_575d0 & 1) == 0)
                        {
                            x20_15 = &*(data_575d0 + 1);
                        }
                        else
                        {
                            x20_15 = *(data_575da + 6);
                        }
                        int32_t var_558 = data_575c8;
                        int64_t s_1;
                        __builtin_memset(&s_1, 0, 0x18);
                        size_t x0_202 = strlen(x20_15);
                        if (x0_202 < -0x10)
                        {
                            goto label_3479c;
                        }
                        void* var_540_1;
                        void* x21_14;
                        if (x0_202 >= 0x17)
                        {
                            uint64_t x22_13 = ((x0_202 + 0x10) & 0xfffffffffffffff0);
                            void* x0_267 = operator new(x22_13);
                            x21_14 = x0_267;
                            size_t var_548_1 = x0_202;
                            var_540_1 = x0_267;
                            s_1 = (x22_13 | 1);
                        }
                        else
                        {
                            x21_14 = &*s_1[1];
                            s_1 = (x0_202 << 1);
                        }
                        if ((x0_202 >= 0x17 || (x0_202 < 0x17 && x0_202 != 0)))
                        {
                            memcpy(x21_14, x20_15, x0_202);
                        }
                        *(x21_14 + x0_202) = 0;
                        int32_t x19_3;
                        if ((g3::logLevel(&var_558) & 1) == 0)
                        {
                            x19_3 = 0;
                            if ((s_1 & 1) != 0)
                            {
                            label_341e8:
                                operator delete(var_540_1);
                                if ((x19_3 & 1) == 0)
                                {
                                    goto label_34438;
                                }
                                goto label_34418;
                            }
                        }
                        else
                        {
                            int64_t s;
                            __builtin_memset(&s, 0, 0x18);
                            uint64_t x19_2 = *cv::TAG;
                            size_t x0_272 = strlen(x19_2);
                            if (x0_272 < -0x10)
                            {
                                goto label_347ac;
                            }
                            void* var_560_1;
                            void* x21_20;
                            if (x0_272 >= 0x17)
                            {
                                uint64_t x22_16 = ((x0_272 + 0x10) & 0xfffffffffffffff0);
                                void* x0_291 = operator new(x22_16);
                                x21_20 = x0_291;
                                size_t var_568_1 = x0_272;
                                var_560_1 = x0_291;
                                s = (x22_16 | 1);
                            }
                            else
                            {
                                x21_20 = (&s | 1);
                                s = (x0_272 << 1);
                            }
                            if ((x0_272 >= 0x17 || (x0_272 < 0x17 && x0_272 != 0)))
                            {
                                memcpy(x21_20, x19_2, x0_272);
                            }
                            *(x21_20 + x0_272) = 0;
                            x19_3 = g3::logTag(&s);
                            if ((s & 1) != 0)
                            {
                                operator delete(var_560_1);
                                if ((s_1 & 1) != 0)
                                {
                                    goto label_341e8;
                                }
                            }
                            else if ((s_1 & 1) != 0)
                            {
                                goto label_341e8;
                            }
                        }
                        if ((x19_3 & 1) == 0)
                        {
                            goto label_34438;
                        }
                    label_34418:
                        LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_575c8, &data_3cde1, &nullptr->ident.version);
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "finish create capture", 0x15);
                        LogCapture::~LogCapture();
                    label_34438:
                        x0_237 = 1;
                    }
                    else if (((x8_90 < (x20_6 + 1) && x20_6 != 0) && x0_141 < -0x10))
                    {
                        goto label_34734;
                    }
                }
                if ((x8_90 < (x20_6 + 1) && x20_6 == 0))
                {
                    if ((*data_57650 & 1) == 0)
                    {
                        x22_1 = &*(data_57650 + 1);
                    }
                    else
                    {
                        x22_1 = *(data_5765a + 6);
                    }
                    int32_t var_478 = data_57648;
                    int64_t s_9;
                    __builtin_memset(&s_9, 0, 0x18);
                    size_t x0_204 = strlen(x22_1);
                    if (x0_204 < -0x10)
                    {
                        goto label_34744;
                    }
                    void* var_460_1;
                    void* x23_9;
                    if (x0_204 >= 0x17)
                    {
                        uint64_t x24_9 = ((x0_204 + 0x10) & 0xfffffffffffffff0);
                        void* x0_240 = operator new(x24_9);
                        x23_9 = x0_240;
                        size_t var_468_1 = x0_204;
                        var_460_1 = x0_240;
                        s_9 = (x24_9 | 1);
                    }
                    else
                    {
                        x23_9 = &*s_9[1];
                        s_9 = (x0_204 << 1);
                    }
                    if ((x0_204 >= 0x17 || (x0_204 < 0x17 && x0_204 != 0)))
                    {
                        memcpy(x23_9, x22_1, x0_204);
                    }
                    *(x23_9 + x0_204) = 0;
                    int32_t x21_19;
                    if ((g3::logLevel(&var_478) & 1) == 0)
                    {
                        x21_19 = 0;
                        if ((s_9 & 1) != 0)
                        {
                        label_33fc4:
                            operator delete(var_460_1);
                            if ((x21_19 & 1) == 0)
                            {
                                goto label_32cd8;
                            }
                            goto label_34274;
                        }
                    }
                    else
                    {
                        int64_t s_8;
                        __builtin_memset(&s_8, 0, 0x18);
                        uint64_t x21_18 = *cv::TAG;
                        size_t x0_245 = strlen(x21_18);
                        if (x0_245 < -0x10)
                        {
                            goto label_347a4;
                        }
                        void* var_480_1;
                        void* x23_14;
                        if (x0_245 >= 0x17)
                        {
                            uint64_t x24_11 = ((x0_245 + 0x10) & 0xfffffffffffffff0);
                            void* x0_275 = operator new(x24_11);
                            x23_14 = x0_275;
                            size_t var_488_1 = x0_245;
                            var_480_1 = x0_275;
                            s_8 = (x24_11 | 1);
                        }
                        else
                        {
                            x23_14 = (&s_8 | 1);
                            s_8 = (x0_245 << 1);
                        }
                        if ((x0_245 >= 0x17 || (x0_245 < 0x17 && x0_245 != 0)))
                        {
                            memcpy(x23_14, x21_18, x0_245);
                        }
                        *(x23_14 + x0_245) = 0;
                        x21_19 = g3::logTag(&s_8);
                        if ((s_8 & 1) != 0)
                        {
                            operator delete(var_480_1);
                            if ((s_9 & 1) != 0)
                            {
                                goto label_33fc4;
                            }
                        }
                        else if ((s_9 & 1) != 0)
                        {
                            goto label_33fc4;
                        }
                    }
                    if ((x21_19 & 1) == 0)
                    {
                        goto label_32cd8;
                    }
                label_34274:
                    LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "Insufficient buffer memory on ", 0x1e), x20, strlen(x20));
                    goto label_32cd0;
                }
            }
            if ((x0_139 == 0xffffffff || ((x0_139 != 0xffffffff && !((x8_90 < (x20_6 + 1) && x20_6 == 0))) && x8_90 < (x20_6 + 1))))
            {
                if (*x0_9 != 0x16)
                {
                    if ((*data_57650 & 1) == 0)
                    {
                        x21_1 = &*(data_57650 + 1);
                    }
                    else
                    {
                        x21_1 = *(data_5765a + 6);
                    }
                    int32_t var_440 = data_57648;
                    int64_t s_11;
                    __builtin_memset(&s_11, 0, 0x18);
                    size_t x0_178 = strlen(x21_1);
                    if (x0_178 < -0x10)
                    {
                        goto label_3475c;
                    }
                    void* var_428_1;
                    void* x22_8;
                    if (x0_178 >= 0x17)
                    {
                        uint64_t x23_12 = ((x0_178 + 0x10) & 0xfffffffffffffff0);
                        void* x0_221 = operator new(x23_12);
                        x22_8 = x0_221;
                        size_t var_430_1 = x0_178;
                        var_428_1 = x0_221;
                        s_11 = (x23_12 | 1);
                    }
                    else
                    {
                        x22_8 = &*s_11[1];
                        s_11 = (x0_178 << 1);
                    }
                    if ((x0_178 >= 0x17 || (x0_178 < 0x17 && x0_178 != 0)))
                    {
                        memcpy(x22_8, x21_1, x0_178);
                    }
                    *(x22_8 + x0_178) = 0;
                    int32_t x20_17;
                    if ((g3::logLevel(&var_440) & 1) == 0)
                    {
                        x20_17 = 0;
                        if ((s_11 & 1) != 0)
                        {
                        label_33e24:
                            operator delete(var_428_1);
                            if ((x20_17 & 1) == 0)
                            {
                                goto label_32cd8;
                            }
                            goto label_34108;
                        }
                    }
                    else
                    {
                        int64_t s_10;
                        __builtin_memset(&s_10, 0, 0x18);
                        uint64_t x20_16 = *cv::TAG;
                        size_t x0_226 = strlen(x20_16);
                        if (x0_226 < -0x10)
                        {
                            goto label_34794;
                        }
                        void* var_448_1;
                        void* x22_11;
                        if (x0_226 >= 0x17)
                        {
                            uint64_t x23_15 = ((x0_226 + 0x10) & 0xfffffffffffffff0);
                            void* x0_258 = operator new(x23_15);
                            x22_11 = x0_258;
                            size_t var_450_1 = x0_226;
                            var_448_1 = x0_258;
                            s_10 = (x23_15 | 1);
                        }
                        else
                        {
                            x22_11 = (&s_10 | 1);
                            s_10 = (x0_226 << 1);
                        }
                        if ((x0_226 >= 0x17 || (x0_226 < 0x17 && x0_226 != 0)))
                        {
                            memcpy(x22_11, x20_16, x0_226);
                        }
                        *(x22_11 + x0_226) = 0;
                        x20_17 = g3::logTag(&s_10);
                        if ((s_10 & 1) != 0)
                        {
                            operator delete(var_448_1);
                            if ((s_11 & 1) != 0)
                            {
                                goto label_33e24;
                            }
                        }
                        else if ((s_11 & 1) != 0)
                        {
                            goto label_33e24;
                        }
                    }
                    if ((x20_17 & 1) == 0)
                    {
                        goto label_32cd8;
                    }
                label_34108:
                    LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "VIDIOC_REQBUFS", 0xe);
                    goto label_32cd0;
                }
                if ((*data_57650 & 1) == 0)
                {
                    x22_1 = &*(data_57650 + 1);
                }
                else
                {
                    x22_1 = *(data_5765a + 6);
                }
                int32_t var_408 = data_57648;
                int64_t s_13;
                __builtin_memset(&s_13, 0, 0x18);
                size_t x0_165 = strlen(x22_1);
                if (x0_165 < -0x10)
                {
                    goto label_34744;
                }
                void* var_3f0_1;
                void* x23_5;
                if (x0_165 >= 0x17)
                {
                    uint64_t x24_8 = ((x0_165 + 0x10) & 0xfffffffffffffff0);
                    void* x0_214 = operator new(x24_8);
                    x23_5 = x0_214;
                    size_t var_3f8_1 = x0_165;
                    var_3f0_1 = x0_214;
                    s_13 = (x24_8 | 1);
                }
                else
                {
                    x23_5 = &*s_13[1];
                    s_13 = (x0_165 << 1);
                }
                if ((x0_165 >= 0x17 || (x0_165 < 0x17 && x0_165 != 0)))
                {
                    memcpy(x23_5, x22_1, x0_165);
                }
                *(x23_5 + x0_165) = 0;
                int32_t x21_17;
                if ((g3::logLevel(&var_408) & 1) == 0)
                {
                    x21_17 = 0;
                    if ((s_13 & 1) != 0)
                    {
                    label_33e08:
                        operator delete(var_3f0_1);
                        if ((x21_17 & 1) == 0)
                        {
                            goto label_32cd8;
                        }
                        goto label_34050;
                    }
                }
                else
                {
                    int64_t s_12;
                    __builtin_memset(&s_12, 0, 0x18);
                    x21_1 = *cv::TAG;
                    size_t x0_219 = strlen(x21_1);
                    if (x0_219 < -0x10)
                    {
                        goto label_3478c;
                    }
                    void* var_410_1;
                    void* x23_11;
                    if (x0_219 >= 0x17)
                    {
                        uint64_t x24_10 = ((x0_219 + 0x10) & 0xfffffffffffffff0);
                        void* x0_248 = operator new(x24_10);
                        x23_11 = x0_248;
                        size_t var_418_1 = x0_219;
                        var_410_1 = x0_248;
                        s_12 = (x24_10 | 1);
                    }
                    else
                    {
                        x23_11 = (&s_12 | 1);
                        s_12 = (x0_219 << 1);
                    }
                    if ((x0_219 >= 0x17 || (x0_219 < 0x17 && x0_219 != 0)))
                    {
                        memcpy(x23_11, x21_1, x0_219);
                    }
                    *(x23_11 + x0_219) = 0;
                    x21_17 = g3::logTag(&s_12);
                    if ((s_12 & 1) != 0)
                    {
                        operator delete(var_410_1);
                        if ((s_13 & 1) != 0)
                        {
                            goto label_33e08;
                        }
                    }
                    else if ((s_13 & 1) != 0)
                    {
                        goto label_33e08;
                    }
                }
                if ((x21_17 & 1) == 0)
                {
                    goto label_32cd8;
                }
            label_34050:
                LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                uint64_t x0_254 = strlen(x20);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], x20, x0_254), " does not support memory mapping", 0x20);
                goto label_32cd0;
            }
        }
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_237;
    }
    if ((((((((x0_17 & 1) == 0 && (s_21 & 1) == 0) || (x0_17 & 1) != 0) && (x21_1 & 1) == 0) || ((x0_17 & 1) == 0 && (s_21 & 1) != 0)) && (*(arg1 + 0x1e4) & 1) == 0) || (((((x0_17 & 1) == 0 && (s_21 & 1) == 0) || (x0_17 & 1) != 0) && (x21_1 & 1) != 0) && (*(arg1 + 0x1e4) & 1) == 0)))
    {
        if ((*data_57650 & 1) == 0)
        {
            x22_1 = &*(data_57650 + 1);
        label_328cc:
            int32_t var_360 = data_57648;
            int64_t s_19;
            __builtin_memset(&s_19, 0, 0x18);
            size_t x0_22 = strlen(x22_1);
            if (x0_22 < -0x10)
            {
                goto label_34744;
            }
            void* var_348_1;
            void* x23_2;
            if (x0_22 >= 0x17)
            {
                uint64_t x24_3 = ((x0_22 + 0x10) & 0xfffffffffffffff0);
                void* x0_37 = operator new(x24_3);
                x23_2 = x0_37;
                var_348_1 = x0_37;
                s_19 = (x24_3 | 1);
                size_t var_350_1 = x0_22;
            }
            else
            {
                x23_2 = &*s_19[1];
                s_19 = (x0_22 << 1);
            }
            if ((x0_22 >= 0x17 || (x0_22 < 0x17 && x0_22 != 0)))
            {
                memcpy(x23_2, x22_1, x0_22);
            }
            *(x23_2 + x0_22) = 0;
            int32_t x21_4;
            if ((g3::logLevel(&var_360) & 1) == 0)
            {
                x21_4 = 0;
                if ((s_19 & 1) != 0)
                {
                label_32b90:
                    operator delete(var_348_1);
                    if ((x21_4 & 1) == 0)
                    {
                        goto label_32cd8;
                    }
                    goto label_32c84;
                }
            }
            else
            {
                int64_t s_18;
                __builtin_memset(&s_18, 0, 0x18);
                x21_1 = *cv::TAG;
                size_t x0_42 = strlen(x21_1);
                if (x0_42 < -0x10)
                {
                    goto label_34764;
                }
                void* var_368_1;
                void* x23_3;
                if (x0_42 >= 0x17)
                {
                    uint64_t x24_4 = ((x0_42 + 0x10) & 0xfffffffffffffff0);
                    void* x0_48 = operator new(x24_4);
                    x23_3 = x0_48;
                    var_368_1 = x0_48;
                    s_18 = (x24_4 | 1);
                    size_t var_370_1 = x0_42;
                }
                else
                {
                    x23_3 = (&s_18 | 1);
                    s_18 = (x0_42 << 1);
                }
                if ((x0_42 >= 0x17 || (x0_42 < 0x17 && x0_42 != 0)))
                {
                    memcpy(x23_3, x21_1, x0_42);
                }
                *(x23_3 + x0_42) = 0;
                x21_4 = g3::logTag(&s_18);
                if ((s_18 & 1) != 0)
                {
                    operator delete(var_368_1);
                    if ((s_19 & 1) != 0)
                    {
                        goto label_32b90;
                    }
                }
                else if ((s_19 & 1) != 0)
                {
                    goto label_32b90;
                }
            }
            if ((x21_4 & 1) == 0)
            {
                goto label_32cd8;
            }
        label_32c84:
            LogCapture::LogCapture(&var_1c8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*s_31[4], "VIDEOIO ERROR: V4L2: device ", 0x1c), x20, strlen(x20)), " is unable to capture video memo…", 0x23);
        label_32cd0:
            LogCapture::~LogCapture();
        label_32cd8:
            sub_31b6c(arg1);
            goto label_33ee0;
        }
        x22_1 = *(data_5765a + 6);
        goto label_328cc;
    }
}

int64_t sub_347f4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
            x19 = _Unwind_Resume(x19);
            LogCapture::~LogCapture();
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34838(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        if ((arg4 & 1) != 0)
        {
            operator delete(arg5);
            x19 = _Unwind_Resume(x19);
            LogCapture::~LogCapture();
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34874(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34894(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_348b8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
            x19 = _Unwind_Resume(x19);
            LogCapture::~LogCapture();
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_348f8(int64_t arg1, char arg2, void* arg3)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_3491c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
        }
        if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || ((arg6 & 1) != 0 && (arg8 & 1) != 0)))
        {
            operator delete(arg9);
            x19 = _Unwind_Resume(x19);
            LogCapture::~LogCapture();
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_3493c(int64_t arg1, char arg2, void* arg3)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_3495c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        if ((arg4 & 1) != 0)
        {
            operator delete(arg5);
            x19 = _Unwind_Resume(x19);
            LogCapture::~LogCapture();
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34998(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19 = arg1;
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x19 = _Unwind_Resume(x19);
        if ((arg2 & 1) != 0)
        {
            operator delete(arg3);
            x19 = _Unwind_Resume(x19);
            LogCapture::~LogCapture();
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_349dc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        if ((arg4 & 1) != 0)
        {
            operator delete(arg5);
        }
        if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
        {
            operator delete(arg7);
            x19 = _Unwind_Resume(x19);
            LogCapture::~LogCapture();
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34a18(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg2 & 1) != 0)
        {
            operator delete(arg3);
            x19 = _Unwind_Resume(x19);
            LogCapture::~LogCapture();
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34a54(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34a74(int64_t arg1, char arg2, void* arg3)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34a94(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11, char arg12, void* arg13)
{
    int64_t x19 = arg1;
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x19 = _Unwind_Resume(x19);
        if ((arg2 & 1) != 0)
        {
            operator delete(arg3);
            x19 = _Unwind_Resume(x19);
            if ((arg8 & 1) != 0)
            {
                operator delete(arg9);
            }
            if ((((arg8 & 1) == 0 && (arg10 & 1) != 0) || ((arg8 & 1) != 0 && (arg10 & 1) != 0)))
            {
                operator delete(arg11);
                x19 = _Unwind_Resume(x19);
                if ((arg12 & 1) != 0)
                {
                    operator delete(arg13);
                    x19 = _Unwind_Resume(x19);
                    LogCapture::~LogCapture();
                }
            }
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34ad4(int64_t arg1, char arg2, void* arg3)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t sub_34af4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11)
{
    int64_t x19 = arg1;
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg2 & 1) != 0)
        {
            operator delete(arg3);
            x19 = _Unwind_Resume(x19);
            if ((arg6 & 1) != 0)
            {
                operator delete(arg7);
            }
            if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || ((arg6 & 1) != 0 && (arg8 & 1) != 0)))
            {
                operator delete(arg9);
                x19 = _Unwind_Resume(x19);
                if ((arg10 & 1) != 0)
                {
                    operator delete(arg11);
                    x19 = _Unwind_Resume(x19);
                    LogCapture::~LogCapture();
                }
            }
        }
    }
    /* tailcall */
    return cv::CvCaptureCAM_V4L::grabFrame(_Unwind_Resume(x19));
}

int64_t cv::CvCaptureCAM_V4L::grabFrame(void* arg1)
{
    int64_t* x21;
    int64_t* var_28 = x21;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    if (*(arg1 + 0x10) == 0)
    {
        goto label_34e54;
    }
    int32_t x8_2 = *(arg1 + 0x358);
    *(arg1 + 0xc) = 0;
    int64_t s_1;
    int32_t var_218;
    int64_t s_2;
    void* var_200;
    void var_1f8;
    void var_1f0;
    int32_t var_b0;
    int128_t s_3;
    int32_t x0_1;
    int64_t x0_24;
    if (x8_2 > 0)
    {
        int32_t x8_3 = 0;
        &*nullptr->ident.signature[1];
        bool cond:0_1;
        do
        {
            int128_t v0;
            v0 = 0;
            *v0[8] = 0;
            int128_t s_4;
            __builtin_memset(&s_4, 0, 0x30);
            __builtin_memset(&s_3, 0, 0x18);
            var_b0 = x8_3;
            int32_t var_ac_1 = 1;
            int128_t var_78_1;
            *var_78_1[4] = 1;
            x0_1 = ioctl(*(arg1 + 8), 0xc058560f, &var_b0, v0);
            if (x0_1 == 0xffffffff)
            {
                break;
            }
            x8_3 = (*(arg1 + 0xc) + 1);
            cond:0_1 = x8_3 < *(arg1 + 0x358);
            *(arg1 + 0xc) = x8_3;
        } while (cond:0_1);
        if (x0_1 == 0xffffffff)
        {
            char* x20_2;
            if ((*data_57650 & 1) == 0)
            {
                x20_2 = &*(data_57650 + 1);
            }
            else
            {
                x20_2 = *(data_5765a + 6);
            }
            var_218 = data_57648;
            __builtin_memset(&s_2, 0, 0x18);
            size_t x0_14 = strlen(x20_2);
            if (x0_14 < -0x10)
            {
                goto label_352c4;
            }
            void* x21_4;
            if (x0_14 >= 0x17)
            {
                uint64_t x22_3 = ((x0_14 + 0x10) & 0xfffffffffffffff0);
                void* x0_33 = operator new(x22_3);
                x21_4 = x0_33;
                size_t var_208_1 = x0_14;
                var_200 = x0_33;
                s_2 = (x22_3 | 1);
            }
            else
            {
                x21_4 = &*s_2[1];
                s_2 = (x0_14 << 1);
            }
            if ((x0_14 >= 0x17 || (x0_14 < 0x17 && x0_14 != 0)))
            {
                memcpy(x21_4, x20_2, x0_14);
            }
            *(x21_4 + x0_14) = 0;
            int32_t x19_4;
            if ((g3::logLevel(&var_218) & 1) == 0)
            {
                x19_4 = 0;
                if ((s_2 & 1) != 0)
                {
                label_350dc:
                    operator delete(var_200);
                    if ((x19_4 & 1) != 0)
                    {
                        goto label_35110;
                    }
                    goto label_35284;
                }
            }
            else
            {
                __builtin_memset(&s_1, 0, 0x18);
                uint64_t x19_3 = *cv::TAG;
                size_t x0_38 = strlen(x19_3);
                if (x0_38 < -0x10)
                {
                    goto label_352d4;
                }
                void* var_220_2;
                void* x21_6;
                if (x0_38 >= 0x17)
                {
                    uint64_t x22_5 = ((x0_38 + 0x10) & 0xfffffffffffffff0);
                    void* x0_47 = operator new(x22_5);
                    x21_6 = x0_47;
                    size_t var_228_2 = x0_38;
                    var_220_2 = x0_47;
                    s_1 = (x22_5 | 1);
                }
                else
                {
                    x21_6 = (&s_1 | 1);
                    s_1 = (x0_38 << 1);
                }
                if ((x0_38 >= 0x17 || (x0_38 < 0x17 && x0_38 != 0)))
                {
                    memcpy(x21_6, x19_3, x0_38);
                }
                *(x21_6 + x0_38) = 0;
                x19_4 = g3::logTag(&s_1);
                if ((s_1 & 1) != 0)
                {
                    operator delete(var_220_2);
                    if ((s_2 & 1) != 0)
                    {
                        goto label_350dc;
                    }
                }
                else if ((s_2 & 1) != 0)
                {
                    goto label_350dc;
                }
            }
            if ((x19_4 & 1) == 0)
            {
                goto label_35284;
            }
        label_35110:
            LogCapture::LogCapture(&var_1f8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
            int32_t x0_55 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f0, "capture deviceHandle ioctl VIDIO…", 0x2d);
            int32_t* x0_56 = __errno();
            *x0_56;
            std::__ndk1::fpos<mbstate_t>* x0_59 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_55), &data_3cde0, 1);
            char* x0_61 = strerror(*x0_56);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_59, x0_61, strlen(x0_61));
        label_35280:
            LogCapture::~LogCapture();
        label_35284:
            x0_24 = 0;
        }
    }
    if ((x8_2 <= 0 || (x8_2 > 0 && x0_1 != 0xffffffff)))
    {
        uint64_t x0_2 = *(arg1 + 8);
        *(arg1 + 0x36c) = 1;
        int32_t x0_3 = ioctl(x0_2, 0x40045612, (arg1 + 0x36c));
        char* x22_1;
        if ((*data_575d0 & 1) == 0)
        {
            x22_1 = &*(data_575d0 + 1);
        }
        else
        {
            x22_1 = *(data_575da + 6);
        }
        var_b0 = data_575c8;
        __builtin_memset(&s_3, 0, 0x18);
        size_t x0_5 = strlen(x22_1);
        char s;
        void* var_238;
        if (x0_5 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_352c4:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_352cc:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_352d4:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_352dc:
            int64_t x0_83 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_238);
            }
            if ((((s & 1) == 0 && (s_2 & 1) != 0) || ((s & 1) != 0 && (s_2 & 1) != 0)))
            {
                operator delete(var_200);
            }
            void* x0_87;
            int64_t x1_15;
            int32_t x2_11;
            x0_87 = _Unwind_Resume(x0_83);
            /* tailcall */
            return cv::CvCaptureCAM_V4L::retrieveFrame(x0_87, x1_15, x2_11);
        }
        void* var_98;
        void* x23_1;
        if (x0_5 >= 0x17)
        {
            uint64_t x24_1 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
            void* x0_7 = operator new(x24_1);
            x23_1 = x0_7;
            *s_3[8] = x0_5;
            var_98 = x0_7;
            s_3 = (x24_1 | 1);
        }
        else
        {
            x23_1 = &*s_3[1];
            s_3 = (x0_5 << 1);
        }
        if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
        {
            memcpy(x23_1, x22_1, x0_5);
        }
        *(x23_1 + x0_5) = 0;
        int32_t x0_10 = g3::logLevel(&var_b0);
        int32_t x21_3;
        if ((x0_10 & 1) == 0)
        {
            x21_3 = 0;
            if ((s_3 & 1) != 0)
            {
            label_34e78:
                operator delete(var_98);
                if ((x21_3 & 1) != 0)
                {
                    goto label_34eac;
                }
            }
        }
        else
        {
            __builtin_memset(&s_1, 0, 0x18);
            uint64_t x21_2 = *cv::TAG;
            size_t x0_12 = strlen(x21_2);
            if (x0_12 < -0x10)
            {
                goto label_352cc;
            }
            void* var_220_1;
            void* x23_2;
            if (x0_12 >= 0x17)
            {
                uint64_t x24_2 = ((x0_12 + 0x10) & 0xfffffffffffffff0);
                void* x0_16 = operator new(x24_2);
                x23_2 = x0_16;
                size_t var_228_1 = x0_12;
                var_220_1 = x0_16;
                s_1 = (x24_2 | 1);
            }
            else
            {
                x23_2 = (&s_1 | 1);
                s_1 = (x0_12 << 1);
            }
            if ((x0_12 >= 0x17 || (x0_12 < 0x17 && x0_12 != 0)))
            {
                memcpy(x23_2, x21_2, x0_12);
            }
            *(x23_2 + x0_12) = 0;
            x21_3 = g3::logTag(&s_1);
            if ((s_1 & 1) != 0)
            {
                operator delete(var_220_1);
                if ((s_3 & 1) != 0)
                {
                    goto label_34e78;
                }
            }
            else if ((s_3 & 1) != 0)
            {
                goto label_34e78;
            }
        }
        if (((x21_3 & 1) != 0 && (((x0_10 & 1) == 0 && (s_3 & 1) == 0) || (x0_10 & 1) != 0)))
        {
        label_34eac:
            LogCapture::LogCapture(&var_1f8, *cv::TAG, &data_575c8, &data_3cde1, &nullptr->ident.version);
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f0, "capture VIDIOC_STREAMON result ", 0x1f));
            LogCapture::~LogCapture();
            if (x0_3 != 0xffffffff)
            {
            label_34e40:
                if (sub_3a4b0(arg1) == 0xffffffff)
                {
                    goto label_35284;
                }
                *(arg1 + 0x10) = 0;
            label_34e54:
                if (sub_3a4b0(arg1) != 0xffffffff)
                {
                    x0_24 = 1;
                }
                else
                {
                    x0_24 = 0;
                }
            }
        }
        if (((((((x0_10 & 1) == 0 && (s_3 & 1) == 0) || (x0_10 & 1) != 0) && (x21_3 & 1) != 0) && x0_3 == 0xffffffff) || ((((((x0_10 & 1) == 0 && (s_3 & 1) == 0) || (x0_10 & 1) != 0) && (x21_3 & 1) == 0) || ((x0_10 & 1) == 0 && (s_3 & 1) != 0)) && x0_3 == 0xffffffff)))
        {
            char* x20_3;
            if ((*data_57650 & 1) == 0)
            {
                x20_3 = &*(data_57650 + 1);
            label_34f08:
                var_218 = data_57648;
                __builtin_memset(&s_2, 0, 0x18);
                size_t x0_31 = strlen(x20_3);
                if (x0_31 < -0x10)
                {
                    goto label_352c4;
                }
                void* x21_5;
                if (x0_31 >= 0x17)
                {
                    uint64_t x22_4 = ((x0_31 + 0x10) & 0xfffffffffffffff0);
                    void* x0_40 = operator new(x22_4);
                    x21_5 = x0_40;
                    size_t var_208_2 = x0_31;
                    var_200 = x0_40;
                    s_2 = (x22_4 | 1);
                }
                else
                {
                    x21_5 = &*s_2[1];
                    s_2 = (x0_31 << 1);
                }
                if ((x0_31 >= 0x17 || (x0_31 < 0x17 && x0_31 != 0)))
                {
                    memcpy(x21_5, x20_3, x0_31);
                }
                *(x21_5 + x0_31) = 0;
                int32_t x19_6;
                if ((g3::logLevel(&var_218) & 1) == 0)
                {
                    x19_6 = 0;
                    if ((s_2 & 1) != 0)
                    {
                    label_351e4:
                        operator delete(var_200);
                        if ((x19_6 & 1) == 0)
                        {
                            goto label_35284;
                        }
                        goto label_35218;
                    }
                }
                else
                {
                    __builtin_memset(&s, 0, 0x18);
                    uint64_t x19_5 = *cv::TAG;
                    size_t x0_45 = strlen(x19_5);
                    if (x0_45 < -0x10)
                    {
                        goto label_352dc;
                    }
                    void* x21_7;
                    if (x0_45 >= 0x17)
                    {
                        uint64_t x22_6 = ((x0_45 + 0x10) & 0xfffffffffffffff0);
                        void* x0_65 = operator new(x22_6);
                        x21_7 = x0_65;
                        size_t var_240_1 = x0_45;
                        var_238 = x0_65;
                        s = (x22_6 | 1);
                    }
                    else
                    {
                        x21_7 = (&s | 1);
                        s = (x0_45 << 1);
                    }
                    if ((x0_45 >= 0x17 || (x0_45 < 0x17 && x0_45 != 0)))
                    {
                        memcpy(x21_7, x19_5, x0_45);
                    }
                    *(x21_7 + x0_45) = 0;
                    x19_6 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        operator delete(var_238);
                        if ((s_2 & 1) != 0)
                        {
                            goto label_351e4;
                        }
                    }
                    else if ((s_2 & 1) != 0)
                    {
                        goto label_351e4;
                    }
                }
                if ((x19_6 & 1) == 0)
                {
                    goto label_35284;
                }
            label_35218:
                LogCapture::LogCapture(&var_1f8, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                int32_t x0_73 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f0, "capture deviceHandle ioctl VIDIO…", 0x31);
                int32_t* x0_74 = __errno();
                *x0_74;
                std::__ndk1::fpos<mbstate_t>* x0_77 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_73), &data_3cde0, 1);
                char* x0_79 = strerror(*x0_74);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_77, x0_79, strlen(x0_79));
                goto label_35280;
            }
            x20_3 = *(data_5765a + 6);
            goto label_34f08;
        }
        if (((((((x0_10 & 1) == 0 && (s_3 & 1) == 0) || (x0_10 & 1) != 0) && (x21_3 & 1) == 0) || ((x0_10 & 1) == 0 && (s_3 & 1) != 0)) && x0_3 != 0xffffffff))
        {
            goto label_34e40;
        }
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_24;
}

int64_t sub_35324(int64_t arg1, void* arg2 @ x29, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (*(arg2 - 0x98) & 1) != 0) || ((arg3 & 1) != 0 && (*(arg2 - 0x98) & 1) != 0)))
    {
        operator delete(*(arg2 - 0x88));
    }
    void* x0_3;
    int64_t x1;
    int32_t x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::retrieveFrame(x0_3, x1, x2);
}

int64_t sub_35358(int64_t arg1, void* arg2 @ x29)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    if ((*(arg2 - 0x98) & 1) != 0)
    {
        operator delete(*(arg2 - 0x88));
    }
    void* x0_4;
    int64_t x1;
    int32_t x2;
    x0_4 = _Unwind_Resume(x0_1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::retrieveFrame(x0_4, x1, x2);
}

void* cv::CvCaptureCAM_V4L::retrieveFrame(void* arg1, int64_t arg2, int32_t arg3)
{
    int64_t v8;
    int64_t var_70 = v8;
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    uint32_t x10 = *(arg1 + 0xd8);
    uint32_t x8_1 = *(arg1 + 0xd9);
    void* x0_20;
    int64_t x9_1;
    int32_t x10_1;
    int32_t x11_2;
    if (x10 == 0)
    {
        x9_1 = *(arg1 + 0xc);
        if (x8_1 != x10)
        {
            x10_1 = 1;
        }
        else
        {
            x10_1 = 0;
        }
        if (*(arg1 + 0x88) != *((arg1 + (x9_1 << 4)) + 0xe8))
        {
            x11_2 = -1;
        }
        else
        {
            x11_2 = 0;
        }
        if (x10_1 == x11_2)
        {
        label_35744:
            x0_20 = (arg1 + 0x38);
            *(arg1 + 0x90) = *((arg1 + (x9_1 << 4)) + 0xe0);
        }
    }
    if (((x10 != 0 && x8_1 != x10) || (x10 == 0 && x10_1 != x11_2)))
    {
        if (x8_1 != 0)
        {
            cvFree_(*(arg1 + 0x90));
            *(arg1 + 0x90) = 0;
        }
        sub_39c1c(arg1, (arg3 & 1));
        if (*(arg1 + 0xd8) != 0)
        {
            goto label_3542c;
        }
        x9_1 = *(arg1 + 0xc);
        goto label_35744;
    }
    if ((x10 != 0 && x8_1 == x10))
    {
    label_3542c:
        int32_t x8_3 = *(arg1 + 0xc8);
        int32_t var_1c8;
        int64_t var_1b0;
        int32_t var_1a8;
        int64_t var_150;
        int64_t var_100;
        int32_t var_e8;
        int128_t s_15;
        int64_t s_16;
        int128_t var_b8;
        void* var_a8;
        int64_t* var_a0;
        int64_t var_98;
        int64_t x8_85;
        int32_t x20_4;
        if ((x8_3 == 0x4745504a || x8_3 == 0x47504a4d))
        {
            int32_t x24_1 = *(arg1 + 0x250);
            int32_t x23_2 = *(arg1 + 0x254);
            void* x8_27 = (arg1 + (*(arg1 + 0xc) << 4));
            int64_t s_21 = *(x8_27 + 0xe0);
            int32_t x25_2 = *(x8_27 + 0xe8);
            cv::cvarrToMat((arg1 + 0x38), false, true, 0, nullptr);
            int64_t var_160;
            int64_t s_4;
            int128_t var_120;
            int64_t var_110;
            void* var_108;
            if ((arg3 & 1) == 0)
            {
                var_1b0 = 0x242ff0000;
                var_1a8 = 1;
                int32_t var_1a4_2 = x25_2;
                int64_t s_1 = s_21;
                int64_t s_27 = s_21;
                int128_t s_3;
                __builtin_memset(&s_3, 0, 0x20);
                int32_t* var_170_2 = &var_1a8;
                int64_t* var_168_2 = &var_160;
                var_160 = 0;
                int64_t var_158_3 = 0;
                if ((s_21 == 0 && x25_2 != 0))
                {
                    goto label_36d00;
                }
                int64_t x8_72 = x25_2;
                var_160 = x8_72;
                int64_t var_158_4 = 1;
                int64_t x8_73 = (s_21 + x8_72);
                s_3 = x8_73;
                *s_3[8] = x8_73;
                cv::Mat::updateContinuityFlag();
                int64_t* var_1c0_5 = &var_1b0;
                int64_t var_1b8_5 = 0;
                var_1c8 = 0x1010000;
                cv::imdecode(&var_1c8, 1, &var_e8);
                int64_t x8_74 = *var_120[8];
                if (x8_74 != 0)
                {
                    int32_t temp0_11;
                    int32_t i;
                    do
                    {
                        temp0_11 = __ldaxr((x8_74 + 0x14));
                        i = __stlxr((temp0_11 - 1), (x8_74 + 0x14));
                    } while (i != 0);
                    if (temp0_11 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int32_t x8_76 = *var_150[4];
                *var_120[8] = 0;
                __builtin_memset(&s_4, 0, 0x20);
                if (x8_76 >= 1)
                {
                    int64_t i_1 = 0;
                    do
                    {
                        *(var_110 + (i_1 << 2)) = 0;
                        i_1 = (i_1 + 1);
                    } while (i_1 < *var_150[4]);
                }
                if (var_108 != &var_100)
                {
                    cv::fastFree(var_108);
                }
                int128_t var_180_1;
                int64_t x8_78 = *var_180_1[8];
                if (x8_78 != 0)
                {
                    int32_t temp0_12;
                    int32_t i_2;
                    do
                    {
                        temp0_12 = __ldaxr((x8_78 + 0x14));
                        i_2 = __stlxr((temp0_12 - 1), (x8_78 + 0x14));
                    } while (i_2 != 0);
                    if (temp0_12 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_180_1[8] = 0;
                __builtin_memset(&s_1, 0, 0x20);
                if (*var_1b0[4] >= 1)
                {
                    int64_t i_3 = 0;
                    do
                    {
                        var_170_2[i_3] = 0;
                        i_3 = (i_3 + 1);
                    } while (i_3 < *var_1b0[4]);
                }
                if (var_168_2 != &var_160)
                {
                    cv::fastFree(var_168_2);
                }
            }
            else
            {
                var_1b0 = 0x242ff0000;
                var_1a8 = 1;
                int32_t var_1a4_1 = x25_2;
                int64_t s = s_21;
                int64_t s_26 = s_21;
                int128_t s_2;
                __builtin_memset(&s_2, 0, 0x20);
                int32_t* var_170_1 = &var_1a8;
                int64_t* var_168_1 = &var_160;
                var_160 = 0;
                int64_t var_158_1 = 0;
                if ((s_21 == 0 && x25_2 != 0))
                {
                    goto label_36bb0;
                }
                int64_t x8_28 = x25_2;
                var_160 = x8_28;
                int64_t var_158_2 = 1;
                int64_t x8_29 = (s_21 + x8_28);
                s_2 = x8_29;
                *s_2[8] = x8_29;
                cv::Mat::updateContinuityFlag();
                int64_t* var_1c0_2 = &var_1b0;
                int64_t var_1b8_2 = 0;
                var_1c8 = 0x1010000;
                cv::imdecode(&var_1c8, 0, &var_e8);
                int64_t x8_30 = *var_120[8];
                if (x8_30 != 0)
                {
                    int32_t temp0_3;
                    int32_t i_4;
                    do
                    {
                        temp0_3 = __ldaxr((x8_30 + 0x14));
                        i_4 = __stlxr((temp0_3 - 1), (x8_30 + 0x14));
                    } while (i_4 != 0);
                    if (temp0_3 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int32_t x8_32 = *var_150[4];
                *var_120[8] = 0;
                __builtin_memset(&s_4, 0, 0x20);
                if (x8_32 >= 1)
                {
                    int64_t i_5 = 0;
                    do
                    {
                        *(var_110 + (i_5 << 2)) = 0;
                        i_5 = (i_5 + 1);
                    } while (i_5 < *var_150[4]);
                }
                if (var_108 != &var_100)
                {
                    cv::fastFree(var_108);
                }
                int128_t var_180;
                int64_t x8_34 = *var_180[8];
                if (x8_34 != 0)
                {
                    int32_t temp0_4;
                    int32_t i_6;
                    do
                    {
                        temp0_4 = __ldaxr((x8_34 + 0x14));
                        i_6 = __stlxr((temp0_4 - 1), (x8_34 + 0x14));
                    } while (i_6 != 0);
                    if (temp0_4 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_180[8] = 0;
                __builtin_memset(&s, 0, 0x20);
                if (*var_1b0[4] >= 1)
                {
                    int64_t i_7 = 0;
                    do
                    {
                        var_170_1[i_7] = 0;
                        i_7 = (i_7 + 1);
                    } while (i_7 < *var_1b0[4]);
                }
                if (var_168_1 != &var_160)
                {
                    cv::fastFree(var_168_1);
                }
            }
            if (s_16 != 0)
            {
                int32_t var_dc;
                if (var_dc != x24_1)
                {
                    goto label_364a4;
                }
                int32_t var_e0;
                if (var_e0 == x23_2)
                {
                    x20_4 = 1;
                }
                else
                {
                    x20_4 = 0;
                }
                x8_85 = *var_b8[8];
                if (x8_85 == 0)
                {
                    goto label_364d8;
                }
                goto label_364c0;
            }
        label_364a4:
            x20_4 = 0;
            x8_85 = *var_b8[8];
            if (x8_85 != 0)
            {
            label_364c0:
                int32_t temp0_13;
                int32_t i_8;
                do
                {
                    temp0_13 = __ldaxr((x8_85 + 0x14));
                    i_8 = __stlxr((temp0_13 - 1), (x8_85 + 0x14));
                } while (i_8 != 0);
                if (temp0_13 == 1)
                {
                    cv::Mat::deallocate();
                }
                goto label_364d8;
            }
        label_364d8:
            *var_b8[8] = 0;
            __builtin_memset(&s_16, 0, 0x20);
            if (s_15 >= 1)
            {
                int64_t i_9 = 0;
                do
                {
                    *(var_a8 + (i_9 << 2)) = 0;
                    i_9 = (i_9 + 1);
                } while (i_9 < s_15);
            }
            if (var_a0 != &var_98)
            {
                cv::fastFree(var_a0);
            }
            if ((x20_4 & 1) == 0)
            {
                x0_20 = nullptr;
            }
        }
        int64_t* var_1f0;
        int32_t var_1e0;
        int32_t var_148;
        int128_t var_d4;
        int128_t var_c4;
        if (x8_3 > 0x47455049)
        {
            if ((((x8_3 <= 0x50313133 && x8_3 != 0x4745504a) && x8_3 != 0x47504a4d) && x8_3 == 0x47524247))
            {
                uint64_t x8_6 = *(arg1 + 0x250);
                uint64_t x11_3 = *(arg1 + 0x254);
                int64_t x9_2 = (x11_3 * x8_6);
                if (x9_2 >= 1)
                {
                    void* x11_7 = *((arg1 + (((*(arg1 + 0xc) + 1) % *(arg1 + 0x358)) << 4)) + 0xe0);
                    int64_t x10_2 = 0;
                    int64_t x13_2 = ((x11_3 - 1) * x8_6);
                    char* x14_2 = (*(arg1 + 0x90) + 1);
                    char* x15_2 = (x11_7 - x8_6);
                    uint8_t* x16_1 = (x11_7 + x8_6);
                    do
                    {
                        uint8_t x17_18;
                        uint32_t x0_6;
                        uint32_t x17_5;
                        void* x17_40;
                        if (((x10_2 / x8_6) & 1) != 0)
                        {
                            if ((x10_2 & 1) == 0)
                            {
                                if ((x10_2 >= x13_2 || (x10_2 < x13_2 && (x10_2 % x8_6) == 0)))
                                {
                                    void* x0_19 = (x11_7 + x10_2);
                                    x14_2[-1] = x15_2[(x10_2 + 1)];
                                    *x14_2 = ((x15_2[x10_2] + *(x0_19 + 1)) >> 1);
                                    x17_18 = *x0_19;
                                }
                                if ((x10_2 < x13_2 && (x10_2 % x8_6) != 0))
                                {
                                    void* x17_7 = &x15_2[x10_2];
                                    void* x0_7 = &x16_1[x10_2];
                                    uint8_t* x3_2 = (x11_7 + x10_2);
                                    x14_2[-1] = ((((*(x17_7 + 1) + *(x17_7 - 1)) + *(x0_7 - 1)) + *(x0_7 + 1)) >> 2);
                                    *x14_2 = ((((x3_2[1] + x3_2[-1]) + x15_2[x10_2]) + x16_1[x10_2]) >> 2);
                                    x17_18 = *x3_2;
                                }
                            }
                            else
                            {
                                if ((x10_2 >= x13_2 || (x10_2 < x13_2 && (x10_2 % x8_6) >= (x8_6 - 1))))
                                {
                                    x14_2[-1] = x15_2[x10_2];
                                    x17_40 = (x11_7 + x10_2);
                                    *x14_2 = *x17_40;
                                label_356d4:
                                    x17_18 = *(x17_40 - 1);
                                }
                                if ((x10_2 < x13_2 && (x10_2 % x8_6) < (x8_6 - 1)))
                                {
                                    void* x1_8 = (x11_7 + x10_2);
                                    x14_2[-1] = ((x16_1[x10_2] + x15_2[x10_2]) >> 1);
                                    *x14_2 = *x1_8;
                                    x17_5 = *(x1_8 - 1);
                                    x0_6 = *(x1_8 + 1);
                                label_35690:
                                    x17_18 = ((x0_6 + x17_5) >> 1);
                                }
                            }
                        }
                        else if ((x10_2 & 1) != 0)
                        {
                            if ((x10_2 <= x8_6 || (x10_2 > x8_6 && (x10_2 % x8_6) >= (x8_6 - 1))))
                            {
                                void* x17_36 = (x11_7 + x10_2);
                                x14_2[-1] = *x17_36;
                                *x14_2 = ((x16_1[x10_2] + *(x17_36 - 1)) >> 1);
                                x17_40 = &x16_1[x10_2];
                                goto label_356d4;
                            }
                            if ((x10_2 > x8_6 && (x10_2 % x8_6) < (x8_6 - 1)))
                            {
                                void* x17_20 = (x11_7 + x10_2);
                                x14_2[-1] = *x17_20;
                                void* x0_12 = &x15_2[x10_2];
                                *x14_2 = ((((*(x17_20 + 1) + *(x17_20 - 1)) + x15_2[x10_2]) + x16_1[x10_2]) >> 2);
                                void* x1_6 = &x16_1[x10_2];
                                x17_18 = ((((*(x0_12 + 1) + *(x0_12 - 1)) + *(x1_6 - 1)) + *(x1_6 + 1)) >> 2);
                            }
                        }
                        else
                        {
                            if ((x10_2 > x8_6 && (x10_2 % x8_6) != 0))
                            {
                                char* x17_3 = (x11_7 + x10_2);
                                x14_2[-1] = ((x17_3[1] + x17_3[-1]) >> 1);
                                *x14_2 = *x17_3;
                                x17_5 = x15_2[x10_2];
                                x0_6 = x16_1[x10_2];
                                goto label_35690;
                            }
                            void* x17_42 = (x11_7 + x10_2);
                            x14_2[-1] = *(x17_42 + 1);
                            *x14_2 = *x17_42;
                            x17_18 = x16_1[x10_2];
                        }
                        x10_2 = (x10_2 + 1);
                        x14_2[1] = x17_18;
                        x14_2 = &x14_2[3];
                    } while (x9_2 != x10_2);
                }
            }
            if (x8_3 == 0x50313134)
            {
                int32_t x8_71 = *(arg1 + 0x254);
                if ((x8_71 & 0x80000000) == 0)
                {
                    int32_t x15_3 = *(arg1 + 0x250);
                    char* x10_26 = *(arg1 + 0x90);
                    void* x16_4 = *((arg1 + (*(arg1 + 0xc) << 4)) + 0xe0);
                    int32_t x2_8 = (x8_71 * x15_3);
                    uint64_t x1_15 = ((x15_3 - 4) >> 2);
                    int32_t x4_1;
                    if (x2_8 < 0)
                    {
                        x4_1 = (x2_8 + 3);
                    }
                    else
                    {
                        x4_1 = x2_8;
                    }
                    char* x2_9 = (x16_4 + x2_8);
                    int32_t x9_22 = 0;
                    char* x3_5 = &x2_9[(x4_1 >> 2)];
                    bool cond:2_1;
                    do
                    {
                        if (((x15_3 - 4) & 0x80000000) == 0)
                        {
                            int64_t x5_1 = 0;
                            char* x6_1 = x10_26;
                            char* x7_1 = x3_5;
                            char* x20_3 = x2_9;
                            do
                            {
                                char* x21_1 = (x16_4 + x5_1);
                                uint32_t x27_3 = x21_1[1];
                                uint32_t x26_2 = x21_1[2];
                                uint32_t x25_5 = x21_1[3];
                                uint32_t x21_2 = *x20_3;
                                x20_3 = &x20_3[1];
                                uint32_t x22_1 = *x7_1;
                                x7_1 = &x7_1[1];
                                uint32_t x28_4 = (*x21_1 << 0x10);
                                int32_t x24_3 = ((x21_2 - 0x80) * 0x1c5a1);
                                int32_t x21_4 = (x24_3 + x28_4);
                                int32_t x23_5 = (((x21_2 - 0x80) * 0xffffa7e7) + ((x22_1 - 0x80) * 0xffff492f));
                                char x30_2;
                                if (x21_4 > 0xffffff)
                                {
                                    x30_2 = -1;
                                }
                                else if (x21_4 < 0x10000)  {  // {"_function_callE"}}
                                {
                                    x30_2 = 0;
                                }
                                else
                                {
                                    x30_2 = (x21_4 >> 0x10);
                                }
                                int32_t x21_5 = (x23_5 + x28_4);
                                int32_t x22_3 = ((x22_1 - 0x80) * 0x166e9);
                                *x6_1 = x30_2;
                                uint8_t x30_4;
                                if (x21_5 > 0xffffff)
                                {
                                    x30_4 = -1;
                                }
                                else if (x21_5 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x30_4 = (x21_5 >> 0x10);
                                }
                                else
                                {
                                    x30_4 = 0;
                                }
                                int32_t x21_6 = (x22_3 + x28_4);
                                uint32_t x27_4 = (x27_3 << 0x10);
                                x6_1[1] = x30_4;
                                uint8_t x28_5;
                                if (x21_6 > 0xffffff)
                                {
                                    x28_5 = -1;
                                }
                                else if (x21_6 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x28_5 = (x21_6 >> 0x10);
                                }
                                else
                                {
                                    x28_5 = 0;
                                }
                                int32_t x21_7 = (x24_3 + x27_4);
                                x6_1[2] = x28_5;
                                uint8_t x28_6;
                                if (x21_7 > 0xffffff)
                                {
                                    x28_6 = -1;
                                }
                                else if (x21_7 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x28_6 = (x21_7 >> 0x10);
                                }
                                else
                                {
                                    x28_6 = 0;
                                }
                                int32_t x21_8 = (x23_5 + x27_4);
                                x6_1[3] = x28_6;
                                uint8_t x28_7;
                                if (x21_8 > 0xffffff)
                                {
                                    x28_7 = -1;
                                }
                                else if (x21_8 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x28_7 = (x21_8 >> 0x10);
                                }
                                else
                                {
                                    x28_7 = 0;
                                }
                                int32_t x21_9 = (x22_3 + x27_4);
                                uint32_t x26_3 = (x26_2 << 0x10);
                                x6_1[4] = x28_7;
                                uint8_t x27_5;
                                if (x21_9 > 0xffffff)
                                {
                                    x27_5 = -1;
                                }
                                else if (x21_9 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x27_5 = (x21_9 >> 0x10);
                                }
                                else
                                {
                                    x27_5 = 0;
                                }
                                int32_t x21_10 = (x24_3 + x26_3);
                                x6_1[5] = x27_5;
                                uint8_t x27_6;
                                if (x21_10 > 0xffffff)
                                {
                                    x27_6 = -1;
                                }
                                else if (x21_10 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x27_6 = (x21_10 >> 0x10);
                                }
                                else
                                {
                                    x27_6 = 0;
                                }
                                int32_t x21_11 = (x23_5 + x26_3);
                                x6_1[6] = x27_6;
                                uint8_t x27_7;
                                if (x21_11 > 0xffffff)
                                {
                                    x27_7 = -1;
                                }
                                else if (x21_11 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x27_7 = (x21_11 >> 0x10);
                                }
                                else
                                {
                                    x27_7 = 0;
                                }
                                int32_t x21_12 = (x22_3 + x26_3);
                                uint32_t x25_6 = (x25_5 << 0x10);
                                x6_1[7] = x27_7;
                                uint8_t x26_4;
                                if (x21_12 > 0xffffff)
                                {
                                    x26_4 = -1;
                                }
                                else if (x21_12 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x26_4 = (x21_12 >> 0x10);
                                }
                                else
                                {
                                    x26_4 = 0;
                                }
                                int32_t x21_13 = (x24_3 + x25_6);
                                x6_1[8] = x26_4;
                                uint8_t x24_4;
                                if (x21_13 > 0xffffff)
                                {
                                    x24_4 = -1;
                                }
                                else if (x21_13 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x24_4 = (x21_13 >> 0x10);
                                }
                                else
                                {
                                    x24_4 = 0;
                                }
                                int32_t x21_14 = (x23_5 + x25_6);
                                x6_1[9] = x24_4;
                                uint8_t x23_6;
                                if (x21_14 > 0xffffff)
                                {
                                    x23_6 = -1;
                                }
                                else if (x21_14 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x23_6 = (x21_14 >> 0x10);
                                }
                                else
                                {
                                    x23_6 = 0;
                                }
                                int32_t x21_15 = (x22_3 + x25_6);
                                x6_1[0xa] = x23_6;
                                uint8_t x22_4;
                                if (x21_15 > 0xffffff)
                                {
                                    x22_4 = -1;
                                }
                                else if (x21_15 >= 0x10000)  {  // {"_function_callE"}}
                                {
                                    x22_4 = (x21_15 >> 0x10);
                                }
                                else
                                {
                                    x22_4 = 0;
                                }
                                x5_1 = (x5_1 + 4);
                                x6_1[0xb] = x22_4;
                                x6_1 = &x6_1[0xc];
                            } while (x5_1 <= (x15_3 - 4));
                            x2_9 = &x2_9[(x1_15 + 1)];
                            x10_26 = &x10_26[((x1_15 * 0xc) + 0xc)];
                            x3_5 = &x3_5[(x1_15 + 1)];
                            x16_4 = (x16_4 + (((x15_3 - 4) & 0xfffffffc) + 4));
                        }
                        cond:2_1 = x9_22 != x8_71;
                        x9_22 = (x9_22 + 1);
                    } while (cond:2_1);
                }
            }
            else if (x8_3 == 0x56595559)
            {
                uint64_t x8_109 = (*(arg1 + 0x254) * *(arg1 + 0x250));
                if (x8_109 != 0)
                {
                    char* x9_37 = *(arg1 + 0x90);
                    char* x10_47 = *((arg1 + (*(arg1 + 0xc) << 4)) + 0xe0);
                    int64_t i_35;
                    if ((x8_109 < 0x21 || ((x8_109 >= 0x21 && x9_37 < (&x10_47[(x8_109 << 1)] - 1)) && x10_47 < &x9_37[x8_109])))
                    {
                        i_35 = 0;
                    }
                    if (((x9_37 >= ((x10_47 + (x8_109 << 1)) - 1) || (x9_37 < ((x10_47 + (x8_109 << 1)) - 1) && x10_47 >= &x9_37[x8_109])) && x8_109 >= 0x21))
                    {
                        int64_t x11_17;
                        if ((x8_109 & 0x1f) == 0)
                        {
                            x11_17 = 0x20;
                        }
                        else
                        {
                            x11_17 = (x8_109 & 0x1f);
                        }
                        i_35 = (x8_109 - x11_17);
                        void* x13_5 = &x10_47[0x20];
                        x10_47 = &x10_47[(i_35 << 1)];
                        void* x9_38 = &x9_37[0x10];
                        int64_t i_34 = i_35;
                        int64_t i_10;
                        do
                        {
                            int128_t v0_2 = vld2q_s8(x13_5);
                            int128_t v2_1 = vld2q_s8((x13_5 - 0x20));
                            x13_5 = (x13_5 + 0x40);
                            i_10 = i_34;
                            i_34 = (i_34 - 0x20);
                            *(x9_38 - 0x10) = v2_1;
                            *x9_38 = v0_2;
                            x9_38 = (x9_38 + 0x20);
                        } while (i_10 != 0x20);
                        x9_37 = &x9_37[i_35];
                    }
                    int64_t i_33 = (x8_109 - i_35);
                    int64_t i_11;
                    do
                    {
                        char x11_18 = *x10_47;
                        x10_47 = &x10_47[2];
                        i_11 = i_33;
                        i_33 = (i_33 - 1);
                        *x9_37 = x11_18;
                        x9_37 = &x9_37[1];
                    } while (i_11 != 1);
                }
            }
            else if (x8_3 == 0x59565955)
            {
                int32_t x25_1 = *(arg1 + 0x250);
                int32_t x23_1 = *(arg1 + 0x254);
                int64_t s_23 = *(arg1 + 0x90);
                int64_t s_17 = *((arg1 + (*(arg1 + 0xc) << 4)) + 0xe0);
                var_e8 = 0x242ff0008;
                int64_t x27_1 = (x23_1 * x25_1);
                int32_t var_e0_1 = x23_1;
                int32_t var_dc_1 = x25_1;
                s_16 = s_17;
                *var_d4[4] = s_17;
                __builtin_memset(&*var_d4[0xc], 0, 0x20);
                var_a8 = &*s_15[4];
                var_a0 = &var_98;
                var_1f0 = &var_98;
                var_98 = 0;
                int64_t var_90_1 = 0;
                if ((s_17 == 0 && x27_1 != 0))
                {
                    int64_t x0_45;
                    int128_t v0_3;
                    x0_45 = operator new(0x20);
                    int64_t var_140 = x0_45;
                    var_150 = data_3e1c0;
                    __builtin_strncpy(x0_45, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_150, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36b5c:
                    int64_t x0_46;
                    int128_t v0_4;
                    x0_46 = operator new(0x20);
                    int64_t var_1a0_2 = x0_46;
                    var_1b0 = data_3e1c0;
                    __builtin_strncpy(x0_46, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_1b0, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36bb0:
                    int64_t x0_47;
                    int128_t v0_5;
                    x0_47 = operator new(0x20);
                    int64_t var_140_1 = x0_47;
                    var_150 = data_3e1c0;
                    __builtin_strncpy(x0_47, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_150, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36c04:
                    int64_t x0_48;
                    int128_t v0_6;
                    x0_48 = operator new(0x20);
                    int64_t var_1a0_3 = x0_48;
                    var_1b0 = data_3e1c0;
                    __builtin_strncpy(x0_48, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_1b0, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36c58:
                    int64_t x0_49;
                    int128_t v0_7;
                    x0_49 = operator new(0x20);
                    int64_t var_140_2 = x0_49;
                    var_150 = data_3e1c0;
                    __builtin_strncpy(x0_49, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_150, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36cac:
                    int64_t x0_50;
                    int128_t v0_8;
                    x0_50 = operator new(0x20);
                    int64_t var_1a0_4 = x0_50;
                    var_1b0 = data_3e1c0;
                    __builtin_strncpy(x0_50, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_1b0, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36d00:
                    int64_t x0_51;
                    int128_t v0_9;
                    x0_51 = operator new(0x20);
                    int64_t var_140_3 = x0_51;
                    var_150 = data_3e1c0;
                    __builtin_strncpy(x0_51, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_150, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36d54:
                    int64_t x0_52;
                    int128_t v0_10;
                    x0_52 = operator new(0x20);
                    int64_t var_140_4 = x0_52;
                    var_150 = data_3e1c0;
                    __builtin_strncpy(x0_52, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_150, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36da8:
                    int64_t x0_53;
                    int128_t v0_11;
                    x0_53 = operator new(0x20);
                    int64_t var_1a0_5 = x0_53;
                    var_1b0 = data_3e1c0;
                    __builtin_strncpy(x0_53, "total() == 0 || data != NULL", 0x1d);
                    cv::error(0xffffff29, &var_1b0, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                label_36dfc:
                    void* x0_54;
                    int128_t v0_12;
                    x0_54 = operator new(0x20);
                    var_1b0 = data_3e1c0;
                    __builtin_strncpy(x0_54, "total() == 0 || data != NULL", 0x1d);
                    int64_t x0_55 = cv::error(0xffffff29, &var_1b0, &data_3e63c, "/nvmen1/pdtechws/MirCameraApp/Ma…", 0x224);
                    int64_t x8_113;
                    if ((var_1b0 & 1) == 0)
                    {
                        x8_113 = *var_b8[8];
                    }
                    else
                    {
                        operator delete(x0_54);
                        x8_113 = *var_b8[8];
                    }
                    if ((((var_1b0 & 1) == 0 && x8_113 != 0) || ((var_1b0 & 1) != 0 && x8_113 != 0)))
                    {
                        int32_t temp0_16;
                        int32_t i_12;
                        do
                        {
                            temp0_16 = __ldaxr((x8_113 + 0x14));
                            i_12 = __stlxr((temp0_16 - 1), (x8_113 + 0x14));
                        } while (i_12 != 0);
                        if (temp0_16 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_b8[8] = 0;
                    __builtin_memset(&s_16, 0, 0x20);
                    if (s_15 >= 1)
                    {
                        int64_t i_13 = 0;
                        do
                        {
                            *(var_a8 + (i_13 << 2)) = 0;
                            i_13 = (i_13 + 1);
                        } while (i_13 < s_15);
                    }
                    if (var_a0 != var_1f0)
                    {
                        cv::fastFree(var_a0);
                    }
                    sub_1908c(_Unwind_Resume(x0_55));
                    /* no return */
                }
                int64_t x20_1 = x25_1;
                int64_t x28_1 = x23_1;
                int64_t x10_3 = (x20_1 << 1);
                int64_t x8_13 = (s_17 + (x10_3 * x28_1));
                var_98 = x10_3;
                int64_t var_90_2 = 2;
                *var_d4[0xc] = x8_13;
                *var_c4[4] = x8_13;
                cv::Mat::updateContinuityFlag();
                var_1c8 = 0x1010000;
                var_148 = x23_1;
                int32_t var_144_1 = x25_1;
                var_150 = 0x242ff0010;
                int32_t* var_1c0_1 = &var_e8;
                int64_t var_1b8_1 = 0;
                int64_t s_5 = s_23;
                int64_t s_28 = s_23;
                int128_t s_10;
                __builtin_memset(&s_10, 0, 0x20);
                int32_t* var_110_1 = &var_148;
                int64_t* var_108_1 = &var_100;
                var_100 = 0;
                int64_t var_f8_1 = 0;
                if ((x27_1 != 0 && s_23 == 0))
                {
                    goto label_36b5c;
                }
                int64_t x8_14 = (x20_1 * 3);
                var_100 = x8_14;
                int64_t var_f8_2 = 3;
                int64_t x8_15 = (s_23 + (x8_14 * x28_1));
                s_10 = x8_15;
                *s_10[8] = x8_15;
                cv::Mat::updateContinuityFlag();
                int64_t* var_1d8_1 = &var_150;
                int64_t var_1d0_1 = 0;
                var_1e0 = 0xc2010000;
                cv::cvtColor(&var_1c8, &var_1e0, 0x6c, 0);
                int128_t var_120_1;
                int64_t x8_16 = *var_120_1[8];
                if (x8_16 != 0)
                {
                    int32_t temp0_1;
                    int32_t i_14;
                    do
                    {
                        temp0_1 = __ldaxr((x8_16 + 0x14));
                        i_14 = __stlxr((temp0_1 - 1), (x8_16 + 0x14));
                    } while (i_14 != 0);
                    if (temp0_1 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_120_1[8] = 0;
                __builtin_memset(&s_5, 0, 0x20);
                if (*var_150[4] >= 1)
                {
                    int64_t i_15 = 0;
                    do
                    {
                        var_110_1[i_15] = 0;
                        i_15 = (i_15 + 1);
                    } while (i_15 < *var_150[4]);
                }
                if (var_108_1 != &var_100)
                {
                    cv::fastFree(var_108_1);
                }
                int64_t x8_20 = *var_b8[8];
                if (x8_20 != 0)
                {
                    int32_t temp0_2;
                    int32_t i_16;
                    do
                    {
                        temp0_2 = __ldaxr((x8_20 + 0x14));
                        i_16 = __stlxr((temp0_2 - 1), (x8_20 + 0x14));
                    } while (i_16 != 0);
                    if (temp0_2 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_b8[8] = 0;
                __builtin_memset(&s_16, 0, 0x20);
                if (s_15 >= 1)
                {
                    int64_t i_17 = 0;
                    do
                    {
                        *(var_a8 + (i_17 << 2)) = 0;
                        i_17 = (i_17 + 1);
                    } while (i_17 < s_15);
                }
                if (var_a0 != var_1f0)
                {
                    cv::fastFree(var_a0);
                }
            }
        }
        else if (x8_3 > 0x32315658)
        {
            if (x8_3 == 0x32315659)
            {
                int32_t x25_4 = *(arg1 + 0x254);
                int32_t x23_3 = *(arg1 + 0x250);
                int64_t s_19 = *((arg1 + (*(arg1 + 0xc) << 4)) + 0xe0);
                int32_t x10_19 = (x25_4 * 3);
                int64_t s_24 = *(arg1 + 0x90);
                int32_t x10_20;
                if (x10_19 < 0)
                {
                    x10_20 = (x10_19 + 1);
                }
                else
                {
                    x10_20 = x10_19;
                }
                var_e8 = 0x242ff0000;
                int32_t x10_21 = (x10_20 >> 1);
                int32_t var_e0_2 = x10_21;
                int32_t var_dc_2 = x23_3;
                s_16 = s_19;
                *var_d4[4] = s_19;
                __builtin_memset(&*var_d4[0xc], 0, 0x20);
                var_a8 = &*s_15[4];
                var_a0 = &var_98;
                int64_t x9_17 = (x10_21 * x23_3);
                var_1f0 = &var_98;
                var_98 = 0;
                int64_t var_90_4 = 0;
                if ((s_19 == 0 && x9_17 != 0))
                {
                    goto label_36c58;
                }
                int64_t x28_3 = x23_3;
                int64_t x8_58 = (s_19 + x9_17);
                int64_t x26_1 = x25_4;
                var_98 = x28_3;
                int64_t var_90_5 = 1;
                *var_d4[0xc] = x8_58;
                *var_c4[4] = x8_58;
                cv::Mat::updateContinuityFlag();
                var_1c8 = 0x1010000;
                var_148 = x25_4;
                int32_t var_144_4 = x23_3;
                var_150 = 0x242ff0010;
                int32_t* var_1c0_4 = &var_e8;
                int64_t var_1b8_4 = 0;
                int64_t s_8 = s_24;
                int64_t s_31 = s_24;
                int128_t s_13;
                __builtin_memset(&s_13, 0, 0x20);
                int32_t* var_110_4 = &var_148;
                int64_t* var_108_4 = &var_100;
                var_100 = 0;
                int64_t var_f8_7 = 0;
                if (((x26_1 * x28_3) != 0 && s_24 == 0))
                {
                    goto label_36cac;
                }
                int64_t x8_60 = (x28_3 * 3);
                var_100 = x8_60;
                int64_t var_f8_8 = 3;
                int64_t x8_61 = (s_24 + (x8_60 * x26_1));
                s_13 = x8_61;
                *s_13[8] = x8_61;
                cv::Mat::updateContinuityFlag();
                int64_t* var_1d8_3 = &var_150;
                int64_t var_1d0_3 = 0;
                var_1e0 = 0xc2010000;
                cv::cvtColor(&var_1c8, &var_1e0, 0x63, 0);
                int128_t var_120_4;
                int64_t x8_62 = *var_120_4[8];
                if (x8_62 != 0)
                {
                    int32_t temp0_9;
                    int32_t i_18;
                    do
                    {
                        temp0_9 = __ldaxr((x8_62 + 0x14));
                        i_18 = __stlxr((temp0_9 - 1), (x8_62 + 0x14));
                    } while (i_18 != 0);
                    if (temp0_9 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_120_4[8] = 0;
                __builtin_memset(&s_8, 0, 0x20);
                if (*var_150[4] >= 1)
                {
                    int64_t i_19 = 0;
                    do
                    {
                        var_110_4[i_19] = 0;
                        i_19 = (i_19 + 1);
                    } while (i_19 < *var_150[4]);
                }
                if (var_108_4 != &var_100)
                {
                    cv::fastFree(var_108_4);
                }
                int64_t x8_66 = *var_b8[8];
                if (x8_66 != 0)
                {
                    int32_t temp0_10;
                    int32_t i_20;
                    do
                    {
                        temp0_10 = __ldaxr((x8_66 + 0x14));
                        i_20 = __stlxr((temp0_10 - 1), (x8_66 + 0x14));
                    } while (i_20 != 0);
                    if (temp0_10 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_b8[8] = 0;
                __builtin_memset(&s_16, 0, 0x20);
                if (s_15 >= 1)
                {
                    int64_t i_21 = 0;
                    do
                    {
                        *(var_a8 + (i_21 << 2)) = 0;
                        i_21 = (i_21 + 1);
                    } while (i_21 < s_15);
                }
                if (var_a0 != var_1f0)
                {
                    cv::fastFree(var_a0);
                }
            }
            else if (x8_3 == 0x33424752)
            {
                int32_t x23_7 = *(arg1 + 0x250);
                int32_t x25_7 = *(arg1 + 0x254);
                int64_t s_25 = *(arg1 + 0x90);
                int64_t s_20 = *((arg1 + (((*(arg1 + 0xc) + 1) % *(arg1 + 0x358)) << 4)) + 0xe0);
                int64_t x27_8 = (x25_7 * x23_7);
                var_e8 = 0x242ff0010;
                int32_t var_e0_3 = x25_7;
                int32_t var_dc_3 = x23_7;
                s_16 = s_20;
                *var_d4[4] = s_20;
                __builtin_memset(&*var_d4[0xc], 0, 0x20);
                var_a8 = &*s_15[4];
                var_a0 = &var_98;
                var_1f0 = &var_98;
                var_98 = 0;
                int64_t var_90_6 = 0;
                if ((x27_8 != 0 && s_20 == 0))
                {
                    goto label_36d54;
                }
                int64_t x28_8 = (x23_7 * 3);
                int64_t x20_5 = (x28_8 * x25_7);
                int64_t x8_95 = (s_20 + x20_5);
                var_98 = x28_8;
                int64_t var_90_7 = 3;
                *var_d4[0xc] = x8_95;
                *var_c4[4] = x8_95;
                cv::Mat::updateContinuityFlag();
                var_148 = x25_7;
                int32_t var_144_5 = x23_7;
                var_1c8 = 0x1010000;
                int32_t* var_1c0_6 = &var_e8;
                int64_t var_1b8_6 = 0;
                var_150 = 0x242ff0010;
                int64_t s_9 = s_25;
                int64_t s_32 = s_25;
                int128_t s_14;
                __builtin_memset(&s_14, 0, 0x20);
                int32_t* var_110_5 = &var_148;
                int64_t* var_108_5 = &var_100;
                var_100 = 0;
                int64_t var_f8_9 = 0;
                if ((x27_8 != 0 && s_25 == 0))
                {
                    goto label_36da8;
                }
                int64_t x10_40 = (s_25 + x20_5);
                var_100 = x28_8;
                int64_t var_f8_10 = 3;
                s_14 = ((x10_40 + -(x28_8)) + x28_8);
                *s_14[8] = x10_40;
                cv::Mat::updateContinuityFlag();
                int64_t* var_1d8_4 = &var_150;
                int64_t var_1d0_4 = 0;
                var_1e0 = 0xc2010000;
                cv::cvtColor(&var_1c8, &var_1e0, 4, 0);
                int128_t var_120_5;
                int64_t x8_99 = *var_120_5[8];
                if (x8_99 != 0)
                {
                    int32_t temp0_14;
                    int32_t i_22;
                    do
                    {
                        temp0_14 = __ldaxr((x8_99 + 0x14));
                        i_22 = __stlxr((temp0_14 - 1), (x8_99 + 0x14));
                    } while (i_22 != 0);
                    if (temp0_14 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_120_5[8] = 0;
                __builtin_memset(&s_9, 0, 0x20);
                if (*var_150[4] >= 1)
                {
                    int64_t i_23 = 0;
                    do
                    {
                        var_110_5[i_23] = 0;
                        i_23 = (i_23 + 1);
                    } while (i_23 < *var_150[4]);
                }
                if (var_108_5 != &var_100)
                {
                    cv::fastFree(var_108_5);
                }
                int64_t x8_103 = *var_b8[8];
                if (x8_103 != 0)
                {
                    int32_t temp0_15;
                    int32_t i_24;
                    do
                    {
                        temp0_15 = __ldaxr((x8_103 + 0x14));
                        i_24 = __stlxr((temp0_15 - 1), (x8_103 + 0x14));
                    } while (i_24 != 0);
                    if (temp0_15 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_b8[8] = 0;
                __builtin_memset(&s_16, 0, 0x20);
                if (s_15 >= 1)
                {
                    int64_t i_25 = 0;
                    do
                    {
                        *(var_a8 + (i_25 << 2)) = 0;
                        i_25 = (i_25 + 1);
                    } while (i_25 < s_15);
                }
                if (var_a0 != var_1f0)
                {
                    cv::fastFree(var_a0);
                }
            }
            else if (x8_3 == 0x33524742)
            {
                memcpy(*(arg1 + 0x90), *((arg1 + (*(arg1 + 0xc) << 4)) + 0xe0), *(arg1 + 0x88));
            }
        }
        else if (x8_3 != 0x20363159)
        {
            uint64_t x0_2;
            uint64_t x1_1;
            char* x2;
            uint8_t* x3_1;
            if (x8_3 == 0x31384142)
            {
                x0_2 = *(arg1 + 0x250);
                x1_1 = *(arg1 + 0x254);
                x3_1 = *(arg1 + 0x90);
                x2 = *((arg1 + (*(arg1 + 0xc) << 4)) + 0xe0);
            }
            if (x8_3 == 0x30313953)
            {
                int64_t v1 = 0x300000000;
                int64_t v2 = 0x400000000;
                int32_t x8_89 = 0;
                int64_t i_26 = 0;
                void* x10_33 = &data_5772c;
                do
                {
                    int32_t x11_8;
                    int64_t v7;
                    if ((i_26 & 0x80) == 0)
                    {
                        x11_8 = 0;
                        v7 = 0x100000000;
                    }
                    else
                    {
                        int32_t x11_9 = (i_26 & 0xe0);
                        if (x11_9 == 0x80)
                        {
                            x11_8 = 4;
                            v7 = v1;
                        }
                        else if (x11_9 == 0xa0)
                        {
                            x11_8 = -4;
                            v7 = v1;
                        }
                        else
                        {
                            int32_t x11_10 = (i_26 & 0xf0);
                            if (x11_10 == 0xd0)
                            {
                                x11_8 = 0xb;
                                v7 = v2;
                            }
                            else if (x11_10 == 0xf0)
                            {
                                x11_8 = -0xb;
                                v7 = v2;
                            }
                            else if ((i_26 & 0xf8) == 0xc8)
                            {
                                x11_8 = 0x14;
                                v7 = 0x500000000;
                            }
                            else
                            {
                                int32_t x12_7 = (i_26 & 0xfc);
                                if (x12_7 == 0xc0)
                                {
                                    x11_8 = -0x14;
                                    v7 = 0x600000000;
                                }
                                else if (x12_7 == 0xc4)
                                {
                                    x11_8 = 0;
                                    v7 = 0x800000000;
                                }
                                else if (x11_10 != 0xe0)
                                {
                                    x11_8 = 0;
                                    v7 = 0;
                                }
                                else
                                {
                                    x11_8 = (x8_89 & 0xf0);
                                    v7 = 0x800000001;
                                }
                            }
                        }
                    }
                    i_26 = (i_26 + 1);
                    *x10_33 = x11_8;
                    *(x10_33 - 8) = v7;
                    x10_33 = (x10_33 + 0xc);
                    x8_89 = (x8_89 + 0x10);
                } while (i_26 != 0x100);
                int32_t x9_29 = *(arg1 + 0x254);
                int32_t x8_90 = *(arg1 + 0x250);
                uint64_t x12_8 = *(arg1 + 0xc);
                if (x9_29 >= 1)
                {
                    int64_t x12_9 = *((arg1 + (x12_8 << 4)) + 0xe0);
                    uint8_t* x15_6 = *((arg1 + (((x12_8 + 1) % *(arg1 + 0x358)) << 4)) + 0xe0);
                    uint64_t x10_34 = 0;
                    int32_t x11_11 = 0;
                    int64_t x13_4 = -((x8_90 << 1));
                    do
                    {
                        int32_t x1_25;
                        if (x11_11 > 1)
                        {
                            x1_25 = 0;
                        }
                        else
                        {
                            char* x1_18 = (x12_9 + (x10_34 >> 3));
                            int32_t x3_6 = (x10_34 & 7);
                            char* x2_14 = (x12_9 + ((x10_34 + 8) >> 3));
                            *x15_6 = ((x1_18[1] >> (8 - x3_6)) | (*x1_18 << x3_6));
                            int32_t x3_9 = ((x10_34 + 8) & 7);
                            x10_34 = (x10_34 + 0x10);
                            x15_6[1] = ((x2_14[1] >> (8 - x3_9)) | (*x2_14 << x3_9));
                            x15_6 = &x15_6[2];
                            x1_25 = 2;
                        }
                        if (((x11_11 > 1 && 0 < x8_90) || (x11_11 <= 1 && 2 < x8_90)))
                        {
                            int32_t x2_17 = !(x1_25);
                            void* x3_11 = x15_6;
                            do
                            {
                                char* x4_4 = (x12_9 + (x10_34 >> 3));
                                int64_t x6_2 = (x10_34 & 7);
                                int32_t* x4_8 = (&data_57724 + (((*x4_4 << x6_2) | (x4_4[1] >> (8 - x6_2))) * 0xc));
                                int32_t x4_9 = x4_8[2];
                                x10_34 = (x4_8[1] + x10_34);
                                if (*x4_8 == 0)
                                {
                                    if (x1_25 <= 1)
                                    {
                                        x4_9 = (x4_9 + *(x3_11 + x13_4));
                                    }
                                    else
                                    {
                                        uint32_t x5_8 = *(x3_11 - 2);
                                        if (x11_11 > 1)
                                        {
                                            x4_9 = (x4_9 + ((*(x3_11 + x13_4) + x5_8) >> 1));
                                        }
                                        else
                                        {
                                            x4_9 = (x4_9 + x5_8);
                                        }
                                    }
                                }
                                int32_t x4_10;
                                if (x4_9 < 0xff)
                                {
                                    x4_10 = x4_9;
                                }
                                else
                                {
                                    x4_10 = 0xff;
                                }
                                x1_25 = (x1_25 + 1);
                                *x3_11 = (x4_10 & !((x4_10 >> 0x1f)));
                                x3_11 = (x3_11 + 1);
                            } while (x8_90 != x1_25);
                            x15_6 = &x15_6[((x8_90 + x2_17) + 1)];
                        }
                        x11_11 = (x11_11 + 1);
                    } while (x11_11 != x9_29);
                    x8_90 = *(arg1 + 0x250);
                    x9_29 = *(arg1 + 0x254);
                    x12_8 = *(arg1 + 0xc);
                }
                x3_1 = *(arg1 + 0x90);
                x0_2 = x8_90;
                x2 = *((arg1 + (((x12_8 + 1) % *(arg1 + 0x358)) << 4)) + 0xe0);
                x1_1 = x9_29;
            }
            if ((x8_3 == 0x31384142 || x8_3 == 0x30313953))
            {
                sub_3b268(x0_2, x1_1, x2, x3_1);
            }
        }
        else
        {
            int32_t x24_2 = *(arg1 + 0x250);
            int32_t x25_3 = *(arg1 + 0x254);
            int64_t s_22 = *(arg1 + 0x90);
            int64_t s_18 = *((arg1 + (*(arg1 + 0xc) << 4)) + 0xe0);
            var_e8 = 0x42ff0000;
            int64_t x28_2 = (x25_3 * x24_2);
            __builtin_memset(&s_15, 0, 0x3c);
            var_a8 = &*s_15[4];
            var_a0 = &var_98;
            var_1f0 = &var_98;
            var_98 = 0;
            int64_t var_90_3 = 0;
            var_150 = 0x242ff0002;
            var_148 = x25_3;
            int32_t var_144_2 = x24_2;
            int64_t s_6 = s_18;
            int64_t s_29 = s_18;
            int128_t s_11;
            __builtin_memset(&s_11, 0, 0x20);
            int32_t* var_110_2 = &var_148;
            int64_t* var_108_2 = &var_100;
            var_100 = 0;
            int64_t var_f8_3 = 0;
            if ((s_18 == 0 && x28_2 != 0))
            {
                goto label_36c04;
            }
            int64_t x20_2 = x24_2;
            int64_t x27_2 = x25_3;
            int64_t x10_12 = (x20_2 << 1);
            int64_t x8_40 = (s_18 + (x10_12 * x27_2));
            var_100 = x10_12;
            int64_t var_f8_4 = 2;
            s_11 = x8_40;
            *s_11[8] = x8_40;
            cv::Mat::updateContinuityFlag();
            var_1b0 = 0x2010000;
            var_1a8 = &var_e8;
            int64_t var_1a0_1 = 0;
            cv::Mat::convertTo(&var_150, &var_1b0, 0.00390625, 0.0);
            int128_t var_120_2;
            int64_t x8_41 = *var_120_2[8];
            if (x8_41 != 0)
            {
                int32_t temp0_5;
                int32_t i_27;
                do
                {
                    temp0_5 = __ldaxr((x8_41 + 0x14));
                    i_27 = __stlxr((temp0_5 - 1), (x8_41 + 0x14));
                } while (i_27 != 0);
                if (temp0_5 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_120_2[8] = 0;
            __builtin_memset(&s_6, 0, 0x20);
            if (*var_150[4] >= 1)
            {
                int64_t i_28 = 0;
                do
                {
                    var_110_2[i_28] = 0;
                    i_28 = (i_28 + 1);
                } while (i_28 < *var_150[4]);
            }
            if (var_108_2 != &var_100)
            {
                cv::fastFree(var_108_2);
            }
            var_1c8 = 0x1010000;
            var_150 = 0x242ff0010;
            var_148 = x25_3;
            int32_t var_144_3 = x24_2;
            int64_t var_1b8_3 = 0;
            int32_t* var_1c0_3 = &var_e8;
            int64_t s_7 = s_22;
            int64_t s_30 = s_22;
            int128_t s_12;
            __builtin_memset(&s_12, 0, 0x20);
            int32_t* var_110_3 = &var_148;
            int64_t* var_108_3 = &var_100;
            var_100 = 0;
            int64_t var_f8_5 = 0;
            if ((x28_2 != 0 && s_22 == 0))
            {
                goto label_36dfc;
            }
            int64_t x8_45 = (x20_2 * 3);
            var_100 = x8_45;
            int64_t var_f8_6 = 3;
            int64_t x8_46 = (s_22 + (x8_45 * x27_2));
            s_12 = x8_46;
            *s_12[8] = x8_46;
            cv::Mat::updateContinuityFlag();
            int64_t* var_1d8_2 = &var_150;
            int64_t var_1d0_2 = 0;
            var_1e0 = 0xc2010000;
            cv::cvtColor(&var_1c8, &var_1e0, 8, 0);
            int128_t var_120_3;
            int64_t x8_47 = *var_120_3[8];
            if (x8_47 != 0)
            {
                int32_t temp0_7;
                int32_t i_29;
                do
                {
                    temp0_7 = __ldaxr((x8_47 + 0x14));
                    i_29 = __stlxr((temp0_7 - 1), (x8_47 + 0x14));
                } while (i_29 != 0);
                if (temp0_7 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_120_3[8] = 0;
            __builtin_memset(&s_7, 0, 0x20);
            if (*var_150[4] >= 1)
            {
                int64_t i_30 = 0;
                do
                {
                    var_110_3[i_30] = 0;
                    i_30 = (i_30 + 1);
                } while (i_30 < *var_150[4]);
            }
            if (var_108_3 != &var_100)
            {
                cv::fastFree(var_108_3);
            }
            int64_t x8_51 = *var_b8[8];
            if (x8_51 != 0)
            {
                int32_t temp0_8;
                int32_t i_31;
                do
                {
                    temp0_8 = __ldaxr((x8_51 + 0x14));
                    i_31 = __stlxr((temp0_8 - 1), (x8_51 + 0x14));
                } while (i_31 != 0);
                if (temp0_8 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_b8[8] = 0;
            __builtin_memset(&s_16, 0, 0x20);
            if (s_15 >= 1)
            {
                int64_t i_32 = 0;
                do
                {
                    *(var_a8 + (i_32 << 2)) = 0;
                    i_32 = (i_32 + 1);
                } while (i_32 < s_15);
            }
            if (var_a0 != var_1f0)
            {
                cv::fastFree(var_a0);
            }
        }
        if ((((((((x8_3 == 0x4745504a || x8_3 == 0x47504a4d) && s_16 == 0) && x8_85 == 0) && (x20_4 & 1) != 0) || (((x8_3 > 0x47455049 && x8_3 <= 0x50313133) && x8_3 != 0x4745504a) && x8_3 != 0x47504a4d)) || (x8_3 > 0x47455049 && x8_3 > 0x50313133)) || x8_3 <= 0x47455049))
        {
            if (*(arg1 + 0xda) == 0)
            {
                x0_20 = nullptr;
            }
            else
            {
                x0_20 = (arg1 + 0x38);
            }
        }
    }
    if (((x10 == 0 && x10_1 == x11_2) || (x10 != 0 && x8_1 == x10)))
    {
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_20;
    }
}

void sub_36e50(int64_t arg1, void* arg2 @ x29, int64_t arg3, char arg4, void* arg5) __noreturn
{
    int64_t x8;
    if ((arg4 & 1) == 0)
    {
        x8 = *(arg2 - 0xa0);
    }
    else
    {
        operator delete(arg5);
        x8 = *(arg2 - 0xa0);
    }
    if ((((arg4 & 1) == 0 && x8 != 0) || ((arg4 & 1) != 0 && x8 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa0) = 0;
    int64_t s;
    __builtin_memset(s, 0, 0x20);
    if (*(arg2 - 0xd4) >= 1)
    {
        int64_t x8_3 = *(arg2 - 0x98);
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xd4));
    }
    void* x0_2 = *(arg2 - 0x90);
    if (x0_2 != arg3)
    {
        cv::fastFree(x0_2);
    }
    sub_1908c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_36e70(int64_t arg1, char arg2, void* arg3) __noreturn
{
    if ((arg2 & 1) == 0)
    {
        sub_1908c(_Unwind_Resume(arg1));
        /* no return */
    }
    operator delete(arg3);
    sub_1908c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_36e74(int64_t arg1, void* arg2 @ x29, char arg3, void* arg4) __noreturn
{
    int64_t x8_1;
    if ((arg3 & 1) == 0)
    {
        x8_1 = *(arg2 - 0xa0);
    }
    else
    {
        operator delete(arg4);
        x8_1 = *(arg2 - 0xa0);
    }
    if ((((arg3 & 1) == 0 && x8_1 != 0) || ((arg3 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa0) = 0;
    __builtin_memset((arg2 - 0xc8), 0, 0x20);
    if (*(arg2 - 0xd4) >= 1)
    {
        int64_t x8_5 = *(arg2 - 0x98);
        int64_t i_1 = 0;
        do
        {
            *(x8_5 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xd4));
    }
    void* x0_2 = *(arg2 - 0x90);
    if (x0_2 != (arg2 - 0x88))
    {
        cv::fastFree(x0_2);
    }
    sub_1908c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_36e78(int64_t arg1, void* arg2 @ x29, int64_t arg3, char arg4, void* arg5) __noreturn
{
    int64_t x8;
    if ((arg4 & 1) == 0)
    {
        x8 = *(arg2 - 0xa0);
    }
    else
    {
        operator delete(arg5);
        x8 = *(arg2 - 0xa0);
    }
    if ((((arg4 & 1) == 0 && x8 != 0) || ((arg4 & 1) != 0 && x8 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa0) = 0;
    int64_t s;
    __builtin_memset(s, 0, 0x20);
    if (*(arg2 - 0xd4) >= 1)
    {
        int64_t x8_3 = *(arg2 - 0x98);
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xd4));
    }
    void* x0_2 = *(arg2 - 0x90);
    if (x0_2 != arg3)
    {
        cv::fastFree(x0_2);
    }
    sub_1908c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_36edc(int64_t arg1, void* arg2 @ x29, int64_t arg3, int64_t arg4, char arg5, void* arg6) __noreturn
{
    int64_t x8;
    if ((arg5 & 1) == 0)
    {
        x8 = *(arg2 - 0xa0);
    }
    else
    {
        operator delete(arg6);
        x8 = *(arg2 - 0xa0);
    }
    if ((((arg5 & 1) == 0 && x8 != 0) || ((arg5 & 1) != 0 && x8 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa0) = 0;
    __builtin_memset(arg3, 0, 0x20);
    if (*(arg2 - 0xd4) >= 1)
    {
        int64_t x8_4 = *(arg2 - 0x98);
        int64_t i_1 = 0;
        do
        {
            *(x8_4 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xd4));
    }
    void* x0_2 = *(arg2 - 0x90);
    if (x0_2 != arg4)
    {
        cv::fastFree(x0_2);
    }
    sub_1908c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_3731c(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

void sub_37398(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

void sub_37428(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

void sub_374ac(void* arg1) __noreturn
{
    sub_1908c(arg1);
    /* no return */
}

int64_t cv::CvCaptureCAM_V4L::getProperty(void* arg1, int32_t arg2)
{
    void* x22;
    void* var_30 = x22;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int128_t v0;
    v0 = 0;
    *v0[8] = 0;
    int128_t s_9;
    __builtin_memset(&s_9, 0, 0xd0);
    s_9 = 1;
    int32_t x0_1;
    uint64_t v0_1;
    x0_1 = ioctl(*(arg1 + 8), 0xc0d05604, &s_9, v0);
    int32_t s_5;
    size_t s_6;
    void var_358;
    void var_350;
    int32_t var_210;
    int64_t s_8;
    void* var_1f8;
    int128_t v8;
    if (x0_1 != 0xffffffff)
    {
        int32_t x8_2;
        if (arg2 <= 0x27)
        {
            x8_2 = 0x980900;
        }
        int64_t s_1;
        size_t s_2;
        switch (arg2)
        {
            case 0:
            {
                v8 = 0.0;
                if (*(arg1 + 0x10) == 0)
                {
                    /* unimplemented  {scvtf d0, d0} */;
                    v8 = ((*(arg1 + 0x418) / 1000.0) + vcvtd_f64_s64((*(arg1 + 0x410) * 0x3e8)));
                }
                break;
            }
            case 3:
            {
                v0_1 = *s_9[8];
                break;
            }
            case 4:
            {
                v0_1 = *s_9[0xc];
                break;
            }
            case 5:
            {
                int128_t s_7;
                __builtin_memset(&s_7, 0, 0xc8);
                var_210 = 1;
                uint64_t v0_2;
                uint64_t v1_1;
                x0_1 = ioctl(*(arg1 + 8), 0xc0cc5615, &var_210, 0);
                if ((x0_1 & 0x80000000) == 0)
                {
                    int32_t var_200;
                    v0_2 = var_200;
                    v1_1 = *s_8[4];
                    v8 = (vcvt_f64_u64(v0_2) / vcvt_f64_u64(v1_1));
                }
                else
                {
                    char* x20_10;
                    if ((*data_57650 & 1) == 0)
                    {
                        x20_10 = &*(data_57650 + 1);
                    }
                    else
                    {
                        x20_10 = *(data_5765a + 6);
                    }
                    s_5 = data_57648;
                    __builtin_memset(&s_6, 0, 0x18);
                    size_t x0_51 = strlen(x20_10);
                    if (x0_51 < -0x10)
                    {
                        goto label_39098;
                    }
                    void* var_360_2;
                    void* x21_9;
                    if (x0_51 >= 0x17)
                    {
                        uint64_t x22_4 = ((x0_51 + 0x10) & 0xfffffffffffffff0);
                        void* x0_78 = operator new(x22_4);
                        x21_9 = x0_78;
                        size_t var_368_3 = x0_51;
                        var_360_2 = x0_78;
                        s_6 = (x22_4 | 1);
                    }
                    else
                    {
                        x21_9 = &*s_6[1];
                        s_6 = (x0_51 << 1);
                    }
                    if ((x0_51 >= 0x17 || (x0_51 < 0x17 && x0_51 != 0)))
                    {
                        memcpy(x21_9, x20_10, x0_51);
                    }
                    *(x21_9 + x0_51) = 0;
                    x0_1 = g3::logLevel(&s_5);
                    int32_t x19_16;
                    if ((x0_1 & 1) != 0)
                    {
                        __builtin_memset(&s_1, 0, 0x18);
                        uint64_t x19_15 = *cv::TAG;
                        size_t s_12 = strlen(x19_15);
                        if (s_12 < -0x10)
                        {
                            goto label_390c8;
                        }
                        void* var_3c0_1;
                        void* x21_18;
                        if (s_12 >= 0x17)
                        {
                            uint64_t x22_5 = ((s_12 + 0x10) & 0xfffffffffffffff0);
                            void* x0_156 = operator new(x22_5);
                            x21_18 = x0_156;
                            s_2 = s_12;
                            var_3c0_1 = x0_156;
                            s_1 = (x22_5 | 1);
                        }
                        else
                        {
                            x21_18 = (&s_1 | 1);
                            s_1 = (s_12 << 1);
                        }
                        if ((s_12 >= 0x17 || (s_12 < 0x17 && s_12 != 0)))
                        {
                            memcpy(x21_18, x19_15, s_12);
                        }
                        *(x21_18 + s_12) = 0;
                        x0_1 = g3::logTag(&s_1);
                        x19_16 = x0_1;
                        if ((s_1 & 1) != 0)
                        {
                            x0_1 = operator delete(var_3c0_1);
                            if ((s_6 & 1) == 0)
                            {
                                goto label_38808;
                            }
                            goto label_381e4;
                        }
                        if ((s_6 & 1) == 0)
                        {
                            goto label_38808;
                        }
                        goto label_381e4;
                    }
                    x19_16 = 0;
                    if ((s_6 & 1) == 0)
                    {
                    label_38808:
                        v8 = -0x4010000000000000;
                        if ((x19_16 & 1) != 0)
                        {
                        label_3883c:
                            LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "VIDEOIO ERROR: V4L: Unable to ge…", 0x2c);
                            goto label_38f90;
                        }
                    }
                    else
                    {
                    label_381e4:
                        x0_1 = operator delete(var_360_2);
                        v8 = -0x4010000000000000;
                        if ((x19_16 & 1) != 0)
                        {
                            goto label_3883c;
                        }
                    }
                }
                break;
            }
            case 6:
            case 9:
            {
                v0_1 = *(arg1 + 0xc8);
                break;
            }
            case 8:
            {
                int32_t x8_14 = *(arg1 + 0x48);
                v8 = vcvt_f64_s64(((((*(arg1 + 0x40) << 3) - 8) & 0xfffffff8) | (((0x43160520 >> (((x8_14 >> 2) & 0x3c) + (0x14 & (x8_14 >> 0x1f)))) & 7) >> 0)));
                break;
            }
            case 0xc:
            {
                x8_2 = 0x980902;
                break;
            }
            case 0xd:
            {
                x8_2 = 0x980903;
                break;
            }
            case 0xe:
            {
                x8_2 = 0x980913;
                break;
            }
            case 0xf:
            {
                x8_2 = 0x9a0901;
                break;
            }
            case 0x10:
            {
                if (*(arg1 + 0xd8) != 0)
                {
                    v8 = 0x3ff0000000000000;
                }
                else
                {
                    v8 = 0.0;
                }
                break;
            }
            case 0x15:
            {
                x8_2 = 0x9a0901;
                break;
            }
            case 0x1c:
            {
                x8_2 = 0x9a090a;
                break;
            }
            case 0x27:
            {
                x8_2 = 0x9a090c;
                break;
            }
        }
        switch (arg2)
        {
            case 3:
            case 4:
            case 6:
            case 9:
            {
                v8 = vcvt_f64_u64(v0_1);
                break;
            }
            case 0xb:
            case 0xf:
            {
                x8_2 = (x8_2 + 1);
                break;
            }
        }
        if (((((((((arg2 == 0xa || arg2 == 0xb) || arg2 == 0xc) || arg2 == 0xd) || arg2 == 0xe) || arg2 == 0xf) || arg2 == 0x15) || arg2 == 0x1c) || arg2 == 0x27))
        {
            int32_t var_380 = x8_2;
            int32_t var_37c_1 = 0;
            double v0_3;
            x0_1 = ioctl(*(arg1 + 8), 0xc008561b, &var_380);
            if (x0_1 != 0xffffffff)
            {
                uint64_t x9_6 = (arg2 - 0xa);
                int64_t x8_22;
                int64_t x9_7;
                if (x9_6 > 0x1d)
                {
                label_37c64:
                    x8_22 = 0;
                    x9_7 = 0xff00000000;
                }
                else
                {
                    x8_22 = 0;
                    x9_7 = 0x100000000;
                    switch (x9_6)
                    {
                        case 0:
                        {
                            x8_22 = *(arg1 + 0x428);
                            x9_7 = (x8_22 & 0xffffffff00000000);
                            break;
                        }
                        case 1:
                        {
                            x8_22 = *(arg1 + 0x430);
                            x9_7 = (x8_22 & 0xffffffff00000000);
                            break;
                        }
                        case 2:
                        {
                            x8_22 = *(arg1 + 0x438);
                            x9_7 = (x8_22 & 0xffffffff00000000);
                            break;
                        }
                        case 3:
                        {
                            x8_22 = *(arg1 + 0x440);
                            x9_7 = (x8_22 & 0xffffffff00000000);
                            break;
                        }
                        case 4:
                        {
                            x8_22 = *(arg1 + 0x448);
                            x9_7 = (x8_22 & 0xffffffff00000000);
                            break;
                        }
                        case 5:
                        {
                            x8_22 = *(arg1 + 0x450);
                            x9_7 = (x8_22 & 0xffffffff00000000);
                            break;
                        }
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 0xa:
                        case 0xc:
                        case 0xd:
                        case 0xe:
                        case 0xf:
                        case 0x10:
                        case 0x11:
                        case 0x13:
                        case 0x14:
                        case 0x15:
                        case 0x16:
                        case 0x17:
                        case 0x18:
                        case 0x19:
                        case 0x1a:
                        case 0x1b:
                        case 0x1c:
                        {
                            goto label_37c64;
                        }
                        case 0xb:
                        {
                            x8_22 = 0;
                            x9_7 = 0x400000000;
                            break;
                        }
                        case 0x12:
                        {
                            x8_22 = *(arg1 + 0x420);
                            x9_7 = (x8_22 & 0xffffffff00000000);
                            break;
                        }
                    }
                }
                v0_3 = var_37c_1;
                double temp0_6 = vcvt_f64_s64(x8_22);
                /* unimplemented  {sxtl v0.2d, v0.2s} */;
                /* unimplemented  {scvtf d0, d0} */;
                v8 = ((v0_3 - temp0_6) / vcvt_f64_s64(((x9_7 >> 0x20) - x8_22)));
            }
            else
            {
                char* x21_5;
                if ((*data_57650 & 1) == 0)
                {
                    x21_5 = &*(data_57650 + 1);
                }
                else
                {
                    x21_5 = *(data_5765a + 6);
                }
                var_210 = data_57648;
                __builtin_memset(&s_8, 0, 0x18);
                size_t x0_25 = strlen(x21_5);
                if (x0_25 < -0x10)
                {
                    goto label_390a8;
                }
                if (x0_25 >= 0x17)
                {
                    uint64_t x23_1 = ((x0_25 + 0x10) & 0xfffffffffffffff0);
                    void* x0_27 = operator new(x23_1);
                    x22 = x0_27;
                    size_t var_200_2 = x0_25;
                    var_1f8 = x0_27;
                    s_8 = (x23_1 | 1);
                }
                else
                {
                    x22 = &*s_8[1];
                    s_8 = (x0_25 << 1);
                }
                if ((x0_25 >= 0x17 || (x0_25 < 0x17 && x0_25 != 0)))
                {
                    memcpy(x22, x21_5, x0_25);
                }
                *(x22 + x0_25) = 0;
                int32_t x20_6;
                if ((g3::logLevel(&var_210) & 1) == 0)
                {
                    x20_6 = 0;
                    if ((s_8 & 1) != 0)
                    {
                    label_37ad0:
                        operator delete(var_1f8);
                        if ((x20_6 & 1) == 0)
                        {
                            goto label_37b7c;
                        }
                        goto label_37b5c;
                    }
                }
                else
                {
                    int64_t s_4;
                    __builtin_memset(&s_4, 0, 0x18);
                    uint64_t x20_5 = *cv::TAG;
                    size_t x0_32 = strlen(x20_5);
                    if (x0_32 < -0x10)
                    {
                        goto label_390b0;
                    }
                    void* var_388_1;
                    if (x0_32 >= 0x17)
                    {
                        uint64_t x23_2 = ((x0_32 + 0x10) & 0xfffffffffffffff0);
                        void* x0_35 = operator new(x23_2);
                        x22 = x0_35;
                        size_t var_390_1 = x0_32;
                        var_388_1 = x0_35;
                        s_4 = (x23_2 | 1);
                    }
                    else
                    {
                        x22 = (&s_4 | 1);
                        s_4 = (x0_32 << 1);
                    }
                    if ((x0_32 >= 0x17 || (x0_32 < 0x17 && x0_32 != 0)))
                    {
                        memcpy(x22, x20_5, x0_32);
                    }
                    *(x22 + x0_32) = 0;
                    x20_6 = g3::logTag(&s_4);
                    if ((s_4 & 1) != 0)
                    {
                        operator delete(var_388_1);
                        if ((s_8 & 1) != 0)
                        {
                            goto label_37ad0;
                        }
                    }
                    else if ((s_8 & 1) != 0)
                    {
                        goto label_37ad0;
                    }
                }
                if ((x20_6 & 1) == 0)
                {
                    goto label_37b7c;
                }
            label_37b5c:
                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "VIDEOIO ERROR: V4L2: ", 0x15);
                LogCapture::~LogCapture();
            label_37b7c:
                uint64_t x8_33 = (arg2 - 0xa);
                int64_t s_3;
                if (x8_33 <= 0x1d)
                {
                    switch (x8_33)
                    {
                        case 0:
                        {
                            char* x20_7;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_7 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_7 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_42 = strlen(x20_7);
                            if (x0_42 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_1;
                            void* x21_7;
                            if (x0_42 >= 0x17)
                            {
                                x22 = ((x0_42 + 0x10) & 0xfffffffffffffff0);
                                void* x0_98 = operator new(x22);
                                x21_7 = x0_98;
                                size_t var_368_6 = x0_42;
                                var_360_1 = x0_98;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_7 = &*s_6[1];
                                s_6 = (x0_42 << 1);
                            }
                            if ((x0_42 >= 0x17 || (x0_42 < 0x17 && x0_42 != 0)))
                            {
                                memcpy(x21_7, x20_7, x0_42);
                            }
                            *(x21_7 + x0_42) = 0;
                            int32_t x0_101 = g3::logLevel(&s_5);
                            int32_t x19_28;
                            if ((x0_101 & 1) == 0)
                            {
                                x19_28 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_38704:
                                    operator delete(var_360_1);
                                    if ((x19_28 & 1) != 0)
                                    {
                                        goto label_38a24;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_19 = *cv::TAG;
                                size_t x0_103 = strlen(x19_19);
                                if (x0_103 < -0x10)
                                {
                                    goto label_390e0;
                                }
                                void* var_3a0_3;
                                void* x21_21;
                                if (x0_103 >= 0x17)
                                {
                                    x22 = ((x0_103 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_177 = operator new(x22);
                                    x21_21 = x0_177;
                                    size_t var_3a8_3 = x0_103;
                                    var_3a0_3 = x0_177;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_21 = (&s_3 | 1);
                                    s_3 = (x0_103 << 1);
                                }
                                if ((x0_103 >= 0x17 || (x0_103 < 0x17 && x0_103 != 0)))
                                {
                                    memcpy(x21_21, x19_19, x0_103);
                                }
                                *(x21_21 + x0_103) = 0;
                                x19_28 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_3);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_38704;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_38704;
                                }
                            }
                            if (((((x0_101 & 1) == 0 && (s_6 & 1) == 0) || (x0_101 & 1) != 0) && (x19_28 & 1) != 0))
                            {
                            label_38a24:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "Brightness", 0xa);
                            label_38de8:
                                LogCapture::~LogCapture();
                            }
                            break;
                        }
                        case 1:
                        {
                            char* x20_13;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_13 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_13 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_57 = strlen(x20_13);
                            if (x0_57 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_5;
                            void* x21_12;
                            if (x0_57 >= 0x17)
                            {
                                x22 = ((x0_57 + 0x10) & 0xfffffffffffffff0);
                                void* x0_105 = operator new(x22);
                                x21_12 = x0_105;
                                size_t var_368_7 = x0_57;
                                var_360_5 = x0_105;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_12 = &*s_6[1];
                                s_6 = (x0_57 << 1);
                            }
                            if ((x0_57 >= 0x17 || (x0_57 < 0x17 && x0_57 != 0)))
                            {
                                memcpy(x21_12, x20_13, x0_57);
                            }
                            *(x21_12 + x0_57) = 0;
                            int32_t x0_108 = g3::logLevel(&s_5);
                            int32_t x19_29;
                            if ((x0_108 & 1) == 0)
                            {
                                x19_29 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_38720:
                                    operator delete(var_360_5);
                                    if ((x19_29 & 1) != 0)
                                    {
                                        goto label_38ac0;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_20 = *cv::TAG;
                                size_t x0_110 = strlen(x19_20);
                                if (x0_110 < -0x10)
                                {
                                    goto label_390e8;
                                }
                                void* var_3a0_4;
                                void* x21_22;
                                if (x0_110 >= 0x17)
                                {
                                    x22 = ((x0_110 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_184 = operator new(x22);
                                    x21_22 = x0_184;
                                    size_t var_3a8_4 = x0_110;
                                    var_3a0_4 = x0_184;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_22 = (&s_3 | 1);
                                    s_3 = (x0_110 << 1);
                                }
                                if ((x0_110 >= 0x17 || (x0_110 < 0x17 && x0_110 != 0)))
                                {
                                    memcpy(x21_22, x19_20, x0_110);
                                }
                                *(x21_22 + x0_110) = 0;
                                x19_29 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_4);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_38720;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_38720;
                                }
                            }
                            if (((((x0_108 & 1) == 0 && (s_6 & 1) == 0) || (x0_108 & 1) != 0) && (x19_29 & 1) != 0))
                            {
                            label_38ac0:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "Contrast", 8);
                                goto label_38de8;
                            }
                            break;
                        }
                        case 2:
                        {
                            char* x20_11;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_11 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_11 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_53 = strlen(x20_11);
                            if (x0_53 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_3;
                            void* x21_10;
                            if (x0_53 >= 0x17)
                            {
                                x22 = ((x0_53 + 0x10) & 0xfffffffffffffff0);
                                void* x0_84 = operator new(x22);
                                x21_10 = x0_84;
                                size_t var_368_4 = x0_53;
                                var_360_3 = x0_84;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_10 = &*s_6[1];
                                s_6 = (x0_53 << 1);
                            }
                            if ((x0_53 >= 0x17 || (x0_53 < 0x17 && x0_53 != 0)))
                            {
                                memcpy(x21_10, x20_11, x0_53);
                            }
                            *(x21_10 + x0_53) = 0;
                            int32_t x0_87 = g3::logLevel(&s_5);
                            int32_t x19_26;
                            if ((x0_87 & 1) == 0)
                            {
                                x19_26 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_386cc:
                                    operator delete(var_360_3);
                                    if ((x19_26 & 1) != 0)
                                    {
                                        goto label_388ec;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_17 = *cv::TAG;
                                size_t x0_89 = strlen(x19_17);
                                if (x0_89 < -0x10)
                                {
                                    goto label_390d0;
                                }
                                void* var_3a0_1;
                                void* x21_19;
                                if (x0_89 >= 0x17)
                                {
                                    x22 = ((x0_89 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_163 = operator new(x22);
                                    x21_19 = x0_163;
                                    size_t var_3a8_1 = x0_89;
                                    var_3a0_1 = x0_163;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_19 = (&s_3 | 1);
                                    s_3 = (x0_89 << 1);
                                }
                                if ((x0_89 >= 0x17 || (x0_89 < 0x17 && x0_89 != 0)))
                                {
                                    memcpy(x21_19, x19_17, x0_89);
                                }
                                *(x21_19 + x0_89) = 0;
                                x19_26 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_1);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_386cc;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_386cc;
                                }
                            }
                            if (((((x0_87 & 1) == 0 && (s_6 & 1) == 0) || (x0_87 & 1) != 0) && (x19_26 & 1) != 0))
                            {
                            label_388ec:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "Saturation", 0xa);
                                goto label_38de8;
                            }
                            break;
                        }
                        case 3:
                        {
                            char* x20_16;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_16 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_16 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_63 = strlen(x20_16);
                            if (x0_63 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_8;
                            void* x21_15;
                            if (x0_63 >= 0x17)
                            {
                                x22 = ((x0_63 + 0x10) & 0xfffffffffffffff0);
                                void* x0_126 = operator new(x22);
                                x21_15 = x0_126;
                                size_t var_368_10 = x0_63;
                                var_360_8 = x0_126;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_15 = &*s_6[1];
                                s_6 = (x0_63 << 1);
                            }
                            if ((x0_63 >= 0x17 || (x0_63 < 0x17 && x0_63 != 0)))
                            {
                                memcpy(x21_15, x20_16, x0_63);
                            }
                            *(x21_15 + x0_63) = 0;
                            int32_t x0_129 = g3::logLevel(&s_5);
                            int32_t x19_32;
                            if ((x0_129 & 1) == 0)
                            {
                                x19_32 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_38774:
                                    operator delete(var_360_8);
                                    if ((x19_32 & 1) != 0)
                                    {
                                        goto label_38c94;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_23 = *cv::TAG;
                                size_t x0_131 = strlen(x19_23);
                                if (x0_131 < -0x10)
                                {
                                    goto label_39100;
                                }
                                void* var_3a0_7;
                                void* x21_25;
                                if (x0_131 >= 0x17)
                                {
                                    x22 = ((x0_131 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_205 = operator new(x22);
                                    x21_25 = x0_205;
                                    size_t var_3a8_7 = x0_131;
                                    var_3a0_7 = x0_205;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_25 = (&s_3 | 1);
                                    s_3 = (x0_131 << 1);
                                }
                                if ((x0_131 >= 0x17 || (x0_131 < 0x17 && x0_131 != 0)))
                                {
                                    memcpy(x21_25, x19_23, x0_131);
                                }
                                *(x21_25 + x0_131) = 0;
                                x19_32 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_7);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_38774;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_38774;
                                }
                            }
                            if (((((x0_129 & 1) == 0 && (s_6 & 1) == 0) || (x0_129 & 1) != 0) && (x19_32 & 1) != 0))
                            {
                            label_38c94:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, &data_3e758, 3);
                                goto label_38de8;
                            }
                            break;
                        }
                        case 4:
                        {
                            char* x20_17;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_17 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_17 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_65 = strlen(x20_17);
                            if (x0_65 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_9;
                            void* x21_16;
                            if (x0_65 >= 0x17)
                            {
                                x22 = ((x0_65 + 0x10) & 0xfffffffffffffff0);
                                void* x0_133 = operator new(x22);
                                x21_16 = x0_133;
                                size_t var_368_11 = x0_65;
                                var_360_9 = x0_133;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_16 = &*s_6[1];
                                s_6 = (x0_65 << 1);
                            }
                            if ((x0_65 >= 0x17 || (x0_65 < 0x17 && x0_65 != 0)))
                            {
                                memcpy(x21_16, x20_17, x0_65);
                            }
                            *(x21_16 + x0_65) = 0;
                            int32_t x0_136 = g3::logLevel(&s_5);
                            int32_t x19_33;
                            if ((x0_136 & 1) == 0)
                            {
                                x19_33 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_38790:
                                    operator delete(var_360_9);
                                    if ((x19_33 & 1) != 0)
                                    {
                                        goto label_38d30;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_24 = *cv::TAG;
                                size_t x0_138 = strlen(x19_24);
                                if (x0_138 < -0x10)
                                {
                                    goto label_39108;
                                }
                                void* var_3a0_8;
                                void* x21_26;
                                if (x0_138 >= 0x17)
                                {
                                    x22 = ((x0_138 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_212 = operator new(x22);
                                    x21_26 = x0_212;
                                    size_t var_3a8_8 = x0_138;
                                    var_3a0_8 = x0_212;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_26 = (&s_3 | 1);
                                    s_3 = (x0_138 << 1);
                                }
                                if ((x0_138 >= 0x17 || (x0_138 < 0x17 && x0_138 != 0)))
                                {
                                    memcpy(x21_26, x19_24, x0_138);
                                }
                                *(x21_26 + x0_138) = 0;
                                x19_33 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_8);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_38790;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_38790;
                                }
                            }
                            if (((((x0_136 & 1) == 0 && (s_6 & 1) == 0) || (x0_136 & 1) != 0) && (x19_33 & 1) != 0))
                            {
                            label_38d30:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "Gain", 4);
                                goto label_38de8;
                            }
                            break;
                        }
                        case 5:
                        {
                            char* x20_12;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_12 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_12 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_55 = strlen(x20_12);
                            if (x0_55 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_4;
                            void* x21_11;
                            if (x0_55 >= 0x17)
                            {
                                x22 = ((x0_55 + 0x10) & 0xfffffffffffffff0);
                                void* x0_91 = operator new(x22);
                                x21_11 = x0_91;
                                size_t var_368_5 = x0_55;
                                var_360_4 = x0_91;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_11 = &*s_6[1];
                                s_6 = (x0_55 << 1);
                            }
                            if ((x0_55 >= 0x17 || (x0_55 < 0x17 && x0_55 != 0)))
                            {
                                memcpy(x21_11, x20_12, x0_55);
                            }
                            *(x21_11 + x0_55) = 0;
                            int32_t x0_94 = g3::logLevel(&s_5);
                            int32_t x19_27;
                            if ((x0_94 & 1) == 0)
                            {
                                x19_27 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_386e8:
                                    operator delete(var_360_4);
                                    if ((x19_27 & 1) != 0)
                                    {
                                        goto label_38988;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_18 = *cv::TAG;
                                size_t x0_96 = strlen(x19_18);
                                if (x0_96 < -0x10)
                                {
                                    goto label_390d8;
                                }
                                void* var_3a0_2;
                                void* x21_20;
                                if (x0_96 >= 0x17)
                                {
                                    x22 = ((x0_96 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_170 = operator new(x22);
                                    x21_20 = x0_170;
                                    size_t var_3a8_2 = x0_96;
                                    var_3a0_2 = x0_170;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_20 = (&s_3 | 1);
                                    s_3 = (x0_96 << 1);
                                }
                                if ((x0_96 >= 0x17 || (x0_96 < 0x17 && x0_96 != 0)))
                                {
                                    memcpy(x21_20, x19_18, x0_96);
                                }
                                *(x21_20 + x0_96) = 0;
                                x19_27 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_2);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_386e8;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_386e8;
                                }
                            }
                            if (((((x0_94 & 1) == 0 && (s_6 & 1) == 0) || (x0_94 & 1) != 0) && (x19_27 & 1) != 0))
                            {
                            label_38988:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "Exposure", 8);
                                goto label_38de8;
                            }
                            break;
                        }
                        case 0xb:
                        {
                            char* x20_14;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_14 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_14 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_59 = strlen(x20_14);
                            if (x0_59 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_6;
                            void* x21_13;
                            if (x0_59 >= 0x17)
                            {
                                x22 = ((x0_59 + 0x10) & 0xfffffffffffffff0);
                                void* x0_112 = operator new(x22);
                                x21_13 = x0_112;
                                size_t var_368_8 = x0_59;
                                var_360_6 = x0_112;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_13 = &*s_6[1];
                                s_6 = (x0_59 << 1);
                            }
                            if ((x0_59 >= 0x17 || (x0_59 < 0x17 && x0_59 != 0)))
                            {
                                memcpy(x21_13, x20_14, x0_59);
                            }
                            *(x21_13 + x0_59) = 0;
                            int32_t x0_115 = g3::logLevel(&s_5);
                            int32_t x19_30;
                            if ((x0_115 & 1) == 0)
                            {
                                x19_30 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_3873c:
                                    operator delete(var_360_6);
                                    if ((x19_30 & 1) != 0)
                                    {
                                        goto label_38b5c;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_21 = *cv::TAG;
                                size_t x0_117 = strlen(x19_21);
                                if (x0_117 < -0x10)
                                {
                                    goto label_390f0;
                                }
                                void* var_3a0_5;
                                void* x21_23;
                                if (x0_117 >= 0x17)
                                {
                                    x22 = ((x0_117 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_191 = operator new(x22);
                                    x21_23 = x0_191;
                                    size_t var_3a8_5 = x0_117;
                                    var_3a0_5 = x0_191;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_23 = (&s_3 | 1);
                                    s_3 = (x0_117 << 1);
                                }
                                if ((x0_117 >= 0x17 || (x0_117 < 0x17 && x0_117 != 0)))
                                {
                                    memcpy(x21_23, x19_21, x0_117);
                                }
                                *(x21_23 + x0_117) = 0;
                                x19_30 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_5);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_3873c;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_3873c;
                                }
                            }
                            if (((((x0_115 & 1) == 0 && (s_6 & 1) == 0) || (x0_115 & 1) != 0) && (x19_30 & 1) != 0))
                            {
                            label_38b5c:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "Auto Exposure", 0xd);
                                goto label_38de8;
                            }
                            break;
                        }
                        case 0x12:
                        {
                            char* x20_15;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_15 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_15 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_61 = strlen(x20_15);
                            if (x0_61 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_7;
                            void* x21_14;
                            if (x0_61 >= 0x17)
                            {
                                x22 = ((x0_61 + 0x10) & 0xfffffffffffffff0);
                                void* x0_119 = operator new(x22);
                                x21_14 = x0_119;
                                size_t var_368_9 = x0_61;
                                var_360_7 = x0_119;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_14 = &*s_6[1];
                                s_6 = (x0_61 << 1);
                            }
                            if ((x0_61 >= 0x17 || (x0_61 < 0x17 && x0_61 != 0)))
                            {
                                memcpy(x21_14, x20_15, x0_61);
                            }
                            *(x21_14 + x0_61) = 0;
                            int32_t x0_122 = g3::logLevel(&s_5);
                            int32_t x19_31;
                            if ((x0_122 & 1) == 0)
                            {
                                x19_31 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_38758:
                                    operator delete(var_360_7);
                                    if ((x19_31 & 1) != 0)
                                    {
                                        goto label_38bf8;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_22 = *cv::TAG;
                                size_t x0_124 = strlen(x19_22);
                                if (x0_124 < -0x10)
                                {
                                    goto label_390f8;
                                }
                                void* var_3a0_6;
                                void* x21_24;
                                if (x0_124 >= 0x17)
                                {
                                    x22 = ((x0_124 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_198 = operator new(x22);
                                    x21_24 = x0_198;
                                    size_t var_3a8_6 = x0_124;
                                    var_3a0_6 = x0_198;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_24 = (&s_3 | 1);
                                    s_3 = (x0_124 << 1);
                                }
                                if ((x0_124 >= 0x17 || (x0_124 < 0x17 && x0_124 != 0)))
                                {
                                    memcpy(x21_24, x19_22, x0_124);
                                }
                                *(x21_24 + x0_124) = 0;
                                x19_31 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_6);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_38758;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_38758;
                                }
                            }
                            if (((((x0_122 & 1) == 0 && (s_6 & 1) == 0) || (x0_122 & 1) != 0) && (x19_31 & 1) != 0))
                            {
                            label_38bf8:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "Focus", 5);
                                goto label_38de8;
                            }
                            break;
                        }
                        case 0x1d:
                        {
                            char* x20_18;
                            if ((*data_57650 & 1) == 0)
                            {
                                x20_18 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x20_18 = *(data_5765a + 6);
                            }
                            s_5 = data_57648;
                            __builtin_memset(&s_6, 0, 0x18);
                            size_t x0_67 = strlen(x20_18);
                            if (x0_67 < -0x10)
                            {
                                goto label_39098;
                            }
                            void* var_360_10;
                            void* x21_17;
                            if (x0_67 >= 0x17)
                            {
                                x22 = ((x0_67 + 0x10) & 0xfffffffffffffff0);
                                void* x0_140 = operator new(x22);
                                x21_17 = x0_140;
                                size_t var_368_12 = x0_67;
                                var_360_10 = x0_140;
                                s_6 = (x22 | 1);
                            }
                            else
                            {
                                x21_17 = &*s_6[1];
                                s_6 = (x0_67 << 1);
                            }
                            if ((x0_67 >= 0x17 || (x0_67 < 0x17 && x0_67 != 0)))
                            {
                                memcpy(x21_17, x20_18, x0_67);
                            }
                            *(x21_17 + x0_67) = 0;
                            int32_t x0_143 = g3::logLevel(&s_5);
                            int32_t x19_34;
                            if ((x0_143 & 1) == 0)
                            {
                                x19_34 = 0;
                                if ((s_6 & 1) != 0)
                                {
                                label_387ac:
                                    operator delete(var_360_10);
                                    if ((x19_34 & 1) != 0)
                                    {
                                        goto label_38dcc;
                                    }
                                }
                            }
                            else
                            {
                                __builtin_memset(&s_3, 0, 0x18);
                                uint64_t x19_25 = *cv::TAG;
                                size_t x0_145 = strlen(x19_25);
                                if (x0_145 < -0x10)
                                {
                                    goto label_39110;
                                }
                                void* var_3a0_9;
                                void* x21_27;
                                if (x0_145 >= 0x17)
                                {
                                    x22 = ((x0_145 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_219 = operator new(x22);
                                    x21_27 = x0_219;
                                    size_t var_3a8_9 = x0_145;
                                    var_3a0_9 = x0_219;
                                    s_3 = (x22 | 1);
                                }
                                else
                                {
                                    x21_27 = (&s_3 | 1);
                                    s_3 = (x0_145 << 1);
                                }
                                if ((x0_145 >= 0x17 || (x0_145 < 0x17 && x0_145 != 0)))
                                {
                                    memcpy(x21_27, x19_25, x0_145);
                                }
                                *(x21_27 + x0_145) = 0;
                                x19_34 = g3::logTag(&s_3);
                                if ((s_3 & 1) != 0)
                                {
                                    operator delete(var_3a0_9);
                                    if ((s_6 & 1) != 0)
                                    {
                                        goto label_387ac;
                                    }
                                }
                                else if ((s_6 & 1) != 0)
                                {
                                    goto label_387ac;
                                }
                            }
                            if (((((x0_143 & 1) == 0 && (s_6 & 1) == 0) || (x0_143 & 1) != 0) && (x19_34 & 1) != 0))
                            {
                            label_38dcc:
                                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "Autofocus", 9);
                                goto label_38de8;
                            }
                            break;
                        }
                    }
                }
                char* x20_29;
                if ((*data_57650 & 1) != 0)
                {
                    x20_29 = *(data_5765a + 6);
                    goto label_38e10;
                }
                x20_29 = &*(data_57650 + 1);
            label_38e10:
                s_1 = data_57648;
                __builtin_memset(&s_2, 0, 0x18);
                size_t x0_226 = strlen(x20_29);
                if (x0_226 < -0x10)
                {
                    goto label_39098;
                }
                void* var_3b8_1;
                void* x21_28;
                if (x0_226 >= 0x17)
                {
                    uint64_t x22_6 = ((x0_226 + 0x10) & 0xfffffffffffffff0);
                    void* x0_228 = operator new(x22_6);
                    x21_28 = x0_228;
                    size_t var_3c0_2 = x0_226;
                    var_3b8_1 = x0_228;
                    s_2 = (x22_6 | 1);
                }
                else
                {
                    x21_28 = &*s_2[1];
                    s_2 = (x0_226 << 1);
                }
                if ((x0_226 >= 0x17 || (x0_226 < 0x17 && x0_226 != 0)))
                {
                    memcpy(x21_28, x20_29, x0_226);
                }
                *(x21_28 + x0_226) = 0;
                x0_1 = g3::logLevel(&s_1);
                int32_t x19_37;
                if ((x0_1 & 1) != 0)
                {
                    int64_t s;
                    __builtin_memset(&s, 0, 0x18);
                    uint64_t x19_36 = *cv::TAG;
                    size_t x0_232 = strlen(x19_36);
                    if (x0_232 < -0x10)
                    {
                        goto label_390b8;
                    }
                    void* var_3d8_1;
                    void* x21_29;
                    if (x0_232 >= 0x17)
                    {
                        uint64_t x22_7 = ((x0_232 + 0x10) & 0xfffffffffffffff0);
                        void* x0_235 = operator new(x22_7);
                        x21_29 = x0_235;
                        size_t var_3e0_1 = x0_232;
                        var_3d8_1 = x0_235;
                        s = (x22_7 | 1);
                    }
                    else
                    {
                        x21_29 = (&s | 1);
                        s = (x0_232 << 1);
                    }
                    if ((x0_232 >= 0x17 || (x0_232 < 0x17 && x0_232 != 0)))
                    {
                        memcpy(x21_29, x19_36, x0_232);
                    }
                    *(x21_29 + x0_232) = 0;
                    x0_1 = g3::logTag(&s);
                    x19_37 = x0_1;
                    if ((s & 1) != 0)
                    {
                        x0_1 = operator delete(var_3d8_1);
                        if ((s_2 & 1) == 0)
                        {
                            goto label_38f40;
                        }
                        goto label_38ee0;
                    }
                    if ((s_2 & 1) == 0)
                    {
                        goto label_38f40;
                    }
                    goto label_38ee0;
                }
                x19_37 = 0;
                if ((s_2 & 1) == 0)
                {
                label_38f40:
                    v8 = -0x4010000000000000;
                    if ((x19_37 & 1) != 0)
                    {
                    label_38f74:
                        LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, " is not supported by your device", 0x20);
                        goto label_38f90;
                    }
                }
                else
                {
                label_38ee0:
                    x0_1 = operator delete(var_3b8_1);
                    v8 = -0x4010000000000000;
                    if ((x19_37 & 1) != 0)
                    {
                        goto label_38f74;
                    }
                }
            }
        }
        if ((((((((((((((((((((((((arg2 > 0x27 || arg2 == 1) || arg2 == 2) || arg2 == 7) || arg2 == 0x11) || arg2 == 0x12) || arg2 == 0x13) || arg2 == 0x14) || arg2 == 0x16) || arg2 == 0x17) || arg2 == 0x18) || arg2 == 0x19) || arg2 == 0x1a) || arg2 == 0x1b) || arg2 == 0x1d) || arg2 == 0x1e) || arg2 == 0x1f) || arg2 == 0x20) || arg2 == 0x21) || arg2 == 0x22) || arg2 == 0x23) || arg2 == 0x24) || arg2 == 0x25) || arg2 == 0x26))
        {
            char* x21_4;
            if ((*data_57650 & 1) != 0)
            {
                x21_4 = *(data_5765a + 6);
                goto label_378c8;
            }
            x21_4 = &*(data_57650 + 1);
        label_378c8:
            var_210 = data_57648;
            __builtin_memset(&s_8, 0, 0x18);
            size_t x0_22 = strlen(x21_4);
            if (x0_22 < -0x10)
            {
                goto label_390a8;
            }
            void* x22_2;
            if (x0_22 >= 0x17)
            {
                uint64_t x23_3 = ((x0_22 + 0x10) & 0xfffffffffffffff0);
                void* x0_45 = operator new(x23_3);
                x22_2 = x0_45;
                size_t var_200_3 = x0_22;
                var_1f8 = x0_45;
                s_8 = (x23_3 | 1);
            }
            else
            {
                x22_2 = &*s_8[1];
                s_8 = (x0_22 << 1);
            }
            if ((x0_22 >= 0x17 || (x0_22 < 0x17 && x0_22 != 0)))
            {
                memcpy(x22_2, x21_4, x0_22);
            }
            *(x22_2 + x0_22) = 0;
            x0_1 = g3::logLevel(&var_210);
            int32_t x20_9;
            if ((x0_1 & 1) != 0)
            {
                __builtin_memset(&s_5, 0, 0x18);
                uint64_t x20_8 = *cv::TAG;
                size_t s_11 = strlen(x20_8);
                if (s_11 < -0x10)
                {
                    goto label_390c0;
                }
                void* var_368_2;
                void* x22_3;
                if (s_11 >= 0x17)
                {
                    uint64_t x23_4 = ((s_11 + 0x10) & 0xfffffffffffffff0);
                    void* x0_69 = operator new(x23_4);
                    x22_3 = x0_69;
                    s_6 = s_11;
                    var_368_2 = x0_69;
                    s_5 = (x23_4 | 1);
                }
                else
                {
                    x22_3 = (&s_5 | 1);
                    s_5 = (s_11 << 1);
                }
                if ((s_11 >= 0x17 || (s_11 < 0x17 && s_11 != 0)))
                {
                    memcpy(x22_3, x20_8, s_11);
                }
                *(x22_3 + s_11) = 0;
                x0_1 = g3::logTag(&s_5);
                x20_9 = x0_1;
                if ((s_5 & 1) != 0)
                {
                    x0_1 = operator delete(var_368_2);
                    if ((s_8 & 1) == 0)
                    {
                        goto label_380d0;
                    }
                    goto label_37d2c;
                }
                if ((s_8 & 1) == 0)
                {
                    goto label_380d0;
                }
                goto label_37d2c;
            }
            x20_9 = 0;
            if ((s_8 & 1) == 0)
            {
            label_380d0:
                v8 = -0x4010000000000000;
                if ((x20_9 & 1) != 0)
                {
                label_38104:
                    LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "VIDEOIO ERROR: V4L2: getting pro…", 0x27)), " is not supported", 0x11);
                    goto label_38f90;
                }
            }
            else
            {
            label_37d2c:
                x0_1 = operator delete(var_1f8);
                v8 = -0x4010000000000000;
                if ((x20_9 & 1) != 0)
                {
                    goto label_38104;
                }
            }
        }
    }
    else
    {
        char* x20_1;
        if ((*data_57650 & 1) == 0)
        {
            x20_1 = &*(data_57650 + 1);
        }
        else
        {
            x20_1 = *(data_5765a + 6);
        }
        var_210 = data_57648;
        __builtin_memset(&s_8, 0, 0x18);
        size_t x0_3 = strlen(x20_1);
        if (x0_3 < -0x10)
        {
        label_39098:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390a0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390a8:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390b0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390b8:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390c0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390c8:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390d0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390d8:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390e0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390e8:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390f0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_390f8:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_39100:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_39108:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_39110:
            int64_t x0_252 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            int64_t x0_254 = _Unwind_Resume(x0_252);
            if ((s_8 & 1) != 0)
            {
                operator delete(var_1f8);
            }
            uint64_t x0_257;
            int32_t x1_44;
            double v0_5;
            x0_257 = _Unwind_Resume(x0_254);
            /* tailcall */
            return cv::CvCaptureCAM_V4L::setProperty(x0_257, x1_44, v0_5);
        }
        void* x21_2;
        if (x0_3 >= 0x17)
        {
            x22 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
            void* x0_5 = operator new(x22);
            x21_2 = x0_5;
            size_t var_200_1 = x0_3;
            var_1f8 = x0_5;
            s_8 = (x22 | 1);
        }
        else
        {
            x21_2 = &*s_8[1];
            s_8 = (x0_3 << 1);
        }
        if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
        {
            memcpy(x21_2, x20_1, x0_3);
        }
        *(x21_2 + x0_3) = 0;
        x0_1 = g3::logLevel(&var_210);
        int32_t x19_3;
        if ((x0_1 & 1) != 0)
        {
            __builtin_memset(&s_5, 0, 0x18);
            char* x19_2 = *cv::TAG;
            size_t s_10 = strlen(x19_2);
            if (s_10 < -0x10)
            {
                goto label_390a0;
            }
            void* var_368_1;
            void* x21_3;
            if (s_10 >= 0x17)
            {
                uint64_t x22_1 = ((s_10 + 0x10) & 0xfffffffffffffff0);
                void* x0_11 = operator new(x22_1);
                x21_3 = x0_11;
                s_6 = s_10;
                var_368_1 = x0_11;
                s_5 = (x22_1 | 1);
            }
            else
            {
                x21_3 = (&s_5 | 1);
                s_5 = (s_10 << 1);
            }
            if ((s_10 >= 0x17 || (s_10 < 0x17 && s_10 != 0)))
            {
                memcpy(x21_3, x19_2, s_10);
            }
            *(x21_3 + s_10) = 0;
            x0_1 = g3::logTag(&s_5);
            x19_3 = x0_1;
            if ((s_5 & 1) != 0)
            {
                x0_1 = operator delete(var_368_1);
                if ((s_8 & 1) == 0)
                {
                    goto label_37740;
                }
                goto label_376e0;
            }
            if ((s_8 & 1) == 0)
            {
                goto label_37740;
            }
            goto label_376e0;
        }
        x19_3 = 0;
        if ((s_8 & 1) == 0)
        {
        label_37740:
            v8 = -0x4010000000000000;
            if ((x19_3 & 1) != 0)
            {
            label_37774:
                LogCapture::LogCapture(&var_358, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                int32_t x0_16 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_350, "VIDIOC_G_FMT errno ", 0x13);
                *__errno();
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_16);
            label_38f90:
                x0_1 = LogCapture::~LogCapture();
            }
        }
        else
        {
        label_376e0:
            x0_1 = operator delete(var_1f8);
            v8 = -0x4010000000000000;
            if ((x19_3 & 1) != 0)
            {
                goto label_37774;
            }
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int64_t sub_39118(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    uint64_t x0_3;
    int32_t x1;
    double v0;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::setProperty(x0_3, x1, v0);
}

int64_t sub_39190(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    uint64_t x0_2;
    int32_t x1;
    double v0;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::setProperty(x0_2, x1, v0);
}

int64_t sub_391c0(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    uint64_t x0_2;
    int32_t x1;
    double v0;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::setProperty(x0_2, x1, v0);
}

int64_t sub_391d4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    uint64_t x0_3;
    int32_t x1;
    double v0;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::setProperty(x0_3, x1, v0);
}

int64_t sub_391d8(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    uint64_t x0_2;
    int32_t x1;
    double v0;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::setProperty(x0_2, x1, v0);
}

int64_t sub_391e4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    uint64_t x0_3;
    int32_t x1;
    double v0;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::setProperty(x0_3, x1, v0);
}

int64_t sub_3921c(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    uint64_t x0_2;
    int32_t x1;
    double v0;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return cv::CvCaptureCAM_V4L::setProperty(x0_2, x1, v0);
}

uint64_t cv::CvCaptureCAM_V4L::setProperty(uint64_t arg1, int32_t arg2, double arg3)
{
    int64_t* x22;
    int64_t* var_30 = x22;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x24 + 0x28);
    uint64_t x8 = (arg2 - 3);
    uint64_t x0_1;
    if (x8 > 0xd)
    {
    label_39328:
        double v1 = 0.0;
        if (!(arg3 < 0.0))
        {
            v1 = arg3;
            if (!(arg3 <= 1.0))
            {
                v1 = 1.0;
            }
        }
        uint64_t x10_2 = (arg2 - 0xa);
        char s;
        int32_t var_1c0;
        int64_t s_1;
        void var_1a0;
        void var_198;
        void* x0_19;
        void* x0_35;
        if (x10_2 <= 0x1d)
        {
            switch (x10_2)
            {
                case 0:
                {
                    *(arg1 + 0x428);
                label_3959c:
                    int64_t x8_2;
                    double temp0_3 = vcvt_f64_s64(x8_2);
                    int64_t x9_2;
                    int32_t temp0_5 = vcvt_s64_f64(((v1 * vcvt_f64_s64(((x9_2 >> 0x20) - x8_2))) + temp0_3));
                    int32_t x10_3;
                    int32_t var_1e0 = x10_3;
                    if (ioctl(*(arg1 + 8), 0xc008561c, &var_1e0) == 0xffffffff)
                    {
                        if (*__errno() == 0x22)
                        {
                            goto label_395e8;
                        }
                        char* x20_2;
                        if ((*data_57650 & 1) == 0)
                        {
                            x20_2 = &*(data_57650 + 1);
                        }
                        else
                        {
                            x20_2 = *(data_5765a + 6);
                        }
                        var_1c0 = data_57648;
                        __builtin_memset(&s_1, 0, 0x18);
                        size_t x0_15 = strlen(x20_2);
                        if (x0_15 < -0x10)
                        {
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        label_399e4:
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        label_399ec:
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        label_399f4:
                            int64_t x0_53 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                            if ((s & 1) == 0)
                            {
                                while ((s_1 & 1) != 0)
                                {
                                label_39a30:
                                    operator delete(x0_19);
                                    int64_t x0_57 = _Unwind_Resume(x0_53);
                                    LogCapture::~LogCapture();
                                    _Unwind_Resume(x0_57);
                                }
                            }
                            else
                            {
                                operator delete(x0_35);
                                if ((s_1 & 1) != 0)
                                {
                                    goto label_39a30;
                                }
                            }
                            /* tailcall */
                            return cvCreateCameraCapture_V4L(_Unwind_Resume(x0_53));
                        }
                        if (x0_15 >= 0x17)
                        {
                            uint64_t x22_3 = ((x0_15 + 0x10) & 0xfffffffffffffff0);
                            x0_19 = operator new(x22_3);
                            size_t var_1b0_1 = x0_15;
                            s_1 = (x22_3 | 1);
                        }
                        else
                        {
                            s_1 = (x0_15 << 1);
                        }
                        if ((x0_15 >= 0x17 || (x0_15 < 0x17 && x0_15 != 0)))
                        {
                            memcpy(x0_19, x20_2, x0_15);
                        }
                        *(x0_19 + x0_15) = 0;
                        int32_t x19_4;
                        if ((g3::logLevel(&var_1c0) & 1) == 0)
                        {
                            x19_4 = 0;
                            if ((s_1 & 1) != 0)
                            {
                            label_3979c:
                                operator delete(x0_19);
                                if ((x19_4 & 1) == 0)
                                {
                                    goto label_39420;
                                }
                                goto label_398cc;
                            }
                        }
                        else
                        {
                            __builtin_memset(&s, 0, 0x18);
                            uint64_t x19_3 = *cv::TAG;
                            size_t x0_24 = strlen(x19_3);
                            if (x0_24 < -0x10)
                            {
                                goto label_399ec;
                            }
                            if (x0_24 >= 0x17)
                            {
                                uint64_t x22_5 = ((x0_24 + 0x10) & 0xfffffffffffffff0);
                                x0_35 = operator new(x22_5);
                                size_t var_1d0_1 = x0_24;
                                s = (x22_5 | 1);
                            }
                            else
                            {
                                s = (x0_24 << 1);
                            }
                            if ((x0_24 >= 0x17 || (x0_24 < 0x17 && x0_24 != 0)))
                            {
                                memcpy(x0_35, x19_3, x0_24);
                            }
                            *(x0_35 + x0_24) = 0;
                            x19_4 = g3::logTag(&s);
                            if ((s & 1) != 0)
                            {
                                operator delete(x0_35);
                                if ((s_1 & 1) != 0)
                                {
                                    goto label_3979c;
                                }
                            }
                            else if ((s_1 & 1) != 0)
                            {
                                goto label_3979c;
                            }
                        }
                        if ((x19_4 & 1) == 0)
                        {
                            goto label_39420;
                        }
                    label_398cc:
                        LogCapture::LogCapture(&var_1a0, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "VIDIOC_S_CTRL", 0xd);
                        LogCapture::~LogCapture();
                        goto label_39420;
                    }
                label_395e8:
                    x0_1 = 1;
                    if ((var_1e0 == 0x9a0901 && temp0_5 == 1))
                    {
                        sub_39de8(arg1, 0x9a0902);
                    label_3960c:
                        x0_1 = 1;
                    }
                    break;
                }
                case 1:
                {
                    *(arg1 + 0x430);
                    goto label_3959c;
                }
                case 4:
                {
                    *(arg1 + 0x448);
                    goto label_3959c;
                }
                case 0xb:
                {
                    goto label_3959c;
                }
            }
            switch (x10_2)
            {
                case 2:
                {
                    *(arg1 + 0x438);
                    goto label_3959c;
                }
                case 3:
                {
                    *(arg1 + 0x440);
                    goto label_3959c;
                }
                case 5:
                {
                    *(arg1 + 0x450);
                    goto label_3959c;
                }
                case 0x12:
                {
                    *(arg1 + 0x420);
                    goto label_3959c;
                }
            }
            if (x10_2 == 0x1d)
            {
                goto label_3959c;
            }
        }
        if ((x10_2 > 0x1d || (x10_2 <= 0x1d && ((((((((((((((((((((x10_2 == 6 || x10_2 == 7) || x10_2 == 8) || x10_2 == 9) || x10_2 == 0xa) || x10_2 == 0xc) || x10_2 == 0xd) || x10_2 == 0xe) || x10_2 == 0xf) || x10_2 == 0x10) || x10_2 == 0x11) || x10_2 == 0x13) || x10_2 == 0x14) || x10_2 == 0x15) || x10_2 == 0x16) || x10_2 == 0x17) || x10_2 == 0x18) || x10_2 == 0x19) || x10_2 == 0x1a) || x10_2 == 0x1b) || x10_2 == 0x1c))))
        {
            char* x21_2;
            if ((*data_57650 & 1) == 0)
            {
                x21_2 = &*(data_57650 + 1);
            label_396cc:
                var_1c0 = data_57648;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_17 = strlen(x21_2);
                if (x0_17 < -0x10)
                {
                    goto label_399e4;
                }
                void* x0_27;
                if (x0_17 >= 0x17)
                {
                    uint64_t x23_1 = ((x0_17 + 0x10) & 0xfffffffffffffff0);
                    x0_27 = operator new(x23_1);
                    size_t var_1b0_2 = x0_17;
                    void* var_1a8_1 = x0_27;
                    s_1 = (x23_1 | 1);
                }
                else
                {
                    s_1 = (x0_17 << 1);
                }
                if ((x0_17 >= 0x17 || (x0_17 < 0x17 && x0_17 != 0)))
                {
                    memcpy(x0_27, x21_2, x0_17);
                }
                *(x0_27 + x0_17) = 0;
                int32_t x19_6;
                if ((g3::logLevel(&var_1c0) & 1) == 0)
                {
                    x19_6 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_39840:
                        operator delete(x0_19);
                        if ((x19_6 & 1) == 0)
                        {
                            goto label_3960c;
                        }
                        goto label_39984;
                    }
                }
                else
                {
                    __builtin_memset(&s, 0, 0x18);
                    char* x19_5 = *cv::TAG;
                    size_t x0_32 = strlen(x19_5);
                    if (x0_32 < -0x10)
                    {
                        goto label_399f4;
                    }
                    void* x0_43;
                    if (x0_32 >= 0x17)
                    {
                        uint64_t x23_2 = ((x0_32 + 0x10) & 0xfffffffffffffff0);
                        x0_43 = operator new(x23_2);
                        size_t var_1d0_2 = x0_32;
                        void* var_1c8 = x0_43;
                        s = (x23_2 | 1);
                    }
                    else
                    {
                        s = (x0_32 << 1);
                    }
                    if ((x0_32 >= 0x17 || (x0_32 < 0x17 && x0_32 != 0)))
                    {
                        memcpy(x0_43, x19_5, x0_32);
                    }
                    *(x0_43 + x0_32) = 0;
                    x19_6 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        operator delete(x0_35);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_39840;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_39840;
                    }
                }
                if ((x19_6 & 1) == 0)
                {
                    goto label_3960c;
                }
            label_39984:
                LogCapture::LogCapture(&var_1a0, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "VIDEOIO ERROR: V4L2: setting pro…", 0x27)), " is not supported", 0x11);
                LogCapture::~LogCapture();
                goto label_3960c;
            }
            x21_2 = *(data_5765a + 6);
            goto label_396cc;
        }
    }
    else
    {
        int32_t x0;
        int32_t x0_3;
        int32_t x0_5;
        switch (x8)
        {
            case 0:
            {
                x0 = lrint(arg3);
                if (x0 != 0)
                {
                    x0_1 = 1;
                }
                else
                {
                    x0_1 = 0;
                }
                data_58324 = x0;
                break;
            }
            case 1:
            {
                x0_5 = lrint(arg3);
                if (x0_5 != 0)
                {
                    x0_1 = 1;
                }
                else
                {
                    x0_1 = 0;
                }
                data_58328 = x0_5;
                break;
            }
            case 2:
            {
                *(arg1 + 0xd4) = vcvt_u64_f64(arg3);
                x0_3 = sub_3b470(arg1);
                break;
            }
            case 3:
            {
                int32_t x20_1 = *(arg1 + 0xc8);
                *(arg1 + 0xc8) = vcvt_u64_f64(arg3);
                if ((sub_3b470(arg1) & 1) != 0)
                {
                    goto label_3960c;
                }
                *(arg1 + 0xc8) = x20_1;
                sub_3b470(arg1);
            label_39420:
                x0_1 = 0;
                break;
            }
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 0xa:
            case 0xb:
            case 0xc:
            {
                goto label_39328;
            }
            case 0xd:
            {
                int32_t x9_5 = *(arg1 + 0xc8);
                int32_t x8_7 = 1;
                if (x9_5 > 0x47455049)
                {
                    if (x9_5 > 0x56595558)
                    {
                        if ((x9_5 != 0x56595559 && x9_5 != 0x59565955))
                        {
                        label_394ec:
                            x8_7 = 0;
                        }
                    }
                    else if ((x9_5 != 0x4745504a && x9_5 != 0x47504a4d))
                    {
                        goto label_394ec;
                    }
                }
                else if (x9_5 > 0x33424751)
                {
                    if ((x9_5 != 0x33424752 && x9_5 != 0x33524742))
                    {
                        goto label_394ec;
                    }
                }
                else if ((x9_5 != 0x20363159 && x9_5 != 0x32315659))
                {
                    goto label_394ec;
                }
                (arg3 - 0.0);
                char x10_4;
                if (arg3 != 0.0)
                {
                    x10_4 = 1;
                }
                else
                {
                    x10_4 = 0;
                }
                int32_t x9_6;
                if (arg3 == 0.0)
                {
                    x9_6 = 1;
                }
                else
                {
                    x9_6 = 0;
                }
                *(arg1 + 0xd8) = (x10_4 & x8_7);
                x0_1 = (x8_7 | x9_6);
                break;
            }
        }
        int32_t x9_1;
        if ((x8 == 0 && x0 != 0))
        {
            x9_1 = data_58328;
            if (x9_1 != 0)
            {
                *(arg1 + 0xcc) = x0;
                *(arg1 + 0xd0) = x9_1;
                x0_3 = sub_3b470(arg1);
                data_58328 = 0;
                data_58324 = 0;
            }
        }
        int32_t x9_3;
        if ((x8 == 1 && x0_5 != 0))
        {
            x9_3 = data_58324;
            if (x9_3 != 0)
            {
                *(arg1 + 0xcc) = x9_3;
                *(arg1 + 0xd0) = x0_5;
                x0_3 = sub_3b470(arg1);
                data_58328 = 0;
                data_58324 = 0;
            }
        }
        if (((x8 == 2 || ((x8 == 0 && x0 != 0) && x9_1 != 0)) || ((x8 == 1 && x0_5 != 0) && x9_3 != 0)))
        {
            if (*(x24 + 0x28) != x9)
            {
            label_399d4:
                __stack_chk_fail();
                /* no return */
            }
            x0_1 = (x0_3 & 1);
        label_39638:
            return x0_1;
        }
    }
    if (*(x24 + 0x28) != x9)
    {
        goto label_399d4;
    }
    goto label_39638;
}

int64_t* cvCreateCameraCapture_V4L(bool arg1)
{
    int64_t* x0 = operator new(0x458);
    int64_t* x19 = x0;
    memset(x0, 0, 0x420);
    *(x19 + 0xd4) = 0x1e;
    *(x19 + 0xcc) = 0x1e000000280;
    __builtin_memset(&x19[3], 0, 0x18);
    __builtin_memset(&x19[0x86], 0, 0x28);
    *x19 = (_vtable_for_cv::CvCaptureCAM_V4L + 0x10);
    *(x19 + 0x420) = {0};
    if ((cv::CvCaptureCAM_V4L::open(x19, arg1) & 1) == 0)
    {
        *(*x19 + 8)(x19);
        x19 = nullptr;
    }
    return x19;
}

void** cvCreateCameraCapture_V4L(uint64_t arg1)
{
    void** x0 = operator new(0x458);
    void** x19 = x0;
    memset(x0, 0, 0x420);
    x19[4] = 0;
    x19[5] = 0;
    *x19 = (_vtable_for_cv::CvCaptureCAM_V4L + 0x10);
    x19[3] = 0;
    *(x19 + 0xcc) = 0x1e000000280;
    *(x19 + 0xd4) = 0x1e;
    __builtin_memset(&x19[0x84], 0, 0x38);
    x19[2] = 1;
    x19[0x19] = 0;
    x19[0x1b] = 1;
    strlen(arg1);
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&x19[3], arg1);
    *(x19 + 0xda) = 1;
    __builtin_memset(&x19[0x77], 0, 0x58);
    *(x19 + 0x3bc) = 1;
    *(x19 + 0x3f4) = 1;
    if (sub_32620(x19, 1) != 1)
    {
        *(*x19 + 8)(x19);
        x19 = nullptr;
    }
    return x19;
}

int64_t CvCapture::getCaptureDomain() __pure
{
    return 0;
}

int64_t sub_39c1c(void* arg1, int32_t arg2)
{
    int32_t x8 = *(arg1 + 0x250);
    int32_t x9 = *(arg1 + 0x254);
    int64_t x3;
    if ((arg2 & 1) == 0)
    {
        x3 = 3;
    }
    else
    {
        x3 = 1;
    }
    int64_t x2_1;
    int32_t x10_1;
    if (*(arg1 + 0xd8) == 0)
    {
        x10_1 = *(arg1 + 0xc8);
        x3 = 1;
        if (x10_1 > 0x47455049)
        {
            if (x10_1 > 0x56595558)
            {
                if ((x10_1 == 0x59565955 || x10_1 == 0x56595559))
                {
                    x3 = 2;
                }
                if ((x10_1 != 0x59565955 && x10_1 != 0x56595559))
                {
                label_39d5c:
                    x3 = 0;
                }
            }
            else if ((x10_1 != 0x4745504a && x10_1 != 0x47504a4d))
            {
                goto label_39d5c;
            }
        }
        else if (x10_1 > 0x33424751)
        {
            if ((x10_1 != 0x33424752 && x10_1 != 0x33524742))
            {
                goto label_39d5c;
            }
            x3 = 3;
        }
        else if ((x10_1 != 0x20363159 && x10_1 != 0x32315659))
        {
            goto label_39d5c;
        }
        x2_1 = 8;
        if (x10_1 == 0x20363159)
        {
            x2_1 = 0x10;
        }
        if (x10_1 == 0x32315659)
        {
            int32_t x9_1 = (x9 * 3);
            int32_t x9_2;
            if (x9_1 < 0)
            {
                x9_2 = (x9_1 + 1);
            }
            else
            {
                x9_2 = x9_1;
            }
            x9 = (x9_2 >> 1);
        }
        if ((x10_1 > 0x47455049 && (x10_1 == 0x47504a4d || x10_1 == 0x4745504a)))
        {
            x2_1 = 8;
            x9 = 1;
            x8 = *((arg1 + (*(arg1 + 0xc) << 4)) + 0xe8);
        }
    }
    if ((*(arg1 + 0xd8) != 0 || (*(arg1 + 0xd8) == 0 && x10_1 == 0x32315659)))
    {
        x2_1 = 8;
    }
    int64_t x0_1 = cvInitImageHeader((arg1 + 0x38), (x8 | (x9 << 0x20)), x2_1, x3, 0, 4);
    uint32_t x8_1 = *(arg1 + 0xd8);
    if (x8_1 != 0)
    {
        x0_1 = cvAlloc(*(arg1 + 0x88));
        x8_1 = *(arg1 + 0xd8);
        *(arg1 + 0x90) = x0_1;
    }
    *(arg1 + 0xd9) = x8_1;
    return x0_1;
}

int64_t sub_39de8(void* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int128_t v0;
    v0 = 0;
    *v0[8] = 0;
    uint64_t x0 = *(arg1 + 8);
    __builtin_memset((arg1 + 0x370), 0, 0x44);
    *(arg1 + 0x370) = arg2;
    int32_t x0_1 = ioctl(x0, 0xc0445624, (arg1 + 0x370), v0);
    if (x0_1 != 0)
    {
        char* x20_1;
        if ((*data_57650 & 1) == 0)
        {
            x20_1 = &*(data_57650 + 1);
        }
        else
        {
            x20_1 = *(data_5765a + 6);
        }
        int32_t var_1b0 = data_57648;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_3 = strlen(x20_1);
        char s;
        void* var_198_1;
        size_t x0_9;
        uint64_t x19_2;
        int32_t x19_3;
        if (x0_3 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* x21_1;
            if (x0_3 >= 0x17)
            {
                uint64_t x22_1 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
                void* x0_5 = operator new(x22_1);
                x21_1 = x0_5;
                size_t var_1a0_1 = x0_3;
                var_198_1 = x0_5;
                s_1 = (x22_1 | 1);
            }
            else
            {
                x21_1 = &*s_1[1];
                s_1 = (x0_3 << 1);
            }
            if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
            {
                memcpy(x21_1, x20_1, x0_3);
            }
            *(x21_1 + x0_3) = 0;
            x0_1 = g3::logLevel(&var_1b0);
            if ((x0_1 & 1) == 0)
            {
                x19_3 = 0;
                if ((s_1 & 1) != 0)
                {
                label_39ff0:
                    x0_1 = operator delete(var_198_1);
                    if ((x19_3 & 1) != 0)
                    {
                        goto label_3a024;
                    }
                }
            }
            else
            {
                __builtin_memset(&s, 0, 0x18);
                x19_2 = *cv::TAG;
                x0_9 = strlen(x19_2);
            }
        }
        void* var_1b8;
        if ((x0_3 < -0x10 || ((x0_3 >= -0x10 && (x0_1 & 1) != 0) && x0_9 < -0x10)))
        {
            int64_t x19_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_1b8);
            }
            if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
            {
                operator delete(var_198_1);
                x19_5 = _Unwind_Resume(x19_5);
                LogCapture::~LogCapture();
            }
            /* tailcall */
            return sub_3a160(_Unwind_Resume(x19_5));
        }
        if (x0_3 >= -0x10)
        {
            if (((x0_1 & 1) != 0 && x0_9 >= -0x10))
            {
                void* x21_2;
                if (x0_9 >= 0x17)
                {
                    uint64_t x22_2 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                    void* x0_11 = operator new(x22_2);
                    x21_2 = x0_11;
                    size_t var_1c0_1 = x0_9;
                    var_1b8 = x0_11;
                    s = (x22_2 | 1);
                }
                else
                {
                    x21_2 = (&s | 1);
                    s = (x0_9 << 1);
                }
                if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
                {
                    memcpy(x21_2, x19_2, x0_9);
                }
                *(x21_2 + x0_9) = 0;
                x0_1 = g3::logTag(&s);
                x19_3 = x0_1;
                if ((s & 1) != 0)
                {
                    x0_1 = operator delete(var_1b8);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_39ff0;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_39ff0;
                }
            }
            if (((((x0_1 & 1) == 0 && (s_1 & 1) == 0) || ((x0_1 & 1) != 0 && x0_9 >= -0x10)) && (x19_3 & 1) != 0))
            {
            label_3a024:
                void var_190;
                LogCapture::LogCapture(&var_190, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                void var_188;
                std::__ndk1::fpos<mbstate_t>* x0_18 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_188, "VIDIOC_QUERYCTRL ", 0x11);
                char* x0_21 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_18, x0_21, strlen(x0_21));
                x0_1 = LogCapture::~LogCapture();
            }
        }
    }
    else if ((*(arg1 + 0x3a8) & 1) == 0)
    {
        int32_t x10_2 = *(arg1 + 0x370);
        int32_t x8_3 = *(arg1 + 0x398);
        int32_t x9_2 = *(arg1 + 0x39c);
        uint64_t x11_2 = (x10_2 - 0x980900);
        if (x11_2 <= 0x13)
        {
            switch (x11_2)
            {
                case 0:
                {
                    *(arg1 + 0x428) = (x8_3 | (x9_2 << 0x20));
                    break;
                }
                case 1:
                {
                    *(arg1 + 0x430) = (x8_3 | (x9_2 << 0x20));
                    break;
                }
                case 2:
                {
                    *(arg1 + 0x438) = (x8_3 | (x9_2 << 0x20));
                    break;
                }
                case 3:
                {
                    *(arg1 + 0x440) = (x8_3 | (x9_2 << 0x20));
                    break;
                }
                case 0x13:
                {
                    *(arg1 + 0x448) = (x8_3 | (x9_2 << 0x20));
                    break;
                }
            }
        }
        else if (x10_2 == 0x9a0902)
        {
            *(arg1 + 0x450) = (x8_3 | (x9_2 << 0x20));
        }
        else if (x10_2 == 0x9a090a)
        {
            *(arg1 + 0x420) = (x8_3 | (x9_2 << 0x20));
        }
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int64_t sub_3a160(void* arg1)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int128_t v0;
    v0 = 0;
    *v0[8] = 0;
    *(arg1 + 0x258) = {0};
    *(arg1 + 0x308) = {0};
    *(arg1 + 0x2f8) = {0};
    *(arg1 + 0x2e8) = {0};
    *(arg1 + 0x2d8) = {0};
    *(arg1 + 0x2c8) = {0};
    *(arg1 + 0x2b8) = {0};
    *(arg1 + 0x2a8) = {0};
    *(arg1 + 0x298) = {0};
    *(arg1 + 0x288) = {0};
    *(arg1 + 0x248) = {0};
    *(arg1 + 0x278) = {0};
    *(arg1 + 0x268) = {0};
    int32_t x8_5 = *(arg1 + 0xc8);
    int64_t x10_4 = *(arg1 + 0xcc);
    *(arg1 + 0x248) = 1;
    uint64_t x0 = *(arg1 + 8);
    *(arg1 + 0x258) = x8_5;
    *(arg1 + 0x250) = x10_4;
    *(arg1 + 0x25c) = 0;
    int64_t x0_4;
    if (ioctl(x0, 0xc0d05605, v0) == 0xffffffff)
    {
        x0_4 = 0;
    }
    else
    {
        char* x21_1;
        if ((*data_575d0 & 1) == 0)
        {
            x21_1 = &*(data_575d0 + 1);
        }
        else
        {
            x21_1 = *(data_575da + 6);
        }
        int32_t var_1c0 = data_575c8;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_3 = strlen(x21_1);
        char s;
        void* var_1a8_1;
        int32_t x0_9;
        size_t x0_11;
        uint64_t x20_2;
        int32_t x20_3;
        if (x0_3 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* x22_1;
            if (x0_3 >= 0x17)
            {
                uint64_t x23_1 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
                void* x0_6 = operator new(x23_1);
                x22_1 = x0_6;
                size_t var_1b0_1 = x0_3;
                var_1a8_1 = x0_6;
                s_1 = (x23_1 | 1);
            }
            else
            {
                x22_1 = &*s_1[1];
                s_1 = (x0_3 << 1);
            }
            if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
            {
                memcpy(x22_1, x21_1, x0_3);
            }
            *(x22_1 + x0_3) = 0;
            x0_9 = g3::logLevel(&var_1c0);
            if ((x0_9 & 1) == 0)
            {
                x20_3 = 0;
                if ((s_1 & 1) != 0)
                {
                label_3a39c:
                    operator delete(var_1a8_1);
                    if ((x20_3 & 1) != 0)
                    {
                        goto label_3a3d0;
                    }
                }
            }
            else
            {
                __builtin_memset(&s, 0, 0x18);
                x20_2 = *cv::TAG;
                x0_11 = strlen(x20_2);
            }
        }
        void* var_1c8;
        if ((x0_3 < -0x10 || ((x0_3 >= -0x10 && (x0_9 & 1) != 0) && x0_11 < -0x10)))
        {
            int64_t x19_1 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_1c8);
            }
            if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
            {
                operator delete(var_1a8_1);
                x19_1 = _Unwind_Resume(x19_1);
                LogCapture::~LogCapture();
            }
            /* tailcall */
            return sub_3a4b0(_Unwind_Resume(x19_1));
        }
        if (x0_3 >= -0x10)
        {
            if (((x0_9 & 1) != 0 && x0_11 >= -0x10))
            {
                void* x22_2;
                if (x0_11 >= 0x17)
                {
                    uint64_t x23_2 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
                    void* x0_13 = operator new(x23_2);
                    x22_2 = x0_13;
                    size_t var_1d0_1 = x0_11;
                    var_1c8 = x0_13;
                    s = (x23_2 | 1);
                }
                else
                {
                    x22_2 = (&s | 1);
                    s = (x0_11 << 1);
                }
                if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
                {
                    memcpy(x22_2, x20_2, x0_11);
                }
                *(x22_2 + x0_11) = 0;
                x20_3 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    operator delete(var_1c8);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_3a39c;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_3a39c;
                }
            }
            if (((((x0_9 & 1) == 0 && (s_1 & 1) == 0) || ((x0_9 & 1) != 0 && x0_11 >= -0x10)) && (x20_3 & 1) != 0))
            {
            label_3a3d0:
                void var_1a0;
                LogCapture::LogCapture(&var_1a0, *cv::TAG, &data_575c8, &data_3cde1, &nullptr->ident.version);
                void var_198;
                uint32_t x0_21 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "set vidio fmt success ", 0x16);
                *(arg1 + 0xc8);
                uint32_t x0_23 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_21), " palette == pixelformat ", 0x18);
                *(arg1 + 0x258);
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_23);
                LogCapture::~LogCapture();
            }
            if (((((((x0_9 & 1) == 0 && (s_1 & 1) == 0) || ((x0_9 & 1) != 0 && x0_11 >= -0x10)) && (x20_3 & 1) != 0) || ((((x0_9 & 1) == 0 && (s_1 & 1) == 0) || ((x0_9 & 1) != 0 && x0_11 >= -0x10)) && (x20_3 & 1) == 0)) || ((x0_9 & 1) == 0 && (s_1 & 1) != 0)))
            {
                if (*(arg1 + 0xc8) == *(arg1 + 0x258))
                {
                    x0_4 = 1;
                }
                else
                {
                    x0_4 = 0;
                }
            }
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_4;
}

int64_t sub_3a4b0(void* arg1)
{
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x16 = *(x28 + 0x28);
    int128_t* x25 = (arg1 + 0x410);
    int64_t var_2c0;
    int64_t* s_10 = &var_2c0;
    void var_230;
    void* x21 = &var_230;
    int128_t var_370 = data_3e1d0;
    int64_t x0_82;
    while (true)
    {
        int128_t v0;
        v0 = 0;
        *v0[8] = 0;
        int128_t s_9;
        __builtin_memset(&s_9, 0, 0x80);
        __FD_SET_chk(*(arg1 + 8), &s_9, 0x80, v0);
        struct timeval var_2f0;
        var_2f0.tv_sec = var_370;
        var_2f0.tv_usec = *var_370[8];
        int32_t x0_37 = select((*(arg1 + 8) + 1), &s_9, nullptr, nullptr, &var_2f0);
        char s_8;
        void* var_240;
        void var_238;
        if (x0_37 == 0xffffffff)
        {
            int32_t* x0_43;
            x0_43 = __errno();
            if (*x0_43 == 4)
            {
                continue;
            }
            else
            {
                char* x20_3;
                if ((*data_57650 & 1) == 0)
                {
                    x20_3 = &*(data_57650 + 1);
                }
                else
                {
                    x20_3 = *(data_5765a + 6);
                }
                int32_t var_310 = data_57648;
                int64_t s_3;
                __builtin_memset(&s_3, 0, 0x18);
                size_t x0_93 = strlen(x20_3);
                if (x0_93 >= -0x10)
                {
                    void* var_2f8_1;
                    void* x21_4;
                    if (x0_93 >= 0x17)
                    {
                        uint64_t x22_14 = ((x0_93 + 0x10) & 0xfffffffffffffff0);
                        void* x0_104 = operator new(x22_14);
                        x21_4 = x0_104;
                        size_t var_300_1 = x0_93;
                        var_2f8_1 = x0_104;
                        s_3 = (x22_14 | 1);
                    }
                    else
                    {
                        x21_4 = &*s_3[1];
                        s_3 = (x0_93 << 1);
                    }
                    if ((x0_93 >= 0x17 || (x0_93 < 0x17 && x0_93 != 0)))
                    {
                        memcpy(x21_4, x20_3, x0_93);
                    }
                    *(x21_4 + x0_93) = 0;
                    int32_t x19_6;
                    if ((g3::logLevel(&var_310) & 1) == 0)
                    {
                        x19_6 = 0;
                        if ((s_3 & 1) != 0)
                        {
                        label_3aff8:
                            operator delete(var_2f8_1);
                            if ((x19_6 & 1) == 0)
                            {
                                goto label_3b088;
                            }
                            goto label_3b02c;
                        }
                    }
                    else
                    {
                        int64_t s_2;
                        __builtin_memset(&s_2, 0, 0x18);
                        uint64_t x19_5 = *cv::TAG;
                        size_t x0_109 = strlen(x19_5);
                        if (x0_109 < -0x10)
                        {
                            goto label_3b104;
                        }
                        void* var_318_1;
                        void* x21_5;
                        if (x0_109 >= 0x17)
                        {
                            uint64_t x22_15 = ((x0_109 + 0x10) & 0xfffffffffffffff0);
                            void* x0_111 = operator new(x22_15);
                            x21_5 = x0_111;
                            size_t var_320_1 = x0_109;
                            var_318_1 = x0_111;
                            s_2 = (x22_15 | 1);
                        }
                        else
                        {
                            x21_5 = (&s_2 | 1);
                            s_2 = (x0_109 << 1);
                        }
                        if ((x0_109 >= 0x17 || (x0_109 < 0x17 && x0_109 != 0)))
                        {
                            memcpy(x21_5, x19_5, x0_109);
                        }
                        *(x21_5 + x0_109) = 0;
                        x19_6 = g3::logTag(&s_2);
                        if ((s_2 & 1) != 0)
                        {
                            operator delete(var_318_1);
                            if ((s_3 & 1) != 0)
                            {
                                goto label_3aff8;
                            }
                        }
                        else if ((s_3 & 1) != 0)
                        {
                            goto label_3aff8;
                        }
                    }
                    if ((x19_6 & 1) == 0)
                    {
                        goto label_3b088;
                    }
                label_3b02c:
                    LogCapture::LogCapture(&var_238, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                    int32_t x0_119 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_230, "select capture deviceHandle erro…", 0x22);
                    *x0_43;
                    std::__ndk1::fpos<mbstate_t>* x0_121 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_119), &data_3cde0, 1);
                    char* x0_123 = strerror(*x0_43);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_121, x0_123, strlen(x0_123));
                    goto label_3b084;
                }
            }
        }
        else
        {
            size_t x0_84;
            if (x0_37 == 0)
            {
                char* x20_1;
                if ((*data_57630 & 1) == 0)
                {
                    x20_1 = &*(data_57630 + 1);
                }
                else
                {
                    x20_1 = *(data_5763a + 6);
                }
                int32_t var_348 = data_57628;
                int64_t s_1;
                __builtin_memset(&s_1, 0, 0x18);
                x0_84 = strlen(x20_1);
                if (x0_84 >= -0x10)
                {
                    void* var_330_1;
                    void* x21_2;
                    if (x0_84 >= 0x17)
                    {
                        uint64_t x22_12 = ((x0_84 + 0x10) & 0xfffffffffffffff0);
                        void* x0_86 = operator new(x22_12);
                        x21_2 = x0_86;
                        size_t var_338_1 = x0_84;
                        var_330_1 = x0_86;
                        s_1 = (x22_12 | 1);
                    }
                    else
                    {
                        x21_2 = &*s_1[1];
                        s_1 = (x0_84 << 1);
                    }
                    if ((x0_84 >= 0x17 || (x0_84 < 0x17 && x0_84 != 0)))
                    {
                        memcpy(x21_2, x20_1, x0_84);
                    }
                    *(x21_2 + x0_84) = 0;
                    int32_t x19_3;
                    if ((g3::logLevel(&var_348) & 1) == 0)
                    {
                        x19_3 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_3aea4:
                            operator delete(var_330_1);
                            if ((x19_3 & 1) == 0)
                            {
                                goto label_3b088;
                            }
                            goto label_3aed8;
                        }
                    }
                    else
                    {
                        int64_t s;
                        __builtin_memset(&s, 0, 0x18);
                        uint64_t x19_2 = *cv::TAG;
                        size_t x0_91 = strlen(x19_2);
                        if (x0_91 < -0x10)
                        {
                            goto label_3b0fc;
                        }
                        void* var_350_1;
                        void* x21_3;
                        if (x0_91 >= 0x17)
                        {
                            uint64_t x22_13 = ((x0_91 + 0x10) & 0xfffffffffffffff0);
                            void* x0_95 = operator new(x22_13);
                            x21_3 = x0_95;
                            size_t var_358_1 = x0_91;
                            var_350_1 = x0_95;
                            s = (x22_13 | 1);
                        }
                        else
                        {
                            x21_3 = (&s | 1);
                            s = (x0_91 << 1);
                        }
                        if ((x0_91 >= 0x17 || (x0_91 < 0x17 && x0_91 != 0)))
                        {
                            memcpy(x21_3, x19_2, x0_91);
                        }
                        *(x21_3 + x0_91) = 0;
                        x19_3 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            operator delete(var_350_1);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_3aea4;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_3aea4;
                        }
                    }
                    if ((x19_3 & 1) == 0)
                    {
                        goto label_3b088;
                    }
                label_3aed8:
                    LogCapture::LogCapture(&var_238, *cv::TAG, &data_57628, &data_3cde1, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_230, "select capture deviceHandle time…", 0x23);
                label_3b084:
                    LogCapture::~LogCapture();
                label_3b088:
                    x0_82 = 0xffffffff;
                }
            }
            else
            {
                int32_t x8_23;
                int64_t* s_11;
                if (ioctl(*(arg1 + 8), 0xc0585611, (arg1 + 0x3b8)) == 0xffffffff)
                {
                    int32_t* x0_44;
                    x0_44 = __errno();
                    int32_t x8_29 = *x0_44;
                    int128_t* var_3c8_1;
                    if ((x8_29 != 0xb && x8_29 != 5))
                    {
                        s_11 = s_10;
                        var_3c8_1 = x25;
                        *(arg1 + 0xda) = 0;
                        uint32_t x9_3 = *data_57650;
                        char* x11_1 = *(data_5765a + 6);
                        int32_t var_290 = data_57648;
                        char* x23_5;
                        if ((x9_3 & 1) == 0)
                        {
                            x23_5 = &*(data_57650 + 1);
                        }
                        else
                        {
                            x23_5 = x11_1;
                        }
                        int64_t s_6;
                        __builtin_memset(&s_6, 0, 0x18);
                        size_t x0_50 = strlen(x23_5);
                        if (x0_50 < -0x10)
                        {
                            goto label_3b0d0;
                        }
                        void* var_278;
                        void* x27_5;
                        if (x0_50 >= 0x17)
                        {
                            uint64_t x28_3 = ((x0_50 + 0x10) & 0xfffffffffffffff0);
                            void* x0_68 = operator new(x28_3);
                            x27_5 = x0_68;
                            size_t var_280_1 = x0_50;
                            var_278 = x0_68;
                            s_6 = (x28_3 | 1);
                        }
                        else
                        {
                            x27_5 = &*s_6[1];
                            s_6 = (x0_50 << 1);
                        }
                        if ((x0_50 >= 0x17 || (x0_50 < 0x17 && x0_50 != 0)))
                        {
                            memcpy(x27_5, x23_5, x0_50);
                        }
                        *(x27_5 + x0_50) = 0;
                        int32_t x0_71;
                        x0_71 = g3::logLevel(&var_290);
                        size_t x0_73;
                        int32_t x22_2;
                        if ((x0_71 & 1) == 0)
                        {
                            x22_2 = 0;
                        }
                        else
                        {
                            uint64_t x23_8 = *cv::TAG;
                            int64_t s_5;
                            __builtin_memset(&s_5, 0, 0x18);
                            x0_73 = strlen(x23_8);
                            if (x0_73 >= -0x10)
                            {
                                void* var_298_1;
                                void* x27_2;
                                if (x0_73 >= 0x17)
                                {
                                    uint64_t x28_1 = ((x0_73 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_7 = operator new(x28_1);
                                    x27_2 = x0_7;
                                    size_t var_2a0_1 = x0_73;
                                    var_298_1 = x0_7;
                                    s_5 = (x28_1 | 1);
                                }
                                else
                                {
                                    x27_2 = (&s_5 | 1);
                                    s_5 = (x0_73 << 1);
                                }
                                if ((x0_73 >= 0x17 || (x0_73 < 0x17 && x0_73 != 0)))
                                {
                                    memcpy(x27_2, x23_8, x0_73);
                                }
                                *(x27_2 + x0_73) = 0;
                                int32_t x0_10;
                                x0_10 = g3::logTag(&s_5);
                                x22_2 = x0_10;
                                if ((s_5 & 1) != 0)
                                {
                                    operator delete(var_298_1);
                                }
                            }
                        }
                        if ((((x0_71 & 1) == 0 && (s_6 & 1) != 0) || (((x0_71 & 1) != 0 && x0_73 >= -0x10) && (s_6 & 1) != 0)))
                        {
                            operator delete(var_278);
                        }
                        if ((((((x0_71 & 1) == 0 && (s_6 & 1) != 0) || (((x0_71 & 1) != 0 && x0_73 >= -0x10) && (s_6 & 1) != 0)) || ((x0_71 & 1) == 0 && (s_6 & 1) == 0)) || (((x0_71 & 1) != 0 && x0_73 >= -0x10) && (s_6 & 1) == 0)))
                        {
                            if ((x22_2 & 1) != 0)
                            {
                                LogCapture::LogCapture(&var_238, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                std::__ndk1::fpos<mbstate_t>* x0_77 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x21, "VIDIOC_DQBUF ", 0xd);
                                char* x0_79 = strerror(*x0_44);
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_77, x0_79, strlen(x0_79));
                                LogCapture::~LogCapture();
                                x8_23 = -1;
                            label_3ac8c:
                                x25 = var_3c8_1;
                                goto label_3ac90;
                            }
                            x8_23 = -1;
                        label_3aca8:
                            x25 = var_3c8_1;
                            s_10 = s_11;
                        }
                        if (((x0_71 & 1) != 0 && x0_73 < -0x10))
                        {
                            goto label_3b0d8;
                        }
                    }
                    if ((x8_29 == 5 && (*(arg1 + 0x3c4) & 6) == 0))
                    {
                        int32_t x0_46;
                        x0_46 = ioctl(*(arg1 + 8), 0xc058560f, (arg1 + 0x3b8));
                        if (x0_46 == 0xffffffff)
                        {
                            s_11 = s_10;
                            var_3c8_1 = x25;
                            uint32_t x9_1 = *data_57650;
                            char* x10_1 = *(data_5765a + 6);
                            int32_t var_258 = data_57648;
                            char* x23_1;
                            if ((x9_1 & 1) == 0)
                            {
                                x23_1 = &*(data_57650 + 1);
                            }
                            else
                            {
                                x23_1 = x10_1;
                            }
                            __builtin_memset(&s_8, 0, 0x18);
                            size_t x0_13 = strlen(x23_1);
                            if (x0_13 < -0x10)
                            {
                                goto label_3b0e0;
                            }
                            void* x27_3;
                            if (x0_13 >= 0x17)
                            {
                                uint64_t x28_2 = ((x0_13 + 0x10) & 0xfffffffffffffff0);
                                void* x0_15 = operator new(x28_2);
                                x27_3 = x0_15;
                                size_t var_248_1 = x0_13;
                                var_240 = x0_15;
                                s_8 = (x28_2 | 1);
                            }
                            else
                            {
                                void var_24f;
                                x27_3 = &var_24f;
                                s_8 = (x0_13 << 1);
                            }
                            if ((x0_13 >= 0x17 || (x0_13 < 0x17 && x0_13 != 0)))
                            {
                                memcpy(x27_3, x23_1, x0_13);
                            }
                            *(x27_3 + x0_13) = 0;
                            int32_t x0_18;
                            x0_18 = g3::logLevel(&var_258);
                            int32_t x22_5;
                            if ((x0_18 & 1) == 0)
                            {
                                x22_5 = 0;
                                if ((s_8 & 1) != 0)
                                {
                                label_3a840:
                                    operator delete(var_240);
                                    if ((x22_5 & 1) == 0)
                                    {
                                        goto label_3a850;
                                    }
                                    goto label_3a7d4;
                                }
                            }
                            else
                            {
                                uint64_t x24_1 = *cv::TAG;
                                int64_t s_7;
                                __builtin_memset(&s_7, 0, 0x18);
                                size_t x0_20 = strlen(x24_1);
                                if (x0_20 < -0x10)
                                {
                                    goto label_3b0e8;
                                }
                                void* var_260_1;
                                void* x23_2;
                                if (x0_20 >= 0x17)
                                {
                                    uint64_t x27_4 = ((x0_20 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_22 = operator new(x27_4);
                                    x23_2 = x0_22;
                                    size_t var_268_1 = x0_20;
                                    var_260_1 = x0_22;
                                    s_7 = (x27_4 | 1);
                                }
                                else
                                {
                                    x23_2 = (&s_7 | 1);
                                    s_7 = (x0_20 << 1);
                                }
                                if ((x0_20 >= 0x17 || (x0_20 < 0x17 && x0_20 != 0)))
                                {
                                    memcpy(x23_2, x24_1, x0_20);
                                }
                                *(x23_2 + x0_20) = 0;
                                int32_t x0_25;
                                x0_25 = g3::logTag(&s_7);
                                x22_5 = x0_25;
                                if ((s_7 & 1) != 0)
                                {
                                    operator delete(var_260_1);
                                    if ((s_8 & 1) != 0)
                                    {
                                        goto label_3a840;
                                    }
                                }
                                else if ((s_8 & 1) != 0)
                                {
                                    goto label_3a840;
                                }
                            }
                            if ((x22_5 & 1) == 0)
                            {
                            label_3a850:
                                x8_23 = 0;
                                goto label_3aca8;
                            }
                        label_3a7d4:
                            LogCapture::LogCapture(&var_238, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                            std::__ndk1::fpos<mbstate_t>* x0_28 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x21, "VIDIOC_QBUF ", 0xc);
                            char* x0_30 = strerror(*x0_44);
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_28, x0_30, strlen(x0_30));
                            LogCapture::~LogCapture();
                            x8_23 = 0;
                            goto label_3ac8c;
                        }
                    }
                    if ((x8_29 == 0xb || x8_29 == 5))
                    {
                        x8_23 = 0;
                    }
                }
                else
                {
                    memcpy(*(arg1 + 0x180), *((arg1 + (*(arg1 + 0x3b8) << 4)) + 0xe0), *(arg1 + 0x188));
                    *(arg1 + 0xc) = 0xa;
                    *x25 = *(arg1 + 0x3d0);
                    int32_t x0_42;
                    x0_42 = ioctl(*(arg1 + 8), 0xc058560f, (arg1 + 0x3b8));
                    if (x0_42 != 0xffffffff)
                    {
                        x8_23 = 1;
                    }
                    else
                    {
                        char* x23_4;
                        if ((*data_57650 & 1) == 0)
                        {
                            x23_4 = &*(data_57650 + 1);
                        }
                        else
                        {
                            x23_4 = *(data_5765a + 6);
                        }
                        int32_t var_2c8 = data_57648;
                        __builtin_memset(s_10, 0, 0x18);
                        s_11 = s_10;
                        size_t x0_48 = strlen(x23_4);
                        int64_t s_4;
                        void* var_2b0;
                        int32_t x0_55;
                        size_t x0_57;
                        int32_t x22_1;
                        uint64_t x26_4;
                        if (x0_48 < -0x10)
                        {
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        }
                        else
                        {
                            void* x26_2;
                            if (x0_48 >= 0x17)
                            {
                                uint64_t x27_6 = ((x0_48 + 0x10) & 0xfffffffffffffff0);
                                void* x0_52 = operator new(x27_6);
                                x26_2 = x0_52;
                                size_t var_2b8_1 = x0_48;
                                var_2b0 = x0_52;
                                var_2c0 = (x27_6 | 1);
                            }
                            else
                            {
                                x26_2 = &*var_2c0[1];
                                var_2c0 = (x0_48 << 1);
                            }
                            if ((x0_48 >= 0x17 || (x0_48 < 0x17 && x0_48 != 0)))
                            {
                                memcpy(x26_2, x23_4, x0_48);
                            }
                            *(x26_2 + x0_48) = 0;
                            x0_55 = g3::logLevel(&var_2c8);
                            if ((x0_55 & 1) == 0)
                            {
                                x22_1 = 0;
                            }
                            else
                            {
                                __builtin_memset(&s_4, 0, 0x18);
                                x26_4 = *cv::TAG;
                                x0_57 = strlen(x26_4);
                            }
                        }
                        if ((x0_48 < -0x10 || ((x0_48 >= -0x10 && (x0_55 & 1) != 0) && x0_57 < -0x10)))
                        {
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        label_3b0d0:
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        label_3b0d8:
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        label_3b0e0:
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        label_3b0e8:
                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                        label_3b0ec:
                            __stack_chk_fail();
                            /* no return */
                        }
                        if (x0_48 >= -0x10)
                        {
                            if (((x0_55 & 1) != 0 && x0_57 >= -0x10))
                            {
                                void* var_2d0_1;
                                void* x22;
                                if (x0_57 >= 0x17)
                                {
                                    uint64_t x27_1 = ((x0_57 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_1 = operator new(x27_1);
                                    x22 = x0_1;
                                    size_t var_2d8_1 = x0_57;
                                    var_2d0_1 = x0_1;
                                    s_4 = (x27_1 | 1);
                                }
                                else
                                {
                                    x22 = (&s_4 | 1);
                                    s_4 = (x0_57 << 1);
                                }
                                if ((x0_57 >= 0x17 || (x0_57 < 0x17 && x0_57 != 0)))
                                {
                                    memcpy(x22, x26_4, x0_57);
                                }
                                *(x22 + x0_57) = 0;
                                int32_t x0_4;
                                x0_4 = g3::logTag(&s_4);
                                x22_1 = x0_4;
                                if ((s_4 & 1) != 0)
                                {
                                    operator delete(var_2d0_1);
                                }
                            }
                            if ((((x0_55 & 1) == 0 && (var_2c0 & 1) != 0) || (((x0_55 & 1) != 0 && x0_57 >= -0x10) && (var_2c0 & 1) != 0)))
                            {
                                operator delete(var_2b0);
                            }
                            if ((((((x0_55 & 1) == 0 && (var_2c0 & 1) != 0) || (((x0_55 & 1) != 0 && x0_57 >= -0x10) && (var_2c0 & 1) != 0)) || ((x0_55 & 1) == 0 && (var_2c0 & 1) == 0)) || (((x0_55 & 1) != 0 && x0_57 >= -0x10) && (var_2c0 & 1) == 0)))
                            {
                                if ((x22_1 & 1) == 0)
                                {
                                    s_10 = s_11;
                                    x8_23 = -1;
                                }
                                else
                                {
                                    LogCapture::LogCapture(&var_238, *cv::TAG, &data_57648, &data_3cde1, &nullptr->ident.version);
                                    std::__ndk1::fpos<mbstate_t>* x0_61 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x21, "VIDIOC_QBUF ", 0xc);
                                    char* x0_64 = strerror(*__errno());
                                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_61, x0_64, strlen(x0_64));
                                    LogCapture::~LogCapture();
                                    x8_23 = -1;
                                label_3ac90:
                                    s_10 = s_11;
                                }
                            }
                        }
                    }
                }
                int32_t x9_4;
                if (x8_23 == 1)
                {
                    x9_4 = 1;
                }
                else
                {
                    x9_4 = 0;
                }
                int32_t x8_45;
                if (x8_23 != 0xffffffff)
                {
                    x8_45 = (x9_4 << 1);
                }
                else
                {
                    x8_45 = 1;
                }
                if (x8_45 == 1)
                {
                    goto label_3b088;
                }
                if (x8_45 != 2)
                {
                    continue;
                }
                else
                {
                    x0_82 = 0;
                }
            }
            if ((x0_37 != 0 || (x0_37 == 0 && x0_84 >= -0x10)))
            {
                if (*(x28 + 0x28) == x16)
                {
                    break;
                }
                goto label_3b0ec;
            }
        }
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_3b0fc:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_3b104:
        int64_t x0_130 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        if ((s_8 & 1) != 0)
        {
            operator delete(var_240);
        }
        int64_t x0_133 = _Unwind_Resume(x0_130);
        LogCapture::~LogCapture();
        int64_t x0_135;
        int64_t x1_24;
        char* x2_19;
        uint8_t* x3;
        x0_135 = _Unwind_Resume(x0_133);
        /* tailcall */
        return sub_3b268(x0_135, x1_24, x2_19, x3);
    }
    return x0_82;
}

int64_t sub_3b118(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_4;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_4 = _Unwind_Resume(x0_2);
    /* tailcall */
    return sub_3b268(x0_4, x1, x2, x3);
}

int64_t sub_3b128(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_4;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_4 = _Unwind_Resume(x0_2);
    /* tailcall */
    return sub_3b268(x0_4, x1, x2, x3);
}

int64_t sub_3b138(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_5;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_5 = _Unwind_Resume(x0_3);
    /* tailcall */
    return sub_3b268(x0_5, x1, x2, x3);
}

int64_t sub_3b158(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_5;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_5 = _Unwind_Resume(x0_3);
    /* tailcall */
    return sub_3b268(x0_5, x1, x2, x3);
}

int64_t sub_3b178(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_4;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_4 = _Unwind_Resume(x0_2);
    /* tailcall */
    return sub_3b268(x0_4, x1, x2, x3);
}

int64_t sub_3b194(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_5;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_5 = _Unwind_Resume(x0_3);
    /* tailcall */
    return sub_3b268(x0_5, x1, x2, x3);
}

int64_t sub_3b1b4(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_4;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_4 = _Unwind_Resume(x0_2);
    /* tailcall */
    return sub_3b268(x0_4, x1, x2, x3);
}

int64_t sub_3b1c8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_5;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_5 = _Unwind_Resume(x0_3);
    /* tailcall */
    return sub_3b268(x0_5, x1, x2, x3);
}

int64_t sub_3b1ec(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_4;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_4 = _Unwind_Resume(x0_2);
    /* tailcall */
    return sub_3b268(x0_4, x1, x2, x3);
}

int64_t sub_3b200(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_5;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_5 = _Unwind_Resume(x0_3);
    /* tailcall */
    return sub_3b268(x0_5, x1, x2, x3);
}

int64_t sub_3b220(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_4;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_4 = _Unwind_Resume(x0_2);
    /* tailcall */
    return sub_3b268(x0_4, x1, x2, x3);
}

int64_t sub_3b238(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t x0_4;
    int64_t x1;
    char* x2;
    uint8_t* x3;
    x0_4 = _Unwind_Resume(x0_2);
    /* tailcall */
    return sub_3b268(x0_4, x1, x2, x3);
}

void sub_3b268(int64_t arg1, int64_t arg2, char* arg3, uint8_t* arg4)
{
    int64_t x8 = (arg2 * arg1);
    if (x8 >= 1)
    {
        int64_t x9_1 = 0;
        int64_t x11_2 = ((arg2 - 1) * arg1);
        int64_t x12_1 = -(arg1);
        do
        {
            uint8_t x13_19;
            uint32_t x13_12;
            uint32_t x14_5;
            if (((x9_1 / arg1) & 1) != 0)
            {
                if ((x9_1 & 1) != 0)
                {
                    if ((x9_1 >= x11_2 || (x9_1 < x11_2 && (x9_1 % arg1) >= (arg1 - 1))))
                    {
                        char* x14_9 = &arg3[x12_1];
                        *arg4 = *arg3;
                        arg4[1] = ((*x14_9 + arg3[-1]) >> 1);
                        x13_19 = x14_9[-1];
                    }
                    if ((x9_1 < x11_2 && (x9_1 % arg1) < (arg1 - 1)))
                    {
                        void* x14_7 = &arg3[x12_1];
                        void* x15_8 = &arg3[arg1];
                        *arg4 = *arg3;
                        arg4[1] = ((((arg3[1] + arg3[-1]) + *x14_7) + *x15_8) >> 2);
                        x13_19 = ((((*(x14_7 + 1) + *(x14_7 - 1)) + *(x15_8 - 1)) + *(x15_8 + 1)) >> 2);
                    }
                }
                else
                {
                    if ((x9_1 >= x11_2 || (x9_1 < x11_2 && (x9_1 % arg1) == 0)))
                    {
                        *arg4 = arg3[1];
                        arg4[1] = *arg3;
                        x13_19 = arg3[x12_1];
                    }
                    if ((x9_1 < x11_2 && (x9_1 % arg1) != 0))
                    {
                        *arg4 = ((arg3[1] + arg3[-1]) >> 1);
                        arg4[1] = *arg3;
                        x13_12 = arg3[arg1];
                        x14_5 = arg3[x12_1];
                    label_3b368:
                        x13_19 = ((x14_5 + x13_12) >> 1);
                    }
                }
            }
            else if ((x9_1 & 1) == 0)
            {
                uint8_t x13_6;
                if ((x9_1 <= arg1 || (x9_1 > arg1 && (x9_1 % arg1) == 0)))
                {
                    void* x13_37 = &arg3[arg1];
                    *arg4 = *(x13_37 + 1);
                    x13_6 = ((*x13_37 + arg3[1]) >> 1);
                }
                if ((x9_1 > arg1 && (x9_1 % arg1) != 0))
                {
                    void* x13_3 = &arg3[x12_1];
                    void* x14_1 = &arg3[arg1];
                    *arg4 = ((((*(x13_3 + 1) + *(x13_3 - 1)) + *(x14_1 - 1)) + *(x14_1 + 1)) >> 2);
                    x13_6 = ((((arg3[1] + arg3[-1]) + *x14_1) + *x13_3) >> 2);
                }
                arg4[1] = x13_6;
                x13_19 = *arg3;
            }
            else
            {
                if ((x9_1 > arg1 && (x9_1 % arg1) < (arg1 - 1)))
                {
                    *arg4 = ((arg3[x12_1] + arg3[arg1]) >> 1);
                    arg4[1] = *arg3;
                    x13_12 = arg3[-1];
                    x14_5 = arg3[1];
                    goto label_3b368;
                }
                *arg4 = arg3[arg1];
                arg4[1] = *arg3;
                x13_19 = arg3[-1];
            }
            x9_1 = (x9_1 + 1);
            arg4[2] = x13_19;
            arg4 = &arg4[3];
            arg3 = &arg3[1];
        } while (x9_1 != x8);
    }
}

int64_t sub_3b470(uint64_t arg1)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    uint64_t var_60;
    if ((*(arg1 + 0x18) & 1) == 0)
    {
        var_60 = *(arg1 + 0x28);
        s = *(arg1 + 0x18);
    }
    else
    {
        size_t x21_1 = *(arg1 + 0x20);
        if (x21_1 < -0x10)
        {
            int64_t x0_9 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_60);
            }
            /* tailcall */
            return std::__ndk1::__next_prime(_Unwind_Resume(x0_9));
        }
        int64_t x22_1 = *(arg1 + 0x28);
        uint64_t x23_1;
        if (x21_1 >= 0x17)
        {
            uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
            uint64_t x0_1 = operator new(x24_1);
            x23_1 = x0_1;
            size_t var_68_1 = x21_1;
            var_60 = x0_1;
            s = (x24_1 | 1);
        }
        else
        {
            x23_1 = (&s | 1);
            s = (x21_1 << 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            memcpy(x23_1, x22_1, x21_1);
        }
        *(x23_1 + x21_1) = 0;
    }
    sub_31b6c(arg1);
    if ((arg1 + 0x18) != &s)
    {
        uint64_t x1_2;
        if ((s & 1) == 0)
        {
            x1_2 = (&s | 1);
        }
        else
        {
            x1_2 = var_60;
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 0x18), x1_2);
    }
    int32_t x0_6 = sub_32620(arg1, 1);
    if ((s & 1) != 0)
    {
        operator delete(var_60);
    }
    int64_t x0_8;
    if (x0_6 == 1)
    {
        x0_8 = 1;
    }
    else
    {
        x0_8 = 0;
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_8;
}

uint64_t std::__ndk1::__next_prime(int64_t arg1)
{
    if (arg1 <= 0xd3)
    {
        char const* const x8_1 = &data_3e7fc[0x2c];
        uint64_t i = 0x30;
        do
        {
            uint64_t i_2 = (i >> 1);
            void* x11_1 = &x8_1[(i_2 << 2)];
            uint64_t x12_1 = *x11_1;
            if (x12_1 < arg1)
            {
                i = (i + !(i_2));
            }
            else
            {
                i = i_2;
            }
            if (x12_1 < arg1)
            {
                x8_1 = (x11_1 + 4);
            }
        } while (i != 0);
        return *x8_1;
    }
    if (arg1 < -0x3a)
    {
        char* thrown_exception = __cxa_allocate_exception(0x10);
        sub_3bd38(thrown_exception);
        __cxa_throw(thrown_exception, _typeinfo_for_std::overflow_error, std::overflow_error::~overflow_error);
        /* no return */
    }
    uint64_t x9_2 = (arg1 / 0xd2);
    int64_t x13_2 = (x9_2 * 0xd2);
    int64_t x10_1 = (arg1 % 0xd2);
    uint64_t i_1 = 0x30;
    void* const x11_3 = &data_3e8e8;
    do
    {
        uint64_t i_3 = (i_1 >> 1);
        void* x15_1 = (x11_3 + (i_3 << 2));
        uint64_t x16_1 = *x15_1;
        if (x10_1 > x16_1)
        {
            i_1 = (i_1 + !(i_3));
        }
        else
        {
            i_1 = i_3;
        }
        if (x10_1 > x16_1)
        {
            x11_3 = (x15_1 + 4);
        }
    } while (i_1 != 0);
    int64_t x11_5 = ((x11_3 - &data_3e8e8) >> 2);
    while (true)
    {
        uint64_t x0 = (x13_2 + *(&data_3e8e8 + (x11_5 << 2)));
        int64_t x13_4 = 5;
        while (true)
        {
            uint64_t x14_2 = *(&data_3e7fc[0x2c] + (x13_4 << 2));
            uint64_t x15_3 = (x0 / x14_2);
            if (x15_3 < x14_2)
            {
                return x0;
            }
            if (x0 == (x15_3 * x14_2))
            {
                break;
            }
            x13_4 = (x13_4 + 1);
            if (x13_4 >= 0x2f)
            {
                int64_t x13_5 = 0xd3;
                bool cond:3_1;
                do
                {
                    uint64_t x14_4 = (x0 / x13_5);
                    if (x14_4 < x13_5)
                    {
                        return x0;
                    }
                    if (x0 == (x14_4 * x13_5))
                    {
                        break;
                    }
                    uint64_t x15_4 = (x0 / (x13_5 + 0xa));
                    if (x15_4 < (x13_5 + 0xa))
                    {
                        return x0;
                    }
                    if (x0 == (x15_4 * (x13_5 + 0xa)))
                    {
                        break;
                    }
                    uint64_t x16_2 = (x0 / (x13_5 + 0xc));
                    if (x16_2 < (x13_5 + 0xc))
                    {
                        return x0;
                    }
                    if (x0 == (x16_2 * (x13_5 + 0xc)))
                    {
                        break;
                    }
                    uint64_t x16_3 = (x0 / (x13_5 + 0x10));
                    if (x16_3 < (x13_5 + 0x10))
                    {
                        return x0;
                    }
                    if (x0 == (x16_3 * (x13_5 + 0x10)))
                    {
                        break;
                    }
                    uint64_t x16_4 = (x0 / (x13_5 + 0x12));
                    if (x16_4 < (x13_5 + 0x12))
                    {
                        return x0;
                    }
                    if (x0 == (x16_4 * (x13_5 + 0x12)))
                    {
                        break;
                    }
                    uint64_t x16_5 = (x0 / (x13_5 + 0x16));
                    if (x16_5 < (x13_5 + 0x16))
                    {
                        return x0;
                    }
                    if (x0 == (x16_5 * (x13_5 + 0x16)))
                    {
                        break;
                    }
                    uint64_t x16_6 = (x0 / (x13_5 + 0x1c));
                    if (x16_6 < (x13_5 + 0x1c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_6 * (x13_5 + 0x1c)))
                    {
                        break;
                    }
                    uint64_t x16_7 = (x0 / (x13_5 + 0x1e));
                    if (x16_7 < (x13_5 + 0x1e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_7 * (x13_5 + 0x1e)))
                    {
                        break;
                    }
                    uint64_t x16_8 = (x0 / (x13_5 + 0x24));
                    if (x16_8 < (x13_5 + 0x24))
                    {
                        return x0;
                    }
                    if (x0 == (x16_8 * (x13_5 + 0x24)))
                    {
                        break;
                    }
                    uint64_t x16_9 = (x0 / (x13_5 + 0x28));
                    if (x16_9 < (x13_5 + 0x28))
                    {
                        return x0;
                    }
                    if (x0 == (x16_9 * (x13_5 + 0x28)))
                    {
                        break;
                    }
                    uint64_t x16_10 = (x0 / (x13_5 + 0x2a));
                    if (x16_10 < (x13_5 + 0x2a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_10 * (x13_5 + 0x2a)))
                    {
                        break;
                    }
                    uint64_t x16_11 = (x0 / (x13_5 + 0x2e));
                    if (x16_11 < (x13_5 + 0x2e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_11 * (x13_5 + 0x2e)))
                    {
                        break;
                    }
                    uint64_t x16_12 = (x0 / (x13_5 + 0x34));
                    if (x16_12 < (x13_5 + 0x34))
                    {
                        return x0;
                    }
                    if (x0 == (x16_12 * (x13_5 + 0x34)))
                    {
                        break;
                    }
                    uint64_t x16_13 = (x0 / (x13_5 + 0x3a));
                    if (x16_13 < (x13_5 + 0x3a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_13 * (x13_5 + 0x3a)))
                    {
                        break;
                    }
                    uint64_t x16_14 = (x0 / (x13_5 + 0x3c));
                    if (x16_14 < (x13_5 + 0x3c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_14 * (x13_5 + 0x3c)))
                    {
                        break;
                    }
                    uint64_t x16_15 = (x0 / (x13_5 + 0x42));
                    if (x16_15 < (x13_5 + 0x42))
                    {
                        return x0;
                    }
                    if (x0 == (x16_15 * (x13_5 + 0x42)))
                    {
                        break;
                    }
                    uint64_t x16_16 = (x0 / (x13_5 + 0x46));
                    if (x16_16 < (x13_5 + 0x46))
                    {
                        return x0;
                    }
                    if (x0 == (x16_16 * (x13_5 + 0x46)))
                    {
                        break;
                    }
                    uint64_t x16_17 = (x0 / (x13_5 + 0x48));
                    if (x16_17 < (x13_5 + 0x48))
                    {
                        return x0;
                    }
                    if (x0 == (x16_17 * (x13_5 + 0x48)))
                    {
                        break;
                    }
                    uint64_t x16_18 = (x0 / (x13_5 + 0x4e));
                    if (x16_18 < (x13_5 + 0x4e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_18 * (x13_5 + 0x4e)))
                    {
                        break;
                    }
                    uint64_t x16_19 = (x0 / (x13_5 + 0x52));
                    if (x16_19 < (x13_5 + 0x52))
                    {
                        return x0;
                    }
                    if (x0 == (x16_19 * (x13_5 + 0x52)))
                    {
                        break;
                    }
                    uint64_t x16_20 = (x0 / (x13_5 + 0x58));
                    if (x16_20 < (x13_5 + 0x58))
                    {
                        return x0;
                    }
                    if (x0 == (x16_20 * (x13_5 + 0x58)))
                    {
                        break;
                    }
                    uint64_t x16_21 = (x0 / (x13_5 + 0x60));
                    if (x16_21 < (x13_5 + 0x60))
                    {
                        return x0;
                    }
                    if (x0 == (x16_21 * (x13_5 + 0x60)))
                    {
                        break;
                    }
                    uint64_t x16_22 = (x0 / (x13_5 + 0x64));
                    if (x16_22 < (x13_5 + 0x64))
                    {
                        return x0;
                    }
                    if (x0 == (x16_22 * (x13_5 + 0x64)))
                    {
                        break;
                    }
                    uint64_t x16_23 = (x0 / (x13_5 + 0x66));
                    if (x16_23 < (x13_5 + 0x66))
                    {
                        return x0;
                    }
                    if (x0 == (x16_23 * (x13_5 + 0x66)))
                    {
                        break;
                    }
                    uint64_t x16_24 = (x0 / (x13_5 + 0x6a));
                    if (x16_24 < (x13_5 + 0x6a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_24 * (x13_5 + 0x6a)))
                    {
                        break;
                    }
                    uint64_t x16_25 = (x0 / (x13_5 + 0x6c));
                    if (x16_25 < (x13_5 + 0x6c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_25 * (x13_5 + 0x6c)))
                    {
                        break;
                    }
                    uint64_t x16_26 = (x0 / (x13_5 + 0x70));
                    if (x16_26 < (x13_5 + 0x70))
                    {
                        return x0;
                    }
                    if (x0 == (x16_26 * (x13_5 + 0x70)))
                    {
                        break;
                    }
                    uint64_t x16_27 = (x0 / (x13_5 + 0x78));
                    if (x16_27 < (x13_5 + 0x78))
                    {
                        return x0;
                    }
                    if (x0 == (x16_27 * (x13_5 + 0x78)))
                    {
                        break;
                    }
                    uint64_t x16_28 = (x0 / (x13_5 + 0x7e));
                    if (x16_28 < (x13_5 + 0x7e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_28 * (x13_5 + 0x7e)))
                    {
                        break;
                    }
                    uint64_t x16_29 = (x0 / (x13_5 + 0x82));
                    if (x16_29 < (x13_5 + 0x82))
                    {
                        return x0;
                    }
                    if (x0 == (x16_29 * (x13_5 + 0x82)))
                    {
                        break;
                    }
                    uint64_t x16_30 = (x0 / (x13_5 + 0x88));
                    if (x16_30 < (x13_5 + 0x88))
                    {
                        return x0;
                    }
                    if (x0 == (x16_30 * (x13_5 + 0x88)))
                    {
                        break;
                    }
                    uint64_t x16_31 = (x0 / (x13_5 + 0x8a));
                    if (x16_31 < (x13_5 + 0x8a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_31 * (x13_5 + 0x8a)))
                    {
                        break;
                    }
                    uint64_t x16_32 = (x0 / (x13_5 + 0x8e));
                    if (x16_32 < (x13_5 + 0x8e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_32 * (x13_5 + 0x8e)))
                    {
                        break;
                    }
                    uint64_t x16_33 = (x0 / (x13_5 + 0x94));
                    if (x16_33 < (x13_5 + 0x94))
                    {
                        return x0;
                    }
                    if (x0 == (x16_33 * (x13_5 + 0x94)))
                    {
                        break;
                    }
                    uint64_t x16_34 = (x0 / (x13_5 + 0x96));
                    if (x16_34 < (x13_5 + 0x96))
                    {
                        return x0;
                    }
                    if (x0 == (x16_34 * (x13_5 + 0x96)))
                    {
                        break;
                    }
                    uint64_t x16_35 = (x0 / (x13_5 + 0x9c));
                    if (x16_35 < (x13_5 + 0x9c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_35 * (x13_5 + 0x9c)))
                    {
                        break;
                    }
                    uint64_t x16_36 = (x0 / (x13_5 + 0xa2));
                    if (x16_36 < (x13_5 + 0xa2))
                    {
                        return x0;
                    }
                    if (x0 == (x16_36 * (x13_5 + 0xa2)))
                    {
                        break;
                    }
                    uint64_t x16_37 = (x0 / (x13_5 + 0xa6));
                    if (x16_37 < (x13_5 + 0xa6))
                    {
                        return x0;
                    }
                    if (x0 == (x16_37 * (x13_5 + 0xa6)))
                    {
                        break;
                    }
                    uint64_t x16_38 = (x0 / (x13_5 + 0xa8));
                    if (x16_38 < (x13_5 + 0xa8))
                    {
                        return x0;
                    }
                    if (x0 == (x16_38 * (x13_5 + 0xa8)))
                    {
                        break;
                    }
                    uint64_t x16_39 = (x0 / (x13_5 + 0xac));
                    if (x16_39 < (x13_5 + 0xac))
                    {
                        return x0;
                    }
                    if (x0 == (x16_39 * (x13_5 + 0xac)))
                    {
                        break;
                    }
                    uint64_t x16_40 = (x0 / (x13_5 + 0xb2));
                    if (x16_40 < (x13_5 + 0xb2))
                    {
                        return x0;
                    }
                    if (x0 == (x16_40 * (x13_5 + 0xb2)))
                    {
                        break;
                    }
                    uint64_t x16_41 = (x0 / (x13_5 + 0xb4));
                    if (x16_41 < (x13_5 + 0xb4))
                    {
                        return x0;
                    }
                    if (x0 == (x16_41 * (x13_5 + 0xb4)))
                    {
                        break;
                    }
                    uint64_t x16_42 = (x0 / (x13_5 + 0xba));
                    if (x16_42 < (x13_5 + 0xba))
                    {
                        return x0;
                    }
                    if (x0 == (x16_42 * (x13_5 + 0xba)))
                    {
                        break;
                    }
                    uint64_t x16_43 = (x0 / (x13_5 + 0xbe));
                    if (x16_43 < (x13_5 + 0xbe))
                    {
                        return x0;
                    }
                    if (x0 == (x16_43 * (x13_5 + 0xbe)))
                    {
                        break;
                    }
                    uint64_t x16_44 = (x0 / (x13_5 + 0xc0));
                    if (x16_44 < (x13_5 + 0xc0))
                    {
                        return x0;
                    }
                    if (x0 == (x16_44 * (x13_5 + 0xc0)))
                    {
                        break;
                    }
                    uint64_t x16_45 = (x0 / (x13_5 + 0xc4));
                    if (x16_45 < (x13_5 + 0xc4))
                    {
                        return x0;
                    }
                    if (x0 == (x16_45 * (x13_5 + 0xc4)))
                    {
                        break;
                    }
                    uint64_t x16_46 = (x0 / (x13_5 + 0xc6));
                    if (x16_46 < (x13_5 + 0xc6))
                    {
                        return x0;
                    }
                    if (x0 == (x16_46 * (x13_5 + 0xc6)))
                    {
                        break;
                    }
                    uint64_t x16_47 = (x0 / (x13_5 + 0xd0));
                    if (x16_47 < (x13_5 + 0xd0))
                    {
                        return x0;
                    }
                    cond:3_1 = x0 != (x16_47 * (x13_5 + 0xd0));
                    x13_5 = (x13_5 + 0xd2);
                } while (cond:3_1);
                break;
            }
        }
        if (x11_5 == 0x2f)
        {
            x9_2 = (x9_2 + 1);
        }
        if (x11_5 == 0x2f)
        {
            x11_5 = 0;
        }
        else
        {
            x11_5 = (x11_5 + 1);
        }
        x13_2 = (x9_2 * 0xd2);
    }
}

int64_t sub_3bd38(char* arg1)
{
    int64_t x0 = std::runtime_error::runtime_error(arg1);
    *arg1 = (_vtable_for_std::overflow_error + 0x10);
    return x0;
}

