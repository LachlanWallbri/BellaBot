int64_t sub_10410()
{
    /* jump -> nullptr */
}

int64_t nlohmann::detail::type_error::create(int32_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return nlohmann::detail::type_error::create(arg1, arg2);
}

int64_t nlohmann::detail::exception::name(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int32_t arg2)
{
    /* tailcall */
    return nlohmann::detail::exception::name(arg1, arg2);
}

int64_t strerror(int32_t arg1)
{
    /* tailcall */
    return strerror(arg1);
}

int64_t memcpy(int64_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return memcpy(arg1, arg2, arg3);
}

int64_t pudutech::Ashdmem::releaseSharedMemory()
{
    /* tailcall */
    return pudutech::Ashdmem::releaseSharedMemory();
}

int64_t std::__ndk1::__shared_weak_count::__get_deleter(std::type_info* arg1)
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__get_deleter(arg1);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(char const (** arg1)[0x1])
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(arg1);
}

int64_t std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >::insert<char*>(int64_t arg1, char* arg2, char* arg3)
{
    /* tailcall */
    return std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >::insert<char*>(arg1, arg2, arg3);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(arg1);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(arg1);
}

int64_t std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(char* arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(arg1, arg2);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<double&>(double** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<double&>(arg1);
}

int64_t pudutech::ThreadTaskQueue::init()
{
    /* tailcall */
    return pudutech::ThreadTaskQueue::init();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::destroy(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::destroy(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(uint64_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg3)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg1, arg2, arg3);
}

int64_t operator delete(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(uint64_t arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(arg1);
}

int64_t pudutech::Ashdmem::linkSharedMemory(int32_t arg1)
{
    /* tailcall */
    return pudutech::Ashdmem::linkSharedMemory(arg1);
}

int64_t close(int32_t arg1)
{
    /* tailcall */
    return close(arg1);
}

int64_t std::logic_error::logic_error(char* arg1)
{
    /* tailcall */
    return std::logic_error::logic_error(arg1);
}

int64_t nlohmann::detail::invalid_iterator::invalid_iterator(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::invalid_iterator::invalid_iterator(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2);
}

int64_t std::runtime_error::runtime_error(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::runtime_error::runtime_error(arg1);
}

int64_t std::__ndk1::ios_base::clear(uint32_t arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::clear(arg1);
}

int64_t std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(arg1, arg2);
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::operator[](std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::operator[](arg1);
}

int64_t __cxa_end_catch()
{
    /* tailcall */
    return __cxa_end_catch();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::erase(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::erase(arg1);
}

int64_t __cxa_allocate_exception()
{
    /* tailcall */
    return __cxa_allocate_exception();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::erase(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::erase(arg1);
}

int64_t pthread_setname_np()
{
    /* tailcall */
    return pthread_setname_np();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t arg2, bool arg3)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(arg1, arg2, arg3);
}

int64_t std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*> >::push_front(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*> >::push_front(arg1);
}

int64_t protocol::DomainSockClient::processLoop(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return protocol::DomainSockClient::processLoop(arg1);
}

int64_t std::__ndk1::__basic_string_common<true>::__throw_out_of_range()
{
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
}

int64_t std::exception::what()
{
    /* tailcall */
    return std::exception::what();
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_number()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_number();
}

int64_t std::__ndk1::thread::detach()
{
    /* tailcall */
    return std::__ndk1::thread::detach();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<uint64_t&>(uint64_t** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<uint64_t&>(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array()
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array();
}

int64_t std::__ndk1::ios_base::__set_badbit_and_consider_rethrow()
{
    /* tailcall */
    return std::__ndk1::ios_base::__set_badbit_and_consider_rethrow();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1);
}

int64_t std::__ndk1::__deque_base<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::clear()
{
    /* tailcall */
    return std::__ndk1::__deque_base<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::clear();
}

int64_t pudutech::ThreadRunner::getMutex()
{
    /* tailcall */
    return pudutech::ThreadRunner::getMutex();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry()
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2);
}

int64_t nlohmann::detail::out_of_range::out_of_range(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::out_of_range::out_of_range(arg1);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::vector(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::vector(arg1);
}

int64_t std::__ndk1::mutex::unlock()
{
    /* tailcall */
    return std::__ndk1::mutex::unlock();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(uint64_t** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(arg1, arg2);
}

int64_t std::__ndk1::__shared_weak_count::~__shared_weak_count()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t pthread_setspecific()
{
    /* tailcall */
    return pthread_setspecific();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<int64_t&>(int64_t** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<int64_t&>(arg1);
}

int64_t std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, char* arg2, uint64_t arg3)
{
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg1, arg2, arg3);
}

int64_t send(int32_t arg1, int64_t arg2, size_t arg3, int32_t arg4)
{
    /* tailcall */
    return send(arg1, arg2, arg3, arg4);
}

int64_t __cxa_guard_release()
{
    /* tailcall */
    return __cxa_guard_release();
}

int64_t memmove(int64_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return memmove(arg1, arg2, arg3);
}

int64_t bind()
{
    /* tailcall */
    return bind();
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg1);
}

int64_t strlen(char* arg1)
{
    /* tailcall */
    return strlen(arg1);
}

int64_t std::__ndk1::function<bool ()>::~function()
{
    /* tailcall */
    return std::__ndk1::function<bool ()>::~function();
}

int64_t pthread_self()
{
    /* tailcall */
    return pthread_self();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t std::__ndk1::__thread_struct::__thread_struct()
{
    /* tailcall */
    return std::__ndk1::__thread_struct::__thread_struct();
}

int64_t protocol::DomainSockServer::processLoop(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return protocol::DomainSockServer::processLoop(arg1);
}

int64_t std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(arg1, arg2);
}

int64_t g3::logLevel(int64_t arg1)
{
    /* tailcall */
    return g3::logLevel(arg1);
}

int64_t std::__ndk1::thread::join()
{
    /* tailcall */
    return std::__ndk1::thread::join();
}

int64_t LogCapture::LogCapture(char* arg1, LEVELS* arg2, char* arg3, int32_t arg4, char* arg5)
{
    /* tailcall */
    return LogCapture::LogCapture(arg1, arg2, arg3, arg4, arg5);
}

int128_t strtod(char* arg1, char** arg2)
{
    /* tailcall */
    return strtod(arg1, arg2);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int32_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t pudutech::ThreadRunner::init(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, bool arg2, bool arg3, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg4)
{
    /* tailcall */
    return pudutech::ThreadRunner::init(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::condition_variable::~condition_variable()
{
    /* tailcall */
    return std::__ndk1::condition_variable::~condition_variable();
}

int64_t nlohmann::detail::type_error::type_error(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::type_error::type_error(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser()
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser();
}

int64_t munmap()
{
    /* tailcall */
    return munmap();
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string();
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(int64_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, arg2);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(arg1);
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(arg1);
}

int64_t snprintf()
{
    /* tailcall */
    return snprintf();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1);
}

int64_t protocol::DomainSockServer::triggerPluginProcess(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t arg2)
{
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(arg1, arg2);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(int64_t** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(arg1, arg2);
}

int64_t nlohmann::detail::invalid_iterator::create(int32_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return nlohmann::detail::invalid_iterator::create(arg1, arg2);
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(bool arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(arg1, arg2);
}

int64_t listen()
{
    /* tailcall */
    return listen();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg1);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(int64_t** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(arg1);
}

int64_t std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(arg1, arg2);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg1);
}

int64_t std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(int64_t arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(arg1, arg2, arg3);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(int64_t arg1, int64_t arg2, int64_t arg3, bool arg4)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t arg2)
{
    /* tailcall */
    return std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(arg1, arg2);
}

int64_t protocol::DomainSockClient::triggerPluginProcess(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t arg2)
{
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(arg1, arg2);
}

int64_t connect(int32_t arg1, union __CONST_SOCKADDR_ARG arg2, socklen_t arg3)
{
    /* tailcall */
    return connect(arg1, arg2, arg3);
}

int64_t std::__ndk1::deque<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::push_back(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::deque<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::push_back(arg1);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>(arg1);
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parser(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t arg2, bool arg3)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parser(arg1, arg2, arg3);
}

int64_t protocol::DomainSockClient::send(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t arg2)
{
    /* tailcall */
    return protocol::DomainSockClient::send(arg1, arg2);
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::~map()
{
    /* tailcall */
    return std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::~map();
}

int64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(arg1);
}

int64_t nlohmann::detail::parse_error::position_string(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::parse_error::position_string(arg1);
}

int64_t std::__ndk1::__vector_base_common<true>::__throw_length_error()
{
    /* tailcall */
    return std::__ndk1::__vector_base_common<true>::__throw_length_error();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(arg1);
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<bool&>(bool** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<bool&>(arg1);
}

int64_t std::__ndk1::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t arg2)
{
    /* tailcall */
    return std::__ndk1::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(arg1, arg2);
}

int64_t pthread_create()
{
    /* tailcall */
    return pthread_create();
}

int64_t nlohmann::detail::parse_error::create(int32_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg3)
{
    /* tailcall */
    return nlohmann::detail::parse_error::create(arg1, arg2, arg3);
}

int64_t nlohmann::detail::out_of_range::create(int32_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2)
{
    /* tailcall */
    return nlohmann::detail::out_of_range::create(arg1, arg2);
}

int64_t protocol::DomainSockClient::create(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return protocol::DomainSockClient::create(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object()
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object();
}

int64_t LogCapture::~LogCapture()
{
    /* tailcall */
    return LogCapture::~LogCapture();
}

int64_t mmap(int64_t arg1, size_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    /* tailcall */
    return mmap(arg1, arg2, arg3, arg4, arg5);
}

int64_t std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*>&>::push_front(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*>&>::push_front(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__emplace_hint_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > const&>(int64_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg3)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__emplace_hint_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > const&>(arg1, arg2, arg3);
}

int64_t std::__ndk1::to_string(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::to_string(arg1);
}

int64_t strcpy()
{
    /* tailcall */
    return strcpy();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >*** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>(arg1);
}

int64_t std::__ndk1::to_string(int32_t arg1)
{
    /* tailcall */
    return std::__ndk1::to_string(arg1);
}

int64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator->()
{
    /* tailcall */
    return nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator->();
}

int64_t std::__ndk1::deque<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::__add_back_capacity()
{
    /* tailcall */
    return std::__ndk1::deque<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::__add_back_capacity();
}

int64_t std::runtime_error::~runtime_error()
{
    /* tailcall */
    return std::runtime_error::~runtime_error();
}

int64_t std::runtime_error::runtime_error(char* arg1)
{
    /* tailcall */
    return std::runtime_error::runtime_error(arg1);
}

int64_t memset(int64_t arg1, int32_t arg2, size_t arg3)
{
    /* tailcall */
    return memset(arg1, arg2, arg3);
}

int64_t std::__ndk1::function<void ()>::~function()
{
    /* tailcall */
    return std::__ndk1::function<void ()>::~function();
}

int64_t std::runtime_error::what()
{
    /* tailcall */
    return std::runtime_error::what();
}

int64_t __gxx_personality_v0()
{
    /* tailcall */
    return __gxx_personality_v0();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg1);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(uint64_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg3)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg1, arg2, arg3);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint();
}

int64_t std::__ndk1::__shared_weak_count::__release_weak()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__release_weak();
}

int64_t pudutech::ThreadRunner::wakeup()
{
    /* tailcall */
    return pudutech::ThreadRunner::wakeup();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(int64_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg2, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg3, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg4)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2, arg3, arg4);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg1);
}

void* __cxa_begin_catch(void* exceptionObject)
{
    /* tailcall */
    return __cxa_begin_catch(exceptionObject);
}

int64_t ioctl()
{
    /* tailcall */
    return ioctl();
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(std::nullptr_t* arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(arg1);
}

void __cxa_throw(void* thrown_exception, void* tinfo, void (* dest)(void* retval)) __noreturn
{
    /* tailcall */
    return __cxa_throw(thrown_exception, tinfo, dest);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(bool** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg1);
}

int32_t __cxa_atexit(void (* func)(void* retval), void* arg, void* dso_handle)
{
    /* tailcall */
    return __cxa_atexit(func, arg, dso_handle);
}

int64_t setsockopt()
{
    /* tailcall */
    return setsockopt();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg1, arg2);
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::~map()
{
    /* tailcall */
    return std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::~map();
}

int64_t g3::logTag(int64_t arg1)
{
    /* tailcall */
    return g3::logTag(arg1);
}

int64_t protocol::DomainSockServer::create(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return protocol::DomainSockServer::create(arg1);
}

int64_t _Unwind_Resume()
{
    /* tailcall */
    return _Unwind_Resume();
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(arg1, arg2);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(int64_t arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(arg1);
}

int64_t memcmp()
{
    /* tailcall */
    return memcmp();
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::nullptr_t>(std::nullptr_t* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::nullptr_t>(arg1);
}

int64_t protocol::DomainSockServer::send(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t arg2)
{
    /* tailcall */
    return protocol::DomainSockServer::send(arg1, arg2);
}

int64_t __errno()
{
    /* tailcall */
    return __errno();
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg1, arg2);
}

int64_t std::exception::~exception()
{
    /* tailcall */
    return std::exception::~exception();
}

int64_t std::__ndk1::condition_variable::notify_one()
{
    /* tailcall */
    return std::__ndk1::condition_variable::notify_one();
}

int64_t std::__ndk1::chrono::steady_clock::now()
{
    /* tailcall */
    return std::__ndk1::chrono::steady_clock::now();
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
}

int64_t std::__ndk1::thread::~thread()
{
    /* tailcall */
    return std::__ndk1::thread::~thread();
}

int64_t std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(arg1);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(uint64_t arg1, char* arg2, uint64_t arg3)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(arg1, arg2, arg3);
}

int64_t operator new(uint64_t arg1)
{
    /* tailcall */
    return operator new(arg1);
}

int64_t strtoll(char* arg1, char** arg2, int32_t arg3)
{
    /* tailcall */
    return strtoll(arg1, arg2, arg3);
}

int64_t pudutech::Ashdmem::closeSharedMemory()
{
    /* tailcall */
    return pudutech::Ashdmem::closeSharedMemory();
}

int64_t localeconv()
{
    /* tailcall */
    return localeconv();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_object(uint64_t arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_object(arg1);
}

int64_t __cxa_finalize(int64_t arg1)
{
    /* tailcall */
    return __cxa_finalize(arg1);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(uint64_t** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(std::nullptr_t* arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(arg1, arg2);
}

int64_t recv(int32_t arg1, int64_t arg2, size_t arg3, int32_t arg4)
{
    /* tailcall */
    return recv(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(char arg1)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(arg1);
}

int64_t std::__ndk1::__thread_struct::~__thread_struct()
{
    /* tailcall */
    return std::__ndk1::__thread_struct::~__thread_struct();
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(double** arg1)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(arg1);
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset()
{
    /* tailcall */
    return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset();
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > > const&>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > > const&>(arg1);
}

int64_t std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*>&>::push_back(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*>&>::push_back(arg1);
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg1);
}

int64_t std::__ndk1::ios_base::getloc()
{
    /* tailcall */
    return std::__ndk1::ios_base::getloc();
}

int64_t socket()
{
    /* tailcall */
    return socket();
}

void __stack_chk_fail() __noreturn
{
    /* tailcall */
    return __stack_chk_fail();
}

int64_t accept(int32_t arg1, union __SOCKADDR_ARG arg2, socklen_t* arg3)
{
    /* tailcall */
    return accept(arg1, arg2, arg3);
}

int64_t pudutech::ThreadRunner::exit(bool arg1)
{
    /* tailcall */
    return pudutech::ThreadRunner::exit(arg1);
}

int64_t pudutech::ThreadTaskQueue::~ThreadTaskQueue()
{
    /* tailcall */
    return pudutech::ThreadTaskQueue::~ThreadTaskQueue();
}

int64_t nlohmann::detail::other_error::other_error(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::other_error::other_error(arg1);
}

int64_t std::__ndk1::mutex::~mutex()
{
    /* tailcall */
    return std::__ndk1::mutex::~mutex();
}

int64_t nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, 0>(int64_t arg1)
{
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, 0>(arg1);
}

int64_t std::__ndk1::__thread_local_data()
{
    /* tailcall */
    return std::__ndk1::__thread_local_data();
}

int64_t pudutech::ThreadRunner::~ThreadRunner()
{
    /* tailcall */
    return pudutech::ThreadRunner::~ThreadRunner();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(arg1);
}

int64_t std::__ndk1::shared_ptr<std::__ndk1::thread>::~shared_ptr()
{
    /* tailcall */
    return std::__ndk1::shared_ptr<std::__ndk1::thread>::~shared_ptr();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::destroy(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::destroy(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(bool** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg1, arg2);
}

int64_t std::__ndk1::condition_variable::wait(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::condition_variable::wait(arg1);
}

int32_t std::terminate() __noreturn
{
    /* tailcall */
    return std::terminate();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg1, arg2);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1);
}

int64_t std::__ndk1::locale::~locale()
{
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush()
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
}

int64_t std::__ndk1::locale::use_facet(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::locale::use_facet(arg1);
}

int64_t std::uncaught_exception()
{
    /* tailcall */
    return std::uncaught_exception();
}

int64_t nlohmann::detail::parse_error::parse_error(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::parse_error::parse_error(arg1);
}

int64_t std::__ndk1::mutex::lock()
{
    /* tailcall */
    return std::__ndk1::mutex::lock();
}

int64_t std::__ndk1::__throw_system_error(int32_t arg1, char* arg2)
{
    /* tailcall */
    return std::__ndk1::__throw_system_error(arg1, arg2);
}

int64_t std::__ndk1::__basic_string_common<true>::__throw_length_error()
{
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_length_error();
}

int64_t std::__ndk1::__shared_weak_count::lock()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::lock();
}

int64_t pudutech::ThreadRunner::create(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, bool arg2, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg3, bool arg4, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg5)
{
    /* tailcall */
    return pudutech::ThreadRunner::create(arg1, arg2, arg3, arg4, arg5);
}

int64_t open()
{
    /* tailcall */
    return open();
}

int64_t std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*> >::push_back(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1)
{
    /* tailcall */
    return std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*> >::push_back(arg1);
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(double** arg1, bool arg2)
{
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(arg1, arg2);
}

int64_t __cxa_free_exception()
{
    /* tailcall */
    return __cxa_free_exception();
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(arg1);
}

int64_t __cxa_guard_acquire()
{
    /* tailcall */
    return __cxa_guard_acquire();
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::operator[](std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    /* tailcall */
    return std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::operator[](arg1);
}

int64_t strtoull(char* arg1, char** arg2, int32_t arg3)
{
    /* tailcall */
    return strtoull(arg1, arg2, arg3);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string()
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string();
}

int64_t _start()
{
    __bss_start = 0x64;
    data_45038 = 0x4402;  {  // {"ctD1Ev"}}
    __builtin_memset(&data_4503a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &__bss_start, &data_45000);
    data_45050 = 0x32;
    data_45058 = 0x5602;  {  // {"EEEEENS_9allocatorIS9_EEFbvEEclE…"}}
    __builtin_memset(&data_4505a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45050, &data_45000);
    data_45070 = 0x12c;
    data_45078 = 0x4902;  {  // {"St9terminatev"}}
    __builtin_memset(&data_4507a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45070, &data_45000);
    data_45090 = 0x1f4;
    data_45098 = 0x5702;  {  // {"vEJNS_10shared_ptrIS4_EEEEENS_9a…"}}
    __builtin_memset(&data_4509a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45090, &data_45000);
    data_450b0 = 0x320;
    data_450b8 = 0x4502;  {  // {"ndk119__shared_weak_count4lockEv"}}
    __builtin_memset(&data_450ba, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_450b0, &data_45000);
    data_450d0 = 0x3e8;
    data_450d8 = 0x4602;  {  // {"_ptr_pointerIPN8pudutech12Thread…"}}
    __builtin_memset(&data_450da, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_450d0, &data_45000);
    data_450f0 = 0x7d0;
    data_450f8 = 0x10;
    __builtin_strncpy(&data_450f9, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_450f0, &data_45000);
    data_45110 = 0x7d1;
    data_45118 = 0x18;
    __builtin_strncpy(&data_45119, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45110, &data_45000);
    data_45130 = 0x7d2;
    data_45138 = 0x1e;
    __builtin_strncpy(&data_45139, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45130, &data_45000);
    __builtin_memset(&data_45150, 0, 0x18);
    data_45150 = 0x10;
    __builtin_strncpy(&data_45151, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_45150, &data_45000);
    __builtin_memset(&data_45168, 0, 0x18);
    data_45168 = 0x18;
    __builtin_strncpy(&data_45169, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_45168, &data_45000);
}

int64_t sub_11474()
{
    data_45180 = 0x64;
    data_45188 = 0x4402;  {  // {"ctD1Ev"}}
    __builtin_memset(&data_4518a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45180, &data_45000);
    data_451a0 = 0x32;
    data_451a8 = 0x5602;  {  // {"EEEEENS_9allocatorIS9_EEFbvEEclE…"}}
    __builtin_memset(&data_451aa, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_451a0, &data_45000);
    data_451c0 = 0x12c;
    data_451c8 = 0x4902;  {  // {"St9terminatev"}}
    __builtin_memset(&data_451ca, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_451c0, &data_45000);
    data_451e0 = 0x1f4;
    data_451e8 = 0x5702;  {  // {"vEJNS_10shared_ptrIS4_EEEEENS_9a…"}}
    __builtin_memset(&data_451ea, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_451e0, &data_45000);
    data_45200 = 0x320;
    data_45208 = 0x4502;  {  // {"ndk119__shared_weak_count4lockEv"}}
    __builtin_memset(&data_4520a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45200, &data_45000);
    data_45220 = 0x3e8;
    data_45228 = 0x4602;  {  // {"_ptr_pointerIPN8pudutech12Thread…"}}
    __builtin_memset(&data_4522a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45220, &data_45000);
    data_45240 = 0x7d0;
    data_45248 = 0x10;
    __builtin_strncpy(&data_45249, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45240, &data_45000);
    data_45260 = 0x7d1;
    data_45268 = 0x18;
    __builtin_strncpy(&data_45269, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45260, &data_45000);
    data_45280 = 0x7d2;
    data_45288 = 0x1e;
    __builtin_strncpy(&data_45289, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45280, &data_45000);
    __builtin_memset(&data_452a0, 0, 0x18);
    data_452a0 = 0x10;
    __builtin_strncpy(&data_452a1, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_452a0, &data_45000);
    __builtin_memset(&data_452b8, 0, 0x18);
    data_452b8 = 0x18;
    __builtin_strncpy(&data_452b9, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_452b8, &data_45000);
}

int64_t sub_11718()
{
    data_452d0 = 0x64;
    data_452d8 = 0x4402;  {  // {"ctD1Ev"}}
    __builtin_memset(&data_452da, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_452d0, &data_45000);
    data_452f0 = 0x32;
    data_452f8 = 0x5602;  {  // {"EEEEENS_9allocatorIS9_EEFbvEEclE…"}}
    __builtin_memset(&data_452fa, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_452f0, &data_45000);
    data_45310 = 0x12c;
    data_45318 = 0x4902;  {  // {"St9terminatev"}}
    __builtin_memset(&data_4531a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45310, &data_45000);
    data_45330 = 0x1f4;
    data_45338 = 0x5702;  {  // {"vEJNS_10shared_ptrIS4_EEEEENS_9a…"}}
    __builtin_memset(&data_4533a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45330, &data_45000);
    data_45350 = 0x320;
    data_45358 = 0x4502;  {  // {"ndk119__shared_weak_count4lockEv"}}
    __builtin_memset(&data_4535a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45350, &data_45000);
    data_45370 = 0x3e8;
    data_45378 = 0x4602;  {  // {"_ptr_pointerIPN8pudutech12Thread…"}}
    __builtin_memset(&data_4537a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45370, &data_45000);
    data_45390 = 0x7d0;
    data_45398 = 0x10;
    __builtin_strncpy(&data_45399, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45390, &data_45000);
    data_453b0 = 0x7d1;
    data_453b8 = 0x18;
    __builtin_strncpy(&data_453b9, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_453b0, &data_45000);
    data_453d0 = 0x7d2;
    data_453d8 = 0x1e;
    __builtin_strncpy(&data_453d9, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_453d0, &data_45000);
    __builtin_memset(&data_453f0, 0, 0x18);
    data_453f0 = 0x10;
    __builtin_strncpy(&data_453f1, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_453f0, &data_45000);
    __builtin_memset(&data_45408, 0, 0x18);
    data_45408 = 0x18;
    __builtin_strncpy(&data_45409, "%H:%M:%S %f3", 0xd);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_45408, &data_45000);
    data_45420 = 0;
    data_45428 = 0;
    __builtin_strncpy(&data_45420, "*/pudutech/domain_sock", 0x18);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_45420, &data_45000);
}

int64_t sub_119fc()
{
    data_455b0 = 0x64;
    data_455b8 = 0x4402;  {  // {"ctD1Ev"}}
    __builtin_memset(&data_455ba, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_455b0, &data_45000);
    data_455d0 = 0x32;
    data_455d8 = 0x5602;  {  // {"EEEEENS_9allocatorIS9_EEFbvEEclE…"}}
    __builtin_memset(&data_455da, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_455d0, &data_45000);
    data_455f0 = 0x12c;
    data_455f8 = 0x4902;  {  // {"St9terminatev"}}
    __builtin_memset(&data_455fa, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_455f0, &data_45000);
    data_45610 = 0x1f4;
    data_45618 = 0x5702;  {  // {"vEJNS_10shared_ptrIS4_EEEEENS_9a…"}}
    __builtin_memset(&data_4561a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45610, &data_45000);
    data_45630 = 0x320;
    data_45638 = 0x4502;  {  // {"ndk119__shared_weak_count4lockEv"}}
    __builtin_memset(&data_4563a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45630, &data_45000);
    data_45650 = 0x3e8;
    data_45658 = 0x4602;  {  // {"_ptr_pointerIPN8pudutech12Thread…"}}
    __builtin_memset(&data_4565a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45650, &data_45000);
    data_45670 = 0x7d0;
    data_45678 = 0x10;
    __builtin_strncpy(&data_45679, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45670, &data_45000);
    data_45690 = 0x7d1;
    data_45698 = 0x18;
    __builtin_strncpy(&data_45699, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45690, &data_45000);
    data_456b0 = 0x7d2;
    data_456b8 = 0x1e;
    __builtin_strncpy(&data_456b9, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_456b0, &data_45000);
    __builtin_memset(&data_456d0, 0, 0x18);
    data_456d0 = 0x10;
    __builtin_strncpy(&data_456d1, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_456d0, &data_45000);
    __builtin_memset(&data_456e8, 0, 0x18);
    data_456e8 = 0x18;
    __builtin_strncpy(&data_456e9, "%H:%M:%S %f3", 0xd);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_456e8, &data_45000);
    data_45700 = 0;
    data_45708 = 0;
    __builtin_strncpy(&data_45700, "*/pudutech/domain_sock", 0x18);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_45700, &data_45000);
}

int64_t sub_11ce0()
{
    data_45718 = 0x64;
    data_45720 = 0x4402;  {  // {"ctD1Ev"}}
    __builtin_memset(&data_45722, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45718, &data_45000);
    data_45738 = 0x32;
    data_45740 = 0x5602;  {  // {"EEEEENS_9allocatorIS9_EEFbvEEclE…"}}
    __builtin_memset(&data_45742, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45738, &data_45000);
    data_45758 = 0x12c;
    data_45760 = 0x4902;  {  // {"St9terminatev"}}
    __builtin_memset(&data_45762, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45758, &data_45000);
    data_45778 = 0x1f4;
    data_45780 = 0x5702;  {  // {"vEJNS_10shared_ptrIS4_EEEEENS_9a…"}}
    __builtin_memset(&data_45782, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45778, &data_45000);
    data_45798 = 0x320;
    data_457a0 = 0x4502;  {  // {"ndk119__shared_weak_count4lockEv"}}
    __builtin_memset(&data_457a2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_45798, &data_45000);
    data_457b8 = 0x3e8;
    data_457c0 = 0x4602;  {  // {"_ptr_pointerIPN8pudutech12Thread…"}}
    __builtin_memset(&data_457c2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_457b8, &data_45000);
    data_457d8 = 0x7d0;
    data_457e0 = 0x10;
    __builtin_strncpy(&data_457e1, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_457d8, &data_45000);
    data_457f8 = 0x7d1;
    data_45800 = 0x18;
    __builtin_strncpy(&data_45801, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_457f8, &data_45000);
    data_45818 = 0x7d2;
    data_45820 = 0x1e;
    __builtin_strncpy(&data_45821, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_45818, &data_45000);
    __builtin_memset(&data_45838, 0, 0x18);
    data_45838 = 0x10;
    __builtin_strncpy(&data_45839, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_45838, &data_45000);
    __builtin_memset(&data_45850, 0, 0x18);
    data_45850 = 0x18;
    __builtin_strncpy(&data_45851, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_45850, &data_45000);
}

int64_t sub_11f84()
{
    /* tailcall */
    return __cxa_finalize(&data_45000);
}

int64_t sub_11f90() __pure
{
    return;
}

int64_t j_sub_11f90()
{
    /* tailcall */
    return sub_11f90();
}

int64_t sub_11f9c(int64_t arg1)
{
    /* jump -> arg1 */
}

void std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string(char* arg1)
{
    if ((*arg1 & 1) != 0)
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x10));
    }
}

void LEVELS::~LEVELS(void* arg1)
{
    if ((*(arg1 + 8) & 1) != 0)
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x18));
    }
}

int64_t pudutech::ThreadRunner::create(bool arg1, char arg2, char* arg3, int32_t arg4, int64_t* arg5 @ x8)
{
    int64_t s = operator new(0x100);
    __builtin_memset(s, 0, 0x100);
    std::__ndk1::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(arg5, s);
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_1 = *arg5;
    if ((x0_1 + 0xe0) != arg3)
    {
        *(arg3 + 8);
        void* x1_1;
        if ((*arg3 & 1) != 0)
        {
            x1_1 = *(arg3 + 0x10);
        }
        else
        {
            x1_1 = &arg3[1];
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((x0_1 + 0xe0), x1_1);
        x0_1 = *arg5;
    }
    return pudutech::ThreadRunner::init(x0_1, arg1, (arg2 & 1), (arg4 & 1));
}

int64_t sub_120ac(int64_t arg1, void* arg2 @ x19)
{
    int64_t* x20 = *(arg2 + 8);
    if (x20 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    int64_t* x0_3;
    void** x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(x0_3, x1);
}

void** std::__ndk1::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(int64_t* arg1, void** arg2)
{
    *arg1 = arg2;
    void** x0 = operator new(0x20);
    void** x19 = x0;
    x0[2] = 0;
    x0[3] = arg2;
    *x0 = (_vtable_for_std::__ndk1::__shared_ptr_pointer<pudutech::ThreadRunner*, std::__ndk1::default_delete<pudutech::ThreadRunner>, std::__ndk1::allocator<pudutech::ThreadRunner> > + 0x10);
    x0[1] = 0;
    arg1[1] = x0;
    if (arg2 != 0)
    {
        x0 = arg2[1];
        if ((x0 == 0 || (x0 != 0 && x0[1] == -1)))
        {
            int32_t i;
            do
            {
                i = __stxr((__ldxr(&x19[1]) + 1), &x19[1]);
            } while (i != 0);
            int32_t i_1;
            do
            {
                i_1 = __stxr((__ldxr(&x19[2]) + 1), &x19[2]);
            } while (i_1 != 0);
            *arg2 = arg2;
            arg2[1] = x19;
            if (x0 != 0)
            {
                x0 = std::__ndk1::__shared_weak_count::__release_weak();
            }
            int64_t x9_5;
            int32_t i_2;
            do
            {
                x9_5 = __ldaxr(&x19[1]);
                i_2 = __stlxr((x9_5 - 1), &x19[1]);
            } while (i_2 != 0);
            if (x9_5 == 0)
            {
                *(*x19 + 0x10)(x19);
                /* tailcall */
                return std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
    }
    return x0;
}

int64_t sub_121c8(int64_t arg1, void* arg2 @ x20)
{
    if (arg2 != 0)
    {
        pudutech::ThreadRunner::~ThreadRunner();
        operator delete(arg2);
    }
    int64_t* x0_3;
    void* x1;
    int32_t x2;
    char x3;
    void* x4;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return pudutech::ThreadRunner::init(x0_3, x1, x2, x3, x4);
}

int64_t* pudutech::ThreadRunner::init(int64_t* arg1, void* arg2, int32_t arg3, char arg4, void* arg5)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    arg1[3] = 0;
    *(arg1 + 0x19) = 0;
    int64_t* x0 = *(arg5 + 0x20);
    int128_t var_80;
    int64_t* var_60;
    if (x0 == 0)
    {
        var_60 = nullptr;
    }
    else if (arg5 == x0)
    {
        var_60 = &var_80;
        *(*x0 + 0x18)();
    }
    else
    {
        var_60 = *(*x0 + 0x10)();
    }
    sub_13818(&var_80, &arg1[0x16]);
    int64_t x8_6;
    if (&var_80 == var_60)
    {
        x8_6 = *(*var_60 + 0x20);
    }
    if ((&var_80 != var_60 && var_60 != 0))
    {
        x8_6 = *(*var_60 + 0x28);
    }
    if ((&var_80 == var_60 || (&var_80 != var_60 && var_60 != 0)))
    {
        x8_6();
    }
    *(arg1 + 0x19) = (arg4 & 1);
    int64_t* x0_4 = *(arg2 + 0x20);
    int128_t* var_60_1;
    if (x0_4 == 0)
    {
        var_60_1 = nullptr;
    }
    else if (arg2 == x0_4)
    {
        var_60_1 = &var_80;
        *(*x0_4 + 0x18)();
    }
    else
    {
        var_60_1 = *(*x0_4 + 0x10)();
    }
    sub_13980(&var_80, &arg1[0x10]);
    int64_t* x0_7 = var_60_1;
    int64_t x8_14;
    if (&var_80 == x0_7)
    {
        x8_14 = *(*x0_7 + 0x20);
    }
    if ((&var_80 != x0_7 && x0_7 != 0))
    {
        x8_14 = *(*x0_7 + 0x28);
    }
    if ((&var_80 == x0_7 || (&var_80 != x0_7 && x0_7 != 0)))
    {
        x0_7 = x8_14();
    }
    if ((arg3 & 1) != 0)
    {
        int64_t* x0_9;
        if (arg1[1] != 0)
        {
            int64_t x21_1 = *arg1;
            int128_t v0_1;
            x0_9 = std::__ndk1::__shared_weak_count::lock();
            if (x0_9 != 0)
            {
                v0_1 = 0;
                *v0_1[8] = 0;
                int64_t var_70_1 = x21_1;
                v0_1 = pudutech::ThreadRunner::threadRun;
                var_80 = v0_1;
                int64_t x0_10 = operator new(8);
                x0_7 = sub_13b1c(x0_10, &var_80);
                void* x20_2 = arg1[2];
                arg1[2] = x0_10;
                if (x20_2 != 0)
                {
                    std::__ndk1::thread::~thread();
                    x0_7 = operator delete(x20_2);
                }
                if (x0_9 != 0)
                {
                    int64_t x9_2;
                    int32_t i;
                    do
                    {
                        x9_2 = __ldaxr(&x0_9[1]);
                        i = __stlxr((x9_2 - 1), &x0_9[1]);
                    } while (i != 0);
                    if (x9_2 == 0)
                    {
                        *(*x0_9 + 0x10)(x0_9);
                        x0_7 = std::__ndk1::__shared_weak_count::__release_weak();
                    }
                }
            }
        }
        if ((arg1[1] == 0 || (arg1[1] != 0 && x0_9 == 0)))
        {
            sub_13ae8();
            /* no return */
        }
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_7;
}

int64_t pudutech::ThreadRunner::threadRun(void* arg1)
{
    uint64_t x21;
    uint64_t var_28 = x21;
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    uint32_t x9 = *data_45058;
    int32_t var_1d8 = data_45050;
    int64_t var_1c8 = 0;
    void* var_1c0 = nullptr;
    char* x22;
    if ((x9 & 1) == 0)
    {
        x22 = &*(data_45058 + 1);
    }
    else
    {
        x22 = *(data_45062 + 6);
    }
    int64_t var_1d0 = 0;
    size_t x0_1 = strlen(x22);
    if (x0_1 < -0x10)
    {
        goto label_12dd4;
    }
    void* x23_1;
    if (x0_1 >= 0x17)
    {
        uint64_t x24_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_3 = operator new(x24_1);
        x23_1 = x0_3;
        size_t var_1c8_1 = x0_1;
        var_1c0 = x0_3;
        var_1d0 = (x24_1 | 1);
    }
    else
    {
        x23_1 = &*var_1d0[1];
        var_1d0 = (x0_1 << 1);
    }
    if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
    {
        memcpy(x23_1, x22, x0_1);
    }
    *(x23_1 + x0_1) = 0;
    int32_t x0_6 = g3::logLevel(&var_1d8);
    int32_t x21_2;
    if ((x0_6 & 1) == 0)
    {
        x21_2 = 0;
        if ((var_1d0 & 1) != 0)
        {
        label_1257c:
            operator delete(var_1c0);
            if ((x21_2 & 1) != 0)
            {
                goto label_125ac;
            }
        }
    }
    else
    {
        int64_t s_6;
        __builtin_memset(&s_6, 0, 0x18);
        s_6 = 8;
        __builtin_strncpy(&*s_6[1], "base", 5);
        x21_2 = g3::logTag(&s_6);
        if ((s_6 & 1) != 0)
        {
            void* var_1e0;
            operator delete(var_1e0);
            if ((var_1d0 & 1) != 0)
            {
                goto label_1257c;
            }
        }
        else if ((var_1d0 & 1) != 0)
        {
            goto label_1257c;
        }
    }
    uint64_t s_7;
    int64_t var_1b0;
    if (((((x0_6 & 1) == 0 && (var_1d0 & 1) == 0) || (x0_6 & 1) != 0) && (x21_2 & 1) != 0))
    {
    label_125ac:
        LogCapture::LogCapture(&s_7, "base", &data_45050, &data_2ddb7, &nullptr->ident.version);
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "ThreadRunner::threadRun enter", 0x1d);
        LogCapture::~LogCapture();
    }
    x21 = *(arg1 + 0xe0);
    uint64_t x22_1;
    if ((x21 & 1) == 0)
    {
        x22_1 = (x21 >> 1);
    }
    else
    {
        x22_1 = *(arg1 + 0xe8);
    }
    if (x22_1 != 0)
    {
        int64_t x0_12 = pthread_self();
        if (x22_1 >= 0x10)
        {
            __builtin_memset(&s_7, 0, 0x18);
            s_7 = 0x1e;
            void* x8_11;
            if ((x21 & 1) != 0)
            {
                x8_11 = *(arg1 + 0xf0);
            }
            else
            {
                x8_11 = (arg1 + 0xe1);
            }
            int64_t s_8 = *x8_11;
            var_1b0 = *(x8_11 + 7);
            s_7 = s_8;
            void* var_1a8;
            var_1a8 = 0;
            pthread_setname_np(x0_12, (&s_7 | 1));
            if ((s_7 & 1) != 0)
            {
                operator delete(var_1a8);
            }
            char* x22_2;
            if ((*data_45058 & 1) == 0)
            {
                x22_2 = &*(data_45058 + 1);
            }
            else
            {
                x22_2 = *(data_45062 + 6);
            }
            int32_t var_210 = data_45050;
            int64_t s_5;
            __builtin_memset(&s_5, 0, 0x18);
            size_t x0_15 = strlen(x22_2);
            if (x0_15 < -0x10)
            {
                goto label_12dd4;
            }
            void* var_1f8_1;
            void* x23_2;
            if (x0_15 >= 0x17)
            {
                uint64_t x24_3 = ((x0_15 + 0x10) & 0xfffffffffffffff0);
                void* x0_27 = operator new(x24_3);
                x23_2 = x0_27;
                size_t var_200_1 = x0_15;
                var_1f8_1 = x0_27;
                s_5 = (x24_3 | 1);
            }
            else
            {
                x23_2 = &*s_5[1];
                s_5 = (x0_15 << 1);
            }
            if ((x0_15 >= 0x17 || (x0_15 < 0x17 && x0_15 != 0)))
            {
                memcpy(x23_2, x22_2, x0_15);
            }
            *(x23_2 + x0_15) = 0;
            int32_t x0_30 = g3::logLevel(&var_210);
            int32_t x21_6;
            if ((x0_30 & 1) == 0)
            {
                x21_6 = 0;
                if ((s_5 & 1) != 0)
                {
                label_128a4:
                    operator delete(var_1f8_1);
                    if ((x21_6 & 1) != 0)
                    {
                        goto label_128d4;
                    }
                }
            }
            else
            {
                int64_t var_228 = 0;
                int64_t var_220_1 = 0;
                var_228 = 8;
                void* var_218_1 = nullptr;
                __builtin_strncpy(&*var_228[1], "base", 5);
                x21_6 = g3::logTag(&var_228);
                if ((var_228 & 1) != 0)
                {
                    operator delete(var_218_1);
                    if ((s_5 & 1) != 0)
                    {
                        goto label_128a4;
                    }
                }
                else if ((s_5 & 1) != 0)
                {
                    goto label_128a4;
                }
            }
            if (((((x0_30 & 1) == 0 && (s_5 & 1) == 0) || (x0_30 & 1) != 0) && (x21_6 & 1) != 0))
            {
            label_128d4:
                LogCapture::LogCapture(&s_7, "base", &data_45050, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_40 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "start thread: ", 0xe);
                int64_t s_4;
                __builtin_memset(&s_4, 0, 0x18);
                uint64_t x8_29 = *(arg1 + 0xe0);
                int32_t temp0_1 = (x8_29 & 1);
                uint64_t x8_31;
                if (temp0_1 == 0)
                {
                    x8_31 = (x8_29 >> 1);
                }
                else
                {
                    x8_31 = *(arg1 + 0xe8);
                }
                void* x23_4;
                if (temp0_1 == 0)
                {
                    x23_4 = (arg1 + 0xe1);
                }
                else
                {
                    x23_4 = *(arg1 + 0xf0);
                }
                uint64_t x22_5;
                if (x8_31 < 0xf)
                {
                    x22_5 = x8_31;
                }
                else
                {
                    x22_5 = 0xf;
                }
                if (x22_5 < -0x10)
                {
                    int64_t x0_86 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                    if (var_1b0 == 0)
                    {
                        _Unwind_Resume(x0_86);
                    }
                    std::__ndk1::mutex::unlock();
                    /* tailcall */
                    return sub_12f74(_Unwind_Resume(x0_86));
                }
                void* var_230_1;
                void* x24_4;
                void* x25_3;
                if (x22_5 >= 0x17)
                {
                    void* x0_46 = operator new(0x10);
                    x24_4 = x0_46;
                    uint64_t var_238_1 = x22_5;
                    var_230_1 = x0_46;
                    s_4 = 0x11;
                    x25_3 = (&s_4 | 1);
                }
                else
                {
                    x25_3 = (&s_4 | 1);
                    x24_4 = x25_3;
                    s_4 = (x22_5 << 1);
                }
                if ((x22_5 >= 0x17 || (x22_5 < 0x17 && x22_5 != 0)))
                {
                    memcpy(x24_4, x23_4, x22_5);
                }
                *(x24_4 + x22_5) = 0;
                char* x22_6;
                if ((s_4 & 1) == 0)
                {
                    x22_6 = x25_3;
                }
                else
                {
                    x22_6 = var_230_1;
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_40, x22_6, strlen(x22_6));
                if ((s_4 & 1) != 0)
                {
                    operator delete(var_230_1);
                }
            label_12a04:
                LogCapture::~LogCapture();
            }
        }
        else
        {
            pthread_setname_np();
            char* x22_3;
            if ((*data_45058 & 1) == 0)
            {
                x22_3 = &*(data_45058 + 1);
            }
            else
            {
                x22_3 = *(data_45062 + 6);
            }
            int32_t var_260 = data_45050;
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            size_t x0_18 = strlen(x22_3);
            if (x0_18 < -0x10)
            {
                goto label_12dd4;
            }
            void* var_248_1;
            void* x23_3;
            if (x0_18 >= 0x17)
            {
                uint64_t x24_2 = ((x0_18 + 0x10) & 0xfffffffffffffff0);
                void* x0_20 = operator new(x24_2);
                x23_3 = x0_20;
                size_t var_250_1 = x0_18;
                var_248_1 = x0_20;
                s_3 = (x24_2 | 1);
            }
            else
            {
                x23_3 = &*s_3[1];
                s_3 = (x0_18 << 1);
            }
            if ((x0_18 >= 0x17 || (x0_18 < 0x17 && x0_18 != 0)))
            {
                memcpy(x23_3, x22_3, x0_18);
            }
            *(x23_3 + x0_18) = 0;
            int32_t x0_23 = g3::logLevel(&var_260);
            int32_t x21_5;
            if ((x0_23 & 1) == 0)
            {
                x21_5 = 0;
                if ((s_3 & 1) != 0)
                {
                label_12838:
                    operator delete(var_248_1);
                    if ((x21_5 & 1) != 0)
                    {
                        goto label_12868;
                    }
                }
            }
            else
            {
                int64_t var_278 = 0;
                int64_t var_270_1 = 0;
                var_278 = 8;
                void* var_268_1 = nullptr;
                __builtin_strncpy(&*var_278[1], "base", 5);
                x21_5 = g3::logTag(&var_278);
                if ((var_278 & 1) != 0)
                {
                    operator delete(var_268_1);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_12838;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_12838;
                }
            }
            if (((((x0_23 & 1) == 0 && (s_3 & 1) == 0) || (x0_23 & 1) != 0) && (x21_5 & 1) != 0))
            {
            label_12868:
                LogCapture::LogCapture(&s_7, "base", &data_45050, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_36 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "start thread: ", 0xe);
                void* x22_4;
                if ((*(arg1 + 0xe0) & 1) != 0)
                {
                    x22_4 = *(arg1 + 0xf0);
                }
                else
                {
                    x22_4 = (arg1 + 0xe1);
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_36, x22_4, strlen(x22_4));
                goto label_12a04;
            }
        }
    }
    if ((*(arg1 + 0x18) & 1) == 0)
    {
        size_t x0_54;
        do
        {
            if ((*(arg1 + 0x19) & 1) != 0)
            {
                int64_t* x23;
                if ((*data_45058 & 1) == 0)
                {
                    x23 = &*(data_45058 + 1);
                }
                else
                {
                    x23 = *(data_45062 + 6);
                }
                int32_t var_298 = data_45050;
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                x0_54 = strlen(x23);
                if (x0_54 < -0x10)
                {
                    break;
                }
                void* var_280_1;
                void* x24_5;
                if (x0_54 >= 0x17)
                {
                    uint64_t x26_1 = ((x0_54 + 0x10) & 0xfffffffffffffff0);
                    void* x0_56 = operator new(x26_1);
                    x24_5 = x0_56;
                    size_t var_288_1 = x0_54;
                    var_280_1 = x0_56;
                    s_2 = (x26_1 | 1);
                }
                else
                {
                    x24_5 = &*s_2[1];
                    s_2 = (x0_54 << 1);
                }
                if ((x0_54 >= 0x17 || (x0_54 < 0x17 && x0_54 != 0)))
                {
                    memcpy(x24_5, x23, x0_54);
                }
                *(x24_5 + x0_54) = 0;
                int32_t x0_59 = g3::logLevel(&var_298);
                int32_t x23_5;
                if ((x0_59 & 1) == 0)
                {
                    x23_5 = 0;
                    if ((s_2 & 1) != 0)
                    {
                    label_12b4c:
                        operator delete(var_280_1);
                        if ((x23_5 & 1) != 0)
                        {
                            goto label_12b74;
                        }
                    }
                }
                else
                {
                    int64_t var_2b0 = 0;
                    int64_t var_2a8_1 = 0;
                    var_2b0 = 8;
                    void* var_2a0_1 = nullptr;
                    __builtin_strncpy(&*var_2b0[1], "base", 5);
                    x23_5 = g3::logTag(&var_2b0);
                    if ((var_2b0 & 1) != 0)
                    {
                        operator delete(var_2a0_1);
                        if ((s_2 & 1) != 0)
                        {
                            goto label_12b4c;
                        }
                    }
                    else if ((s_2 & 1) != 0)
                    {
                        goto label_12b4c;
                    }
                }
                if (((((x0_59 & 1) == 0 && (s_2 & 1) == 0) || (x0_59 & 1) != 0) && (x23_5 & 1) != 0))
                {
                label_12b74:
                    LogCapture::LogCapture(&s_7, "base", &data_45050, &data_2ddb7, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "ThreadRunner wait wakeup conditi…", 0x22);
                    LogCapture::~LogCapture();
                }
                s_7 = (arg1 + 0x1c);
                var_1b0 = 1;
                std::__ndk1::mutex::lock();
                uint32_t x8_50 = *(arg1 + 0x18);
                if (*(arg1 + 0xd0) == 0)
                {
                    if ((x8_50 & 1) == 0)
                    {
                        std::__ndk1::condition_variable::wait((arg1 + 0x44));
                    }
                }
                else if ((x8_50 & 1) == 0)
                {
                    do
                    {
                        int64_t* x0_66 = *(arg1 + 0xd0);
                        if (x0_66 == 0)
                        {
                            sub_13744();
                            /* no return */
                        }
                        if ((*(*x0_66 + 0x30)() & 1) != 0)
                        {
                            break;
                        }
                        std::__ndk1::condition_variable::wait((arg1 + 0x44));
                    } while ((*(arg1 + 0x18) & 1) == 0);
                }
                uint32_t x23_6 = *(arg1 + 0x18);
                if (var_1b0 != 0)
                {
                    std::__ndk1::mutex::unlock();
                }
                if ((x23_6 & 1) != 0)
                {
                    break;
                }
            }
            int64_t* x0_71 = *(arg1 + 0xa0);
            if (x0_71 == 0)
            {
                sub_13744();
                /* no return */
            }
            *(*x0_71 + 0x30)();
        } while ((*(arg1 + 0x18) & 1) == 0);
        if (((*(arg1 + 0x19) & 1) != 0 && x0_54 < -0x10))
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_12dd4:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_12ddc:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
            goto label_12de0;
        }
    }
    char* x20_1;
    if ((*data_45058 & 1) != 0)
    {
        x20_1 = *(data_45062 + 6);
        goto label_12c5c;
    }
    x20_1 = &*(data_45058 + 1);
label_12c5c:
    int32_t var_2d0 = data_45050;
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_73 = strlen(x20_1);
    if (x0_73 < -0x10)
    {
        goto label_12ddc;
    }
    void* var_2b8_1;
    void* x21_9;
    if (x0_73 >= 0x17)
    {
        uint64_t x22_8 = ((x0_73 + 0x10) & 0xfffffffffffffff0);
        void* x0_75 = operator new(x22_8);
        x21_9 = x0_75;
        size_t var_2c0_1 = x0_73;
        var_2b8_1 = x0_75;
        s_1 = (x22_8 | 1);
    }
    else
    {
        x21_9 = &*s_1[1];
        s_1 = (x0_73 << 1);
    }
    if ((x0_73 >= 0x17 || (x0_73 < 0x17 && x0_73 != 0)))
    {
        memcpy(x21_9, x20_1, x0_73);
    }
    *(x21_9 + x0_73) = 0;
    int32_t x0_78 = g3::logLevel(&var_2d0);
    int32_t x19_2;
    if ((x0_78 & 1) == 0)
    {
        x19_2 = 0;
        if ((s_1 & 1) != 0)
        {
        label_12d2c:
            x0_78 = operator delete(var_2b8_1);
            if ((x19_2 & 1) != 0)
            {
                goto label_12d5c;
            }
        }
    }
    else
    {
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        s = 8;
        __builtin_strncpy(&*s[1], "base", 5);
        x0_78 = g3::logTag(&s);
        x19_2 = x0_78;
        if ((s & 1) != 0)
        {
            void* var_2d8;
            x0_78 = operator delete(var_2d8);
            if ((s_1 & 1) != 0)
            {
                goto label_12d2c;
            }
        }
        else if ((s_1 & 1) != 0)
        {
            goto label_12d2c;
        }
    }
    if (((((x0_78 & 1) == 0 && (s_1 & 1) == 0) || (x0_78 & 1) != 0) && (x19_2 & 1) != 0))
    {
    label_12d5c:
        LogCapture::LogCapture(&s_7, "base", &data_45050, &data_2ddb7, &nullptr->ident.version);
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "ThreadRunner::threadRun exit", 0x1c);
        x0_78 = LogCapture::~LogCapture();
    }
    if (*(x27 + 0x28) == x8)
    {
        return x0_78;
    }
label_12de0:
    __stack_chk_fail();
    /* no return */
}

int64_t sub_12df0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, int64_t arg6, char arg7)
{
    LogCapture::~LogCapture();
    int64_t x19_1 = _Unwind_Resume(arg1);
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_12f60:
        _Unwind_Resume(x19_1);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_12f60;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19_1 = _Unwind_Resume(x19_1);
        if (arg7 == 0)
        {
            goto label_12f60;
        }
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19_1));
}

int64_t sub_12e10(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, int64_t arg6, char arg7)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_12f60:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_12f60;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if (arg7 == 0)
        {
            goto label_12f60;
        }
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

int64_t sub_12e30(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, int64_t arg6, char arg7)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_12f60:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_12f60;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if (arg7 == 0)
        {
            goto label_12f60;
        }
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

int64_t sub_12e54(int64_t arg1, char arg2, void* arg3, int64_t arg4, char arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
    }
    if (((arg2 & 1) == 0 || ((arg2 & 1) != 0 && arg5 == 0)))
    {
        _Unwind_Resume(x19);
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

int64_t sub_12e68(int64_t arg1, char arg2, void* arg3, int64_t arg4, char arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
    }
    if (((arg2 & 1) == 0 || ((arg2 & 1) != 0 && arg5 == 0)))
    {
        _Unwind_Resume(x19);
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

int64_t sub_12e94(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, int64_t arg6, char arg7)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_12f60:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_12f60;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if (arg7 == 0)
        {
            goto label_12f60;
        }
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

int64_t sub_12eb8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, int64_t arg6, char arg7)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_12f60:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_12f60;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if (arg7 == 0)
        {
            goto label_12f60;
        }
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

int64_t sub_12ed8(int64_t arg1, char arg2, void* arg3, int64_t arg4, char arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
    }
    if (((arg2 & 1) == 0 || ((arg2 & 1) != 0 && arg5 == 0)))
    {
        _Unwind_Resume(x19);
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

int64_t sub_12eec(int64_t arg1, char arg2, void* arg3, int64_t arg4, char arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
    }
    if (((arg2 & 1) == 0 || ((arg2 & 1) != 0 && arg5 == 0)))
    {
        _Unwind_Resume(x19);
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

int64_t sub_12f34(int64_t arg1, char arg2, void* arg3, int64_t arg4, char arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
    }
    if (((arg2 & 1) == 0 || ((arg2 & 1) != 0 && arg5 == 0)))
    {
        _Unwind_Resume(x19);
    }
    std::__ndk1::mutex::unlock();
    /* tailcall */
    return sub_12f74(_Unwind_Resume(x19));
}

void sub_12f74(int64_t* arg1)
{
    void* x19 = *arg1;
    *arg1 = 0;
    if (x19 == 0)
    {
        return;
    }
    std::__ndk1::thread::~thread();
    /* tailcall */
    return operator delete(x19);
}

int64_t pudutech::ThreadRunner::start(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    arg1[3] = 0;
    if (arg1[1] != 0)
    {
        int64_t x21_1 = *arg1;
        int64_t* x0_1;
        int128_t v0_1;
        x0_1 = std::__ndk1::__shared_weak_count::lock();
        if (x0_1 != 0)
        {
            v0_1 = 0;
            *v0_1[8] = 0;
            int64_t var_50 = x21_1;
            v0_1 = pudutech::ThreadRunner::threadRun;
            int128_t var_60 = v0_1;
            int64_t x0_2 = operator new(8);
            int64_t x0_3 = sub_13b1c(x0_2, &var_60);
            void* x19_1 = arg1[2];
            arg1[2] = x0_2;
            if (x19_1 != 0)
            {
                std::__ndk1::thread::~thread();
                x0_3 = operator delete(x19_1);
            }
            if (x0_1 != 0)
            {
                int64_t x9_1;
                int32_t i;
                do
                {
                    x9_1 = __ldaxr(&x0_1[1]);
                    i = __stlxr((x9_1 - 1), &x0_1[1]);
                } while (i != 0);
                if (x9_1 == 0)
                {
                    *(*x0_1 + 0x10)(x0_1);
                    x0_3 = std::__ndk1::__shared_weak_count::__release_weak();
                }
            }
            if (*(x22 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return x0_3;
        }
    }
    sub_13ae8();
    /* no return */
}

int64_t pudutech::ThreadRunner::exit(void* arg1, int32_t arg2)
{
    std::__ndk1::mutex::lock();
    *(arg1 + 0x18) = 1;
    int64_t x0_2 = std::__ndk1::mutex::unlock();
    if (*(arg1 + 0xd0) != 0)
    {
        x0_2 = std::__ndk1::condition_variable::notify_one();
    }
    if ((arg2 & 1) != 0)
    {
        x0_2 = *(arg1 + 0x10);
        if (x0_2 != 0)
        {
            x0_2 = std::__ndk1::thread::join();
            void* x20_1 = *(arg1 + 0x10);
            *(arg1 + 0x10) = 0;
            if (x20_1 != 0)
            {
                std::__ndk1::thread::~thread();
                /* tailcall */
                return operator delete(x20_1);
            }
        }
    }
    return x0_2;
}

void pudutech::ThreadRunner::wakeup(void* arg1)
{
    if (*(arg1 + 0xd0) == 0)
    {
        return;
    }
    /* tailcall */
    return std::__ndk1::condition_variable::notify_one();
}

int64_t pudutech::ThreadRunner::~ThreadRunner(void* arg1)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    std::__ndk1::mutex::lock();
    *(arg1 + 0x18) = 1;
    std::__ndk1::mutex::unlock();
    if (*(arg1 + 0xd0) != 0)
    {
        std::__ndk1::condition_variable::notify_one();
    }
    if (*(arg1 + 0x10) != 0)
    {
        std::__ndk1::thread::detach();
    }
    char* x22;
    if ((*data_45038 & 1) == 0)
    {
        x22 = &*(data_45038 + 1);
    }
    else
    {
        x22 = *(data_45042 + 6);
    }
    int32_t __bss_start_1 = __bss_start;
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_5 = strlen(x22);
    if (x0_5 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_1a8_1;
        void* x23_1;
        if (x0_5 >= 0x17)
        {
            uint64_t x24_1 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
            void* x0_7 = operator new(x24_1);
            x23_1 = x0_7;
            size_t var_1b0_1 = x0_5;
            var_1a8_1 = x0_7;
            s_1 = (x24_1 | 1);
        }
        else
        {
            x23_1 = &*s_1[1];
            s_1 = (x0_5 << 1);
        }
        if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
        {
            memcpy(x23_1, x22, x0_5);
        }
        *(x23_1 + x0_5) = 0;
        int32_t x0_10 = g3::logLevel(&__bss_start_1);
        int32_t x21_2;
        if ((x0_10 & 1) == 0)
        {
            x21_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_133d4:
                operator delete(var_1a8_1);
                if ((x21_2 & 1) != 0)
                {
                    goto label_13404;
                }
            }
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            s = 8;
            __builtin_strncpy(&*s[1], "base", 5);
            x21_2 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                void* var_1c8;
                operator delete(var_1c8);
                if ((s_1 & 1) != 0)
                {
                    goto label_133d4;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_133d4;
            }
        }
        if ((((((x0_10 & 1) == 0 && (s_1 & 1) == 0) || (x0_10 & 1) != 0) && (x21_2 & 1) == 0) || ((x0_10 & 1) == 0 && (s_1 & 1) != 0)))
        {
            if ((*(arg1 + 0xe0) & 1) != 0)
            {
                goto label_132f0;
            }
        label_132f4:
            int64_t* x0_14 = *(arg1 + 0xd0);
            int64_t x8_11;
            if ((arg1 + 0xb0) == x0_14)
            {
                x8_11 = *(*x0_14 + 0x20);
            }
            if (((arg1 + 0xb0) != x0_14 && x0_14 != 0))
            {
                x8_11 = *(*x0_14 + 0x28);
            }
            if (((arg1 + 0xb0) == x0_14 || ((arg1 + 0xb0) != x0_14 && x0_14 != 0)))
            {
                x8_11();
            }
            int64_t* x0_15 = *(arg1 + 0xa0);
            int64_t x8_16;
            if ((arg1 + 0x80) == x0_15)
            {
                x8_16 = *(*x0_15 + 0x20);
            }
            if (((arg1 + 0x80) != x0_15 && x0_15 != 0))
            {
                x8_16 = *(*x0_15 + 0x28);
            }
            if (((arg1 + 0x80) == x0_15 || ((arg1 + 0x80) != x0_15 && x0_15 != 0)))
            {
                x8_16();
            }
            std::__ndk1::condition_variable::~condition_variable();
            std::__ndk1::mutex::~mutex();
            void* x20_1 = *(arg1 + 0x10);
            *(arg1 + 0x10) = 0;
            if (x20_1 != 0)
            {
                std::__ndk1::thread::~thread();
                operator delete(x20_1);
            }
            int64_t x0_20 = *(arg1 + 8);
            if (x0_20 != 0)
            {
                x0_20 = std::__ndk1::__shared_weak_count::__release_weak();
            }
            if (*(x25 + 0x28) == x8)
            {
                return x0_20;
            }
        }
        if (((((x0_10 & 1) == 0 && (s_1 & 1) == 0) || (x0_10 & 1) != 0) && (x21_2 & 1) != 0))
        {
        label_13404:
            void var_1a0;
            LogCapture::LogCapture(&var_1a0, "base", &__bss_start, &data_2ddb7, &nullptr->ident.version);
            void var_198;
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "ThreadRunner destruct", 0x15);
            LogCapture::~LogCapture();
            if ((*(arg1 + 0xe0) & 1) != 0)
            {
            label_132f0:
                operator delete(*(arg1 + 0xf0));
            }
            goto label_132f4;
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t* std::__ndk1::function<bool ()>::~function(void* arg1)
{
    int64_t* x0 = *(arg1 + 0x20);
    if (arg1 == x0)
    {
        /* jump -> *(*x0 + 0x20) */
    }
    if (x0 == 0)
    {
        return x0;
    }
    /* jump -> *(*x0 + 0x28) */
}

int64_t* std::__ndk1::function<void ()>::~function(void* arg1)
{
    int64_t* x0 = *(arg1 + 0x20);
    if (arg1 == x0)
    {
        /* jump -> *(*x0 + 0x20) */
    }
    if (x0 == 0)
    {
        return x0;
    }
    /* jump -> *(*x0 + 0x28) */
}

void sub_1353c(void* arg1) __noreturn
{
    __cxa_begin_catch(arg1);
    std::terminate();
    /* no return */
}

uint64_t pudutech::ThreadRunner::isExit(void* arg1)
{
    return (*(arg1 + 0x18) & 1);
}

int64_t pudutech::ThreadRunner::getMutex(int64_t arg1) __pure
{
    return (arg1 + 0x1c);
}

void std::__ndk1::__basic_string_common<true>::__throw_length_error() __noreturn
{
    sub_13574();
    /* no return */
}

void sub_13574() __noreturn
{
    char* thrown_exception = __cxa_allocate_exception(0x10);
    sub_135c4(thrown_exception);
    __cxa_throw(thrown_exception, _typeinfo_for_std::length_error, std::length_error::~length_error);
    /* no return */
}

int64_t sub_135c4(char* arg1)
{
    int64_t x0 = std::logic_error::logic_error(arg1);
    *arg1 = (_vtable_for_std::length_error + 0x10);
    return x0;
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(char* arg1, int64_t arg2, size_t arg3)
{
    uint32_t x8 = *arg1;
    int64_t x25;
    if ((x8 & 1) != 0)
    {
        x25 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    else
    {
        x25 = 0x16;
    }
    if ((((x8 & 1) != 0 && x25 >= arg3) || ((x8 & 1) == 0 && 0x16 >= arg3)))
    {
        void* x22;
        if ((x8 & 1) != 0)
        {
            x22 = *(arg1 + 0x10);
            if (arg3 == 0)
            {
                goto label_13688;
            }
        }
        else
        {
            x22 = &arg1[1];
            if (arg3 == 0)
            {
                goto label_13688;
            }
        }
        memmove(x22, arg2, arg3);
    label_13688:
        *(x22 + arg3) = 0;
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = arg3;
        }
        else
        {
            *arg1 = (arg3 << 1);
        }
    label_13738:
        return arg1;
    }
    if ((((x8 & 1) != 0 && x25 < arg3) || ((x8 & 1) == 0 && 0x16 < arg3)))
    {
        if ((-0x12 - x25) < (arg3 - x25))
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return sub_13744();
        }
        void* x22_1;
        if ((x8 & 1) != 0)
        {
            x22_1 = *(arg1 + 0x10);
        }
        else
        {
            x22_1 = &arg1[1];
        }
        uint64_t x23_1;
        if (x25 > 0x7fffffffffffffe6)
        {
            x23_1 = -0x11;
        }
        else
        {
            size_t x8_3 = (x25 << 1);
            size_t x8_4;
            if (x8_3 > arg3)
            {
                x8_4 = x8_3;
            }
            else
            {
                x8_4 = arg3;
            }
            if (x8_4 >= 0x17)
            {
                x23_1 = ((x8_4 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x23_1 = 0x17;
            }
        }
        int64_t x0_2 = operator new(x23_1);
        memcpy(x0_2, arg2, arg3);
        if (x25 != 0x16)
        {
            operator delete(x22_1);
        }
        *(arg1 + 8) = arg3;
        *(arg1 + 0x10) = x0_2;
        *arg1 = (x23_1 | 1);
        *(x0_2 + arg3) = 0;
        goto label_13738;
    }
}

void sub_13744() __noreturn
{
    void** thrown_exception = __cxa_allocate_exception(8);
    *thrown_exception = (_vtable_for_std::__ndk1::bad_function_call + 0x10);
    __cxa_throw(thrown_exception, _typeinfo_for_std::__ndk1::bad_function_call, std::exception::~exception);
    /* no return */
}

int64_t std::__ndk1::bad_function_call::~bad_function_call(void* arg1)
{
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::ThreadRunner*, std::__ndk1::default_delete<pudutech::ThreadRunner>, std::__ndk1::allocator<pudutech::ThreadRunner> >::~__shared_ptr_pointer(void* arg1)
{
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

void std::__ndk1::__shared_ptr_pointer<pudutech::ThreadRunner*, std::__ndk1::default_delete<pudutech::ThreadRunner>, std::__ndk1::allocator<pudutech::ThreadRunner> >::__on_zero_shared(void* arg1)
{
    void* x19 = *(arg1 + 0x18);
    if (x19 == 0)
    {
        return;
    }
    pudutech::ThreadRunner::~ThreadRunner();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::ThreadRunner*, std::__ndk1::default_delete<pudutech::ThreadRunner>, std::__ndk1::allocator<pudutech::ThreadRunner> >::__get_deleter(int64_t arg1, void* arg2)
{
    int64_t x0;
    if (*(arg2 + 8) == typeinfo_name_for_std::__ndk1::default_delete<pudutech::ThreadRunner>)
    {
        x0 = (arg1 + 0x18);
    }
    else
    {
        x0 = 0;
    }
    return x0;
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::ThreadRunner*, std::__ndk1::default_delete<pudutech::ThreadRunner>, std::__ndk1::allocator<pudutech::ThreadRunner> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void sub_13818(int64_t* arg1, void* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    if (arg2 != arg1)
    {
        int64_t* x20_1 = arg1;
        arg1 = arg1[4];
        if (arg1 != x20_1)
        {
            int64_t* x8_1 = *(arg2 + 0x20);
            if (arg2 == x8_1)
            {
                *(*x8_1 + 0x18)(x8_1, x20_1);
                *(**(arg2 + 0x20) + 0x20)();
                *(arg2 + 0x20) = x20_1[4];
                x20_1[4] = x20_1;
            }
            else
            {
                x20_1[4] = x8_1;
                *(arg2 + 0x20) = arg1;
            }
        }
        else
        {
            if (*(arg2 + 0x20) == arg2)
            {
                *(*arg1 + 0x18)();
                *(*x20_1[4] + 0x20)();
                x20_1[4] = 0;
                *(**(arg2 + 0x20) + 0x18)();
                *(**(arg2 + 0x20) + 0x20)();
                *(arg2 + 0x20) = 0;
                x20_1[4] = x20_1;
                void* var_60;
                *(var_60 + 0x18)(&var_60, arg2);
                *(var_60 + 0x20)(&var_60);
            }
            else
            {
                *(*arg1 + 0x18)();
                *(*x20_1[4] + 0x20)();
                x20_1[4] = *(arg2 + 0x20);
            }
            *(arg2 + 0x20) = arg2;
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void sub_13980(int64_t* arg1, void* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    if (arg2 != arg1)
    {
        int64_t* x20_1 = arg1;
        arg1 = arg1[4];
        if (arg1 != x20_1)
        {
            int64_t* x8_1 = *(arg2 + 0x20);
            if (arg2 == x8_1)
            {
                *(*x8_1 + 0x18)(x8_1, x20_1);
                *(**(arg2 + 0x20) + 0x20)();
                *(arg2 + 0x20) = x20_1[4];
                x20_1[4] = x20_1;
            }
            else
            {
                x20_1[4] = x8_1;
                *(arg2 + 0x20) = arg1;
            }
        }
        else
        {
            if (*(arg2 + 0x20) == arg2)
            {
                *(*arg1 + 0x18)();
                *(*x20_1[4] + 0x20)();
                x20_1[4] = 0;
                *(**(arg2 + 0x20) + 0x18)();
                *(**(arg2 + 0x20) + 0x20)();
                *(arg2 + 0x20) = 0;
                x20_1[4] = x20_1;
                void* var_60;
                *(var_60 + 0x18)(&var_60, arg2);
                *(var_60 + 0x20)(&var_60);
            }
            else
            {
                *(*arg1 + 0x18)();
                *(*x20_1[4] + 0x20)();
                x20_1[4] = *(arg2 + 0x20);
            }
            *(arg2 + 0x20) = arg2;
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void sub_13ae8() __noreturn
{
    void** thrown_exception = __cxa_allocate_exception(8);
    *thrown_exception = (_vtable_for_std::__ndk1::bad_weak_ptr + 0x10);
    __cxa_throw(thrown_exception, _typeinfo_for_std::__ndk1::bad_weak_ptr, std::__ndk1::bad_weak_ptr::~bad_weak_ptr);
    /* no return */
}

int32_t sub_13b1c(int64_t arg1, int128_t* arg2)
{
    int64_t x0 = operator new(8);
    std::__ndk1::__thread_struct::__thread_struct();
    int64_t* x0_1;
    int128_t v0;
    x0_1 = operator new(0x28);
    v0 = *arg2;
    int64_t x8 = arg2[1];
    int64_t x9 = *(arg2 + 0x18);
    arg2[1] = 0;
    *(arg2 + 0x18) = 0;
    *x0_1 = x0;
    *(x0_1 + 8) = v0;
    x0_1[3] = x8;
    x0_1[4] = x9;
    int32_t x0_3 = pthread_create(arg1, 0, _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8pudutech12ThreadRunnerEFvvEJNS_10shared_ptrIS9_EEEEEEEEEEPvSG_, x0_1);
    if (x0_3 == 0)
    {
        return x0_3;
    }
    int64_t x0_4 = std::__ndk1::__throw_system_error(x0_3, "thread constructor failed");
    int64_t* x21_1 = x0_1[4];
    if (x21_1 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x21_1[1]);
            i = __stlxr((x9_1 - 1), &x21_1[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x21_1 + 0x10)(x21_1);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x21_2 = *x0_1;
    *x0_1 = 0;
    if (x21_2 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x21_2);
    }
    operator delete(x0_1);
    /* tailcall */
    return _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8pudutech12ThreadRunnerEFvvEJNS_10shared_ptrIS9_EEEEEEEEEEPvSG_(_Unwind_Resume(x0_4));
}

int64_t sub_13c00(int64_t arg1, void* arg2 @ x22)
{
    std::__ndk1::__thread_struct::~__thread_struct();
    operator delete(arg2);
    /* tailcall */
    return _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8pudutech12ThreadRunnerEFvvEJNS_10shared_ptrIS9_EEEEEEEEEEPvSG_(_Unwind_Resume(arg1));
}

int64_t _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8pudutech12ThreadRunnerEFvvEJNS_10shared_ptrIS9_EEEEEEEEEEPvSG_(int64_t* arg1)
{
    int32_t* x0 = std::__ndk1::__thread_local_data();
    int64_t x1 = *arg1;
    *arg1 = 0;
    pthread_setspecific(*x0, x1);
    int64_t x10 = arg1[2];
    int64_t x8 = arg1[1];
    int64_t* x0_2 = (arg1[3] + (x10 >> 1));
    if ((x10 & 1) != 0)
    {
        x8 = *(*x0_2 + x8);
    }
    x8(x0_2);
    int64_t* x20 = arg1[4];
    if (x20 != 0)
    {
        int64_t x9_2;
        int32_t i;
        do
        {
            x9_2 = __ldaxr(&x20[1]);
            i = __stlxr((x9_2 - 1), &x20[1]);
        } while (i != 0);
        if (x9_2 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x20_1 = *arg1;
    *arg1 = 0;
    if (x20_1 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x20_1);
    }
    operator delete(arg1);
    return 0;
}

int64_t sub_13cd8(int64_t arg1, void* arg2 @ x19)
{
    if (arg2 != 0)
    {
        int64_t* x21_1 = *(arg2 + 0x20);
        if (x21_1 != 0)
        {
            int64_t x9_1;
            int32_t i;
            do
            {
                x9_1 = __ldaxr(&x21_1[1]);
                i = __stlxr((x9_1 - 1), &x21_1[1]);
            } while (i != 0);
            if (x9_1 == 0)
            {
                *(*x21_1 + 0x10)(x21_1);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
        void* x21_2 = *arg2;
        *arg2 = 0;
        if (x21_2 != 0)
        {
            std::__ndk1::__thread_struct::~__thread_struct();
            operator delete(x21_2);
        }
        operator delete(arg2);
    }
    int64_t* x0_6;
    int64_t* x1;
    int64_t x2;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_6, x1, x2);
}

int64_t sub_13ce4(int64_t arg1, void* arg2 @ x19)
{
    int64_t* x21 = *(arg2 + 0x20);
    if (x21 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x21[1]);
            i = __stlxr((x9_1 - 1), &x21[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x21 + 0x10)(x21);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x21_1 = *arg2;
    *arg2 = 0;
    if (x21_1 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x21_1);
    }
    operator delete(arg2);
    int64_t* x0_6;
    int64_t* x1;
    int64_t x2;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_6, x1, x2);
}

int64_t* std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        void* x22_1 = (arg1 + *x8_2);
        int32_t x5_1 = *(x22_1 + 0x90);
        int64_t* x23_1 = *(x22_1 + 0x28);
        int32_t x26_1 = *(x22_1 + 8);
        if (x5_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            void var_60;
            char x0_4 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x5_1 = x0_4;
            *(x22_1 + 0x90) = x5_1;
        }
        int64_t x3_1 = (arg2 + arg3);
        int64_t x2;
        if ((x26_1 & 0xb0) == 0x20)
        {
            x2 = x3_1;
        }
        else
        {
            x2 = arg2;
        }
        if (sub_13ef0(x23_1, arg2, x2, x3_1, x22_1, x5_1) == 0)
        {
            void* x0_7 = (arg1 + *(*arg1 - 0x18));
            *(x0_7 + 0x20);
            std::__ndk1::ios_base::clear(x0_7);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* sub_13ef0(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, void* arg5, int32_t arg6)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    int64_t* x19 = arg1;
    if (arg1 != 0)
    {
        int64_t x8_1 = *(arg5 + 0x18);
        int64_t x9_1 = (arg4 - arg2);
        int64_t x25_1 = (arg3 - arg2);
        size_t x23_1;
        if (x8_1 > x9_1)
        {
            x23_1 = (x8_1 - x9_1);
        }
        else
        {
            x23_1 = 0;
        }
        int64_t x0_1;
        if (x25_1 >= 1)
        {
            x0_1 = *(*x19 + 0x60)(x19);
            if (x0_1 != x25_1)
            {
            label_1404c:
                x19 = nullptr;
            }
        }
        if ((x25_1 < 1 || (x25_1 >= 1 && x0_1 == x25_1)))
        {
            if (x23_1 >= 1)
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                void* var_70_1;
                char* x25_2;
                void* x26_1;
                if (x23_1 >= 0x17)
                {
                    uint64_t x26_2 = ((x23_1 + 0x10) & 0xfffffffffffffff0);
                    void* x0_3 = operator new(x26_2);
                    x25_2 = x0_3;
                    size_t var_78_1 = x23_1;
                    var_70_1 = x0_3;
                    s = (x26_2 | 1);
                    x26_1 = (&s | 1);
                }
                else
                {
                    x26_1 = (&s | 1);
                    x25_2 = x26_1;
                    s = (x23_1 << 1);
                }
                memset(x25_2, arg6, x23_1);
                x25_2[x23_1] = 0;
                void* x1_1;
                if ((s & 1) == 0)
                {
                    x1_1 = x26_1;
                }
                else
                {
                    x1_1 = var_70_1;
                }
                int64_t x0_6 = *(*x19 + 0x60)(x19, x1_1, x23_1);
                if ((s & 1) != 0)
                {
                    operator delete(var_70_1);
                }
                if (x0_6 != x23_1)
                {
                    goto label_1404c;
                }
            }
            int64_t x22_2 = (arg4 - arg3);
            if (x22_2 >= 1)
            {
                if (*(*x19 + 0x60)(x19, arg3, x22_2) != x22_2)
                {
                    goto label_1404c;
                }
                goto label_14044;
            }
        label_14044:
            *(arg5 + 0x18) = 0;
        }
    }
    if (*(x27 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

void std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry(void* arg1)
{
    int64_t* x8 = *(arg1 + 8);
    void* x8_1 = (x8 + *(*x8 - 0x18));
    if ((*(x8_1 + 0x28) != 0 && (*(x8_1 + 0x20) == 0 && (*(x8_1 + 9) & 0x20) != 0)))
    {
        void* x19_1 = arg1;
        if ((std::uncaught_exception() & 1) == 0)
        {
            int64_t* x8_3 = *(x19_1 + 8);
            if (*(**((x8_3 + *(*x8_3 - 0x18)) + 0x28) + 0x30)() == 0xffffffff)
            {
                int64_t* x8_7 = *(x19_1 + 8);
                void* x0_1 = (x8_7 + *(*x8_7 - 0x18));
                *(x0_1 + 0x20);
                std::__ndk1::ios_base::clear(x0_1);
            }
        }
    }
}

void sub_14140(void* arg1) __noreturn
{
    sub_1353c(arg1);
    /* no return */
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t* x8_2 = (*arg1 - 0x18);
    if (*((arg1 + *x8_2) + 0x28) != 0)
    {
        char var_48_1 = 0;
        int64_t* var_40_1 = arg1;
        void* x9_4 = (arg1 + *x8_2);
        if (*(x9_4 + 0x20) == 0)
        {
            if (*(x9_4 + 0x88) != 0)
            {
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
                x8_2 = (*arg1 - 0x18);
            }
            char var_48_2 = 1;
            if (*(**((arg1 + *x8_2) + 0x28) + 0x30)() == 0xffffffff)
            {
                void* x0_3 = (arg1 + *(*arg1 - 0x18));
                *(x0_3 + 0x20);
                std::__ndk1::ios_base::clear(x0_3);
            }
        }
        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t pudutech::ThreadTaskQueue::create(char* arg1, int64_t* arg2 @ x8)
{
    int64_t s = operator new(0x68);
    __builtin_memset(s, 0, 0x68);
    std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(arg2, s);
    if ((*arg2 + 0x50) != arg1)
    {
        *(arg1 + 8);
        void* x1_1;
        if ((*arg1 & 1) != 0)
        {
            x1_1 = *(arg1 + 0x10);
        }
        else
        {
            x1_1 = &arg1[1];
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((*arg2 + 0x50), x1_1);
        *arg2;
    }
    return pudutech::ThreadTaskQueue::init();
}

int64_t sub_142e8(int64_t arg1, void* arg2 @ x19)
{
    int64_t* x20 = *(arg2 + 8);
    if (x20 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    int64_t* x0_3;
    void** x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(x0_3, x1);
}

void** std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(int64_t* arg1, void** arg2)
{
    *arg1 = arg2;
    void** x0 = operator new(0x20);
    void** x19 = x0;
    x0[2] = 0;
    x0[3] = arg2;
    *x0 = (_vtable_for_std::__ndk1::__shared_ptr_pointer<pudutech::ThreadTaskQueue*, std::__ndk1::default_delete<pudutech::ThreadTaskQueue>, std::__ndk1::allocator<pudutech::ThreadTaskQueue> > + 0x10);
    x0[1] = 0;
    arg1[1] = x0;
    if (arg2 != 0)
    {
        x0 = arg2[1];
        if ((x0 == 0 || (x0 != 0 && x0[1] == -1)))
        {
            int32_t i;
            do
            {
                i = __stxr((__ldxr(&x19[1]) + 1), &x19[1]);
            } while (i != 0);
            int32_t i_1;
            do
            {
                i_1 = __stxr((__ldxr(&x19[2]) + 1), &x19[2]);
            } while (i_1 != 0);
            *arg2 = arg2;
            arg2[1] = x19;
            if (x0 != 0)
            {
                x0 = std::__ndk1::__shared_weak_count::__release_weak();
            }
            int64_t x9_5;
            int32_t i_2;
            do
            {
                x9_5 = __ldaxr(&x19[1]);
                i_2 = __stlxr((x9_5 - 1), &x19[1]);
            } while (i_2 != 0);
            if (x9_5 == 0)
            {
                *(*x19 + 0x10)(x19);
                /* tailcall */
                return std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
    }
    return x0;
}

int64_t sub_14404(int64_t arg1, void* arg2 @ x20)
{
    if (arg2 != 0)
    {
        pudutech::ThreadTaskQueue::~ThreadTaskQueue();
        operator delete(arg2);
    }
    /* tailcall */
    return pudutech::ThreadTaskQueue::init(_Unwind_Resume(arg1));
}

void** pudutech::ThreadTaskQueue::init(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    if (arg1[1] != 0)
    {
        int64_t x22_1 = *arg1;
        int64_t x0_1 = std::__ndk1::__shared_weak_count::lock();
        if (x0_1 != 0)
        {
            int64_t var_50 = 0;
            void** x0_2;
            int128_t v0;
            x0_2 = operator new(0x28);
            v0 = 0;
            *v0[8] = 0;
            x0_2[3] = x22_1;
            x0_2[4] = x0_1;
            v0 = pudutech::ThreadTaskQueue::loop;
            *x0_2 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()> + 0x10);
            *(x0_2 + 8) = v0;
            if (arg1[1] != 0)
            {
                int64_t x22_2 = *arg1;
                int64_t x0_4 = std::__ndk1::__shared_weak_count::lock();
                if (x0_4 != 0)
                {
                    int64_t var_80 = 0;
                    void** x0_5;
                    int128_t v0_1;
                    x0_5 = operator new(0x28);
                    v0_1 = 0;
                    *v0_1[8] = 0;
                    v0_1 = pudutech::ThreadTaskQueue::wakeupCondition;
                    x0_5[3] = x22_2;
                    x0_5[4] = x0_4;
                    *x0_5 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()> + 0x10);
                    *(x0_5 + 8) = v0_1;
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_a0;
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_70;
                    pudutech::ThreadRunner::create(&var_70, true, &arg1[0xa], true, &var_a0);
                    int64_t var_b0_1 = 0;
                    int64_t* x20_2 = arg1[9];
                    int64_t var_b0;
                    arg1[8] = var_b0;
                    int64_t var_a8;
                    arg1[9] = var_a8;
                    if (x20_2 != 0)
                    {
                        int64_t x9_1;
                        int32_t i;
                        do
                        {
                            x9_1 = __ldaxr(&x20_2[1]);
                            i = __stlxr((x9_1 - 1), &x20_2[1]);
                        } while (i != 0);
                        if (x9_1 == 0)
                        {
                            *(*x20_2 + 0x10)(x20_2);
                            std::__ndk1::__shared_weak_count::__release_weak();
                        }
                    }
                    int64_t x8_9;
                    if (&var_a0 == x0_5)
                    {
                        x8_9 = *(*x0_5 + 0x20);
                    }
                    if ((&var_a0 != x0_5 && x0_5 != 0))
                    {
                        x8_9 = *(*x0_5 + 0x28);
                    }
                    if ((&var_a0 == x0_5 || (&var_a0 != x0_5 && x0_5 != 0)))
                    {
                        x8_9();
                    }
                    void** x0_11 = x0_2;
                    int64_t x8_12;
                    if (&var_70 == x0_11)
                    {
                        x8_12 = *(*x0_11 + 0x20);
                    }
                    if ((&var_70 != x0_11 && x0_11 != 0))
                    {
                        x8_12 = *(*x0_11 + 0x28);
                    }
                    if ((&var_70 == x0_11 || (&var_70 != x0_11 && x0_11 != 0)))
                    {
                        x0_11 = x8_12();
                    }
                    if (*(x21 + 0x28) != x8)
                    {
                        __stack_chk_fail();
                        /* no return */
                    }
                    return x0_11;
                }
            }
            sub_13ae8();
            /* no return */
        }
    }
    sub_13ae8();
    /* no return */
}

int64_t* pudutech::ThreadTaskQueue::loop(void* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t* var_60 = nullptr;
    *(arg1 + 0x40);
    pudutech::ThreadRunner::getMutex();
    int128_t v0;
    int128_t v1;
    v0 = std::__ndk1::mutex::lock();
    void var_80;
    if (*(arg1 + 0x38) == 0)
    {
        std::__ndk1::mutex::unlock();
    }
    else
    {
        int64_t x9_1 = *(arg1 + 0x30);
        int64_t x22_1 = *(*(arg1 + 0x18) + ((x9_1 / 0x55) << 3));
        int64_t x23_1 = (x9_1 % 0x55);
        int64_t var_60_1 = 0;
        int64_t x8_4;
        if (&var_80 == var_60)
        {
            x8_4 = *(*var_60 + 0x20);
        }
        if ((&var_80 != var_60 && var_60 != 0))
        {
            x8_4 = *(*var_60 + 0x28);
        }
        if ((&var_80 == var_60 || (&var_80 != var_60 && var_60 != 0)))
        {
            v0 = x8_4();
        }
        int64_t* x9_2 = *((x22_1 + (x23_1 * 0x30)) + 0x20);
        if (x9_2 == 0)
        {
            var_60 = nullptr;
        }
        else if ((x22_1 + (x23_1 * 0x30)) == x9_2)
        {
            var_60 = &var_80;
            v0 = *(**((x22_1 + (x23_1 * 0x30)) + 0x20) + 0x18)();
        }
        else
        {
            var_60 = x9_2;
            *((x22_1 + (x23_1 * 0x30)) + 0x20) = nullptr;
        }
        int64_t x8_10 = *(arg1 + 0x30);
        void* x8_12 = (*(*(arg1 + 0x18) + ((x8_10 / 0x55) << 3)) + ((x8_10 % 0x55) * 0x30));
        int64_t* x0_5 = *(x8_12 + 0x20);
        int64_t x8_14;
        if (x8_12 == x0_5)
        {
            x8_14 = *(*x0_5 + 0x20);
        }
        if ((x8_12 != x0_5 && x0_5 != 0))
        {
            x8_14 = *(*x0_5 + 0x28);
        }
        if ((x8_12 == x0_5 || (x8_12 != x0_5 && x0_5 != 0)))
        {
            v0 = x8_14();
        }
        int128_t v0_1 = (*(arg1 + 0x30) + data_2c6a0);
        *(arg1 + 0x30) = v0_1;
        if (v0_1 >= 0xaa)
        {
            operator delete(**(arg1 + 0x18));
            int64_t x9_6 = (*(arg1 + 0x30) - 0x55);
            *(arg1 + 0x18) = (*(arg1 + 0x18) + 8);
            *(arg1 + 0x30) = x9_6;
        }
        std::__ndk1::mutex::unlock();
        if (var_60 == 0)
        {
            sub_13744();
            /* no return */
        }
        *(*var_60 + 0x30)();
    }
    int64_t* x0_9 = var_60;
    int64_t x8_23;
    if (&var_80 == x0_9)
    {
        x8_23 = *(*x0_9 + 0x20);
    }
    if ((&var_80 != x0_9 && x0_9 != 0))
    {
        x8_23 = *(*x0_9 + 0x28);
    }
    if ((&var_80 == x0_9 || (&var_80 != x0_9 && x0_9 != 0)))
    {
        x0_9 = x8_23();
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_9;
}

int64_t pudutech::ThreadTaskQueue::wakeupCondition(void* arg1)
{
    int64_t x0;
    if (*(arg1 + 0x38) != 0)
    {
        x0 = 1;
    }
    else
    {
        x0 = 0;
    }
    return x0;
}

int64_t pudutech::ThreadTaskQueue::~ThreadTaskQueue(void* arg1)
{
    if ((*(arg1 + 0x50) & 1) != 0)
    {
        operator delete(*(arg1 + 0x60));
    }
    int64_t* x20 = *(arg1 + 0x48);
    if (x20 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    std::__ndk1::__deque_base<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::clear();
    int64_t* x21 = *(arg1 + 0x18);
    int64_t x22 = *(arg1 + 0x20);
    if (x21 != x22)
    {
        do
        {
            void* x0_4 = *x21;
            x21 = &x21[1];
            operator delete(x0_4);
        } while (x22 != x21);
        int64_t x9_2 = *(arg1 + 0x18);
        int64_t x8_4 = *(arg1 + 0x20);
        if (x8_4 != x9_2)
        {
            *(arg1 + 0x20) = (x8_4 + (!(((x8_4 - 8) - x9_2)) & 0xfffffffffffffff8));
        }
    }
    void* x0_5 = *(arg1 + 0x10);
    if (x0_5 != 0)
    {
        operator delete(x0_5);
    }
    int64_t x0_6 = *(arg1 + 8);
    if (x0_6 == 0)
    {
        return x0_6;
    }
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__release_weak();
}

int64_t pudutech::ThreadTaskQueue::exit(void* arg1)
{
    int64_t x0_1 = *(arg1 + 0x40);
    if (x0_1 == 0)
    {
        return x0_1;
    }
    /* tailcall */
    return pudutech::ThreadRunner::exit(x0_1);
}

int64_t pudutech::ThreadTaskQueue::postTask(void* arg1)
{
    *(arg1 + 0x40);
    pudutech::ThreadRunner::getMutex();
    std::__ndk1::mutex::lock();
    std::__ndk1::deque<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::push_back((arg1 + 0x10));
    *(arg1 + 0x40);
    pudutech::ThreadRunner::wakeup();
    /* tailcall */
    return std::__ndk1::mutex::unlock();
}

int64_t pudutech::ThreadTaskQueue::size(void* arg1)
{
    *(arg1 + 0x40);
    pudutech::ThreadRunner::getMutex();
    std::__ndk1::mutex::lock();
    int64_t x19_1 = *(arg1 + 0x38);
    std::__ndk1::mutex::unlock();
    return x19_1;
}

void std::__ndk1::__deque_base<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::clear(int64_t* arg1)
{
    void** x8 = arg1[1];
    int64_t x9 = arg1[2];
    int64_t* x19 = arg1;
    void* x20_1;
    if (x9 == x8)
    {
        x20_1 = &x19[5];
    }
    else
    {
        int64_t x11_1 = x19[4];
        uint64_t x10_2 = (x11_1 / 0x55);
        x20_1 = &x19[5];
        int64_t x11_2 = (*x20_1 + x11_1);
        void* x22_1 = (x8[x10_2] + ((x11_1 % 0x55) * 0x30));
        int64_t x21_1 = (x8[(x11_2 / 0x55)] + ((x11_2 % 0x55) * 0x30));
        if (x21_1 != x22_1)
        {
            void** x23_1 = &x8[x10_2];
            do
            {
                arg1 = *(x22_1 + 0x20);
                int64_t x8_2;
                if (x22_1 == arg1)
                {
                    x8_2 = *(*arg1 + 0x20);
                }
                if ((x22_1 != arg1 && arg1 != 0))
                {
                    x8_2 = *(*arg1 + 0x28);
                }
                if ((x22_1 == arg1 || (x22_1 != arg1 && arg1 != 0)))
                {
                    x8_2();
                }
                x22_1 = (x22_1 + 0x30);
                if ((x22_1 - *x23_1) == 0xff0)
                {
                    x23_1 = &x23_1[1];
                    x22_1 = *x23_1;
                }
            } while (x21_1 != x22_1);
            x8 = x19[1];
            x9 = x19[2];
        }
    }
    int64_t i = ((x9 - x8) >> 3);
    *x20_1 = 0;
    if (i >= 3)
    {
        do
        {
            operator delete(*x8);
            x8 = (x19[1] + 8);
            i = ((x19[2] - x8) >> 3);
            x19[1] = x8;
        } while (i > 2);
    }
    int64_t x8_7;
    if (i == 1)
    {
        x8_7 = 0x2a;
    }
    if (i == 2)
    {
        x8_7 = 0x55;
    }
    if ((i == 1 || i == 2))
    {
        x19[4] = x8_7;
    }
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::ThreadTaskQueue*, std::__ndk1::default_delete<pudutech::ThreadTaskQueue>, std::__ndk1::allocator<pudutech::ThreadTaskQueue> >::~__shared_ptr_pointer(void* arg1)
{
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

void std::__ndk1::__shared_ptr_pointer<pudutech::ThreadTaskQueue*, std::__ndk1::default_delete<pudutech::ThreadTaskQueue>, std::__ndk1::allocator<pudutech::ThreadTaskQueue> >::__on_zero_shared(void* arg1)
{
    void* x19 = *(arg1 + 0x18);
    if (x19 == 0)
    {
        return;
    }
    pudutech::ThreadTaskQueue::~ThreadTaskQueue();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::ThreadTaskQueue*, std::__ndk1::default_delete<pudutech::ThreadTaskQueue>, std::__ndk1::allocator<pudutech::ThreadTaskQueue> >::__get_deleter(int64_t arg1, void* arg2)
{
    int64_t x0;
    if (*(arg2 + 8) == typeinfo_name_for_std::__ndk1::default_delete<pudutech::ThreadTaskQueue>)
    {
        x0 = (arg1 + 0x18);
    }
    else
    {
        x0 = 0;
    }
    return x0;
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::ThreadTaskQueue*, std::__ndk1::default_delete<pudutech::ThreadTaskQueue>, std::__ndk1::allocator<pudutech::ThreadTaskQueue> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::~__func(void** arg1)
{
    int64_t* x19 = arg1[4];
    *arg1 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()> + 0x10);
    if (x19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19[1]);
            i = __stlxr((x9_1 - 1), &x19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19 + 0x10)(x19);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::~__func(void** arg1)
{
    int64_t* x20 = arg1[4];
    *arg1 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()> + 0x10);
    if (x20 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    /* tailcall */
    return operator delete(arg1);
}

void** std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::__clone(void* arg1)
{
    void** x0;
    int128_t v0;
    x0 = operator new(0x28);
    *x0 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()> + 0x10);
    *(x0 + 8) = *(arg1 + 8);
    x0[3] = *(arg1 + 0x18);
    int64_t x8_2 = *(arg1 + 0x20);
    x0[4] = x8_2;
    if (x8_2 != 0)
    {
        int32_t i;
        do
        {
            i = __stxr((__ldxr((x8_2 + 8)) + 1), (x8_2 + 8));
        } while (i != 0);
    }
    return x0;
}

int128_t std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::__clone(void* arg1, void** arg2)
{
    *arg2 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()> + 0x10);
    int128_t v0 = *(arg1 + 8);
    *(arg2 + 8) = v0;
    arg2[3] = *(arg1 + 0x18);
    int64_t x8_2 = *(arg1 + 0x20);
    arg2[4] = x8_2;
    if (x8_2 != 0)
    {
        int32_t i;
        do
        {
            i = __stxr((__ldxr((x8_2 + 8)) + 1), (x8_2 + 8));
        } while (i != 0);
    }
    return v0;
}

void std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::destroy(void* arg1)
{
    int64_t* x19 = *(arg1 + 0x20);
    if (x19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19[1]);
            i = __stlxr((x9_1 - 1), &x19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19 + 0x10)(x19);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::destroy_deallocate(void* arg1)
{
    int64_t* x20 = *(arg1 + 0x20);
    if (x20 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::operator()(void* arg1)
{
    int64_t x9 = *(arg1 + 0x10);
    int64_t x1 = *(arg1 + 8);
    if ((x9 & 1) != 0)
    {
        x1 = *(*(*(arg1 + 0x18) + (x9 >> 1)) + x1);
    }
    /* jump -> x1 */
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::target(int64_t arg1, void* arg2)
{
    int64_t x0;
    if (*(arg2 + 8) == typeinfo_name_for_std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >)
    {
        x0 = (arg1 + 8);
    }
    else
    {
        x0 = 0;
    }
    return x0;
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, void ()>::target_type() __pure
{
    return _typeinfo_for_std::__ndk1::__bind<void(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >;
}

void std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::~__func(void** arg1)
{
    int64_t* x19 = arg1[4];
    *arg1 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()> + 0x10);
    if (x19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19[1]);
            i = __stlxr((x9_1 - 1), &x19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19 + 0x10)(x19);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::~__func(void** arg1)
{
    int64_t* x20 = arg1[4];
    *arg1 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()> + 0x10);
    if (x20 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    /* tailcall */
    return operator delete(arg1);
}

void** std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::__clone(void* arg1)
{
    void** x0;
    int128_t v0;
    x0 = operator new(0x28);
    *x0 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()> + 0x10);
    *(x0 + 8) = *(arg1 + 8);
    x0[3] = *(arg1 + 0x18);
    int64_t x8_2 = *(arg1 + 0x20);
    x0[4] = x8_2;
    if (x8_2 != 0)
    {
        int32_t i;
        do
        {
            i = __stxr((__ldxr((x8_2 + 8)) + 1), (x8_2 + 8));
        } while (i != 0);
    }
    return x0;
}

int128_t std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::__clone(void* arg1, void** arg2)
{
    *arg2 = (_vtable_for_std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()> + 0x10);
    int128_t v0 = *(arg1 + 8);
    *(arg2 + 8) = v0;
    arg2[3] = *(arg1 + 0x18);
    int64_t x8_2 = *(arg1 + 0x20);
    arg2[4] = x8_2;
    if (x8_2 != 0)
    {
        int32_t i;
        do
        {
            i = __stxr((__ldxr((x8_2 + 8)) + 1), (x8_2 + 8));
        } while (i != 0);
    }
    return v0;
}

void std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::destroy(void* arg1)
{
    int64_t* x19 = *(arg1 + 0x20);
    if (x19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19[1]);
            i = __stlxr((x9_1 - 1), &x19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19 + 0x10)(x19);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::destroy_deallocate(void* arg1)
{
    int64_t* x20 = *(arg1 + 0x20);
    if (x20 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::operator()(void* arg1)
{
    int64_t x9 = *(arg1 + 0x10);
    int64_t x1 = *(arg1 + 8);
    if ((x9 & 1) != 0)
    {
        x1 = *(*(*(arg1 + 0x18) + (x9 >> 1)) + x1);
    }
    /* jump -> x1 */
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::target(int64_t arg1, void* arg2)
{
    int64_t x0;
    if (*(arg2 + 8) == typeinfo_name_for_std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >)
    {
        x0 = (arg1 + 8);
    }
    else
    {
        x0 = 0;
    }
    return x0;
}

int64_t std::__ndk1::__function::__func<std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >, std::__ndk1::allocator<std::__ndk1::allocator>, bool ()>::target_type() __pure
{
    return _typeinfo_for_std::__ndk1::__bind<bool(pudutech::ThreadTaskQueue::*)(), std::__ndk1::shared_ptr<pudutech::ThreadTaskQueue> >;
}

void std::__ndk1::deque<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::push_back(void* arg1, void* arg2)
{
    int64_t x9 = *(arg1 + 8);
    int64_t x10 = *(arg1 + 0x10);
    int64_t x8 = *(arg1 + 0x28);
    int64_t x13_2;
    if (x10 == x9)
    {
        x13_2 = 0;
    }
    else
    {
        x13_2 = ((((x10 - x9) >> 3) * 0x55) - 1);
    }
    int64_t x11_2 = (x8 + *(arg1 + 0x20));
    if (x13_2 == x11_2)
    {
        std::__ndk1::deque<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::__add_back_capacity();
        x8 = *(arg1 + 0x28);
        x9 = *(arg1 + 8);
        x10 = *(arg1 + 0x10);
        x11_2 = (*(arg1 + 0x20) + x8);
    }
    struct Elf64_Header* const x1;
    uint64_t x9_2;
    if (x10 == x9)
    {
        x1 = nullptr;
        x9_2 = *(arg2 + 0x20);
    }
    else
    {
        x1 = (*(x9 + ((x11_2 / 0x55) << 3)) + ((x11_2 % 0x55) * 0x30));
        x9_2 = *(arg2 + 0x20);
    }
    if (((x10 == x9 && x9_2 == 0) || (x10 != x9 && x9_2 == 0)))
    {
        x1->program_header_offset = 0;
    }
    if (((x10 == x9 && x9_2 != 0) || (x10 != x9 && x9_2 != 0)))
    {
        if (arg2 == x9_2)
        {
            x1->program_header_offset = x1;
            *(**(arg2 + 0x20) + 0x18)();
            x8 = *(arg1 + 0x28);
        }
        else
        {
            x1->program_header_offset = x9_2;
            *(arg2 + 0x20) = 0;
        }
    }
    *(arg1 + 0x28) = (x8 + 1);
}

void sub_15244(void* arg1) __noreturn
{
    sub_1353c(arg1);
    /* no return */
}

void std::__ndk1::deque<std::__ndk1::function<void ()>, std::__ndk1::allocator<std::__ndk1::function<void ()> > >::__add_back_capacity(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t* x19 = arg1;
    int64_t x8_1 = arg1[4];
    void* x8_25;
    void* x9_1;
    void* x9_7;
    uint64_t x10_6;
    int64_t x11_5;
    void* x20_1;
    void* x21_1;
    int64_t x23_1;
    void* x24_1;
    if (x8_1 < 0x55)
    {
        int64_t x8_9 = x19[2];
        int64_t x9_3 = x19[3];
        int64_t x20_2 = ((x8_9 - x19[1]) >> 3);
        int64_t x10_4 = (x9_3 - *x19);
        int64_t* var_80;
        if (x20_2 < (x10_4 >> 3))
        {
            if (x9_3 == x8_9)
            {
                var_80 = operator new(0xff0);
                int128_t v0_1;
                int128_t v1_1;
                arg1 = std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*> >::push_front(x19);
                int64_t* x25_3 = x19[1];
                x24_1 = x19[2];
                x23_1 = *x25_3;
                x20_1 = &x25_3[1];
                int64_t x8_10 = x19[3];
                x19[1] = x20_1;
                if (x24_1 != x8_10)
                {
                    goto label_155cc;
                }
                x21_1 = *x19;
                x9_1 = (x20_1 - x21_1);
                if (x20_1 > x21_1)
                {
                    goto label_152ac;
                }
                int64_t x26_1;
                if (x8_10 != x21_1)
                {
                    x26_1 = ((x8_10 - x21_1) >> 2);
                }
                else
                {
                    x26_1 = 1;
                }
                if (x26_1 == 0)
                {
                    arg1 = nullptr;
                }
                else
                {
                    if ((x26_1 >> 0x3d) != 0)
                    {
                        goto label_15690;
                    }
                    arg1 = operator new((x26_1 << 3));
                }
                x10_6 = (x26_1 >> 2);
                x9_7 = &arg1[x10_6];
                x8_25 = &arg1[x26_1];
                if (x20_1 == x24_1)
                {
                    goto label_155b0;
                }
                uint64_t x12_10 = (((x24_1 - 0x10) - x25_3) >> 3);
                x11_5 = ((((x24_1 - 8) - x20_1) >> 3) + 1);
                void* x12_11;
                if ((x12_10 + 1) < 4)
                {
                    x12_11 = x9_7;
                label_1567c:
                    do
                    {
                        int64_t x13_4 = *x20_1;
                        x20_1 = (x20_1 + 8);
                        *x12_11 = x13_4;
                        x12_11 = (x12_11 + 8);
                    } while (x24_1 != x20_1);
                }
                else
                {
                    if (x9_7 < &x25_3[(x12_10 + 2)])
                    {
                        x12_11 = x9_7;
                        if (x20_1 < &arg1[((x10_6 + x12_10) + 1)])
                        {
                            goto label_1567c;
                        }
                    }
                    int64_t i_5 = ((x12_10 + 1) & 0x3ffffffffffffffc);
                    int64_t x17_2 = (i_5 << 3);
                    void* x15_2 = &x25_3[3];
                    x12_11 = (x9_7 + x17_2);
                    x20_1 = (x20_1 + x17_2);
                    void* x16_4 = &arg1[(x10_6 + 2)];
                    int64_t i_3 = i_5;
                    int64_t i;
                    do
                    {
                        v0_1 = *(x15_2 - 0x10);
                        v1_1 = *x15_2;
                        x15_2 = (x15_2 + 0x20);
                        i = i_3;
                        i_3 = (i_3 - 4);
                        *(x16_4 - 0x10) = v0_1;
                        *x16_4 = v1_1;
                        x16_4 = (x16_4 + 0x20);
                    } while (i != 4);
                    if ((x12_10 + 1) != i_5)
                    {
                        goto label_1567c;
                    }
                }
            label_15558:
                x21_1 = *x19;
                x24_1 = &arg1[(x11_5 + x10_6)];
                goto label_155b4;
            }
            var_80 = operator new(0xff0);
            std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*> >::push_back(x19);
        }
        else
        {
            int64_t x21_3;
            if (x10_4 != 0)
            {
                x21_3 = (x10_4 >> 2);
            }
            else
            {
                x21_3 = 1;
            }
            int64_t var_68_1 = 0;
            void* var_60_1 = &x19[3];
            int64_t* x0_5;
            if (x21_3 == 0)
            {
                x0_5 = nullptr;
            }
            else
            {
                if ((x21_3 >> 0x3d) != 0)
                {
                label_15690:
                    sub_13574();
                    /* no return */
                }
                x0_5 = operator new((x21_3 << 3));
            }
            void* x8_19 = &x0_5[x20_2];
            void* var_68_2 = &x0_5[x21_3];
            var_80 = x0_5;
            void* var_78_1 = x8_19;
            int64_t var_88_1 = operator new(0xff0);
            int128_t v0_2;
            int128_t v1_2;
            v0_2 = std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*>&>::push_back(&var_80);
            int64_t x20_5 = x19[2];
            int64_t x8_20;
            while (true)
            {
                x8_20 = x19[1];
                if (x20_5 == x8_20)
                {
                    break;
                }
                x20_5 = (x20_5 - 8);
                v0_2 = std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*>&>::push_front(&var_80);
            }
            arg1 = *x19;
            v0_2 = var_80;
            var_80 = arg1;
            int64_t var_78_2 = x8_20;
            v1_2 = *(x19 + 0x10);
            *x19 = v0_2;
            int64_t x9_6 = v1_2;
            *(x19 + 0x10) = x8_19;
            void* var_70_1;
            var_70_1 = v1_2;
            if (x9_6 != x20_5)
            {
                int64_t var_70_2 = (x9_6 + (!(((x9_6 - 8) - x8_20)) & 0xfffffffffffffff8));
            }
            if (arg1 != 0)
            {
                operator delete(arg1);
            }
        }
    }
    else
    {
        int64_t* x25_1 = x19[1];
        x24_1 = x19[2];
        x19[4] = (x8_1 - 0x55);
        x23_1 = *x25_1;
        x20_1 = &x25_1[1];
        int64_t x8_3 = x19[3];
        x19[1] = x20_1;
        if (x24_1 == x8_3)
        {
            x21_1 = *x19;
            x9_1 = (x20_1 - x21_1);
            if (x20_1 > x21_1)
            {
            label_152ac:
                int64_t x8_4 = (x9_1 >> 3);
                int64_t x8_5;
                if ((x8_4 + 1) < 0)
                {
                    x8_5 = (x8_4 + 2);
                }
                else
                {
                    x8_5 = (x8_4 + 1);
                }
                size_t x2_1 = (x24_1 - x20_1);
                int64_t x8_6 = (x8_5 >> 1);
                void* x21_2 = (x20_1 - (x8_6 << 3));
                void* x8_8;
                if (x24_1 == x20_1)
                {
                    x8_8 = x21_2;
                }
                else
                {
                    memmove(x21_2, x20_1, x2_1);
                    x8_8 = (x19[1] + (-(x8_6) << 3));
                }
                x24_1 = (x21_2 + ((x2_1 >> 3) << 3));
                x19[1] = x8_8;
                x19[2] = x24_1;
                goto label_155cc;
            }
            int64_t x26_2;
            if (x8_3 != x21_1)
            {
                x26_2 = ((x8_3 - x21_1) >> 2);
            }
            else
            {
                x26_2 = 1;
            }
            int128_t v0;
            int128_t v1;
            if (x26_2 == 0)
            {
                arg1 = nullptr;
            }
            else
            {
                if ((x26_2 >> 0x3d) != 0)
                {
                    goto label_15690;
                }
                arg1 = operator new((x26_2 << 3));
            }
            x10_6 = (x26_2 >> 2);
            x9_7 = &arg1[x10_6];
            x8_25 = &arg1[x26_2];
            if (x20_1 == x24_1)
            {
            label_155b0:
                x24_1 = x9_7;
            label_155b4:
                *x19 = arg1;
                x19[1] = x9_7;
                x19[2] = x24_1;
                x19[3] = x8_25;
                if (x21_1 != 0)
                {
                    operator delete(x21_1);
                    x24_1 = x19[2];
                }
                goto label_155cc;
            }
            uint64_t x12_3 = (((x24_1 - 0x10) - x25_1) >> 3);
            x11_5 = ((((x24_1 - 8) - x20_1) >> 3) + 1);
            void* x12_4;
            if ((x12_3 + 1) < 4)
            {
                x12_4 = x9_7;
            label_15554:
                do
                {
                    int64_t x13_2 = *x20_1;
                    x20_1 = (x20_1 + 8);
                    *x12_4 = x13_2;
                    x12_4 = (x12_4 + 8);
                } while (x24_1 != x20_1);
            }
            else
            {
                if (x9_7 < &x25_1[(x12_3 + 2)])
                {
                    x12_4 = x9_7;
                    if (x20_1 < &arg1[((x10_6 + x12_3) + 1)])
                    {
                        goto label_15554;
                    }
                }
                int64_t i_4 = ((x12_3 + 1) & 0x3ffffffffffffffc);
                int64_t x17_1 = (i_4 << 3);
                void* x15_1 = &x25_1[3];
                x12_4 = (x9_7 + x17_1);
                x20_1 = (x20_1 + x17_1);
                void* x16_2 = &arg1[(x10_6 + 2)];
                int64_t i_2 = i_4;
                int64_t i_1;
                do
                {
                    v0 = *(x15_1 - 0x10);
                    v1 = *x15_1;
                    x15_1 = (x15_1 + 0x20);
                    i_1 = i_2;
                    i_2 = (i_2 - 4);
                    *(x16_2 - 0x10) = v0;
                    *x16_2 = v1;
                    x16_2 = (x16_2 + 0x20);
                } while (i_1 != 4);
                if ((x12_3 + 1) != i_4)
                {
                    goto label_15554;
                }
            }
            goto label_15558;
        }
    label_155cc:
        *x24_1 = x23_1;
        x19[2] = (x19[2] + 8);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*> >::push_back(int64_t* arg1, int64_t* arg2)
{
    void* x23 = arg1[2];
    int64_t x8 = arg1[3];
    int64_t* x19 = arg1;
    if (x23 == x8)
    {
        void* x22_1 = *x19;
        int64_t* x21_1 = x19[1];
        if (x21_1 > x22_1)
        {
            int64_t x8_1 = ((x21_1 - x22_1) >> 3);
            int64_t x8_2;
            if ((x8_1 + 1) < 0)
            {
                x8_2 = (x8_1 + 2);
            }
            else
            {
                x8_2 = (x8_1 + 1);
            }
            void* x2_1 = (x23 - x21_1);
            int64_t x8_3 = (x8_2 >> 1);
            void* x22_2 = (x21_1 - (x8_3 << 3));
            void* x8_5;
            if (x23 == x21_1)
            {
                x8_5 = x22_2;
            }
            else
            {
                memmove(x22_2, x21_1, x2_1);
                x8_5 = (x19[1] + (-(x8_3) << 3));
            }
            x23 = (x22_2 + ((x2_1 >> 3) << 3));
            x19[1] = x8_5;
            x19[2] = x23;
        }
        else
        {
            int64_t x24_2;
            if (x8 != x22_1)
            {
                x24_2 = ((x8 - x22_1) >> 2);
            }
            else
            {
                x24_2 = 1;
            }
            int128_t v0;
            int128_t v1;
            if (x24_2 == 0)
            {
                arg1 = nullptr;
            }
            else
            {
                if ((x24_2 >> 0x3d) != 0)
                {
                    sub_13574();
                    /* no return */
                }
                arg1 = operator new((x24_2 << 3));
            }
            uint64_t x13_1 = (x24_2 >> 2);
            void* x9_3 = &arg1[x13_1];
            if (x21_1 == x23)
            {
                x23 = x9_3;
            }
            else
            {
                uint64_t x14_1 = (((x23 - 8) - x21_1) >> 3);
                uint64_t x11_1 = (x13_1 + x14_1);
                void* x11_2;
                if ((x14_1 + 1) < 4)
                {
                    x11_2 = x9_3;
                label_15858:
                    do
                    {
                        int64_t x12_2 = *x21_1;
                        x21_1 = &x21_1[1];
                        *x11_2 = x12_2;
                        x11_2 = (x11_2 + 8);
                    } while (x23 != x21_1);
                }
                else
                {
                    if (x9_3 < &x21_1[(x14_1 + 1)])
                    {
                        x11_2 = x9_3;
                        if (x21_1 < &arg1[(x11_1 + 1)])
                        {
                            goto label_15858;
                        }
                    }
                    int64_t i_2 = ((x14_1 + 1) & 0x3ffffffffffffffc);
                    int64_t x16_1 = (i_2 << 3);
                    void* x15_1 = &x21_1[2];
                    x11_2 = (x9_3 + x16_1);
                    x21_1 = (x21_1 + x16_1);
                    void* x13_3 = &arg1[(x13_1 + 2)];
                    int64_t i_1 = i_2;
                    int64_t i;
                    do
                    {
                        v0 = *(x15_1 - 0x10);
                        v1 = *x15_1;
                        x15_1 = (x15_1 + 0x20);
                        i = i_1;
                        i_1 = (i_1 - 4);
                        *(x13_3 - 0x10) = v0;
                        *x13_3 = v1;
                        x13_3 = (x13_3 + 0x20);
                    } while (i != 4);
                    if ((x14_1 + 1) != i_2)
                    {
                        goto label_15858;
                    }
                }
                x22_1 = *x19;
                x23 = &arg1[(x11_1 + 1)];
            }
            *x19 = arg1;
            x19[1] = x9_3;
            x19[2] = x23;
            x19[3] = &arg1[x24_2];
            if (x22_1 != 0)
            {
                operator delete(x22_1);
                x23 = x19[2];
            }
        }
    }
    *x23 = *arg2;
    x19[2] = (x19[2] + 8);
}

void std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*> >::push_front(int64_t* arg1, int64_t* arg2)
{
    int64_t x8 = *arg1;
    void* x24 = arg1[1];
    int64_t* x19 = arg1;
    void* x21 = x24;
    void* x22;
    if (x24 != x8)
    {
        x22 = x21;
    }
    else
    {
        int64_t x23_1 = x19[2];
        int64_t x9_1 = x19[3];
        if (x23_1 < x9_1)
        {
            int64_t x8_2 = ((x9_1 - x23_1) >> 3);
            int64_t x8_3;
            if ((x8_2 + 1) < 0)
            {
                x8_3 = (x8_2 + 2);
            }
            else
            {
                x8_3 = (x8_2 + 1);
            }
            int64_t x25_1 = (x8_3 >> 1);
            size_t x2_1 = (x23_1 - x24);
            void* x8_4 = (x23_1 + (x25_1 << 3));
            if (x23_1 == x24)
            {
                x22 = x8_4;
            }
            else
            {
                x22 = (x8_4 - x2_1);
                memmove(x22, x21, x2_1);
                x8_4 = (x19[2] + (x25_1 << 3));
            }
            x19[1] = x22;
            x19[2] = x8_4;
        }
        else
        {
            int64_t x25_2;
            if (x9_1 != x8)
            {
                x25_2 = ((x9_1 - x8) >> 2);
            }
            else
            {
                x25_2 = 1;
            }
            int128_t v0;
            int128_t v1;
            if (x25_2 == 0)
            {
                arg1 = nullptr;
            }
            else
            {
                if ((x25_2 >> 0x3d) != 0)
                {
                    sub_13574();
                    /* no return */
                }
                arg1 = operator new((x25_2 << 3));
            }
            uint64_t x13_1 = ((x25_2 + 3) >> 2);
            x22 = &arg1[x13_1];
            void* x9_6;
            if (x24 == x23_1)
            {
                x9_6 = x22;
            }
            else
            {
                uint64_t x12_1 = (((x23_1 - 8) - x24) >> 3);
                uint64_t x10_2 = (x12_1 + x13_1);
                void* x10_3;
                if ((x12_1 + 1) < 4)
                {
                    x10_3 = x22;
                label_15a24:
                    do
                    {
                        int64_t x11_2 = *x21;
                        x21 = (x21 + 8);
                        *x10_3 = x11_2;
                        x10_3 = (x10_3 + 8);
                    } while (x23_1 != x21);
                }
                else
                {
                    if (x22 < ((x24 + (x12_1 << 3)) + 8))
                    {
                        x10_3 = x22;
                        if (x24 < &arg1[(x10_2 + 1)])
                        {
                            goto label_15a24;
                        }
                    }
                    int64_t i_2 = ((x12_1 + 1) & 0x3ffffffffffffffc);
                    int64_t x15_1 = (i_2 << 3);
                    void* x14_1 = (x24 + 0x10);
                    x10_3 = (x22 + x15_1);
                    x21 = (x24 + x15_1);
                    void* x13_3 = &arg1[(x13_1 + 2)];
                    int64_t i_1 = i_2;
                    int64_t i;
                    do
                    {
                        v0 = *(x14_1 - 0x10);
                        v1 = *x14_1;
                        x14_1 = (x14_1 + 0x20);
                        i = i_1;
                        i_1 = (i_1 - 4);
                        *(x13_3 - 0x10) = v0;
                        *x13_3 = v1;
                        x13_3 = (x13_3 + 0x20);
                    } while (i != 4);
                    if ((x12_1 + 1) != i_2)
                    {
                        goto label_15a24;
                    }
                }
                x21 = *x19;
                x9_6 = &arg1[(x10_2 + 1)];
            }
            *x19 = arg1;
            x19[1] = x22;
            x19[2] = x9_6;
            x19[3] = &arg1[x25_2];
            if (x21 != 0)
            {
                operator delete(x21);
                x22 = x19[1];
            }
        }
    }
    *(x22 - 8) = *arg2;
    x19[1] = (x19[1] - 8);
}

void std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*>&>::push_back(int64_t* arg1, int64_t* arg2)
{
    void* x23 = arg1[2];
    int64_t x8 = arg1[3];
    int64_t* x19 = arg1;
    if (x23 == x8)
    {
        void* x22_1 = *x19;
        int64_t* x21_1 = x19[1];
        if (x21_1 > x22_1)
        {
            int64_t x8_1 = ((x21_1 - x22_1) >> 3);
            int64_t x8_2;
            if ((x8_1 + 1) < 0)
            {
                x8_2 = (x8_1 + 2);
            }
            else
            {
                x8_2 = (x8_1 + 1);
            }
            void* x2_1 = (x23 - x21_1);
            int64_t x8_3 = (x8_2 >> 1);
            void* x22_2 = (x21_1 - (x8_3 << 3));
            void* x8_5;
            if (x23 == x21_1)
            {
                x8_5 = x22_2;
            }
            else
            {
                memmove(x22_2, x21_1, x2_1);
                x8_5 = (x19[1] + (-(x8_3) << 3));
            }
            x23 = (x22_2 + ((x2_1 >> 3) << 3));
            x19[1] = x8_5;
            x19[2] = x23;
        }
        else
        {
            int64_t x24_2;
            if (x8 != x22_1)
            {
                x24_2 = ((x8 - x22_1) >> 2);
            }
            else
            {
                x24_2 = 1;
            }
            int128_t v0;
            int128_t v1;
            if (x24_2 == 0)
            {
                arg1 = nullptr;
            }
            else
            {
                if ((x24_2 >> 0x3d) != 0)
                {
                    sub_13574();
                    /* no return */
                }
                arg1 = operator new((x24_2 << 3));
            }
            uint64_t x13_1 = (x24_2 >> 2);
            void* x9_3 = &arg1[x13_1];
            if (x21_1 == x23)
            {
                x23 = x9_3;
            }
            else
            {
                uint64_t x14_1 = (((x23 - 8) - x21_1) >> 3);
                uint64_t x11_1 = (x13_1 + x14_1);
                void* x11_2;
                if ((x14_1 + 1) < 4)
                {
                    x11_2 = x9_3;
                label_15be4:
                    do
                    {
                        int64_t x12_2 = *x21_1;
                        x21_1 = &x21_1[1];
                        *x11_2 = x12_2;
                        x11_2 = (x11_2 + 8);
                    } while (x23 != x21_1);
                }
                else
                {
                    if (x9_3 < &x21_1[(x14_1 + 1)])
                    {
                        x11_2 = x9_3;
                        if (x21_1 < &arg1[(x11_1 + 1)])
                        {
                            goto label_15be4;
                        }
                    }
                    int64_t i_2 = ((x14_1 + 1) & 0x3ffffffffffffffc);
                    int64_t x16_1 = (i_2 << 3);
                    void* x15_1 = &x21_1[2];
                    x11_2 = (x9_3 + x16_1);
                    x21_1 = (x21_1 + x16_1);
                    void* x13_3 = &arg1[(x13_1 + 2)];
                    int64_t i_1 = i_2;
                    int64_t i;
                    do
                    {
                        v0 = *(x15_1 - 0x10);
                        v1 = *x15_1;
                        x15_1 = (x15_1 + 0x20);
                        i = i_1;
                        i_1 = (i_1 - 4);
                        *(x13_3 - 0x10) = v0;
                        *x13_3 = v1;
                        x13_3 = (x13_3 + 0x20);
                    } while (i != 4);
                    if ((x14_1 + 1) != i_2)
                    {
                        goto label_15be4;
                    }
                }
                x22_1 = *x19;
                x23 = &arg1[(x11_1 + 1)];
            }
            *x19 = arg1;
            x19[1] = x9_3;
            x19[2] = x23;
            x19[3] = &arg1[x24_2];
            if (x22_1 != 0)
            {
                operator delete(x22_1);
                x23 = x19[2];
            }
        }
    }
    *x23 = *arg2;
    x19[2] = (x19[2] + 8);
}

void std::__ndk1::__split_buffer<std::__ndk1::function<void ()>*, std::__ndk1::allocator<std::__ndk1::function<void ()>*>&>::push_front(int64_t* arg1, int64_t* arg2)
{
    int64_t x8 = *arg1;
    void* x24 = arg1[1];
    int64_t* x19 = arg1;
    void* x21 = x24;
    void* x22;
    if (x24 != x8)
    {
        x22 = x21;
    }
    else
    {
        int64_t x23_1 = x19[2];
        int64_t x9_1 = x19[3];
        if (x23_1 < x9_1)
        {
            int64_t x8_2 = ((x9_1 - x23_1) >> 3);
            int64_t x8_3;
            if ((x8_2 + 1) < 0)
            {
                x8_3 = (x8_2 + 2);
            }
            else
            {
                x8_3 = (x8_2 + 1);
            }
            int64_t x25_1 = (x8_3 >> 1);
            size_t x2_1 = (x23_1 - x24);
            void* x8_4 = (x23_1 + (x25_1 << 3));
            if (x23_1 == x24)
            {
                x22 = x8_4;
            }
            else
            {
                x22 = (x8_4 - x2_1);
                memmove(x22, x21, x2_1);
                x8_4 = (x19[2] + (x25_1 << 3));
            }
            x19[1] = x22;
            x19[2] = x8_4;
        }
        else
        {
            int64_t x25_2;
            if (x9_1 != x8)
            {
                x25_2 = ((x9_1 - x8) >> 2);
            }
            else
            {
                x25_2 = 1;
            }
            int128_t v0;
            int128_t v1;
            if (x25_2 == 0)
            {
                arg1 = nullptr;
            }
            else
            {
                if ((x25_2 >> 0x3d) != 0)
                {
                    sub_13574();
                    /* no return */
                }
                arg1 = operator new((x25_2 << 3));
            }
            uint64_t x13_1 = ((x25_2 + 3) >> 2);
            x22 = &arg1[x13_1];
            void* x9_6;
            if (x24 == x23_1)
            {
                x9_6 = x22;
            }
            else
            {
                uint64_t x12_1 = (((x23_1 - 8) - x24) >> 3);
                uint64_t x10_2 = (x12_1 + x13_1);
                void* x10_3;
                if ((x12_1 + 1) < 4)
                {
                    x10_3 = x22;
                label_15db0:
                    do
                    {
                        int64_t x11_2 = *x21;
                        x21 = (x21 + 8);
                        *x10_3 = x11_2;
                        x10_3 = (x10_3 + 8);
                    } while (x23_1 != x21);
                }
                else
                {
                    if (x22 < ((x24 + (x12_1 << 3)) + 8))
                    {
                        x10_3 = x22;
                        if (x24 < &arg1[(x10_2 + 1)])
                        {
                            goto label_15db0;
                        }
                    }
                    int64_t i_2 = ((x12_1 + 1) & 0x3ffffffffffffffc);
                    int64_t x15_1 = (i_2 << 3);
                    void* x14_1 = (x24 + 0x10);
                    x10_3 = (x22 + x15_1);
                    x21 = (x24 + x15_1);
                    void* x13_3 = &arg1[(x13_1 + 2)];
                    int64_t i_1 = i_2;
                    int64_t i;
                    do
                    {
                        v0 = *(x14_1 - 0x10);
                        v1 = *x14_1;
                        x14_1 = (x14_1 + 0x20);
                        i = i_1;
                        i_1 = (i_1 - 4);
                        *(x13_3 - 0x10) = v0;
                        *x13_3 = v1;
                        x13_3 = (x13_3 + 0x20);
                    } while (i != 4);
                    if ((x12_1 + 1) != i_2)
                    {
                        goto label_15db0;
                    }
                }
                x21 = *x19;
                x9_6 = &arg1[(x10_2 + 1)];
            }
            *x19 = arg1;
            x19[1] = x22;
            x19[2] = x9_6;
            x19[3] = &arg1[x25_2];
            if (x21 != 0)
            {
                operator delete(x21);
                x22 = x19[1];
            }
        }
    }
    *(x22 - 8) = *arg2;
    x19[1] = (x19[1] - 8);
}

int64_t protocol::DomainSockServer::instance()
{
    if (((data_455a8 & 1) == 0 && __cxa_guard_acquire(&data_455a8) != 0))
    {
        data_45440 = 0;
        data_45442 = 0;
        data_45560 = 0;
        data_45568 = 0;
        data_45550 = 0;
        data_45558 = &data_45560;
        __builtin_memset(&data_45520, 0, 0x30);
        data_45588 = 1;
        data_45578 = 0;
        data_45580 = 0;
        data_45570 = &data_45578;
        __builtin_memset(&data_4558c, 0, 0x1c);
        __cxa_atexit(protocol::DomainSockServer::~DomainSockServer, &data_45438, &data_45000);
        __cxa_guard_release(&data_455a8);
    }
    return &data_45438;
}

int128_t protocol::DomainSockServer::DomainSockServer(void* arg1)
{
    *(arg1 + 8) = 0;
    *(arg1 + 0xa) = 0;
    *(arg1 + 0x128) = 0;
    *(arg1 + 0x130) = 0;
    *(arg1 + 0x118) = 0;
    *(arg1 + 0x120) = (arg1 + 0x128);
    *(arg1 + 0x108) = {0};
    *(arg1 + 0x150) = 1;
    *(arg1 + 0x138) = (arg1 + 0x140);
    __builtin_memset((arg1 + 0xe8), 0, 0x20);
    *(arg1 + 0x140) = 0;
    *(arg1 + 0x148) = 0;
    __builtin_memset((arg1 + 0x154), 0, 0x1c);
    return {0};
}

int64_t protocol::DomainSockServer::~DomainSockServer(void* arg1)
{
    int64_t x0 = *(arg1 + 0xe8);
    *(arg1 + 8) = 0;
    if (x0 != 0)
    {
        std::__ndk1::thread::join();
    }
    if ((*(arg1 + 0x158) & 1) != 0)
    {
        operator delete(*(arg1 + 0x168));
    }
    *(arg1 + 0x140);
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::destroy((arg1 + 0x138));
    *(arg1 + 0x128);
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::destroy((arg1 + 0x120));
    int64_t x0_5 = std::__ndk1::mutex::~mutex();
    int64_t* x19_1 = *(arg1 + 0xf0);
    if (x19_1 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19_1[1]);
            i = __stlxr((x9_1 - 1), &x19_1[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19_1 + 0x10)(x19_1);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    return x0_5;
}

void sub_15fd0(void* arg1, int64_t arg2 @ x19) __noreturn
{
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string();
    std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::~map();
    std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::~map();
    std::__ndk1::mutex::~mutex();
    std::__ndk1::shared_ptr<std::__ndk1::thread>::~shared_ptr();
    sub_1353c(arg1);
    /* no return */
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::~map(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::destroy(arg1);
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::~map(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::destroy(arg1);
}

void std::__ndk1::shared_ptr<std::__ndk1::thread>::~shared_ptr(void* arg1)
{
    int64_t* x19 = *(arg1 + 8);
    if (x19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19[1]);
            i = __stlxr((x9_1 - 1), &x19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19 + 0x10)(x19);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
}

int64_t protocol::DomainSockServer::init(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, char* arg2)
{
    int64_t* x22;
    int64_t* var_30 = x22;
    int64_t __saved_x29;
    int64_t* x29 = &__saved_x29;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    char* x20 = arg2;
    int64_t var_58 = *(x24 + 0x28);
    uint64_t x8_1 = *arg2;
    uint64_t x9;
    if ((x8_1 & 1) != 0)
    {
        x9 = *(x20 + 8);
    }
    else
    {
        x9 = (x8_1 >> 1);
    }
    if ((x20 != &data_45420 && x9 == 0))
    {
        data_45428;
        int64_t* x1;
        if ((*data_45420 & 1) != 0)
        {
            x1 = data_45430;
        }
        else
        {
            x1 = &*(data_45420 + 1);
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(x20, x1);
    }
    if ((arg1 + 0x158) != x20)
    {
        *(x20 + 8);
        void* x1_1;
        if ((*x20 & 1) != 0)
        {
            x1_1 = *(x20 + 0x10);
        }
        else
        {
            x1_1 = &x20[1];
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 0x158), x1_1);
    }
    int32_t x0_3;
    int128_t v0;
    x0_3 = protocol::DomainSockServer::create(arg1);
    int32_t var_1f8;
    int64_t s_1;
    char s_2;
    int64_t s_3;
    void* var_1a8;
    int128_t var_1a0;
    size_t x0_9;
    size_t x0_11;
    int32_t x0_23;
    char* x20_3;
    if ((x0_3 & 1) != 0)
    {
        v0 = 0;
        *v0[8] = 0;
        v0 = protocol::DomainSockServer::run;
        *(arg1 + 8) = 1;
        var_1a0 = v0;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* var_190_1 = arg1;
        void** x0_4 = operator new(0x20);
        x0_4[2] = 0;
        *x0_4 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<std::__ndk1::thread, std::__ndk1::allocator<std::__ndk1::thread> > + 0x10);
        x0_4[1] = 0;
        int64_t x22_2;
        x22_2 = sub_1b6f8(&x0_4[3], &var_1a0);
        int64_t* x21_1 = *(arg1 + 0xf0);
        *(arg1 + 0xe8) = x22_2;
        *(arg1 + 0xf0) = x0_4;
        if (x21_1 != 0)
        {
            int64_t x9_3;
            int32_t i;
            do
            {
                x9_3 = __ldaxr(&x21_1[1]);
                i = __stlxr((x9_3 - 1), &x21_1[1]);
            } while (i != 0);
            if (x9_3 == 0)
            {
                *(*x21_1 + 0x10)(x21_1);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
        char* x21_2;
        if ((*data_45318 & 1) == 0)
        {
            x21_2 = &*(data_45318 + 1);
        }
        else
        {
            x21_2 = *(data_45322 + 6);
        }
        int32_t var_1c0 = data_45310;
        __builtin_memset(&s_3, 0, 0x18);
        x0_9 = strlen(x21_2);
        if (x0_9 >= -0x10)
        {
            void* x22_3;
            if (x0_9 >= 0x17)
            {
                uint64_t x23_1 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                void* x0_20 = operator new(x23_1);
                x22_3 = x0_20;
                size_t var_1b0_1 = x0_9;
                var_1a8 = x0_20;
                s_3 = (x23_1 | 1);
            }
            else
            {
                x22_3 = &*s_3[1];
                s_3 = (x0_9 << 1);
            }
            if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
            {
                memcpy(x22_3, x21_2, x0_9);
            }
            *(x22_3 + x0_9) = 0;
            x0_23 = g3::logLevel(&var_1c0);
            int32_t x20_4;
            if ((x0_23 & 1) == 0)
            {
                x20_4 = 0;
                if ((s_3 & 1) != 0)
                {
                label_16430:
                    x0_23 = operator delete(var_1a8);
                    if ((x20_4 & 1) != 0)
                    {
                        goto label_16460;
                    }
                }
            }
            else
            {
                __builtin_memset(&s_2, 0, 0x18);
                s_2 = 0x14;
                int64_t var_1d7;
                __builtin_strncpy(&var_1d7, "DomainSock", 0xb);
                x0_23 = g3::logTag(&s_2);
                x20_4 = x0_23;
                if ((s_2 & 1) != 0)
                {
                    void* var_1c8_1;
                    x0_23 = operator delete(var_1c8_1);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_16430;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_16430;
                }
            }
            if (((((x0_23 & 1) == 0 && (s_3 & 1) == 0) || (x0_23 & 1) != 0) && (x20_4 & 1) != 0))
            {
            label_16460:
                LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45310, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*var_1a0[8], "local socket server init success…", 0x21);
                x0_23 = LogCapture::~LogCapture();
            }
            *(arg1 + 9) = 1;
        }
    }
    else
    {
        if ((*data_45358 & 1) == 0)
        {
            x20_3 = &*(data_45358 + 1);
        }
        else
        {
            x20_3 = *(data_45362 + 6);
        }
        var_1f8 = data_45350;
        __builtin_memset(&s_1, 0, 0x18);
        x0_11 = strlen(x20_3);
        if (x0_11 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
    }
    if ((((x0_3 & 1) == 0 && x0_11 < -0x10) || ((x0_3 & 1) != 0 && x0_9 < -0x10)))
    {
        int64_t x0_34 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
        int64_t x0_36 = _Unwind_Resume(x0_34);
        void* var_1c8;
        if ((s_2 & 1) != 0)
        {
            operator delete(var_1c8);
        }
        if ((((s_2 & 1) == 0 && (s_3 & 1) != 0) || ((s_2 & 1) != 0 && (s_3 & 1) != 0)))
        {
            operator delete(var_1a8);
        }
        int32_t* x0_40;
        char* x1_6;
        x0_40 = _Unwind_Resume(x0_36);
        /* tailcall */
        return protocol::DomainSockServer::create(x0_40, x1_6);
    }
    if (((x0_3 & 1) == 0 && x0_11 >= -0x10))
    {
        void* var_1e0_1;
        void* x21_3;
        if (x0_11 >= 0x17)
        {
            uint64_t x22_4 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
            void* x0_13 = operator new(x22_4);
            x21_3 = x0_13;
            size_t var_1e8_1 = x0_11;
            var_1e0_1 = x0_13;
            s_1 = (x22_4 | 1);
        }
        else
        {
            x21_3 = &*s_1[1];
            s_1 = (x0_11 << 1);
        }
        if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
        {
            memcpy(x21_3, x20_3, x0_11);
        }
        *(x21_3 + x0_11) = 0;
        int32_t x0_16 = g3::logLevel(&var_1f8);
        int32_t x19_2;
        if ((x0_16 & 1) == 0)
        {
            x19_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_163c4:
                operator delete(var_1e0_1);
                if ((x19_2 & 1) != 0)
                {
                    goto label_163f4;
                }
            }
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            s = 0x14;
            __builtin_strncpy(&*s[1], "DomainSock", 0xb);
            x19_2 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                void* var_200;
                operator delete(var_200);
                if ((s_1 & 1) != 0)
                {
                    goto label_163c4;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_163c4;
            }
        }
        if (((((x0_16 & 1) == 0 && (s_1 & 1) == 0) || (x0_16 & 1) != 0) && (x19_2 & 1) != 0))
        {
        label_163f4:
            LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*var_1a0[8], "local socket server init fail!", 0x1e);
            LogCapture::~LogCapture();
        }
        x0_23 = 0;
    }
    if ((((x0_3 & 1) != 0 && x0_9 >= -0x10) || ((x0_3 & 1) == 0 && x0_11 >= -0x10)))
    {
        if (*(x24 + 0x28) != x29[-9])
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_23;
    }
}

int64_t sub_16500(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int32_t* x0_3;
    char* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::create(x0_3, x1);
}

int64_t sub_16534(int64_t arg1, char arg2, int64_t arg3)
{
    if ((arg2 & 1) == 0)
    {
        int32_t* x0_3;
        char* x1_1;
        x0_3 = _Unwind_Resume(arg1);
        /* tailcall */
        return protocol::DomainSockServer::create(x0_3, x1_1);
    }
    /* tailcall */
    return sub_16558(arg3);
}

int64_t protocol::DomainSockServer::create(int32_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int32_t x0 = socket(1, 1, 0);
    *arg1 = x0;
    int64_t x0_13;
    void var_1a0;
    void var_198;
    if (x0 != 0xffffffff)
    {
        int32_t var_1a4 = 0xa00000;
        char s;
        char s_1;
        void* var_2d0;
        char* x21_2;
        if (setsockopt() != 0xffffffff)
        {
            var_1a4 = 0xa00000;
            if (setsockopt(*arg1, 1, 8, &var_1a4, 4) == 0xffffffff)
            {
                if ((*data_45358 & 1) == 0)
                {
                    x21_2 = &*(data_45358 + 1);
                }
                else
                {
                    x21_2 = *(data_45362 + 6);
                }
                int32_t var_238 = data_45350;
                int64_t s_7;
                __builtin_memset(&s_7, 0, 0x18);
                size_t x0_34 = strlen(x21_2);
                if (x0_34 < -0x10)
                {
                    goto label_17000;
                }
                void* var_220_1;
                void* x22_4;
                if (x0_34 >= 0x17)
                {
                    uint64_t x23_2 = ((x0_34 + 0x10) & 0xfffffffffffffff0);
                    void* x0_47 = operator new(x23_2);
                    x22_4 = x0_47;
                    size_t var_228_1 = x0_34;
                    var_220_1 = x0_47;
                    s_7 = (x23_2 | 1);
                }
                else
                {
                    x22_4 = &*s_7[1];
                    s_7 = (x0_34 << 1);
                }
                if ((x0_34 >= 0x17 || (x0_34 < 0x17 && x0_34 != 0)))
                {
                    memcpy(x22_4, x21_2, x0_34);
                }
                *(x22_4 + x0_34) = 0;
                int32_t x20_7;
                if ((g3::logLevel(&var_238) & 1) == 0)
                {
                    x20_7 = 0;
                    if ((s_7 & 1) != 0)
                    {
                    label_16c2c:
                        operator delete(var_220_1);
                        if ((x20_7 & 1) == 0)
                        {
                            goto label_16fbc;
                        }
                        goto label_16c5c;
                    }
                }
                else
                {
                    int64_t s_6;
                    __builtin_memset(&s_6, 0, 0x18);
                    s_6 = 0x18;
                    __builtin_strncpy(&*s_6[1], "DomainServer", 0xd);
                    x20_7 = g3::logTag(&s_6);
                    if ((s_6 & 1) != 0)
                    {
                        void* var_240;
                        operator delete(var_240);
                        if ((s_7 & 1) != 0)
                        {
                            goto label_16c2c;
                        }
                    }
                    else if ((s_7 & 1) != 0)
                    {
                        goto label_16c2c;
                    }
                }
                if ((x20_7 & 1) == 0)
                {
                    goto label_16fbc;
                }
            label_16c5c:
                LogCapture::LogCapture(&var_1a0, "DomainServer", &data_45350, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "set recv buf size error", 0x17);
                goto label_16fb4;
            }
            int32_t var_254 = 1;
            int32_t x0_5;
            int128_t v0_1;
            x0_5 = setsockopt(*arg1, 1, 2, &var_254, 4);
            if (x0_5 == 0xffffffff)
            {
                if ((*data_45358 & 1) == 0)
                {
                    x21_2 = &*(data_45358 + 1);
                }
                else
                {
                    x21_2 = *(data_45362 + 6);
                }
                int32_t var_278 = data_45350;
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                size_t x0_45 = strlen(x21_2);
                if (x0_45 < -0x10)
                {
                    goto label_17000;
                }
                void* var_260_1;
                void* x22_5;
                if (x0_45 >= 0x17)
                {
                    uint64_t x23_3 = ((x0_45 + 0x10) & 0xfffffffffffffff0);
                    void* x0_60 = operator new(x23_3);
                    x22_5 = x0_60;
                    size_t var_268_1 = x0_45;
                    var_260_1 = x0_60;
                    s_5 = (x23_3 | 1);
                }
                else
                {
                    x22_5 = &*s_5[1];
                    s_5 = (x0_45 << 1);
                }
                if ((x0_45 >= 0x17 || (x0_45 < 0x17 && x0_45 != 0)))
                {
                    memcpy(x22_5, x21_2, x0_45);
                }
                *(x22_5 + x0_45) = 0;
                int32_t x20_9;
                if ((g3::logLevel(&var_278) & 1) == 0)
                {
                    x20_9 = 0;
                    if ((s_5 & 1) != 0)
                    {
                    label_16d90:
                        operator delete(var_260_1);
                        if ((x20_9 & 1) == 0)
                        {
                            goto label_16fbc;
                        }
                        goto label_16dc0;
                    }
                }
                else
                {
                    int64_t s_4;
                    __builtin_memset(&s_4, 0, 0x18);
                    s_4 = 0x14;
                    __builtin_strncpy(&*s_4[1], "DomainSock", 0xb);
                    x20_9 = g3::logTag(&s_4);
                    if ((s_4 & 1) != 0)
                    {
                        void* var_280;
                        operator delete(var_280);
                        if ((s_5 & 1) != 0)
                        {
                            goto label_16d90;
                        }
                    }
                    else if ((s_5 & 1) != 0)
                    {
                        goto label_16d90;
                    }
                }
                if ((x20_9 & 1) == 0)
                {
                    goto label_16fbc;
                }
            label_16dc0:
                LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_83 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "setsockopt SO_REUSEADDR failed! …", 0x29);
                char* x0_86 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_83, x0_86, strlen(x0_86));
                goto label_16fb4;
            }
            v0_1 = 0;
            *v0_1[8] = 0;
            *(arg1 + 0xc) = {0};
            __builtin_memset(&arg1[7], 0, 0x5e);
            arg1[3] = 1;
            *(arg1 + 0xe) = 0;
            void* x1;
            if ((*arg2 & 1) != 0)
            {
                x1 = *(arg2 + 0x10);
            }
            else
            {
                x1 = &arg2[1];
            }
            int32_t x0_8 = strlen(strcpy((arg1 + 0xf), x1, v0_1));
            if (bind(*arg1, &arg1[3], (x0_8 + 3)) == 0xffffffff)
            {
                if ((*data_45358 & 1) == 0)
                {
                    x21_2 = &*(data_45358 + 1);
                }
                else
                {
                    x21_2 = *(data_45362 + 6);
                }
                int32_t var_2b0 = data_45350;
                int64_t s_3;
                __builtin_memset(&s_3, 0, 0x18);
                size_t x0_58 = strlen(x21_2);
                if (x0_58 < -0x10)
                {
                    goto label_17000;
                }
                void* var_298_1;
                void* x22_6;
                if (x0_58 >= 0x17)
                {
                    uint64_t x23_4 = ((x0_58 + 0x10) & 0xfffffffffffffff0);
                    void* x0_73 = operator new(x23_4);
                    x22_6 = x0_73;
                    size_t var_2a0_1 = x0_58;
                    var_298_1 = x0_73;
                    s_3 = (x23_4 | 1);
                }
                else
                {
                    x22_6 = &*s_3[1];
                    s_3 = (x0_58 << 1);
                }
                if ((x0_58 >= 0x17 || (x0_58 < 0x17 && x0_58 != 0)))
                {
                    memcpy(x22_6, x21_2, x0_58);
                }
                *(x22_6 + x0_58) = 0;
                int32_t x20_11;
                if ((g3::logLevel(&var_2b0) & 1) == 0)
                {
                    x20_11 = 0;
                    if ((s_3 & 1) != 0)
                    {
                    label_16eb8:
                        operator delete(var_298_1);
                        if ((x20_11 & 1) == 0)
                        {
                            goto label_16fbc;
                        }
                        goto label_16ee8;
                    }
                }
                else
                {
                    int64_t s_2;
                    __builtin_memset(&s_2, 0, 0x18);
                    s_2 = 0x14;
                    __builtin_strncpy(&*s_2[1], "DomainSock", 0xb);
                    x20_11 = g3::logTag(&s_2);
                    if ((s_2 & 1) != 0)
                    {
                        void* var_2b8;
                        operator delete(var_2b8);
                        if ((s_3 & 1) != 0)
                        {
                            goto label_16eb8;
                        }
                    }
                    else if ((s_3 & 1) != 0)
                    {
                        goto label_16eb8;
                    }
                }
                if ((x20_11 & 1) == 0)
                {
                    goto label_16fbc;
                }
            label_16ee8:
                LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_100 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "bind socket failed! error is ", 0x1d);
                char* x0_103 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_100, x0_103, strlen(x0_103));
                goto label_16fb4;
            }
            if (listen(*arg1, 0xa) == 0xffffffff)
            {
                if ((*data_45358 & 1) == 0)
                {
                    x21_2 = &*(data_45358 + 1);
                }
                else
                {
                    x21_2 = *(data_45362 + 6);
                }
                int32_t var_2e8 = data_45350;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_71 = strlen(x21_2);
                if (x0_71 < -0x10)
                {
                    goto label_17000;
                }
                void* x22_7;
                if (x0_71 >= 0x17)
                {
                    uint64_t x23_5 = ((x0_71 + 0x10) & 0xfffffffffffffff0);
                    void* x0_90 = operator new(x23_5);
                    x22_7 = x0_90;
                    size_t var_2d8_1 = x0_71;
                    var_2d0 = x0_90;
                    s_1 = (x23_5 | 1);
                }
                else
                {
                    void var_2df;
                    x22_7 = &var_2df;
                    s_1 = (x0_71 << 1);
                }
                if ((x0_71 >= 0x17 || (x0_71 < 0x17 && x0_71 != 0)))
                {
                    memcpy(x22_7, x21_2, x0_71);
                }
                *(x22_7 + x0_71) = 0;
                int32_t x20_13;
                if ((g3::logLevel(&var_2e8) & 1) == 0)
                {
                    x20_13 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_16f40:
                        operator delete(var_2d0);
                        if ((x20_13 & 1) == 0)
                        {
                            goto label_16fbc;
                        }
                        goto label_16f70;
                    }
                }
                else
                {
                    __builtin_memset(&s, 0, 0x18);
                    s = 0x14;
                    int64_t var_2ff;
                    __builtin_strncpy(&var_2ff, "DomainSock", 0xb);
                    x20_13 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        void* var_2f0_1;
                        operator delete(var_2f0_1);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_16f40;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_16f40;
                    }
                }
                if ((x20_13 & 1) == 0)
                {
                    goto label_16fbc;
                }
            label_16f70:
                LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_110 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "listen socket failed! error is ", 0x1f);
                char* x0_113 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_110, x0_113, strlen(x0_113));
                goto label_16fb4;
            }
            x0_13 = 1;
        }
        else
        {
            if ((*data_45358 & 1) == 0)
            {
                x21_2 = &*(data_45358 + 1);
            }
            else
            {
                x21_2 = *(data_45362 + 6);
            }
            int32_t var_200 = data_45350;
            int64_t s_9;
            __builtin_memset(&s_9, 0, 0x18);
            size_t x0_17 = strlen(x21_2);
            if (x0_17 < -0x10)
            {
            label_17000:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_17008:
                int64_t x0_119 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                void* var_2f0;
                if ((s & 1) != 0)
                {
                    operator delete(var_2f0);
                }
                if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
                {
                    operator delete(var_2d0);
                }
                int64_t x0_123 = _Unwind_Resume(x0_119);
                LogCapture::~LogCapture();
                /* tailcall */
                return protocol::DomainSockServer::run(_Unwind_Resume(x0_123));
            }
            void* var_1e8_1;
            void* x22_2;
            if (x0_17 >= 0x17)
            {
                uint64_t x23_1 = ((x0_17 + 0x10) & 0xfffffffffffffff0);
                void* x0_36 = operator new(x23_1);
                x22_2 = x0_36;
                size_t var_1f0_1 = x0_17;
                var_1e8_1 = x0_36;
                s_9 = (x23_1 | 1);
            }
            else
            {
                x22_2 = &*s_9[1];
                s_9 = (x0_17 << 1);
            }
            if ((x0_17 >= 0x17 || (x0_17 < 0x17 && x0_17 != 0)))
            {
                memcpy(x22_2, x21_2, x0_17);
            }
            *(x22_2 + x0_17) = 0;
            int32_t x20_5;
            if ((g3::logLevel(&var_200) & 1) == 0)
            {
                x20_5 = 0;
                if ((s_9 & 1) != 0)
                {
                label_16ac8:
                    operator delete(var_1e8_1);
                    if ((x20_5 & 1) != 0)
                    {
                        goto label_16af8;
                    }
                    goto label_16fbc;
                }
            }
            else
            {
                int64_t s_8;
                __builtin_memset(&s_8, 0, 0x18);
                s_8 = 0x14;
                __builtin_strncpy(&*s_8[1], "DomainSock", 0xb);
                x20_5 = g3::logTag(&s_8);
                if ((s_8 & 1) != 0)
                {
                    void* var_208;
                    operator delete(var_208);
                    if ((s_9 & 1) != 0)
                    {
                        goto label_16ac8;
                    }
                }
                else if ((s_9 & 1) != 0)
                {
                    goto label_16ac8;
                }
            }
            if ((x20_5 & 1) == 0)
            {
                goto label_16fbc;
            }
        label_16af8:
            LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "set send buf size error", 0x17);
        label_16fb4:
            LogCapture::~LogCapture();
        label_16fbc:
            close(*arg1);
            x0_13 = 0;
            *arg1 = 0xffffffff;
        }
    }
    else
    {
        char* x20_1;
        if ((*data_45358 & 1) == 0)
        {
            x20_1 = &*(data_45358 + 1);
        }
        else
        {
            x20_1 = *(data_45362 + 6);
        }
        int32_t var_1c8 = data_45350;
        int64_t s_11;
        __builtin_memset(&s_11, 0, 0x18);
        size_t x0_15 = strlen(x20_1);
        if (x0_15 < -0x10)
        {
            goto label_17008;
        }
        void* var_1b0_1;
        void* x21_3;
        if (x0_15 >= 0x17)
        {
            uint64_t x22_3 = ((x0_15 + 0x10) & 0xfffffffffffffff0);
            void* x0_19 = operator new(x22_3);
            x21_3 = x0_19;
            size_t var_1b8_1 = x0_15;
            var_1b0_1 = x0_19;
            s_11 = (x22_3 | 1);
        }
        else
        {
            x21_3 = &*s_11[1];
            s_11 = (x0_15 << 1);
        }
        if ((x0_15 >= 0x17 || (x0_15 < 0x17 && x0_15 != 0)))
        {
            memcpy(x21_3, x20_1, x0_15);
        }
        *(x21_3 + x0_15) = 0;
        int32_t x19_2;
        if ((g3::logLevel(&var_1c8) & 1) == 0)
        {
            x19_2 = 0;
            if ((s_11 & 1) != 0)
            {
            label_1699c:
                operator delete(var_1b0_1);
                if ((x19_2 & 1) == 0)
                {
                    goto label_169a4;
                }
                goto label_16824;
            }
        }
        else
        {
            int64_t s_10;
            __builtin_memset(&s_10, 0, 0x18);
            s_10 = 0x14;
            __builtin_strncpy(&*s_10[1], "DomainSock", 0xb);
            x19_2 = g3::logTag(&s_10);
            if ((s_10 & 1) != 0)
            {
                void* var_1d0;
                operator delete(var_1d0);
                if ((s_11 & 1) != 0)
                {
                    goto label_1699c;
                }
            }
            else if ((s_11 & 1) != 0)
            {
                goto label_1699c;
            }
        }
        if ((x19_2 & 1) == 0)
        {
        label_169a4:
            x0_13 = 0;
        }
        else
        {
        label_16824:
            LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_27 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "create socket failed!, error is ", 0x20);
            char* x0_30 = strerror(*__errno());
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_27, x0_30, strlen(x0_30));
            LogCapture::~LogCapture();
            x0_13 = 0;
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_13;
}

int64_t sub_1702c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_3));
}

int64_t sub_17060(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_3));
}

int64_t sub_17084(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_2));
}

int64_t sub_1709c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_3));
}

int64_t sub_170c0(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_2));
}

int64_t sub_170d8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_3));
}

int64_t sub_170fc(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_2));
}

int64_t sub_17110(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_3));
}

int64_t sub_17130(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_2));
}

int64_t sub_17144(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return protocol::DomainSockServer::run(_Unwind_Resume(x0_2));
}

void* protocol::DomainSockServer::run(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    uint64_t x21 = *(arg1 + 0x158);
    uint64_t x20;
    if ((x21 & 1) != 0)
    {
        x20 = *(arg1 + 0x160);
    }
    else
    {
        x20 = (x21 >> 1);
    }
    int64_t x0 = pthread_self();
    void* s_2;
    int64_t s_7;
    size_t var_468;
    void* s_8;
    size_t x21_1;
    if (x20 >= 0x10)
    {
        __builtin_memset(&s_7, 0, 0x18);
        int32_t temp0_1 = (x21 & 1);
        uint64_t x8_2;
        if (temp0_1 == 0)
        {
            x8_2 = ((x21 >> 1) & 0x7fffffff);
        }
        else
        {
            x8_2 = *(arg1 + 0x160);
        }
        void* x22_1;
        if (temp0_1 != 0)
        {
            x22_1 = *(arg1 + 0x168);
        }
        else
        {
            x22_1 = (arg1 + 0x159);
        }
        if (x8_2 < 0xf)
        {
            x21_1 = x8_2;
        }
        else
        {
            x21_1 = 0xf;
        }
        if (x21_1 < -0x10)
        {
            int64_t x0_60 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            void* s_9 = s_2;
            if (s_9 != 0)
            {
                void* s_11 = s_9;
                operator delete(s_9);
            }
            /* tailcall */
            return protocol::DomainSockServer::isInited(_Unwind_Resume(x0_60));
        }
        void* var_460_1;
        void* x23_1;
        void* x24_1;
        if (x21_1 >= 0x17)
        {
            void* x0_2 = operator new(0x10);
            x23_1 = x0_2;
            var_460_1 = x0_2;
            s_7 = 0x11;
            var_468 = x21_1;
            x24_1 = (&s_7 | 1);
        }
        else
        {
            x24_1 = (&s_7 | 1);
            x23_1 = x24_1;
            s_7 = (x21_1 << 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            memcpy(x23_1, x22_1, x21_1);
        }
        *(x23_1 + x21_1) = 0;
        void* x1_3;
        if ((s_7 & 1) == 0)
        {
            x1_3 = x24_1;
        }
        else
        {
            x1_3 = var_460_1;
        }
        s_8 = pthread_setname_np(x0, x1_3);
        if ((s_7 & 1) != 0)
        {
            s_8 = operator delete(var_460_1);
        }
    }
    else
    {
        void* x1_1;
        if ((x21 & 1) != 0)
        {
            x1_1 = *(arg1 + 0x168);
        }
        else
        {
            x1_1 = (arg1 + 0x159);
        }
        s_8 = pthread_setname_np(x0, x1_1);
    }
    if (((x20 < 0x10 && *(arg1 + 8) != 0) || ((x20 >= 0x10 && x21_1 >= -0x10) && *(arg1 + 8) != 0)))
    {
        size_t* var_688_1 = &var_468;
        int32_t x0_7;
        size_t x0_9;
        size_t x0_11;
        while (true)
        {
            socklen_t var_5bc = 0;
            x0_7 = accept(*arg1, (arg1 + 0x7a), &var_5bc);
            *(arg1 + 4) = x0_7;
            int32_t var_618;
            int64_t s_4;
            char* x23_2;
            if (x0_7 == 0xffffffff)
            {
                uint32_t x9_4 = *data_45338;
                char* x10_2 = *(data_45342 + 6);
                int32_t var_5e0 = data_45330;
                char* x23_3;
                if ((x9_4 & 1) == 0)
                {
                    x23_3 = &*(data_45338 + 1);
                }
                else
                {
                    x23_3 = x10_2;
                }
                int64_t s_6;
                __builtin_memset(&s_6, 0, 0x18);
                x0_11 = strlen(x23_3);
                if (x0_11 >= -0x10)
                {
                    void* var_5c8;
                    void* x24_3;
                    if (x0_11 >= 0x17)
                    {
                        uint64_t x21_3 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
                        void* x0_20 = operator new(x21_3);
                        x24_3 = x0_20;
                        size_t var_5d0_1 = x0_11;
                        var_5c8 = x0_20;
                        s_6 = (x21_3 | 1);
                    }
                    else
                    {
                        x24_3 = &*s_6[1];
                        s_6 = (x0_11 << 1);
                    }
                    if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
                    {
                        memcpy(x24_3, x23_3, x0_11);
                    }
                    *(x24_3 + x0_11) = 0;
                    s_8 = g3::logLevel(&var_5e0);
                    int32_t x22_5;
                    if ((s_8 & 1) == 0)
                    {
                        x22_5 = 0;
                        if ((s_6 & 1) != 0)
                        {
                        label_17738:
                            s_8 = operator delete(var_5c8);
                            if ((x22_5 & 1) != 0)
                            {
                                goto label_1775c;
                            }
                        }
                    }
                    else
                    {
                        int64_t s_5;
                        __builtin_memset(&s_5, 0, 0x18);
                        s_5 = 0x14;
                        __builtin_strncpy((&s_5 | 1), "DomainSock", 0xa);
                        int64_t var_5f0_1;
                        *var_5f0_1[3] = 0;
                        s_8 = g3::logTag(&s_5);
                        x22_5 = s_8;
                        if ((s_5 & 1) != 0)
                        {
                            void* var_5e8;
                            s_8 = operator delete(var_5e8);
                            if ((s_6 & 1) != 0)
                            {
                                goto label_17738;
                            }
                        }
                        else if ((s_6 & 1) != 0)
                        {
                            goto label_17738;
                        }
                    }
                    if (((((s_8 & 1) == 0 && (s_6 & 1) == 0) || (s_8 & 1) != 0) && (x22_5 & 1) != 0))
                    {
                    label_1775c:
                        LogCapture::LogCapture(&s_7, "DomainSock", &data_45330, &data_2ddb7, &nullptr->ident.version);
                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_46 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_688_1, "accept client failed! error is ", 0x1f);
                        char* x0_49 = strerror(*__errno());
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_46, x0_49, strlen(x0_49));
                        s_8 = LogCapture::~LogCapture();
                        if (*(arg1 + 8) == 0)
                        {
                            break;
                        }
                        continue;
                    }
                }
            }
            else
            {
                *(arg1 + 0xa) = 1;
                if ((*data_45318 & 1) == 0)
                {
                    x23_2 = &*(data_45318 + 1);
                }
                else
                {
                    x23_2 = *(data_45322 + 6);
                }
                var_618 = data_45310;
                __builtin_memset(&s_4, 0, 0x18);
                x0_9 = strlen(x23_2);
                if (x0_9 < -0x10)
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                }
            }
            if (((x0_7 != 0xffffffff && x0_9 < -0x10) || (x0_7 == 0xffffffff && x0_11 < -0x10)))
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
                break;
            }
            if ((x0_7 != 0xffffffff && x0_9 >= -0x10))
            {
                void* var_600_1;
                void* x24_2;
                if (x0_9 >= 0x17)
                {
                    uint64_t x21_2 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                    void* x0_13 = operator new(x21_2);
                    x24_2 = x0_13;
                    size_t var_608_1 = x0_9;
                    var_600_1 = x0_13;
                    s_4 = (x21_2 | 1);
                }
                else
                {
                    x24_2 = &*s_4[1];
                    s_4 = (x0_9 << 1);
                }
                if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
                {
                    memcpy(x24_2, x23_2, x0_9);
                }
                *(x24_2 + x0_9) = 0;
                int32_t x0_16 = g3::logLevel(&var_618);
                int32_t x22_4;
                if ((x0_16 & 1) == 0)
                {
                    x22_4 = 0;
                    if ((s_4 & 1) != 0)
                    {
                    label_17570:
                        operator delete(var_600_1);
                        if ((x22_4 & 1) != 0)
                        {
                            goto label_17598;
                        }
                    }
                }
                else
                {
                    int64_t s_3;
                    __builtin_memset(&s_3, 0, 0x18);
                    s_3 = 0x14;
                    __builtin_strncpy((&s_3 | 1), "DomainSock", 0xa);
                    int64_t var_628_1;
                    *var_628_1[3] = 0;
                    x22_4 = g3::logTag(&s_3);
                    if ((s_3 & 1) != 0)
                    {
                        void* var_620;
                        operator delete(var_620);
                        if ((s_4 & 1) != 0)
                        {
                            goto label_17570;
                        }
                    }
                    else if ((s_4 & 1) != 0)
                    {
                        goto label_17570;
                    }
                }
                if (((((x0_16 & 1) == 0 && (s_4 & 1) == 0) || (x0_16 & 1) != 0) && (x22_4 & 1) != 0))
                {
                label_17598:
                    LogCapture::LogCapture(&s_7, "DomainSock", &data_45310, &data_2ddb7, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_688_1, "accept client success", 0x15);
                    LogCapture::~LogCapture();
                }
                __builtin_memset(&s_2, 0, 0x18);
                while (*(arg1 + 8) != 0)
                {
                    if (recv(*(arg1 + 4), &s_7, 0x400, 0) <= 0)
                    {
                        break;
                    }
                    char* var_640_1;
                    std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >::insert<char*>(&s_2, var_640_1, &s_7);
                    int32_t x0_30;
                    do
                    {
                        x0_30 = protocol::DomainSockServer::processLoop(arg1);
                    } while ((x0_30 & 1) != 0);
                }
                if (*(arg1 + 8) != 0)
                {
                    uint32_t x9_5 = *data_45358;
                    char* x10_5 = *(data_45362 + 6);
                    int32_t var_668 = data_45350;
                    char* x22_6;
                    if ((x9_5 & 1) == 0)
                    {
                        x22_6 = &*(data_45358 + 1);
                    }
                    else
                    {
                        x22_6 = x10_5;
                    }
                    int64_t s_1;
                    __builtin_memset(&s_1, 0, 0x18);
                    size_t x0_34 = strlen(x22_6);
                    if (x0_34 < -0x10)
                    {
                        break;
                    }
                    void* var_650;
                    void* x26_2;
                    if (x0_34 >= 0x17)
                    {
                        uint64_t x21_4 = ((x0_34 + 0x10) & 0xfffffffffffffff0);
                        void* x0_36 = operator new(x21_4);
                        x26_2 = x0_36;
                        size_t var_658_1 = x0_34;
                        var_650 = x0_36;
                        s_1 = (x21_4 | 1);
                    }
                    else
                    {
                        x26_2 = &*s_1[1];
                        s_1 = (x0_34 << 1);
                    }
                    if ((x0_34 >= 0x17 || (x0_34 < 0x17 && x0_34 != 0)))
                    {
                        memcpy(x26_2, x22_6, x0_34);
                    }
                    *(x26_2 + x0_34) = 0;
                    int32_t x0_39 = g3::logLevel(&var_668);
                    int32_t x22_7;
                    if ((x0_39 & 1) == 0)
                    {
                        x22_7 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_177c4:
                            operator delete(var_650);
                            if ((x22_7 & 1) != 0)
                            {
                                goto label_177ec;
                            }
                        }
                    }
                    else
                    {
                        int64_t s;
                        __builtin_memset(&s, 0, 0x18);
                        s = 0x14;
                        __builtin_strncpy((&s | 1), "DomainSock", 0xa);
                        int64_t var_678_1;
                        *var_678_1[3] = 0;
                        x22_7 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            void* var_670;
                            operator delete(var_670);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_177c4;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_177c4;
                        }
                    }
                    if (((((x0_39 & 1) == 0 && (s_1 & 1) == 0) || (x0_39 & 1) != 0) && (x22_7 & 1) != 0))
                    {
                    label_177ec:
                        void var_5b8;
                        LogCapture::LogCapture(&var_5b8, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                        void var_5b0;
                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_5b0, "recv error:", 0xb));
                        LogCapture::~LogCapture();
                    }
                }
                close(*(arg1 + 4));
                *(arg1 + 0xa) = 0;
                s_8 = s_2;
                if (s_8 != 0)
                {
                    void* s_10 = s_8;
                    s_8 = operator delete(s_8);
                }
            }
            if (((x0_7 == 0xffffffff && x0_11 >= -0x10) || (x0_7 != 0xffffffff && x0_9 >= -0x10)))
            {
                if (*(arg1 + 8) == 0)
                {
                    break;
                }
            }
        }
        if (((x0_7 != 0xffffffff && x0_9 < -0x10) || (x0_7 == 0xffffffff && x0_11 < -0x10)))
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_17884:
            __stack_chk_fail();
            /* no return */
        }
    }
    if (((((x20 < 0x10 && *(arg1 + 8) == 0) || ((x20 >= 0x10 && x21_1 >= -0x10) && *(arg1 + 8) == 0)) || (x20 < 0x10 && *(arg1 + 8) != 0)) || ((x20 >= 0x10 && x21_1 >= -0x10) && *(arg1 + 8) != 0)))
    {
        if (*(x25 + 0x28) == x8)
        {
            return s_8;
        }
        goto label_17884;
    }
}

int64_t sub_178ac(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) != 0 && (arg4 & 1) == 0) || ((arg2 & 1) == 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_179b4:
            arg_a0 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) != 0 && (arg4 & 1) != 0) || ((arg2 & 1) == 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_179b4;
        }
    }
    /* tailcall */
    return protocol::DomainSockServer::isInited(_Unwind_Resume(arg1));
}

int64_t sub_178e4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    /* tailcall */
    return protocol::DomainSockServer::isInited(_Unwind_Resume(arg1));
}

int64_t sub_1793c(int64_t arg1, void* arg2)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    if (arg2 != 0)
    {
        arg_a0 = arg2;
        operator delete(arg2);
    }
    /* tailcall */
    return protocol::DomainSockServer::isInited(_Unwind_Resume(x0_1));
}

int64_t sub_17940(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    /* tailcall */
    return protocol::DomainSockServer::isInited(_Unwind_Resume(arg1));
}

int64_t sub_17960(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    /* tailcall */
    return protocol::DomainSockServer::isInited(_Unwind_Resume(arg1));
}

int64_t sub_1798c(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    /* tailcall */
    return protocol::DomainSockServer::isInited(_Unwind_Resume(arg1));
}

uint64_t protocol::DomainSockServer::isInited(void* arg1)
{
    return *(arg1 + 9);
}

uint64_t protocol::DomainSockServer::isConnected(void* arg1)
{
    return *(arg1 + 0xa);
}

int64_t* protocol::DomainSockServer::addPlugin(void* arg1, int64_t arg2, void* arg3)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    void* x0_1 = std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::operator[]((arg1 + 0x120));
    int64_t* x8_1 = *(arg3 + 0x20);
    void var_70;
    int64_t* var_50;
    if (x8_1 == 0)
    {
        var_50 = nullptr;
    }
    else if (arg3 == x8_1)
    {
        var_50 = &var_70;
        *(*x8_1 + 0x18)(x8_1, &var_70);
    }
    else
    {
        var_50 = *(*x8_1 + 0x10)(x8_1);
    }
    sub_1bb50(&var_70, x0_1);
    int64_t* x0_6 = var_50;
    int64_t x8_3;
    if (&var_70 == x0_6)
    {
        x8_3 = *(*x0_6 + 0x20);
    }
    if ((&var_70 != x0_6 && x0_6 != 0))
    {
        x8_3 = *(*x0_6 + 0x28);
    }
    if ((&var_70 == x0_6 || (&var_70 != x0_6 && x0_6 != 0)))
    {
        x0_6 = x8_3();
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_6;
}

void* std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::operator[](std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    int64_t var_60;
    int64_t* x0 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, &var_60);
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x19 = *x0;
    if (x19 == 0)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_1;
        int128_t v0_1;
        x0_1 = operator new(0x70);
        x19 = x0_1;
        *(x0_1 + 0x20) = 0;
        *(x19 + 0x28) = 0;
        *(x19 + 0x30) = 0;
        if ((*arg2 & 1) == 0)
        {
            v0_1 = *arg2;
            *(x0_1 + 0x30) = *(arg2 + 0x10);
            *(x0_1 + 0x20) = v0_1;
        }
        else
        {
            size_t x22_1 = *(arg2 + 8);
            if (x22_1 < -0x10)
            {
                int64_t x0_8 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                operator delete(x19);
                int64_t* x0_11;
                int64_t x1_3;
                void* x2_2;
                x0_11 = _Unwind_Resume(x0_8);
                /* tailcall */
                return protocol::DomainSockServer::addPlugin(x0_11, x1_3, x2_2);
            }
            int64_t x23_1 = *(arg2 + 0x10);
            void* x24_1;
            if (x22_1 >= 0x17)
            {
                uint64_t x25_1 = ((x22_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_4 = operator new(x25_1);
                x24_1 = x0_4;
                *(x19 + 0x28) = x22_1;
                *(x19 + 0x30) = x0_4;
                *(x19 + 0x20) = (x25_1 | 1);
            }
            else
            {
                x24_1 = (x19 + 0x21);
                *(x19 + 0x20) = (x22_1 << 1);
            }
            if ((x22_1 >= 0x17 || (x22_1 < 0x17 && x22_1 != 0)))
            {
                memcpy(x24_1, x23_1, x22_1);
            }
            *(x24_1 + x22_1) = 0;
        }
        int64_t x8_6 = var_60;
        *(x19 + 0x60) = 0;
        *x19 = 0;
        *(x19 + 8) = 0;
        *(x19 + 0x10) = x8_6;
        *x0 = x19;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x8_8 = **arg1;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x1_2;
        if (x8_8 == 0)
        {
            x1_2 = x19;
        }
        else
        {
            *arg1 = x8_8;
            x1_2 = *x0;
        }
        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(arg1[1], x1_2);
        arg1[2] = (arg1[2] + 1);
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return (x19 + 0x40);
}

int64_t* protocol::DomainSockServer::addPlugin(void* arg1, int64_t arg2, void* arg3)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    void* x0_1 = std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::operator[]((arg1 + 0x138));
    int64_t* x8_1 = *(arg3 + 0x20);
    void var_70;
    int64_t* var_50;
    if (x8_1 == 0)
    {
        var_50 = nullptr;
    }
    else if (arg3 == x8_1)
    {
        var_50 = &var_70;
        *(*x8_1 + 0x18)(x8_1, &var_70);
    }
    else
    {
        var_50 = *(*x8_1 + 0x10)(x8_1);
    }
    sub_1bde4(&var_70, x0_1);
    int64_t* x0_6 = var_50;
    int64_t x8_3;
    if (&var_70 == x0_6)
    {
        x8_3 = *(*x0_6 + 0x20);
    }
    if ((&var_70 != x0_6 && x0_6 != 0))
    {
        x8_3 = *(*x0_6 + 0x28);
    }
    if ((&var_70 == x0_6 || (&var_70 != x0_6 && x0_6 != 0)))
    {
        x0_6 = x8_3();
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_6;
}

void* std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::operator[](std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    int64_t var_60;
    int64_t* x0 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, &var_60);
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x19 = *x0;
    if (x19 == 0)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_1;
        int128_t v0_1;
        x0_1 = operator new(0x70);
        x19 = x0_1;
        *(x0_1 + 0x20) = 0;
        *(x19 + 0x28) = 0;
        *(x19 + 0x30) = 0;
        if ((*arg2 & 1) == 0)
        {
            v0_1 = *arg2;
            *(x0_1 + 0x30) = *(arg2 + 0x10);
            *(x0_1 + 0x20) = v0_1;
        }
        else
        {
            size_t x22_1 = *(arg2 + 8);
            if (x22_1 < -0x10)
            {
                int64_t x0_8 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                operator delete(x19);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_11;
                char* x1_3;
                char* x2_2;
                x0_11 = _Unwind_Resume(x0_8);
                /* tailcall */
                return protocol::DomainSockServer::send(x0_11, x1_3, x2_2);
            }
            int64_t x23_1 = *(arg2 + 0x10);
            void* x24_1;
            if (x22_1 >= 0x17)
            {
                uint64_t x25_1 = ((x22_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_4 = operator new(x25_1);
                x24_1 = x0_4;
                *(x19 + 0x28) = x22_1;
                *(x19 + 0x30) = x0_4;
                *(x19 + 0x20) = (x25_1 | 1);
            }
            else
            {
                x24_1 = (x19 + 0x21);
                *(x19 + 0x20) = (x22_1 << 1);
            }
            if ((x22_1 >= 0x17 || (x22_1 < 0x17 && x22_1 != 0)))
            {
                memcpy(x24_1, x23_1, x22_1);
            }
            *(x24_1 + x22_1) = 0;
        }
        int64_t x8_6 = var_60;
        *(x19 + 0x60) = 0;
        *x19 = 0;
        *(x19 + 8) = 0;
        *(x19 + 0x10) = x8_6;
        *x0 = x19;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x8_8 = **arg1;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x1_2;
        if (x8_8 == 0)
        {
            x1_2 = x19;
        }
        else
        {
            *arg1 = x8_8;
            x1_2 = *x0;
        }
        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(arg1[1], x1_2);
        arg1[2] = (arg1[2] + 1);
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return (x19 + 0x40);
}

uint64_t protocol::DomainSockServer::send(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, char* arg2, char* arg3)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    uint64_t x8_1 = *arg3;
    uint64_t x8_2;
    if ((x8_1 & 1) == 0)
    {
        x8_2 = (x8_1 >> 1);
    }
    else
    {
        x8_2 = *(arg3 + 8);
    }
    size_t x0_3;
    void var_1b0;
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_1a8;
    if (x8_2 > 0x63)
    {
        char* x23_1;
        if ((*data_452d8 & 1) == 0)
        {
            x23_1 = &*(data_452d8 + 1);
        }
        else
        {
            x23_1 = *(data_452e2 + 6);
        }
        int32_t var_208 = data_452d0;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x18);
        x0_3 = strlen(x23_1);
        if (x0_3 >= -0x10)
        {
            void* var_1f0;
            void* x24_2;
            if (x0_3 >= 0x17)
            {
                uint64_t x25_2 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
                void* x0_12 = operator new(x25_2);
                x24_2 = x0_12;
                size_t var_1f8_1 = x0_3;
                var_1f0 = x0_12;
                s_1 = (x25_2 | 1);
            }
            else
            {
                x24_2 = &*s_1[1];
                s_1 = (x0_3 << 1);
            }
            if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
            {
                memcpy(x24_2, x23_1, x0_3);
            }
            *(x24_2 + x0_3) = 0;
            int64_t s;
            void* var_210;
            int32_t x22_4;
            if ((g3::logLevel(&var_208) & 1) == 0)
            {
                x22_4 = 0;
                if ((s_1 & 1) != 0)
                {
                label_1816c:
                    operator delete(var_1f0);
                    if ((x22_4 & 1) != 0)
                    {
                        goto label_1819c;
                    }
                    goto label_181d8;
                }
            }
            else
            {
                __builtin_memset(&s, 0, 0x18);
                s = 0x14;
                __builtin_strncpy(&*s[1], "DomainSock", 0xb);
                x22_4 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    operator delete(var_210);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_1816c;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_1816c;
                }
            }
            if ((x22_4 & 1) == 0)
            {
                goto label_181d8;
            }
        label_1819c:
            LogCapture::LogCapture(&var_1b0, "DomainSock", &data_452d0, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_29 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "sending msg_id:", 0xf);
            uint64_t x8_19 = *arg2;
            int32_t temp0_1 = (x8_19 & 1);
            void* x1_4;
            if (temp0_1 != 0)
            {
                x1_4 = *(arg2 + 0x10);
            }
            else
            {
                x1_4 = &arg2[1];
            }
            uint64_t x2_4;
            if (temp0_1 == 0)
            {
                x2_4 = (x8_19 >> 1);
            }
            else
            {
                x2_4 = *(arg2 + 8);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_29, x1_4, x2_4);
        label_181d4:
            LogCapture::~LogCapture();
        label_181d8:
            uint64_t x8_20 = *arg3;
            int32_t temp2_1 = (x8_20 & 1);
            void* x23_2;
            if (temp2_1 != 0)
            {
                x23_2 = *(arg3 + 0x10);
            }
            else
            {
                x23_2 = &arg3[1];
            }
            uint64_t i_1;
            if (temp2_1 == 0)
            {
                i_1 = (x8_20 >> 1);
            }
            else
            {
                i_1 = *(arg3 + 8);
            }
            int64_t* s_4 = operator new(0x18);
            __builtin_memset(s_4, 0, 0x18);
            if (i_1 != 0)
            {
                if ((i_1 & 0xffffffff80000000) != 0)
                {
                    int64_t x0_39 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
                    if ((s & 1) != 0)
                    {
                        operator delete(var_210);
                    }
                    if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
                    {
                        operator delete(var_1f0);
                    }
                    int64_t x0_43 = _Unwind_Resume(x0_39);
                    LogCapture::~LogCapture();
                    int64_t* x0_45;
                    char* x1_6;
                    int64_t* x2_5;
                    x0_45 = _Unwind_Resume(x0_43);
                    /* tailcall */
                    return protocol::DomainSockServer::send(x0_45, x1_6, x2_5);
                }
                char* x0_31 = operator new(i_1);
                char* x8_21 = x0_31;
                *s_4 = x0_31;
                s_4[1] = x0_31;
                s_4[2] = &x0_31[i_1];
                uint64_t i;
                do
                {
                    char x9_8 = *x23_2;
                    x23_2 = (x23_2 + 1);
                    i = i_1;
                    i_1 = (i_1 - 1);
                    *x8_21 = x9_8;
                    x8_21 = (s_4[1] + 1);
                    s_4[1] = x8_21;
                } while (i != 1);
            }
            int64_t* s_5 = s_4;
            int32_t x0_33 = protocol::DomainSockServer::send(arg1, arg2);
            void* x0_34 = *s_4;
            int64_t var_228_1 = 0;
            if (x0_34 != 0)
            {
                s_4[1] = x0_34;
                operator delete(x0_34);
            }
            operator delete(s_4);
            if (*(x26 + 0x28) == x8)
            {
                return (x0_33 & 1);
            }
        }
    }
    else
    {
        char* x23;
        if ((*data_452d8 & 1) == 0)
        {
            x23 = &*(data_452d8 + 1);
        }
        else
        {
            x23 = *(data_452e2 + 6);
        }
        int32_t var_1d0 = data_452d0;
        int64_t s_3;
        __builtin_memset(&s_3, 0, 0x18);
        size_t x0_1 = strlen(x23);
        if (x0_1 >= -0x10)
        {
            void* var_1b8_1;
            void* x24_1;
            if (x0_1 >= 0x17)
            {
                uint64_t x25_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_5 = operator new(x25_1);
                x24_1 = x0_5;
                size_t var_1c0_1 = x0_1;
                var_1b8_1 = x0_5;
                s_3 = (x25_1 | 1);
            }
            else
            {
                x24_1 = &*s_3[1];
                s_3 = (x0_1 << 1);
            }
            if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
            {
                memcpy(x24_1, x23, x0_1);
            }
            *(x24_1 + x0_1) = 0;
            int32_t x22_3;
            if ((g3::logLevel(&var_1d0) & 1) == 0)
            {
                x22_3 = 0;
                if ((s_3 & 1) != 0)
                {
                label_180c4:
                    operator delete(var_1b8_1);
                    if ((x22_3 & 1) == 0)
                    {
                        goto label_181d8;
                    }
                    goto label_180f4;
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                s_2 = 0x14;
                __builtin_strncpy(&*s_2[1], "DomainSock", 0xb);
                x22_3 = g3::logTag(&s_2);
                if ((s_2 & 1) != 0)
                {
                    void* var_1d8;
                    operator delete(var_1d8);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_180c4;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_180c4;
                }
            }
            if ((x22_3 & 1) == 0)
            {
                goto label_181d8;
            }
        label_180f4:
            LogCapture::LogCapture(&var_1b0, "DomainSock", &data_452d0, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_22 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "sending msg_id:", 0xf);
            uint64_t x8_16 = *arg2;
            int32_t temp1_1 = (x8_16 & 1);
            char* x1_2;
            if (temp1_1 != 0)
            {
                x1_2 = *(arg2 + 0x10);
            }
            else
            {
                x1_2 = &arg2[1];
            }
            uint64_t x2_2;
            if (temp1_1 == 0)
            {
                x2_2 = (x8_16 >> 1);
            }
            else
            {
                x2_2 = *(arg2 + 8);
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_24 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_22, x1_2, x2_2), " data:", 6);
            uint64_t x8_17 = *arg3;
            int32_t temp3_1 = (x8_17 & 1);
            void* x1_3;
            if (temp3_1 != 0)
            {
                x1_3 = *(arg3 + 0x10);
            }
            else
            {
                x1_3 = &arg3[1];
            }
            uint64_t x2_3;
            if (temp3_1 == 0)
            {
                x2_3 = (x8_17 >> 1);
            }
            else
            {
                x2_3 = *(arg3 + 8);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_24, x1_3, x2_3);
            goto label_181d4;
        }
    }
    if (((x8_2 > 0x63 && x0_3 < -0x10) || x8_2 <= 0x63))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    __stack_chk_fail();
    /* no return */
}

int64_t sub_182dc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t* x0_5;
    char* x1;
    int64_t* x2;
    x0_5 = _Unwind_Resume(x0_3);
    /* tailcall */
    return protocol::DomainSockServer::send(x0_5, x1, x2);
}

int64_t sub_18314(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t* x0_4;
    char* x1;
    int64_t* x2;
    x0_4 = _Unwind_Resume(x0_2);
    /* tailcall */
    return protocol::DomainSockServer::send(x0_4, x1, x2);
}

int64_t sub_18328(int64_t arg1, int64_t* arg2 @ x21)
{
    void* x8_1 = *arg2;
    if (x8_1 != 0)
    {
        arg2[1] = x8_1;
        operator delete(x8_1);
    }
    operator delete(arg2);
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int64_t* x0_5;
    char* x1;
    int64_t* x2;
    x0_5 = _Unwind_Resume(x0_3);
    /* tailcall */
    return protocol::DomainSockServer::send(x0_5, x1, x2);
}

uint64_t protocol::DomainSockServer::send(int64_t* arg1, char* arg2, int64_t* arg3)
{
    int64_t* x24;
    int64_t* var_40 = x24;
    char* x23;
    char* var_38 = x23;
    void* x19;
    void* var_18 = x19;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    uint32_t x8_1 = *(arg1 + 0xa);
    int32_t var_1d8;
    int64_t s_11;
    void var_1b8;
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_1b0;
    size_t x0_2;
    size_t x0_4;
    uint64_t x8_3;
    int32_t x20_3;
    int64_t* x21_1;
    if (x8_1 != 0)
    {
        uint64_t x8_2 = *arg2;
        if ((x8_2 & 1) == 0)
        {
            x8_3 = (x8_2 >> 1);
        }
        else
        {
            x8_3 = *(arg2 + 8);
        }
        if (x8_3 == 0)
        {
            char* x20_1;
            if ((*data_45338 & 1) == 0)
            {
                x20_1 = &*(data_45338 + 1);
            }
            else
            {
                x20_1 = *(data_45342 + 6);
            }
            int32_t var_210 = data_45330;
            int64_t s_9;
            __builtin_memset(&s_9, 0, 0x18);
            x0_4 = strlen(x20_1);
            if (x0_4 >= -0x10)
            {
                void* var_1f8_1;
                void* x21_2;
                if (x0_4 >= 0x17)
                {
                    uint64_t x22_6 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
                    void* x0_28 = operator new(x22_6);
                    x21_2 = x0_28;
                    size_t var_200_1 = x0_4;
                    var_1f8_1 = x0_28;
                    s_9 = (x22_6 | 1);
                }
                else
                {
                    x21_2 = &*s_9[1];
                    s_9 = (x0_4 << 1);
                }
                if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
                {
                    memcpy(x21_2, x20_1, x0_4);
                }
                *(x21_2 + x0_4) = 0;
                int32_t x19_4;
                if ((g3::logLevel(&var_210) & 1) == 0)
                {
                    x19_4 = 0;
                    if ((s_9 & 1) != 0)
                    {
                    label_1883c:
                        operator delete(var_1f8_1);
                        if ((x19_4 & 1) == 0)
                        {
                            goto label_18844;
                        }
                        goto label_18804;
                    }
                }
                else
                {
                    int64_t s_8;
                    __builtin_memset(&s_8, 0, 0x18);
                    s_8 = 0x14;
                    __builtin_strncpy(&*s_8[1], "DomainSock", 0xb);
                    x19_4 = g3::logTag(&s_8);
                    if ((s_8 & 1) != 0)
                    {
                        void* var_218;
                        operator delete(var_218);
                        if ((s_9 & 1) != 0)
                        {
                            goto label_1883c;
                        }
                    }
                    else if ((s_9 & 1) != 0)
                    {
                        goto label_1883c;
                    }
                }
                if ((x19_4 & 1) == 0)
                {
                    goto label_18844;
                }
            label_18804:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45330, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "msg_id cannot be empty", 0x16);
            label_18820:
                LogCapture::~LogCapture();
                x20_3 = 0;
            }
        }
        else
        {
            std::__ndk1::mutex::lock();
            uint64_t x9_1 = *arg2;
            int32_t* x8_4 = *arg3;
            uint32_t x9_2;
            if ((x9_1 & 1) == 0)
            {
                x9_2 = (x9_1 >> 1);
            }
            else
            {
                x9_2 = *(arg2 + 8);
            }
            int32_t x21;
            if (x8_4 == 0)
            {
                x21 = (x9_2 + 1);
            }
            else
            {
                x21 = ((x9_2 + 1) + (x8_4[2] - *x8_4));
            }
            int32_t var_22c = _byteswap(x21);
            if (send(*(arg1 + 4), &var_22c, 4, 0) == 4)
            {
                void* x1_3;
                if ((*arg2 & 1) != 0)
                {
                    x1_3 = *(arg2 + 0x10);
                }
                else
                {
                    x1_3 = &arg2[1];
                }
                if ((x9_2 + 1) == send(*(arg1 + 4), x1_3, (x9_2 + 1), 0))
                {
                    int64_t* x8_17 = *arg3;
                    if (x8_17 != 0)
                    {
                        int64_t x1_4 = *x8_17;
                        int64_t x8_18 = x8_17[1];
                        if (x8_18 != x1_4)
                        {
                            int32_t x0_22 = send(*(arg1 + 4), x1_4, (x8_18 - x1_4), 0);
                            int64_t* x8_19 = *arg3;
                            if ((x8_19[1] - *x8_19) != x0_22)
                            {
                                char* x21_7;
                                if ((*data_45358 & 1) == 0)
                                {
                                    x21_7 = &*(data_45358 + 1);
                                }
                                else
                                {
                                    x21_7 = *(data_45362 + 6);
                                }
                                int32_t var_2c0 = data_45350;
                                int64_t s_3;
                                __builtin_memset(&s_3, 0, 0x18);
                                size_t x0_96 = strlen(x21_7);
                                if (x0_96 < -0x10)
                                {
                                    goto label_18eb4;
                                }
                                void* var_2a8_1;
                                void* x23_6;
                                if (x0_96 >= 0x17)
                                {
                                    uint64_t x24_5 = ((x0_96 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_98 = operator new(x24_5);
                                    x23_6 = x0_98;
                                    size_t var_2b0_1 = x0_96;
                                    var_2a8_1 = x0_98;
                                    s_3 = (x24_5 | 1);
                                }
                                else
                                {
                                    x23_6 = &*s_3[1];
                                    s_3 = (x0_96 << 1);
                                }
                                if ((x0_96 >= 0x17 || (x0_96 < 0x17 && x0_96 != 0)))
                                {
                                    memcpy(x23_6, x21_7, x0_96);
                                }
                                *(x23_6 + x0_96) = 0;
                                int32_t x20_10;
                                if ((g3::logLevel(&var_2c0) & 1) == 0)
                                {
                                    x20_10 = 0;
                                    if ((s_3 & 1) != 0)
                                    {
                                    label_18de4:
                                        operator delete(var_2a8_1);
                                        if ((x20_10 & 1) == 0)
                                        {
                                            goto label_18b48;
                                        }
                                        goto label_18e14;
                                    }
                                }
                                else
                                {
                                    int64_t s_2;
                                    __builtin_memset(&s_2, 0, 0x18);
                                    s_2 = 0x14;
                                    __builtin_strncpy(&*s_2[1], "DomainSock", 0xb);
                                    x20_10 = g3::logTag(&s_2);
                                    if ((s_2 & 1) != 0)
                                    {
                                        void* var_2c8;
                                        operator delete(var_2c8);
                                        if ((s_3 & 1) != 0)
                                        {
                                            goto label_18de4;
                                        }
                                    }
                                    else if ((s_3 & 1) != 0)
                                    {
                                        goto label_18de4;
                                    }
                                }
                                if ((x20_10 & 1) == 0)
                                {
                                    goto label_18b48;
                                }
                            label_18e14:
                                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_109 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send data fail:", 0xf)), " error is ", 0xa);
                                char* x0_112 = strerror(*__errno());
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_109, x0_112, strlen(x0_112));
                                goto label_18b44;
                            }
                        }
                    }
                    if ((*data_452d8 & 1) == 0)
                    {
                        x23 = &*(data_452d8 + 1);
                    }
                    else
                    {
                        x23 = *(data_452e2 + 6);
                    }
                    int32_t var_2f8 = data_452d0;
                    int64_t s_1;
                    __builtin_memset(&s_1, 0, 0x18);
                    size_t x0_24 = strlen(x23);
                    if (x0_24 < -0x10)
                    {
                        goto label_18eac;
                    }
                    void* var_2e0_1;
                    void* x24_1;
                    if (x0_24 >= 0x17)
                    {
                        uint64_t x25_1 = ((x0_24 + 0x10) & 0xfffffffffffffff0);
                        void* x0_79 = operator new(x25_1);
                        x24_1 = x0_79;
                        size_t var_2e8_1 = x0_24;
                        var_2e0_1 = x0_79;
                        s_1 = (x25_1 | 1);
                    }
                    else
                    {
                        x24_1 = &*s_1[1];
                        s_1 = (x0_24 << 1);
                    }
                    if ((x0_24 >= 0x17 || (x0_24 < 0x17 && x0_24 != 0)))
                    {
                        memcpy(x24_1, x23, x0_24);
                    }
                    *(x24_1 + x0_24) = 0;
                    int32_t x0_82 = g3::logLevel(&var_2f8);
                    int32_t x22_7;
                    if ((x0_82 & 1) == 0)
                    {
                        x22_7 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_18bf0:
                            operator delete(var_2e0_1);
                            if ((x22_7 & 1) != 0)
                            {
                                goto label_18c20;
                            }
                        }
                    }
                    else
                    {
                        int64_t s;
                        __builtin_memset(&s, 0, 0x18);
                        s = 0x14;
                        __builtin_strncpy(&*s[1], "DomainSock", 0xb);
                        x22_7 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            void* var_300;
                            operator delete(var_300);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_18bf0;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_18bf0;
                        }
                    }
                    if (((((x0_82 & 1) == 0 && (s_1 & 1) == 0) || (x0_82 & 1) != 0) && (x22_7 & 1) != 0))
                    {
                    label_18c20:
                        LogCapture::LogCapture(&var_1b8, "DomainSock", &data_452d0, &data_2ddb7, &nullptr->ident.version);
                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_88 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send finish id:", 0xf);
                        uint64_t x8_48 = *arg2;
                        int32_t temp1_1 = (x8_48 & 1);
                        void* x1_13;
                        if (temp1_1 == 0)
                        {
                            x1_13 = &arg2[1];
                        }
                        else
                        {
                            x1_13 = *(arg2 + 0x10);
                        }
                        uint64_t x2_10;
                        if (temp1_1 == 0)
                        {
                            x2_10 = (x8_48 >> 1);
                        }
                        else
                        {
                            x2_10 = *(arg2 + 8);
                        }
                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_88, x1_13, x2_10), " data:", 6));
                        LogCapture::~LogCapture();
                    }
                    x20_3 = 1;
                    goto label_18c80;
                }
                char* x21_4;
                if ((*data_45358 & 1) == 0)
                {
                    x21_4 = &*(data_45358 + 1);
                }
                else
                {
                    x21_4 = *(data_45362 + 6);
                }
                int32_t var_288 = data_45350;
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                size_t x0_45 = strlen(x21_4);
                if (x0_45 < -0x10)
                {
                    goto label_18ea4;
                }
                void* var_270_1;
                void* x23_4;
                if (x0_45 >= 0x17)
                {
                    uint64_t x24_3 = ((x0_45 + 0x10) & 0xfffffffffffffff0);
                    void* x0_60 = operator new(x24_3);
                    x23_4 = x0_60;
                    size_t var_278_1 = x0_45;
                    var_270_1 = x0_60;
                    s_5 = (x24_3 | 1);
                }
                else
                {
                    x23_4 = &*s_5[1];
                    s_5 = (x0_45 << 1);
                }
                if ((x0_45 >= 0x17 || (x0_45 < 0x17 && x0_45 != 0)))
                {
                    memcpy(x23_4, x21_4, x0_45);
                }
                *(x23_4 + x0_45) = 0;
                int32_t x20_7;
                if ((g3::logLevel(&var_288) & 1) == 0)
                {
                    x20_7 = 0;
                    if ((s_5 & 1) != 0)
                    {
                    label_18ab8:
                        operator delete(var_270_1);
                        if ((x20_7 & 1) == 0)
                        {
                            goto label_18b48;
                        }
                        goto label_18ae8;
                    }
                }
                else
                {
                    int64_t s_4;
                    __builtin_memset(&s_4, 0, 0x18);
                    s_4 = 0x14;
                    __builtin_strncpy(&*s_4[1], "DomainSock", 0xb);
                    x20_7 = g3::logTag(&s_4);
                    if ((s_4 & 1) != 0)
                    {
                        void* var_290;
                        operator delete(var_290);
                        if ((s_5 & 1) != 0)
                        {
                            goto label_18ab8;
                        }
                    }
                    else if ((s_5 & 1) != 0)
                    {
                        goto label_18ab8;
                    }
                }
                if ((x20_7 & 1) == 0)
                {
                    goto label_18b48;
                }
            label_18ae8:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_72 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send msg_id fail:", 0x11)), " error is ", 0xa);
                char* x0_75 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_72, x0_75, strlen(x0_75));
                goto label_18b44;
            }
            char* x21_3;
            if ((*data_45358 & 1) == 0)
            {
                x21_3 = &*(data_45358 + 1);
            }
            else
            {
                x21_3 = *(data_45362 + 6);
            }
            int32_t var_250 = data_45350;
            int64_t s_7;
            __builtin_memset(&s_7, 0, 0x18);
            size_t x0_26 = strlen(x21_3);
            if (x0_26 < -0x10)
            {
                goto label_18e9c;
            }
            void* var_238_1;
            void* x23_3;
            if (x0_26 >= 0x17)
            {
                uint64_t x24_2 = ((x0_26 + 0x10) & 0xfffffffffffffff0);
                void* x0_38 = operator new(x24_2);
                x23_3 = x0_38;
                size_t var_240_1 = x0_26;
                var_238_1 = x0_38;
                s_7 = (x24_2 | 1);
            }
            else
            {
                x23_3 = &*s_7[1];
                s_7 = (x0_26 << 1);
            }
            if ((x0_26 >= 0x17 || (x0_26 < 0x17 && x0_26 != 0)))
            {
                memcpy(x23_3, x21_3, x0_26);
            }
            *(x23_3 + x0_26) = 0;
            int32_t x20_4;
            if ((g3::logLevel(&var_250) & 1) == 0)
            {
                x20_4 = 0;
                if ((s_7 & 1) != 0)
                {
                label_18950:
                    operator delete(var_238_1);
                    if ((x20_4 & 1) != 0)
                    {
                        goto label_18980;
                    }
                    goto label_18b48;
                }
            }
            else
            {
                int64_t s_6;
                __builtin_memset(&s_6, 0, 0x18);
                s_6 = 0x14;
                __builtin_strncpy(&*s_6[1], "DomainSock", 0xb);
                x20_4 = g3::logTag(&s_6);
                if ((s_6 & 1) != 0)
                {
                    void* var_258;
                    operator delete(var_258);
                    if ((s_7 & 1) != 0)
                    {
                        goto label_18950;
                    }
                }
                else if ((s_7 & 1) != 0)
                {
                    goto label_18950;
                }
            }
            if ((x20_4 & 1) == 0)
            {
                goto label_18b48;
            }
        label_18980:
            LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_51 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send msg_len fail:", 0x12)), " error is ", 0xa);
            char* x0_54 = strerror(*__errno());
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_51, x0_54, strlen(x0_54));
        label_18b44:
            LogCapture::~LogCapture();
        label_18b48:
            x20_3 = 0;
        label_18c80:
            std::__ndk1::mutex::unlock();
        }
    }
    else
    {
        if ((*data_45338 & 1) == 0)
        {
            x21_1 = &*(data_45338 + 1);
        }
        else
        {
            x21_1 = *(data_45342 + 6);
        }
        var_1d8 = data_45330;
        __builtin_memset(&s_11, 0, 0x18);
        x0_2 = strlen(x21_1);
        if (x0_2 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
    }
    if (((x8_1 == 0 && x0_2 < -0x10) || ((x8_1 != 0 && x8_3 == 0) && x0_4 < -0x10)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_18e9c:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_18ea4:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_18eac:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_18eb4:
        int64_t x0_121 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        std::__ndk1::mutex::unlock();
        int64_t* x0_124;
        int32_t x1_18;
        x0_124 = _Unwind_Resume(x0_121);
        /* tailcall */
        return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_124, x1_18);
    }
    if ((x8_1 == 0 && x0_2 >= -0x10))
    {
        void* var_1c0_1;
        void* x22_1;
        if (x0_2 >= 0x17)
        {
            uint64_t x23_2 = ((x0_2 + 0x10) & 0xfffffffffffffff0);
            void* x0_6 = operator new(x23_2);
            x22_1 = x0_6;
            size_t var_1c8_1 = x0_2;
            var_1c0_1 = x0_6;
            s_11 = (x23_2 | 1);
        }
        else
        {
            x22_1 = &*s_11[1];
            s_11 = (x0_2 << 1);
        }
        if ((x0_2 >= 0x17 || (x0_2 < 0x17 && x0_2 != 0)))
        {
            memcpy(x22_1, x21_1, x0_2);
        }
        *(x22_1 + x0_2) = 0;
        int32_t x19_3;
        if ((g3::logLevel(&var_1d8) & 1) == 0)
        {
            x19_3 = 0;
            if ((s_11 & 1) != 0)
            {
            label_18580:
                operator delete(var_1c0_1);
                if ((x19_3 & 1) == 0)
                {
                    goto label_18844;
                }
                goto label_185b0;
            }
        }
        else
        {
            int64_t s_10;
            __builtin_memset(&s_10, 0, 0x18);
            s_10 = 0x14;
            __builtin_strncpy(&*s_10[1], "DomainSock", 0xb);
            x19_3 = g3::logTag(&s_10);
            if ((s_10 & 1) != 0)
            {
                void* var_1e0;
                operator delete(var_1e0);
                if ((s_11 & 1) != 0)
                {
                    goto label_18580;
                }
            }
            else if ((s_11 & 1) != 0)
            {
                goto label_18580;
            }
        }
        if ((x19_3 & 1) != 0)
        {
        label_185b0:
            LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45330, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_15 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send msg_id:", 0xc);
            uint64_t x8_14 = *arg2;
            int32_t temp0_1 = (x8_14 & 1);
            void* x1_1;
            if (temp0_1 != 0)
            {
                x1_1 = *(arg2 + 0x10);
            }
            else
            {
                x1_1 = &arg2[1];
            }
            uint64_t x2_1;
            if (temp0_1 == 0)
            {
                x2_1 = (x8_14 >> 1);
            }
            else
            {
                x2_1 = *(arg2 + 8);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_15, x1_1, x2_1), "client not connect", 0x12);
            goto label_18820;
        }
    label_18844:
        x20_3 = 0;
    }
    if ((((x8_1 != 0 && x8_3 != 0) || ((x8_1 != 0 && x8_3 == 0) && x0_4 >= -0x10)) || (x8_1 == 0 && x0_2 >= -0x10)))
    {
        if (*(x26 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x20_3;
    }
}

int64_t sub_18ebc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_18edc(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_18ef8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_18f18(int64_t arg1)
{
    LogCapture::~LogCapture();
    std::__ndk1::mutex::unlock();
    int64_t* x0_1;
    int32_t x1;
    x0_1 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_1, x1);
}

int64_t sub_18f20(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_18f40(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_18f58(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_18f74(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_18f94(int64_t arg1)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    int32_t x1;
    x0_3 = _Unwind_Resume(x0_1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_18f98(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x20 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x20 = _Unwind_Resume(x20);
        LogCapture::~LogCapture();
        std::__ndk1::mutex::unlock();
    }
    int64_t* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(x20);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_18fbc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x20 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x20 = _Unwind_Resume(x20);
        LogCapture::~LogCapture();
        std::__ndk1::mutex::unlock();
    }
    int64_t* x0_5;
    int32_t x1;
    x0_5 = _Unwind_Resume(x20);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_18fdc(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_2;
    int32_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_18ff4(int64_t arg1, char arg2, void* arg3)
{
    int64_t x20 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x20 = _Unwind_Resume(x20);
        LogCapture::~LogCapture();
        std::__ndk1::mutex::unlock();
    }
    int64_t* x0_4;
    int32_t x1;
    x0_4 = _Unwind_Resume(x20);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_4, x1);
}

int64_t sub_19014(int64_t arg1, char arg2, void* arg3)
{
    int64_t x20 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x20 = _Unwind_Resume(x20);
        LogCapture::~LogCapture();
        std::__ndk1::mutex::unlock();
    }
    int64_t* x0_4;
    int32_t x1;
    x0_4 = _Unwind_Resume(x20);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_4, x1);
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        int32_t x26_1 = *((arg1 + *x8_2) + 8);
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        int32_t x8_9 = (x26_1 & 0x4a);
        bool z_1;
        if (x8_9 != 8)
        {
            z_1 = x8_9 == 0x40;
        }
        else
        {
            z_1 = true;
        }
        uint64_t x4_1;
        if (z_1)
        {
            x4_1 = arg2;
        }
        else
        {
            x4_1 = arg2;
        }
        if (*(*x0_3 + 0x20)(x0_3, x23_1, x22_1, x3_1, x4_1) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

char* std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >::insert<char*>(int64_t* arg1, char* arg2, char* arg3, void* arg4)
{
    void* x27 = (arg4 - arg3);
    char* x9_1;
    int64_t x10_1;
    char* x23_3;
    if (x27 >= 1)
    {
        x9_1 = arg1[1];
        x10_1 = arg1[2];
        char* x21_1 = arg3;
        int128_t v0;
        int128_t v1;
        if (x27 <= (x10_1 - x9_1))
        {
            int64_t x10_2 = (x9_1 - arg2);
            char* x8_4;
            void* x23_2;
            if (x27 <= x10_2)
            {
                x8_4 = x9_1;
                x23_2 = arg4;
            }
            else
            {
                x23_2 = &x21_1[x10_2];
                x8_4 = x9_1;
                if (x23_2 != arg4)
                {
                    void* x11_1 = x23_2;
                    do
                    {
                        char x12_1 = *x11_1;
                        x11_1 = (x11_1 + 1);
                        *x8_4 = x12_1;
                        x8_4 = (arg1[1] + 1);
                        arg1[1] = x8_4;
                    } while (arg4 != x11_1);
                }
            }
            if ((x27 <= x10_2 || (x27 > x10_2 && x10_2 >= 1)))
            {
                int64_t x10_3 = (arg2 + x27);
                size_t x2 = (x8_4 - x10_3);
                if ((x8_4 - x27) < x9_1)
                {
                    void* i_3 = (x9_1 + ((x10_3 - x8_4) - arg2));
                    char* x10_4 = ((x8_4 + arg2) - x10_3);
                    char* x11_5 = x8_4;
                    void* i;
                    do
                    {
                        char x12_3 = *x10_4;
                        x10_4 = &x10_4[1];
                        i = i_3;
                        i_3 = (i_3 - 1);
                        *x11_5 = x12_3;
                        x11_5 = (arg1[1] + 1);
                        arg1[1] = x11_5;
                    } while (i != 1);
                }
                if (x2 != 0)
                {
                    v0 = memmove((x8_4 - x2), arg2, x2);
                }
                int64_t x9_4 = (x23_2 - x21_1);
                if (x23_2 != x21_1)
                {
                    void* x8_8;
                    if ((x9_4 < 0x20 || ((x9_4 >= 0x20 && arg2 < x23_2) && (x23_2 + (arg2 - x21_1)) > x21_1)))
                    {
                        x8_8 = arg2;
                    label_193b8:
                        do
                        {
                            char x9_5 = *x21_1;
                            x21_1 = &x21_1[1];
                            *x8_8 = x9_5;
                            x8_8 = (x8_8 + 1);
                        } while (x23_2 != x21_1);
                    }
                    if ((x9_4 >= 0x20 && (arg2 >= x23_2 || (arg2 < x23_2 && (x23_2 + (arg2 - x21_1)) <= x21_1))))
                    {
                        int64_t i_7 = (x9_4 & 0xffffffffffffffe0);
                        void* x11_8 = &x21_1[0x10];
                        x8_8 = &arg2[i_7];
                        x21_1 = &x21_1[i_7];
                        void* x12_7 = &arg2[0x10];
                        int64_t i_5 = i_7;
                        int64_t i_1;
                        do
                        {
                            v0 = *(x11_8 - 0x10);
                            v1 = *x11_8;
                            x11_8 = (x11_8 + 0x20);
                            i_1 = i_5;
                            i_5 = (i_5 - 0x20);
                            *(x12_7 - 0x10) = v0;
                            *x12_7 = v1;
                            x12_7 = (x12_7 + 0x20);
                        } while (i_1 != 0x20);
                        if (i_7 != x9_4)
                        {
                            goto label_193b8;
                        }
                    }
                }
            }
        }
        else
        {
            void* x25_1 = *arg1;
            int64_t x8_2 = (x9_1 - x25_1);
            int64_t x8_3 = (x8_2 + x27);
            if ((x8_2 + x27) < 0)
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_8;
                int64_t* x1_3;
                x0_8 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
                /* tailcall */
                return protocol::DomainSockServer::processLoop(x0_8, x1_3);
            }
            void* x9_2 = (x10_1 - x25_1);
            int64_t x24_1;
            if (x9_2 >= 0x3fffffffffffffff)
            {
                x24_1 = 0x7fffffffffffffff;
            }
            else
            {
                int64_t x9_3 = (x9_2 << 1);
                if (x9_3 < x8_3)
                {
                    x24_1 = x8_3;
                }
                else
                {
                    x24_1 = x9_3;
                }
            }
            void* x26_1;
            if ((x9_2 >= 0x3fffffffffffffff || (x9_2 < 0x3fffffffffffffff && x24_1 != 0)))
            {
                void* x0_2;
                x0_2 = operator new(x24_1);
                x26_1 = x0_2;
            }
            if ((x9_2 < 0x3fffffffffffffff && x24_1 == 0))
            {
                x26_1 = nullptr;
            }
            x23_3 = (x26_1 + (arg2 - x25_1));
            char* x21_2;
            if (x21_1 == arg4)
            {
                x21_2 = x23_3;
            }
            else
            {
                void* x8_11 = (arg4 + ((arg2 - x21_1) - x25_1));
                char* x9_6;
                if (x27 < 0x20)
                {
                    x9_6 = x23_3;
                label_1946c:
                    do
                    {
                        char x10_5 = *x21_1;
                        x21_1 = &x21_1[1];
                        *x9_6 = x10_5;
                        x9_6 = &x9_6[1];
                    } while (arg4 != x21_1);
                }
                else
                {
                    if ((x23_3 < arg4 && (x26_1 + x8_11) > x21_1))
                    {
                        x9_6 = x23_3;
                        goto label_1946c;
                    }
                    void* i_6 = (x27 & 0xffffffffffffffe0);
                    void* x11_7 = &x21_1[0x10];
                    x9_6 = (x23_3 + i_6);
                    x21_1 = (x21_1 + i_6);
                    void* x12_6 = (x26_1 + (&arg2[0x10] - x25_1));
                    void* i_4 = i_6;
                    void* i_2;
                    do
                    {
                        v0 = *(x11_7 - 0x10);
                        v1 = *x11_7;
                        x11_7 = (x11_7 + 0x20);
                        i_2 = i_4;
                        i_4 = (i_4 - 0x20);
                        *(x12_6 - 0x10) = v0;
                        *x12_6 = v1;
                        x12_6 = (x12_6 + 0x20);
                    } while (i_2 != 0x20);
                    if (x27 != i_6)
                    {
                        goto label_1946c;
                    }
                }
                x25_1 = *arg1;
                x21_2 = (x26_1 + x8_11);
            }
            size_t x2_1 = (arg2 - x25_1);
            void* x22_2 = (x23_3 - x2_1);
            if (x2_1 >= 1)
            {
                memcpy(x22_2, x25_1, x2_1);
            }
            size_t x27_1 = (arg1[1] - arg2);
            if (x27_1 >= 1)
            {
                memcpy(x21_2, arg2, x27_1);
                x21_2 = &x21_2[x27_1];
            }
            *arg1 = x22_2;
            arg1[1] = x21_2;
            arg1[2] = (x26_1 + x24_1);
            if (x25_1 != 0)
            {
                operator delete(x25_1);
            }
        }
    }
    if ((x27 < 1 || (x27 >= 1 && x27 <= (x10_1 - x9_1))))
    {
        x23_3 = arg2;
    }
    return x23_3;
}

int64_t protocol::DomainSockServer::processLoop(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t* arg2)
{
    uint64_t s_16;
    uint64_t s_17 = s_16;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int64_t x0_16;
    int64_t s_14;
    int64_t* var_1c0;
    void var_1b8;
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_1b0;
    char* x22_1;
    int64_t* x23_1;
    if (*(arg1 + 0x150) == 0)
    {
        int32_t x8_7 = *(arg1 + 0x154);
        if (x8_7 <= 0)
        {
            if ((*data_45358 & 1) == 0)
            {
                x22_1 = &*(data_45358 + 1);
            }
            else
            {
                x22_1 = *(data_45362 + 6);
            }
            int32_t var_248 = data_45350;
            int64_t s_10;
            __builtin_memset(&s_10, 0, 0x18);
            size_t x0_3 = strlen(x22_1);
            if (x0_3 < -0x10)
            {
            label_1a2a0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1a2a8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1a2b0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1a2b8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1a2c0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1a2c8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1a2d0:
                int64_t x0_112 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                int64_t x0_114 = _Unwind_Resume(x0_112);
                if ((s_14 & 1) != 0)
                {
                    operator delete(var_1c0);
                }
                void* x0_117;
                char* x1_14;
                int64_t* x2_11;
                x0_117 = _Unwind_Resume(x0_114);
                /* tailcall */
                return protocol::DomainSockServer::triggerPluginProcess(x0_117, x1_14, x2_11);
            }
            void* var_230_1;
            void* x23_2;
            if (x0_3 >= 0x17)
            {
                uint64_t x24_2 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
                void* x0_21 = operator new(x24_2);
                x23_2 = x0_21;
                size_t var_238_1 = x0_3;
                var_230_1 = x0_21;
                s_10 = (x24_2 | 1);
            }
            else
            {
                x23_2 = &*s_10[1];
                s_10 = (x0_3 << 1);
            }
            if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
            {
                memcpy(x23_2, x22_1, x0_3);
            }
            *(x23_2 + x0_3) = 0;
            int32_t x0_24 = g3::logLevel(&var_248);
            if ((x0_24 & 1) == 0)
            {
                s_16 = 0;
                if ((s_10 & 1) != 0)
                {
                label_198b0:
                    operator delete(var_230_1);
                    if ((s_16 & 1) != 0)
                    {
                        goto label_198e0;
                    }
                }
            }
            else
            {
                int64_t s_9;
                __builtin_memset(&s_9, 0, 0x18);
                s_9 = 0x14;
                __builtin_strncpy(&*s_9[1], "DomainSock", 0xb);
                s_16 = g3::logTag(&s_9);
                if ((s_9 & 1) != 0)
                {
                    void* var_250;
                    operator delete(var_250);
                    if ((s_10 & 1) != 0)
                    {
                        goto label_198b0;
                    }
                }
                else if ((s_10 & 1) != 0)
                {
                    goto label_198b0;
                }
            }
            if (((((x0_24 & 1) == 0 && (s_10 & 1) == 0) || (x0_24 & 1) != 0) && (s_16 & 1) != 0))
            {
            label_198e0:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                int32_t x0_30 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "processing_msg_len:", 0x13);
                *(arg1 + 0x154);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_30), " must > 0", 9);
                LogCapture::~LogCapture();
            }
            x8_7 = *(arg1 + 0x154);
            *(arg1 + 0x150) = 1;
        }
        if ((arg2[1] - *arg2) < x8_7)
        {
            goto label_19934;
        }
        if ((*data_452d8 & 1) == 0)
        {
            x22_1 = &*(data_452d8 + 1);
        }
        else
        {
            x22_1 = *(data_452e2 + 6);
        }
        int32_t var_280 = data_452d0;
        int64_t s_8;
        __builtin_memset(&s_8, 0, 0x18);
        size_t x0_33 = strlen(x22_1);
        if (x0_33 < -0x10)
        {
            goto label_1a2a0;
        }
        void* var_268_1;
        void* x23_3;
        if (x0_33 >= 0x17)
        {
            uint64_t x24_3 = ((x0_33 + 0x10) & 0xfffffffffffffff0);
            void* x0_35 = operator new(x24_3);
            x23_3 = x0_35;
            size_t var_270_1 = x0_33;
            var_268_1 = x0_35;
            s_8 = (x24_3 | 1);
        }
        else
        {
            x23_3 = &*s_8[1];
            s_8 = (x0_33 << 1);
        }
        if ((x0_33 >= 0x17 || (x0_33 < 0x17 && x0_33 != 0)))
        {
            memcpy(x23_3, x22_1, x0_33);
        }
        *(x23_3 + x0_33) = 0;
        int32_t x0_38;
        int128_t v0_1;
        int128_t v1_1;
        x0_38 = g3::logLevel(&var_280);
        if ((x0_38 & 1) == 0)
        {
            s_16 = 0;
            if ((s_8 & 1) != 0)
            {
            label_19a40:
                v0_1 = operator delete(var_268_1);
                if ((s_16 & 1) != 0)
                {
                    goto label_19a70;
                }
            }
        }
        else
        {
            int64_t s_7;
            __builtin_memset(&s_7, 0, 0x18);
            s_7 = 0x14;
            __builtin_strncpy(&*s_7[1], "DomainSock", 0xb);
            int32_t s_18;
            s_18 = g3::logTag(&s_7);
            s_16 = s_18;
            if ((s_7 & 1) != 0)
            {
                void* var_288;
                v0_1 = operator delete(var_288);
                if ((s_8 & 1) != 0)
                {
                    goto label_19a40;
                }
            }
            else if ((s_8 & 1) != 0)
            {
                goto label_19a40;
            }
        }
        if (((((x0_38 & 1) == 0 && (s_8 & 1) == 0) || (x0_38 & 1) != 0) && (s_16 & 1) != 0))
        {
        label_19a70:
            LogCapture::LogCapture(&var_1b8, "DomainSock", &data_452d0, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "parsing msg id", 0xe);
            v0_1 = LogCapture::~LogCapture();
        }
        x22_1 = *arg2;
        int64_t x9_9 = *(arg1 + 0x154);
        void* x8_31 = &x22_1[x9_9];
        void* x28_1;
        if (x9_9 == 0)
        {
            x28_1 = x22_1;
        }
        int64_t i;
        if ((x9_9 != 0 && *x22_1 != 0))
        {
            i = (x9_9 - 1);
            char* x10_7 = x22_1;
            while (i != 0)
            {
                uint32_t x11_3 = x10_7[1];
                x28_1 = &x10_7[1];
                i = (i - 1);
                x10_7 = x28_1;
                if (x11_3 == 0)
                {
                    break;
                }
            }
        }
        if (((x9_9 == 0 || ((x9_9 != 0 && *x22_1 != 0) && i != 0)) && x8_31 != x28_1))
        {
        label_19ad8:
            x23_1 = (x28_1 - x22_1);
            int64_t s_4;
            __builtin_memset(&s_4, 0, 0x18);
            if (x23_1 < -0x10)
            {
                goto label_1a2b0;
            }
            int64_t* var_2e0_1;
            char* var_2d8_1;
            char* x0_43;
            void* x10_8;
            if (x23_1 > 0x16)
            {
                s_16 = (&x23_1[2] & 0xfffffffffffffff0);
                x0_43 = operator new(s_16);
                var_2e0_1 = x23_1;
                var_2d8_1 = x0_43;
                s_4 = (s_16 | 1);
                x10_8 = (x28_1 - x22_1);
            }
            else
            {
                s_4 = (x23_1 << 1);
                x0_43 = (&s_4 | 1);
                x10_8 = (x28_1 - x22_1);
            }
            if (((x23_1 > 0x16 && x28_1 != x22_1) || (x23_1 <= 0x16 && x28_1 != x22_1)))
            {
                char* x9_10 = x0_43;
                char* x11_4 = x22_1;
                if (x10_8 < 0x20)
                {
                label_19c3c:
                    do
                    {
                        char x10_9 = *x11_4;
                        x11_4 = &x11_4[1];
                        *x9_10 = x10_9;
                        x9_10 = &x9_10[1];
                    } while (x28_1 != x11_4);
                }
                else
                {
                    if (x0_43 < x28_1)
                    {
                        x9_10 = x0_43;
                        x11_4 = x22_1;
                        if ((x28_1 + (x0_43 - x22_1)) > x22_1)
                        {
                            goto label_19c3c;
                        }
                    }
                    void* i_5 = (x10_8 & 0xffffffffffffffe0);
                    void* x13_1 = &x22_1[0x10];
                    x9_10 = (x0_43 + i_5);
                    x11_4 = (x22_1 + i_5);
                    void* x14_1 = &x0_43[0x10];
                    void* i_4 = i_5;
                    void* i_1;
                    do
                    {
                        v0_1 = *(x13_1 - 0x10);
                        v1_1 = *x13_1;
                        x13_1 = (x13_1 + 0x20);
                        i_1 = i_4;
                        i_4 = (i_4 - 0x20);
                        *(x14_1 - 0x10) = v0_1;
                        *x14_1 = v1_1;
                        x14_1 = (x14_1 + 0x20);
                    } while (i_1 != 0x20);
                    if (i_5 != x10_8)
                    {
                        goto label_19c3c;
                    }
                }
                x0_43 = (x0_43 + (x28_1 + -(x22_1)));
            }
            int32_t x8_41 = data_452d0;
            if ((*data_452d8 & 1) == 0)
            {
                x22_1 = &*(data_452d8 + 1);
            }
            else
            {
                x22_1 = *(data_452e2 + 6);
            }
            *x0_43 = 0;
            int32_t var_308 = x8_41;
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            size_t x0_53 = strlen(x22_1);
            if (x0_53 < -0x10)
            {
                goto label_1a2b8;
            }
            void* var_2f0_1;
            void* x23_4;
            if (x0_53 >= 0x17)
            {
                uint64_t x24_4 = ((x0_53 + 0x10) & 0xfffffffffffffff0);
                void* x0_55 = operator new(x24_4);
                x23_4 = x0_55;
                size_t var_2f8_1 = x0_53;
                var_2f0_1 = x0_55;
                s_3 = (x24_4 | 1);
            }
            else
            {
                x23_4 = &*s_3[1];
                s_3 = (x0_53 << 1);
            }
            if ((x0_53 >= 0x17 || (x0_53 < 0x17 && x0_53 != 0)))
            {
                memcpy(x23_4, x22_1, x0_53);
            }
            *(x23_4 + x0_53) = 0;
            int32_t x0_58 = g3::logLevel(&var_308);
            if ((x0_58 & 1) == 0)
            {
                s_16 = 0;
                if ((s_3 & 1) != 0)
                {
                label_19dac:
                    operator delete(var_2f0_1);
                    if ((s_16 & 1) != 0)
                    {
                        goto label_19ddc;
                    }
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                s_2 = 0x14;
                __builtin_strncpy(&*s_2[1], "DomainSock", 0xb);
                s_16 = g3::logTag(&s_2);
                if ((s_2 & 1) != 0)
                {
                    void* var_310;
                    operator delete(var_310);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_19dac;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_19dac;
                }
            }
            if (((((x0_58 & 1) == 0 && (s_3 & 1) == 0) || (x0_58 & 1) != 0) && (s_16 & 1) != 0))
            {
            label_19ddc:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_452d0, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_67 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "get msg_id:", 0xb);
                uint64_t x8_49 = s_4;
                int32_t temp1_1 = (x8_49 & 1);
                char* x1_8;
                if (temp1_1 == 0)
                {
                    x1_8 = (&s_4 | 1);
                }
                else
                {
                    x1_8 = var_2d8_1;
                }
                int64_t* x2_7;
                if (temp1_1 == 0)
                {
                    x2_7 = (x8_49 >> 1);
                }
                else
                {
                    x2_7 = var_2e0_1;
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_67, x1_8, x2_7);
                LogCapture::~LogCapture();
            }
            int64_t x24_5 = *arg2;
            int64_t x26_1 = *(arg1 + 0x154);
            if ((*data_452d8 & 1) == 0)
            {
                x22_1 = &*(data_452d8 + 1);
            }
            else
            {
                x22_1 = *(data_452e2 + 6);
            }
            int32_t var_340 = data_452d0;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_69 = strlen(x22_1);
            if (x0_69 < -0x10)
            {
                goto label_1a2c0;
            }
            void* var_328_1;
            void* x23_5;
            if (x0_69 >= 0x17)
            {
                uint64_t x24_6 = ((x0_69 + 0x10) & 0xfffffffffffffff0);
                void* x0_71 = operator new(x24_6);
                x23_5 = x0_71;
                size_t var_330_1 = x0_69;
                var_328_1 = x0_71;
                s_1 = (x24_6 | 1);
            }
            else
            {
                x23_5 = &*s_1[1];
                s_1 = (x0_69 << 1);
            }
            if ((x0_69 >= 0x17 || (x0_69 < 0x17 && x0_69 != 0)))
            {
                memcpy(x23_5, x22_1, x0_69);
            }
            *(x23_5 + x0_69) = 0;
            int32_t x21_8;
            if ((g3::logLevel(&var_340) & 1) == 0)
            {
                x21_8 = 0;
            }
            else
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                s = 0x14;
                __builtin_strncpy(&*s[1], "DomainSock", 0xb);
                x21_8 = g3::logTag(&s);
                void* var_348;
                if ((s & 1) != 0)
                {
                    operator delete(var_348);
                }
            }
            void* x23_6 = (x28_1 + 1);
            void* x22_3 = ((x24_5 + x26_1) - x23_6);
            if ((s_1 & 1) != 0)
            {
                operator delete(var_328_1);
            }
            if ((x21_8 & 1) != 0)
            {
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_452d0, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "get data size:", 0xe));
                LogCapture::~LogCapture();
            }
            if (x22_3 >= 1)
            {
                uint64_t s_15 = operator new(0x18);
                s_16 = s_15;
                int64_t x8_56 = (x22_3 << 0x20);
                __builtin_memset(s_15, 0, 0x18);
                if (x8_56 == 0)
                {
                    goto label_1a080;
                }
                if ((x8_56 & 0xffffffff80000000) != 0)
                {
                    goto label_1a2d0;
                }
                int64_t i_6 = x22_3;
                char* x0_83 = operator new(i_6);
                char* x8_57 = x0_83;
                int64_t i_3 = i_6;
                *s_16 = x0_83;
                *(s_16 + 8) = x0_83;
                *(s_16 + 0x10) = &x0_83[i_6];
                int64_t i_2;
                do
                {
                    char x10_14 = *x23_6;
                    x23_6 = (x23_6 + 1);
                    i_2 = i_3;
                    i_3 = (i_3 - 1);
                    *x8_57 = x10_14;
                    x8_57 = (*(s_16 + 8) + 1);
                    *(s_16 + 8) = x8_57;
                } while (i_2 != 1);
                goto label_1a080;
            }
            s_16 = 0;
        label_1a080:
            int64_t x8_61 = *(arg1 + 0x154);
            *(arg1 + 0x150) = 1;
            if (x8_61 != 0)
            {
                int64_t x22_5 = *arg2;
                int64_t x9_17 = arg2[1];
                int64_t x1_11 = (x22_5 + x8_61);
                size_t x23_7 = (x9_17 - x1_11);
                if (x9_17 != x1_11)
                {
                    memmove(x22_5, x1_11, x23_7);
                }
                arg2[1] = (x22_5 + x23_7);
            }
            protocol::DomainSockServer::triggerPluginProcess(arg1, &s_4);
            int64_t var_360_2 = 0;
            if (s_16 != 0)
            {
                void* x0_89 = *s_16;
                if (x0_89 != 0)
                {
                    *(s_16 + 8) = x0_89;
                    operator delete(x0_89);
                }
                operator delete(s_16);
            }
            if ((s_4 & 1) == 0)
            {
            label_1a0f4:
                x0_16 = 1;
            }
            else
            {
                operator delete(var_2d8_1);
                x0_16 = 1;
            }
        }
        if (x9_9 != 0)
        {
            if ((*x22_1 != 0 && i == 0))
            {
                x28_1 = x8_31;
                if (x8_31 != x28_1)
                {
                    goto label_19ad8;
                }
            }
            if (*x22_1 == 0)
            {
                x28_1 = x22_1;
                if (x8_31 != x28_1)
                {
                    goto label_19ad8;
                }
            }
        }
        if (((((x9_9 == 0 || ((x9_9 != 0 && *x22_1 != 0) && i != 0)) && x8_31 == x28_1) || (x9_9 != 0 && *x22_1 == 0)) || ((x9_9 != 0 && *x22_1 != 0) && i == 0)))
        {
            if ((*data_45358 & 1) != 0)
            {
                s_16 = *(data_45362 + 6);
                goto label_1a044;
            }
            s_16 = &*(data_45358 + 1);
        label_1a044:
            int32_t var_2b8 = data_45350;
            int64_t s_6;
            __builtin_memset(&s_6, 0, 0x18);
            size_t x0_86 = strlen(s_16);
            if (x0_86 < -0x10)
            {
                goto label_1a2c8;
            }
            void* var_2a0_1;
            void* x22_4;
            if (x0_86 >= 0x17)
            {
                uint64_t x23_8 = ((x0_86 + 0x10) & 0xfffffffffffffff0);
                void* x0_94 = operator new(x23_8);
                x22_4 = x0_94;
                size_t var_2a8_1 = x0_86;
                var_2a0_1 = x0_94;
                s_6 = (x23_8 | 1);
            }
            else
            {
                x22_4 = &*s_6[1];
                s_6 = (x0_86 << 1);
            }
            if ((x0_86 >= 0x17 || (x0_86 < 0x17 && x0_86 != 0)))
            {
                memcpy(x22_4, s_16, x0_86);
            }
            *(x22_4 + x0_86) = 0;
            int32_t x0_97 = g3::logLevel(&var_2b8);
            int32_t x20_3;
            if ((x0_97 & 1) == 0)
            {
                x20_3 = 0;
                if ((s_6 & 1) != 0)
                {
                label_1a1d0:
                    operator delete(var_2a0_1);
                    if ((x20_3 & 1) != 0)
                    {
                        goto label_1a200;
                    }
                }
            }
            else
            {
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                s_5 = 0x14;
                __builtin_strncpy(&*s_5[1], "DomainSock", 0xb);
                x20_3 = g3::logTag(&s_5);
                if ((s_5 & 1) != 0)
                {
                    void* var_2c0;
                    operator delete(var_2c0);
                    if ((s_6 & 1) != 0)
                    {
                        goto label_1a1d0;
                    }
                }
                else if ((s_6 & 1) != 0)
                {
                    goto label_1a1d0;
                }
            }
            if (((((x0_97 & 1) == 0 && (s_6 & 1) == 0) || (x0_97 & 1) != 0) && (x20_3 & 1) != 0))
            {
            label_1a200:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "cannot find msg_id end", 0x16);
                LogCapture::~LogCapture();
            }
            x0_16 = 0;
            *(arg1 + 0x150) = 1;
        }
    }
    else
    {
        int32_t* x8_2 = *arg2;
        if ((arg2[1] - x8_2) < 4)
        {
        label_19934:
            x0_16 = 0;
        }
        else
        {
            *(arg1 + 0x154) = _byteswap(*x8_2);
            uint32_t x10_1 = *data_452d8;
            int32_t var_1d8 = data_452d0;
            char* x9_3 = *(data_452e2 + 6);
            __builtin_memset(&s_14, 0, 0x18);
            if ((x10_1 & 1) == 0)
            {
                x22_1 = &*(data_452d8 + 1);
            }
            else
            {
                x22_1 = x9_3;
            }
            size_t x0_1 = strlen(x22_1);
            if (x0_1 < -0x10)
            {
                goto label_1a2a0;
            }
            if (x0_1 >= 0x17)
            {
                uint64_t x24_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
                int64_t* x0_5 = operator new(x24_1);
                x23_1 = x0_5;
                size_t var_1c8_1 = x0_1;
                var_1c0 = x0_5;
                s_14 = (x24_1 | 1);
            }
            else
            {
                x23_1 = &*s_14[1];
                s_14 = (x0_1 << 1);
            }
            if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
            {
                memcpy(x23_1, x22_1, x0_1);
            }
            *(x23_1 + x0_1) = 0;
            int32_t x0_8 = g3::logLevel(&var_1d8);
            int32_t x21_2;
            if ((x0_8 & 1) == 0)
            {
                x21_2 = 0;
                if ((s_14 & 1) != 0)
                {
                label_19704:
                    operator delete(var_1c0);
                    if ((x21_2 & 1) != 0)
                    {
                        goto label_19734;
                    }
                }
            }
            else
            {
                int64_t s_13;
                __builtin_memset(&s_13, 0, 0x18);
                s_13 = 0x14;
                __builtin_strncpy(&*s_13[1], "DomainSock", 0xb);
                x21_2 = g3::logTag(&s_13);
                if ((s_13 & 1) != 0)
                {
                    void* var_1e0;
                    operator delete(var_1e0);
                    if ((s_14 & 1) != 0)
                    {
                        goto label_19704;
                    }
                }
                else if ((s_14 & 1) != 0)
                {
                    goto label_19704;
                }
            }
            if (((((x0_8 & 1) == 0 && (s_14 & 1) == 0) || (x0_8 & 1) != 0) && (x21_2 & 1) != 0))
            {
            label_19734:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_452d0, &data_2ddb7, &nullptr->ident.version);
                int32_t x0_14 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "parsing msg len:", 0x10);
                *(arg1 + 0x154);
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_14);
                LogCapture::~LogCapture();
            }
            void* x21_3 = *arg2;
            int64_t x8_14 = arg2[1];
            x22_1 = (x8_14 - (x21_3 + 4));
            if (x8_14 != (x21_3 + 4))
            {
                memmove(x21_3, (x21_3 + 4), x22_1);
            }
            arg2[1] = (x21_3 + x22_1);
            if (*(arg1 + 0x154) < 1)
            {
                char* x20_1;
                if ((*data_45358 & 1) == 0)
                {
                    x20_1 = &*(data_45358 + 1);
                }
                else
                {
                    x20_1 = *(data_45362 + 6);
                }
                int32_t var_210 = data_45350;
                int64_t s_12;
                __builtin_memset(&s_12, 0, 0x18);
                size_t x0_18 = strlen(x20_1);
                if (x0_18 < -0x10)
                {
                    goto label_1a2a8;
                }
                void* var_1f8_1;
                void* x21_4;
                if (x0_18 >= 0x17)
                {
                    uint64_t x22_2 = ((x0_18 + 0x10) & 0xfffffffffffffff0);
                    void* x0_45 = operator new(x22_2);
                    x21_4 = x0_45;
                    size_t var_200_1 = x0_18;
                    var_1f8_1 = x0_45;
                    s_12 = (x22_2 | 1);
                }
                else
                {
                    x21_4 = &*s_12[1];
                    s_12 = (x0_18 << 1);
                }
                if ((x0_18 >= 0x17 || (x0_18 < 0x17 && x0_18 != 0)))
                {
                    memcpy(x21_4, x20_1, x0_18);
                }
                *(x21_4 + x0_18) = 0;
                int32_t x0_48 = g3::logLevel(&var_210);
                int32_t x19_2;
                if ((x0_48 & 1) == 0)
                {
                    x19_2 = 0;
                    if ((s_12 & 1) != 0)
                    {
                    label_19d48:
                        operator delete(var_1f8_1);
                        if ((x19_2 & 1) != 0)
                        {
                            goto label_19d78;
                        }
                    }
                }
                else
                {
                    int64_t s_11;
                    __builtin_memset(&s_11, 0, 0x18);
                    s_11 = 0x14;
                    __builtin_strncpy(&*s_11[1], "DomainSock", 0xb);
                    x19_2 = g3::logTag(&s_11);
                    if ((s_11 & 1) != 0)
                    {
                        void* var_218;
                        operator delete(var_218);
                        if ((s_12 & 1) != 0)
                        {
                            goto label_19d48;
                        }
                    }
                    else if ((s_12 & 1) != 0)
                    {
                        goto label_19d48;
                    }
                }
                if (((((x0_48 & 1) == 0 && (s_12 & 1) == 0) || (x0_48 & 1) != 0) && (x19_2 & 1) != 0))
                {
                label_19d78:
                    LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "msg len is 0", 0xc);
                    LogCapture::~LogCapture();
                }
                goto label_1a0f4;
            }
            *(arg1 + 0x150) = 0;
            x0_16 = 1;
        }
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_16;
}

int64_t sub_1a2d8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_1a2f8(int64_t arg1, int64_t* arg2 @ x21, char arg3, void* arg4)
{
    void* x8_2 = *arg2;
    if (x8_2 != 0)
    {
        arg2[1] = x8_2;
        operator delete(x8_2);
    }
    operator delete(arg2);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    void* x0_4;
    char* x1;
    int64_t* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_4, x1, x2);
}

int64_t sub_1a318(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_1a324(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    void* x0_4;
    char* x1;
    int64_t* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_4, x1, x2);
}

int64_t sub_1a34c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    void* x0_4;
    char* x1;
    int64_t* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_4, x1, x2);
}

int64_t sub_1a36c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_1a38c(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_1a3a0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_1a3d4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_1a41c(int64_t arg1, char arg2, void* arg3)
{
    LogCapture::~LogCapture();
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_1a420(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_1a44c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_1a470(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_1a484(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_1a4b8(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockServer::triggerPluginProcess(x0_2, x1, x2);
}

int64_t protocol::DomainSockServer::triggerPluginProcess(void* arg1, char* arg2, int64_t* arg3)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    int64_t* x20 = arg3;
    void* x0_1 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0x138));
    char s;
    int64_t s_1;
    void* var_2d8;
    int64_t s_3;
    char var_1f8;
    int64_t var_1f0;
    void* x0_5;
    size_t x0_7;
    int32_t x0_34;
    char* x19_1;
    if ((arg1 + 0x140) == x0_1)
    {
        x0_5 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0x120));
        if ((arg1 + 0x128) != x0_5)
        {
            char* x23_2;
            if ((*data_45338 & 1) == 0)
            {
                x23_2 = &*(data_45338 + 1);
            }
            else
            {
                x23_2 = *(data_45342 + 6);
            }
            int32_t var_2b0 = data_45330;
            __builtin_memset(&s_3, 0, 0x18);
            x0_7 = strlen(x23_2);
            if (x0_7 >= -0x10)
            {
                void* var_298_1;
                void* x24_3;
                if (x0_7 >= 0x17)
                {
                    uint64_t x25_3 = ((x0_7 + 0x10) & 0xfffffffffffffff0);
                    void* x0_23 = operator new(x25_3);
                    x24_3 = x0_23;
                    size_t var_2a0_1 = x0_7;
                    var_298_1 = x0_23;
                    s_3 = (x25_3 | 1);
                }
                else
                {
                    x24_3 = &*s_3[1];
                    s_3 = (x0_7 << 1);
                }
                if ((x0_7 >= 0x17 || (x0_7 < 0x17 && x0_7 != 0)))
                {
                    memcpy(x24_3, x23_2, x0_7);
                }
                *(x24_3 + x0_7) = 0;
                int32_t x0_26 = g3::logLevel(&var_2b0);
                int32_t x22_7;
                if ((x0_26 & 1) == 0)
                {
                    x22_7 = 0;
                    if ((s_3 & 1) != 0)
                    {
                    label_1a878:
                        operator delete(var_298_1);
                        if ((x22_7 & 1) != 0)
                        {
                            goto label_1a8a8;
                        }
                    }
                }
                else
                {
                    int64_t s_2;
                    __builtin_memset(&s_2, 0, 0x18);
                    s_2 = 0x14;
                    __builtin_strncpy(&*s_2[1], "DomainSock", 0xb);
                    x22_7 = g3::logTag(&s_2);
                    if ((s_2 & 1) != 0)
                    {
                        void* var_2b8;
                        operator delete(var_2b8);
                        if ((s_3 & 1) != 0)
                        {
                            goto label_1a878;
                        }
                    }
                    else if ((s_3 & 1) != 0)
                    {
                        goto label_1a878;
                    }
                }
                if (((((x0_26 & 1) == 0 && (s_3 & 1) == 0) || (x0_26 & 1) != 0) && (x22_7 & 1) != 0))
                {
                label_1a8a8:
                    LogCapture::LogCapture(&var_1f8, "DomainSock", &data_45330, &data_2ddb7, &nullptr->ident.version);
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_32 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f0, "protocol process:", 0x11);
                    uint64_t x8_19 = *arg2;
                    int32_t temp1_1 = (x8_19 & 1);
                    void* x1_3;
                    if (temp1_1 != 0)
                    {
                        x1_3 = *(arg2 + 0x10);
                    }
                    else
                    {
                        x1_3 = &arg2[1];
                    }
                    uint64_t x2_2;
                    if (temp1_1 == 0)
                    {
                        x2_2 = (x8_19 >> 1);
                    }
                    else
                    {
                        x2_2 = *(arg2 + 8);
                    }
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_32, x1_3, x2_2);
                    LogCapture::~LogCapture();
                }
                char* x8_20 = *x20;
                *x20 = 0;
                int64_t* x0_33 = *(x0_5 + 0x60);
                if (x0_33 == 0)
                {
                    sub_13744();
                    /* no return */
                }
                x0_34 = *(*x0_33 + 0x30)();
                x19_1 = x8_20;
                char* var_2d0 = nullptr;
                if (x19_1 != 0)
                {
                    void* x0_35 = *x19_1;
                    if (x0_35 != 0)
                    {
                        *(x19_1 + 8) = x0_35;
                        operator delete(x0_35);
                    }
                    goto label_1ab20;
                }
            }
        }
        else
        {
            char* x21_3;
            if ((*data_45338 & 1) == 0)
            {
                x21_3 = &*(data_45338 + 1);
            }
            else
            {
                x21_3 = *(data_45342 + 6);
            }
            int32_t var_2f0 = data_45330;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_21 = strlen(x21_3);
            if (x0_21 < -0x10)
            {
                goto label_1acb8;
            }
            void* x22_6;
            if (x0_21 >= 0x17)
            {
                uint64_t x23_4 = ((x0_21 + 0x10) & 0xfffffffffffffff0);
                void* x0_53 = operator new(x23_4);
                x22_6 = x0_53;
                size_t var_2e0_1 = x0_21;
                var_2d8 = x0_53;
                s_1 = (x23_4 | 1);
            }
            else
            {
                x22_6 = &*s_1[1];
                s_1 = (x0_21 << 1);
            }
            if ((x0_21 >= 0x17 || (x0_21 < 0x17 && x0_21 != 0)))
            {
                memcpy(x22_6, x21_3, x0_21);
            }
            *(x22_6 + x0_21) = 0;
            x0_34 = g3::logLevel(&var_2f0);
            int32_t x20_4;
            if ((x0_34 & 1) == 0)
            {
                x20_4 = 0;
                if ((s_1 & 1) != 0)
                {
                label_1abf4:
                    x0_34 = operator delete(var_2d8);
                    if ((x20_4 & 1) != 0)
                    {
                        goto label_1ac24;
                    }
                }
            }
            else
            {
                __builtin_memset(&s, 0, 0x18);
                s = 0x14;
                int64_t var_307;
                __builtin_strncpy(&var_307, "DomainSock", 0xb);
                x0_34 = g3::logTag(&s);
                x20_4 = x0_34;
                if ((s & 1) != 0)
                {
                    void* var_2f8_1;
                    x0_34 = operator delete(var_2f8_1);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_1abf4;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_1abf4;
                }
            }
            if (((((x0_34 & 1) == 0 && (s_1 & 1) == 0) || (x0_34 & 1) != 0) && (x20_4 & 1) != 0))
            {
            label_1ac24:
                LogCapture::LogCapture(&var_1f8, "DomainSock", &data_45330, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_60 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f0, "unkown msg id:", 0xe);
                uint64_t x8_45 = *arg2;
                int32_t temp0_1 = (x8_45 & 1);
                void* x1_10;
                if (temp0_1 != 0)
                {
                    x1_10 = *(arg2 + 0x10);
                }
                else
                {
                    x1_10 = &arg2[1];
                }
                uint64_t x2_6;
                if (temp0_1 == 0)
                {
                    x2_6 = (x8_45 >> 1);
                }
                else
                {
                    x2_6 = *(arg2 + 8);
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_60, x1_10, x2_6);
                x0_34 = LogCapture::~LogCapture();
            }
        }
    }
    int64_t* x21_2;
    if (((arg1 + 0x140) != x0_1 && *x20 == 0))
    {
        x21_2 = (x0_1 + 0x60);
    label_1aae4:
        char* var_290 = nullptr;
        int64_t* x0_48 = *x21_2;
        if (x0_48 == 0)
        {
            goto label_1ac98;
        }
        x0_34 = *(*x0_48 + 0x30)();
        x19_1 = var_290;
        var_290 = nullptr;
        if (x19_1 != 0)
        {
            *x19_1;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x19_1[8]);
        label_1ab20:
            x0_34 = operator delete(x19_1);
        }
    }
    if (((((arg1 + 0x140) == x0_1 && (arg1 + 0x128) == x0_5) || (((arg1 + 0x140) == x0_1 && (arg1 + 0x128) != x0_5) && x0_7 >= -0x10)) || ((arg1 + 0x140) != x0_1 && *x20 == 0)))
    {
        if (*(x26 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_34;
    }
    if (((arg1 + 0x140) != x0_1 && *x20 != 0))
    {
        char* x23_1;
        if ((*data_452d8 & 1) == 0)
        {
            x23_1 = &*(data_452d8 + 1);
        }
        else
        {
            x23_1 = *(data_452e2 + 6);
        }
        int32_t var_218 = data_452d0;
        int64_t s_6;
        __builtin_memset(&s_6, 0, 0x18);
        size_t x0_3 = strlen(x23_1);
        if (x0_3 >= -0x10)
        {
            void* var_200_1;
            void* x24_2;
            if (x0_3 >= 0x17)
            {
                uint64_t x25_1 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
                void* x0_9 = operator new(x25_1);
                x24_2 = x0_9;
                size_t var_208_1 = x0_3;
                var_200_1 = x0_9;
                s_6 = (x25_1 | 1);
            }
            else
            {
                x24_2 = &*s_6[1];
                s_6 = (x0_3 << 1);
            }
            if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
            {
                memcpy(x24_2, x23_1, x0_3);
            }
            *(x24_2 + x0_3) = 0;
            int32_t x22_3;
            if ((g3::logLevel(&var_218) & 1) == 0)
            {
                x22_3 = 0;
                if ((s_6 & 1) != 0)
                {
                label_1a6e8:
                    operator delete(var_200_1);
                    if ((x22_3 & 1) != 0)
                    {
                        goto label_1a718;
                    }
                    goto label_1aa28;
                }
            }
            else
            {
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                s_5 = 0x14;
                __builtin_strncpy(&*s_5[1], "DomainSock", 0xb);
                x22_3 = g3::logTag(&s_5);
                if ((s_5 & 1) != 0)
                {
                    void* var_220;
                    operator delete(var_220);
                    if ((s_6 & 1) != 0)
                    {
                        goto label_1a6e8;
                    }
                }
                else if ((s_6 & 1) != 0)
                {
                    goto label_1a6e8;
                }
            }
            int64_t* var_288;
            if ((x22_3 & 1) != 0)
            {
            label_1a718:
                LogCapture::LogCapture(&var_1f8, "DomainSock", &data_452d0, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_18;
                int128_t v0_1;
                int128_t v1_1;
                x0_18 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f0, "parsing josn data:", 0x12);
                int64_t* x8_11 = *x20;
                char* x28_1 = *x8_11;
                int64_t x25_2 = x8_11[1];
                char s_4;
                __builtin_memset(&s_4, 0, 0x18);
                uint64_t x27_1 = (x25_2 - x28_1);
                char* var_238;
                if (x27_1 < -0x10)
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_1acb8:
                    int64_t x19_2 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                    if (((s & 1) == 0 && (s_1 & 1) == 0))
                    {
                    label_1b05c:
                        _Unwind_Resume(x19_2);
                    }
                    if ((s & 1) != 0)
                    {
                        void* var_2f8;
                        operator delete(var_2f8);
                        if ((s_1 & 1) == 0)
                        {
                            goto label_1b05c;
                        }
                    }
                    if ((((s & 1) == 0 && (s_1 & 1) != 0) || (s & 1) != 0))
                    {
                        operator delete(var_2d8);
                        int64_t x0_69 = _Unwind_Resume(x19_2);
                        if ((s_4 & 1) != 0)
                        {
                            operator delete(var_238);
                        }
                        LogCapture::~LogCapture();
                        x19_2 = _Unwind_Resume(x0_69);
                        if ((s_3 & 1) == 0)
                        {
                            goto label_1b05c;
                        }
                        void* var_298;
                        operator delete(var_298);
                        x20 = var_288;
                        x19_2 = _Unwind_Resume(x19_2);
                        var_288 = nullptr;
                        if (x20 == 0)
                        {
                            goto label_1b05c;
                        }
                    }
                    *x20;
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x20[1]);
                    operator delete(x20);
                    int64_t* x0_81;
                    int64_t x1_12;
                    void* x2_7;
                    int32_t x3;
                    char* x8_53;
                    x0_81 = _Unwind_Resume(x19_2);
                    /* tailcall */
                    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(x0_81, x1_12, x2_7, x3, x8_53);
                }
                uint64_t var_240_1;
                char* x0_19;
                if (x27_1 > 0x16)
                {
                    uint64_t x23_3 = ((x27_1 + 0x10) & 0xfffffffffffffff0);
                    x0_19 = operator new(x23_3);
                    var_240_1 = x27_1;
                    var_238 = x0_19;
                    s_4 = (x23_3 | 1);
                }
                else
                {
                    s_4 = (x27_1 << 1);
                    x0_19 = (&s_4 | 1);
                }
                if (((x27_1 > 0x16 && x28_1 != x25_2) || (x27_1 <= 0x16 && x28_1 != x25_2)))
                {
                    char* x9_5 = x0_19;
                    char* x10_5 = x28_1;
                    if (x27_1 < 0x20)
                    {
                    label_1a9d8:
                        do
                        {
                            char x11_5 = *x10_5;
                            x10_5 = &x10_5[1];
                            *x9_5 = x11_5;
                            x9_5 = &x9_5[1];
                        } while (x25_2 != x10_5);
                    }
                    else
                    {
                        if (x0_19 < x25_2)
                        {
                            x9_5 = x0_19;
                            x10_5 = x28_1;
                            if (&x0_19[x27_1] > x28_1)
                            {
                                goto label_1a9d8;
                            }
                        }
                        int64_t i_2 = (x27_1 & 0xffffffffffffffe0);
                        void* x12_1 = &x28_1[0x10];
                        x9_5 = &x0_19[i_2];
                        x10_5 = &x28_1[i_2];
                        void* x13_1 = &x0_19[0x10];
                        int64_t i_1 = i_2;
                        int64_t i;
                        do
                        {
                            v0_1 = *(x12_1 - 0x10);
                            v1_1 = *x12_1;
                            x12_1 = (x12_1 + 0x20);
                            i = i_1;
                            i_1 = (i_1 - 0x20);
                            *(x13_1 - 0x10) = v0_1;
                            *x13_1 = v1_1;
                            x13_1 = (x13_1 + 0x20);
                        } while (i != 0x20);
                        if (i_2 != x27_1)
                        {
                            goto label_1a9d8;
                        }
                    }
                    x0_19 = &x0_19[(x25_2 + -(x28_1))];
                }
                *x0_19 = 0;
                uint64_t s_7 = s_4;
                int32_t temp2_1 = (s_7 & 1);
                char* x1_4;
                if (temp2_1 == 0)
                {
                    x1_4 = (&s_4 | 1);
                }
                else
                {
                    x1_4 = var_238;
                }
                uint64_t x2_3;
                if (temp2_1 == 0)
                {
                    x2_3 = (s_7 >> 1);
                }
                else
                {
                    x2_3 = var_240_1;
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_18, x1_4, x2_3);
                if ((s_4 & 1) != 0)
                {
                    operator delete(var_238);
                }
                LogCapture::~LogCapture();
                goto label_1aa28;
            }
        label_1aa28:
            int64_t* x8_30 = *x20;
            int64_t* var_90_1 = nullptr;
            void var_b0;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(*x8_30, x8_30[1], &var_b0, true);
            int64_t* x0_41 = operator new(0x10);
            char x8_31 = var_1f8;
            int64_t x10_7 = var_1f0;
            var_1f8 = 0;
            *x0_41 = x8_31;
            x0_41[1] = x10_7;
            var_1f0 = 0;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_1f0);
            int64_t x8_33;
            if (&var_b0 == var_90_1)
            {
                x8_33 = *(*var_90_1 + 0x20);
            }
            if ((&var_b0 != var_90_1 && var_90_1 != 0))
            {
                x8_33 = *(*var_90_1 + 0x28);
            }
            if ((&var_b0 == var_90_1 || (&var_b0 != var_90_1 && var_90_1 != 0)))
            {
                x8_33();
            }
            x21_2 = (x0_1 + 0x60);
            int64_t* x0_44 = *x21_2;
            if (x0_44 == 0)
            {
                sub_13744();
                /* no return */
            }
            *(*x0_44 + 0x30)();
            var_288 = nullptr;
            if (x0_41 != 0)
            {
                *x0_41;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_41[1]);
                operator delete(x0_41);
            }
            goto label_1aae4;
        }
    }
    if (((((arg1 + 0x140) == x0_1 && (arg1 + 0x128) != x0_5) && x0_7 < -0x10) || ((arg1 + 0x140) != x0_1 && *x20 != 0)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_1ac98:
        sub_13744();
        /* no return */
    }
}

int64_t sub_1acd4(int64_t arg1, void* arg2 @ x20, char arg3, void* arg4, void* arg5)
{
    LogCapture::~LogCapture();
    int64_t x19_1 = _Unwind_Resume(arg1);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
        arg2 = arg5;
        x19_1 = _Unwind_Resume(x19_1);
        arg5 = nullptr;
    }
    if (((arg3 & 1) == 0 || ((arg3 & 1) != 0 && arg2 == 0)))
    {
        _Unwind_Resume(x19_1);
    }
    char* x0_6 = arg2;
    *x0_6;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_6[8]);
    operator delete(arg2);
    int64_t* x0_10;
    int64_t x1_1;
    void* x2;
    int32_t x3;
    char* x8_1;
    x0_10 = _Unwind_Resume(x19_1);
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(x0_10, x1_1, x2, x3, x8_1);
}

int64_t sub_1ad34(int64_t arg1, void* arg2 @ x20, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    int64_t x19 = arg1;
    if (((arg4 & 1) == 0 && (arg6 & 1) == 0))
    {
    label_1b05c:
        _Unwind_Resume(x19);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
        if ((arg6 & 1) == 0)
        {
            goto label_1b05c;
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || (arg4 & 1) != 0))
    {
        operator delete(arg7);
        arg2 = arg3;
        x19 = _Unwind_Resume(x19);
        arg3 = nullptr;
        if (arg2 == 0)
        {
            goto label_1b05c;
        }
    }
    char* x0_5 = arg2;
    *x0_5;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_5[8]);
    operator delete(arg2);
    int64_t* x0_9;
    int64_t x1_1;
    void* x2;
    int32_t x3;
    char* x8_2;
    x0_9 = _Unwind_Resume(x19);
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(x0_9, x1_1, x2, x3, x8_2);
}

int64_t sub_1adbc(void* arg1, void* arg2, void* arg3 @ x26, void* arg4 @ x29, int64_t arg5, void* arg6, void* arg7, char arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19)
{
    void* exceptionObject = arg1;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_120);
    int64_t* x0_1 = *(arg4 - 0x80);
    int64_t x8_2;
    if ((arg4 - 0xa0) == x0_1)
    {
        x8_2 = *(*x0_1 + 0x20);
    }
    if (((arg4 - 0xa0) != x0_1 && x0_1 != 0))
    {
        x8_2 = *(*x0_1 + 0x28);
    }
    if (((arg4 - 0xa0) == x0_1 || ((arg4 - 0xa0) != x0_1 && x0_1 != 0)))
    {
        x8_2();
    }
    if (arg2 == 1)
    {
        void* x0_3 = __cxa_begin_catch(exceptionObject);
        char* x21_1;
        if ((*data_45358 & 1) == 0)
        {
            x21_1 = &*(data_45358 + 1);
        }
        else
        {
            x21_1 = *(data_45362 + 6);
        }
        arg_a8 = data_45350;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_5 = strlen(x21_1);
        if (x0_5 >= -0x10)
        {
            void* x22;
            if (x0_5 >= 0x17)
            {
                uint64_t x23_1 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
                void* x0_7 = operator new(x23_1);
                x22 = x0_7;
                arg_b8 = x0_5;
                arg7 = x0_7;
                s_1 = (x23_1 | 1);
            }
            else
            {
                x22 = &*s_1[1];
                s_1 = (x0_5 << 1);
            }
            if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
            {
                memcpy(x22, x21_1, x0_5);
            }
            *(x22 + x0_5) = 0;
            int32_t x0_10 = g3::logLevel(&arg_a8);
            int32_t x20_1;
            if ((x0_10 & 1) == 0)
            {
                x20_1 = 0;
                if ((s_1 & 1) != 0)
                {
                label_1af24:
                    operator delete(arg7);
                    if ((x20_1 & 1) != 0)
                    {
                        goto label_1af54;
                    }
                }
            }
            else
            {
                __builtin_memset(&s, 0, 0x18);
                s = 0x14;
                int64_t x24;
                __builtin_strncpy((x24 + 1), "DomainSock", 0xa);
                *arg_98[3] = 0;
                x20_1 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    operator delete(arg6);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_1af24;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_1af24;
                }
            }
            if (((((x0_10 & 1) == 0 && (s_1 & 1) == 0) || (x0_10 & 1) != 0) && (x20_1 & 1) != 0))
            {
            label_1af54:
                LogCapture::LogCapture(&arg8, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_16 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&arg_120, "protocol error:", 0xf);
                char* x0_18 = *(*x0_3 + 0x10)(x0_3);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_16, x0_18, strlen(x0_18));
                LogCapture::~LogCapture();
            }
            int64_t x0_21 = __cxa_end_catch();
            if (*(arg3 + 0x28) != arg5)
            {
                __stack_chk_fail();
                /* no return */
            }
            return x0_21;
        }
        exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        __cxa_end_catch();
    }
    _Unwind_Resume(exceptionObject);
    char* x0_25 = arg2;
    *x0_25;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_25[8]);
    operator delete(arg2);
    int64_t* x0_29;
    int64_t x1_4;
    void* x2_3;
    int32_t x3;
    char* x8_13;
    x0_29 = _Unwind_Resume(exceptionObject);
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(x0_29, x1_4, x2_3, x3, x8_13);
}

int64_t sub_1add8(void* arg1, void* arg2, void* arg3 @ x26, void* arg4 @ x29, int64_t arg5, void* arg6, void* arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18)
{
    int64_t* x0 = *(arg4 - 0x80);
    int64_t x8_2;
    if ((arg4 - 0xa0) == x0)
    {
        x8_2 = *(*x0 + 0x20);
    }
    if (((arg4 - 0xa0) != x0 && x0 != 0))
    {
        x8_2 = *(*x0 + 0x28);
    }
    if (((arg4 - 0xa0) == x0 || ((arg4 - 0xa0) != x0 && x0 != 0)))
    {
        x8_2();
    }
    if (arg2 != 1)
    {
        _Unwind_Resume(arg1);
        char* x0_24 = arg2;
        *x0_24;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_24[8]);
        operator delete(arg2);
        int64_t* x0_28;
        int64_t x1_4;
        void* x2_4;
        int32_t x3_1;
        char* x8_14;
        x0_28 = _Unwind_Resume(arg1);
        /* tailcall */
        return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(x0_28, x1_4, x2_4, x3_1, x8_14);
    }
    void* x0_2 = __cxa_begin_catch(arg1);
    char* x21;
    if ((*data_45358 & 1) == 0)
    {
        x21 = &*(data_45358 + 1);
    }
    else
    {
        x21 = *(data_45362 + 6);
    }
    arg_a8 = data_45350;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_4 = strlen(x21);
    if (x0_4 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
        /* tailcall */
        return sub_1afe8();
    }
    void* x22;
    if (x0_4 >= 0x17)
    {
        uint64_t x23_1 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
        void* x0_6 = operator new(x23_1);
        x22 = x0_6;
        arg_b8 = x0_4;
        arg7 = x0_6;
        s_1 = (x23_1 | 1);
    }
    else
    {
        x22 = &*s_1[1];
        s_1 = (x0_4 << 1);
    }
    if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
    {
        memcpy(x22, x21, x0_4);
    }
    *(x22 + x0_4) = 0;
    int32_t x0_9 = g3::logLevel(&arg_a8);
    int32_t x20_1;
    if ((x0_9 & 1) == 0)
    {
        x20_1 = 0;
        if ((s_1 & 1) != 0)
        {
        label_1af24:
            operator delete(arg7);
            if ((x20_1 & 1) != 0)
            {
                goto label_1af54;
            }
        }
    }
    else
    {
        __builtin_memset(&s, 0, 0x18);
        s = 0x14;
        int64_t x24;
        __builtin_strncpy((x24 + 1), "DomainSock", 0xa);
        *arg_98[3] = 0;
        x20_1 = g3::logTag(&s);
        if ((s & 1) != 0)
        {
            operator delete(arg6);
            if ((s_1 & 1) != 0)
            {
                goto label_1af24;
            }
        }
        else if ((s_1 & 1) != 0)
        {
            goto label_1af24;
        }
    }
    if (((((x0_9 & 1) == 0 && (s_1 & 1) == 0) || (x0_9 & 1) != 0) && (x20_1 & 1) != 0))
    {
    label_1af54:
        LogCapture::LogCapture(&arg_118, "DomainSock", &data_45350, &data_2ddb7, &nullptr->ident.version);
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_15 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&arg_120, "protocol error:", 0xf);
        char* x0_17 = *(*x0_2 + 0x10)(x0_2);
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_15, x0_17, strlen(x0_17));
        LogCapture::~LogCapture();
    }
    int64_t x0_20 = __cxa_end_catch();
    if (*(arg3 + 0x28) != arg5)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_20;
}

int64_t sub_1afc8(int64_t arg1, void* arg2 @ x20, char arg3, void* arg4, char arg5, void* arg6)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    __cxa_end_catch();
    _Unwind_Resume(arg1);
    char* x0_3 = arg2;
    *x0_3;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_3[8]);
    operator delete(arg2);
    int64_t* x0_7;
    int64_t x1_1;
    void* x2;
    int32_t x3;
    char* x8_2;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(x0_7, x1_1, x2, x3, x8_2);
}

int64_t sub_1b00c(int64_t arg1, void* arg2 @ x20, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    __cxa_end_catch();
    _Unwind_Resume(arg1);
    char* x0_2 = arg2;
    *x0_2;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_2[8]);
    operator delete(arg2);
    int64_t* x0_6;
    int64_t x1_1;
    void* x2;
    int32_t x3;
    char* x8_1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(x0_6, x1_1, x2, x3, x8_1);
}

void sub_1b028(void* arg1) __noreturn
{
    sub_1353c(arg1);
    /* no return */
}

int64_t* nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(int64_t arg1, int64_t arg2, void* arg3, int32_t arg4, char* arg5 @ x8)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    *arg5 = 0;
    *(arg5 + 8) = 0;
    void* x8_2;
    void** x19;
    void* x24_1;
    if (arg2 == arg1)
    {
        void** x0_15 = operator new(0x30);
        x0_15[2] = 0;
        x19 = x0_15;
        x24_1 = &x0_15[1];
        *x24_1 = 0;
        *x0_15 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter, std::__ndk1::allocator<nlohmann::detail::input_buffer_adapter> > + 0x10);
        x8_2 = &x0_15[3];
        *x8_2 = (_vtable_for_nlohmann::detail::input_buffer_adapter + 0x10);
        x0_15[4] = 0;
        x0_15[5] = 0;
    }
    else
    {
        void** x0 = operator new(0x30);
        x0[2] = 0;
        x19 = x0;
        x24_1 = &x0[1];
        *x24_1 = 0;
        *x0 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter, std::__ndk1::allocator<nlohmann::detail::input_buffer_adapter> > + 0x10);
        x8_2 = &x0[3];
        *x8_2 = (_vtable_for_nlohmann::detail::input_buffer_adapter + 0x10);
        x0[4] = arg1;
        x0[5] = (arg2 + (arg1 * 0));
    }
    void* var_180 = x8_2;
    int32_t i;
    do
    {
        i = __stxr((__ldxr(x24_1) + 1), x24_1);
    } while (i != 0);
    int64_t* x0_1 = *(arg3 + 0x20);
    void var_170;
    int64_t* var_150;
    if (x0_1 == 0)
    {
        var_150 = nullptr;
    }
    else if (arg3 == x0_1)
    {
        var_150 = &var_170;
        *(*x0_1 + 0x18)();
    }
    else
    {
        var_150 = *(*x0_1 + 0x10)();
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_140;
    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parser(&var_140, &var_180, &var_170);
    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(&var_140, &*nullptr->ident.signature[1]);
    char var_c0;
    void* var_b0;
    if ((var_c0 & 1) != 0)
    {
        operator delete(var_b0);
    }
    void* var_d8;
    if (var_d8 != 0)
    {
        void* var_d0_1 = var_d8;
        operator delete(var_d8);
    }
    int64_t* var_100;
    if (var_100 != 0)
    {
        int64_t x9_2;
        int32_t i_1;
        do
        {
            x9_2 = __ldaxr(&var_100[1]);
            i_1 = __stlxr((x9_2 - 1), &var_100[1]);
        } while (i_1 != 0);
        if (x9_2 == 0)
        {
            *(*var_100 + 0x10)(var_100);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    int64_t* var_120;
    int64_t x8_14;
    if (&var_140 == var_120)
    {
        x8_14 = *(*var_120 + 0x20);
    }
    if ((&var_140 != var_120 && var_120 != 0))
    {
        x8_14 = *(*var_120 + 0x28);
    }
    if ((&var_140 == var_120 || (&var_140 != var_120 && var_120 != 0)))
    {
        x8_14();
    }
    int64_t* x0_10 = var_150;
    int64_t x8_17;
    if (&var_170 == x0_10)
    {
        x8_17 = *(*x0_10 + 0x20);
    }
    if ((&var_170 != x0_10 && x0_10 != 0))
    {
        x8_17 = *(*x0_10 + 0x28);
    }
    if ((&var_170 == x0_10 || (&var_170 != x0_10 && x0_10 != 0)))
    {
        x0_10 = x8_17();
    }
    if (x19 != 0)
    {
        int64_t x9_3;
        int32_t i_2;
        do
        {
            x9_3 = __ldaxr(&x19[1]);
            i_2 = __stlxr((x9_3 - 1), &x19[1]);
        } while (i_2 != 0);
        if (x9_3 == 0)
        {
            *(*x19 + 0x10)(x19);
            x0_10 = std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    int64_t x8_22;
    int32_t i_3;
    do
    {
        x8_22 = __ldaxr(x24_1);
        i_3 = __stlxr((x8_22 - 1), x24_1);
    } while (i_3 != 0);
    if (x8_22 == 0)
    {
        *(*x19 + 0x10)(x19);
        x0_10 = std::__ndk1::__shared_weak_count::__release_weak();
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_10;
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::destroy(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::destroy(arg1);
    int64_t* x0_1 = arg2[0xc];
    int64_t x8_2;
    if (&arg2[8] == x0_1)
    {
        x8_2 = *(*x0_1 + 0x20);
    }
    if ((&arg2[8] != x0_1 && x0_1 != 0))
    {
        x8_2 = *(*x0_1 + 0x28);
    }
    if ((&arg2[8] == x0_1 || (&arg2[8] != x0_1 && x0_1 != 0)))
    {
        x8_2();
    }
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::destroy(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::destroy(arg1);
    int64_t* x0_1 = arg2[0xc];
    int64_t x8_2;
    if (&arg2[8] == x0_1)
    {
        x8_2 = *(*x0_1 + 0x20);
    }
    if ((&arg2[8] != x0_1 && x0_1 != 0))
    {
        x8_2 = *(*x0_1 + 0x28);
    }
    if ((&arg2[8] == x0_1 || (&arg2[8] != x0_1 && x0_1 != 0)))
    {
        x8_2();
    }
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(int64_t* arg1, char arg2)
{
    uint32_t x8 = arg2;
    void* x0_1;
    if (x8 == 3)
    {
        x0_1 = *arg1;
        if ((*x0_1 & 1) != 0)
        {
            operator delete(*(x0_1 + 0x10));
        }
    }
    if (x8 == 2)
    {
        int64_t* x20_1 = *arg1;
        void* x21_1 = *x20_1;
        if (x21_1 != 0)
        {
            char* x22_1 = x20_1[1];
            void* x0_3 = x21_1;
            if (x22_1 != x21_1)
            {
                do
                {
                    x22_1 = &x22_1[-0x10];
                    *x22_1;
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x22_1[8]);
                } while (x21_1 != x22_1);
                x0_3 = *x20_1;
            }
            x20_1[1] = x21_1;
            operator delete(x0_3);
            x20_1 = *arg1;
        }
        x0_1 = x20_1;
    }
    if ((x8 != 3 && x8 != 2))
    {
        if (x8 != 1)
        {
            return;
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0 = *arg1;
        *(x0 + 8);
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(x0);
    }
    if (((x8 == 3 && (*x0_1 & 1) != 0) || (x8 != 3 && x8 != 2)))
    {
        x0_1 = *arg1;
    }
    /* tailcall */
    return operator delete(x0_1);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::destroy(arg1);
    arg2[7];
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg2[8]);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

int64_t std::__ndk1::__shared_ptr_emplace<std::__ndk1::thread, std::__ndk1::allocator<std::__ndk1::thread> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<std::__ndk1::thread, std::__ndk1::allocator<std::__ndk1::thread> > + 0x10);
    std::__ndk1::thread::~thread();
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t std::__ndk1::__shared_ptr_emplace<std::__ndk1::thread, std::__ndk1::allocator<std::__ndk1::thread> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<std::__ndk1::thread, std::__ndk1::allocator<std::__ndk1::thread> > + 0x10);
    std::__ndk1::thread::~thread();
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__shared_ptr_emplace<std::__ndk1::thread, std::__ndk1::allocator<std::__ndk1::thread> >::__on_zero_shared(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::thread::~thread();
}

int64_t std::__ndk1::__shared_ptr_emplace<std::__ndk1::thread, std::__ndk1::allocator<std::__ndk1::thread> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int32_t sub_1b6f8(int64_t arg1, int128_t* arg2)
{
    int64_t x0 = operator new(8);
    std::__ndk1::__thread_struct::__thread_struct();
    int64_t* x0_1;
    int128_t v0;
    x0_1 = operator new(0x20);
    *x0_1 = x0;
    v0 = *arg2;
    x0_1[3] = arg2[1];
    *(x0_1 + 8) = v0;
    int32_t x0_3 = pthread_create(arg1, 0, _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8protocol16DomainSockServerEFvvEJPS9_EEEEEEEEPvSF_, x0_1);
    if (x0_3 == 0)
    {
        return x0_3;
    }
    int64_t x0_4 = std::__ndk1::__throw_system_error(x0_3, "thread constructor failed");
    void* x21_1 = *x0_1;
    *x0_1 = 0;
    if (x21_1 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x21_1);
    }
    operator delete(x0_1);
    /* tailcall */
    return _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8protocol16DomainSockServerEFvvEJPS9_EEEEEEEEPvSF_(_Unwind_Resume(x0_4));
}

int64_t sub_1b7a0(int64_t arg1, void* arg2 @ x21)
{
    std::__ndk1::__thread_struct::~__thread_struct();
    operator delete(arg2);
    /* tailcall */
    return _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8protocol16DomainSockServerEFvvEJPS9_EEEEEEEEPvSF_(_Unwind_Resume(arg1));
}

int64_t _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8protocol16DomainSockServerEFvvEJPS9_EEEEEEEEPvSF_(int64_t* arg1)
{
    int32_t* x0 = std::__ndk1::__thread_local_data();
    int64_t x1 = *arg1;
    *arg1 = 0;
    pthread_setspecific(*x0, x1);
    int64_t x10 = arg1[2];
    int64_t x8 = arg1[1];
    int64_t* x0_2 = (arg1[3] + (x10 >> 1));
    if ((x10 & 1) != 0)
    {
        x8 = *(*x0_2 + x8);
    }
    x8(x0_2);
    void* x20 = *arg1;
    *arg1 = 0;
    if (x20 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x20);
    }
    operator delete(arg1);
    return 0;
}

int64_t sub_1b840(int64_t arg1, int64_t* arg2 @ x19)
{
    if (arg2 != 0)
    {
        void* x21_1 = *arg2;
        *arg2 = 0;
        if (x21_1 != 0)
        {
            std::__ndk1::__thread_struct::~__thread_struct();
            operator delete(x21_1);
        }
        operator delete(arg2);
    }
    int64_t* x0_4;
    void** x1;
    char* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_4, x1, x2);
}

int64_t sub_1b84c(int64_t arg1, int64_t* arg2 @ x19)
{
    void* x21 = *arg2;
    *arg2 = 0;
    if (x21 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x21);
    }
    operator delete(arg2);
    int64_t* x0_4;
    void** x1;
    char* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_4, x1, x2);
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, void** arg2, char* arg3)
{
    int64_t* x20_1 = (arg1 + 8);
    int64_t* x24 = *x20_1;
    if (x24 == 0)
    {
        *arg2 = x20_1;
    }
    else
    {
        uint64_t x8_1 = *arg3;
        x20_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x25_1;
        if (temp0_1 == 0)
        {
            x25_1 = (x8_1 >> 1);
        }
        else
        {
            x25_1 = *(arg3 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg3 + 0x10);
        }
        else
        {
            x21_1 = &arg3[1];
        }
        while (true)
        {
            uint64_t x28_1 = x24[4];
            uint64_t x26_1;
            if ((x28_1 & 1) == 0)
            {
                x26_1 = (x28_1 >> 1);
            }
            else
            {
                x26_1 = x24[5];
            }
            uint64_t x22_1;
            if (x26_1 < x25_1)
            {
                x22_1 = x26_1;
            }
            else
            {
                x22_1 = x25_1;
            }
            int32_t x0_1;
            void* x23_1;
            if (x22_1 != 0)
            {
                if ((x28_1 & 1) != 0)
                {
                    x23_1 = x24[6];
                }
                else
                {
                    x23_1 = (x24 + 0x21);
                }
                x0_1 = memcmp(x21_1, x23_1, x22_1);
            }
            int64_t* x8_2;
            if ((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)))
            {
                if (x25_1 < x26_1)
                {
                label_1b920:
                    x8_2 = *x24;
                    if (x8_2 == 0)
                    {
                        *arg2 = x24;
                        x20_1 = x24;
                        break;
                    }
                    x20_1 = x24;
                    goto label_1b8c8;
                }
                if (x22_1 != 0)
                {
                    if ((x28_1 & 1) != 0)
                    {
                        x23_1 = x24[6];
                    }
                    else
                    {
                        x23_1 = (x24 + 0x21);
                    }
                    goto label_1b94c;
                }
            }
            if ((x22_1 != 0 && x0_1 != 0))
            {
                if ((x0_1 & 0x80000000) != 0)
                {
                    goto label_1b920;
                }
            label_1b94c:
                int32_t x0_3 = memcmp(x23_1, x21_1, x22_1);
                if (x0_3 != 0)
                {
                    if ((x0_3 & 0x80000000) == 0)
                    {
                        goto label_1b970;
                    }
                    goto label_1b968;
                }
            }
            if ((((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)) && x25_1 >= x26_1) || (x22_1 != 0 && x0_1 != 0)))
            {
                if (x26_1 >= x25_1)
                {
                label_1b970:
                    *arg2 = x24;
                    break;
                }
            label_1b968:
                x20_1 = &x24[1];
                x8_2 = *x20_1;
                if (x8_2 == 0)
                {
                    goto label_1b970;
                }
            label_1b8c8:
                x24 = x8_2;
            }
        }
    }
    return x20_1;
}

void std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(int64_t arg1, int64_t* arg2)
{
    char x8;
    if (arg2 == arg1)
    {
        x8 = 1;
    }
    else
    {
        x8 = 0;
    }
    arg2[3] = x8;
    if (arg2 != arg1)
    {
        int64_t* x8_2;
        do
        {
            int64_t* x9_1 = arg2[2];
            void* x10_2 = &x9_1[3];
            if (*x10_2 != 0)
            {
                break;
            }
            x8_2 = x9_1[2];
            void* x12_1 = *x8_2;
            char* x12_2;
            if (x12_1 == x9_1)
            {
                void* x12_3 = x8_2[1];
                if (x12_3 != 0)
                {
                    x12_2 = (x12_3 + 0x18);
                }
                if ((x12_3 == 0 || (x12_3 != 0 && *x12_2 != 0)))
                {
                    if (*x9_1 != arg2)
                    {
                        int64_t** x10_9 = x9_1[1];
                        int64_t* x11_4 = *x10_9;
                        x9_1[1] = x11_4;
                        if (x11_4 != 0)
                        {
                            x11_4[2] = x9_1;
                            x8_2 = x9_1[2];
                        }
                        x10_9[2] = x8_2;
                        int64_t*** x8_4 = x9_1[2];
                        int64_t x11_6;
                        if (*x8_4 == x9_1)
                        {
                            x11_6 = 0;
                        }
                        else
                        {
                            x11_6 = 8;
                        }
                        *(x8_4 + x11_6) = x10_9;
                        *x10_9 = x9_1;
                        x9_1[2] = x10_9;
                        x8_2 = x10_9[2];
                        x10_2 = &x10_9[3];
                    }
                    *x10_2 = 1;
                    void* x9_4 = *x8_2;
                    x8_2[3] = 0;
                    void* x10_10 = *(x9_4 + 8);
                    *x8_2 = x10_10;
                    if (x10_10 != 0)
                    {
                        *(x10_10 + 0x10) = x8_2;
                    }
                    *(x9_4 + 0x10) = x8_2[2];
                    void** x10_12 = x8_2[2];
                    int64_t x11_8;
                    if (*x10_12 == x8_2)
                    {
                        x11_8 = 0;
                    }
                    else
                    {
                        x11_8 = 8;
                    }
                    *(x10_12 + x11_8) = x9_4;
                    *(x9_4 + 8) = x8_2;
                    x8_2[2] = x9_4;
                    return;
                }
            }
            else
            {
                if (x12_1 != 0)
                {
                    x12_2 = (x12_1 + 0x18);
                }
                if ((x12_1 == 0 || (x12_1 != 0 && *x12_2 != 0)))
                {
                    if (*x9_1 == arg2)
                    {
                        void* x10_3 = arg2[1];
                        *x9_1 = x10_3;
                        if (x10_3 != 0)
                        {
                            *(x10_3 + 0x10) = x9_1;
                            x8_2 = x9_1[2];
                        }
                        arg2[2] = x8_2;
                        int64_t* x8_3 = x9_1[2];
                        int64_t x10_5;
                        if (*x8_3 == x9_1)
                        {
                            x10_5 = 0;
                        }
                        else
                        {
                            x10_5 = 8;
                        }
                        *(x8_3 + x10_5) = arg2;
                        arg2[1] = x9_1;
                        x9_1[2] = arg2;
                        x8_2 = arg2[2];
                        x10_2 = &arg2[3];
                    }
                    *x10_2 = 1;
                    int64_t** x9_3 = x8_2[1];
                    x8_2[3] = 0;
                    int64_t* x10_6 = *x9_3;
                    x8_2[1] = x10_6;
                    if (x10_6 != 0)
                    {
                        x10_6[2] = x8_2;
                    }
                    x9_3[2] = x8_2[2];
                    int64_t* x10_8 = x8_2[2];
                    int64_t x11_2;
                    if (*x10_8 == x8_2)
                    {
                        x11_2 = 0;
                    }
                    else
                    {
                        x11_2 = 8;
                    }
                    *(x10_8 + x11_2) = x9_3;
                    *x9_3 = x8_2;
                    x8_2[2] = x9_3;
                    return;
                }
            }
            char x9_2;
            if (x8_2 == arg1)
            {
                x9_2 = 1;
            }
            else
            {
                x9_2 = 0;
            }
            arg2 = x8_2;
            *x10_2 = 1;
            x8_2[3] = x9_2;
            *x12_2 = 1;
        } while (x8_2 != arg1);
    }
}

void sub_1bb50(int64_t* arg1, void* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    if (arg2 != arg1)
    {
        int64_t* x20_1 = arg1;
        arg1 = arg1[4];
        if (arg1 != x20_1)
        {
            int64_t* x8_1 = *(arg2 + 0x20);
            if (arg2 == x8_1)
            {
                *(*x8_1 + 0x18)(x8_1, x20_1);
                *(**(arg2 + 0x20) + 0x20)();
                *(arg2 + 0x20) = x20_1[4];
                x20_1[4] = x20_1;
            }
            else
            {
                x20_1[4] = x8_1;
                *(arg2 + 0x20) = arg1;
            }
        }
        else
        {
            if (*(arg2 + 0x20) == arg2)
            {
                *(*arg1 + 0x18)();
                *(*x20_1[4] + 0x20)();
                x20_1[4] = 0;
                *(**(arg2 + 0x20) + 0x18)();
                *(**(arg2 + 0x20) + 0x20)();
                *(arg2 + 0x20) = 0;
                x20_1[4] = x20_1;
                void* var_60;
                *(var_60 + 0x18)(&var_60, arg2);
                *(var_60 + 0x20)(&var_60);
            }
            else
            {
                *(*arg1 + 0x18)();
                *(*x20_1[4] + 0x20)();
                x20_1[4] = *(arg2 + 0x20);
            }
            *(arg2 + 0x20) = arg2;
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, void** arg2, char* arg3)
{
    int64_t* x20_1 = (arg1 + 8);
    int64_t* x24 = *x20_1;
    if (x24 == 0)
    {
        *arg2 = x20_1;
    }
    else
    {
        uint64_t x8_1 = *arg3;
        x20_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x25_1;
        if (temp0_1 == 0)
        {
            x25_1 = (x8_1 >> 1);
        }
        else
        {
            x25_1 = *(arg3 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg3 + 0x10);
        }
        else
        {
            x21_1 = &arg3[1];
        }
        while (true)
        {
            uint64_t x28_1 = x24[4];
            uint64_t x26_1;
            if ((x28_1 & 1) == 0)
            {
                x26_1 = (x28_1 >> 1);
            }
            else
            {
                x26_1 = x24[5];
            }
            uint64_t x22_1;
            if (x26_1 < x25_1)
            {
                x22_1 = x26_1;
            }
            else
            {
                x22_1 = x25_1;
            }
            int32_t x0_1;
            void* x23_1;
            if (x22_1 != 0)
            {
                if ((x28_1 & 1) != 0)
                {
                    x23_1 = x24[6];
                }
                else
                {
                    x23_1 = (x24 + 0x21);
                }
                x0_1 = memcmp(x21_1, x23_1, x22_1);
            }
            int64_t* x8_2;
            if ((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)))
            {
                if (x25_1 < x26_1)
                {
                label_1bd5c:
                    x8_2 = *x24;
                    if (x8_2 == 0)
                    {
                        *arg2 = x24;
                        x20_1 = x24;
                        break;
                    }
                    x20_1 = x24;
                    goto label_1bd04;
                }
                if (x22_1 != 0)
                {
                    if ((x28_1 & 1) != 0)
                    {
                        x23_1 = x24[6];
                    }
                    else
                    {
                        x23_1 = (x24 + 0x21);
                    }
                    goto label_1bd88;
                }
            }
            if ((x22_1 != 0 && x0_1 != 0))
            {
                if ((x0_1 & 0x80000000) != 0)
                {
                    goto label_1bd5c;
                }
            label_1bd88:
                int32_t x0_3 = memcmp(x23_1, x21_1, x22_1);
                if (x0_3 != 0)
                {
                    if ((x0_3 & 0x80000000) == 0)
                    {
                        goto label_1bdac;
                    }
                    goto label_1bda4;
                }
            }
            if ((((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)) && x25_1 >= x26_1) || (x22_1 != 0 && x0_1 != 0)))
            {
                if (x26_1 >= x25_1)
                {
                label_1bdac:
                    *arg2 = x24;
                    break;
                }
            label_1bda4:
                x20_1 = &x24[1];
                x8_2 = *x20_1;
                if (x8_2 == 0)
                {
                    goto label_1bdac;
                }
            label_1bd04:
                x24 = x8_2;
            }
        }
    }
    return x20_1;
}

void sub_1bde4(int64_t* arg1, void* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    if (arg2 != arg1)
    {
        int64_t* x20_1 = arg1;
        arg1 = arg1[4];
        if (arg1 != x20_1)
        {
            int64_t* x8_1 = *(arg2 + 0x20);
            if (arg2 == x8_1)
            {
                *(*x8_1 + 0x18)(x8_1, x20_1);
                *(**(arg2 + 0x20) + 0x20)();
                *(arg2 + 0x20) = x20_1[4];
                x20_1[4] = x20_1;
            }
            else
            {
                x20_1[4] = x8_1;
                *(arg2 + 0x20) = arg1;
            }
        }
        else
        {
            if (*(arg2 + 0x20) == arg2)
            {
                *(*arg1 + 0x18)();
                *(*x20_1[4] + 0x20)();
                x20_1[4] = 0;
                *(**(arg2 + 0x20) + 0x18)();
                *(**(arg2 + 0x20) + 0x20)();
                *(arg2 + 0x20) = 0;
                x20_1[4] = x20_1;
                void* var_60;
                *(var_60 + 0x18)(&var_60, arg2);
                *(var_60 + 0x20)(&var_60);
            }
            else
            {
                *(*arg1 + 0x18)();
                *(*x20_1[4] + 0x20)();
                x20_1[4] = *(arg2 + 0x20);
            }
            *(arg2 + 0x20) = arg2;
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::__vector_base_common<true>::__throw_length_error() __noreturn
{
    sub_13574();
    /* no return */
}

void std::__ndk1::__basic_string_common<true>::__throw_out_of_range() __noreturn
{
    sub_1bf74();
    /* no return */
}

void sub_1bf74() __noreturn
{
    char* thrown_exception = __cxa_allocate_exception(0x10);
    sub_1bfc4(thrown_exception);
    __cxa_throw(thrown_exception, _typeinfo_for_std::out_of_range, std::out_of_range::~out_of_range);
    /* no return */
}

int64_t sub_1bfc4(char* arg1)
{
    int64_t x0 = std::logic_error::logic_error(arg1);
    *arg1 = (_vtable_for_std::out_of_range + 0x10);
    return x0;
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, char* arg2)
{
    int64_t* i = *(arg1 + 8);
    int64_t* i_1;
    if (i == 0)
    {
    label_1c0e4:
        i_1 = (arg1 + 8);
    }
    else
    {
        uint64_t x8_1 = *arg2;
        i_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x22_1;
        if (temp0_1 == 0)
        {
            x22_1 = (x8_1 >> 1);
        }
        else
        {
            x22_1 = *(arg2 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg2 + 0x10);
        }
        else
        {
            x21_1 = &arg2[1];
        }
        do
        {
            uint64_t x9_2 = i[4];
            uint64_t x24_1;
            if ((x9_2 & 1) == 0)
            {
                x24_1 = (x9_2 >> 1);
            }
            else
            {
                x24_1 = i[5];
            }
            uint64_t x2_1;
            if (x22_1 < x24_1)
            {
                x2_1 = x22_1;
            }
            else
            {
                x2_1 = x24_1;
            }
            int32_t x0_1;
            if (x2_1 != 0)
            {
                void* x0;
                if ((x9_2 & 1) != 0)
                {
                    x0 = i[6];
                }
                else
                {
                    x0 = (i + 0x21);
                }
                x0_1 = memcmp(x0, x21_1, x2_1);
            }
            if ((x2_1 == 0 || (x2_1 != 0 && x0_1 == 0)))
            {
                int32_t x8_4;
                if (x22_1 < x24_1)
                {
                    x8_4 = 1;
                }
                else
                {
                    x8_4 = 0;
                }
                if (x24_1 >= x22_1)
                {
                    x0_1 = x8_4;
                }
                else
                {
                    x0_1 = -1;
                }
            }
            int32_t x8_5;
            if (x0_1 < 0)
            {
                x8_5 = 1;
            }
            else
            {
                x8_5 = 0;
            }
            if (x0_1 >= 0)
            {
                i_1 = i;
            }
            i = i[x8_5];
        } while (i != 0);
        if (i_1 == (arg1 + 8))
        {
            goto label_1c0e4;
        }
        uint64_t x9_3 = i_1[4];
        uint64_t x23;
        if ((x9_3 & 1) == 0)
        {
            x23 = (x9_3 >> 1);
        }
        else
        {
            x23 = i_1[5];
        }
        uint64_t x2_2;
        if (x23 < x22_1)
        {
            x2_2 = x23;
        }
        else
        {
            x2_2 = x22_1;
        }
        int32_t x0_3;
        if (x2_2 != 0)
        {
            void* x1_1;
            if ((x9_3 & 1) != 0)
            {
                x1_1 = i_1[6];
            }
            else
            {
                x1_1 = (i_1 + 0x21);
            }
            x0_3 = memcmp(x21_1, x1_1, x2_2);
        }
        if (((x2_2 == 0 || (x2_2 != 0 && x0_3 == 0)) && x22_1 < x23))
        {
            goto label_1c0e4;
        }
        if (((x2_2 != 0 && x0_3 != 0) && (x0_3 & 0x80000000) != 0))
        {
            goto label_1c0e4;
        }
    }
    return i_1;
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parser(void* arg1, int128_t* arg2, void* arg3, char arg4)
{
    int64_t* x8 = *(arg3 + 0x20);
    if (x8 == 0)
    {
        *(arg1 + 0x20) = 0;
    }
    else if (arg3 == x8)
    {
        *(arg1 + 0x20) = arg1;
        *(**(arg3 + 0x20) + 0x18)();
    }
    else
    {
        int64_t x0_1;
        int128_t v0;
        x0_1 = *(*x8 + 0x10)(x8);
        *(arg1 + 0x20) = x0_1;
    }
    *(arg1 + 0x30) = 0;
    *(arg1 + 0x38) = *arg2;
    *arg2 = 0;
    *(arg2 + 8) = 0;
    *(arg1 + 0x48) = 0xffffffff;
    *(arg1 + 0x4c) = 0;
    __builtin_memset((arg1 + 0x50), 0, 0x48);
    *(arg1 + 0x98) = &data_2ddb7;
    __builtin_memset((arg1 + 0xa0), 0, 0x18);
    char* x9_3 = *localeconv();
    char x9_4;
    if (x9_3 == 0)
    {
        x9_4 = 0x2e;
    }
    else
    {
        x9_4 = *x9_3;
    }
    *(arg1 + 0xb8) = x9_4;
    *(arg1 + 0xc0) = (arg4 & 1);
    int32_t x0_5 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
    *(arg1 + 0x30) = x0_5;
    return x0_5;
}

void sub_1c1e0(int64_t arg1, void* arg2 @ x19) __noreturn
{
    if ((*(arg2 + 0x80) & 1) != 0)
    {
        operator delete(*(arg2 + 0x90));
    }
    void* x0_1 = *(arg2 + 0x68);
    if (x0_1 != 0)
    {
        *(arg2 + 0x70) = x0_1;
        operator delete(x0_1);
    }
    int64_t* x21 = *(arg2 + 0x40);
    if (x21 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x21[1]);
            i = __stlxr((x9_1 - 1), &x21[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x21 + 0x10)(x21);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    int64_t* x0_4 = *(arg2 + 0x20);
    int64_t x8_4;
    if (arg2 == x0_4)
    {
        x8_4 = *(*x0_4 + 0x20);
    }
    if ((arg2 != x0_4 && x0_4 != 0))
    {
        x8_4 = *(*x0_4 + 0x28);
    }
    if ((arg2 == x0_4 || (arg2 != x0_4 && x0_4 != 0)))
    {
        x8_4();
    }
    sub_1353c(_Unwind_Resume(arg1));
    /* no return */
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int32_t arg2, char* arg3)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t* x0 = *(arg1 + 0x20);
    int64_t x0_10;
    char var_1a8;
    void* var_198;
    int128_t var_190;
    char var_148;
    void* var_138;
    char* var_100;
    if (x0 == 0)
    {
        char x9_1 = *(arg1 + 0xc0);
        var_100 = arg3;
        int128_t s;
        __builtin_memset(&s, 0, 0x11);
        int64_t var_f8_1 = {0};
        char var_d7_1 = x9_1;
        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(arg1);
        if ((arg2 & 1) != 0)
        {
            int32_t x0_4 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
            *(arg1 + 0x30) = x0_4;
            if (x0_4 != 0xf)
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x21_1 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t v0_1 = *(arg1 + 0x50);
                int64_t x8_3 = *(arg1 + 0x60);
                char var_1c0_1 = 0;
                int64_t var_1b8_1 = 0;
                void* var_1b0_1 = nullptr;
                __builtin_strcpy(&var_1c0_1, "\nvalue");
                int64_t var_180_1 = x8_3;
                var_190 = v0_1;
                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[6]);
                nlohmann::detail::parse_error::create(0x65, &var_190, &var_1a8);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(&var_100, x21_1, &var_148);
                void* var_170_1 = (_vtable_for_nlohmann::detail::exception + 0x10);
                std::runtime_error::~runtime_error();
                std::exception::~exception();
                if ((var_1a8 & 1) != 0)
                {
                    operator delete(var_198);
                }
                if ((((var_1a8 & 1) != 0 && (var_1c0_1 & 1) != 0) || ((var_1a8 & 1) == 0 && (var_1c0_1 & 1) != 0)))
                {
                    operator delete(var_1b0_1);
                    if ((var_148 & 1) != 0)
                    {
                        goto label_1c3cc;
                    }
                }
                if (((((var_1a8 & 1) != 0 && (var_1c0_1 & 1) == 0) || ((var_1a8 & 1) == 0 && (var_1c0_1 & 1) == 0)) && (var_148 & 1) != 0))
                {
                label_1c3cc:
                    operator delete(var_138);
                }
            }
        }
        char var_d8;
        if (var_d8 != 0)
        {
            char x1_2 = *arg3;
            *arg3 = 8;
            char var_1f0_1 = x1_2;
            int64_t x8_9 = *(arg3 + 8);
            *(arg3 + 8) = 0;
            int64_t var_1e8 = x8_9;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_1e8);
        }
        x0_10 = var_f8_1;
        if (x0_10 != 0)
        {
            var_f8_1 = x0_10;
            x0_10 = operator delete(x0_10);
        }
    }
    else
    {
        void var_130;
        int64_t* var_110_1;
        if (arg1 == x0)
        {
            var_110_1 = &var_130;
            *(*x0 + 0x18)();
        }
        else
        {
            var_110_1 = *(*x0 + 0x10)();
        }
        *(arg1 + 0xc0);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(&var_100, arg3, &var_130);
        int64_t x8_13;
        if (&var_130 == var_110_1)
        {
            x8_13 = *(*var_110_1 + 0x20);
        }
        if ((&var_130 != var_110_1 && var_110_1 != 0))
        {
            x8_13 = *(*var_110_1 + 0x28);
        }
        if ((&var_130 == var_110_1 || (&var_130 != var_110_1 && var_110_1 != 0)))
        {
            x8_13();
        }
        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(arg1);
        if ((arg2 & 1) != 0)
        {
            int32_t x0_15 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
            *(arg1 + 0x30) = x0_15;
            if (x0_15 != 0xf)
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x21_2 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t v0_2 = *(arg1 + 0x50);
                int64_t x8_15 = *(arg1 + 0x60);
                char var_1c0_2 = 0;
                int64_t var_1b8_2 = 0;
                void* var_1b0_2 = nullptr;
                __builtin_strcpy(&var_1c0_2, "\nvalue");
                int64_t var_180_2 = x8_15;
                var_190 = v0_2;
                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[6]);
                nlohmann::detail::parse_error::create(0x65, &var_190, &var_1a8);
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(&var_100, x21_2, &var_148);
                void* var_170_2 = (_vtable_for_nlohmann::detail::exception + 0x10);
                std::runtime_error::~runtime_error();
                std::exception::~exception();
                if ((var_1a8 & 1) != 0)
                {
                    operator delete(var_198);
                }
                if ((((var_1a8 & 1) != 0 && (var_1c0_2 & 1) != 0) || ((var_1a8 & 1) == 0 && (var_1c0_2 & 1) != 0)))
                {
                    operator delete(var_1b0_2);
                    if ((var_148 & 1) != 0)
                    {
                        goto label_1c554;
                    }
                }
                if (((((var_1a8 & 1) != 0 && (var_1c0_2 & 1) == 0) || ((var_1a8 & 1) == 0 && (var_1c0_2 & 1) == 0)) && (var_148 & 1) != 0))
                {
                label_1c554:
                    operator delete(var_138);
                }
            }
        }
        char var_a8;
        int64_t* x0_20;
        uint32_t x8_22;
        if (var_a8 == 0)
        {
            x8_22 = *arg3;
            if (x8_22 == 8)
            {
                *arg3 = 0;
                uint8_t var_1e0_1 = x8_22;
                int64_t x8_23 = *(arg3 + 8);
                int64_t var_1d8;
                x0_20 = &var_1d8;
                *(arg3 + 8) = 0;
                var_1d8 = x8_23;
            }
        }
        else
        {
            char x1_6 = *arg3;
            *arg3 = 8;
            char var_1d0_1 = x1_6;
            int64_t x8_21 = *(arg3 + 8);
            int64_t var_1c8;
            x0_20 = &var_1c8;
            *(arg3 + 8) = 0;
            var_1c8 = x8_21;
        }
        if ((var_a8 != 0 || (var_a8 == 0 && x8_22 == 8)))
        {
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(x0_20);
        }
        x0_10 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser();
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_10;
}

char* nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(char* arg1)
{
    char* s = operator new(0x18);
    __builtin_memset(s, 0, 0x18);
    size_t x0_1 = strlen(arg1);
    if (x0_1 < -0x10)
    {
        int64_t x0_7 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        operator delete(s);
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_10;
        int32_t x1_2;
        int128_t* x8_3;
        x0_10 = _Unwind_Resume(x0_7);
        /* tailcall */
        return nlohmann::detail::exception::name(x0_10, x1_2, x8_3);
    }
    void* x22_1;
    if (x0_1 >= 0x17)
    {
        uint64_t x23_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_3 = operator new(x23_1);
        x22_1 = x0_3;
        *(s + 8) = x0_1;
        *(s + 0x10) = x0_3;
        *s = (x23_1 | 1);
    }
    else
    {
        *s = (x0_1 << 1);
        x22_1 = &s[1];
    }
    if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
    {
        memcpy(x22_1, arg1, x0_1);
    }
    *(x22_1 + x0_1) = 0;
    return s;
}

int128_t* nlohmann::detail::exception::name(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int32_t arg2, int128_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >("[json.exception.", arg1);
    char var_88;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_88, ".");
    void* x8_1 = s[1];
    int128_t var_70 = *s;
    __builtin_memset(s, 0, 0x18);
    std::__ndk1::to_string(arg2);
    char var_a0;
    void* var_90;
    uint64_t x1_1;
    if ((var_a0 & 1) == 0)
    {
        x1_1 = (&var_a0 | 1);
    }
    else
    {
        x1_1 = var_90;
    }
    int128_t* s_1;
    int128_t v0_1;
    s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_70, x1_1);
    void* x8_3 = s_1[1];
    int128_t var_50 = *s_1;
    __builtin_memset(s_1, 0, 0x18);
    int128_t* s_2;
    int128_t v0_2;
    s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_50, &data_2d09e);
    arg3[1] = s_2[1];
    *arg3 = *s_2;
    __builtin_memset(s_2, 0, 0x18);
    if ((var_50 & 1) != 0)
    {
        s_2 = operator delete(x8_3);
    }
    if ((((var_50 & 1) != 0 && (var_a0 & 1) != 0) || ((var_50 & 1) == 0 && (var_a0 & 1) != 0)))
    {
        s_2 = operator delete(var_90);
        if ((var_70 & 1) != 0)
        {
            goto label_1c9d8;
        }
    }
    if ((((((((var_50 & 1) != 0 && (var_a0 & 1) == 0) || ((var_50 & 1) == 0 && (var_a0 & 1) == 0)) && (var_70 & 1) == 0) || ((var_50 & 1) != 0 && (var_a0 & 1) != 0)) || ((var_50 & 1) == 0 && (var_a0 & 1) != 0)) && (var_88 & 1) != 0))
    {
        goto label_1c98c;
    }
    if (((((var_50 & 1) != 0 && (var_a0 & 1) == 0) || ((var_50 & 1) == 0 && (var_a0 & 1) == 0)) && (var_70 & 1) != 0))
    {
    label_1c9d8:
        s_2 = operator delete(x8_1);
        if ((var_88 & 1) != 0)
        {
        label_1c98c:
            void* var_78;
            s_2 = operator delete(var_78);
        }
    }
    if (((((((((var_50 & 1) != 0 && (var_a0 & 1) == 0) || ((var_50 & 1) == 0 && (var_a0 & 1) == 0)) && (var_70 & 1) == 0) || ((var_50 & 1) != 0 && (var_a0 & 1) != 0)) || ((var_50 & 1) == 0 && (var_a0 & 1) != 0)) && (var_88 & 1) == 0) || ((((var_50 & 1) != 0 && (var_a0 & 1) == 0) || ((var_50 & 1) == 0 && (var_a0 & 1) == 0)) && (var_70 & 1) != 0)))
    {
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return s_2;
    }
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, int64_t arg2, size_t arg3)
{
    uint64_t x8 = *arg1;
    uint64_t x22;
    int64_t x26;
    if ((x8 & 1) != 0)
    {
        x22 = *(arg1 + 8);
        x26 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    else
    {
        x22 = (x8 >> 1);
        x26 = 0x16;
    }
    void* x8_4;
    if (((x26 - x22) >= arg3 && arg3 != 0))
    {
        void* x23_2;
        if ((x8 & 1) != 0)
        {
            x23_2 = *(arg1 + 0x10);
        }
        else
        {
            x23_2 = &arg1[1];
        }
        memcpy((x23_2 + x22), arg2, arg3);
        int64_t x8_3 = (x22 + arg3);
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = x8_3;
            x8_4 = (x23_2 + x8_3);
        }
        else
        {
            *arg1 = (x8_3 << 1);
            x8_4 = (x23_2 + x8_3);
        }
    }
    if ((x26 - x22) < arg3)
    {
        int64_t x27_1 = (x22 + arg3);
        if ((-0x12 - x26) < (x27_1 - x26))
        {
            char* x0_8;
            char* x1_3;
            char* x8_7;
            x0_8 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(x0_8, x1_3, x8_7);
        }
        void* x23_1;
        if ((x8 & 1) != 0)
        {
            x23_1 = *(arg1 + 0x10);
        }
        else
        {
            x23_1 = &arg1[1];
        }
        uint64_t x24_1;
        if (x26 > 0x7fffffffffffffe6)
        {
            x24_1 = -0x11;
        }
        else
        {
            int64_t x8_1 = (x26 << 1);
            int64_t x8_2;
            if (x27_1 < x8_1)
            {
                x8_2 = x8_1;
            }
            else
            {
                x8_2 = x27_1;
            }
            if (x8_2 >= 0x17)
            {
                x24_1 = ((x8_2 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x24_1 = 0x17;
            }
        }
        void* x0_2 = operator new(x24_1);
        if (x22 != 0)
        {
            memcpy(x0_2, x23_1, x22);
        }
        memcpy((x0_2 + x22), arg2, arg3);
        if (x26 != 0x16)
        {
            operator delete(x23_1);
        }
        *arg1 = (x24_1 | 1);
        x8_4 = (x0_2 + x27_1);
        *(arg1 + 8) = x27_1;
        *(arg1 + 0x10) = x0_2;
    }
    if (((x26 - x22) < arg3 || ((x26 - x22) >= arg3 && arg3 != 0)))
    {
        *x8_4 = 0;
    }
    return arg1;
}

int64_t std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(char* arg1, char* arg2, char* arg3 @ x8)
{
    __builtin_memset(arg3, 0, 0x18);
    size_t x0 = strlen(arg1);
    uint64_t x26 = *arg2;
    uint64_t x22;
    if ((x26 & 1) == 0)
    {
        x22 = (x26 >> 1);
    }
    else
    {
        x22 = *(arg2 + 8);
    }
    int64_t x8_1 = (x22 + x0);
    if (x8_1 < -0x10)
    {
        int64_t x0_7 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        if ((*arg3 & 1) != 0)
        {
            operator delete(*(arg3 + 0x10));
        }
        /* tailcall */
        return nlohmann::detail::other_error::~other_error(_Unwind_Resume(x0_7));
    }
    void* x24_1;
    if (x8_1 > 0x16)
    {
        uint64_t x25_1 = ((x8_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_5 = operator new(x25_1);
        x24_1 = x0_5;
        *(arg3 + 8) = x0;
        *(arg3 + 0x10) = x0_5;
        *arg3 = (x25_1 | 1);
    }
    else
    {
        char* x24 = arg3;
        *x24 = (x0 << 1);
        x24_1 = &x24[1];
    }
    if (((x8_1 > 0x16 && x0 != 0) || (x8_1 <= 0x16 && x0 != 0)))
    {
        memcpy(x24_1, arg1, x0);
    }
    *(x24_1 + x0) = 0;
    void* x1_1;
    if ((x26 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg3, x1_1);
}

int64_t nlohmann::detail::other_error::~other_error(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t nlohmann::detail::exception::what(int64_t arg1)
{
    /* tailcall */
    return std::runtime_error::what();
}

int64_t nlohmann::detail::exception::~exception(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter, std::__ndk1::allocator<nlohmann::detail::input_buffer_adapter> >::~__shared_ptr_emplace()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter, std::__ndk1::allocator<nlohmann::detail::input_buffer_adapter> >::~__shared_ptr_emplace(void* arg1)
{
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter, std::__ndk1::allocator<nlohmann::detail::input_buffer_adapter> >::__on_zero_shared(void* arg1)
{
    /* jump -> *(*(arg1 + 0x18) + 8) */
}

int64_t std::__ndk1::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter, std::__ndk1::allocator<nlohmann::detail::input_buffer_adapter> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

uint64_t nlohmann::detail::input_buffer_adapter::get_character(void* arg1)
{
    char* x8 = *(arg1 + 8);
    if (x8 >= *(arg1 + 0x10))
    {
        return 0xffffffff;
    }
    *(arg1 + 8) = &x8[1];
    return *x8;
}

int64_t nlohmann::detail::input_buffer_adapter::~input_buffer_adapter(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t nlohmann::detail::input_adapter_protocol::~input_adapter_protocol() __pure
{
    return;
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan(void* arg1)
{
    char const* const x8_11;
    if (*(arg1 + 0x18) != 0)
    {
    label_1ce94:
        while (true)
        {
            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            uint64_t x8_8 = (*(arg1 + 0x10) + 1);
            if (x8_8 <= 0x7e)
            {
                switch (x8_8)
                {
                    case 0:
                    case 1:
                    {
                        return 0xf;
                        break;
                    }
                    case 0xa:
                    case 0xb:
                    case 0xe:
                    case 0x21:
                    {
                        continue;
                    }
                    case 0x23:
                    {
                        /* tailcall */
                        return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string();
                    }
                    case 0x2d:
                    {
                        return 0xd;
                        break;
                    }
                    case 0x2e:
                    case 0x31:
                    case 0x32:
                    case 0x33:
                    case 0x34:
                    case 0x35:
                    case 0x36:
                    case 0x37:
                    case 0x38:
                    case 0x39:
                    case 0x3a:
                    {
                        /* tailcall */
                        return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_number();
                    }
                    case 0x3b:
                    {
                        return 0xc;
                        break;
                    }
                    case 0x5c:
                    {
                        return 8;
                        break;
                    }
                    case 0x5e:
                    {
                        return 0xa;
                        break;
                    }
                    case 0x67:
                    {
                        if ((((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x61 && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x6c) && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x73) && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x65))
                        {
                            return 2;
                        }
                        break;
                    }
                    case 0x6f:
                    {
                        if (((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x75 && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x6c) && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x6c))
                        {
                            return 3;
                        }
                        break;
                    }
                    case 0x75:
                    {
                        if (((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x72 && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x75) && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0x65))
                        {
                            return 1;
                        }
                        break;
                    }
                    case 0x7c:
                    {
                        return 9;
                        break;
                    }
                    case 0x7e:
                    {
                        return 0xb;
                        break;
                    }
                }
            }
            x8_11 = "invalid literal";
            break;
        }
    }
    else
    {
        if (nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() != 0xef)
        {
            void* x8_2 = (arg1 + 0x20);
            int64_t x9_1 = *x8_2;
            int64_t x10_1 = *(x8_2 - 8);
            *(x8_2 - 0xc) = 1;
            *(x8_2 - 8) = (x10_1 - 1);
            if (x9_1 == 0)
            {
                x8_2 = (arg1 + 0x28);
                x9_1 = *x8_2;
            }
            *x8_2 = (x9_1 - 1);
            if (*(arg1 + 0x10) != 0xffffffff)
            {
                *(arg1 + 0x38) = (*(arg1 + 0x38) - 1);
            }
            goto label_1ce94;
        }
        if ((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0xbb && nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() == 0xbf))
        {
            goto label_1ce94;
        }
        x8_11 = "invalid BOM; must be 0xEF 0xBB 0…";
    }
    *(arg1 + 0x60) = x8_11;
    return 0xe;
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get(int64_t* arg1)
{
    uint32_t x8 = *(arg1 + 0x14);
    int128_t v1;
    v1 = 1;
    *v1[8] = 1;
    *(arg1 + 0x18) = (*(arg1 + 0x18) + v1);
    int32_t x20;
    void* x25_1;
    if (x8 == 0)
    {
        x25_1 = &arg1[2];
        int32_t x0_2 = ***arg1();
        x20 = x0_2;
        *x25_1 = x0_2;
    }
    else
    {
        x25_1 = &arg1[2];
        x20 = *x25_1;
        *(x25_1 + 4) = 0;
    }
    int32_t x0_7;
    if (((x8 == 0 && x20 != 0xffffffff) || (x8 != 0 && x20 != 0xffffffff)))
    {
        char* x9_1 = arg1[7];
        int64_t x8_1 = arg1[8];
        if (x9_1 < x8_1)
        {
            *x9_1 = x20;
            arg1[7] = (arg1[7] + 1);
        }
        else
        {
            void* x21_1 = arg1[6];
            void* x22_1 = (x9_1 - x21_1);
            if ((x22_1 + 1) < 0)
            {
                /* tailcall */
                return nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string(std::__ndk1::__vector_base_common<true>::__throw_length_error());
            }
            void* x8_4 = (x8_1 - x21_1);
            uint64_t x24_1;
            if (x8_4 > 0x3ffffffffffffffe)
            {
                x24_1 = 0x7fffffffffffffff;
            }
            else
            {
                uint64_t x8_5 = (x8_4 << 1);
                if (x8_5 < (x22_1 + 1))
                {
                    x24_1 = (x22_1 + 1);
                }
                else
                {
                    x24_1 = x8_5;
                }
            }
            struct Elf64_Header* const x23_1;
            if ((x8_4 > 0x3ffffffffffffffe || (x8_4 <= 0x3ffffffffffffffe && x24_1 != 0)))
            {
                x23_1 = operator new(x24_1);
            }
            if ((x8_4 <= 0x3ffffffffffffffe && x24_1 == 0))
            {
                x23_1 = nullptr;
            }
            void* x26_1 = (x23_1 + x22_1);
            *x26_1 = x20;
            if (x22_1 >= 1)
            {
                memcpy(x23_1, x21_1, x22_1);
            }
            arg1[6] = x23_1;
            arg1[7] = (x26_1 + 1);
            arg1[8] = (x23_1 + x24_1);
            if (x21_1 != 0)
            {
                operator delete(x21_1);
            }
        }
        x0_7 = *x25_1;
        if (x0_7 == 0xa)
        {
            int64_t x8_9 = (arg1[5] + 1);
            arg1[4] = 0;
            arg1[5] = x8_9;
        }
    }
    if (((x8 == 0 && x20 == 0xffffffff) || (x8 != 0 && x20 == 0xffffffff)))
    {
        x0_7 = -1;
    }
    return x0_7;
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_string(void* arg1)
{
    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset();
    int64_t x0_34;
    while (true)
    {
        uint64_t x8_1 = (nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() + 1);
        char const* const x8_2;
        if (x8_1 > 0xf5)
        {
        label_1d454:
            x8_2 = "invalid string: ill-formed UTF-8…";
        label_1d5d8:
            *(arg1 + 0x60) = x8_2;
            x0_34 = 0xe;
            break;
        }
        x8_2 = "invalid string: missing closing …";
        switch (x8_1)
        {
            case 0:
            {
                goto label_1d5d8;
            }
            case 1:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 2:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 3:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 4:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 5:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 6:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 7:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 8:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 9:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0xa:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0xb:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0xc:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0xd:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0xe:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0xf:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x10:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x11:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x12:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x13:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x14:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x15:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x16:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x17:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x18:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x19:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x1a:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x1b:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x1c:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x1d:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x1e:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x1f:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x20:
            {
                x8_2 = "invalid string: control characte…";
                goto label_1d5d8;
            }
            case 0x21:
            case 0x22:
            case 0x24:
            case 0x25:
            case 0x26:
            case 0x27:
            case 0x28:
            case 0x29:
            case 0x2a:
            case 0x2b:
            case 0x2c:
            case 0x2d:
            case 0x2e:
            case 0x2f:
            case 0x30:
            case 0x31:
            case 0x32:
            case 0x33:
            case 0x34:
            case 0x35:
            case 0x36:
            case 0x37:
            case 0x38:
            case 0x39:
            case 0x3a:
            case 0x3b:
            case 0x3c:
            case 0x3d:
            case 0x3e:
            case 0x3f:
            case 0x40:
            case 0x41:
            case 0x42:
            case 0x43:
            case 0x44:
            case 0x45:
            case 0x46:
            case 0x47:
            case 0x48:
            case 0x49:
            case 0x4a:
            case 0x4b:
            case 0x4c:
            case 0x4d:
            case 0x4e:
            case 0x4f:
            case 0x50:
            case 0x51:
            case 0x52:
            case 0x53:
            case 0x54:
            case 0x55:
            case 0x56:
            case 0x57:
            case 0x58:
            case 0x59:
            case 0x5a:
            case 0x5b:
            case 0x5c:
            case 0x5e:
            case 0x5f:
            case 0x60:
            case 0x61:
            case 0x62:
            case 0x63:
            case 0x64:
            case 0x65:
            case 0x66:
            case 0x67:
            case 0x68:
            case 0x69:
            case 0x6a:
            case 0x6b:
            case 0x6c:
            case 0x6d:
            case 0x6e:
            case 0x6f:
            case 0x70:
            case 0x71:
            case 0x72:
            case 0x73:
            case 0x74:
            case 0x75:
            case 0x76:
            case 0x77:
            case 0x78:
            case 0x79:
            case 0x7a:
            case 0x7b:
            case 0x7c:
            case 0x7d:
            case 0x7e:
            case 0x7f:
            case 0x80:
            {
                *(arg1 + 0x10);
            label_1d168:
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                continue;
            }
            case 0x23:
            {
                x0_34 = 4;
                break;
                break;
            }
            case 0x5d:
            {
                uint64_t x9_2 = (nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x22);
                x8_2 = "invalid string: forbidden charac…";
                if (x9_2 > 0x53)
                {
                    goto label_1d5d8;
                }
                if (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((x9_2 == 1 || x9_2 == 2) || x9_2 == 3) || x9_2 == 4) || x9_2 == 5) || x9_2 == 6) || x9_2 == 7) || x9_2 == 8) || x9_2 == 9) || x9_2 == 0xa) || x9_2 == 0xb) || x9_2 == 0xc) || x9_2 == 0xe) || x9_2 == 0xf) || x9_2 == 0x10) || x9_2 == 0x11) || x9_2 == 0x12) || x9_2 == 0x13) || x9_2 == 0x14) || x9_2 == 0x15) || x9_2 == 0x16) || x9_2 == 0x17) || x9_2 == 0x18) || x9_2 == 0x19) || x9_2 == 0x1a) || x9_2 == 0x1b) || x9_2 == 0x1c) || x9_2 == 0x1d) || x9_2 == 0x1e) || x9_2 == 0x1f) || x9_2 == 0x20) || x9_2 == 0x21) || x9_2 == 0x22) || x9_2 == 0x23) || x9_2 == 0x24) || x9_2 == 0x25) || x9_2 == 0x26) || x9_2 == 0x27) || x9_2 == 0x28) || x9_2 == 0x29) || x9_2 == 0x2a) || x9_2 == 0x2b) || x9_2 == 0x2c) || x9_2 == 0x2d) || x9_2 == 0x2e) || x9_2 == 0x2f) || x9_2 == 0x30) || x9_2 == 0x31) || x9_2 == 0x32) || x9_2 == 0x33) || x9_2 == 0x34) || x9_2 == 0x35) || x9_2 == 0x36) || x9_2 == 0x37) || x9_2 == 0x38) || x9_2 == 0x39) || x9_2 == 0x3b) || x9_2 == 0x3c) || x9_2 == 0x3d) || x9_2 == 0x3e) || x9_2 == 0x3f) || x9_2 == 0x41) || x9_2 == 0x42) || x9_2 == 0x43) || x9_2 == 0x45) || x9_2 == 0x46) || x9_2 == 0x47) || x9_2 == 0x48) || x9_2 == 0x49) || x9_2 == 0x4a) || x9_2 == 0x4b) || x9_2 == 0x4d) || x9_2 == 0x4e) || x9_2 == 0x4f) || x9_2 == 0x51))
                {
                    goto label_1d5d8;
                }
                if (x9_2 == 0x52)
                {
                    goto label_1d168;
                }
                if (x9_2 == 0x53)
                {
                    int32_t x0_20 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint();
                    if (x0_20 != 0xffffffff)
                    {
                        int32_t x8_10 = (x0_20 & 0xfffffc00);
                        int32_t x21_1 = x0_20;
                        int32_t x0_22;
                        int32_t x0_24;
                        int32_t x0_26;
                        if (x8_10 == 0xd800)
                        {
                            x0_22 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                            if (x0_22 == 0x5c)
                            {
                                x0_24 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                                if (x0_24 == 0x75)
                                {
                                    x0_26 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint();
                                    if ((x0_26 != 0xffffffff && (x0_26 >> 0xa) == 0x37))
                                    {
                                        x21_1 = ((x0_26 + (x21_1 << 0xa)) - 0x35fdc00);
                                        if (x21_1 <= 0x7f)
                                        {
                                            goto label_1d3e0;
                                        }
                                    }
                                }
                            }
                            if (((x0_22 != 0x5c || (x0_22 == 0x5c && x0_24 != 0x75)) || (((x0_22 == 0x5c && x0_24 == 0x75) && x0_26 != 0xffffffff) && (x0_26 >> 0xa) != 0x37)))
                            {
                                x8_2 = "invalid string: surrogate U+DC00…";
                                goto label_1d5d8;
                            }
                        }
                        else
                        {
                            if (x8_10 == 0xdc00)
                            {
                                x8_2 = "invalid string: surrogate U+DC00…";
                                goto label_1d5d8;
                            }
                            if (x21_1 <= 0x7f)
                            {
                            label_1d3e0:
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                                continue;
                            }
                        }
                        if ((((((x8_10 == 0xd800 && x0_22 == 0x5c) && x0_24 == 0x75) && x0_26 != 0xffffffff) && (x0_26 >> 0xa) == 0x37) || x8_10 != 0xd800))
                        {
                            if (x21_1 <= 0x7ff)
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                                goto label_1d168;
                            }
                            if (x21_1 >= 0x10000)
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                            }
                            else
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                            }
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                            continue;
                        }
                    }
                    x8_2 = "invalid string: '\u' must be fol…";
                    goto label_1d5d8;
                }
                break;
            }
            case 0x81:
            case 0x82:
            case 0x83:
            case 0x84:
            case 0x85:
            case 0x86:
            case 0x87:
            case 0x88:
            case 0x89:
            case 0x8a:
            case 0x8b:
            case 0x8c:
            case 0x8d:
            case 0x8e:
            case 0x8f:
            case 0x90:
            case 0x91:
            case 0x92:
            case 0x93:
            case 0x94:
            case 0x95:
            case 0x96:
            case 0x97:
            case 0x98:
            case 0x99:
            case 0x9a:
            case 0x9b:
            case 0x9c:
            case 0x9d:
            case 0x9e:
            case 0x9f:
            case 0xa0:
            case 0xa1:
            case 0xa2:
            case 0xa3:
            case 0xa4:
            case 0xa5:
            case 0xa6:
            case 0xa7:
            case 0xa8:
            case 0xa9:
            case 0xaa:
            case 0xab:
            case 0xac:
            case 0xad:
            case 0xae:
            case 0xaf:
            case 0xb0:
            case 0xb1:
            case 0xb2:
            case 0xb3:
            case 0xb4:
            case 0xb5:
            case 0xb6:
            case 0xb7:
            case 0xb8:
            case 0xb9:
            case 0xba:
            case 0xbb:
            case 0xbc:
            case 0xbd:
            case 0xbe:
            case 0xbf:
            case 0xc0:
            case 0xc1:
            case 0xc2:
            {
                goto label_1d454;
            }
            case 0xc3:
            case 0xc4:
            case 0xc5:
            case 0xc6:
            case 0xc7:
            case 0xc8:
            case 0xc9:
            case 0xca:
            case 0xcb:
            case 0xcc:
            case 0xcd:
            case 0xce:
            case 0xcf:
            case 0xd0:
            case 0xd1:
            case 0xd2:
            case 0xd3:
            case 0xd4:
            case 0xd5:
            case 0xd6:
            case 0xd7:
            case 0xd8:
            case 0xd9:
            case 0xda:
            case 0xdb:
            case 0xdc:
            case 0xdd:
            case 0xde:
            case 0xdf:
            case 0xe0:
            {
                *(arg1 + 0x10);
            label_1d1cc:
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffc0) != 0x80)
                {
                    goto label_1d454;
                }
                goto label_1d168;
            }
            case 0xe1:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffe0) != 0xa0)
                {
                    goto label_1d454;
                }
                goto label_1d1cc;
            }
            case 0xe2:
            case 0xe3:
            case 0xe4:
            case 0xe5:
            case 0xe6:
            case 0xe7:
            case 0xe8:
            case 0xe9:
            case 0xea:
            case 0xeb:
            case 0xec:
            case 0xed:
            case 0xef:
            case 0xf0:
            {
                *(arg1 + 0x10);
            label_1d1ac:
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffc0) != 0x80)
                {
                    goto label_1d454;
                }
                goto label_1d1cc;
            }
            case 0xee:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffe0) != 0x80)
                {
                    goto label_1d454;
                }
                goto label_1d1cc;
            }
            case 0xf1:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) - 0x90) > 0x2f)
                {
                    goto label_1d454;
                }
                goto label_1d1ac;
            }
            case 0xf2:
            case 0xf3:
            case 0xf4:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xffffffc0) != 0x80)
                {
                    goto label_1d454;
                }
                goto label_1d1ac;
            }
            case 0xf5:
            {
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
                if ((*(arg1 + 0x10) & 0xfffffff0) != 0x80)
                {
                    goto label_1d454;
                }
                goto label_1d1ac;
            }
        }
    }
    return x0_34;
}

int64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan_number(void* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset();
    int32_t x1 = *(arg1 + 0x10);
    int32_t x0_3;
    char x20_1;
    int32_t x22_1;
    if ((x1 - 0x31) < 9)
    {
        x20_1 = (arg1 + 0x48);
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x20_1);
        x22_1 = 5;
    }
    else if (x1 == 0x30)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
        x22_1 = 5;
    }
    else
    {
        if (x1 == 0x2d)
        {
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
        }
        x0_3 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
        if ((x0_3 - 0x31) < 9)
        {
            *(arg1 + 0x10);
            x20_1 = (arg1 + 0x48);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x20_1);
            x22_1 = 6;
        }
    }
    char x0_8;
    char x0_20;
    int64_t x0_30;
    char const* const x8_21;
    if (((x1 - 0x31) < 9 || (((x1 - 0x31) >= 9 && x1 != 0x30) && (x0_3 - 0x31) < 9)))
    {
        int32_t x0_7;
        while (true)
        {
            x0_7 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            if ((x0_7 - 0x30) >= 0xa)
            {
                break;
            }
            *(arg1 + 0x10);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x20_1);
        }
        if (x0_7 != 0x2e)
        {
            if (x0_7 == 0x45)
            {
            label_1d6e8:
                *(arg1 + 0x10);
                x0_8 = x20_1;
                goto label_1d6f0;
            }
            if (x0_7 == 0x65)
            {
                goto label_1d6e8;
            }
            goto label_1d754;
        }
        *(arg1 + 0x80);
        x0_20 = x20_1;
    label_1d7fc:
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x0_20);
        if ((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x30) > 9)
        {
            x8_21 = "invalid number; expected digit a…";
            goto label_1d990;
        }
        *(arg1 + 0x10);
        x20_1 = (arg1 + 0x48);
        int32_t x0_25;
        while (true)
        {
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x20_1);
            x0_25 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            if ((x0_25 - 0x30) >= 0xa)
            {
                break;
            }
            *(arg1 + 0x10);
        }
        if (x0_25 == 0x45)
        {
            goto label_1d6e8;
        }
        if (x0_25 == 0x65)
        {
            goto label_1d6e8;
        }
    label_1d74c:
        x22_1 = 7;
    label_1d754:
        void* x8_7 = (arg1 + 0x20);
        int64_t x9_1 = *x8_7;
        int64_t x10_1 = *(x8_7 - 8);
        *(x8_7 - 0xc) = 1;
        *(x8_7 - 8) = (x10_1 - 1);
        if (x9_1 == 0)
        {
            x8_7 = (arg1 + 0x28);
            x9_1 = *x8_7;
        }
        *x8_7 = (x9_1 - 1);
        if (*(arg1 + 0x10) != 0xffffffff)
        {
            *(arg1 + 0x38) = (*(arg1 + 0x38) - 1);
        }
        char* var_40 = nullptr;
        int32_t* x0_17 = __errno();
        *x0_17 = 0;
        void* x22_3;
        if (x22_1 == 5)
        {
            x22_3 = (arg1 + 0x48);
            char* x0_19;
            if ((*x22_3 & 1) != 0)
            {
                x0_19 = *(arg1 + 0x58);
            }
            else
            {
                x0_19 = (x22_3 + 1);
            }
            int64_t x0_31 = strtoull(x0_19, &var_40, 0xa);
            if (*x0_17 == 0)
            {
                *(arg1 + 0x70) = x0_31;
                x0_30 = 5;
            }
        }
        if (x22_1 == 6)
        {
            x22_3 = (arg1 + 0x48);
            void* x0_18;
            if ((*x22_3 & 1) != 0)
            {
                x0_18 = *(arg1 + 0x58);
            }
            else
            {
                x0_18 = (x22_3 + 1);
            }
            int64_t x0_29 = strtoll(x0_18, &var_40, 0xa);
            if (*x0_17 == 0)
            {
                *(arg1 + 0x68) = x0_29;
                x0_30 = 6;
            }
        }
        if (((x22_1 == 5 && *x0_17 != 0) || (x22_1 == 6 && *x0_17 != 0)))
        {
            if ((*(arg1 + 0x48) & 1) == 0)
            {
                goto label_1d8d8;
            }
            goto label_1d8e0;
        }
        if ((x22_1 != 5 && x22_1 != 6))
        {
            x22_3 = (arg1 + 0x48);
            char* x0_32;
            if ((*(arg1 + 0x48) & 1) != 0)
            {
            label_1d8e0:
                x0_32 = *(arg1 + 0x58);
                goto label_1d8ec;
            }
        label_1d8d8:
            x0_32 = (x22_3 + 1);
        label_1d8ec:
            x0_30 = 7;
            *(arg1 + 0x78) = strtod(x0_32, &var_40);
        }
    }
    if ((x1 - 0x31) >= 9)
    {
        if (((x1 != 0x30 && (x0_3 - 0x31) >= 9) && x0_3 == 0x30))
        {
            *(arg1 + 0x10);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
            x22_1 = 6;
        }
        if ((x1 == 0x30 || ((x1 != 0x30 && (x0_3 - 0x31) >= 9) && x0_3 == 0x30)))
        {
            int32_t x0_35 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            if ((x0_35 != 0x65 && x0_35 != 0x45))
            {
                if (x0_35 != 0x2e)
                {
                    goto label_1d754;
                }
                *(arg1 + 0x80);
                x0_20 = (arg1 + 0x48);
                goto label_1d7fc;
            }
            *(arg1 + 0x10);
            x0_8 = (arg1 + 0x48);
        label_1d6f0:
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x0_8);
            int32_t x0_10 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
            char x0_11;
            if ((x0_10 - 0x30) < 0xa)
            {
                *(arg1 + 0x10);
                x0_11 = (arg1 + 0x48);
            label_1d710:
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(x0_11);
                if ((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x30) <= 9)
                {
                    int32_t i;
                    do
                    {
                        *(arg1 + 0x10);
                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                        i = (nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x30);
                    } while (i < 0xa);
                }
                goto label_1d74c;
            }
            if (x0_10 == 0x2d)
            {
            label_1d864:
                *(arg1 + 0x10);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back((arg1 + 0x48));
                if ((nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get() - 0x30) >= 0xa)
                {
                    x8_21 = "invalid number; expected digit a…";
                    goto label_1d990;
                }
                *(arg1 + 0x10);
                x0_11 = (arg1 + 0x48);
                goto label_1d710;
            }
            if (x0_10 == 0x2b)
            {
                goto label_1d864;
            }
            x8_21 = "invalid number; expected '+', '-…";
            goto label_1d990;
        }
        if (((x1 != 0x30 && (x0_3 - 0x31) >= 9) && x0_3 != 0x30))
        {
            x8_21 = "invalid number; expected digit a…";
        label_1d990:
            *(arg1 + 0x60) = x8_21;
            x0_30 = 0xe;
        }
    }
    if ((((x1 - 0x31) < 9 || (((x1 - 0x31) >= 9 && x1 != 0x30) && (x0_3 - 0x31) < 9)) || ((((x1 - 0x31) >= 9 && x1 != 0x30) && (x0_3 - 0x31) >= 9) && x0_3 != 0x30)))
    {
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_30;
    }
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::reset(char* arg1)
{
    char* x19 = arg1;
    if ((arg1[0x48] & 1) != 0)
    {
        **(x19 + 0x58) = 0;
        *(x19 + 0x50) = 0;
    }
    else
    {
        *(x19 + 0x48) = 0;
    }
    char* x20 = *(x19 + 0x30);
    int64_t x8_2 = *(x19 + 0x40);
    char x22 = *(x19 + 0x10);
    *(x19 + 0x38) = x20;
    void* x8_3 = (x8_2 - x20);
    if (x8_2 > x20)
    {
        *x20 = x22;
        *(x19 + 0x38) = (*(x19 + 0x38) + 1);
    }
    else
    {
        int64_t x21_1;
        if (x8_3 > 0x3ffffffffffffffe)
        {
            x21_1 = 0x7fffffffffffffff;
        }
        else
        {
            int64_t x8_6 = (x8_3 << 1);
            if (x8_6 != 0)
            {
                x21_1 = x8_6;
            }
            else
            {
                x21_1 = 1;
            }
        }
        arg1 = operator new(x21_1);
        *arg1 = x22;
        *(x19 + 0x30) = arg1;
        *(x19 + 0x38) = &arg1[1];
        *(x19 + 0x40) = &arg1[x21_1];
        if (x20 != 0)
        {
            /* tailcall */
            return operator delete(x20);
        }
    }
}

void sub_1da80(void* arg1) __noreturn
{
    sub_1353c(arg1);
    /* no return */
}

uint64_t nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_codepoint(void* arg1)
{
    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
    int32_t x8 = *(arg1 + 0x10);
    int32_t x20 = (x8 - 0x30);
    if (x20 >= 0xa)
    {
        if ((x8 - 0x41) <= 5)
        {
            x20 = (x8 - 0x37);
        }
        if (((x8 - 0x41) > 5 && (x8 - 0x61) <= 5))
        {
            x20 = (x8 - 0x57);
        }
    }
    uint64_t x0_3;
    if ((((x20 >= 0xa && (x8 - 0x41) <= 5) || ((x20 >= 0xa && (x8 - 0x41) > 5) && (x8 - 0x61) <= 5)) || x20 < 0xa))
    {
        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
        int32_t x8_1 = *(arg1 + 0x10);
        int32_t x21_1 = (x8_1 - 0x30);
        if (x21_1 >= 0xa)
        {
            if ((x8_1 - 0x41) < 6)
            {
                x21_1 = (x8_1 - 0x37);
            }
            else
            {
                if ((x8_1 - 0x61) > 5)
                {
                    goto label_1db98;
                }
                x21_1 = (x8_1 - 0x57);
            }
        }
        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
        int32_t x8_2 = *(arg1 + 0x10);
        int32_t x22_1 = (x8_2 - 0x30);
        if (x22_1 >= 0xa)
        {
            if ((x8_2 - 0x41) < 6)
            {
                x22_1 = (x8_2 - 0x37);
            }
            else
            {
                if ((x8_2 - 0x61) > 5)
                {
                    goto label_1db98;
                }
                x22_1 = (x8_2 - 0x57);
            }
        }
        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get();
        int32_t x8_3 = *(arg1 + 0x10);
        int32_t x9_7 = (x8_3 - 0x30);
        if (x9_7 >= 0xa)
        {
            if ((x8_3 - 0x41) < 6)
            {
                x9_7 = (x8_3 - 0x37);
            }
            else
            {
                if ((x8_3 - 0x61) > 5)
                {
                    goto label_1db98;
                }
                x9_7 = (x8_3 - 0x57);
            }
        }
        x0_3 = (x9_7 + (((x20 << 0xc) + (x21_1 << 8)) + (x22_1 << 4)));
    }
    if (((x20 >= 0xa && (x8 - 0x41) > 5) && (x8 - 0x61) > 5))
    {
    label_1db98:
        x0_3 = 0xffffffff;
    }
    return x0_3;
}

void std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(char* arg1, char arg2)
{
    uint64_t x8 = *arg1;
    size_t x21;
    uint64_t x25;
    if ((x8 & 1) == 0)
    {
        x25 = (x8 >> 1);
        x21 = 0x16;
    }
    else
    {
        x25 = *(arg1 + 8);
        x21 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    void* x23;
    if ((((x8 & 1) == 0 && x25 != 0x16) || ((x8 & 1) != 0 && x25 != x21)))
    {
        if ((x8 & 1) == 0)
        {
            *arg1 = ((x25 << 1) + 2);
            x23 = &arg1[1];
        label_1dcac:
            void* x8_8 = (x23 + x25);
            *x8_8 = arg2;
            *(x8_8 + 1) = 0;
            return;
        }
        x23 = *(arg1 + 0x10);
    label_1dca8:
        *(arg1 + 8) = (x25 + 1);
        goto label_1dcac;
    }
    if ((((x8 & 1) == 0 && x25 == 0x16) || ((x8 & 1) != 0 && x25 == x21)))
    {
        if (x21 == -0x11)
        {
            int64_t* x0_4;
            int64_t x1_1;
            void* x2_2;
            char x3;
            x0_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(x0_4, x1_1, x2_2, x3);
        }
        void* x22_1;
        if ((x8 & 1) != 0)
        {
            x22_1 = *(arg1 + 0x10);
        }
        else
        {
            x22_1 = &arg1[1];
        }
        uint64_t x24_1;
        if (x21 > 0x7fffffffffffffe6)
        {
            x24_1 = -0x11;
        }
        else
        {
            int64_t x9_3 = (x21 << 1);
            int64_t x8_4;
            if ((x21 + 1) < x9_3)
            {
                x8_4 = x9_3;
            }
            else
            {
                x8_4 = (x21 + 1);
            }
            if (x8_4 >= 0x17)
            {
                x24_1 = ((x8_4 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x24_1 = 0x17;
            }
        }
        void* x0_1 = operator new(x24_1);
        x23 = x0_1;
        memcpy(x0_1, x22_1, x21);
        if (x21 != 0x16)
        {
            operator delete(x22_1);
        }
        *(arg1 + 0x10) = x23;
        *arg1 = (x24_1 | 1);
        goto label_1dca8;
    }
}

int64_t* nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::json_sax_dom_callback_parser(int64_t* arg1, int64_t arg2, void* arg3, char arg4)
{
    *arg1 = arg2;
    arg1[0xb] = 0;
    *(arg1 + 8) = {0};
    __builtin_memset(&arg1[3], 0, 0x40);
    int64_t* x0 = *(arg3 + 0x20);
    if (x0 == 0)
    {
        arg1[0x10] = 0;
    }
    else if (arg3 == x0)
    {
        arg1[0x10] = &arg1[0xc];
        x0 = *(**(arg3 + 0x20) + 0x18)();
    }
    else
    {
        x0 = *(*x0 + 0x10)();
        arg1[0x10] = x0;
    }
    arg1[0x14] = 0;
    int64_t x8_5 = arg1[5];
    arg1[0x12] = (arg4 & 1);
    arg1[0x13] = 8;
    if (x8_5 == (arg1[6] << 6))
    {
        if ((x8_5 + 1) < 0)
        {
            int64_t x0_4 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            arg1[0x13];
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg1[0x14]);
            int64_t* x0_6 = arg1[0x10];
            int64_t x8_11;
            if (&arg1[0xc] == x0_6)
            {
                x8_11 = *(*x0_6 + 0x20);
                goto label_1de5c;
            }
            void* x0_7;
            if (x0_6 != 0)
            {
                void* x0_10;
                while (true)
                {
                    x8_11 = *(*x0_6 + 0x28);
                label_1de5c:
                    x8_11(x0_6);
                    x0_7 = arg1[7];
                    void* x0_9;
                    if (x0_7 != 0)
                    {
                    label_1de78:
                        operator delete(x0_7);
                        x0_9 = arg1[4];
                    }
                    else
                    {
                    label_1de3c:
                        x0_9 = arg1[4];
                    }
                    if (((x0_7 != 0 && x0_9 == 0) || (x0_7 == 0 && x0_9 == 0)))
                    {
                        x0_10 = arg1[1];
                        if (x0_10 != 0)
                        {
                            break;
                        }
                    }
                    if (((x0_7 != 0 && x0_9 != 0) || (x0_7 == 0 && x0_9 != 0)))
                    {
                        operator delete(x0_9);
                        x0_10 = arg1[1];
                        if (x0_10 != 0)
                        {
                            break;
                        }
                    }
                    x0_6 = _Unwind_Resume(x0_4);
                }
                arg1[2] = x0_10;
                operator delete(x0_10);
                uint64_t x0_12;
                uint64_t x1_3;
                x0_12 = _Unwind_Resume(x0_4);
                /* tailcall */
                return nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(x0_12, x1_3);
            }
            x0_7 = arg1[7];
            if (x0_7 != 0)
            {
                goto label_1de78;
            }
            goto label_1de3c;
        }
        x0 = std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&arg1[4]);
        x8_5 = arg1[5];
    }
    int64_t* x10_1 = arg1[4];
    arg1[5] = (x8_5 + 1);
    int64_t x9_4 = ((x8_5 >> 3) & 0x1ffffffffffffff8);
    *(x10_1 + x9_4) = (*(x10_1 + x9_4) | (1 << x8_5));
    return x0;
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(void* arg1, uint64_t arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    void* s_1;
    __builtin_memset(&s_1, 0, 0x18);
    while (true)
    {
        uint64_t x8_2 = (*(arg1 + 0x30) - 1);
        int64_t s;
        void* var_108;
        char var_100;
        void* var_f0;
        int128_t var_e0;
        void* var_c0;
        char var_98;
        void* s_4;
        int32_t x0_46;
        int32_t x19_1;
        if (x8_2 > 0xd)
        {
        label_1e250:
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_1 = *(arg1 + 0x50);
            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
            int128_t v0_1 = *(arg1 + 0x50);
            int64_t x8_19 = *(arg1 + 0x60);
            __builtin_memset(&s, 0, 0x18);
            __builtin_strcpy(&s, "\nvalue");
            int64_t var_d0_1 = x8_19;
            var_e0 = v0_1;
            nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->type);
            nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
            x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_1, &var_98);
        label_1e364:
            x19_1 = x0_46;
            var_c0 = (_vtable_for_nlohmann::detail::exception + 0x10);
            std::runtime_error::~runtime_error();
            std::exception::~exception();
        label_1e384:
            if ((var_100 & 1) != 0)
            {
            label_1e6f4:
                operator delete(var_f0);
                if ((s & 1) != 0)
                {
                label_1e704:
                    operator delete(var_108);
                    if ((var_98 & 1) != 0)
                    {
                        goto label_1e714;
                    }
                    goto label_1e398;
                }
                goto label_1e394;
            }
        label_1e38c:
            if ((s & 1) != 0)
            {
                goto label_1e704;
            }
        label_1e394:
            if ((var_98 & 1) != 0)
            {
            label_1e714:
                void* var_88;
                operator delete(var_88);
                s_4 = s_1;
                if (s_4 != 0)
                {
                    goto label_1e3a0;
                }
            label_1e3ac:
                if (*(x23 + 0x28) != x8)
                {
                    break;
                }
                return (x19_1 & 1);
            }
        label_1e398:
            s_4 = s_1;
            if (s_4 != 0)
            {
                goto label_1e3a0;
            }
            goto label_1e3ac;
        }
        int64_t var_78_1;
        int64_t var_70;
        int32_t x0_10;
        switch (x8_2)
        {
            case 0:
            {
                var_c0 = 1;
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg2, &var_c0);
            label_1e05c:
                int64_t x8_5 = var_78_1;
                if (x8_5 == 0)
                {
                label_1e240:
                    x19_1 = 1;
                    s_4 = s_1;
                    if (s_4 != 0)
                    {
                        goto label_1e3a0;
                    }
                }
                else
                {
                    int32_t x0_21;
                    int32_t x0_25;
                    int32_t x0_28;
                    int32_t x0_30;
                    bool cond:8_1;
                    do
                    {
                        int32_t x0_23;
                        if ((*(s_1 + (((x8_5 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_5 - 1))) == 0)
                        {
                            x0_25 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            *(arg1 + 0x30) = x0_25;
                            if (x0_25 == 0xd)
                            {
                                x0_28 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                *(arg1 + 0x30) = x0_28;
                                if (x0_28 != 4)
                                {
                                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_5 = *(arg1 + 0x50);
                                    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                    int128_t v0_5 = *(arg1 + 0x50);
                                    int64_t x8_28 = *(arg1 + 0x60);
                                    s = 0;
                                    int64_t var_110_1 = 0;
                                    s = 0x14;
                                    var_108 = nullptr;
                                    int64_t var_d0_5 = x8_28;
                                    var_e0 = v0_5;
                                    __builtin_strncpy(&*s[1], "object key", 0xb);
                                    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->ident.file_class);
                                    nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                                    x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_5, &var_98);
                                    break;
                                }
                                x0_30 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg2);
                                if ((x0_30 & 1) == 0)
                                {
                                    break;
                                }
                                int32_t x0_32 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                *(arg1 + 0x30) = x0_32;
                                if (x0_32 != 0xc)
                                {
                                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_6 = *(arg1 + 0x50);
                                    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                    int128_t v0_6 = *(arg1 + 0x50);
                                    int64_t x8_29 = *(arg1 + 0x60);
                                    __builtin_memset(&s, 0, 0x18);
                                    __builtin_strncpy(&s, " object separator", 0x12);
                                    int64_t var_d0_6 = x8_29;
                                    var_e0 = v0_6;
                                    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[3]);
                                    nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                                    x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_6, &var_98);
                                    break;
                                }
                                *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                break;
                            }
                            if (x0_25 != 0xb)
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_4 = *(arg1 + 0x50);
                                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                int128_t v0_4 = *(arg1 + 0x50);
                                int64_t x8_27 = *(arg1 + 0x60);
                                s = 0xc;
                                __builtin_strncpy(&*s[1], "object", 0x17);
                                int64_t var_d0_4 = x8_27;
                                var_e0 = v0_4;
                                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[2]);
                                nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                                x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_4, &var_98);
                                break;
                            }
                            x0_23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object();
                        }
                        else
                        {
                            x0_21 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            *(arg1 + 0x30) = x0_21;
                            if (x0_21 == 0xd)
                            {
                                *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                break;
                            }
                            if (x0_21 != 0xa)
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_3 = *(arg1 + 0x50);
                                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                int128_t v0_3 = *(arg1 + 0x50);
                                int64_t x8_26 = *(arg1 + 0x60);
                                __builtin_memset(&s, 0, 0x18);
                                __builtin_strcpy(&s, "\narray");
                                int64_t var_d0_3 = x8_26;
                                var_e0 = v0_3;
                                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[1]);
                                nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                                x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_3, &var_98);
                                break;
                            }
                            x0_23 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array();
                        }
                        if ((x0_23 & 1) == 0)
                        {
                            break;
                        }
                        x8_5 = (var_78_1 - 1);
                        cond:8_1 = var_78_1 != 1;
                        var_78_1 = x8_5;
                    } while (cond:8_1);
                    if (((((*(s_1 + (((x8_5 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_5 - 1))) == 0 && x0_25 == 0xd) && x0_28 == 4) && (x0_30 & 1) == 0))
                    {
                        goto label_1e3dc;
                    }
                    if ((((*(s_1 + (((x8_5 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_5 - 1))) == 0 && x0_25 == 0xd) && x0_28 != 4))
                    {
                        goto label_1e364;
                    }
                    if (!(((*(s_1 + (((x8_5 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_5 - 1))) != 0 && x0_21 == 0xd)))
                    {
                        goto label_1e240;
                    }
                    continue;
                }
                goto label_1e3ac;
            }
            case 1:
            {
                var_c0 = 0;
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg2, &var_c0);
                goto label_1e05c;
            }
            case 2:
            {
                var_c0 = nullptr;
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(arg2, &var_c0);
                goto label_1e05c;
            }
            case 3:
            {
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg2, (arg1 + 0x80));
                goto label_1e05c;
            }
            case 4:
            {
                var_c0 = *(arg1 + 0xa8);
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(arg2, &var_c0);
                goto label_1e05c;
            }
            case 5:
            {
                var_c0 = *(arg1 + 0xa0);
                nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(arg2, &var_c0);
                goto label_1e05c;
            }
            case 6:
            {
                void* v0 = *(arg1 + 0xb0);
                double temp0_1 = vabs_f64(v0);
                (temp0_1 - inf.0);
                if (temp0_1 < inf.0)
                {
                label_1dff8:
                    var_c0 = v0;
                    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(arg2, &var_c0);
                    goto label_1e05c;
                }
                if (temp0_1 > inf.0)
                {
                    goto label_1dff8;
                }
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x20_1 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t* s_2;
                int128_t v0_7;
                s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s, nullptr, "number overflow parsing '");
                var_f0 = s_2[1];
                var_100 = *s_2;
                __builtin_memset(s_2, 0, 0x18);
                int128_t* s_3;
                int128_t v0_8;
                s_3 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_100, "'");
                void* x8_31 = s_3[1];
                var_e0 = *s_3;
                __builtin_memset(s_3, 0, 0x18);
                nlohmann::detail::out_of_range::create(0x196, &var_e0);
                x19_1 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x20_1, &var_98);
                var_c0 = (_vtable_for_nlohmann::detail::exception + 0x10);
                std::runtime_error::~runtime_error();
                std::exception::~exception();
                if ((var_e0 & 1) == 0)
                {
                    goto label_1e384;
                }
                operator delete(x8_31);
                if ((var_100 & 1) != 0)
                {
                    goto label_1e6f4;
                }
                goto label_1e38c;
            }
            case 7:
            {
                if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(arg2) & 1) == 0)
                {
                    goto label_1e3dc;
                }
                int32_t x0_18 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                *(arg1 + 0x30) = x0_18;
                if (x0_18 == 0xa)
                {
                    x0_10 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array();
                    goto label_1e058;
                }
                int64_t x8_12 = var_78_1;
                if ((x8_12 == (var_70 << 6) && (x8_12 + 1) >= 0))
                {
                    std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&s_1);
                    x8_12 = var_78_1;
                }
                if ((x8_12 != (var_70 << 6) || (x8_12 == (var_70 << 6) && (x8_12 + 1) >= 0)))
                {
                    var_78_1 = (x8_12 + 1);
                    void* s_5 = s_1;
                    int64_t x10_5 = ((x8_12 >> 3) & 0x1ffffffffffffff8);
                    *(s_5 + x10_5) = (*(s_5 + x10_5) | (1 << x8_12));
                    continue;
                }
            label_1e848:
                std::__ndk1::__vector_base_common<true>::__throw_length_error();
                break;
                break;
            }
            case 8:
            {
                if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_object(arg2) & 1) != 0)
                {
                    int32_t x0_8 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                    *(arg1 + 0x30) = x0_8;
                    if (x0_8 == 0xb)
                    {
                        x0_10 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object();
                    label_1e058:
                        if ((x0_10 & 1) != 0)
                        {
                            goto label_1e05c;
                        }
                        goto label_1e3dc;
                    }
                    if (x0_8 != 4)
                    {
                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_7 = *(arg1 + 0x50);
                        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                        int128_t v0_9 = *(arg1 + 0x50);
                        int64_t x8_37 = *(arg1 + 0x60);
                        s = 0;
                        int64_t var_110_2 = 0;
                        s = 0x14;
                        var_108 = nullptr;
                        int64_t var_d0_8 = x8_37;
                        var_e0 = v0_9;
                        __builtin_strncpy(&*s[1], "object key", 0xb);
                        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->ident.file_class);
                        nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                        x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_7, &var_98);
                        goto label_1e364;
                    }
                    if ((nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg2) & 1) == 0)
                    {
                        goto label_1e3dc;
                    }
                    int32_t x0_38 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                    *(arg1 + 0x30) = x0_38;
                    if (x0_38 != 0xc)
                    {
                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_8 = *(arg1 + 0x50);
                        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                        int128_t v0_10 = *(arg1 + 0x50);
                        int64_t x8_38 = *(arg1 + 0x60);
                        __builtin_memset(&s, 0, 0x18);
                        __builtin_strncpy(&s, " object separator", 0x12);
                        int64_t var_d0_9 = x8_38;
                        var_e0 = v0_10;
                        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[3]);
                        nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                        x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_8, &var_98);
                        goto label_1e364;
                    }
                    int64_t x8_9 = var_78_1;
                    if (x8_9 == (var_70 << 6))
                    {
                        if ((x8_9 + 1) < 0)
                        {
                            std::__ndk1::__vector_base_common<true>::__throw_length_error();
                        }
                        else
                        {
                            std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&s_1);
                            x8_9 = var_78_1;
                        }
                    }
                    if ((x8_9 != (var_70 << 6) || (x8_9 == (var_70 << 6) && (x8_9 + 1) >= 0)))
                    {
                        var_78_1 = (x8_9 + 1);
                        void* s_6 = s_1;
                        int64_t x10_7 = ((x8_9 >> 3) & 0x1ffffffffffffff8);
                        *(s_6 + x10_7) = (*(s_6 + x10_7) & !((1 << x8_9)));
                        *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                        continue;
                    }
                    goto label_1e848;
                }
            label_1e3dc:
                x19_1 = 0;
                s_4 = s_1;
                if (s_4 != 0)
                {
                label_1e3a0:
                    operator delete(s_4);
                }
                goto label_1e3ac;
            }
            case 9:
            case 0xa:
            case 0xb:
            case 0xc:
            {
                goto label_1e250;
            }
            case 0xd:
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_2 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t v0_2 = *(arg1 + 0x50);
                int64_t x8_20 = *(arg1 + 0x60);
                __builtin_memset(&s, 0, 0x18);
                __builtin_strcpy(&s, "\nvalue");
                int64_t var_d0_2 = x8_20;
                var_e0 = v0_2;
                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, nullptr);
                nlohmann::detail::parse_error::create(0x65, &var_e0, &var_100);
                x0_46 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_2, &var_98);
                goto label_1e364;
            }
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(void* arg1, int64_t arg2, int64_t arg3, void* arg4)
{
    uint32_t x8 = *(arg1 + 0x90);
    *(arg1 + 0x58) = 1;
    if (x8 != 0)
    {
        int64_t x8_2 = (*(arg4 + 8) * 0x51eb851f);
        uint64_t x8_6 = ((((x8_2 >> 0x25) + (x8_2 >> 0x3f)) % 0x64) - 1);
        if (x8_6 <= 4)
        {
            void* var_18 = arg4;
            struct typeinfo_for_nlohmann::detail::other_error* const tinfo;
            void* thrown_exception;
            switch (x8_6)
            {
                case 0:
                {
                    void* thrown_exception_1 = __cxa_allocate_exception(0x28);
                    thrown_exception = thrown_exception_1;
                    nlohmann::detail::parse_error::parse_error(thrown_exception_1);
                    tinfo = _typeinfo_for_nlohmann::detail::parse_error;
                    break;
                }
                case 1:
                {
                    void* thrown_exception_2 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_2;
                    nlohmann::detail::invalid_iterator::invalid_iterator(thrown_exception_2);
                    tinfo = _typeinfo_for_nlohmann::detail::invalid_iterator;
                    break;
                }
                case 2:
                {
                    void* thrown_exception_3 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_3;
                    nlohmann::detail::type_error::type_error(thrown_exception_3);
                    tinfo = _typeinfo_for_nlohmann::detail::type_error;
                    break;
                }
                case 3:
                {
                    void* thrown_exception_4 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_4;
                    nlohmann::detail::out_of_range::out_of_range(thrown_exception_4);
                    tinfo = _typeinfo_for_nlohmann::detail::out_of_range;
                    break;
                }
                case 4:
                {
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* thrown_exception_5 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_5;
                    nlohmann::detail::other_error::other_error(thrown_exception_5);
                    tinfo = _typeinfo_for_nlohmann::detail::other_error;
                    break;
                }
            }
            __cxa_throw(thrown_exception, tinfo, nlohmann::detail::exception::~exception);
            /* no return */
        }
    }
    return 0;
}

void nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string(void* arg1, char* arg2 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    __builtin_memset(arg2, 0, 0x18);
    char* x22 = *(arg1 + 0x30);
    int64_t x23 = *(arg1 + 0x38);
    if (x22 != x23)
    {
        do
        {
            if (*x22 > 0x1f)
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(arg2);
            }
            else
            {
                char var_50_1 = 0;
                int64_t var_58 = 0;
                snprintf();
                strlen(&var_58);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg2, &var_58);
            }
            x22 = &x22[1];
        } while (x23 != x22);
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t nlohmann::detail::parse_error::create(int32_t arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg2, char* arg3, int64_t* arg4 @ x8)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t var_100 = 0;
    int64_t var_f8 = 0;
    var_100 = 0x16;
    void* var_f0 = nullptr;
    __builtin_strcpy(&*var_100[1], "parse_error");
    nlohmann::detail::exception::name(&var_100, arg1);
    char var_e8;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_e8, "parse error");
    void* x8_1 = s[1];
    int128_t var_d0 = *s;
    __builtin_memset(s, 0, 0x18);
    nlohmann::detail::parse_error::position_string(arg2);
    char var_118;
    uint64_t var_108;
    uint64_t x1_1;
    if ((var_118 & 1) == 0)
    {
        x1_1 = (&var_118 | 1);
    }
    else
    {
        x1_1 = var_108;
    }
    int128_t* s_1;
    int128_t v0_1;
    s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_d0, x1_1);
    void* x8_3 = s_1[1];
    int128_t var_b0 = *s_1;
    __builtin_memset(s_1, 0, 0x18);
    int128_t* s_2;
    int128_t v0_2;
    s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_b0, ": ");
    void* x8_4 = s_2[1];
    int128_t var_90 = *s_2;
    __builtin_memset(s_2, 0, 0x18);
    *(arg3 + 8);
    void* x1_2;
    if ((*arg3 & 1) != 0)
    {
        x1_2 = *(arg3 + 0x10);
    }
    else
    {
        x1_2 = &arg3[1];
    }
    int128_t* s_3;
    int128_t v0_3;
    s_3 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_90, x1_2);
    void* x8_6 = s_3[1];
    int128_t var_70 = *s_3;
    __builtin_memset(s_3, 0, 0x18);
    if ((var_90 & 1) != 0)
    {
        operator delete(x8_4);
    }
    if ((((var_90 & 1) != 0 && (var_b0 & 1) != 0) || ((var_90 & 1) == 0 && (var_b0 & 1) != 0)))
    {
        operator delete(x8_3);
        if ((var_118 & 1) != 0)
        {
            goto label_1ee5c;
        }
    }
    if (((var_118 & 1) != 0 && (((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0))))
    {
    label_1ee5c:
        operator delete(var_108);
        if ((var_d0 & 1) != 0)
        {
        label_1ee6c:
            operator delete(x8_1);
            if ((var_e8 & 1) != 0)
            {
                goto label_1ee7c;
            }
        }
    }
    if (((((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) != 0) && (var_d0 & 1) == 0) || (((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) == 0) || ((var_90 & 1) != 0 && (var_b0 & 1) != 0)) || ((var_90 & 1) == 0 && (var_b0 & 1) != 0)) && (var_d0 & 1) == 0)) && (var_e8 & 1) == 0) || (((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) != 0) && (var_d0 & 1) != 0)))
    {
        if ((var_100 & 1) != 0)
        {
            goto label_1edac;
        }
    label_1edb8:
        int64_t x21_1 = *arg2;
        arg4[1] = arg1;
        *arg4 = (_vtable_for_nlohmann::detail::exception + 0x10);
        int64_t x0_8 = std::runtime_error::runtime_error(&arg4[2]);
        uint32_t x8_14 = var_70;
        arg4[4] = x21_1;
        *arg4 = (_vtable_for_nlohmann::detail::parse_error + 0x10);
        if ((x8_14 & 1) != 0)
        {
            x0_8 = operator delete(x8_6);
        }
        if (*(x23 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_8;
    }
    if ((((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) != 0) && (var_d0 & 1) == 0) || (((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) == 0) || ((var_90 & 1) != 0 && (var_b0 & 1) != 0)) || ((var_90 & 1) == 0 && (var_b0 & 1) != 0)) && (var_d0 & 1) == 0)) && (var_e8 & 1) != 0))
    {
    label_1ee7c:
        void* var_d8;
        operator delete(var_d8);
        if ((var_100 & 1) != 0)
        {
        label_1edac:
            operator delete(var_f0);
        }
        goto label_1edb8;
    }
    if ((((((((var_90 & 1) != 0 && (var_b0 & 1) == 0) || ((var_90 & 1) == 0 && (var_b0 & 1) == 0)) && (var_118 & 1) == 0) || ((var_90 & 1) != 0 && (var_b0 & 1) != 0)) || ((var_90 & 1) == 0 && (var_b0 & 1) != 0)) && (var_d0 & 1) != 0))
    {
        goto label_1ee6c;
    }
}

int64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(void* arg1, int32_t arg2, char* arg3, char* arg4 @ x8)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    __builtin_memset(arg4, 0, 0x18);
    *arg4 = 0x1a;
    __builtin_strncpy(&arg4[1], "syntax error ", 0xe);
    uint64_t x8_1 = *arg3;
    uint64_t x8_2;
    if ((x8_1 & 1) == 0)
    {
        x8_2 = (x8_1 >> 1);
    }
    else
    {
        x8_2 = *(arg3 + 8);
    }
    int64_t s_1;
    int128_t var_70;
    if (x8_2 != 0)
    {
        std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >("while parsing ", arg3);
        int128_t* s_2;
        int128_t v0_1;
        s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_1, &data_2ddb6);
        void* x8_3 = s_2[1];
        var_70 = *s_2;
        __builtin_memset(s_2, 0, 0x18);
        uint64_t x1_1;
        if ((var_70 & 1) == 0)
        {
            x1_1 = (&var_70 | 1);
        }
        else
        {
            x1_1 = x8_3;
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, x1_1);
        if ((var_70 & 1) != 0)
        {
            operator delete(x8_3);
        }
        void* var_80;
        if ((s_1 & 1) != 0)
        {
            operator delete(var_80);
        }
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, &data_2ddb5);
    int64_t x8_7 = *(arg1 + 0x30);
    int64_t x0_17;
    void* x0_24;
    if (x8_7 == 0xe)
    {
        char* x22_1 = *(arg1 + 0x98);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        size_t x0_6 = strlen(x22_1);
        if (x0_6 < -0x10)
        {
            goto label_1f4c0;
        }
        void* var_b8_1;
        void* x24_1;
        if (x0_6 >= 0x17)
        {
            uint64_t x25_1 = ((x0_6 + 0x10) & 0xfffffffffffffff0);
            void* x0_10 = operator new(x25_1);
            x24_1 = x0_10;
            size_t var_c0_1 = x0_6;
            var_b8_1 = x0_10;
            s = (x25_1 | 1);
        }
        else
        {
            x24_1 = (&s | 1);
            s = (x0_6 << 1);
        }
        if ((x0_6 >= 0x17 || (x0_6 < 0x17 && x0_6 != 0)))
        {
            memcpy(x24_1, x22_1, x0_6);
        }
        *(x24_1 + x0_6) = 0;
        int128_t* s_3;
        int128_t v0_2;
        s_3 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s, "; last read: '");
        void* x8_12 = s_3[1];
        int128_t var_b0 = *s_3;
        __builtin_memset(s_3, 0, 0x18);
        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
        char var_e0;
        uint64_t var_d0;
        uint64_t x1_3;
        if ((var_e0 & 1) == 0)
        {
            x1_3 = (&var_e0 | 1);
        }
        else
        {
            x1_3 = var_d0;
        }
        int128_t* s_4;
        int128_t v0_3;
        s_4 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_b0, x1_3);
        void* x8_14 = s_4[1];
        s_1 = *s_4;
        __builtin_memset(s_4, 0, 0x18);
        int128_t* s_5;
        int128_t v0_4;
        s_5 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_1, "'");
        uint64_t x8_15 = s_5[1];
        var_70 = *s_5;
        __builtin_memset(s_5, 0, 0x18);
        uint64_t x1_4;
        if ((var_70 & 1) == 0)
        {
            x1_4 = (&var_70 | 1);
        }
        else
        {
            x1_4 = x8_15;
        }
        x0_17 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, x1_4);
        if ((var_70 & 1) != 0)
        {
            x0_17 = operator delete(x8_15);
        }
        if ((((var_70 & 1) != 0 && (s_1 & 1) != 0) || ((var_70 & 1) == 0 && (s_1 & 1) != 0)))
        {
            x0_17 = operator delete(x8_14);
            if ((var_e0 & 1) != 0)
            {
                goto label_1f350;
            }
        }
        if (((var_e0 & 1) != 0 && (((var_70 & 1) != 0 && (s_1 & 1) == 0) || ((var_70 & 1) == 0 && (s_1 & 1) == 0))))
        {
        label_1f350:
            x0_17 = operator delete(var_d0);
            if ((var_b0 & 1) != 0)
            {
            label_1f360:
                x0_17 = operator delete(x8_12);
                if ((s & 1) != 0)
                {
                    goto label_1f36c;
                }
            }
        }
        if ((((((((var_70 & 1) != 0 && (s_1 & 1) == 0) || ((var_70 & 1) == 0 && (s_1 & 1) == 0)) && (var_e0 & 1) != 0) && (var_b0 & 1) == 0) || (((((((var_70 & 1) != 0 && (s_1 & 1) == 0) || ((var_70 & 1) == 0 && (s_1 & 1) == 0)) && (var_e0 & 1) == 0) || ((var_70 & 1) != 0 && (s_1 & 1) != 0)) || ((var_70 & 1) == 0 && (s_1 & 1) != 0)) && (var_b0 & 1) == 0)) && (s & 1) != 0))
        {
        label_1f36c:
            x0_24 = var_b8_1;
            goto label_1f370;
        }
        if ((((((((var_70 & 1) != 0 && (s_1 & 1) == 0) || ((var_70 & 1) == 0 && (s_1 & 1) == 0)) && (var_e0 & 1) == 0) || ((var_70 & 1) != 0 && (s_1 & 1) != 0)) || ((var_70 & 1) == 0 && (s_1 & 1) != 0)) && (var_b0 & 1) != 0))
        {
            goto label_1f360;
        }
    }
    else
    {
        char* x21_1;
        if (x8_7 > 0x10)
        {
            x21_1 = "unknown token";
        }
        else
        {
            x21_1 = &data_44240[x8_7];
        }
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_8 = strlen(x21_1);
        if (x0_8 < -0x10)
        {
            goto label_1f4c8;
        }
        void* var_80_1;
        void* x23_2;
        if (x0_8 >= 0x17)
        {
            uint64_t x24_2 = ((x0_8 + 0x10) & 0xfffffffffffffff0);
            void* x0_19 = operator new(x24_2);
            x23_2 = x0_19;
            size_t var_88_1 = x0_8;
            var_80_1 = x0_19;
            s_1 = (x24_2 | 1);
        }
        else
        {
            x23_2 = (&s_1 | 1);
            s_1 = (x0_8 << 1);
        }
        if ((x0_8 >= 0x17 || (x0_8 < 0x17 && x0_8 != 0)))
        {
            memcpy(x23_2, x21_1, x0_8);
        }
        *(x23_2 + x0_8) = 0;
        int128_t* s_6;
        int128_t v0_5;
        s_6 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_1, nullptr, "unexpected ");
        uint64_t x8_24 = s_6[1];
        var_70 = *s_6;
        __builtin_memset(s_6, 0, 0x18);
        uint64_t x1_6;
        if ((var_70 & 1) == 0)
        {
            x1_6 = (&var_70 | 1);
        }
        else
        {
            x1_6 = x8_24;
        }
        x0_17 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, x1_6);
        if ((var_70 & 1) != 0)
        {
            x0_17 = operator delete(x8_24);
        }
        if ((s_1 & 1) != 0)
        {
            x0_24 = var_80_1;
        label_1f370:
            x0_17 = operator delete(x0_24);
        }
    }
    if (arg2 != 0)
    {
        char* x20_1;
        if ((arg2 - 1) > 0xf)
        {
            x20_1 = "unknown token";
        }
        else
        {
            x20_1 = &data_442c8[(arg2 - 1)];
        }
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_30 = strlen(x20_1);
        if (x0_30 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_1f4c0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_1f4c8:
            int64_t x0_38 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((*arg4 & 1) != 0)
            {
                operator delete(*(arg4 + 0x10));
            }
            /* tailcall */
            return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(x0_38));
        }
        void* var_80_3;
        void* x22_3;
        if (x0_30 >= 0x17)
        {
            uint64_t x23_3 = ((x0_30 + 0x10) & 0xfffffffffffffff0);
            void* x0_32 = operator new(x23_3);
            x22_3 = x0_32;
            size_t var_88_2 = x0_30;
            var_80_3 = x0_32;
            s_1 = (x23_3 | 1);
        }
        else
        {
            x22_3 = (&s_1 | 1);
            s_1 = (x0_30 << 1);
        }
        if ((x0_30 >= 0x17 || (x0_30 < 0x17 && x0_30 != 0)))
        {
            memcpy(x22_3, x20_1, x0_30);
        }
        *(x22_3 + x0_30) = 0;
        int128_t* s_7;
        int128_t v0_6;
        s_7 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_1, nullptr, "; expected ");
        uint64_t x8_36 = s_7[1];
        var_70 = *s_7;
        __builtin_memset(s_7, 0, 0x18);
        uint64_t x1_8;
        if ((var_70 & 1) == 0)
        {
            x1_8 = (&var_70 | 1);
        }
        else
        {
            x1_8 = x8_36;
        }
        x0_17 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg4, x1_8);
        if ((var_70 & 1) != 0)
        {
            x0_17 = operator delete(x8_36);
        }
        if ((s_1 & 1) != 0)
        {
            x0_17 = operator delete(var_80_3);
        }
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_17;
}

int64_t sub_1f4d8(int64_t arg1, char* arg2 @ x19, void* arg3 @ x29, char arg4, void* arg5)
{
    if ((*(arg3 - 0x60) & 1) != 0)
    {
        operator delete(*(arg3 - 0x50));
    }
    if ((((*(arg3 - 0x60) & 1) == 0 && (arg4 & 1) != 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        if ((*arg2 & 1) != 0)
        {
            goto label_1f600;
        }
    }
    if (((((*(arg3 - 0x60) & 1) == 0 && (arg4 & 1) == 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg4 & 1) == 0)) && (*arg2 & 1) != 0))
    {
    label_1f600:
        operator delete(*(arg2 + 0x10));
    }
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(arg1));
}

int64_t sub_1f4dc(int64_t arg1, char* arg2 @ x19, void* arg3 @ x29, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11)
{
    if ((*(arg3 - 0x60) & 1) != 0)
    {
        operator delete(*(arg3 - 0x50));
    }
    if ((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) != 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) != 0)))
    {
        operator delete(arg11);
        if ((arg4 & 1) != 0)
        {
            goto label_1f550;
        }
    }
    if (((arg4 & 1) != 0 && (((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0))))
    {
    label_1f550:
        operator delete(arg5);
        if ((arg8 & 1) != 0)
        {
        label_1f560:
            operator delete(arg9);
            if ((arg6 & 1) != 0)
            {
                goto label_1f5dc;
            }
        }
    }
    if (((((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) != 0) && (arg8 & 1) == 0) || (((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) == 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) != 0)) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) != 0)) && (arg8 & 1) == 0)) && (arg6 & 1) == 0) || (((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) != 0) && (arg8 & 1) != 0)))
    {
        if ((*arg2 & 1) == 0)
        {
            goto label_1f608;
        }
    label_1f600:
        operator delete(*(arg2 + 0x10));
    label_1f608:
        /* tailcall */
        return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(arg1));
    }
    if ((((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) != 0) && (arg8 & 1) == 0) || (((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) == 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) != 0)) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) != 0)) && (arg8 & 1) == 0)) && (arg6 & 1) != 0))
    {
    label_1f5dc:
        operator delete(arg7);
        if ((*arg2 & 1) != 0)
        {
            goto label_1f600;
        }
        goto label_1f608;
    }
    if ((((((((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) == 0) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) == 0)) && (arg4 & 1) == 0) || ((*(arg3 - 0x60) & 1) != 0 && (arg10 & 1) != 0)) || ((*(arg3 - 0x60) & 1) == 0 && (arg10 & 1) != 0)) && (arg8 & 1) != 0))
    {
        goto label_1f560;
    }
}

int64_t sub_1f580(int64_t arg1, char* arg2 @ x19, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) != 0 && (*arg2 & 1) != 0) || ((arg3 & 1) == 0 && (*arg2 & 1) != 0)))
    {
        operator delete(*(arg2 + 0x10));
    }
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(arg1));
}

int64_t sub_1f5cc(int64_t arg1, char* arg2 @ x19, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (*arg2 & 1) != 0) || ((arg3 & 1) != 0 && (*arg2 & 1) != 0)))
    {
        operator delete(*(arg2 + 0x10));
    }
    /* tailcall */
    return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(_Unwind_Resume(arg1));
}

void* nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::~json_sax_dom_callback_parser(void* arg1)
{
    *(arg1 + 0x98);
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy((arg1 + 0xa0));
    int64_t* x0_1 = *(arg1 + 0x80);
    int64_t x8_2;
    if ((arg1 + 0x60) == x0_1)
    {
        x8_2 = *(*x0_1 + 0x20);
    }
    if (((arg1 + 0x60) != x0_1 && x0_1 != 0))
    {
        x8_2 = *(*x0_1 + 0x28);
    }
    if (((arg1 + 0x60) == x0_1 || ((arg1 + 0x60) != x0_1 && x0_1 != 0)))
    {
        x8_2();
    }
    void* x0_2 = *(arg1 + 0x38);
    if (x0_2 != 0)
    {
        operator delete(x0_2);
    }
    void* x0_3 = *(arg1 + 0x20);
    if (x0_3 != 0)
    {
        operator delete(x0_3);
    }
    void* x0_4 = *(arg1 + 8);
    if (x0_4 == 0)
    {
        return x0_4;
    }
    *(arg1 + 0x10) = x0_4;
    /* tailcall */
    return operator delete(x0_4);
}

uint64_t nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >(void* arg1, uint64_t arg2)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    void* s_1;
    __builtin_memset(&s_1, 0, 0x18);
    while (true)
    {
        uint64_t x8_2 = (*(arg1 + 0x30) - 1);
        int64_t s;
        void* var_118;
        char var_110;
        void* var_100;
        int128_t var_f0;
        char var_b0;
        void* s_4;
        int32_t x0_42;
        int32_t x19_1;
        if (x8_2 > 0xd)
        {
        label_1fa80:
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_1 = *(arg1 + 0x50);
            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
            int128_t v0_1 = *(arg1 + 0x50);
            int64_t x8_29 = *(arg1 + 0x60);
            __builtin_memset(&s, 0, 0x18);
            __builtin_strcpy(&s, "\nvalue");
            int64_t var_e0_1 = x8_29;
            var_f0 = v0_1;
            nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->type);
            nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
            x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_1, &var_b0);
        label_1fb94:
            x19_1 = x0_42;
            void* var_d8_1 = (_vtable_for_nlohmann::detail::exception + 0x10);
            std::runtime_error::~runtime_error();
            std::exception::~exception();
        label_1fbb4:
            if ((var_110 & 1) != 0)
            {
            label_1ff24:
                operator delete(var_100);
                if ((s & 1) != 0)
                {
                label_1ff34:
                    operator delete(var_118);
                    if ((var_b0 & 1) != 0)
                    {
                        goto label_1ff44;
                    }
                    goto label_1fbc8;
                }
                goto label_1fbc4;
            }
        label_1fbbc:
            if ((s & 1) != 0)
            {
                goto label_1ff34;
            }
        label_1fbc4:
            if ((var_b0 & 1) != 0)
            {
            label_1ff44:
                void* var_a0;
                operator delete(var_a0);
                s_4 = s_1;
                if (s_4 != 0)
                {
                    goto label_1fbd0;
                }
            label_1fbdc:
                if (*(x24 + 0x28) != x8)
                {
                    break;
                }
                return (x19_1 & 1);
            }
        label_1fbc8:
            s_4 = s_1;
            if (s_4 != 0)
            {
                goto label_1fbd0;
            }
            goto label_1fbdc;
        }
        double var_d8;
        int64_t var_90_1;
        int64_t var_88;
        int64_t x8_8;
        switch (x8_2)
        {
            case 0:
            {
                var_d8 = 1;
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg2);
            label_1f808:
                x8_8 = var_90_1;
                if (x8_8 == 0)
                {
                label_1fa70:
                    x19_1 = 1;
                    s_4 = s_1;
                    if (s_4 != 0)
                    {
                    label_1fbd0:
                        operator delete(s_4);
                    }
                }
                else
                {
                label_1f884:
                    int32_t x0_12;
                    int32_t x0_14;
                    int32_t x0_16;
                    bool cond:7_1;
                    do
                    {
                        if ((*(s_1 + (((x8_8 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_8 - 1))) == 0)
                        {
                            x0_14 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            *(arg1 + 0x30) = x0_14;
                            if (x0_14 == 0xd)
                            {
                                x0_16 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                *(arg1 + 0x30) = x0_16;
                                break;
                            }
                            if (x0_14 != 0xb)
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_4 = *(arg1 + 0x50);
                                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                int128_t v0_4 = *(arg1 + 0x50);
                                int64_t x8_37 = *(arg1 + 0x60);
                                s = 0xc;
                                __builtin_strncpy(&*s[1], "object", 0x17);
                                int64_t var_e0_4 = x8_37;
                                var_f0 = v0_4;
                                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[2]);
                                nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                                x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_4, &var_b0);
                                break;
                            }
                        }
                        else
                        {
                            x0_12 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            *(arg1 + 0x30) = x0_12;
                            if (x0_12 == 0xd)
                            {
                                *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                                break;
                            }
                            if (x0_12 != 0xa)
                            {
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_3 = *(arg1 + 0x50);
                                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                                int128_t v0_3 = *(arg1 + 0x50);
                                int64_t x8_36 = *(arg1 + 0x60);
                                __builtin_memset(&s, 0, 0x18);
                                __builtin_strcpy(&s, "\narray");
                                int64_t var_e0_3 = x8_36;
                                var_f0 = v0_3;
                                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[1]);
                                nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                                x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_3, &var_b0);
                                break;
                            }
                        }
                        *(arg2 + 0x10) = (*(arg2 + 0x10) - 8);
                        x8_8 = (var_90_1 - 1);
                        cond:7_1 = var_90_1 != 1;
                        var_90_1 = x8_8;
                    } while (cond:7_1);
                    if (((*(s_1 + (((x8_8 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_8 - 1))) == 0 && x0_14 == 0xd))
                    {
                        if (x0_16 != 4)
                        {
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_5 = *(arg1 + 0x50);
                            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                            int128_t v0_5 = *(arg1 + 0x50);
                            int64_t x8_38 = *(arg1 + 0x60);
                            s = 0;
                            int64_t var_120_1 = 0;
                            s = 0x14;
                            var_118 = nullptr;
                            int64_t var_e0_5 = x8_38;
                            var_f0 = v0_5;
                            __builtin_strncpy(&*s[1], "object key", 0xb);
                            nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->ident.file_class);
                            nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                            x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_5, &var_b0);
                            goto label_1fb94;
                        }
                        if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg2) & 1) == 0)
                        {
                            goto label_1fc94;
                        }
                        int32_t x0_20 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                        *(arg1 + 0x30) = x0_20;
                        if (x0_20 != 0xc)
                        {
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_6 = *(arg1 + 0x50);
                            nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                            int128_t v0_6 = *(arg1 + 0x50);
                            int64_t x8_39 = *(arg1 + 0x60);
                            __builtin_memset(&s, 0, 0x18);
                            __builtin_strncpy(&s, " object separator", 0x12);
                            int64_t var_e0_6 = x8_39;
                            var_f0 = v0_6;
                            nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[3]);
                            nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                            x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_6, &var_b0);
                        }
                        else
                        {
                            *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                            continue;
                        }
                        goto label_1fb94;
                    }
                    if ((((*(s_1 + (((x8_8 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_8 - 1))) == 0 && x0_14 != 0xd) && x0_14 != 0xb))
                    {
                        goto label_1fb94;
                    }
                    if (!(((*(s_1 + (((x8_8 - 1) >> 3) & 0x1ffffffffffffff8)) & (1 << (x8_8 - 1))) != 0 && x0_12 == 0xd)))
                    {
                        goto label_1fa70;
                    }
                    continue;
                }
                goto label_1fbdc;
            }
            case 1:
            {
                var_d8 = 0;
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(arg2);
                goto label_1f808;
            }
            case 2:
            {
                var_d8 = 0.0;
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(arg2);
                goto label_1f808;
            }
            case 3:
            {
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(arg2);
                goto label_1f808;
            }
            case 4:
            {
                var_d8 = *(arg1 + 0xa8);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(arg2);
                goto label_1f808;
            }
            case 5:
            {
                var_d8 = *(arg1 + 0xa0);
                nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(arg2);
                goto label_1f808;
            }
            case 6:
            {
                double v0 = *(arg1 + 0xb0);
                double temp0_1 = vabs_f64(v0);
                (temp0_1 - inf.0);
                if (temp0_1 < inf.0)
                {
                label_1f7e0:
                    var_d8 = v0;
                    nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(arg2);
                    goto label_1f808;
                }
                if (temp0_1 > inf.0)
                {
                    goto label_1f7e0;
                }
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x20_1 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t* s_2;
                int128_t v0_7;
                s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s, nullptr, "number overflow parsing '");
                var_100 = s_2[1];
                var_110 = *s_2;
                __builtin_memset(s_2, 0, 0x18);
                int128_t* s_3;
                int128_t v0_8;
                s_3 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_110, "'");
                void* x8_41 = s_3[1];
                var_f0 = *s_3;
                __builtin_memset(s_3, 0, 0x18);
                nlohmann::detail::out_of_range::create(0x196, &var_f0);
                x19_1 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x20_1, &var_b0);
                void* var_d8_2 = (_vtable_for_nlohmann::detail::exception + 0x10);
                std::runtime_error::~runtime_error();
                std::exception::~exception();
                if ((var_f0 & 1) == 0)
                {
                    goto label_1fbb4;
                }
                operator delete(x8_41);
                if ((var_110 & 1) != 0)
                {
                    goto label_1ff24;
                }
                goto label_1fbbc;
            }
            case 7:
            {
                var_b0 = 2;
                double x0_24 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg2);
                var_d8 = x0_24;
                int64_t* x8_14 = *(arg2 + 0x10);
                if (x8_14 >= *(arg2 + 0x18))
                {
                    std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>((arg2 + 8));
                }
                else
                {
                    *x8_14 = x0_24;
                    *(arg2 + 0x10) = (*(arg2 + 0x10) + 8);
                }
                int32_t x0_34 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                *(arg1 + 0x30) = x0_34;
                if (x0_34 == 0xa)
                {
                    goto label_1f9b0;
                }
                int64_t x8_22 = var_90_1;
                if ((x8_22 == (var_88 << 6) && (x8_22 + 1) >= 0))
                {
                    std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&s_1);
                    x8_22 = var_90_1;
                }
                if ((x8_22 != (var_88 << 6) || (x8_22 == (var_88 << 6) && (x8_22 + 1) >= 0)))
                {
                    var_90_1 = (x8_22 + 1);
                    void* s_5 = s_1;
                    int64_t x10_5 = ((x8_22 >> 3) & 0x1ffffffffffffff8);
                    *(s_5 + x10_5) = (*(s_5 + x10_5) | (1 << x8_22));
                    continue;
                }
            label_20078:
                std::__ndk1::__vector_base_common<true>::__throw_length_error();
                break;
                break;
            }
            case 8:
            {
                var_b0 = 1;
                double x0_6 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg2);
                var_d8 = x0_6;
                double* x8_3 = *(arg2 + 0x10);
                if (x8_3 >= *(arg2 + 0x18))
                {
                    std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>((arg2 + 8));
                }
                else
                {
                    *x8_3 = x0_6;
                    *(arg2 + 0x10) = (*(arg2 + 0x10) + 8);
                }
                int32_t x0_27 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                *(arg1 + 0x30) = x0_27;
                if (x0_27 == 0xb)
                {
                label_1f9b0:
                    *(arg2 + 0x10) = (*(arg2 + 0x10) - 8);
                    x8_8 = var_90_1;
                    if (x8_8 == 0)
                    {
                        goto label_1fa70;
                    }
                    goto label_1f884;
                }
                if (x0_27 != 4)
                {
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_7 = *(arg1 + 0x50);
                    nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                    int128_t v0_9 = *(arg1 + 0x50);
                    int64_t x8_47 = *(arg1 + 0x60);
                    s = 0;
                    int64_t var_120_2 = 0;
                    s = 0x14;
                    var_118 = nullptr;
                    int64_t var_e0_8 = x8_47;
                    var_f0 = v0_9;
                    __builtin_strncpy(&*s[1], "object key", 0xb);
                    nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &nullptr->ident.file_class);
                    nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                    x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_7, &var_b0);
                    goto label_1fb94;
                }
                if ((nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(arg2) & 1) != 0)
                {
                    int32_t x0_31 = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                    *(arg1 + 0x30) = x0_31;
                    if (x0_31 != 0xc)
                    {
                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_8 = *(arg1 + 0x50);
                        nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                        int128_t v0_10 = *(arg1 + 0x50);
                        int64_t x8_48 = *(arg1 + 0x60);
                        __builtin_memset(&s, 0, 0x18);
                        __builtin_strncpy(&s, " object separator", 0x12);
                        int64_t var_e0_9 = x8_48;
                        var_f0 = v0_10;
                        nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, &*nullptr->ident.pad[3]);
                        nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                        x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_8, &var_b0);
                        goto label_1fb94;
                    }
                    int64_t x8_17 = var_90_1;
                    if (x8_17 == (var_88 << 6))
                    {
                        if ((x8_17 + 1) < 0)
                        {
                            std::__ndk1::__vector_base_common<true>::__throw_length_error();
                        }
                        else
                        {
                            std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&s_1);
                            x8_17 = var_90_1;
                        }
                    }
                    if ((x8_17 != (var_88 << 6) || (x8_17 == (var_88 << 6) && (x8_17 + 1) >= 0)))
                    {
                        var_90_1 = (x8_17 + 1);
                        void* s_6 = s_1;
                        int64_t x10_7 = ((x8_17 >> 3) & 0x1ffffffffffffff8);
                        *(s_6 + x10_7) = (*(s_6 + x10_7) & !((1 << x8_17)));
                        *(arg1 + 0x30) = nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::scan();
                        continue;
                    }
                    goto label_20078;
                }
            label_1fc94:
                x19_1 = 0;
                s_4 = s_1;
                if (s_4 != 0)
                {
                    goto label_1fbd0;
                }
                goto label_1fbdc;
            }
            case 9:
            case 0xa:
            case 0xb:
            case 0xc:
            {
                goto label_1fa80;
            }
            case 0xd:
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x22_2 = *(arg1 + 0x50);
                nlohmann::detail::lexer<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::get_token_string();
                int128_t v0_2 = *(arg1 + 0x50);
                int64_t x8_30 = *(arg1 + 0x60);
                __builtin_memset(&s, 0, 0x18);
                __builtin_strcpy(&s, "\nvalue");
                int64_t var_e0_2 = x8_30;
                var_f0 = v0_2;
                nlohmann::detail::parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::exception_message(arg1, nullptr);
                nlohmann::detail::parse_error::create(0x65, &var_f0, &var_110);
                x0_42 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(arg2, x22_2, &var_b0);
                goto label_1fb94;
            }
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::parse_error(void* arg1, int64_t arg2, int64_t arg3, void* arg4)
{
    uint32_t x8 = *(arg1 + 0x29);
    *(arg1 + 0x28) = 1;
    if (x8 != 0)
    {
        int64_t x8_2 = (*(arg4 + 8) * 0x51eb851f);
        uint64_t x8_6 = ((((x8_2 >> 0x25) + (x8_2 >> 0x3f)) % 0x64) - 1);
        if (x8_6 <= 4)
        {
            void* var_18 = arg4;
            struct typeinfo_for_nlohmann::detail::other_error* const tinfo;
            void* thrown_exception;
            switch (x8_6)
            {
                case 0:
                {
                    void* thrown_exception_1 = __cxa_allocate_exception(0x28);
                    thrown_exception = thrown_exception_1;
                    nlohmann::detail::parse_error::parse_error(thrown_exception_1);
                    tinfo = _typeinfo_for_nlohmann::detail::parse_error;
                    break;
                }
                case 1:
                {
                    void* thrown_exception_2 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_2;
                    nlohmann::detail::invalid_iterator::invalid_iterator(thrown_exception_2);
                    tinfo = _typeinfo_for_nlohmann::detail::invalid_iterator;
                    break;
                }
                case 2:
                {
                    void* thrown_exception_3 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_3;
                    nlohmann::detail::type_error::type_error(thrown_exception_3);
                    tinfo = _typeinfo_for_nlohmann::detail::type_error;
                    break;
                }
                case 3:
                {
                    void* thrown_exception_4 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_4;
                    nlohmann::detail::out_of_range::out_of_range(thrown_exception_4);
                    tinfo = _typeinfo_for_nlohmann::detail::out_of_range;
                    break;
                }
                case 4:
                {
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* thrown_exception_5 = __cxa_allocate_exception(0x20);
                    thrown_exception = thrown_exception_5;
                    nlohmann::detail::other_error::other_error(thrown_exception_5);
                    tinfo = _typeinfo_for_nlohmann::detail::other_error;
                    break;
                }
            }
            __cxa_throw(thrown_exception, tinfo, nlohmann::detail::exception::~exception);
            /* no return */
        }
    }
    return 0;
}

void std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(void* arg1, int64_t arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    if (arg2 > (*(arg1 + 0x10) << 6))
    {
        void* s;
        __builtin_memset(&s, 0, 0x18);
        if ((arg2 & 0xffffffff80000000) != 0)
        {
            int64_t x0_3 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* s_1 = s;
            if (s_1 != 0)
            {
                operator delete(s_1);
            }
            int64_t* x0_6;
            int64_t* x1_1;
            int64_t* x2;
            x0_6 = _Unwind_Resume(x0_3);
            /* tailcall */
            return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(x0_6, x1_1, x2);
        }
        void* x19_1 = arg1;
        s = operator new(((((arg2 - 1) >> 6) + 1) << 3));
        int64_t var_68_1 = 0;
        int64_t x8_4 = *x19_1;
        int64_t x9_1 = *(x19_1 + 8);
        int32_t var_40_1 = 0;
        int64_t var_48 = x8_4;
        int64_t var_58_1 = (x8_4 + ((x9_1 >> 3) & 0x1ffffffffffffff8));
        int32_t var_50_1 = (x9_1 & 0x3f);
        int128_t v0_1;
        int128_t v1_1;
        v0_1 = std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(&s, &var_48);
        v1_1 = *x19_1;
        *x19_1 = s;
        s = v1_1;
        int64_t x9_3 = *(x19_1 + 0x10);
        arg1 = v1_1;
        *(x19_1 + 0x10) = (((arg2 - 1) >> 6) + 1);
        int64_t var_60_2 = x9_3;
        if (arg1 != 0)
        {
            operator delete(arg1);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(int64_t* arg1, int64_t* arg2, int64_t* arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t* x19 = *arg2;
    uint64_t x23 = arg2[1];
    int64_t x8_1 = *arg3;
    uint64_t x9 = arg3[1];
    int64_t x10 = arg1[1];
    int64_t x24 = ((x9 - x23) + ((x8_1 - x19) << 3));
    int64_t x12_1 = (x24 + x10);
    arg1[1] = x12_1;
    int64_t* x11_3;
    if ((x10 == 0 || (x10 != 0 && ((x12_1 - 1) ^ (x10 - 1)) > 0x3f)))
    {
        x11_3 = *arg1;
        if (x12_1 > 0x40)
        {
            *(x11_3 + (((x12_1 - 1) >> 3) & 0x1ffffffffffffff8)) = 0;
        }
        else
        {
            *x11_3 = 0;
        }
    }
    if ((x10 != 0 && ((x12_1 - 1) ^ (x10 - 1)) <= 0x3f))
    {
        x11_3 = *arg1;
    }
    int32_t x10_1 = (x10 & 0x3f);
    void* x20 = (x11_3 + ((x10 >> 3) & 0x1ffffffffffffff8));
    if (x23 != x10_1)
    {
        int64_t var_78 = x8_1;
        int64_t* var_68 = x19;
        int32_t var_60_1 = x23;
        int32_t var_70_1 = x9;
        void* var_88 = x20;
        int32_t var_80_1 = x10_1;
        std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(&var_68, &var_78, &var_88);
    }
    else
    {
        if (x24 >= 1)
        {
            if (x23 != 0)
            {
                uint64_t x8_2 = (0x40 - x23);
                int64_t x11_4;
                if (x24 < x8_2)
                {
                    x11_4 = x24;
                }
                else
                {
                    x11_4 = x8_2;
                }
                int64_t x10_2 = *x19;
                x19 = &x19[1];
                x24 = (x24 - x11_4);
                int64_t x11_5 = (x11_4 + x23);
                int64_t x8_5 = ((-1 >> (x8_2 - x11_4)) & (-1 << x23));
                int64_t x12_9;
                if (x11_5 < 0)
                {
                    x12_9 = (x11_5 + 0x3f);
                }
                else
                {
                    x12_9 = x11_5;
                }
                int64_t x9_2 = (x12_9 >> 6);
                *x20 = ((*x20 & !(x8_5)) | (x10_2 & x8_5));
                x20 = (x20 + (x9_2 << 3));
                x23 = (x11_5 - (x9_2 << 6));
            }
            int64_t x26_1;
            if (x24 < 0)
            {
                x26_1 = (x24 + 0x3f);
            }
            else
            {
                x26_1 = x24;
            }
            int64_t x25_1 = (x26_1 >> 6);
            size_t x21_1 = (x25_1 << 3);
            memmove(x20, x19, x21_1);
            int64_t x8_10 = (x24 - (x26_1 & 0xffffffffffffffc0));
            x20 = (x20 + x21_1);
            if (x8_10 >= 1)
            {
                uint64_t x9_4 = (-1 >> -(x8_10));
                x23 = x8_10;
                *x20 = ((*x20 & !(x9_4)) | (x19[x25_1] & x9_4));
            }
        }
        void* var_98_1 = x20;
        int32_t var_90_1 = x23;
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(int64_t* arg1, int64_t* arg2, int64_t* arg3, int64_t* arg4 @ x8)
{
    int64_t* x12 = *arg1;
    uint64_t x11 = arg1[1];
    int64_t i_1 = ((arg2[1] + ((*arg2 - x12) << 3)) - x11);
    int32_t x11_5;
    if (i_1 <= 0)
    {
        x11_5 = arg3[1];
    }
    else
    {
        int32_t* x10_2;
        if (x11 == 0)
        {
            x10_2 = &arg3[1];
            x11_5 = *x10_2;
        }
        else
        {
            uint64_t i_6 = (0x40 - x11);
            x10_2 = &arg3[1];
            uint64_t x17_1 = *x10_2;
            uint64_t i_2;
            if (i_1 < i_6)
            {
                i_2 = i_1;
            }
            else
            {
                i_2 = i_6;
            }
            int64_t* x1 = *arg3;
            uint64_t i_7 = (0x40 - x17_1);
            int64_t x12_2 = (((-1 >> (i_6 - i_2)) & (-1 << x11)) & *x12);
            uint64_t i_5;
            if (i_2 > i_7)
            {
                i_5 = i_7;
            }
            else
            {
                i_5 = i_2;
            }
            uint64_t x6_1;
            if (x17_1 > x11)
            {
                x6_1 = (x12_2 << (x17_1 - x11));
            }
            else
            {
                x6_1 = (x12_2 >> (x11 - x17_1));
            }
            uint64_t x15_8 = (i_2 - i_5);
            x11_5 = ((x17_1 + i_5) & 0x3f);
            i_1 = (i_1 - i_2);
            void* x16_4 = (x1 + (((i_5 + x17_1) >> 3) & 0x1ffffffffffffff8));
            *x1 = ((*x1 & !(((-1 >> (i_7 - i_5)) & (-1 << x17_1)))) | x6_1);
            *arg3 = x16_4;
            *x10_2 = x11_5;
            if (x15_8 >= 1)
            {
                *x16_4 = ((x12_2 >> (i_5 + arg1[1])) | (*x16_4 & !((-1 >> -(x15_8)))));
                x11_5 = x15_8;
                *x10_2 = x15_8;
            }
            x12 = (*arg1 + 8);
            *arg1 = x12;
        }
        uint64_t x13_3 = x11_5;
        int64_t x14_2 = (-1 << x13_3);
        if (i_1 >= 0x40)
        {
            int64_t i = i_1;
            do
            {
                int64_t* x3_1 = *arg3;
                int64_t x12_5 = *x12;
                i = (i - 0x40);
                *x3_1 = ((*x3_1 & !(x14_2)) | (x12_5 << x13_3));
                *arg3 = &x3_1[1];
                x3_1[1] = ((x3_1[1] & x14_2) | (x12_5 >> (0x40 - x11_5)));
                x12 = (*arg1 + 8);
                *arg1 = x12;
            } while (i > 0x3f);
            i_1 = (i_1 & 0x3f);
        }
        if (i_1 >= 1)
        {
            int64_t* x3_3 = *arg3;
            uint64_t i_4 = (0x40 - x11_5);
            int64_t i_3;
            if (i_1 > i_4)
            {
                i_3 = i_4;
            }
            else
            {
                i_3 = i_1;
            }
            int64_t x15_11 = (*x12 & (-1 >> -(i_1)));
            int64_t x9_2 = (i_1 - i_3);
            x11_5 = ((x11_5 + i_3) & 0x3f);
            void* x13_5 = (x3_3 + (((i_3 + x13_3) >> 3) & 0x1ffffffffffffff8));
            *x3_3 = ((*x3_3 & !(((-1 >> (i_4 - i_3)) & x14_2))) | (x15_11 << x13_3));
            *arg3 = x13_5;
            arg3[1] = x11_5;
            if (x9_2 >= 1)
            {
                *x13_5 = ((*x13_5 & !((-1 >> -(x9_2)))) | (x15_11 >> i_3));
                x11_5 = x9_2;
                *x10_2 = x9_2;
            }
        }
    }
    arg4[1] = x11_5;
    *arg4 = *arg3;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_object(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, uint64_t arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t x8_1 = *(arg1 + 8);
    int64_t x9 = *(arg1 + 0x10);
    char var_88 = 0;
    uint32_t var_70 = ((x9 - x8_1) >> 3);
    int64_t* x0 = *(arg1 + 0x80);
    if (x0 == 0)
    {
        sub_13744();
        /* no return */
    }
    int32_t x0_1 = *(*x0 + 0x30)();
    int64_t x8_6 = *(arg1 + 0x28);
    int64_t x9_1 = *(arg1 + 0x30);
    if (x8_6 == (x9_1 << 6))
    {
        if ((x8_6 + 1) < 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        else
        {
            std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve((arg1 + 0x20));
            x8_6 = *(arg1 + 0x28);
        }
    }
    if ((x8_6 != (x9_1 << 6) || (x8_6 == (x9_1 << 6) && (x8_6 + 1) >= 0)))
    {
        int64_t x9_3 = *(arg1 + 0x20);
        *(arg1 + 0x28) = (x8_6 + 1);
        uint64_t x10_2 = (x8_6 >> 6);
        int64_t x8_9 = (1 << x8_6);
        int64_t x8_10;
        if ((x0_1 & 1) == 0)
        {
            x8_10 = (*(x9_3 + (x10_2 << 3)) & !(x8_9));
        }
        else
        {
            x8_10 = (*(x9_3 + (x10_2 << 3)) | x8_9);
        }
        *(x9_3 + (x10_2 << 3)) = x8_10;
        var_70 = 1;
        int64_t x0_4;
        int64_t x1_3;
        x0_4 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg1, &var_70);
        int64_t var_58_1 = x0_4;
        int64_t var_50_1 = x1_3;
        int64_t* x8_11 = *(arg1 + 0x10);
        void* x8_13;
        if (x8_11 == *(arg1 + 0x18))
        {
            std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>((arg1 + 8));
            x8_13 = *(arg1 + 0x10);
        }
        else
        {
            *x8_11 = x1_3;
            x8_13 = (*(arg1 + 0x10) + 8);
            *(arg1 + 0x10) = x8_13;
        }
        char* x8_14;
        int64_t x8_15;
        if (((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)))
        {
            x8_14 = *(x8_13 - 8);
            if (x8_14 != 0)
            {
                x8_15 = *x8_14;
            }
        }
        if ((((((x8_11 == *(arg1 + 0x18) && arg2 == -1) || (x8_11 != *(arg1 + 0x18) && arg2 == -1)) || (((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 == 0)) || (((((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 != 0) && x8_15 > 2) && 1 >= arg2)) || (((((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 != 0) && x8_15 <= 2) && *(&data_2e048 + (x8_15 << 3)) >= arg2)))
        {
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return 1;
        }
    }
    void* thrown_exception = __cxa_allocate_exception(0x20);
    std::__ndk1::to_string(arg2);
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&var_88, nullptr, "excessive object size: ");
    int64_t var_60 = s[1];
    var_70 = *s;
    __builtin_memset(s, 0, 0x18);
    nlohmann::detail::out_of_range::create(0x198, &var_70);
    __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::out_of_range, nlohmann::detail::exception::~exception);
    /* no return */
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_object(void* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = *(arg1 + 0x10);
    char var_98;
    int32_t var_78;
    if (*(x8_1 - 8) != 0)
    {
        var_98 = 1;
        var_78 = (((x8_1 - *(arg1 + 8)) >> 3) - 1);
        int64_t* x0 = *(arg1 + 0x80);
        if (x0 == 0)
        {
            sub_13744();
            /* no return */
        }
        int32_t x0_1;
        int128_t v0;
        x0_1 = *(*x0 + 0x30)();
        if ((x0_1 & 1) == 0)
        {
            char var_58;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(&var_58);
            char* x8_8 = *(*(arg1 + 0x10) - 8);
            char x1_2 = *x8_8;
            *x8_8 = var_58;
            int64_t var_50;
            int64_t x9_3 = var_50;
            var_58 = x1_2;
            int64_t x10_1 = *(x8_8 + 8);
            *(x8_8 + 8) = x9_3;
            var_50 = x10_1;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_50);
        }
    }
    void* x9_4 = *(arg1 + 0x10);
    void* x8_9 = (x9_4 - 8);
    int64_t x10_3 = (*(arg1 + 0x28) - 1);
    bool cond:0 = *(arg1 + 8) == x8_9;
    *(arg1 + 0x10) = x8_9;
    *(arg1 + 0x28) = x10_3;
    if (!(cond:0))
    {
        char* x9_5 = *(x9_4 - 0x10);
        if ((x9_5 != 0 && *x9_5 == 1))
        {
            var_78 = x9_5;
            int128_t var_68_1 = data_2cd70;
            int64_t* i_2 = **(x9_5 + 8);
            while (true)
            {
                char* x8_10 = *(x8_9 - 8);
                var_98 = x8_10;
                int64_t var_90_1 = 0;
                int64_t var_88_1 = 0;
                int64_t var_80_1 = -0x8000000000000000;
                uint32_t x9_8 = *x8_10;
                if (x9_8 == 2)
                {
                    int64_t var_88_2 = *(*(x8_10 + 8) + 8);
                }
                else if (x9_8 != 1)
                {
                    int64_t var_80_2 = 1;
                }
                else
                {
                    int64_t var_90_2 = (*(x8_10 + 8) + 8);
                }
                if ((nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(&var_78) & 1) != 0)
                {
                    break;
                }
                char* x0_6;
                int128_t v0_1;
                x0_6 = nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator->();
                if (*x0_6 == 8)
                {
                    int64_t var_b8_1 = var_78;
                    int64_t var_a0_1 = *var_68_1[8];
                    int128_t var_b0_1 = i_2;
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, 0>(*(*(arg1 + 0x10) - 8));
                    break;
                }
                uint32_t x8_17 = *var_78;
                if (x8_17 == 2)
                {
                    var_68_1 = (var_68_1 + 0x10);
                    x8_9 = *(arg1 + 0x10);
                }
                else if (x8_17 != 1)
                {
                    *var_68_1[8] = (*var_68_1[8] + 1);
                    x8_9 = *(arg1 + 0x10);
                }
                else
                {
                    int64_t* i_3 = i_2;
                    int64_t* i = i_3[1];
                    int64_t* i_1;
                    if (i == 0)
                    {
                        while (true)
                        {
                            i_1 = i_3[2];
                            if (*i_1 == i_3)
                            {
                                break;
                            }
                            i_3 = i_3[2];
                        }
                    }
                    else
                    {
                        do
                        {
                            i_1 = i;
                            i = *i;
                        } while (i != 0);
                    }
                    i_2 = i_1;
                    x8_9 = *(arg1 + 0x10);
                }
            }
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(void* arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    char var_88 = 3;
    int64_t var_80 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
    int64_t x8_1 = *(arg1 + 8);
    int64_t x9 = *(arg1 + 0x10);
    char var_68 = 4;
    uint32_t x8_3 = ((x9 - x8_1) >> 3);
    int64_t* x0_2 = *(arg1 + 0x80);
    if (x0_2 == 0)
    {
        sub_13744();
        /* no return */
    }
    int32_t x0_3 = *(*x0_2 + 0x30)();
    int64_t x8_6 = *(arg1 + 0x40);
    int64_t var_90;
    if (x8_6 == (*(arg1 + 0x48) << 6))
    {
        if ((x8_6 + 1) < 0)
        {
            int64_t x0_13 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_90);
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_80);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_17;
            uint64_t x1_10;
            x0_17 = _Unwind_Resume(x0_13);
            /* tailcall */
            return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(x0_17, x1_10);
        }
        std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve((arg1 + 0x38));
        x8_6 = *(arg1 + 0x40);
    }
    int64_t x9_3 = *(arg1 + 0x38);
    *(arg1 + 0x40) = (x8_6 + 1);
    int64_t x8_9 = (1 << x8_6);
    uint64_t x10_2 = ((x8_6 >> 6) << 3);
    if ((x0_3 & 1) == 0)
    {
        *(x9_3 + x10_2) = (*(x9_3 + x10_2) & !(x8_9));
    }
    else
    {
        *(x9_3 + x10_2) = (*(x9_3 + x10_2) | x8_9);
        if (*(*(arg1 + 0x10) - 8) != 0)
        {
            char var_98;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(&var_98);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** x22_1 = *(*(*(arg1 + 0x10) - 8) + 8);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** var_70_1 = arg2;
            int64_t* x0_7 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x22_1, &var_68);
            void* x8_15 = *x0_7;
            if (x8_15 == 0)
            {
                std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(x22_1);
                int64_t x8_16 = var_68;
                int64_t* x1_5 = x8_3;
                *x1_5 = 0;
                x1_5[1] = 0;
                x1_5[2] = x8_16;
                *x0_7 = x1_5;
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x8_18 = **x22_1;
                if (x8_18 != 0)
                {
                    *x22_1 = x8_18;
                    x1_5 = *x0_7;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x22_1[1], x1_5);
                x22_1[2] = (x22_1[2] + 1);
                x8_15 = x8_3;
            }
            char x1_6 = *(x8_15 + 0x38);
            *(x8_15 + 0x38) = var_98;
            var_98 = x1_6;
            int64_t x10_3 = *(x8_15 + 0x40);
            *(x8_15 + 0x40) = var_90;
            var_90 = x10_3;
            *(arg1 + 0x50) = (x8_15 + 0x38);
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_90);
        }
    }
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_80);
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::start_array(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, uint64_t arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t x8_1 = *(arg1 + 8);
    int64_t x9 = *(arg1 + 0x10);
    char var_88 = 2;
    uint32_t var_70 = ((x9 - x8_1) >> 3);
    int64_t* x0 = *(arg1 + 0x80);
    if (x0 == 0)
    {
        sub_13744();
        /* no return */
    }
    int32_t x0_1 = *(*x0 + 0x30)();
    int64_t x8_6 = *(arg1 + 0x28);
    int64_t x9_1 = *(arg1 + 0x30);
    if (x8_6 == (x9_1 << 6))
    {
        if ((x8_6 + 1) < 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        else
        {
            std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve((arg1 + 0x20));
            x8_6 = *(arg1 + 0x28);
        }
    }
    if ((x8_6 != (x9_1 << 6) || (x8_6 == (x9_1 << 6) && (x8_6 + 1) >= 0)))
    {
        int64_t x9_3 = *(arg1 + 0x20);
        *(arg1 + 0x28) = (x8_6 + 1);
        uint64_t x10_2 = (x8_6 >> 6);
        int64_t x8_9 = (1 << x8_6);
        int64_t x8_10;
        if ((x0_1 & 1) == 0)
        {
            x8_10 = (*(x9_3 + (x10_2 << 3)) & !(x8_9));
        }
        else
        {
            x8_10 = (*(x9_3 + (x10_2 << 3)) | x8_9);
        }
        *(x9_3 + (x10_2 << 3)) = x8_10;
        var_70 = 2;
        int64_t x0_4;
        int64_t x1_3;
        x0_4 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(arg1, &var_70);
        int64_t var_58_1 = x0_4;
        int64_t var_50_1 = x1_3;
        int64_t* x8_11 = *(arg1 + 0x10);
        void* x8_13;
        if (x8_11 == *(arg1 + 0x18))
        {
            std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>((arg1 + 8));
            x8_13 = *(arg1 + 0x10);
        }
        else
        {
            *x8_11 = x1_3;
            x8_13 = (*(arg1 + 0x10) + 8);
            *(arg1 + 0x10) = x8_13;
        }
        char* x8_14;
        int64_t x8_15;
        if (((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)))
        {
            x8_14 = *(x8_13 - 8);
            if (x8_14 != 0)
            {
                x8_15 = *x8_14;
            }
        }
        if ((((((x8_11 == *(arg1 + 0x18) && arg2 == -1) || (x8_11 != *(arg1 + 0x18) && arg2 == -1)) || (((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 == 0)) || (((((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 != 0) && x8_15 > 2) && 1 >= arg2)) || (((((x8_11 == *(arg1 + 0x18) && arg2 != -1) || (x8_11 != *(arg1 + 0x18) && arg2 != -1)) && x8_14 != 0) && x8_15 <= 2) && *(&data_2e048 + (x8_15 << 3)) >= arg2)))
        {
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return 1;
        }
    }
    void* thrown_exception = __cxa_allocate_exception(0x20);
    std::__ndk1::to_string(arg2);
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&var_88, nullptr, "excessive array size: ");
    int64_t var_60 = s[1];
    var_70 = *s;
    __builtin_memset(s, 0, 0x18);
    nlohmann::detail::out_of_range::create(0x198, &var_70);
    __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::out_of_range, nlohmann::detail::exception::~exception);
    /* no return */
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::end_array(void* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = *(arg1 + 0x10);
    if (*(x8_1 - 8) == 0)
    {
        int64_t x8_9 = *(arg1 + 0x28);
        *(arg1 + 0x10) = (x8_1 - 8);
        *(arg1 + 0x28) = (x8_9 - 1);
    }
    else
    {
        char var_40 = 3;
        int32_t var_3c = (((x8_1 - *(arg1 + 8)) >> 3) - 1);
        int64_t* x0 = *(arg1 + 0x80);
        if (x0 == 0)
        {
            sub_13744();
            /* no return */
        }
        if ((*(*x0 + 0x30)() & 1) != 0)
        {
            int64_t x9_4 = (*(arg1 + 0x28) - 1);
            *(arg1 + 0x10) = (*(arg1 + 0x10) - 8);
            *(arg1 + 0x28) = x9_4;
        }
        else
        {
            char var_50;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(&var_50);
            char* x8_12 = *(*(arg1 + 0x10) - 8);
            char x1_2 = *x8_12;
            *x8_12 = var_50;
            int64_t var_48;
            int64_t x9_6 = var_48;
            var_50 = x1_2;
            int64_t x10_1 = *(x8_12 + 8);
            *(x8_12 + 8) = x9_6;
            var_48 = x10_1;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            void* x8_13 = *(arg1 + 0x10);
            int64_t x9_8 = (*(arg1 + 0x28) - 1);
            bool cond:0_1 = *(arg1 + 8) == (x8_13 - 8);
            *(arg1 + 0x10) = (x8_13 - 8);
            *(arg1 + 0x28) = x9_8;
            if (!(cond:0_1))
            {
                char* x8_14 = *(x8_13 - 0x10);
                if (*x8_14 == 2)
                {
                    void* x19_1 = *(x8_14 + 8);
                    char* x21_2 = (*(x19_1 + 8) - 0x10);
                    *x21_2;
                    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_2[8]);
                    *(x19_1 + 8) = x21_2;
                }
            }
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 1;
}

int64_t nlohmann::detail::out_of_range::create(int32_t arg1, char* arg2, int64_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t var_80 = 0;
    int64_t var_78 = 0;
    var_80 = 0x18;
    void* var_70 = nullptr;
    __builtin_strncpy(&*var_80[1], "out_of_range", 0xd);
    nlohmann::detail::exception::name(&var_80, arg1);
    *(arg2 + 8);
    void* x1_1;
    if ((*arg2 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    char var_68;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_68, x1_1);
    void* x8_2 = s[1];
    int128_t var_50 = *s;
    __builtin_memset(s, 0, 0x18);
    void* var_58;
    if ((var_68 & 1) != 0)
    {
        operator delete(var_58);
    }
    if ((var_80 & 1) != 0)
    {
        operator delete(var_70);
    }
    arg3[1] = arg1;
    *arg3 = (_vtable_for_nlohmann::detail::exception + 0x10);
    int64_t x0_5 = std::runtime_error::runtime_error(&arg3[2]);
    uint32_t x8_6 = var_50;
    *arg3 = (_vtable_for_nlohmann::detail::out_of_range + 0x10);
    if ((x8_6 & 1) != 0)
    {
        x0_5 = operator delete(x8_2);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t nlohmann::detail::exception::~exception(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    /* tailcall */
    return std::exception::~exception();
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(char** arg1, char* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        uint64_t x8_4 = *arg2;
        char var_50 = x8_4;
        int64_t** s_1;
        if (x8_4 <= 7)
        {
            switch (x8_4)
            {
                case 1:
                {
                    int64_t** s_2 = operator new(0x18);
                    s_2[1] = 0;
                    s_2[2] = 0;
                    *s_2 = &s_2[1];
                    s_1 = s_2;
                    if ((arg3 & 1) == 0)
                    {
                        goto label_21634;
                    }
                    goto label_215fc;
                }
                case 2:
                {
                    int64_t** s = operator new(0x18);
                    __builtin_memset(s, 0, 0x18);
                    s_1 = s;
                    if ((arg3 & 1) == 0)
                    {
                        goto label_21634;
                    }
                    goto label_215fc;
                }
                case 3:
                {
                    s_1 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_2ddb7);
                    if ((arg3 & 1) == 0)
                    {
                        goto label_21634;
                    }
                    goto label_215fc;
                }
                case 4:
                {
                    s_1 = 0;
                    if ((arg3 & 1) == 0)
                    {
                        goto label_21634;
                    }
                    goto label_215fc;
                }
            }
        }
        s_1 = nullptr;
        void* x21_1;
        if ((arg3 & 1) != 0)
        {
        label_215fc:
            x21_1 = &arg1[2];
        label_21674:
            void* x8_12 = arg1[2];
            if (arg1[1] == x8_12)
            {
                char x8_17 = var_50;
                int64_t** s_3 = s_1;
                var_50 = 0;
                s_1 = nullptr;
                char var_60_1 = x8_17;
                int64_t** s_6 = s_3;
                char* x9_8 = *arg1;
                char x1 = *x9_8;
                *x9_8 = x8_17;
                char var_60_2 = x1;
                int64_t** s_7 = *(x9_8 + 8);
                *(x9_8 + 8) = s_6;
                s_6 = s_7;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_6);
                *arg1;
            label_217f4:
                x20_1 = 1;
                goto label_21800;
            }
            char* x8_13 = *(x8_12 - 8);
            if (x8_13 == 0)
            {
                goto label_2178c;
            }
            if (*x8_13 != 2)
            {
                int64_t x8_20 = (arg1[8] - 1);
                int64_t x9_10 = *(arg1[7] + ((x8_20 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_20;
                if (((1 << x8_20) & x9_10) == 0)
                {
                    goto label_2178c;
                }
                char x8_21 = var_50;
                int64_t** s_4 = s_1;
                var_50 = 0;
                s_1 = nullptr;
                char var_70_1 = x8_21;
                int64_t** s_5 = s_4;
                char* x9_11 = arg1[0xa];
                char x1_1 = *x9_11;
                *x9_11 = x8_21;
                char var_70_2 = x1_1;
                int64_t** s_8 = *(x9_11 + 8);
                *(x9_11 + 8) = s_5;
                s_5 = s_8;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_5);
                arg1[0xa];
                goto label_217f4;
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2 = *(x8_13 + 8);
            char* x8_14 = *(x0_2 + 8);
            if (x8_14 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_14 = var_50;
                *(x8_14 + 8) = s_1;
                var_50 = 0;
                s_1 = nullptr;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21_1 - 8) + 8) + 8);
            goto label_217f4;
        }
    label_21634:
        x21_1 = &arg1[2];
        char var_40 = 5;
        uint32_t var_3c = ((*x21_1 - *(x21_1 - 8)) >> 3);
        int64_t* x0 = *(x21_1 + 0x70);
        if (x0 == 0)
        {
            sub_13744();
            /* no return */
        }
        if ((*(*x0 + 0x30)() & 1) != 0)
        {
            goto label_21674;
        }
    label_2178c:
        x20_1 = 0;
    label_21800:
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_1);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(int64_t* arg1, char* arg2)
{
    int64_t x9 = *arg1;
    int64_t x21 = ((arg1[1] - x9) >> 4);
    if (((x21 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_7;
        int64_t* x1_2;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>(x0_7, x1_2);
    }
    int64_t x9_1 = (arg1[2] - x9);
    int64_t x0_2;
    int64_t x22;
    if (0x7fffffffffffffe < (x9_1 >> 4))
    {
        x22 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_2 = (x9_1 >> 3);
        if (x9_2 < (x21 + 1))
        {
            x22 = (x21 + 1);
        }
        else
        {
            x22 = x9_2;
        }
        if (x22 == 0)
        {
            x0_2 = 0;
        }
        else if ((x22 >> 0x3c) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_1 >> 4) || (0x7fffffffffffffe >= (x9_1 >> 4) && x22 != 0)))
    {
        x0_2 = operator new((x22 << 4));
    }
    char* x12 = (x0_2 + (x21 << 4));
    *x12 = *arg2;
    *(x12 + 8) = *(arg2 + 8);
    *arg2 = 0;
    *(arg2 + 8) = 0;
    void* x20_1 = *arg1;
    char* x10_2 = arg1[1];
    int64_t x8_6 = (x0_2 + (x22 << 4));
    if (x10_2 == x20_1)
    {
        *arg1 = x12;
        arg1[1] = &x12[0x10];
        arg1[2] = x8_6;
    }
    else
    {
        int64_t x11_4 = (x21 + (-1 ^ (((x10_2 - 0x10) - x20_1) >> 4)));
        void* x12_1 = (x12 - 8);
        do
        {
            x10_2 = &x10_2[-0x10];
            *(x12_1 - 8) = *x10_2;
            *x12_1 = *(x10_2 + 8);
            x12_1 = (x12_1 - 0x10);
            *x10_2 = 0;
            *(x10_2 + 8) = 0;
        } while (x20_1 != x10_2);
        x20_1 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x11_4 << 4));
        arg1[1] = &x12[0x10];
        arg1[2] = x8_6;
        if (x21_1 != x20_1)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x20_1 != x21_1);
        }
    }
    if (((x10_2 == x20_1 && x20_1 != 0) || (x10_2 != x20_1 && x20_1 != 0)))
    {
        /* tailcall */
        return operator delete(x20_1);
    }
    if (((x10_2 == x20_1 && x20_1 == 0) || (x10_2 != x20_1 && x20_1 == 0)))
    {
        return x0_2;
    }
}

void std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>* const&>(int64_t* arg1, int64_t* arg2)
{
    void* x20 = *arg1;
    size_t x21 = (arg1[1] - x20);
    int64_t x24 = (x21 >> 3);
    if (((x24 + 1) >> 0x3d) != 0)
    {
        uint8_t* x0_6;
        char* x1_2;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(x0_6, x1_2);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t* x23;
    int64_t x25;
    if (0xffffffffffffffe < (x9_2 >> 3))
    {
        x25 = 0x1fffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 2);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x23 = nullptr;
        }
        else if ((x25 >> 0x3d) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0xffffffffffffffe < (x9_2 >> 3) || (0xffffffffffffffe >= (x9_2 >> 3) && x25 != 0)))
    {
        x23 = operator new((x25 << 3));
    }
    void* x24_1 = &x23[x24];
    *x24_1 = *arg2;
    if (x21 >= 1)
    {
        memcpy(x23, x20, x21);
    }
    *arg1 = x23;
    arg1[1] = (x24_1 + 8);
    arg1[2] = &x23[x25];
    if (x20 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x20);
}

void nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(uint8_t* arg1, char* arg2)
{
    uint32_t x9 = *arg2;
    *(arg1 + 8) = 0;
    uint64_t x8 = (x9 - 1);
    *arg1 = x9;
    if (x8 <= 6)
    {
        uint8_t* x20_1;
        switch (x8)
        {
            case 0:
            {
                x20_1 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > > const&>(*(arg2 + 8));
                break;
            }
            case 1:
            {
                *(arg2 + 8);
                uint8_t* x0_2 = operator new(0x18);
                x20_1 = x0_2;
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::vector(x0_2);
                break;
            }
            case 2:
            {
                x20_1 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(*(arg2 + 8));
                break;
            }
            case 3:
            {
                x20_1 = arg2[8];
                break;
            }
            case 4:
            case 5:
            case 6:
            {
                x20_1 = *(arg2 + 8);
                break;
            }
        }
        *(arg1 + 8) = x20_1;
    }
}

char* nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator->(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x9 = _ReadStatusReg(tpidr_el0);
    char* x0 = *arg1;
    uint32_t x10_1 = *x0;
    if (x10_1 == 2)
    {
        x0 = arg1[2];
    }
    else if (x10_1 == 1)
    {
        x0 = (arg1[1] + 0x38);
    }
    else if (arg1[3] != 0)
    {
        void* thrown_exception = __cxa_allocate_exception(0x20);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        __builtin_strncpy(&s, " cannot get value", 0x12);
        nlohmann::detail::invalid_iterator::create(0xd6, &s);
        __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::invalid_iterator, nlohmann::detail::exception::~exception);
        /* no return */
    }
    if (*(x9 + 0x28) != *(x9 + 0x28))
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

void nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, 0>(char* arg1, int64_t* arg2, int64_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x21 + 0x28);
    int64_t s_1;
    if (*arg2 != arg1)
    {
        void* thrown_exception = __cxa_allocate_exception(0x20);
        __builtin_memset(&s_1, 0, 0x18);
        int64_t x0_5;
        int128_t v0;
        x0_5 = operator new(0x30);
        s_1 = data_2cd80;
        int64_t var_60 = x0_5;
        __builtin_strncpy(x0_5, "iterator does not fit current value", 0x24);
        nlohmann::detail::invalid_iterator::create(0xca, &s_1);
        __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::invalid_iterator, nlohmann::detail::exception::~exception);
        /* no return */
    }
    *arg3 = arg1;
    arg3[1] = 0;
    arg3[2] = 0;
    arg3[3] = -0x8000000000000000;
    uint32_t x8 = *arg1;
    if (x8 == 2)
    {
        void* x22_1 = *(arg1 + 8);
        int64_t x8_2 = *(x22_1 + 8);
        arg3[2] = x8_2;
        char* i_2 = arg2[2];
        void* x20_1 = &i_2[0x10];
        char* i;
        if (x20_1 == x8_2)
        {
            i = i_2;
        }
        else
        {
            i = i_2;
            do
            {
                char* i_1 = i;
                i = &i[0x10];
                char x9_2 = *i;
                int64_t x10_1 = *(i_1 + 0x18);
                *i = 0;
                char x1_1 = *i_1;
                *(i_1 + 0x18) = 0;
                *i_1 = x9_2;
                s_1 = x1_1;
                int64_t x9_3 = *(i_1 + 8);
                *(i_1 + 8) = x10_1;
                int64_t var_68 = x9_3;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
            } while ((x8_2 - 0x10) != i);
            x20_1 = *(x22_1 + 8);
        }
        if ((x20_1 == x8_2 || (x20_1 != x8_2 && x20_1 != i)))
        {
            do
            {
                x20_1 = (x20_1 - 0x10);
                *x20_1;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy((x20_1 + 8));
            } while (i != x20_1);
        }
        *(x22_1 + 8) = i;
        arg3[2] = i_2;
    }
    else if (x8 == 1)
    {
        int64_t x0 = *(arg1 + 8);
        arg3[1] = (x0 + 8);
        arg2[1];
        arg3[1] = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::erase(x0);
    }
    else
    {
        arg3[3] = 1;
        if ((x8 - 3) > 4)
        {
            void* thrown_exception_1 = __cxa_allocate_exception(0x20);
            int64_t x8_6 = *arg1;
            char* x20_2;
            if (x8_6 > 8)
            {
                x20_2 = "number";
            }
            else
            {
                x20_2 = &data_44348[x8_6];
            }
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            size_t x0_9 = strlen(x20_2);
            if (x0_9 < -0x10)
            {
                x0_9 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            }
            int64_t x22_2;
            if (x0_9 >= 0x17)
            {
                uint64_t x23_1 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                int64_t x0_11 = operator new(x23_1);
                x22_2 = x0_11;
                size_t var_80_1 = x0_9;
                int64_t var_78_1 = x0_11;
                s = (x23_1 | 1);
            }
            else
            {
                x22_2 = (&s | 1);
                s = (x0_9 << 1);
            }
            if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
            {
                memcpy(x22_2, x20_2, x0_9);
            }
            *(x22_2 + x0_9) = 0;
            int128_t* s_2;
            int128_t v0_1;
            s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s, nullptr, "cannot use erase() with ");
            int64_t var_60_1 = s_2[1];
            s_1 = *s_2;
            __builtin_memset(s_2, 0, 0x18);
            nlohmann::detail::type_error::create(0x133, &s_1);
            __cxa_throw(thrown_exception_1, _typeinfo_for_nlohmann::detail::type_error, nlohmann::detail::exception::~exception);
            /* no return */
        }
        if (arg2[3] != 0)
        {
            void* thrown_exception_2 = __cxa_allocate_exception(0x20);
            __builtin_memset(&s_1, 0, 0x18);
            __builtin_strncpy(&s_1, "*iterator out of range", 0x17);
            nlohmann::detail::invalid_iterator::create(0xcd, &s_1);
            __cxa_throw(thrown_exception_2, _typeinfo_for_nlohmann::detail::invalid_iterator, nlohmann::detail::exception::~exception);
            /* no return */
        }
        if (x8 == 3)
        {
            void* x0_2 = *(arg1 + 8);
            if ((*x0_2 & 1) != 0)
            {
                operator delete(*(x0_2 + 0x10));
                x0_2 = *(arg1 + 8);
            }
            operator delete(x0_2);
            *(arg1 + 8) = 0;
        }
        *arg1 = 0;
    }
    if (*(x21 + 0x28) != x9)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t** nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::less<void>, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > > const&>(int64_t* arg1)
{
    int64_t** x0 = operator new(0x18);
    x0[1] = 0;
    x0[2] = 0;
    *x0 = &x0[1];
    int64_t* i = *arg1;
    while (i != &arg1[1])
    {
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__emplace_hint_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > const&>(x0, &x0[1], &i[4]);
        int64_t* j = i[1];
        if (j != 0)
        {
            do
            {
                i = j;
                j = *j;
            } while (j != 0);
        }
        else
        {
            void* x8_2 = &i[2];
            int64_t* i_1 = *x8_2;
            if (*i_1 == i)
            {
                i = i_1;
            }
            else
            {
                void* j_1;
                do
                {
                    j_1 = *x8_2;
                    x8_2 = (j_1 + 0x10);
                    i = *x8_2;
                } while (*i != j_1);
            }
        }
    }
    return x0;
}

std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__emplace_hint_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > const&>(int64_t* arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg2, int64_t arg3, char* arg4)
{
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_78;
    int64_t var_70;
    int64_t* x0 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2, &var_70, &var_78);
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x19 = *x0;
    if (x19 == 0)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_1;
        int128_t v0_1;
        x0_1 = operator new(0x48);
        *(x0_1 + 0x20) = 0;
        *(x0_1 + 0x28) = 0;
        *(x0_1 + 0x30) = 0;
        x19 = x0_1;
        if ((*arg4 & 1) == 0)
        {
            v0_1 = *arg4;
            *(x0_1 + 0x30) = *(arg4 + 0x10);
            *(x0_1 + 0x20) = v0_1;
        }
        else
        {
            size_t x24_1 = *(arg4 + 8);
            if (x24_1 < -0x10)
            {
                int64_t x0_9 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                operator delete(x19);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** x0_12;
                void* x1_3;
                void** x2_2;
                void* x3_1;
                char* x4_1;
                x0_12 = _Unwind_Resume(x0_9);
                /* tailcall */
                return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_12, x1_3, x2_2, x3_1, x4_1);
            }
            int64_t x25_1 = *(arg4 + 0x10);
            void* x26_1;
            if (x24_1 >= 0x17)
            {
                uint64_t x27_1 = ((x24_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_3 = operator new(x27_1);
                x26_1 = x0_3;
                *(x19 + 0x28) = x24_1;
                *(x19 + 0x30) = x0_3;
                *(x19 + 0x20) = (x27_1 | 1);
            }
            else
            {
                x26_1 = (x19 + 0x21);
                *(x19 + 0x20) = (x24_1 << 1);
            }
            if ((x24_1 >= 0x17 || (x24_1 < 0x17 && x24_1 != 0)))
            {
                memcpy(x26_1, x25_1, x24_1);
            }
            *(x26_1 + x24_1) = 0;
        }
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json((x19 + 0x38));
        int64_t x8_6 = var_70;
        *x19 = 0;
        *(x19 + 8) = 0;
        *(x19 + 0x10) = x8_6;
        *x0 = x19;
        int64_t x8_8 = **arg1;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x1_2;
        if (x8_8 == 0)
        {
            x1_2 = x19;
        }
        else
        {
            *arg1 = x8_8;
            x1_2 = *x0;
        }
        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(arg1[1], x1_2);
        arg1[2] = (arg1[2] + 1);
    }
    if (*(x28 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

void* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg1, void* arg2, void** arg3, void* arg4, char* arg5)
{
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** x0_6;
    void** x8_10;
    void* i_7;
    if (&arg1[1] == arg2)
    {
    label_2238c:
        void* i_4 = *arg2;
        void* i_5 = arg2;
        if (*arg1 != arg2)
        {
            if (i_4 == 0)
            {
                i_5 = arg2;
                void* i;
                do
                {
                    i = i_5;
                    i_5 = *(i_5 + 0x10);
                } while (*i_5 == i);
            }
            else
            {
                void* i_1 = i_4;
                do
                {
                    i_5 = i_1;
                    i_1 = *(i_1 + 8);
                } while (i_1 != 0);
            }
            uint64_t x9_5 = *(i_5 + 0x20);
            uint64_t x10_2 = *arg5;
            uint64_t x20_3;
            if ((x10_2 & 1) == 0)
            {
                x20_3 = (x10_2 >> 1);
            }
            else
            {
                x20_3 = *(arg5 + 8);
            }
            uint64_t x22_2;
            if ((x9_5 & 1) == 0)
            {
                x22_2 = (x9_5 >> 1);
            }
            else
            {
                x22_2 = *(i_5 + 0x28);
            }
            uint64_t x2_2;
            if (x20_3 < x22_2)
            {
                x2_2 = x20_3;
            }
            else
            {
                x2_2 = x22_2;
            }
            int32_t x0_5;
            if (x2_2 != 0)
            {
                void* x0_4;
                if ((x9_5 & 1) != 0)
                {
                    x0_4 = *(i_5 + 0x30);
                }
                else
                {
                    x0_4 = (i_5 + 0x21);
                }
                void* x1_2;
                if ((x10_2 & 1) != 0)
                {
                    x1_2 = *(arg5 + 0x10);
                }
                else
                {
                    x1_2 = &arg5[1];
                }
                x0_5 = memcmp(x0_4, x1_2, x2_2);
            }
            if (((x2_2 == 0 || (x2_2 != 0 && x0_5 == 0)) && x22_2 >= x20_3))
            {
            label_22474:
                x0_6 = arg1;
            label_2249c:
                /* tailcall */
                return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_6, arg3);
            }
            if (((x2_2 != 0 && x0_5 != 0) && (x0_5 & 0x80000000) == 0))
            {
                goto label_22474;
            }
        }
        if (i_4 == 0)
        {
            x8_10 = arg3;
            i_7 = arg2;
        label_224c4:
            *x8_10 = arg2;
            goto label_225b4;
        }
        i_7 = (i_5 + 8);
        *arg3 = i_5;
    label_225b4:
        return i_7;
    }
    uint64_t x19_1 = *(arg2 + 0x20);
    uint64_t x23_1 = *arg5;
    uint64_t x22_1;
    if ((x19_1 & 1) == 0)
    {
        x22_1 = (x19_1 >> 1);
    }
    else
    {
        x22_1 = *(arg2 + 0x28);
    }
    uint64_t x27_1;
    if ((x23_1 & 1) == 0)
    {
        x27_1 = (x23_1 >> 1);
    }
    else
    {
        x27_1 = *(arg5 + 8);
    }
    uint64_t x24_1;
    if (x22_1 < x27_1)
    {
        x24_1 = x22_1;
    }
    else
    {
        x24_1 = x27_1;
    }
    int32_t x0_1;
    void* x25_1;
    void* x26_1;
    if (x24_1 != 0)
    {
        if ((x23_1 & 1) != 0)
        {
            x26_1 = *(arg5 + 0x10);
        }
        else
        {
            x26_1 = &arg5[1];
        }
        if ((x19_1 & 1) != 0)
        {
            x25_1 = *(arg2 + 0x30);
        }
        else
        {
            x25_1 = (arg2 + 0x21);
        }
        x0_1 = memcmp(x26_1, x25_1, x24_1);
    }
    if ((x24_1 == 0 || (x24_1 != 0 && x0_1 == 0)))
    {
        if (x27_1 < x22_1)
        {
            goto label_2238c;
        }
        if (x24_1 != 0)
        {
            if ((x19_1 & 1) != 0)
            {
                x25_1 = *(arg2 + 0x30);
            }
            else
            {
                x25_1 = (arg2 + 0x21);
            }
            if ((x23_1 & 1) != 0)
            {
                x26_1 = *(arg5 + 0x10);
            }
            else
            {
                x26_1 = &arg5[1];
            }
            goto label_223e0;
        }
    }
    if ((x24_1 != 0 && x0_1 != 0))
    {
        if ((x0_1 & 0x80000000) != 0)
        {
            goto label_2238c;
        }
    label_223e0:
        int32_t x0_3 = memcmp(x25_1, x26_1, x24_1);
        if (x0_3 != 0)
        {
            if ((x0_3 & 0x80000000) == 0)
            {
                goto label_223f0;
            }
            goto label_224d8;
        }
    }
    if ((((x24_1 == 0 || (x24_1 != 0 && x0_1 == 0)) && x27_1 >= x22_1) || (x24_1 != 0 && x0_1 != 0)))
    {
        if (x22_1 >= x27_1)
        {
        label_223f0:
            i_7 = arg4;
            *arg3 = arg2;
            *i_7 = arg2;
            goto label_225b4;
        }
    label_224d8:
        i_7 = (arg2 + 8);
        void* i_3 = *i_7;
        void* i_6;
        if (i_3 == 0)
        {
            void* x8_12 = (arg2 + 0x10);
            i_6 = *x8_12;
            if (*i_6 != arg2)
            {
                void* i_2;
                do
                {
                    i_2 = *x8_12;
                    x8_12 = (i_2 + 0x10);
                    i_6 = *x8_12;
                } while (*i_6 != i_2);
            }
        }
        else
        {
            do
            {
                i_6 = i_3;
                i_3 = *i_3;
            } while (i_3 != 0);
        }
        if (i_6 != &arg1[1])
        {
            uint64_t x9_8 = *(i_6 + 0x20);
            uint64_t x19_2;
            if ((x9_8 & 1) == 0)
            {
                x19_2 = (x9_8 >> 1);
            }
            else
            {
                x19_2 = *(i_6 + 0x28);
            }
            uint64_t x2_5;
            if (x19_2 < x27_1)
            {
                x2_5 = x19_2;
            }
            else
            {
                x2_5 = x27_1;
            }
            int32_t x0_9;
            if (x2_5 != 0)
            {
                void* x0_8;
                if ((x23_1 & 1) != 0)
                {
                    x0_8 = *(arg5 + 0x10);
                }
                else
                {
                    x0_8 = &arg5[1];
                }
                void* x1_5;
                if ((x9_8 & 1) != 0)
                {
                    x1_5 = *(i_6 + 0x30);
                }
                else
                {
                    x1_5 = (i_6 + 0x21);
                }
                x0_9 = memcmp(x0_8, x1_5, x2_5);
            }
            if (((x2_5 == 0 || (x2_5 != 0 && x0_9 == 0)) && x27_1 >= x19_2))
            {
            label_22570:
                x0_6 = arg1;
                goto label_2249c;
            }
            if (((x2_5 != 0 && x0_9 != 0) && (x0_9 & 0x80000000) == 0))
            {
                goto label_22570;
            }
        }
        if (*(arg2 + 8) == 0)
        {
            x8_10 = arg3;
            goto label_224c4;
        }
        i_7 = i_6;
        *arg3 = i_6;
        goto label_225b4;
    }
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, void** arg2, char* arg3)
{
    int64_t* x20_1 = (arg1 + 8);
    int64_t* x24 = *x20_1;
    if (x24 == 0)
    {
        *arg2 = x20_1;
    }
    else
    {
        uint64_t x8_1 = *arg3;
        x20_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x25_1;
        if (temp0_1 == 0)
        {
            x25_1 = (x8_1 >> 1);
        }
        else
        {
            x25_1 = *(arg3 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg3 + 0x10);
        }
        else
        {
            x21_1 = &arg3[1];
        }
        while (true)
        {
            uint64_t x28_1 = x24[4];
            uint64_t x26_1;
            if ((x28_1 & 1) == 0)
            {
                x26_1 = (x28_1 >> 1);
            }
            else
            {
                x26_1 = x24[5];
            }
            uint64_t x22_1;
            if (x26_1 < x25_1)
            {
                x22_1 = x26_1;
            }
            else
            {
                x22_1 = x25_1;
            }
            int32_t x0_1;
            void* x23_1;
            if (x22_1 != 0)
            {
                if ((x28_1 & 1) != 0)
                {
                    x23_1 = x24[6];
                }
                else
                {
                    x23_1 = (x24 + 0x21);
                }
                x0_1 = memcmp(x21_1, x23_1, x22_1);
            }
            int64_t* x8_2;
            if ((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)))
            {
                if (x25_1 < x26_1)
                {
                label_22664:
                    x8_2 = *x24;
                    if (x8_2 == 0)
                    {
                        *arg2 = x24;
                        x20_1 = x24;
                        break;
                    }
                    x20_1 = x24;
                    goto label_2260c;
                }
                if (x22_1 != 0)
                {
                    if ((x28_1 & 1) != 0)
                    {
                        x23_1 = x24[6];
                    }
                    else
                    {
                        x23_1 = (x24 + 0x21);
                    }
                    goto label_22690;
                }
            }
            if ((x22_1 != 0 && x0_1 != 0))
            {
                if ((x0_1 & 0x80000000) != 0)
                {
                    goto label_22664;
                }
            label_22690:
                int32_t x0_3 = memcmp(x23_1, x21_1, x22_1);
                if (x0_3 != 0)
                {
                    if ((x0_3 & 0x80000000) == 0)
                    {
                        goto label_226b4;
                    }
                    goto label_226ac;
                }
            }
            if ((((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)) && x25_1 >= x26_1) || (x22_1 != 0 && x0_1 != 0)))
            {
                if (x26_1 >= x25_1)
                {
                label_226b4:
                    *arg2 = x24;
                    break;
                }
            label_226ac:
                x20_1 = &x24[1];
                x8_2 = *x20_1;
                if (x8_2 == 0)
                {
                    goto label_226b4;
                }
            label_2260c:
                x24 = x8_2;
            }
        }
    }
    return x20_1;
}

uint64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::vector(uint64_t* arg1, int64_t* arg2)
{
    __builtin_memset(arg1, 0, 0x18);
    int64_t x8 = *arg2;
    int64_t x9 = arg2[1];
    uint64_t x0 = (x9 - x8);
    if (x9 != x8)
    {
        int64_t x21_1 = (x0 >> 4);
        if ((x21_1 >> 0x3c) != 0)
        {
            int64_t x0_2 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            uint64_t x21_3 = *arg1;
            if (x21_3 != 0)
            {
                char* x22_1 = arg1[1];
                uint64_t x0_3 = x21_3;
                if (x22_1 != x21_3)
                {
                    do
                    {
                        x22_1 = &x22_1[-0x10];
                        *x22_1;
                        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x22_1[8]);
                    } while (x21_3 != x22_1);
                    x0_3 = *arg1;
                }
                arg1[1] = x21_3;
                operator delete(x0_3);
            }
            /* tailcall */
            return nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(_Unwind_Resume(x0_2));
        }
        x0 = operator new(x0);
        *arg1 = x0;
        arg1[1] = x0;
        arg1[2] = (x0 + (x21_1 << 4));
        int64_t x21_2 = *arg2;
        int64_t x20_2 = arg2[1];
        if (x21_2 != x20_2)
        {
            do
            {
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::basic_json(x0);
                x21_2 = (x21_2 + 0x10);
                x0 = (arg1[1] + 0x10);
                arg1[1] = x0;
            } while (x20_2 != x21_2);
        }
    }
    return x0;
}

int128_t* nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(char* arg1)
{
    int128_t* s;
    int128_t v0;
    s = operator new(0x18);
    __builtin_memset(s, 0, 0x18);
    if ((*arg1 & 1) == 0)
    {
        s[1] = *(arg1 + 0x10);
        *s = *arg1;
    }
    else
    {
        size_t x20_1 = *(arg1 + 8);
        if (x20_1 < -0x10)
        {
            int64_t x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            operator delete(s);
            int64_t* x0_8;
            int64_t* x1_2;
            x0_8 = _Unwind_Resume(x0_5);
            /* tailcall */
            return nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(x0_8, x1_2);
        }
        int64_t x21_1 = *(arg1 + 0x10);
        void* x22_2;
        if (x20_1 >= 0x17)
        {
            uint64_t x23_1 = ((x20_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x23_1);
            x22_2 = x0_1;
            *(s + 8) = x20_1;
            s[1] = x0_1;
            *s = (x23_1 | 1);
        }
        else
        {
            *s = (x20_1 << 1);
            x22_2 = (s + 1);
        }
        if ((x20_1 >= 0x17 || (x20_1 < 0x17 && x20_1 != 0)))
        {
            memcpy(x22_2, x21_1, x20_1);
        }
        *(x22_2 + x20_1) = 0;
    }
    return s;
}

int64_t nlohmann::detail::iter_impl<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::operator==(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    char* x9_1 = *arg1;
    if (x9_1 != *arg2)
    {
        void* thrown_exception = __cxa_allocate_exception(0x20);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        void* x0_1;
        int128_t v0;
        x0_1 = operator new(0x40);
        v0 = data_2cd90;
        void* var_40 = x0_1;
        *(x0_1 + 0x30) = 0;
        s = v0;
        __builtin_strncpy(x0_1, "cannot compare iterators of different containers", 0x30);
        nlohmann::detail::invalid_iterator::create(0xd4, &s);
        __cxa_throw(thrown_exception, _typeinfo_for_nlohmann::detail::invalid_iterator, nlohmann::detail::exception::~exception);
        /* no return */
    }
    uint32_t x9_2 = *x9_1;
    int64_t x9_3;
    int64_t x10_1;
    if (x9_2 == 2)
    {
        x9_3 = arg1[2];
        x10_1 = arg2[2];
    }
    else if (x9_2 != 1)
    {
        x9_3 = arg1[3];
        x10_1 = arg2[3];
    }
    else
    {
        x9_3 = arg1[1];
        x10_1 = arg2[1];
    }
    int64_t x0;
    if (x9_3 == x10_1)
    {
        x0 = 1;
    }
    else
    {
        x0 = 0;
    }
    if (*(x8 + 0x28) != *(x8 + 0x28))
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

int64_t nlohmann::detail::invalid_iterator::create(int32_t arg1, char* arg2, int64_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    __builtin_strncpy(&s, " invalid_iterator", 0x12);
    nlohmann::detail::exception::name(&s, arg1);
    *(arg2 + 8);
    void* x1_1;
    if ((*arg2 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    char var_68;
    int128_t* s_1;
    int128_t v0;
    s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_68, x1_1);
    void* x8_2 = s_1[1];
    int128_t var_50 = *s_1;
    __builtin_memset(s_1, 0, 0x18);
    void* var_58;
    if ((var_68 & 1) != 0)
    {
        operator delete(var_58);
    }
    void* var_70;
    if ((s & 1) != 0)
    {
        operator delete(var_70);
    }
    arg3[1] = arg1;
    *arg3 = (_vtable_for_nlohmann::detail::exception + 0x10);
    int64_t x0_5 = std::runtime_error::runtime_error(&arg3[2]);
    uint32_t x8_6 = var_50;
    *arg3 = (_vtable_for_nlohmann::detail::invalid_iterator + 0x10);
    if ((x8_6 & 1) != 0)
    {
        x0_5 = operator delete(x8_2);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t nlohmann::detail::invalid_iterator::~invalid_iterator(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t nlohmann::detail::type_error::create(int32_t arg1, char* arg2, int64_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t var_80 = 0;
    int64_t var_78 = 0;
    var_80 = 0x14;
    void* var_70 = nullptr;
    __builtin_strncpy(&*var_80[1], "type_error", 0xb);
    nlohmann::detail::exception::name(&var_80, arg1);
    *(arg2 + 8);
    void* x1_1;
    if ((*arg2 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    char var_68;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_68, x1_1);
    void* x8_2 = s[1];
    int128_t var_50 = *s;
    __builtin_memset(s, 0, 0x18);
    void* var_58;
    if ((var_68 & 1) != 0)
    {
        operator delete(var_58);
    }
    if ((var_80 & 1) != 0)
    {
        operator delete(var_70);
    }
    arg3[1] = arg1;
    *arg3 = (_vtable_for_nlohmann::detail::exception + 0x10);
    int64_t x0_5 = std::runtime_error::runtime_error(&arg3[2]);
    uint32_t x8_6 = var_50;
    *arg3 = (_vtable_for_nlohmann::detail::type_error + 0x10);
    if ((x8_6 & 1) != 0)
    {
        x0_5 = operator delete(x8_2);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::erase(int64_t* arg1, void* arg2)
{
    int64_t* i_1 = *(arg2 + 8);
    int64_t* i_2;
    if (i_1 == 0)
    {
        int64_t** x8_1 = (arg2 + 0x10);
        i_2 = *x8_1;
        if (*i_2 != arg2)
        {
            int64_t* i;
            do
            {
                i = *x8_1;
                x8_1 = &i[2];
                i_2 = *x8_1;
            } while (*i_2 != i);
        }
    }
    else
    {
        do
        {
            i_2 = i_1;
            i_1 = *i_1;
        } while (i_1 != 0);
    }
    if (*arg1 == arg2)
    {
        *arg1 = i_2;
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x8_4 = arg1[1];
    arg1[2] = (arg1[2] - 1);
    std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(x8_4, arg2);
    *(arg2 + 0x38);
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy((arg2 + 0x40));
    if ((*(arg2 + 0x20) & 1) != 0)
    {
        operator delete(*(arg2 + 0x30));
    }
    operator delete(arg2);
    return i_2;
}

void std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(int64_t* arg1, int64_t* arg2)
{
    int64_t* x9 = *arg2;
    int64_t* i;
    int64_t* i_1;
    if (x9 == 0)
    {
        i_1 = arg2;
        x9 = i_1[1];
    }
    else
    {
        i = arg2[1];
        if (i == 0)
        {
            i_1 = arg2;
        }
        else
        {
            do
            {
                i_1 = i;
                i = *i;
            } while (i != 0);
            x9 = i_1[1];
        }
    }
    int32_t x11;
    void* x12;
    if ((((x9 != 0 && i == 0) || x9 == 0) || ((x9 != 0 && i != 0) && x9 != 0)))
    {
        x12 = &i_1[2];
        x11 = 1;
        x9[2] = *x12;
    }
    if ((x9 == 0 || (i != 0 && x9 == 0)))
    {
        x11 = 0;
        x12 = &i_1[2];
    }
    int64_t* x13 = i_1[2];
    int64_t* x8_2 = *x13;
    if (x8_2 != i_1)
    {
        x13[1] = x9;
    }
    else
    {
        *x13 = x9;
        if (i_1 == arg1)
        {
            x8_2 = nullptr;
            arg1 = x9;
        }
        else
        {
            x8_2 = x13[1];
        }
    }
    uint32_t x13_1 = i_1[3];
    if (i_1 != arg2)
    {
        void** x14_1 = arg2[2];
        *x12 = x14_1;
        int64_t x12_4;
        if (*arg2[2] == arg2)
        {
            x12_4 = 0;
        }
        else
        {
            x12_4 = 8;
        }
        *(x14_1 + x12_4) = i_1;
        void* x12_5 = *arg2;
        *i_1 = x12_5;
        *(x12_5 + 0x10) = i_1;
        void* x12_6 = arg2[1];
        i_1[1] = x12_6;
        if (x12_6 != 0)
        {
            *(x12_6 + 0x10) = i_1;
        }
        if (arg1 == arg2)
        {
            arg1 = i_1;
        }
        i_1[3] = arg2[3];
    }
    if ((x13_1 != 0 && arg1 != 0))
    {
        if ((x11 & 1) == 0)
        {
            void* x9_3;
            void* x10_3;
            void* x11_9;
            while (true)
            {
                int64_t* x11_2 = x8_2[2];
                uint32_t x12_9 = x8_2[3];
                int64_t* x11_4;
                if (*x11_2 == x8_2)
                {
                    void* x9_4;
                    void* x10_4;
                    void* x11_5;
                    char* x11_10;
                    if (x12_9 != 0)
                    {
                        x11_5 = *x8_2;
                        if (x11_5 == 0)
                        {
                        label_22f68:
                            int64_t** x12_14 = x8_2[1];
                            if (x12_14 != 0)
                            {
                                if (x12_14[3] != 0)
                                {
                                    goto label_22f78;
                                }
                                if (x11_5 == 0)
                                {
                                    goto label_230f0;
                                }
                                x11_10 = (x11_5 + 0x18);
                                if (*x11_10 == 0)
                                {
                                    goto label_230c8;
                                }
                                x12_14 = x8_2[1];
                            label_230f0:
                                x9_4 = &x12_14[3];
                                *x9_4 = 1;
                                x11_10 = &x8_2[3];
                                *x11_10 = 0;
                                int64_t* x10_5 = *x12_14;
                                *(x11_10 - 0x10) = x10_5;
                                if (x10_5 != 0)
                                {
                                    x10_5[2] = x8_2;
                                }
                                x10_4 = &x12_14[2];
                                *x10_4 = x8_2[2];
                                int64_t*** x13_13 = x8_2[2];
                                int64_t x14_8;
                                if (*x13_13 == x8_2)
                                {
                                    x14_8 = 0;
                                }
                                else
                                {
                                    x14_8 = 8;
                                }
                                *(x13_13 + x14_8) = x12_14;
                                *x12_14 = x8_2;
                                x8_2[2] = x12_14;
                                goto label_23134;
                            }
                        label_22f78:
                            x11_4 = x8_2[2];
                            x8_2[3] = 0;
                            if (x11_4 == arg1)
                            {
                                goto label_23058;
                            }
                        }
                    }
                    else
                    {
                        x8_2[3] = 1;
                        x11_2[3] = 0;
                        int64_t* x12_13 = x8_2[1];
                        *x11_2 = x12_13;
                        if (x12_13 != 0)
                        {
                            x12_13[2] = x11_2;
                        }
                        x8_2[2] = x11_2[2];
                        int64_t** x13_9 = x11_2[2];
                        if (*x13_9 == x11_2)
                        {
                            *x13_9 = x8_2;
                            x12_13 = *x11_2;
                        }
                        else
                        {
                            x13_9[1] = x8_2;
                        }
                        x8_2[1] = x11_2;
                        x11_2[2] = x8_2;
                        if (arg1 == x11_2)
                        {
                            arg1 = x8_2;
                        }
                        x8_2 = x12_13;
                        x11_5 = *x8_2;
                        if (x11_5 == 0)
                        {
                            goto label_22f68;
                        }
                    }
                    if (((x12_9 != 0 && x11_5 != 0) || x12_9 == 0))
                    {
                        if (*(x11_5 + 0x18) != 0)
                        {
                            goto label_22f68;
                        }
                        x11_10 = (x11_5 + 0x18);
                    label_230c8:
                        x10_4 = &x8_2[2];
                        x9_4 = &x8_2[3];
                    label_23134:
                        void** x8_5 = *x10_4;
                        *x9_4 = x8_5[3];
                        x8_5[3] = 1;
                        *x11_10 = 1;
                        void* x9_7 = *x8_5;
                        void* x10_8 = *(x9_7 + 8);
                        *x8_5 = x10_8;
                        if (x10_8 != 0)
                        {
                            *(x10_8 + 0x10) = x8_5;
                        }
                        *(x9_7 + 0x10) = x8_5[2];
                        int64_t* x10_10 = x8_5[2];
                        int64_t x11_13;
                        if (*x10_10 == x8_5)
                        {
                            x11_13 = 0;
                        }
                        else
                        {
                            x11_13 = 8;
                        }
                        *(x10_10 + x11_13) = x9_7;
                        *(x9_7 + 8) = x8_5;
                        x8_5[2] = x9_7;
                        return;
                    }
                }
                else
                {
                    void* x11_7;
                    void* x12_10;
                    if (x12_9 != 0)
                    {
                        x12_10 = *x8_2;
                        if (x12_10 == 0)
                        {
                        label_22f30:
                            x11_7 = x8_2[1];
                            if (x11_7 != 0)
                            {
                                if (*(x11_7 + 0x18) != 0)
                                {
                                    goto label_22f40;
                                }
                            label_23068:
                                x11_9 = (x11_7 + 0x18);
                                if (*x11_9 == 0)
                                {
                                    x10_3 = &x8_2[2];
                                    x9_3 = &x8_2[3];
                                    break;
                                }
                                goto label_2307c;
                            }
                        label_22f40:
                            x11_4 = x8_2[2];
                            x8_2[3] = 0;
                            if (x11_4 == arg1)
                            {
                                x11_4 = arg1;
                            label_23058:
                                x11_4[3] = 1;
                                return;
                            }
                        }
                    }
                    else
                    {
                        x8_2[3] = 1;
                        int64_t** x12_12 = x11_2[1];
                        x11_2[3] = 0;
                        int64_t* x13_5 = *x12_12;
                        x11_2[1] = x13_5;
                        if (x13_5 != 0)
                        {
                            x13_5[2] = x11_2;
                        }
                        x12_12[2] = x11_2[2];
                        int64_t* x13_7 = x11_2[2];
                        int64_t x14_3;
                        if (*x13_7 == x11_2)
                        {
                            x14_3 = 0;
                        }
                        else
                        {
                            x14_3 = 8;
                        }
                        *(x13_7 + x14_3) = x12_12;
                        *x12_12 = x11_2;
                        x11_2[2] = x12_12;
                        void* x11_6 = *x8_2;
                        if (arg1 == x11_6)
                        {
                            arg1 = x8_2;
                        }
                        x8_2 = *(x11_6 + 8);
                        x12_10 = *x8_2;
                        if (x12_10 == 0)
                        {
                            goto label_22f30;
                        }
                    }
                    if (((x12_9 != 0 && x12_10 != 0) || x12_9 == 0))
                    {
                        if (*(x12_10 + 0x18) != 0)
                        {
                            goto label_22f30;
                        }
                        x11_7 = x8_2[1];
                        if (x11_7 != 0)
                        {
                            goto label_23068;
                        }
                    label_2307c:
                        x9_3 = (x12_10 + 0x18);
                        *x9_3 = 1;
                        x11_9 = &x8_2[3];
                        *x11_9 = 0;
                        void* x10_1 = *(x9_3 - 0x10);
                        *x8_2 = x10_1;
                        if (x10_1 != 0)
                        {
                            *(x10_1 + 0x10) = x8_2;
                        }
                        x10_3 = (x12_10 + 0x10);
                        *x10_3 = x8_2[2];
                        void** x13_11 = x8_2[2];
                        int64_t x14_6;
                        if (*x13_11 == x8_2)
                        {
                            x14_6 = 0;
                        }
                        else
                        {
                            x14_6 = 8;
                        }
                        *(x13_11 + x14_6) = x12_10;
                        *(x12_10 + 8) = x8_2;
                        x8_2[2] = x12_10;
                        break;
                    }
                }
                if (x11_4[3] == 0)
                {
                    goto label_23058;
                }
                int64_t* x8_3 = x11_4[2];
                int32_t x11_1;
                if (*x8_3 == x11_4)
                {
                    x11_1 = 1;
                }
                else
                {
                    x11_1 = 0;
                }
                x8_2 = x8_3[x11_1];
            }
            void* x8_6 = *x10_3;
            *x9_3 = *(x8_6 + 0x18);
            *(x8_6 + 0x18) = 1;
            *x11_9 = 1;
            void** x9_8 = *(x8_6 + 8);
            void* x10_12 = *x9_8;
            *(x8_6 + 8) = x10_12;
            if (x10_12 != 0)
            {
                *(x10_12 + 0x10) = x8_6;
            }
            x9_8[2] = *(x8_6 + 0x10);
            void*** x10_14 = *(x8_6 + 0x10);
            int64_t x11_15;
            if (*x10_14 == x8_6)
            {
                x11_15 = 0;
            }
            else
            {
                x11_15 = 8;
            }
            *(x10_14 + x11_15) = x9_8;
            *x9_8 = x8_6;
            *(x8_6 + 0x10) = x9_8;
            return;
        }
        x9[3] = 1;
    }
}

int64_t nlohmann::detail::type_error::~type_error(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t arg1, int64_t arg2, int64_t* arg3, int64_t* arg4 @ x8)
{
    void* x0;
    int128_t v0;
    x0 = operator new(0x48);
    *arg4 = x0;
    arg4[1] = (arg1 + 8);
    arg4[2] = 0;
    char* x8 = *arg3;
    int64_t* x0_1 = (x0 + 0x20);
    *x0_1 = 0;
    *(x0 + 0x28) = 0;
    *(x0 + 0x30) = 0;
    if ((*x8 & 1) == 0)
    {
        v0 = *x8;
        x0_1[2] = *(x8 + 0x10);
        *x0_1 = v0;
    }
    else
    {
        size_t x21_1 = *(x8 + 8);
        if (x21_1 < -0x10)
        {
            int64_t x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            *arg4 = 0;
            operator delete(x0);
            /* tailcall */
            return nlohmann::detail::out_of_range::~out_of_range(_Unwind_Resume(x0_5));
        }
        int64_t x22_1 = *(x8 + 0x10);
        void* x23_1;
        if (x21_1 >= 0x17)
        {
            uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x24_1);
            x23_1 = x0_3;
            *(x0 + 0x28) = x21_1;
            *(x0 + 0x30) = x0_3;
            *(x0 + 0x20) = (x24_1 | 1);
        }
        else
        {
            x23_1 = (x0 + 0x21);
            *(x0 + 0x20) = (x21_1 << 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            x0_1 = memcpy(x23_1, x22_1, x21_1);
        }
        *(x23_1 + x21_1) = 0;
    }
    *(x0 + 0x38) = 0;
    *(x0 + 0x40) = 0;
    arg4[2] = 1;
    return x0_1;
}

int64_t nlohmann::detail::out_of_range::~out_of_range(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(char* arg1, size_t arg2, int64_t arg3, size_t arg4)
{
    uint64_t x8 = *arg1;
    int64_t x21 = arg3;
    uint64_t x27;
    if ((x8 & 1) != 0)
    {
        x27 = *(arg1 + 8);
    }
    else
    {
        x27 = (x8 >> 1);
    }
    if ((((x8 & 1) != 0 && x27 < arg2) || ((x8 & 1) == 0 && x27 < arg2)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
    label_23558:
        int64_t* x0_11;
        int64_t* x1_5;
        int32_t x2_5;
        x0_11 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(x0_11, x1_5, x2_5);
    }
    if ((((x8 & 1) != 0 && x27 >= arg2) || ((x8 & 1) == 0 && x27 >= arg2)))
    {
        int64_t x28_1;
        if ((x8 & 1) != 0)
        {
            x28_1 = ((*arg1 & 0xfffffffffffffffe) - 1);
        }
        else
        {
            x28_1 = 0x16;
        }
        void* x8_6;
        if (((x28_1 - x27) >= arg4 && arg4 != 0))
        {
            void* x23_2;
            if ((x8 & 1) != 0)
            {
                x23_2 = *(arg1 + 0x10);
            }
            else
            {
                x23_2 = &arg1[1];
            }
            void* x22_1 = (x23_2 + arg2);
            if (x27 != arg2)
            {
                bool c_1;
                bool z_1;
                if ((x23_2 + x27) > x21)
                {
                    c_1 = x22_1 < x21;
                    z_1 = x22_1 == x21;
                }
                else
                {
                    z_1 = false;
                    c_1 = true;
                }
                if ((z_1 || c_1))
                {
                    x21 = (x21 + arg4);
                }
                memmove((x22_1 + arg4), x22_1, (x27 - arg2));
            }
            memmove(x22_1, x21, arg4);
            int64_t x8_5 = (x27 + arg4);
            if ((*arg1 & 1) != 0)
            {
                *(arg1 + 8) = x8_5;
                x8_6 = (x23_2 + x8_5);
            }
            else
            {
                *arg1 = (x8_5 << 1);
                x8_6 = (x23_2 + x8_5);
            }
        }
        if ((x28_1 - x27) < arg4)
        {
            int64_t x23_1 = (x27 + arg4);
            if ((-0x12 - x28_1) < (x23_1 - x28_1))
            {
                goto label_23558;
            }
            void* x8_1;
            if ((x8 & 1) != 0)
            {
                x8_1 = *(arg1 + 0x10);
            }
            else
            {
                x8_1 = &arg1[1];
            }
            uint64_t x24_1;
            if (x28_1 > 0x7fffffffffffffe6)
            {
                x24_1 = -0x11;
            }
            else
            {
                int64_t x8_2 = (x28_1 << 1);
                int64_t x8_3;
                if (x23_1 < x8_2)
                {
                    x8_3 = x8_2;
                }
                else
                {
                    x8_3 = x23_1;
                }
                if (x8_3 >= 0x17)
                {
                    x24_1 = ((x8_3 + 0x10) & 0xfffffffffffffff0);
                }
                else
                {
                    x24_1 = 0x17;
                }
            }
            void* x0_3 = operator new(x24_1);
            if (arg2 != 0)
            {
                memcpy(x0_3, x8_1, arg2);
            }
            void* x26_1 = (x0_3 + arg2);
            memcpy(x26_1, x21, arg4);
            if (x27 != arg2)
            {
                memcpy((x26_1 + arg4), (x8_1 + arg2), (x27 - arg2));
            }
            if (x28_1 != 0x16)
            {
                operator delete(x8_1);
            }
            *arg1 = (x24_1 | 1);
            x8_6 = (x0_3 + x23_1);
            *(arg1 + 8) = x23_1;
            *(arg1 + 0x10) = x0_3;
        }
        if ((((x28_1 - x27) >= arg4 && arg4 != 0) || (x28_1 - x27) < arg4))
        {
            *x8_6 = 0;
        }
        if (((((x28_1 - x27) >= arg4 && arg4 != 0) || (x28_1 - x27) < arg4) || ((x28_1 - x27) >= arg4 && arg4 == 0)))
        {
            return arg1;
        }
    }
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(int64_t* arg1, int64_t* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 7;
        int64_t var_48 = *arg2;
        int64_t* x0;
        int32_t x0_1;
        void* x21;
        if ((arg3 & 1) == 0)
        {
            x21 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21 - *(x21 - 8)) >> 3);
            x0 = *(x21 + 0x70);
            if (x0 == 0)
            {
                sub_13744();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_23730:
                x20_1 = 0;
            label_23764:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                int64_t x9_9 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                int64_t var_58 = x9_9;
                char* x9_10 = *arg1;
                char x1 = *x9_10;
                *x9_10 = x8_14;
                char var_60_2 = x1;
                int64_t x10_2 = *(x9_10 + 8);
                *(x9_10 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_23758:
                x20_1 = 1;
                goto label_23764;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_23730;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_12 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_12) == 0)
                {
                    goto label_23730;
                }
                char x8_18 = var_50;
                int64_t x9_13 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                int64_t var_68 = x9_13;
                char* x9_14 = arg1[0xa];
                char x1_1 = *x9_14;
                *x9_14 = x8_18;
                char var_70_2 = x1_1;
                int64_t x10_6 = *(x9_14 + 8);
                *(x9_14 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_23758;
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2 = *(x8_10 + 8);
            char* x8_11 = *(x0_2 + 8);
            if (x8_11 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21 - 8) + 8) + 8);
            goto label_23758;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(char** arg1, char* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 4;
        uint64_t var_48 = *arg2;
        int64_t* x0;
        int32_t x0_1;
        void* x21;
        if ((arg3 & 1) == 0)
        {
            x21 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21 - *(x21 - 8)) >> 3);
            x0 = *(x21 + 0x70);
            if (x0 == 0)
            {
                sub_13744();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_23988:
                x20_1 = 0;
            label_239bc:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                uint64_t x9_9 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                uint64_t var_58 = x9_9;
                char* x9_10 = *arg1;
                char x1 = *x9_10;
                *x9_10 = x8_14;
                char var_60_2 = x1;
                uint64_t x10_2 = *(x9_10 + 8);
                *(x9_10 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_239b0:
                x20_1 = 1;
                goto label_239bc;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_23988;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_12 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_12) == 0)
                {
                    goto label_23988;
                }
                char x8_18 = var_50;
                uint64_t x9_13 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                uint64_t var_68 = x9_13;
                char* x9_14 = arg1[0xa];
                char x1_1 = *x9_14;
                *x9_14 = x8_18;
                char var_70_2 = x1_1;
                uint64_t x10_6 = *(x9_14 + 8);
                *(x9_14 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_239b0;
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2 = *(x8_10 + 8);
            char* x8_11 = *(x0_2 + 8);
            if (x8_11 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21 - 8) + 8) + 8);
            goto label_239b0;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(int64_t* arg1, int64_t arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x19_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x19_1 = 0;
    }
    else
    {
        char var_50 = 0;
        int64_t var_48 = 0;
        int64_t* x0;
        int32_t x0_1;
        void* x20;
        if ((arg3 & 1) == 0)
        {
            x20 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x20 - *(x20 - 8)) >> 3);
            x0 = *(x20 + 0x70);
            if (x0 == 0)
            {
                sub_13744();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_23bd0:
                x19_1 = 0;
            label_23c08:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x20 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                int64_t x9_8 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                int64_t var_58 = x9_8;
                char* x9_9 = *arg1;
                char x1 = *x9_9;
                *x9_9 = x8_14;
                char var_60_2 = x1;
                int64_t x10_2 = *(x9_9 + 8);
                *(x9_9 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_23bf8:
                x19_1 = 1;
                goto label_23c08;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_23bd0;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_11 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_11) == 0)
                {
                    goto label_23bd0;
                }
                char x8_18 = var_50;
                int64_t x9_12 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                int64_t var_68 = x9_12;
                char* x9_13 = arg1[0xa];
                char x1_1 = *x9_13;
                *x9_13 = x8_18;
                char var_70_2 = x1_1;
                int64_t x10_6 = *(x9_13 + 8);
                *(x9_13 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_23bf8;
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2 = *(x8_10 + 8);
            char* x8_11 = *(x0_2 + 8);
            if (x8_11 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x20 - 8) + 8) + 8);
            goto label_23bf8;
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(int64_t* arg1, int64_t* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 5;
        int64_t var_48 = *arg2;
        int64_t* x0;
        int32_t x0_1;
        void* x21;
        if ((arg3 & 1) == 0)
        {
            x21 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21 - *(x21 - 8)) >> 3);
            x0 = *(x21 + 0x70);
            if (x0 == 0)
            {
                sub_13744();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_23e2c:
                x20_1 = 0;
            label_23e60:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_8 = arg1[2];
            if (arg1[1] == x8_8)
            {
                char x8_13 = var_50;
                int64_t x9_9 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_13;
                int64_t var_58 = x9_9;
                char* x9_10 = *arg1;
                char x1 = *x9_10;
                *x9_10 = x8_13;
                char var_60_2 = x1;
                int64_t x10_3 = *(x9_10 + 8);
                *(x9_10 + 8) = var_58;
                var_58 = x10_3;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_23e54:
                x20_1 = 1;
                goto label_23e60;
            }
            char* x8_9 = *(x8_8 - 8);
            if (x8_9 == 0)
            {
                goto label_23e2c;
            }
            if (*x8_9 != 2)
            {
                int64_t x8_16 = (arg1[8] - 1);
                int64_t x9_12 = *(arg1[7] + ((x8_16 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_16;
                if (((1 << x8_16) & x9_12) == 0)
                {
                    goto label_23e2c;
                }
                char x8_17 = var_50;
                int64_t x9_13 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_17;
                int64_t var_68 = x9_13;
                char* x9_14 = arg1[0xa];
                char x1_1 = *x9_14;
                *x9_14 = x8_17;
                char var_70_2 = x1_1;
                int64_t x10_7 = *(x9_14 + 8);
                *(x9_14 + 8) = var_68;
                var_68 = x10_7;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_23e54;
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2 = *(x8_9 + 8);
            char* x8_10 = *(x0_2 + 8);
            if (x8_10 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_10 = var_50;
                *(x8_10 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21 - 8) + 8) + 8);
            goto label_23e54;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(int64_t* arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 3;
        int64_t var_48 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
        int64_t* x0_2;
        int32_t x0_3;
        void* x21_1;
        if ((arg3 & 1) == 0)
        {
            x21_1 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21_1 - *(x21_1 - 8)) >> 3);
            x0_2 = *(x21_1 + 0x70);
            if (x0_2 == 0)
            {
                sub_13744();
                /* no return */
            }
            x0_3 = *(*x0_2 + 0x30)();
            if ((x0_3 & 1) == 0)
            {
            label_2408c:
                x20_1 = 0;
            label_240c0:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21_1 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0_2 != 0) && (x0_3 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                int64_t x9_8 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                int64_t var_58 = x9_8;
                char* x9_9 = *arg1;
                char x1 = *x9_9;
                *x9_9 = x8_14;
                char var_60_2 = x1;
                int64_t x10_2 = *(x9_9 + 8);
                *(x9_9 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_240b4:
                x20_1 = 1;
                goto label_240c0;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_2408c;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_11 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_11) == 0)
                {
                    goto label_2408c;
                }
                char x8_18 = var_50;
                int64_t x9_12 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                int64_t var_68 = x9_12;
                char* x9_13 = arg1[0xa];
                char x1_1 = *x9_13;
                *x9_13 = x8_18;
                char var_70_2 = x1_1;
                int64_t x10_6 = *(x9_13 + 8);
                *(x9_13 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_240b4;
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_4 = *(x8_10 + 8);
            char* x8_11 = *(x0_4 + 8);
            if (x8_11 >= *(x0_4 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_4);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_4 + 8) = (*(x0_4 + 8) + 0x10);
            }
            *(*(*(*x21_1 - 8) + 8) + 8);
            goto label_240b4;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(int64_t* arg1, int64_t* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x8_2 = (arg1[5] - 1);
    int64_t x20_1;
    if (((1 << x8_2) & *(arg1[4] + ((x8_2 >> 3) & 0x1ffffffffffffff8))) == 0)
    {
        x20_1 = 0;
    }
    else
    {
        char var_50 = 6;
        int64_t var_48 = *arg2;
        int64_t* x0;
        int32_t x0_1;
        void* x21;
        if ((arg3 & 1) == 0)
        {
            x21 = &arg1[2];
            char var_40 = 5;
            uint32_t var_3c = ((*x21 - *(x21 - 8)) >> 3);
            x0 = *(x21 + 0x70);
            if (x0 == 0)
            {
                sub_13744();
                /* no return */
            }
            x0_1 = *(*x0 + 0x30)();
            if ((x0_1 & 1) == 0)
            {
            label_242e4:
                x20_1 = 0;
            label_24318:
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_48);
            }
        }
        else
        {
            x21 = &arg1[2];
        }
        if (((arg3 & 1) != 0 || (((arg3 & 1) == 0 && x0 != 0) && (x0_1 & 1) != 0)))
        {
            void* x8_9 = arg1[2];
            if (arg1[1] == x8_9)
            {
                char x8_14 = var_50;
                int64_t x9_9 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_60_1 = x8_14;
                int64_t var_58 = x9_9;
                char* x9_10 = *arg1;
                char x1 = *x9_10;
                *x9_10 = x8_14;
                char var_60_2 = x1;
                int64_t x10_2 = *(x9_10 + 8);
                *(x9_10 + 8) = var_58;
                var_58 = x10_2;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_58);
                *arg1;
            label_2430c:
                x20_1 = 1;
                goto label_24318;
            }
            char* x8_10 = *(x8_9 - 8);
            if (x8_10 == 0)
            {
                goto label_242e4;
            }
            if (*x8_10 != 2)
            {
                int64_t x8_17 = (arg1[8] - 1);
                int64_t x9_12 = *(arg1[7] + ((x8_17 >> 3) & 0x1ffffffffffffff8));
                arg1[8] = x8_17;
                if (((1 << x8_17) & x9_12) == 0)
                {
                    goto label_242e4;
                }
                char x8_18 = var_50;
                int64_t x9_13 = var_48;
                var_50 = 0;
                var_48 = 0;
                char var_70_1 = x8_18;
                int64_t var_68 = x9_13;
                char* x9_14 = arg1[0xa];
                char x1_1 = *x9_14;
                *x9_14 = x8_18;
                char var_70_2 = x1_1;
                int64_t x10_6 = *(x9_14 + 8);
                *(x9_14 + 8) = var_68;
                var_68 = x10_6;
                nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_68);
                arg1[0xa];
                goto label_2430c;
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2 = *(x8_10 + 8);
            char* x8_11 = *(x0_2 + 8);
            if (x8_11 >= *(x0_2 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >(x0_2);
            }
            else
            {
                *x8_11 = var_50;
                *(x8_11 + 8) = var_48;
                var_50 = 0;
                var_48 = 0;
                *(x0_2 + 8) = (*(x0_2 + 8) + 0x10);
            }
            *(*(*(*x21 - 8) + 8) + 8);
            goto label_2430c;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t nlohmann::detail::parse_error::parse_error(void** arg1, void* arg2)
{
    int64_t* x20 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x20[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x20 = (_vtable_for_nlohmann::detail::parse_error + 0x10);
    x20[4] = *(arg2 + 0x20);
    return x0_1;
}

int64_t nlohmann::detail::out_of_range::out_of_range(void** arg1, void* arg2)
{
    int64_t* x19 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x19[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x19 = (_vtable_for_nlohmann::detail::out_of_range + 0x10);
    return x0_1;
}

int64_t nlohmann::detail::invalid_iterator::invalid_iterator(void** arg1, void* arg2)
{
    int64_t* x19 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x19[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x19 = (_vtable_for_nlohmann::detail::invalid_iterator + 0x10);
    return x0_1;
}

int64_t nlohmann::detail::type_error::type_error(void** arg1, void* arg2)
{
    int64_t* x19 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x19[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x19 = (_vtable_for_nlohmann::detail::type_error + 0x10);
    return x0_1;
}

int64_t nlohmann::detail::other_error::other_error(void** arg1, void* arg2)
{
    int64_t* x19 = arg1;
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    x19[1] = *(arg2 + 8);
    int64_t x0_1 = std::runtime_error::runtime_error(&arg1[2]);
    *x19 = (_vtable_for_nlohmann::detail::other_error + 0x10);
    return x0_1;
}

int64_t nlohmann::detail::parse_error::~parse_error(void** arg1)
{
    *arg1 = (_vtable_for_nlohmann::detail::exception + 0x10);
    std::runtime_error::~runtime_error();
    std::exception::~exception();
    /* tailcall */
    return operator delete(arg1);
}

int128_t* nlohmann::detail::parse_error::position_string(void* arg1, int128_t* arg2 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    std::__ndk1::to_string((*(arg1 + 0x10) + 1));
    char var_88;
    int128_t* s;
    int128_t v0;
    s = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&var_88, nullptr, " at line ");
    void* x8_2 = s[1];
    int128_t var_70 = *s;
    __builtin_memset(s, 0, 0x18);
    int128_t* s_1;
    int128_t v0_1;
    s_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_70, ", column ");
    void* x8_3 = s_1[1];
    int128_t var_50 = *s_1;
    __builtin_memset(s_1, 0, 0x18);
    std::__ndk1::to_string(*(arg1 + 8));
    char var_a0;
    void* var_90;
    uint64_t x1;
    if ((var_a0 & 1) == 0)
    {
        x1 = (&var_a0 | 1);
    }
    else
    {
        x1 = var_90;
    }
    int128_t* s_2;
    int128_t v0_2;
    s_2 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&var_50, x1);
    arg2[1] = s_2[1];
    *arg2 = *s_2;
    __builtin_memset(s_2, 0, 0x18);
    if ((var_a0 & 1) != 0)
    {
        s_2 = operator delete(var_90);
    }
    if ((((var_a0 & 1) != 0 && (var_50 & 1) != 0) || ((var_a0 & 1) == 0 && (var_50 & 1) != 0)))
    {
        s_2 = operator delete(x8_3);
        if ((var_70 & 1) != 0)
        {
            goto label_2467c;
        }
    }
    if ((((((((var_a0 & 1) != 0 && (var_50 & 1) == 0) || ((var_a0 & 1) == 0 && (var_50 & 1) == 0)) && (var_70 & 1) == 0) || ((var_a0 & 1) != 0 && (var_50 & 1) != 0)) || ((var_a0 & 1) == 0 && (var_50 & 1) != 0)) && (var_88 & 1) != 0))
    {
        goto label_24630;
    }
    if (((((var_a0 & 1) != 0 && (var_50 & 1) == 0) || ((var_a0 & 1) == 0 && (var_50 & 1) == 0)) && (var_70 & 1) != 0))
    {
    label_2467c:
        s_2 = operator delete(x8_2);
        if ((var_88 & 1) != 0)
        {
        label_24630:
            void* var_78;
            s_2 = operator delete(var_78);
        }
    }
    if (((((((((var_a0 & 1) != 0 && (var_50 & 1) == 0) || ((var_a0 & 1) == 0 && (var_50 & 1) == 0)) && (var_70 & 1) == 0) || ((var_a0 & 1) != 0 && (var_50 & 1) != 0)) || ((var_a0 & 1) == 0 && (var_50 & 1) != 0)) && (var_88 & 1) == 0) || ((((var_a0 & 1) != 0 && (var_50 & 1) == 0) || ((var_a0 & 1) == 0 && (var_50 & 1) == 0)) && (var_70 & 1) != 0)))
    {
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return s_2;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::key(void* arg1)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** x20 = *(*(*(arg1 + 0x10) - 8) + 8);
    int64_t x1;
    int64_t var_60 = x1;
    int64_t var_58;
    int64_t* x0_1 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x20, &var_58);
    int64_t* x8_3 = *x0_1;
    if (x8_3 == 0)
    {
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >, std::__ndk1::less<void>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > > >::__construct_node<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(x20);
        int64_t x8_4 = var_58;
        int64_t* var_50;
        int64_t* x1_3 = var_50;
        *x1_3 = 0;
        x1_3[1] = 0;
        x1_3[2] = x8_4;
        *x0_1 = x1_3;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x8_6 = **x20;
        if (x8_6 != 0)
        {
            *x20 = x8_6;
            x1_3 = *x0_1;
        }
        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x20[1], x1_3);
        x20[2] = (x20[2] + 1);
        x8_3 = var_50;
    }
    *(arg1 + 0x20) = &x8_3[7];
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 1;
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<nlohmann::detail::value_t>(int64_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_1;
    if (arg1[1] == x8_1)
    {
        uint64_t x22_1 = *arg2;
        char var_48_1 = x22_1;
        int64_t** s_4;
        if ((x22_1 > 7 || (x22_1 <= 7 && (((x22_1 == 0 || x22_1 == 5) || x22_1 == 6) || x22_1 == 7))))
        {
            s_4 = nullptr;
        }
        if (x22_1 <= 7)
        {
            switch (x22_1)
            {
                case 1:
                {
                    int64_t** s_5 = operator new(0x18);
                    s_5[1] = 0;
                    s_5[2] = 0;
                    *s_5 = &s_5[1];
                    s_4 = s_5;
                    break;
                }
                case 2:
                {
                    int64_t** s = operator new(0x18);
                    __builtin_memset(s, 0, 0x18);
                    s_4 = s;
                    break;
                }
                case 3:
                {
                    s_4 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_2ddb7);
                    break;
                }
                case 4:
                {
                    s_4 = 0;
                    break;
                }
            }
        }
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = x22_1;
        char var_48_2 = x1;
        int64_t** s_7 = *(x8_7 + 8);
        *(x8_7 + 8) = s_4;
        s_4 = s_7;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_4);
        x0_1 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            uint64_t x22_2 = *arg2;
            char var_58_1 = x22_2;
            int64_t** s_3;
            if ((x22_2 > 7 || (x22_2 <= 7 && (((x22_2 == 0 || x22_2 == 5) || x22_2 == 6) || x22_2 == 7))))
            {
                s_3 = nullptr;
            }
            if (x22_2 <= 7)
            {
                switch (x22_2)
                {
                    case 1:
                    {
                        int64_t** s_6 = operator new(0x18);
                        s_6[1] = 0;
                        s_6[2] = 0;
                        *s_6 = &s_6[1];
                        s_3 = s_6;
                        break;
                    }
                    case 2:
                    {
                        int64_t** s_1 = operator new(0x18);
                        __builtin_memset(s_1, 0, 0x18);
                        s_3 = s_1;
                        break;
                    }
                    case 3:
                    {
                        s_3 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_2ddb7);
                        break;
                    }
                    case 4:
                    {
                        s_3 = 0;
                        break;
                    }
                }
            }
            char* x8_8 = arg1[4];
            char x1_1 = *x8_8;
            *x8_8 = x22_2;
            char var_58_2 = x1_1;
            int64_t** s_8 = *(x8_8 + 8);
            *(x8_8 + 8) = s_3;
            s_3 = s_8;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&s_3);
            x0_1 = arg1[4];
        }
        else
        {
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x20_1 = *(x8_2 + 8);
            char* x22 = *(x20_1 + 8);
            if (x22 >= *(x20_1 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(x20_1);
            }
            else
            {
                uint64_t x8_4 = *arg2;
                *x22 = x8_4;
                if ((x8_4 > 7 || (x8_4 <= 7 && (((x8_4 == 0 || x8_4 == 5) || x8_4 == 6) || x8_4 == 7))))
                {
                    *(x22 + 8) = 0;
                }
                if (x8_4 <= 7)
                {
                    switch (x8_4)
                    {
                        case 1:
                        {
                            int64_t** x0_6 = operator new(0x18);
                            x0_6[1] = 0;
                            x0_6[2] = 0;
                            *x0_6 = &x0_6[1];
                            *(x22 + 8) = x0_6;
                            break;
                        }
                        case 2:
                        {
                            int64_t s_2 = operator new(0x18);
                            __builtin_memset(s_2, 0, 0x18);
                            *(x22 + 8) = s_2;
                            break;
                        }
                        case 3:
                        {
                            *(x22 + 8) = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_2ddb7);
                            break;
                        }
                        case 4:
                        {
                            x22[8] = 0;
                            break;
                        }
                    }
                }
                *(x20_1 + 8) = (*(x20_1 + 8) + 0x10);
            }
            x0_1 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

void std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*> >::__push_back_slow_path<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>*>(int64_t* arg1, int64_t* arg2)
{
    void* x20 = *arg1;
    size_t x21 = (arg1[1] - x20);
    int64_t x24 = (x21 >> 3);
    if (((x24 + 1) >> 0x3d) != 0)
    {
        int64_t* x0_6;
        char* x1_2;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(x0_6, x1_2, x20);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t* x23;
    int64_t x25;
    if (0xffffffffffffffe < (x9_2 >> 3))
    {
        x25 = 0x1fffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 2);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x23 = nullptr;
        }
        else if ((x25 >> 0x3d) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0xffffffffffffffe < (x9_2 >> 3) || (0xffffffffffffffe >= (x9_2 >> 3) && x25 != 0)))
    {
        x23 = operator new((x25 << 3));
    }
    void* x24_1 = &x23[x24];
    *x24_1 = *arg2;
    if (x21 >= 1)
    {
        memcpy(x23, x20, x21);
    }
    *arg1 = x23;
    arg1[1] = (x24_1 + 8);
    arg1[2] = &x23[x25];
    if (x20 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x20);
}

void std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<nlohmann::detail::value_t>(int64_t* arg1, char* arg2, void* arg3 @ x20)
{
    void* var_20 = arg3;
    int64_t x23 = *arg1;
    char* x22 = arg1[1];
    int64_t* x19 = arg1;
    int64_t x24 = ((x22 - x23) >> 4);
    if (((x24 + 1) >> 0x3c) != 0)
    {
        int64_t x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        if (arg3 != 0)
        {
            operator delete(arg3);
        }
        int64_t* x0_9;
        int64_t* x1_2;
        x0_9 = _Unwind_Resume(x0_6);
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(x0_9, x1_2);
    }
    int64_t x9_2 = (x19[2] - x23);
    int64_t* x20;
    int64_t x25;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x25 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x20 = nullptr;
        }
        else if ((x25 >> 0x3c) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x25 != 0)))
    {
        x20 = operator new((x25 << 4));
    }
    uint64_t x8_3 = *arg2;
    void* x26 = &x20[(x24 * 2)];
    *x26 = x8_3;
    if ((x8_3 > 7 || (x8_3 <= 7 && (((x8_3 == 0 || x8_3 == 5) || x8_3 == 6) || x8_3 == 7))))
    {
        *(x26 + 8) = 0;
    }
    if (x8_3 <= 7)
    {
        switch (x8_3)
        {
            case 1:
            {
                arg1 = operator new(0x18);
                arg1[1] = 0;
                arg1[2] = 0;
                *arg1 = &arg1[1];
                *(x26 + 8) = arg1;
                break;
            }
            case 2:
            {
                arg1 = operator new(0x18);
                __builtin_memset(arg1, 0, 0x18);
                *(x26 + 8) = arg1;
                break;
            }
            case 3:
            {
                *(x26 + 8) = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, char const (&)[0x1]>(&data_2ddb7);
                x23 = *x19;
                x22 = x19[1];
                break;
            }
            case 4:
            {
                *(x26 + 8) = 0;
                break;
            }
        }
    }
    void* x9_4 = (x26 + 0x10);
    char* x21_3;
    if (x22 == x23)
    {
        x21_3 = x22;
    }
    else
    {
        int64_t x10_5 = (x24 + (-1 ^ (((x22 - 0x10) - x23) >> 4)));
        void* x11_2 = (&x20[(x24 * 2)] - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_2 - 8) = *x22;
            *x11_2 = *(x22 + 8);
            x11_2 = (x11_2 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x23 != x22);
        x21_3 = *x19;
        x22 = x19[1];
        x26 = &x20[(x10_5 * 2)];
    }
    *x19 = x26;
    x19[1] = x9_4;
    x19[2] = &x20[(x25 * 2)];
    if (x22 != x21_3)
    {
        do
        {
            x22 = &x22[-0x10];
            *x22;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x22[8]);
        } while (x21_3 != x22);
    }
    if (x21_3 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x21_3);
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<double&>(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 7;
        int64_t var_30 = *arg2;
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = 7;
        char var_38_2 = x1;
        int64_t x10_1 = *(x8_7 + 8);
        *(x8_7 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 7;
            int64_t var_40 = *arg2;
            char* x8_9 = arg1[4];
            char x1_1 = *x8_9;
            *x8_9 = 7;
            char var_48_2 = x1_1;
            int64_t x10_2 = *(x8_9 + 8);
            *(x8_9 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            double** x0 = *(x8_2 + 8);
            char* x8_3 = x0[1];
            if (x8_3 >= x0[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<double&>(x0);
            }
            else
            {
                *(x8_3 + 8) = 0;
                int64_t x9_3 = *arg2;
                *x8_3 = 7;
                *(x8_3 + 8) = x9_3;
                x0[1] = &x0[1][2];
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<double&>(int64_t* arg1, int64_t* arg2)
{
    void* x19 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        char** x0_7;
        char* x1_2;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(x0_7, x1_2);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    char* x11 = (x0_2 + (x23 << 4));
    int64_t x8_3 = (x0_2 + (x24 << 4));
    *(x11 + 8) = *arg2;
    *x11 = 7;
    if (x22 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x23 + (-1 ^ (((x22 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_1 - 8) = *x22;
            *x11_1 = *(x22 + 8);
            x11_1 = (x11_1 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x22 == x19 && x19 != 0) || (x22 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x22 == x19 && x19 == 0) || (x22 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

char* nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<bool&>(char** arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    char* x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 4;
        uint64_t var_30 = *arg2;
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = 4;
        char var_38_2 = x1;
        uint64_t x10_1 = *(x8_7 + 8);
        *(x8_7 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 4;
            uint64_t var_40 = *arg2;
            char* x8_9 = arg1[4];
            char x1_1 = *x8_9;
            *x8_9 = 4;
            char var_48_2 = x1_1;
            uint64_t x10_2 = *(x8_9 + 8);
            *(x8_9 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            bool** x0 = *(x8_2 + 8);
            char* x8_3 = x0[1];
            if (x8_3 >= x0[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<bool&>(x0);
            }
            else
            {
                *(x8_3 + 8) = 0;
                uint64_t x9_3 = *arg2;
                *x8_3 = 4;
                *(x8_3 + 8) = x9_3;
                x0[1] = &x0[1][0x10];
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<bool&>(int64_t* arg1, char* arg2)
{
    void* x19 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(std::__ndk1::__vector_base_common<true>::__throw_length_error());
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    char* x11 = (x0_2 + (x23 << 4));
    int64_t x8_3 = (x0_2 + (x24 << 4));
    *(x11 + 8) = *arg2;
    *x11 = 4;
    if (x22 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x23 + (-1 ^ (((x22 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_1 - 8) = *x22;
            *x11_1 = *(x22 + 8);
            x11_1 = (x11_1 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x22 == x19 && x19 != 0) || (x22 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x22 == x19 && x19 == 0) || (x22 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::nullptr_t>(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 0;
        int64_t var_30 = 0;
        char* x8_6 = *arg1;
        char x1_1 = *x8_6;
        *x8_6 = 0;
        char var_38_2 = x1_1;
        int64_t x10_1 = *(x8_6 + 8);
        *(x8_6 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 0;
            int64_t var_40 = 0;
            char* x8_7 = arg1[4];
            char x1_2 = *x8_7;
            *x8_7 = 0;
            char var_48_2 = x1_2;
            int64_t x10_2 = *(x8_7 + 8);
            *(x8_7 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            std::nullptr_t* x0 = *(x8_2 + 8);
            char* x8_3 = *(x0 + 8);
            if (x8_3 >= *(x0 + 0x10))
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::nullptr_t>(x0);
            }
            else
            {
                *x8_3 = 0;
                *(x8_3 + 8) = 0;
                *(x0 + 8) = (*(x0 + 8) + 0x10);
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::nullptr_t>(int64_t* arg1)
{
    void* x19 = *arg1;
    char* x21 = arg1[1];
    int64_t x22 = ((x21 - x19) >> 4);
    if (((x22 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_7;
        int64_t* x1_3;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(x0_7, x1_3);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x23;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x23 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x22 + 1))
        {
            x23 = (x22 + 1);
        }
        else
        {
            x23 = x9_3;
        }
        if (x23 == 0)
        {
            x0_2 = 0;
        }
        else if ((x23 >> 0x3c) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x23 != 0)))
    {
        x0_2 = operator new((x23 << 4));
    }
    char* x11 = (x0_2 + (x22 << 4));
    int64_t x8_3 = (x0_2 + (x23 << 4));
    *x11 = 0;
    *(x11 + 8) = 0;
    if (x21 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x22 + (-1 ^ (((x21 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x21 = &x21[-0x10];
            *(x11_1 - 8) = *x21;
            *x11_1 = *(x21 + 8);
            x11_1 = (x11_1 - 0x10);
            *x21 = 0;
            *(x21 + 8) = 0;
        } while (x19 != x21);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x21 == x19 && x19 != 0) || (x21 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x21 == x19 && x19 == 0) || (x21 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<int64_t&>(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 5;
        int64_t var_30 = *arg2;
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = 5;
        char var_38_2 = x1;
        int64_t x10_1 = *(x8_7 + 8);
        *(x8_7 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 5;
            int64_t var_40 = *arg2;
            char* x8_9 = arg1[4];
            char x1_1 = *x8_9;
            *x8_9 = 5;
            char var_48_2 = x1_1;
            int64_t x10_2 = *(x8_9 + 8);
            *(x8_9 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            int64_t** x0 = *(x8_2 + 8);
            char* x8_3 = x0[1];
            if (x8_3 >= x0[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<int64_t&>(x0);
            }
            else
            {
                *(x8_3 + 8) = 0;
                int64_t x9_3 = *arg2;
                *x8_3 = 5;
                *(x8_3 + 8) = x9_3;
                x0[1] = &x0[1][2];
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<int64_t&>(int64_t* arg1, int64_t* arg2)
{
    void* x19 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_7;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** x1_2;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(x0_7, x1_2);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    char* x11 = (x0_2 + (x23 << 4));
    int64_t x8_3 = (x0_2 + (x24 << 4));
    *(x11 + 8) = *arg2;
    *x11 = 5;
    if (x22 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x23 + (-1 ^ (((x22 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_1 - 8) = *x22;
            *x11_1 = *(x22 + 8);
            x11_1 = (x11_1 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x22 == x19 && x19 != 0) || (x22 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x22 == x19 && x19 == 0) || (x22 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(int64_t* arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_5;
    if (arg1[1] == x8_1)
    {
        char var_48_1 = 3;
        int64_t var_40 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
        char* x8_6 = *arg1;
        char x1 = *x8_6;
        *x8_6 = 3;
        char var_48_2 = x1;
        int64_t x10_1 = *(x8_6 + 8);
        *(x8_6 + 8) = var_40;
        var_40 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
        x0_5 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_58_1 = 3;
            int64_t var_50 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
            char* x8_7 = arg1[4];
            char x1_1 = *x8_7;
            *x8_7 = 3;
            char var_58_2 = x1_1;
            int64_t x10_2 = *(x8_7 + 8);
            *(x8_7 + 8) = var_50;
            var_50 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_50);
            x0_5 = arg1[4];
        }
        else
        {
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** x20_1 = *(x8_2 + 8);
            char* x22_1 = x20_1[1];
            if (x22_1 >= x20_1[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(x20_1);
            }
            else
            {
                *(x22_1 + 8) = 0;
                *x22_1 = 3;
                *(x22_1 + 8) = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
                x20_1[1] = (x20_1[1] + 0x10);
            }
            x0_5 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&>(int64_t* arg1, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >** arg2, void* arg3 @ x21)
{
    void* var_28 = arg3;
    int64_t x9 = *arg1;
    int64_t x22 = ((arg1[1] - x9) >> 4);
    if (((x22 + 1) >> 0x3c) != 0)
    {
        int64_t x0_9 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        if (arg3 != 0)
        {
            operator delete(arg3);
        }
        int64_t* x0_12;
        int64_t* x1_2;
        x0_12 = _Unwind_Resume(x0_9);
        /* tailcall */
        return nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(x0_12, x1_2);
    }
    int64_t x9_1 = (arg1[2] - x9);
    int64_t x21;
    int64_t x23;
    if (0x7fffffffffffffe < (x9_1 >> 4))
    {
        x23 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_2 = (x9_1 >> 3);
        if (x9_2 < (x22 + 1))
        {
            x23 = (x22 + 1);
        }
        else
        {
            x23 = x9_2;
        }
        if (x23 == 0)
        {
            x21 = 0;
        }
        else if ((x23 >> 0x3c) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_1 >> 4) || (0x7fffffffffffffe >= (x9_1 >> 4) && x23 != 0)))
    {
        x21 = operator new((x23 << 4));
    }
    char* x24 = (x21 + (x22 << 4));
    *(x24 + 8) = 0;
    *x24 = 3;
    int64_t x0_4 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::create<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>(arg2);
    *(x24 + 8) = x0_4;
    void* x20_1 = *arg1;
    char* x10_2 = arg1[1];
    int64_t x8_4 = (x21 + (x23 << 4));
    if (x10_2 == x20_1)
    {
        *arg1 = x24;
        arg1[1] = &x24[0x10];
        arg1[2] = x8_4;
    }
    else
    {
        int64_t x11_4 = (x22 + (-1 ^ (((x10_2 - 0x10) - x20_1) >> 4)));
        void* x12_1 = ((x21 + (x22 << 4)) - 8);
        do
        {
            x10_2 = &x10_2[-0x10];
            *(x12_1 - 8) = *x10_2;
            *x12_1 = *(x10_2 + 8);
            x12_1 = (x12_1 - 0x10);
            *x10_2 = 0;
            *(x10_2 + 8) = 0;
        } while (x20_1 != x10_2);
        x20_1 = *arg1;
        char* x22_1 = arg1[1];
        *arg1 = (x21 + (x11_4 << 4));
        arg1[1] = &x24[0x10];
        arg1[2] = x8_4;
        if (x22_1 != x20_1)
        {
            do
            {
                x22_1 = &x22_1[-0x10];
                *x22_1;
                x0_4 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x22_1[8]);
            } while (x20_1 != x22_1);
        }
    }
    if (((x10_2 == x20_1 && x20_1 != 0) || (x10_2 != x20_1 && x20_1 != 0)))
    {
        /* tailcall */
        return operator delete(x20_1);
    }
    if (((x10_2 == x20_1 && x20_1 == 0) || (x10_2 != x20_1 && x20_1 == 0)))
    {
        return x0_4;
    }
}

int64_t nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> >::handle_value<uint64_t&>(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    void* x8_1 = arg1[2];
    int64_t x0_2;
    if (arg1[1] == x8_1)
    {
        char var_38_1 = 6;
        int64_t var_30 = *arg2;
        char* x8_7 = *arg1;
        char x1 = *x8_7;
        *x8_7 = 6;
        char var_38_2 = x1;
        int64_t x10_1 = *(x8_7 + 8);
        *(x8_7 + 8) = var_30;
        var_30 = x10_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_30);
        x0_2 = *arg1;
    }
    else
    {
        char* x8_2 = *(x8_1 - 8);
        if (*x8_2 != 2)
        {
            char var_48_1 = 6;
            int64_t var_40 = *arg2;
            char* x8_9 = arg1[4];
            char x1_1 = *x8_9;
            *x8_9 = 6;
            char var_48_2 = x1_1;
            int64_t x10_2 = *(x8_9 + 8);
            *(x8_9 + 8) = var_40;
            var_40 = x10_2;
            nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_40);
            x0_2 = arg1[4];
        }
        else
        {
            uint64_t** x0 = *(x8_2 + 8);
            char* x8_3 = x0[1];
            if (x8_3 >= x0[2])
            {
                std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<uint64_t&>(x0);
            }
            else
            {
                *(x8_3 + 8) = 0;
                int64_t x9_3 = *arg2;
                *x8_3 = 6;
                *(x8_3 + 8) = x9_3;
                x0[1] = &x0[1][2];
            }
            x0_2 = (*(*(*(arg1[2] - 8) + 8) + 8) - 0x10);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::vector<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::allocator<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >::__emplace_back_slow_path<uint64_t&>(int64_t* arg1, int64_t* arg2)
{
    void* x19 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_7;
        char* x1_2;
        x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_7, x1_2);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_13574();
            /* no return */
        }
    }
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    char* x11 = (x0_2 + (x23 << 4));
    int64_t x8_3 = (x0_2 + (x24 << 4));
    *(x11 + 8) = *arg2;
    *x11 = 6;
    if (x22 == x19)
    {
        *arg1 = x11;
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
    }
    else
    {
        int64_t x10_3 = (x23 + (-1 ^ (((x22 - x19) - 0x10) >> 4)));
        void* x11_1 = (x11 - 8);
        do
        {
            x22 = &x22[-0x10];
            *(x11_1 - 8) = *x22;
            *x11_1 = *(x22 + 8);
            x11_1 = (x11_1 - 0x10);
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        char* x21_1 = arg1[1];
        *arg1 = (x0_2 + (x10_3 << 4));
        arg1[1] = &x11[0x10];
        arg1[2] = x8_3;
        if (x21_1 != x19)
        {
            do
            {
                x21_1 = &x21_1[-0x10];
                *x21_1;
                x0_2 = nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x21_1[8]);
            } while (x19 != x21_1);
        }
    }
    if (((x22 == x19 && x19 != 0) || (x22 != x19 && x19 != 0)))
    {
        /* tailcall */
        return operator delete(x19);
    }
    if (((x22 == x19 && x19 == 0) || (x22 != x19 && x19 == 0)))
    {
        return x0_2;
    }
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, char* arg2)
{
    int64_t* i = *(arg1 + 8);
    int64_t* i_1;
    if (i == 0)
    {
    label_25d90:
        i_1 = (arg1 + 8);
    }
    else
    {
        uint64_t x8_1 = *arg2;
        i_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x22_1;
        if (temp0_1 == 0)
        {
            x22_1 = (x8_1 >> 1);
        }
        else
        {
            x22_1 = *(arg2 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg2 + 0x10);
        }
        else
        {
            x21_1 = &arg2[1];
        }
        do
        {
            uint64_t x9_2 = i[4];
            uint64_t x24_1;
            if ((x9_2 & 1) == 0)
            {
                x24_1 = (x9_2 >> 1);
            }
            else
            {
                x24_1 = i[5];
            }
            uint64_t x2_1;
            if (x22_1 < x24_1)
            {
                x2_1 = x22_1;
            }
            else
            {
                x2_1 = x24_1;
            }
            int32_t x0_1;
            if (x2_1 != 0)
            {
                void* x0;
                if ((x9_2 & 1) != 0)
                {
                    x0 = i[6];
                }
                else
                {
                    x0 = (i + 0x21);
                }
                x0_1 = memcmp(x0, x21_1, x2_1);
            }
            if ((x2_1 == 0 || (x2_1 != 0 && x0_1 == 0)))
            {
                int32_t x8_4;
                if (x22_1 < x24_1)
                {
                    x8_4 = 1;
                }
                else
                {
                    x8_4 = 0;
                }
                if (x24_1 >= x22_1)
                {
                    x0_1 = x8_4;
                }
                else
                {
                    x0_1 = -1;
                }
            }
            int32_t x8_5;
            if (x0_1 < 0)
            {
                x8_5 = 1;
            }
            else
            {
                x8_5 = 0;
            }
            if (x0_1 >= 0)
            {
                i_1 = i;
            }
            i = i[x8_5];
        } while (i != 0);
        if (i_1 == (arg1 + 8))
        {
            goto label_25d90;
        }
        uint64_t x9_3 = i_1[4];
        uint64_t x23;
        if ((x9_3 & 1) == 0)
        {
            x23 = (x9_3 >> 1);
        }
        else
        {
            x23 = i_1[5];
        }
        uint64_t x2_2;
        if (x23 < x22_1)
        {
            x2_2 = x23;
        }
        else
        {
            x2_2 = x22_1;
        }
        int32_t x0_3;
        if (x2_2 != 0)
        {
            void* x1_1;
            if ((x9_3 & 1) != 0)
            {
                x1_1 = i_1[6];
            }
            else
            {
                x1_1 = (i_1 + 0x21);
            }
            x0_3 = memcmp(x21_1, x1_1, x2_2);
        }
        if (((x2_2 == 0 || (x2_2 != 0 && x0_3 == 0)) && x22_1 < x23))
        {
            goto label_25d90;
        }
        if (((x2_2 != 0 && x0_3 != 0) && (x0_3 & 0x80000000) != 0))
        {
            goto label_25d90;
        }
    }
    return i_1;
}

int64_t pudutech::getSteadyClockMill()
{
    uint64_t x8 = ((std::__ndk1::chrono::steady_clock::now() * 0x431bde82d7b634db) >> 0x40);
    return ((x8 >> 0x12) + (x8 >> 0x3f));
}

int64_t* protocol::DomainSockClient::DomainSockClient(void* arg1)
{
    *(arg1 + 0xf8) = 0;
    *(arg1 + 4) = 0;
    *(arg1 + 6) = 0;
    *(arg1 + 0xe0) = 0;
    *(arg1 + 0x108) = 1;
    *(arg1 + 0xe8) = 0;
    *(arg1 + 0xf0) = (arg1 + 0xf8);
    __builtin_memset((arg1 + 0x78), 0, 0x60);
    *(arg1 + 0x100) = 0;
    *(arg1 + 0x124) = 0;
    *(arg1 + 0x11c) = 0;
    *(arg1 + 0x10c) = 0;
    *(arg1 + 0xd8) = (arg1 + 0xe0);
    *(arg1 + 0x114) = 0;
    return (arg1 + 0xf8);
}

int64_t protocol::DomainSockClient::~DomainSockClient(void* arg1)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    std::__ndk1::mutex::lock();
    for (int64_t i = *(arg1 + 0xd8); (arg1 + 0xe0) != i; i = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase((arg1 + 0xd8)))
    {
    }
    for (int64_t i_1 = *(arg1 + 0xf0); (arg1 + 0xf8) != i_1; i_1 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::erase((arg1 + 0xf0)))
    {
    }
    int64_t x0_5 = *(arg1 + 0x78);
    *(arg1 + 4) = 0;
    if (x0_5 != 0)
    {
        std::__ndk1::thread::detach();
    }
    char* x24;
    if ((*data_455b8 & 1) == 0)
    {
        x24 = &*(data_455b8 + 1);
    }
    else
    {
        x24 = *(data_455c2 + 6);
    }
    int32_t var_1d8 = data_455b0;
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_7 = strlen(x24);
    if (x0_7 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_1c0_1;
        void* x25_1;
        if (x0_7 >= 0x17)
        {
            uint64_t x26_1 = ((x0_7 + 0x10) & 0xfffffffffffffff0);
            void* x0_9 = operator new(x26_1);
            x25_1 = x0_9;
            size_t var_1c8_1 = x0_7;
            var_1c0_1 = x0_9;
            s_1 = (x26_1 | 1);
        }
        else
        {
            x25_1 = &*s_1[1];
            s_1 = (x0_7 << 1);
        }
        if ((x0_7 >= 0x17 || (x0_7 < 0x17 && x0_7 != 0)))
        {
            memcpy(x25_1, x24, x0_7);
        }
        *(x25_1 + x0_7) = 0;
        int32_t x0_12 = g3::logLevel(&var_1d8);
        int32_t x23_2;
        if ((x0_12 & 1) == 0)
        {
            x23_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_25fd4:
                operator delete(var_1c0_1);
                if ((x23_2 & 1) != 0)
                {
                    goto label_26004;
                }
            }
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            s = 0x14;
            __builtin_strncpy(&*s[1], "DomainSock", 0xb);
            x23_2 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                void* var_1e0;
                operator delete(var_1e0);
                if ((s_1 & 1) != 0)
                {
                    goto label_25fd4;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_25fd4;
            }
        }
        if (((((x0_12 & 1) == 0 && (s_1 & 1) == 0) || (x0_12 & 1) != 0) && (x23_2 & 1) != 0))
        {
        label_26004:
            void var_1b8;
            LogCapture::LogCapture(&var_1b8, "DomainSock", &data_455b0, &data_2ddb7, &nullptr->ident.version);
            void var_1b0;
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "Domain Sock Client destruct", 0x1b);
            LogCapture::~LogCapture();
        }
        std::__ndk1::mutex::unlock();
        if ((*(arg1 + 0x110) & 1) != 0)
        {
            operator delete(*(arg1 + 0x120));
        }
        *(arg1 + 0xf8);
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::destroy((arg1 + 0xf0));
        *(arg1 + 0xe0);
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::destroy((arg1 + 0xd8));
        std::__ndk1::mutex::~mutex();
        int64_t x0_25 = std::__ndk1::mutex::~mutex();
        int64_t* x19_1 = *(arg1 + 0x80);
        if (x19_1 != 0)
        {
            int64_t x9_1;
            int32_t i_2;
            do
            {
                x9_1 = __ldaxr(&x19_1[1]);
                i_2 = __stlxr((x9_1 - 1), &x19_1[1]);
            } while (i_2 != 0);
            if (x9_1 == 0)
            {
                *(*x19_1 + 0x10)(x19_1);
                x0_25 = std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
        if (*(x27 + 0x28) == x8)
        {
            return x0_25;
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t protocol::DomainSockClient::connect(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, char* arg2)
{
    int64_t* x22;
    int64_t* var_30 = x22;
    int64_t __saved_x29;
    int64_t* x29 = &__saved_x29;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    char* x20 = arg2;
    int64_t var_58 = *(x24 + 0x28);
    uint64_t x8_1 = *arg2;
    uint64_t x9;
    if ((x8_1 & 1) != 0)
    {
        x9 = *(x20 + 8);
    }
    else
    {
        x9 = (x8_1 >> 1);
    }
    if ((x20 != &data_45700 && x9 == 0))
    {
        data_45708;
        int64_t* x1;
        if ((*data_45700 & 1) != 0)
        {
            x1 = data_45710;
        }
        else
        {
            x1 = &*(data_45700 + 1);
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(x20, x1);
    }
    if ((arg1 + 0x110) != x20)
    {
        *(x20 + 8);
        void* x1_1;
        if ((*x20 & 1) != 0)
        {
            x1_1 = *(x20 + 0x10);
        }
        else
        {
            x1_1 = &x20[1];
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 0x110), x1_1);
    }
    int32_t x0_3;
    int128_t v0;
    x0_3 = protocol::DomainSockClient::create(arg1);
    int32_t var_1f8;
    int64_t s_1;
    char s_2;
    int64_t s_3;
    void* var_1a8;
    int128_t var_1a0;
    size_t x0_9;
    size_t x0_11;
    int32_t x0_23;
    char* x20_3;
    if ((x0_3 & 1) != 0)
    {
        v0 = 0;
        *v0[8] = 0;
        v0 = protocol::DomainSockClient::run;
        *(arg1 + 4) = 1;
        var_1a0 = v0;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* var_190_1 = arg1;
        void** x0_4 = operator new(0x20);
        x0_4[2] = 0;
        *x0_4 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<std::__ndk1::thread, std::__ndk1::allocator<std::__ndk1::thread> > + 0x10);
        x0_4[1] = 0;
        int64_t x22_2;
        x22_2 = sub_29fb8(&x0_4[3], &var_1a0);
        int64_t* x21_1 = *(arg1 + 0x80);
        *(arg1 + 0x78) = x22_2;
        *(arg1 + 0x80) = x0_4;
        if (x21_1 != 0)
        {
            int64_t x9_3;
            int32_t i;
            do
            {
                x9_3 = __ldaxr(&x21_1[1]);
                i = __stlxr((x9_3 - 1), &x21_1[1]);
            } while (i != 0);
            if (x9_3 == 0)
            {
                *(*x21_1 + 0x10)(x21_1);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
        char* x21_2;
        if ((*data_455f8 & 1) == 0)
        {
            x21_2 = &*(data_455f8 + 1);
        }
        else
        {
            x21_2 = *(data_45602 + 6);
        }
        int32_t var_1c0 = data_455f0;
        __builtin_memset(&s_3, 0, 0x18);
        x0_9 = strlen(x21_2);
        if (x0_9 >= -0x10)
        {
            void* x22_3;
            if (x0_9 >= 0x17)
            {
                uint64_t x23_1 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                void* x0_20 = operator new(x23_1);
                x22_3 = x0_20;
                size_t var_1b0_1 = x0_9;
                var_1a8 = x0_20;
                s_3 = (x23_1 | 1);
            }
            else
            {
                x22_3 = &*s_3[1];
                s_3 = (x0_9 << 1);
            }
            if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
            {
                memcpy(x22_3, x21_2, x0_9);
            }
            *(x22_3 + x0_9) = 0;
            x0_23 = g3::logLevel(&var_1c0);
            int32_t x20_4;
            if ((x0_23 & 1) == 0)
            {
                x20_4 = 0;
                if ((s_3 & 1) != 0)
                {
                label_26540:
                    x0_23 = operator delete(var_1a8);
                    if ((x20_4 & 1) != 0)
                    {
                        goto label_26570;
                    }
                }
            }
            else
            {
                __builtin_memset(&s_2, 0, 0x18);
                s_2 = 0x14;
                int64_t var_1d7;
                __builtin_strncpy(&var_1d7, "DomainSock", 0xb);
                x0_23 = g3::logTag(&s_2);
                x20_4 = x0_23;
                if ((s_2 & 1) != 0)
                {
                    void* var_1c8_1;
                    x0_23 = operator delete(var_1c8_1);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_26540;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_26540;
                }
            }
            if (((((x0_23 & 1) == 0 && (s_3 & 1) == 0) || (x0_23 & 1) != 0) && (x20_4 & 1) != 0))
            {
            label_26570:
                LogCapture::LogCapture(&var_1a0, "DomainSock", &data_455f0, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*var_1a0[8], "local socket server init success…", 0x21);
                x0_23 = LogCapture::~LogCapture();
            }
            *(arg1 + 5) = 1;
        }
    }
    else
    {
        if ((*data_45638 & 1) == 0)
        {
            x20_3 = &*(data_45638 + 1);
        }
        else
        {
            x20_3 = *(data_45642 + 6);
        }
        var_1f8 = data_45630;
        __builtin_memset(&s_1, 0, 0x18);
        x0_11 = strlen(x20_3);
        if (x0_11 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
    }
    if ((((x0_3 & 1) == 0 && x0_11 < -0x10) || ((x0_3 & 1) != 0 && x0_9 < -0x10)))
    {
        int64_t x0_34 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
        int64_t x0_36 = _Unwind_Resume(x0_34);
        void* var_1c8;
        if ((s_2 & 1) != 0)
        {
            operator delete(var_1c8);
        }
        if ((((s_2 & 1) == 0 && (s_3 & 1) != 0) || ((s_2 & 1) != 0 && (s_3 & 1) != 0)))
        {
            operator delete(var_1a8);
        }
        int32_t* x0_40;
        char* x1_6;
        x0_40 = _Unwind_Resume(x0_36);
        /* tailcall */
        return protocol::DomainSockClient::create(x0_40, x1_6);
    }
    if (((x0_3 & 1) == 0 && x0_11 >= -0x10))
    {
        void* var_1e0_1;
        void* x21_3;
        if (x0_11 >= 0x17)
        {
            uint64_t x22_4 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
            void* x0_13 = operator new(x22_4);
            x21_3 = x0_13;
            size_t var_1e8_1 = x0_11;
            var_1e0_1 = x0_13;
            s_1 = (x22_4 | 1);
        }
        else
        {
            x21_3 = &*s_1[1];
            s_1 = (x0_11 << 1);
        }
        if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
        {
            memcpy(x21_3, x20_3, x0_11);
        }
        *(x21_3 + x0_11) = 0;
        int32_t x0_16 = g3::logLevel(&var_1f8);
        int32_t x19_2;
        if ((x0_16 & 1) == 0)
        {
            x19_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_264d4:
                operator delete(var_1e0_1);
                if ((x19_2 & 1) != 0)
                {
                    goto label_26504;
                }
            }
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            s = 0x14;
            __builtin_strncpy(&*s[1], "DomainSock", 0xb);
            x19_2 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                void* var_200;
                operator delete(var_200);
                if ((s_1 & 1) != 0)
                {
                    goto label_264d4;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_264d4;
            }
        }
        if (((((x0_16 & 1) == 0 && (s_1 & 1) == 0) || (x0_16 & 1) != 0) && (x19_2 & 1) != 0))
        {
        label_26504:
            LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&*var_1a0[8], "local socket server init fail!", 0x1e);
            LogCapture::~LogCapture();
        }
        x0_23 = 0;
    }
    if ((((x0_3 & 1) != 0 && x0_9 >= -0x10) || ((x0_3 & 1) == 0 && x0_11 >= -0x10)))
    {
        if (*(x24 + 0x28) != x29[-9])
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_23;
    }
}

int64_t sub_26610(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int32_t* x0_3;
    char* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::create(x0_3, x1);
}

int64_t sub_26644(int64_t arg1, char arg2, int64_t arg3)
{
    if ((arg2 & 1) == 0)
    {
        int32_t* x0_3;
        char* x1_1;
        x0_3 = _Unwind_Resume(arg1);
        /* tailcall */
        return protocol::DomainSockClient::create(x0_3, x1_1);
    }
    /* tailcall */
    return sub_26668(arg3);
}

uint64_t protocol::DomainSockClient::create(int32_t* arg1, char* arg2)
{
    char* x22;
    char* var_30 = x22;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int32_t x0 = socket(1, 1, 0);
    *arg1 = x0;
    int32_t x20_1;
    char s;
    char s_1;
    void* var_220;
    void var_1a0;
    void var_198;
    if (x0 != 0xffffffff)
    {
        int32_t var_1dc = 1;
        int32_t x0_1;
        int128_t v0_1;
        x0_1 = setsockopt();
        if (x0_1 != 0xffffffff)
        {
            v0_1 = 0;
            *v0_1[8] = 0;
            x20_1 = 1;
            *(arg1 + 8) = {0};
            __builtin_memset(&arg1[6], 0, 0x5e);
            arg1[2] = 1;
            *(arg1 + 0xa) = 0;
            void* x1;
            if ((*arg2 & 1) != 0)
            {
                x1 = *(arg2 + 0x10);
            }
            else
            {
                x1 = &arg2[1];
            }
            int32_t x0_4 = strlen(strcpy((arg1 + 0xb), x1, v0_1));
            if (connect(*arg1, &arg1[2], (x0_4 + 3)) == 0xffffffff)
            {
                char* x21_3;
                if ((*data_45638 & 1) == 0)
                {
                    x21_3 = &*(data_45638 + 1);
                }
                else
                {
                    x21_3 = *(data_45642 + 6);
                }
                int32_t var_238 = data_45630;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_27 = strlen(x21_3);
                if (x0_27 < -0x10)
                {
                    goto label_26c68;
                }
                void* x22_5;
                if (x0_27 >= 0x17)
                {
                    uint64_t x23_2 = ((x0_27 + 0x10) & 0xfffffffffffffff0);
                    void* x0_38 = operator new(x23_2);
                    x22_5 = x0_38;
                    size_t var_228_1 = x0_27;
                    var_220 = x0_38;
                    s_1 = (x23_2 | 1);
                }
                else
                {
                    void var_22f;
                    x22_5 = &var_22f;
                    s_1 = (x0_27 << 1);
                }
                if ((x0_27 >= 0x17 || (x0_27 < 0x17 && x0_27 != 0)))
                {
                    memcpy(x22_5, x21_3, x0_27);
                }
                *(x22_5 + x0_27) = 0;
                int32_t x20_7;
                if ((g3::logLevel(&var_238) & 1) == 0)
                {
                    x20_7 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_26b94:
                        operator delete(var_220);
                        if ((x20_7 & 1) == 0)
                        {
                            goto label_26c10;
                        }
                        goto label_26bc4;
                    }
                }
                else
                {
                    __builtin_memset(&s, 0, 0x18);
                    s = 0x14;
                    int64_t var_24f;
                    __builtin_strncpy(&var_24f, "DomainSock", 0xb);
                    x20_7 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        void* var_240_1;
                        operator delete(var_240_1);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_26b94;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_26b94;
                    }
                }
                if ((x20_7 & 1) == 0)
                {
                    goto label_26c10;
                }
            label_26bc4:
                LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_58 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "connect failed! error is ", 0x19);
                char* x0_61 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_58, x0_61, strlen(x0_61));
                goto label_26c08;
            }
            *(arg1 + 6) = 1;
        }
        else
        {
            char* x21_2;
            if ((*data_45638 & 1) == 0)
            {
                x21_2 = &*(data_45638 + 1);
            }
            else
            {
                x21_2 = *(data_45642 + 6);
            }
            int32_t var_200 = data_45630;
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            size_t x0_10 = strlen(x21_2);
            if (x0_10 < -0x10)
            {
                goto label_26c68;
            }
            void* var_1e8_1;
            void* x22_3;
            if (x0_10 >= 0x17)
            {
                uint64_t x23_1 = ((x0_10 + 0x10) & 0xfffffffffffffff0);
                void* x0_29 = operator new(x23_1);
                x22_3 = x0_29;
                size_t var_1f0_1 = x0_10;
                var_1e8_1 = x0_29;
                s_3 = (x23_1 | 1);
            }
            else
            {
                x22_3 = &*s_3[1];
                s_3 = (x0_10 << 1);
            }
            if ((x0_10 >= 0x17 || (x0_10 < 0x17 && x0_10 != 0)))
            {
                memcpy(x22_3, x21_2, x0_10);
            }
            *(x22_3 + x0_10) = 0;
            int32_t x20_6;
            if ((g3::logLevel(&var_200) & 1) == 0)
            {
                x20_6 = 0;
                if ((s_3 & 1) != 0)
                {
                label_26b0c:
                    operator delete(var_1e8_1);
                    if ((x20_6 & 1) != 0)
                    {
                        goto label_26b3c;
                    }
                    goto label_26c10;
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                s_2 = 0x14;
                __builtin_strncpy(&*s_2[1], "DomainSock", 0xb);
                x20_6 = g3::logTag(&s_2);
                if ((s_2 & 1) != 0)
                {
                    void* var_208;
                    operator delete(var_208);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_26b0c;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_26b0c;
                }
            }
            if ((x20_6 & 1) == 0)
            {
                goto label_26c10;
            }
        label_26b3c:
            LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_48 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "setsockopt SO_REUSEADDR failed! …", 0x29);
            char* x0_51 = strerror(*__errno());
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_48, x0_51, strlen(x0_51));
        label_26c08:
            LogCapture::~LogCapture();
        label_26c10:
            close(*arg1);
            x20_1 = 0;
            *arg1 = 0xffffffff;
        }
    }
    else
    {
        char* x20_2;
        if ((*data_45638 & 1) == 0)
        {
            x20_2 = &*(data_45638 + 1);
        }
        else
        {
            x20_2 = *(data_45642 + 6);
        }
        int32_t var_1c0 = data_45630;
        int64_t s_5;
        __builtin_memset(&s_5, 0, 0x18);
        size_t x0_8 = strlen(x20_2);
        char s_4;
        void* var_1a8;
        if (x0_8 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_26c68:
            int64_t x19_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            void* var_240;
            if ((s & 1) != 0)
            {
                operator delete(var_240);
            }
            if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
            {
                operator delete(var_220);
                x19_4 = _Unwind_Resume(x19_4);
                void* var_1c8;
                if ((s_4 & 1) != 0)
                {
                    operator delete(var_1c8);
                }
                if ((((s_4 & 1) == 0 && (s_5 & 1) != 0) || ((s_4 & 1) != 0 && (s_5 & 1) != 0)))
                {
                    operator delete(var_1a8);
                    x19_4 = _Unwind_Resume(x19_4);
                    LogCapture::~LogCapture();
                }
            }
            /* tailcall */
            return protocol::DomainSockClient::run(_Unwind_Resume(x19_4));
        }
        void* x21_1;
        if (x0_8 >= 0x17)
        {
            uint64_t x22_4 = ((x0_8 + 0x10) & 0xfffffffffffffff0);
            void* x0_12 = operator new(x22_4);
            x21_1 = x0_12;
            size_t var_1b0_1 = x0_8;
            var_1a8 = x0_12;
            s_5 = (x22_4 | 1);
        }
        else
        {
            x21_1 = &*s_5[1];
            s_5 = (x0_8 << 1);
        }
        if ((x0_8 >= 0x17 || (x0_8 < 0x17 && x0_8 != 0)))
        {
            memcpy(x21_1, x20_2, x0_8);
        }
        *(x21_1 + x0_8) = 0;
        int32_t x19_2;
        if ((g3::logLevel(&var_1c0) & 1) == 0)
        {
            x19_2 = 0;
            if ((s_5 & 1) != 0)
            {
            label_26a48:
                operator delete(var_1a8);
                if ((x19_2 & 1) == 0)
                {
                    goto label_26a50;
                }
                goto label_268d0;
            }
        }
        else
        {
            __builtin_memset(&s_4, 0, 0x18);
            s_4 = 0x14;
            int64_t var_1d7;
            __builtin_strncpy(&var_1d7, "DomainSock", 0xb);
            x19_2 = g3::logTag(&s_4);
            if ((s_4 & 1) != 0)
            {
                void* var_1c8_1;
                operator delete(var_1c8_1);
                if ((s_5 & 1) != 0)
                {
                    goto label_26a48;
                }
            }
            else if ((s_5 & 1) != 0)
            {
                goto label_26a48;
            }
        }
        if ((x19_2 & 1) == 0)
        {
        label_26a50:
            x20_1 = 0;
        }
        else
        {
        label_268d0:
            LogCapture::LogCapture(&var_1a0, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_20 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "create socket failed!, error is ", 0x20);
            char* x0_23 = strerror(*__errno());
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_20, x0_23, strlen(x0_23));
            LogCapture::~LogCapture();
            x20_1 = 0;
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t sub_26c84(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return protocol::DomainSockClient::run(_Unwind_Resume(x19));
}

int64_t sub_26ce4(int64_t arg1, char arg2, void* arg3)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
    }
    /* tailcall */
    return protocol::DomainSockClient::run(_Unwind_Resume(x19));
}

void* protocol::DomainSockClient::run(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1)
{
    int64_t* x23;
    int64_t* var_38 = x23;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    void* s_2;
    __builtin_memset(&s_2, 0, 0x18);
    uint64_t x21 = *(arg1 + 0x110);
    uint64_t x20;
    if ((x21 & 1) != 0)
    {
        x20 = *(arg1 + 0x118);
    }
    else
    {
        x20 = (x21 >> 1);
    }
    int64_t x0 = pthread_self();
    int64_t s_3;
    size_t var_598;
    if (x20 < 0x10)
    {
        void* x1_1;
        if ((x21 & 1) != 0)
        {
            x1_1 = *(arg1 + 0x120);
        }
        else
        {
            x1_1 = (arg1 + 0x111);
        }
        pthread_setname_np(x0, x1_1);
    }
    else
    {
        __builtin_memset(&s_3, 0, 0x18);
        int32_t temp0_1 = (x21 & 1);
        uint64_t x8_2;
        if (temp0_1 == 0)
        {
            x8_2 = ((x21 >> 1) & 0x7fffffff);
        }
        else
        {
            x8_2 = *(arg1 + 0x118);
        }
        void* x22_1;
        if (temp0_1 != 0)
        {
            x22_1 = *(arg1 + 0x120);
        }
        else
        {
            x22_1 = (arg1 + 0x111);
        }
        size_t x21_1;
        if (x8_2 < 0xf)
        {
            x21_1 = x8_2;
        }
        else
        {
            x21_1 = 0xf;
        }
        if (x21_1 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_27078:
            int64_t x0_26 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            void* s_5 = s_2;
            if (s_5 != 0)
            {
                void* s_7 = s_5;
                operator delete(s_5);
            }
            /* tailcall */
            return protocol::DomainSockClient::isInited(_Unwind_Resume(x0_26));
        }
        void* var_590_1;
        void* x23_1;
        void* x24_1;
        if (x21_1 >= 0x17)
        {
            void* x0_2 = operator new(0x10);
            x23_1 = x0_2;
            var_598 = x21_1;
            var_590_1 = x0_2;
            s_3 = 0x11;
            x24_1 = (&s_3 | 1);
        }
        else
        {
            x24_1 = (&s_3 | 1);
            x23_1 = x24_1;
            s_3 = (x21_1 << 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            memcpy(x23_1, x22_1, x21_1);
        }
        *(x23_1 + x21_1) = 0;
        void* x1_3;
        if ((s_3 & 1) == 0)
        {
            x1_3 = x24_1;
        }
        else
        {
            x1_3 = var_590_1;
        }
        pthread_setname_np(x0, x1_3);
        if ((s_3 & 1) != 0)
        {
            operator delete(var_590_1);
        }
    }
    if (*(arg1 + 4) != 0)
    {
        int32_t x0_7;
        do
        {
            void var_458;
            x0_7 = recv(*arg1, &var_458, 0x400, 0);
            if (x0_7 <= 0)
            {
                break;
            }
            char* var_5b0;
            std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >::insert<char*>(&s_2, var_5b0, &var_458);
            int32_t x0_10;
            do
            {
                x0_10 = protocol::DomainSockClient::processLoop(arg1);
            } while ((x0_10 & 1) != 0);
        } while (*(arg1 + 4) != 0);
        if (x0_7 <= 0)
        {
            char* x22_2;
            if ((*data_45638 & 1) == 0)
            {
                x22_2 = &*(data_45638 + 1);
            }
            else
            {
                x22_2 = *(data_45642 + 6);
            }
            int32_t var_5d8 = data_45630;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_12 = strlen(x22_2);
            if (x0_12 < -0x10)
            {
                goto label_27078;
            }
            void* var_5c0_1;
            void* x23_2;
            if (x0_12 >= 0x17)
            {
                uint64_t x24_2 = ((x0_12 + 0x10) & 0xfffffffffffffff0);
                void* x0_14 = operator new(x24_2);
                x23_2 = x0_14;
                size_t var_5c8_1 = x0_12;
                var_5c0_1 = x0_14;
                s_1 = (x24_2 | 1);
            }
            else
            {
                x23_2 = &*s_1[1];
                s_1 = (x0_12 << 1);
            }
            if ((x0_12 >= 0x17 || (x0_12 < 0x17 && x0_12 != 0)))
            {
                memcpy(x23_2, x22_2, x0_12);
            }
            *(x23_2 + x0_12) = 0;
            int32_t x0_17 = g3::logLevel(&var_5d8);
            int32_t x21_3;
            if ((x0_17 & 1) == 0)
            {
                x21_3 = 0;
                if ((s_1 & 1) != 0)
                {
                label_26fbc:
                    operator delete(var_5c0_1);
                    if ((x21_3 & 1) != 0)
                    {
                        goto label_26fec;
                    }
                }
            }
            else
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                s = 0x14;
                __builtin_strncpy(&*s[1], "DomainSock", 0xb);
                x21_3 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    void* var_5e0;
                    operator delete(var_5e0);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_26fbc;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_26fbc;
                }
            }
            if (((((x0_17 & 1) == 0 && (s_1 & 1) == 0) || (x0_17 & 1) != 0) && (x21_3 & 1) != 0))
            {
            label_26fec:
                LogCapture::LogCapture(&s_3, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_598, "recv error:", 0xb));
                LogCapture::~LogCapture();
            }
        }
    }
    *(arg1 + 6) = 0;
    void* s_4 = s_2;
    if (s_4 != 0)
    {
        void* s_6 = s_4;
        s_4 = operator delete(s_4);
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return s_4;
}

int64_t sub_27080(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_2710c:
            arg_40 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_2710c;
        }
    }
    /* tailcall */
    return protocol::DomainSockClient::isInited(_Unwind_Resume(arg1));
}

int64_t sub_270c0(int64_t arg1, char arg2, int64_t arg3, void* arg4)
{
    if ((arg2 & 1) != 0)
    {
        /* tailcall */
        return sub_270e4(arg3);
    }
    if (arg4 != 0)
    {
        arg_40 = arg4;
        operator delete(arg4);
    }
    /* tailcall */
    return protocol::DomainSockClient::isInited(_Unwind_Resume(arg1));
}

uint64_t protocol::DomainSockClient::isInited(void* arg1)
{
    return *(arg1 + 5);
}

uint64_t protocol::DomainSockClient::isConnected(void* arg1)
{
    return *(arg1 + 6);
}

int64_t protocol::DomainSockClient::addPlugin(void* arg1, int64_t arg2, void* arg3)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    std::__ndk1::mutex::lock();
    void* x0_2 = std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::operator[]((arg1 + 0xd8));
    int64_t* x0_3 = *(arg3 + 0x20);
    void var_80;
    int64_t* var_60;
    if (x0_3 == 0)
    {
        var_60 = nullptr;
    }
    else if (arg3 == x0_3)
    {
        var_60 = &var_80;
        *(*x0_3 + 0x18)();
    }
    else
    {
        var_60 = *(*x0_3 + 0x10)();
    }
    sub_1bb50(&var_80, x0_2);
    int64_t x8_6;
    if (&var_80 == var_60)
    {
        x8_6 = *(*var_60 + 0x20);
    }
    if ((&var_80 != var_60 && var_60 != 0))
    {
        x8_6 = *(*var_60 + 0x28);
    }
    if ((&var_80 == var_60 || (&var_80 != var_60 && var_60 != 0)))
    {
        x8_6();
    }
    int64_t x0_8 = std::__ndk1::mutex::unlock();
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_8;
}

int64_t protocol::DomainSockClient::addPlugin(void* arg1, int64_t arg2, void* arg3)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    std::__ndk1::mutex::lock();
    void* x0_2 = std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::operator[]((arg1 + 0xf0));
    int64_t* x0_3 = *(arg3 + 0x20);
    void var_80;
    int64_t* var_60;
    if (x0_3 == 0)
    {
        var_60 = nullptr;
    }
    else if (arg3 == x0_3)
    {
        var_60 = &var_80;
        *(*x0_3 + 0x18)();
    }
    else
    {
        var_60 = *(*x0_3 + 0x10)();
    }
    sub_1bde4(&var_80, x0_2);
    int64_t x8_6;
    if (&var_80 == var_60)
    {
        x8_6 = *(*var_60 + 0x20);
    }
    if ((&var_80 != var_60 && var_60 != 0))
    {
        x8_6 = *(*var_60 + 0x28);
    }
    if ((&var_80 == var_60 || (&var_80 != var_60 && var_60 != 0)))
    {
        x8_6();
    }
    int64_t x0_8 = std::__ndk1::mutex::unlock();
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_8;
}

int64_t protocol::DomainSockClient::removePlugin(void* arg1)
{
    std::__ndk1::mutex::lock();
    if ((arg1 + 0xe0) != std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0xd8)))
    {
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase((arg1 + 0xd8));
    }
    if ((arg1 + 0xf8) != std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0xf0)))
    {
        std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::erase((arg1 + 0xf0));
    }
    /* tailcall */
    return std::__ndk1::mutex::unlock();
}

int64_t sub_273d4(int64_t arg1)
{
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_1;
    char* x1;
    char* x2;
    x0_1 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::send(x0_1, x1, x2);
}

uint64_t protocol::DomainSockClient::send(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, char* arg2, char* arg3)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    uint32_t x10 = *data_455b8;
    int32_t var_1d0 = data_455b0;
    char* x23;
    if ((x10 & 1) == 0)
    {
        x23 = &*(data_455b8 + 1);
    }
    else
    {
        x23 = *(data_455c2 + 6);
    }
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_1 = strlen(x23);
    if (x0_1 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_1b8_1;
        void* x24_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x25_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x25_1);
            x24_1 = x0_3;
            size_t var_1c0_1 = x0_1;
            var_1b8_1 = x0_3;
            s_1 = (x25_1 | 1);
        }
        else
        {
            x24_1 = &*s_1[1];
            s_1 = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x24_1, x23, x0_1);
        }
        *(x24_1 + x0_1) = 0;
        int64_t s;
        void* var_1d8;
        int32_t x22_2;
        if ((g3::logLevel(&var_1d0) & 1) == 0)
        {
            x22_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_275d0:
                operator delete(var_1b8_1);
                if ((x22_2 & 1) == 0)
                {
                    goto label_275d8;
                }
                goto label_2753c;
            }
        }
        else
        {
            __builtin_memset(&s, 0, 0x18);
            s = 0x14;
            __builtin_strncpy(&*s[1], "DomainSock", 0xb);
            x22_2 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                operator delete(var_1d8);
                if ((s_1 & 1) != 0)
                {
                    goto label_275d0;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_275d0;
            }
        }
        void* x22_3;
        if ((x22_2 & 1) == 0)
        {
        label_275d8:
            x22_3 = &arg3[1];
        }
        else
        {
        label_2753c:
            void var_1b0;
            LogCapture::LogCapture(&var_1b0, "DomainSock", &data_455b0, &data_2ddb7, &nullptr->ident.version);
            void var_1a8;
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_11 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "sending msg_id:", 0xf);
            uint64_t x8_7 = *arg2;
            int32_t temp0_1 = (x8_7 & 1);
            char* x1_1;
            if (temp0_1 != 0)
            {
                x1_1 = *(arg2 + 0x10);
            }
            else
            {
                x1_1 = &arg2[1];
            }
            uint64_t x2_1;
            if (temp0_1 == 0)
            {
                x2_1 = (x8_7 >> 1);
            }
            else
            {
                x2_1 = *(arg2 + 8);
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_13 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_11, x1_1, x2_1), " data:", 6);
            uint64_t x8_8 = *arg3;
            int32_t temp2_1 = (x8_8 & 1);
            char* x1_2;
            if (temp2_1 != 0)
            {
                x1_2 = *(arg3 + 0x10);
            }
            else
            {
                x1_2 = &arg3[1];
            }
            uint64_t x2_2;
            if (temp2_1 == 0)
            {
                x2_2 = (x8_8 >> 1);
            }
            else
            {
                x2_2 = *(arg3 + 8);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_13, x1_2, x2_2);
            x22_3 = &arg3[1];
            LogCapture::~LogCapture();
        }
        uint64_t x8_11 = *arg3;
        int32_t temp1_1 = (x8_11 & 1);
        void* x23_1;
        if (temp1_1 == 0)
        {
            x23_1 = x22_3;
        }
        else
        {
            x23_1 = *(arg3 + 0x10);
        }
        uint64_t i_1;
        if (temp1_1 == 0)
        {
            i_1 = (x8_11 >> 1);
        }
        else
        {
            i_1 = *(arg3 + 8);
        }
        int64_t* s_2 = operator new(0x18);
        __builtin_memset(s_2, 0, 0x18);
        if (i_1 != 0)
        {
            if ((i_1 & 0xffffffff80000000) != 0)
            {
                int64_t x0_24 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
                if ((s & 1) != 0)
                {
                    goto label_276e0;
                }
                if ((s_1 & 1) == 0)
                {
                    do
                    {
                        _Unwind_Resume(x0_24);
                    label_276e0:
                        operator delete(var_1d8);
                    } while ((s_1 & 1) == 0);
                }
                operator delete(var_1b8_1);
                int64_t x0_29 = _Unwind_Resume(x0_24);
                LogCapture::~LogCapture();
                int32_t* x0_31;
                char* x1_4;
                int64_t* x2_3;
                x0_31 = _Unwind_Resume(x0_29);
                /* tailcall */
                return protocol::DomainSockClient::send(x0_31, x1_4, x2_3);
            }
            char* x0_17 = operator new(i_1);
            char* x8_12 = x0_17;
            *s_2 = x0_17;
            s_2[1] = x0_17;
            s_2[2] = &x0_17[i_1];
            uint64_t i;
            do
            {
                char x9_5 = *x23_1;
                x23_1 = (x23_1 + 1);
                i = i_1;
                i_1 = (i_1 - 1);
                *x8_12 = x9_5;
                x8_12 = (s_2[1] + 1);
                s_2[1] = x8_12;
            } while (i != 1);
        }
        int64_t* s_3 = s_2;
        int32_t x0_19 = protocol::DomainSockClient::send(arg1, arg2);
        void* x0_20 = *s_2;
        int64_t var_1f0_1 = 0;
        if (x0_20 != 0)
        {
            s_2[1] = x0_20;
            operator delete(x0_20);
        }
        operator delete(s_2);
        if (*(x26 + 0x28) == x8)
        {
            return (x0_19 & 1);
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t sub_276f0(int64_t arg1, int64_t* arg2 @ x21)
{
    void* x8_1 = *arg2;
    if (x8_1 != 0)
    {
        arg2[1] = x8_1;
        operator delete(x8_1);
    }
    operator delete(arg2);
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    int32_t* x0_5;
    char* x1;
    int64_t* x2;
    x0_5 = _Unwind_Resume(x0_3);
    /* tailcall */
    return protocol::DomainSockClient::send(x0_5, x1, x2);
}

uint64_t protocol::DomainSockClient::send(int32_t* arg1, char* arg2, int64_t* arg3)
{
    int32_t* x24;
    int32_t* var_40 = x24;
    char* x23;
    char* var_38 = x23;
    void* x19;
    void* var_18 = x19;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    uint32_t x8_1 = *(arg1 + 6);
    int32_t var_1d8;
    int64_t s_11;
    void var_1b8;
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_1b0;
    size_t x0_2;
    size_t x0_4;
    uint64_t x8_3;
    int32_t x20_3;
    int64_t* x21_1;
    if (x8_1 != 0)
    {
        uint64_t x8_2 = *arg2;
        if ((x8_2 & 1) == 0)
        {
            x8_3 = (x8_2 >> 1);
        }
        else
        {
            x8_3 = *(arg2 + 8);
        }
        if (x8_3 == 0)
        {
            char* x20_1;
            if ((*data_45618 & 1) == 0)
            {
                x20_1 = &*(data_45618 + 1);
            }
            else
            {
                x20_1 = *(data_45622 + 6);
            }
            int32_t var_210 = data_45610;
            int64_t s_9;
            __builtin_memset(&s_9, 0, 0x18);
            x0_4 = strlen(x20_1);
            if (x0_4 >= -0x10)
            {
                void* var_1f8_1;
                void* x21_2;
                if (x0_4 >= 0x17)
                {
                    uint64_t x22_6 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
                    void* x0_28 = operator new(x22_6);
                    x21_2 = x0_28;
                    size_t var_200_1 = x0_4;
                    var_1f8_1 = x0_28;
                    s_9 = (x22_6 | 1);
                }
                else
                {
                    x21_2 = &*s_9[1];
                    s_9 = (x0_4 << 1);
                }
                if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
                {
                    memcpy(x21_2, x20_1, x0_4);
                }
                *(x21_2 + x0_4) = 0;
                int32_t x19_4;
                if ((g3::logLevel(&var_210) & 1) == 0)
                {
                    x19_4 = 0;
                    if ((s_9 & 1) != 0)
                    {
                    label_27c18:
                        operator delete(var_1f8_1);
                        if ((x19_4 & 1) == 0)
                        {
                            goto label_27c20;
                        }
                        goto label_27be0;
                    }
                }
                else
                {
                    int64_t s_8;
                    __builtin_memset(&s_8, 0, 0x18);
                    s_8 = 0x14;
                    __builtin_strncpy(&*s_8[1], "DomainSock", 0xb);
                    x19_4 = g3::logTag(&s_8);
                    if ((s_8 & 1) != 0)
                    {
                        void* var_218;
                        operator delete(var_218);
                        if ((s_9 & 1) != 0)
                        {
                            goto label_27c18;
                        }
                    }
                    else if ((s_9 & 1) != 0)
                    {
                        goto label_27c18;
                    }
                }
                if ((x19_4 & 1) == 0)
                {
                    goto label_27c20;
                }
            label_27be0:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45610, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "msg_id cannot be empty", 0x16);
            label_27bfc:
                LogCapture::~LogCapture();
                x20_3 = 0;
            }
        }
        else
        {
            std::__ndk1::mutex::lock();
            uint64_t x9_1 = *arg2;
            int32_t* x8_4 = *arg3;
            uint32_t x9_2;
            if ((x9_1 & 1) == 0)
            {
                x9_2 = (x9_1 >> 1);
            }
            else
            {
                x9_2 = *(arg2 + 8);
            }
            int32_t x21;
            if (x8_4 == 0)
            {
                x21 = (x9_2 + 1);
            }
            else
            {
                x21 = ((x9_2 + 1) + (x8_4[2] - *x8_4));
            }
            int32_t var_22c = _byteswap(x21);
            if (send(*arg1, &var_22c, 4, 0) == 4)
            {
                void* x1_3;
                if ((*arg2 & 1) != 0)
                {
                    x1_3 = *(arg2 + 0x10);
                }
                else
                {
                    x1_3 = &arg2[1];
                }
                if ((x9_2 + 1) == send(*arg1, x1_3, (x9_2 + 1), 0))
                {
                    int64_t* x8_17 = *arg3;
                    if (x8_17 != 0)
                    {
                        int64_t x1_4 = *x8_17;
                        int64_t x8_18 = x8_17[1];
                        if (x8_18 != x1_4)
                        {
                            int32_t x0_22 = send(*arg1, x1_4, (x8_18 - x1_4), 0);
                            int64_t* x8_19 = *arg3;
                            if ((x8_19[1] - *x8_19) != x0_22)
                            {
                                char* x21_7;
                                if ((*data_45638 & 1) == 0)
                                {
                                    x21_7 = &*(data_45638 + 1);
                                }
                                else
                                {
                                    x21_7 = *(data_45642 + 6);
                                }
                                int32_t var_2c0 = data_45630;
                                int64_t s_3;
                                __builtin_memset(&s_3, 0, 0x18);
                                size_t x0_96 = strlen(x21_7);
                                if (x0_96 < -0x10)
                                {
                                    goto label_28290;
                                }
                                void* var_2a8_1;
                                void* x23_6;
                                if (x0_96 >= 0x17)
                                {
                                    uint64_t x24_5 = ((x0_96 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_98 = operator new(x24_5);
                                    x23_6 = x0_98;
                                    size_t var_2b0_1 = x0_96;
                                    var_2a8_1 = x0_98;
                                    s_3 = (x24_5 | 1);
                                }
                                else
                                {
                                    x23_6 = &*s_3[1];
                                    s_3 = (x0_96 << 1);
                                }
                                if ((x0_96 >= 0x17 || (x0_96 < 0x17 && x0_96 != 0)))
                                {
                                    memcpy(x23_6, x21_7, x0_96);
                                }
                                *(x23_6 + x0_96) = 0;
                                int32_t x20_10;
                                if ((g3::logLevel(&var_2c0) & 1) == 0)
                                {
                                    x20_10 = 0;
                                    if ((s_3 & 1) != 0)
                                    {
                                    label_281c0:
                                        operator delete(var_2a8_1);
                                        if ((x20_10 & 1) == 0)
                                        {
                                            goto label_27f24;
                                        }
                                        goto label_281f0;
                                    }
                                }
                                else
                                {
                                    int64_t s_2;
                                    __builtin_memset(&s_2, 0, 0x18);
                                    s_2 = 0x14;
                                    __builtin_strncpy(&*s_2[1], "DomainSock", 0xb);
                                    x20_10 = g3::logTag(&s_2);
                                    if ((s_2 & 1) != 0)
                                    {
                                        void* var_2c8;
                                        operator delete(var_2c8);
                                        if ((s_3 & 1) != 0)
                                        {
                                            goto label_281c0;
                                        }
                                    }
                                    else if ((s_3 & 1) != 0)
                                    {
                                        goto label_281c0;
                                    }
                                }
                                if ((x20_10 & 1) == 0)
                                {
                                    goto label_27f24;
                                }
                            label_281f0:
                                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
                                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_109 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send data fail:", 0xf)), " error is ", 0xa);
                                char* x0_112 = strerror(*__errno());
                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_109, x0_112, strlen(x0_112));
                                goto label_27f20;
                            }
                        }
                    }
                    if ((*data_455b8 & 1) == 0)
                    {
                        x23 = &*(data_455b8 + 1);
                    }
                    else
                    {
                        x23 = *(data_455c2 + 6);
                    }
                    int32_t var_2f8 = data_455b0;
                    int64_t s_1;
                    __builtin_memset(&s_1, 0, 0x18);
                    size_t x0_24 = strlen(x23);
                    if (x0_24 < -0x10)
                    {
                        goto label_28288;
                    }
                    void* var_2e0_1;
                    void* x24_1;
                    if (x0_24 >= 0x17)
                    {
                        uint64_t x25_1 = ((x0_24 + 0x10) & 0xfffffffffffffff0);
                        void* x0_79 = operator new(x25_1);
                        x24_1 = x0_79;
                        size_t var_2e8_1 = x0_24;
                        var_2e0_1 = x0_79;
                        s_1 = (x25_1 | 1);
                    }
                    else
                    {
                        x24_1 = &*s_1[1];
                        s_1 = (x0_24 << 1);
                    }
                    if ((x0_24 >= 0x17 || (x0_24 < 0x17 && x0_24 != 0)))
                    {
                        memcpy(x24_1, x23, x0_24);
                    }
                    *(x24_1 + x0_24) = 0;
                    int32_t x0_82 = g3::logLevel(&var_2f8);
                    int32_t x22_7;
                    if ((x0_82 & 1) == 0)
                    {
                        x22_7 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_27fcc:
                            operator delete(var_2e0_1);
                            if ((x22_7 & 1) != 0)
                            {
                                goto label_27ffc;
                            }
                        }
                    }
                    else
                    {
                        int64_t s;
                        __builtin_memset(&s, 0, 0x18);
                        s = 0x14;
                        __builtin_strncpy(&*s[1], "DomainSock", 0xb);
                        x22_7 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            void* var_300;
                            operator delete(var_300);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_27fcc;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_27fcc;
                        }
                    }
                    if (((((x0_82 & 1) == 0 && (s_1 & 1) == 0) || (x0_82 & 1) != 0) && (x22_7 & 1) != 0))
                    {
                    label_27ffc:
                        LogCapture::LogCapture(&var_1b8, "DomainSock", &data_455b0, &data_2ddb7, &nullptr->ident.version);
                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_88 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send finish id:", 0xf);
                        uint64_t x8_48 = *arg2;
                        int32_t temp1_1 = (x8_48 & 1);
                        void* x1_13;
                        if (temp1_1 == 0)
                        {
                            x1_13 = &arg2[1];
                        }
                        else
                        {
                            x1_13 = *(arg2 + 0x10);
                        }
                        uint64_t x2_10;
                        if (temp1_1 == 0)
                        {
                            x2_10 = (x8_48 >> 1);
                        }
                        else
                        {
                            x2_10 = *(arg2 + 8);
                        }
                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_88, x1_13, x2_10), " data:", 6));
                        LogCapture::~LogCapture();
                    }
                    x20_3 = 1;
                    goto label_2805c;
                }
                char* x21_4;
                if ((*data_45638 & 1) == 0)
                {
                    x21_4 = &*(data_45638 + 1);
                }
                else
                {
                    x21_4 = *(data_45642 + 6);
                }
                int32_t var_288 = data_45630;
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                size_t x0_45 = strlen(x21_4);
                if (x0_45 < -0x10)
                {
                    goto label_28280;
                }
                void* var_270_1;
                void* x23_4;
                if (x0_45 >= 0x17)
                {
                    uint64_t x24_3 = ((x0_45 + 0x10) & 0xfffffffffffffff0);
                    void* x0_60 = operator new(x24_3);
                    x23_4 = x0_60;
                    size_t var_278_1 = x0_45;
                    var_270_1 = x0_60;
                    s_5 = (x24_3 | 1);
                }
                else
                {
                    x23_4 = &*s_5[1];
                    s_5 = (x0_45 << 1);
                }
                if ((x0_45 >= 0x17 || (x0_45 < 0x17 && x0_45 != 0)))
                {
                    memcpy(x23_4, x21_4, x0_45);
                }
                *(x23_4 + x0_45) = 0;
                int32_t x20_7;
                if ((g3::logLevel(&var_288) & 1) == 0)
                {
                    x20_7 = 0;
                    if ((s_5 & 1) != 0)
                    {
                    label_27e94:
                        operator delete(var_270_1);
                        if ((x20_7 & 1) == 0)
                        {
                            goto label_27f24;
                        }
                        goto label_27ec4;
                    }
                }
                else
                {
                    int64_t s_4;
                    __builtin_memset(&s_4, 0, 0x18);
                    s_4 = 0x14;
                    __builtin_strncpy(&*s_4[1], "DomainSock", 0xb);
                    x20_7 = g3::logTag(&s_4);
                    if ((s_4 & 1) != 0)
                    {
                        void* var_290;
                        operator delete(var_290);
                        if ((s_5 & 1) != 0)
                        {
                            goto label_27e94;
                        }
                    }
                    else if ((s_5 & 1) != 0)
                    {
                        goto label_27e94;
                    }
                }
                if ((x20_7 & 1) == 0)
                {
                    goto label_27f24;
                }
            label_27ec4:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_72 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send msg_id fail:", 0x11)), " error is ", 0xa);
                char* x0_75 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_72, x0_75, strlen(x0_75));
                goto label_27f20;
            }
            char* x21_3;
            if ((*data_45638 & 1) == 0)
            {
                x21_3 = &*(data_45638 + 1);
            }
            else
            {
                x21_3 = *(data_45642 + 6);
            }
            int32_t var_250 = data_45630;
            int64_t s_7;
            __builtin_memset(&s_7, 0, 0x18);
            size_t x0_26 = strlen(x21_3);
            if (x0_26 < -0x10)
            {
                goto label_28278;
            }
            void* var_238_1;
            void* x23_3;
            if (x0_26 >= 0x17)
            {
                uint64_t x24_2 = ((x0_26 + 0x10) & 0xfffffffffffffff0);
                void* x0_38 = operator new(x24_2);
                x23_3 = x0_38;
                size_t var_240_1 = x0_26;
                var_238_1 = x0_38;
                s_7 = (x24_2 | 1);
            }
            else
            {
                x23_3 = &*s_7[1];
                s_7 = (x0_26 << 1);
            }
            if ((x0_26 >= 0x17 || (x0_26 < 0x17 && x0_26 != 0)))
            {
                memcpy(x23_3, x21_3, x0_26);
            }
            *(x23_3 + x0_26) = 0;
            int32_t x20_4;
            if ((g3::logLevel(&var_250) & 1) == 0)
            {
                x20_4 = 0;
                if ((s_7 & 1) != 0)
                {
                label_27d2c:
                    operator delete(var_238_1);
                    if ((x20_4 & 1) != 0)
                    {
                        goto label_27d5c;
                    }
                    goto label_27f24;
                }
            }
            else
            {
                int64_t s_6;
                __builtin_memset(&s_6, 0, 0x18);
                s_6 = 0x14;
                __builtin_strncpy(&*s_6[1], "DomainSock", 0xb);
                x20_4 = g3::logTag(&s_6);
                if ((s_6 & 1) != 0)
                {
                    void* var_258;
                    operator delete(var_258);
                    if ((s_7 & 1) != 0)
                    {
                        goto label_27d2c;
                    }
                }
                else if ((s_7 & 1) != 0)
                {
                    goto label_27d2c;
                }
            }
            if ((x20_4 & 1) == 0)
            {
                goto label_27f24;
            }
        label_27d5c:
            LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_51 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send msg_len fail:", 0x12)), " error is ", 0xa);
            char* x0_54 = strerror(*__errno());
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_51, x0_54, strlen(x0_54));
        label_27f20:
            LogCapture::~LogCapture();
        label_27f24:
            x20_3 = 0;
        label_2805c:
            std::__ndk1::mutex::unlock();
        }
    }
    else
    {
        if ((*data_45618 & 1) == 0)
        {
            x21_1 = &*(data_45618 + 1);
        }
        else
        {
            x21_1 = *(data_45622 + 6);
        }
        var_1d8 = data_45610;
        __builtin_memset(&s_11, 0, 0x18);
        x0_2 = strlen(x21_1);
        if (x0_2 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
    }
    if (((x8_1 == 0 && x0_2 < -0x10) || ((x8_1 != 0 && x8_3 == 0) && x0_4 < -0x10)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_28278:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_28280:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_28288:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_28290:
        int64_t x0_121 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        std::__ndk1::mutex::unlock();
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_124;
        int64_t* x1_18;
        x0_124 = _Unwind_Resume(x0_121);
        /* tailcall */
        return protocol::DomainSockClient::processLoop(x0_124, x1_18);
    }
    if ((x8_1 == 0 && x0_2 >= -0x10))
    {
        void* var_1c0_1;
        void* x22_1;
        if (x0_2 >= 0x17)
        {
            uint64_t x23_2 = ((x0_2 + 0x10) & 0xfffffffffffffff0);
            void* x0_6 = operator new(x23_2);
            x22_1 = x0_6;
            size_t var_1c8_1 = x0_2;
            var_1c0_1 = x0_6;
            s_11 = (x23_2 | 1);
        }
        else
        {
            x22_1 = &*s_11[1];
            s_11 = (x0_2 << 1);
        }
        if ((x0_2 >= 0x17 || (x0_2 < 0x17 && x0_2 != 0)))
        {
            memcpy(x22_1, x21_1, x0_2);
        }
        *(x22_1 + x0_2) = 0;
        int32_t x19_3;
        if ((g3::logLevel(&var_1d8) & 1) == 0)
        {
            x19_3 = 0;
            if ((s_11 & 1) != 0)
            {
            label_2795c:
                operator delete(var_1c0_1);
                if ((x19_3 & 1) == 0)
                {
                    goto label_27c20;
                }
                goto label_2798c;
            }
        }
        else
        {
            int64_t s_10;
            __builtin_memset(&s_10, 0, 0x18);
            s_10 = 0x14;
            __builtin_strncpy(&*s_10[1], "DomainSock", 0xb);
            x19_3 = g3::logTag(&s_10);
            if ((s_10 & 1) != 0)
            {
                void* var_1e0;
                operator delete(var_1e0);
                if ((s_11 & 1) != 0)
                {
                    goto label_2795c;
                }
            }
            else if ((s_11 & 1) != 0)
            {
                goto label_2795c;
            }
        }
        if ((x19_3 & 1) != 0)
        {
        label_2798c:
            LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45610, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_15 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "send msg_id:", 0xc);
            uint64_t x8_14 = *arg2;
            int32_t temp0_1 = (x8_14 & 1);
            void* x1_1;
            if (temp0_1 != 0)
            {
                x1_1 = *(arg2 + 0x10);
            }
            else
            {
                x1_1 = &arg2[1];
            }
            uint64_t x2_1;
            if (temp0_1 == 0)
            {
                x2_1 = (x8_14 >> 1);
            }
            else
            {
                x2_1 = *(arg2 + 8);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_15, x1_1, x2_1), "client not connect", 0x12);
            goto label_27bfc;
        }
    label_27c20:
        x20_3 = 0;
    }
    if ((((x8_1 != 0 && x8_3 != 0) || ((x8_1 != 0 && x8_3 == 0) && x0_4 >= -0x10)) || (x8_1 == 0 && x0_2 >= -0x10)))
    {
        if (*(x26 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x20_3;
    }
}

int64_t sub_28298(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_3, x1);
}

int64_t sub_282b8(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_2, x1);
}

int64_t sub_282d4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_3, x1);
}

int64_t sub_282f4(int64_t arg1)
{
    LogCapture::~LogCapture();
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_1;
    int64_t* x1;
    x0_1 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_1, x1);
}

int64_t sub_282fc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_3, x1);
}

int64_t sub_2831c(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_2, x1);
}

int64_t sub_28334(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_2, x1);
}

int64_t sub_28350(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_3, x1);
}

int64_t sub_28370(int64_t arg1)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(x0_1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_3, x1);
}

int64_t sub_28374(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x20 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x20 = _Unwind_Resume(x20);
        LogCapture::~LogCapture();
        std::__ndk1::mutex::unlock();
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_5;
    int64_t* x1;
    x0_5 = _Unwind_Resume(x20);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_5, x1);
}

int64_t sub_28398(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x20 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x20 = _Unwind_Resume(x20);
        LogCapture::~LogCapture();
        std::__ndk1::mutex::unlock();
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_5;
    int64_t* x1;
    x0_5 = _Unwind_Resume(x20);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_5, x1);
}

int64_t sub_283b8(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_2, x1);
}

int64_t sub_283d0(int64_t arg1, char arg2, void* arg3)
{
    int64_t x20 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x20 = _Unwind_Resume(x20);
        LogCapture::~LogCapture();
        std::__ndk1::mutex::unlock();
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_4;
    int64_t* x1;
    x0_4 = _Unwind_Resume(x20);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_4, x1);
}

int64_t sub_283f0(int64_t arg1, char arg2, void* arg3)
{
    int64_t x20 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x20 = _Unwind_Resume(x20);
        LogCapture::~LogCapture();
        std::__ndk1::mutex::unlock();
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_4;
    int64_t* x1;
    x0_4 = _Unwind_Resume(x20);
    /* tailcall */
    return protocol::DomainSockClient::processLoop(x0_4, x1);
}

int64_t protocol::DomainSockClient::processLoop(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* arg1, int64_t* arg2)
{
    uint64_t s_16;
    uint64_t s_17 = s_16;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int64_t x0_16;
    int64_t s_14;
    int64_t* var_1c0;
    void var_1b8;
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > var_1b0;
    char* x22_1;
    int64_t* x23_1;
    if (*(arg1 + 0x108) == 0)
    {
        int32_t x8_7 = *(arg1 + 0x10c);
        if (x8_7 <= 0)
        {
            if ((*data_45638 & 1) == 0)
            {
                x22_1 = &*(data_45638 + 1);
            }
            else
            {
                x22_1 = *(data_45642 + 6);
            }
            int32_t var_248 = data_45630;
            int64_t s_10;
            __builtin_memset(&s_10, 0, 0x18);
            size_t x0_3 = strlen(x22_1);
            if (x0_3 < -0x10)
            {
            label_291b0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_291b8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_291c0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_291c8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_291d0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_291d8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_291e0:
                int64_t x0_112 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                int64_t x0_114 = _Unwind_Resume(x0_112);
                if ((s_14 & 1) != 0)
                {
                    operator delete(var_1c0);
                }
                void* x0_117;
                char* x1_14;
                int64_t* x2_11;
                x0_117 = _Unwind_Resume(x0_114);
                /* tailcall */
                return protocol::DomainSockClient::triggerPluginProcess(x0_117, x1_14, x2_11);
            }
            void* var_230_1;
            void* x23_2;
            if (x0_3 >= 0x17)
            {
                uint64_t x24_2 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
                void* x0_21 = operator new(x24_2);
                x23_2 = x0_21;
                size_t var_238_1 = x0_3;
                var_230_1 = x0_21;
                s_10 = (x24_2 | 1);
            }
            else
            {
                x23_2 = &*s_10[1];
                s_10 = (x0_3 << 1);
            }
            if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
            {
                memcpy(x23_2, x22_1, x0_3);
            }
            *(x23_2 + x0_3) = 0;
            int32_t x0_24 = g3::logLevel(&var_248);
            if ((x0_24 & 1) == 0)
            {
                s_16 = 0;
                if ((s_10 & 1) != 0)
                {
                label_287c0:
                    operator delete(var_230_1);
                    if ((s_16 & 1) != 0)
                    {
                        goto label_287f0;
                    }
                }
            }
            else
            {
                int64_t s_9;
                __builtin_memset(&s_9, 0, 0x18);
                s_9 = 0x14;
                __builtin_strncpy(&*s_9[1], "DomainSock", 0xb);
                s_16 = g3::logTag(&s_9);
                if ((s_9 & 1) != 0)
                {
                    void* var_250;
                    operator delete(var_250);
                    if ((s_10 & 1) != 0)
                    {
                        goto label_287c0;
                    }
                }
                else if ((s_10 & 1) != 0)
                {
                    goto label_287c0;
                }
            }
            if (((((x0_24 & 1) == 0 && (s_10 & 1) == 0) || (x0_24 & 1) != 0) && (s_16 & 1) != 0))
            {
            label_287f0:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
                int32_t x0_30 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "processing_msg_len:", 0x13);
                *(arg1 + 0x10c);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_30), " must > 0", 9);
                LogCapture::~LogCapture();
            }
            x8_7 = *(arg1 + 0x10c);
            *(arg1 + 0x108) = 1;
        }
        if ((arg2[1] - *arg2) < x8_7)
        {
            goto label_28844;
        }
        if ((*data_455b8 & 1) == 0)
        {
            x22_1 = &*(data_455b8 + 1);
        }
        else
        {
            x22_1 = *(data_455c2 + 6);
        }
        int32_t var_280 = data_455b0;
        int64_t s_8;
        __builtin_memset(&s_8, 0, 0x18);
        size_t x0_33 = strlen(x22_1);
        if (x0_33 < -0x10)
        {
            goto label_291b0;
        }
        void* var_268_1;
        void* x23_3;
        if (x0_33 >= 0x17)
        {
            uint64_t x24_3 = ((x0_33 + 0x10) & 0xfffffffffffffff0);
            void* x0_35 = operator new(x24_3);
            x23_3 = x0_35;
            size_t var_270_1 = x0_33;
            var_268_1 = x0_35;
            s_8 = (x24_3 | 1);
        }
        else
        {
            x23_3 = &*s_8[1];
            s_8 = (x0_33 << 1);
        }
        if ((x0_33 >= 0x17 || (x0_33 < 0x17 && x0_33 != 0)))
        {
            memcpy(x23_3, x22_1, x0_33);
        }
        *(x23_3 + x0_33) = 0;
        int32_t x0_38;
        int128_t v0_1;
        int128_t v1_1;
        x0_38 = g3::logLevel(&var_280);
        if ((x0_38 & 1) == 0)
        {
            s_16 = 0;
            if ((s_8 & 1) != 0)
            {
            label_28950:
                v0_1 = operator delete(var_268_1);
                if ((s_16 & 1) != 0)
                {
                    goto label_28980;
                }
            }
        }
        else
        {
            int64_t s_7;
            __builtin_memset(&s_7, 0, 0x18);
            s_7 = 0x14;
            __builtin_strncpy(&*s_7[1], "DomainSock", 0xb);
            int32_t s_18;
            s_18 = g3::logTag(&s_7);
            s_16 = s_18;
            if ((s_7 & 1) != 0)
            {
                void* var_288;
                v0_1 = operator delete(var_288);
                if ((s_8 & 1) != 0)
                {
                    goto label_28950;
                }
            }
            else if ((s_8 & 1) != 0)
            {
                goto label_28950;
            }
        }
        if (((((x0_38 & 1) == 0 && (s_8 & 1) == 0) || (x0_38 & 1) != 0) && (s_16 & 1) != 0))
        {
        label_28980:
            LogCapture::LogCapture(&var_1b8, "DomainSock", &data_455b0, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "parsing body", 0xc);
            v0_1 = LogCapture::~LogCapture();
        }
        x22_1 = *arg2;
        int64_t x9_9 = *(arg1 + 0x10c);
        void* x8_31 = &x22_1[x9_9];
        void* x28_1;
        if (x9_9 == 0)
        {
            x28_1 = x22_1;
        }
        int64_t i;
        if ((x9_9 != 0 && *x22_1 != 0))
        {
            i = (x9_9 - 1);
            char* x10_7 = x22_1;
            while (i != 0)
            {
                uint32_t x11_3 = x10_7[1];
                x28_1 = &x10_7[1];
                i = (i - 1);
                x10_7 = x28_1;
                if (x11_3 == 0)
                {
                    break;
                }
            }
        }
        if (((x9_9 == 0 || ((x9_9 != 0 && *x22_1 != 0) && i != 0)) && x8_31 != x28_1))
        {
        label_289e8:
            x23_1 = (x28_1 - x22_1);
            int64_t s_4;
            __builtin_memset(&s_4, 0, 0x18);
            if (x23_1 < -0x10)
            {
                goto label_291c0;
            }
            int64_t* var_2e0_1;
            char* var_2d8_1;
            char* x0_43;
            void* x10_8;
            if (x23_1 > 0x16)
            {
                s_16 = (&x23_1[2] & 0xfffffffffffffff0);
                x0_43 = operator new(s_16);
                var_2e0_1 = x23_1;
                var_2d8_1 = x0_43;
                s_4 = (s_16 | 1);
                x10_8 = (x28_1 - x22_1);
            }
            else
            {
                s_4 = (x23_1 << 1);
                x0_43 = (&s_4 | 1);
                x10_8 = (x28_1 - x22_1);
            }
            if (((x23_1 > 0x16 && x28_1 != x22_1) || (x23_1 <= 0x16 && x28_1 != x22_1)))
            {
                char* x9_10 = x0_43;
                char* x11_4 = x22_1;
                if (x10_8 < 0x20)
                {
                label_28b4c:
                    do
                    {
                        char x10_9 = *x11_4;
                        x11_4 = &x11_4[1];
                        *x9_10 = x10_9;
                        x9_10 = &x9_10[1];
                    } while (x28_1 != x11_4);
                }
                else
                {
                    if (x0_43 < x28_1)
                    {
                        x9_10 = x0_43;
                        x11_4 = x22_1;
                        if ((x28_1 + (x0_43 - x22_1)) > x22_1)
                        {
                            goto label_28b4c;
                        }
                    }
                    void* i_5 = (x10_8 & 0xffffffffffffffe0);
                    void* x13_1 = &x22_1[0x10];
                    x9_10 = (x0_43 + i_5);
                    x11_4 = (x22_1 + i_5);
                    void* x14_1 = &x0_43[0x10];
                    void* i_4 = i_5;
                    void* i_1;
                    do
                    {
                        v0_1 = *(x13_1 - 0x10);
                        v1_1 = *x13_1;
                        x13_1 = (x13_1 + 0x20);
                        i_1 = i_4;
                        i_4 = (i_4 - 0x20);
                        *(x14_1 - 0x10) = v0_1;
                        *x14_1 = v1_1;
                        x14_1 = (x14_1 + 0x20);
                    } while (i_1 != 0x20);
                    if (i_5 != x10_8)
                    {
                        goto label_28b4c;
                    }
                }
                x0_43 = (x0_43 + (x28_1 + -(x22_1)));
            }
            int32_t x8_41 = data_455b0;
            if ((*data_455b8 & 1) == 0)
            {
                x22_1 = &*(data_455b8 + 1);
            }
            else
            {
                x22_1 = *(data_455c2 + 6);
            }
            *x0_43 = 0;
            int32_t var_308 = x8_41;
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            size_t x0_53 = strlen(x22_1);
            if (x0_53 < -0x10)
            {
                goto label_291c8;
            }
            void* var_2f0_1;
            void* x23_4;
            if (x0_53 >= 0x17)
            {
                uint64_t x24_4 = ((x0_53 + 0x10) & 0xfffffffffffffff0);
                void* x0_55 = operator new(x24_4);
                x23_4 = x0_55;
                size_t var_2f8_1 = x0_53;
                var_2f0_1 = x0_55;
                s_3 = (x24_4 | 1);
            }
            else
            {
                x23_4 = &*s_3[1];
                s_3 = (x0_53 << 1);
            }
            if ((x0_53 >= 0x17 || (x0_53 < 0x17 && x0_53 != 0)))
            {
                memcpy(x23_4, x22_1, x0_53);
            }
            *(x23_4 + x0_53) = 0;
            int32_t x0_58 = g3::logLevel(&var_308);
            if ((x0_58 & 1) == 0)
            {
                s_16 = 0;
                if ((s_3 & 1) != 0)
                {
                label_28cbc:
                    operator delete(var_2f0_1);
                    if ((s_16 & 1) != 0)
                    {
                        goto label_28cec;
                    }
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                s_2 = 0x14;
                __builtin_strncpy(&*s_2[1], "DomainSock", 0xb);
                s_16 = g3::logTag(&s_2);
                if ((s_2 & 1) != 0)
                {
                    void* var_310;
                    operator delete(var_310);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_28cbc;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_28cbc;
                }
            }
            if (((((x0_58 & 1) == 0 && (s_3 & 1) == 0) || (x0_58 & 1) != 0) && (s_16 & 1) != 0))
            {
            label_28cec:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_455b0, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_67 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "parsing msg_id:", 0xf);
                uint64_t x8_49 = s_4;
                int32_t temp1_1 = (x8_49 & 1);
                char* x1_8;
                if (temp1_1 == 0)
                {
                    x1_8 = (&s_4 | 1);
                }
                else
                {
                    x1_8 = var_2d8_1;
                }
                int64_t* x2_7;
                if (temp1_1 == 0)
                {
                    x2_7 = (x8_49 >> 1);
                }
                else
                {
                    x2_7 = var_2e0_1;
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_67, x1_8, x2_7);
                LogCapture::~LogCapture();
            }
            int64_t x24_5 = *arg2;
            int64_t x26_1 = *(arg1 + 0x10c);
            if ((*data_455b8 & 1) == 0)
            {
                x22_1 = &*(data_455b8 + 1);
            }
            else
            {
                x22_1 = *(data_455c2 + 6);
            }
            int32_t var_340 = data_455b0;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_69 = strlen(x22_1);
            if (x0_69 < -0x10)
            {
                goto label_291d0;
            }
            void* var_328_1;
            void* x23_5;
            if (x0_69 >= 0x17)
            {
                uint64_t x24_6 = ((x0_69 + 0x10) & 0xfffffffffffffff0);
                void* x0_71 = operator new(x24_6);
                x23_5 = x0_71;
                size_t var_330_1 = x0_69;
                var_328_1 = x0_71;
                s_1 = (x24_6 | 1);
            }
            else
            {
                x23_5 = &*s_1[1];
                s_1 = (x0_69 << 1);
            }
            if ((x0_69 >= 0x17 || (x0_69 < 0x17 && x0_69 != 0)))
            {
                memcpy(x23_5, x22_1, x0_69);
            }
            *(x23_5 + x0_69) = 0;
            int32_t x21_8;
            if ((g3::logLevel(&var_340) & 1) == 0)
            {
                x21_8 = 0;
            }
            else
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                s = 0x14;
                __builtin_strncpy(&*s[1], "DomainSock", 0xb);
                x21_8 = g3::logTag(&s);
                void* var_348;
                if ((s & 1) != 0)
                {
                    operator delete(var_348);
                }
            }
            void* x23_6 = (x28_1 + 1);
            void* x22_3 = ((x24_5 + x26_1) - x23_6);
            if ((s_1 & 1) != 0)
            {
                operator delete(var_328_1);
            }
            if ((x21_8 & 1) != 0)
            {
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_455b0, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "get data size:", 0xe));
                LogCapture::~LogCapture();
            }
            if (x22_3 >= 1)
            {
                uint64_t s_15 = operator new(0x18);
                s_16 = s_15;
                int64_t x8_56 = (x22_3 << 0x20);
                __builtin_memset(s_15, 0, 0x18);
                if (x8_56 == 0)
                {
                    goto label_28f90;
                }
                if ((x8_56 & 0xffffffff80000000) != 0)
                {
                    goto label_291e0;
                }
                int64_t i_6 = x22_3;
                char* x0_83 = operator new(i_6);
                char* x8_57 = x0_83;
                int64_t i_3 = i_6;
                *s_16 = x0_83;
                *(s_16 + 8) = x0_83;
                *(s_16 + 0x10) = &x0_83[i_6];
                int64_t i_2;
                do
                {
                    char x10_14 = *x23_6;
                    x23_6 = (x23_6 + 1);
                    i_2 = i_3;
                    i_3 = (i_3 - 1);
                    *x8_57 = x10_14;
                    x8_57 = (*(s_16 + 8) + 1);
                    *(s_16 + 8) = x8_57;
                } while (i_2 != 1);
                goto label_28f90;
            }
            s_16 = 0;
        label_28f90:
            int64_t x8_61 = *(arg1 + 0x10c);
            *(arg1 + 0x108) = 1;
            if (x8_61 != 0)
            {
                int64_t x22_5 = *arg2;
                int64_t x9_17 = arg2[1];
                int64_t x1_11 = (x22_5 + x8_61);
                size_t x23_7 = (x9_17 - x1_11);
                if (x9_17 != x1_11)
                {
                    memmove(x22_5, x1_11, x23_7);
                }
                arg2[1] = (x22_5 + x23_7);
            }
            protocol::DomainSockClient::triggerPluginProcess(arg1, &s_4);
            int64_t var_360_2 = 0;
            if (s_16 != 0)
            {
                void* x0_89 = *s_16;
                if (x0_89 != 0)
                {
                    *(s_16 + 8) = x0_89;
                    operator delete(x0_89);
                }
                operator delete(s_16);
            }
            if ((s_4 & 1) == 0)
            {
            label_29004:
                x0_16 = 1;
            }
            else
            {
                operator delete(var_2d8_1);
                x0_16 = 1;
            }
        }
        if (x9_9 != 0)
        {
            if ((*x22_1 != 0 && i == 0))
            {
                x28_1 = x8_31;
                if (x8_31 != x28_1)
                {
                    goto label_289e8;
                }
            }
            if (*x22_1 == 0)
            {
                x28_1 = x22_1;
                if (x8_31 != x28_1)
                {
                    goto label_289e8;
                }
            }
        }
        if (((((x9_9 == 0 || ((x9_9 != 0 && *x22_1 != 0) && i != 0)) && x8_31 == x28_1) || (x9_9 != 0 && *x22_1 == 0)) || ((x9_9 != 0 && *x22_1 != 0) && i == 0)))
        {
            if ((*data_45638 & 1) != 0)
            {
                s_16 = *(data_45642 + 6);
                goto label_28f54;
            }
            s_16 = &*(data_45638 + 1);
        label_28f54:
            int32_t var_2b8 = data_45630;
            int64_t s_6;
            __builtin_memset(&s_6, 0, 0x18);
            size_t x0_86 = strlen(s_16);
            if (x0_86 < -0x10)
            {
                goto label_291d8;
            }
            void* var_2a0_1;
            void* x22_4;
            if (x0_86 >= 0x17)
            {
                uint64_t x23_8 = ((x0_86 + 0x10) & 0xfffffffffffffff0);
                void* x0_94 = operator new(x23_8);
                x22_4 = x0_94;
                size_t var_2a8_1 = x0_86;
                var_2a0_1 = x0_94;
                s_6 = (x23_8 | 1);
            }
            else
            {
                x22_4 = &*s_6[1];
                s_6 = (x0_86 << 1);
            }
            if ((x0_86 >= 0x17 || (x0_86 < 0x17 && x0_86 != 0)))
            {
                memcpy(x22_4, s_16, x0_86);
            }
            *(x22_4 + x0_86) = 0;
            int32_t x0_97 = g3::logLevel(&var_2b8);
            int32_t x20_3;
            if ((x0_97 & 1) == 0)
            {
                x20_3 = 0;
                if ((s_6 & 1) != 0)
                {
                label_290e0:
                    operator delete(var_2a0_1);
                    if ((x20_3 & 1) != 0)
                    {
                        goto label_29110;
                    }
                }
            }
            else
            {
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                s_5 = 0x14;
                __builtin_strncpy(&*s_5[1], "DomainSock", 0xb);
                x20_3 = g3::logTag(&s_5);
                if ((s_5 & 1) != 0)
                {
                    void* var_2c0;
                    operator delete(var_2c0);
                    if ((s_6 & 1) != 0)
                    {
                        goto label_290e0;
                    }
                }
                else if ((s_6 & 1) != 0)
                {
                    goto label_290e0;
                }
            }
            if (((((x0_97 & 1) == 0 && (s_6 & 1) == 0) || (x0_97 & 1) != 0) && (x20_3 & 1) != 0))
            {
            label_29110:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "cannot find msg_id end", 0x16);
                LogCapture::~LogCapture();
            }
            x0_16 = 0;
            *(arg1 + 0x108) = 1;
        }
    }
    else
    {
        int32_t* x8_2 = *arg2;
        if ((arg2[1] - x8_2) < 4)
        {
        label_28844:
            x0_16 = 0;
        }
        else
        {
            *(arg1 + 0x10c) = _byteswap(*x8_2);
            uint32_t x10_1 = *data_455b8;
            int32_t var_1d8 = data_455b0;
            char* x9_3 = *(data_455c2 + 6);
            __builtin_memset(&s_14, 0, 0x18);
            if ((x10_1 & 1) == 0)
            {
                x22_1 = &*(data_455b8 + 1);
            }
            else
            {
                x22_1 = x9_3;
            }
            size_t x0_1 = strlen(x22_1);
            if (x0_1 < -0x10)
            {
                goto label_291b0;
            }
            if (x0_1 >= 0x17)
            {
                uint64_t x24_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
                int64_t* x0_5 = operator new(x24_1);
                x23_1 = x0_5;
                size_t var_1c8_1 = x0_1;
                var_1c0 = x0_5;
                s_14 = (x24_1 | 1);
            }
            else
            {
                x23_1 = &*s_14[1];
                s_14 = (x0_1 << 1);
            }
            if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
            {
                memcpy(x23_1, x22_1, x0_1);
            }
            *(x23_1 + x0_1) = 0;
            int32_t x0_8 = g3::logLevel(&var_1d8);
            int32_t x21_2;
            if ((x0_8 & 1) == 0)
            {
                x21_2 = 0;
                if ((s_14 & 1) != 0)
                {
                label_28614:
                    operator delete(var_1c0);
                    if ((x21_2 & 1) != 0)
                    {
                        goto label_28644;
                    }
                }
            }
            else
            {
                int64_t s_13;
                __builtin_memset(&s_13, 0, 0x18);
                s_13 = 0x14;
                __builtin_strncpy(&*s_13[1], "DomainSock", 0xb);
                x21_2 = g3::logTag(&s_13);
                if ((s_13 & 1) != 0)
                {
                    void* var_1e0;
                    operator delete(var_1e0);
                    if ((s_14 & 1) != 0)
                    {
                        goto label_28614;
                    }
                }
                else if ((s_14 & 1) != 0)
                {
                    goto label_28614;
                }
            }
            if (((((x0_8 & 1) == 0 && (s_14 & 1) == 0) || (x0_8 & 1) != 0) && (x21_2 & 1) != 0))
            {
            label_28644:
                LogCapture::LogCapture(&var_1b8, "DomainSock", &data_455b0, &data_2ddb7, &nullptr->ident.version);
                int32_t x0_14 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "parsing msg len:", 0x10);
                *(arg1 + 0x10c);
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_14);
                LogCapture::~LogCapture();
            }
            void* x21_3 = *arg2;
            int64_t x8_14 = arg2[1];
            x22_1 = (x8_14 - (x21_3 + 4));
            if (x8_14 != (x21_3 + 4))
            {
                memmove(x21_3, (x21_3 + 4), x22_1);
            }
            arg2[1] = (x21_3 + x22_1);
            if (*(arg1 + 0x10c) < 1)
            {
                char* x20_1;
                if ((*data_45638 & 1) == 0)
                {
                    x20_1 = &*(data_45638 + 1);
                }
                else
                {
                    x20_1 = *(data_45642 + 6);
                }
                int32_t var_210 = data_45630;
                int64_t s_12;
                __builtin_memset(&s_12, 0, 0x18);
                size_t x0_18 = strlen(x20_1);
                if (x0_18 < -0x10)
                {
                    goto label_291b8;
                }
                void* var_1f8_1;
                void* x21_4;
                if (x0_18 >= 0x17)
                {
                    uint64_t x22_2 = ((x0_18 + 0x10) & 0xfffffffffffffff0);
                    void* x0_45 = operator new(x22_2);
                    x21_4 = x0_45;
                    size_t var_200_1 = x0_18;
                    var_1f8_1 = x0_45;
                    s_12 = (x22_2 | 1);
                }
                else
                {
                    x21_4 = &*s_12[1];
                    s_12 = (x0_18 << 1);
                }
                if ((x0_18 >= 0x17 || (x0_18 < 0x17 && x0_18 != 0)))
                {
                    memcpy(x21_4, x20_1, x0_18);
                }
                *(x21_4 + x0_18) = 0;
                int32_t x0_48 = g3::logLevel(&var_210);
                int32_t x19_2;
                if ((x0_48 & 1) == 0)
                {
                    x19_2 = 0;
                    if ((s_12 & 1) != 0)
                    {
                    label_28c58:
                        operator delete(var_1f8_1);
                        if ((x19_2 & 1) != 0)
                        {
                            goto label_28c88;
                        }
                    }
                }
                else
                {
                    int64_t s_11;
                    __builtin_memset(&s_11, 0, 0x18);
                    s_11 = 0x14;
                    __builtin_strncpy(&*s_11[1], "DomainSock", 0xb);
                    x19_2 = g3::logTag(&s_11);
                    if ((s_11 & 1) != 0)
                    {
                        void* var_218;
                        operator delete(var_218);
                        if ((s_12 & 1) != 0)
                        {
                            goto label_28c58;
                        }
                    }
                    else if ((s_12 & 1) != 0)
                    {
                        goto label_28c58;
                    }
                }
                if (((((x0_48 & 1) == 0 && (s_12 & 1) == 0) || (x0_48 & 1) != 0) && (x19_2 & 1) != 0))
                {
                label_28c88:
                    LogCapture::LogCapture(&var_1b8, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "msg len is 0", 0xc);
                    LogCapture::~LogCapture();
                }
                goto label_29004;
            }
            *(arg1 + 0x108) = 0;
            x0_16 = 1;
        }
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_16;
}

int64_t sub_291e8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_29208(int64_t arg1, int64_t* arg2 @ x21, char arg3, void* arg4)
{
    void* x8_2 = *arg2;
    if (x8_2 != 0)
    {
        arg2[1] = x8_2;
        operator delete(x8_2);
    }
    operator delete(arg2);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    void* x0_4;
    char* x1;
    int64_t* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_4, x1, x2);
}

int64_t sub_29228(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_29234(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    void* x0_4;
    char* x1;
    int64_t* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_4, x1, x2);
}

int64_t sub_2925c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    void* x0_4;
    char* x1;
    int64_t* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_4, x1, x2);
}

int64_t sub_2927c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_2929c(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_292b0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_292e4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_2932c(int64_t arg1, char arg2, void* arg3)
{
    LogCapture::~LogCapture();
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_29330(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_2935c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    void* x0_3;
    char* x1;
    int64_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_3, x1, x2);
}

int64_t sub_29380(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_29394(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_2, x1, x2);
}

int64_t sub_293c8(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    char* x1;
    int64_t* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return protocol::DomainSockClient::triggerPluginProcess(x0_2, x1, x2);
}

int64_t protocol::DomainSockClient::triggerPluginProcess(void* arg1, char* arg2, int64_t* arg3)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    std::__ndk1::mutex::lock();
    void* x0_2 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0xf0));
    char var_1f8;
    int64_t var_1f0;
    char* x20_1;
    if ((arg1 + 0xf8) == x0_2)
    {
        void* x0_6 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0xd8));
        if ((arg1 + 0xe0) != x0_6)
        {
            char* x8_4 = *arg3;
            *arg3 = 0;
            int64_t* x0_7 = *(x0_6 + 0x60);
            if (x0_7 == 0)
            {
                goto label_29a58;
            }
            *(*x0_7 + 0x30)();
            x20_1 = x8_4;
            char* var_298 = nullptr;
            if (x20_1 == 0)
            {
                goto label_299f8;
            }
            void* x0_8 = *x20_1;
            if (x0_8 != 0)
            {
                *(x20_1 + 8) = x0_8;
                operator delete(x0_8);
            }
            goto label_29824;
        }
        char* x22_1;
        if ((*data_45618 & 1) == 0)
        {
            x22_1 = &*(data_45618 + 1);
        }
        else
        {
            x22_1 = *(data_45622 + 6);
        }
        int32_t var_2b8 = data_45610;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_40 = strlen(x22_1);
        if (x0_40 < -0x10)
        {
            int64_t x0_55 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            std::__ndk1::mutex::unlock();
            int64_t* x0_58;
            void* x1_11;
            x0_58 = _Unwind_Resume(x0_55);
            /* tailcall */
            return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_58, x1_11);
        }
        void* var_2a0_1;
        void* x23_5;
        if (x0_40 >= 0x17)
        {
            uint64_t x24_5 = ((x0_40 + 0x10) & 0xfffffffffffffff0);
            void* x0_42 = operator new(x24_5);
            x23_5 = x0_42;
            size_t var_2a8_1 = x0_40;
            var_2a0_1 = x0_42;
            s_1 = (x24_5 | 1);
        }
        else
        {
            x23_5 = &*s_1[1];
            s_1 = (x0_40 << 1);
        }
        if ((x0_40 >= 0x17 || (x0_40 < 0x17 && x0_40 != 0)))
        {
            memcpy(x23_5, x22_1, x0_40);
        }
        *(x23_5 + x0_40) = 0;
        int32_t x0_45 = g3::logLevel(&var_2b8);
        int32_t x21_2;
        if ((x0_45 & 1) == 0)
        {
            x21_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_29988:
                operator delete(var_2a0_1);
                if ((x21_2 & 1) != 0)
                {
                    goto label_299b8;
                }
            }
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            s = 0x14;
            __builtin_strncpy(&*s[1], "DomainSock", 0xb);
            x21_2 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                void* var_2c0;
                operator delete(var_2c0);
                if ((s_1 & 1) != 0)
                {
                    goto label_29988;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_29988;
            }
        }
        if (((((x0_45 & 1) == 0 && (s_1 & 1) == 0) || (x0_45 & 1) != 0) && (x21_2 & 1) != 0))
        {
        label_299b8:
            LogCapture::LogCapture(&var_1f8, "DomainSock", &data_45610, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_51 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f0, "unkown msg id:", 0xe);
            uint64_t x8_37 = *arg2;
            int32_t temp0_1 = (x8_37 & 1);
            void* x1_10;
            if (temp0_1 != 0)
            {
                x1_10 = *(arg2 + 0x10);
            }
            else
            {
                x1_10 = &arg2[1];
            }
            uint64_t x2_4;
            if (temp0_1 == 0)
            {
                x2_4 = (x8_37 >> 1);
            }
            else
            {
                x2_4 = *(arg2 + 8);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_51, x1_10, x2_4);
            LogCapture::~LogCapture();
        }
        goto label_299f8;
    }
    char* x24_1;
    if ((*data_455b8 & 1) == 0)
    {
        x24_1 = &*(data_455b8 + 1);
    }
    else
    {
        x24_1 = *(data_455c2 + 6);
    }
    int32_t var_218 = data_455b0;
    int64_t s_4;
    __builtin_memset(&s_4, 0, 0x18);
    size_t x0_4 = strlen(x24_1);
    if (x0_4 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_29a4c:
        sub_13744();
        /* no return */
    }
    void* var_200_1;
    void* x25_1;
    if (x0_4 >= 0x17)
    {
        uint64_t x26_1 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
        void* x0_10 = operator new(x26_1);
        x25_1 = x0_10;
        size_t var_208_1 = x0_4;
        var_200_1 = x0_10;
        s_4 = (x26_1 | 1);
    }
    else
    {
        x25_1 = &*s_4[1];
        s_4 = (x0_4 << 1);
    }
    if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
    {
        memcpy(x25_1, x24_1, x0_4);
    }
    *(x25_1 + x0_4) = 0;
    int32_t x23_2;
    if ((g3::logLevel(&var_218) & 1) == 0)
    {
        x23_2 = 0;
        if ((s_4 & 1) != 0)
        {
        label_295d8:
            operator delete(var_200_1);
            if ((x23_2 & 1) != 0)
            {
                goto label_29608;
            }
            goto label_29760;
        }
    }
    else
    {
        int64_t s_3;
        __builtin_memset(&s_3, 0, 0x18);
        s_3 = 0x14;
        __builtin_strncpy(&*s_3[1], "DomainSock", 0xb);
        x23_2 = g3::logTag(&s_3);
        if ((s_3 & 1) != 0)
        {
            void* var_220;
            operator delete(var_220);
            if ((s_4 & 1) != 0)
            {
                goto label_295d8;
            }
        }
        else if ((s_4 & 1) != 0)
        {
            goto label_295d8;
        }
    }
    if ((x23_2 & 1) != 0)
    {
    label_29608:
        LogCapture::LogCapture(&var_1f8, "DomainSock", &data_455b0, &data_2ddb7, &nullptr->ident.version);
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_19;
        int128_t v0_1;
        int128_t v1_1;
        x0_19 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f0, "parsing josn data:", 0x12);
        int64_t* x8_12 = *arg3;
        void* x28_1 = *x8_12;
        int64_t x25_2 = x8_12[1];
        int64_t s_2;
        __builtin_memset(&s_2, 0, 0x18);
        uint64_t x26_2 = (x25_2 - x28_1);
        if (x26_2 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_29a58:
            sub_13744();
            /* no return */
        }
        uint64_t var_240_1;
        char* var_238_1;
        char* x0_20;
        if (x26_2 > 0x16)
        {
            uint64_t x24_2 = ((x26_2 + 0x10) & 0xfffffffffffffff0);
            x0_20 = operator new(x24_2);
            var_240_1 = x26_2;
            var_238_1 = x0_20;
            s_2 = (x24_2 | 1);
        }
        else
        {
            s_2 = (x26_2 << 1);
            x0_20 = (&s_2 | 1);
        }
        if (((x26_2 > 0x16 && x28_1 != x25_2) || (x26_2 <= 0x16 && x28_1 != x25_2)))
        {
            char* x9_2 = x0_20;
            void* x10_2 = x28_1;
            if (x26_2 < 0x20)
            {
            label_29710:
                do
                {
                    char x11_2 = *x10_2;
                    x10_2 = (x10_2 + 1);
                    *x9_2 = x11_2;
                    x9_2 = &x9_2[1];
                } while (x25_2 != x10_2);
            }
            else
            {
                if (x0_20 < x25_2)
                {
                    x9_2 = x0_20;
                    x10_2 = x28_1;
                    if (&x0_20[x26_2] > x28_1)
                    {
                        goto label_29710;
                    }
                }
                int64_t i_2 = (x26_2 & 0xffffffffffffffe0);
                void* x12_1 = (x28_1 + 0x10);
                x9_2 = &x0_20[i_2];
                x10_2 = (x28_1 + i_2);
                void* x13_1 = &x0_20[0x10];
                int64_t i_1 = i_2;
                int64_t i;
                do
                {
                    v0_1 = *(x12_1 - 0x10);
                    v1_1 = *x12_1;
                    x12_1 = (x12_1 + 0x20);
                    i = i_1;
                    i_1 = (i_1 - 0x20);
                    *(x13_1 - 0x10) = v0_1;
                    *x13_1 = v1_1;
                    x13_1 = (x13_1 + 0x20);
                } while (i != 0x20);
                if (i_2 != x26_2)
                {
                    goto label_29710;
                }
            }
            x0_20 = &x0_20[(x25_2 + -(x28_1))];
        }
        *x0_20 = 0;
        uint64_t x9_4 = s_2;
        int32_t temp1_1 = (x9_4 & 1);
        char* x1_3;
        if (temp1_1 == 0)
        {
            x1_3 = (&s_2 | 1);
        }
        else
        {
            x1_3 = var_238_1;
        }
        uint64_t x2_1;
        if (temp1_1 == 0)
        {
            x2_1 = (x9_4 >> 1);
        }
        else
        {
            x2_1 = var_240_1;
        }
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_19, x1_3, x2_1);
        if ((s_2 & 1) != 0)
        {
            operator delete(var_238_1);
        }
        LogCapture::~LogCapture();
        goto label_29760;
    }
label_29760:
    int64_t* x8_21 = *arg3;
    int64_t* var_90_1 = nullptr;
    void var_b0;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::parse<std::__ndk1::__wrap_iter<uint8_t*>, 0>(*x8_21, x8_21[1], &var_b0, true);
    char* x0_26 = operator new(0x10);
    int64_t x10_4 = var_1f0;
    *x0_26 = var_1f8;
    var_1f8 = 0;
    *(x0_26 + 8) = x10_4;
    var_1f0 = 0;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&var_1f0);
    int64_t x8_24;
    if (&var_b0 == var_90_1)
    {
        x8_24 = *(*var_90_1 + 0x20);
    }
    if ((&var_b0 != var_90_1 && var_90_1 != 0))
    {
        x8_24 = *(*var_90_1 + 0x28);
    }
    if ((&var_b0 == var_90_1 || (&var_b0 != var_90_1 && var_90_1 != 0)))
    {
        x8_24();
    }
    if (*arg3 != 0)
    {
        int64_t* x0_29 = *(x0_2 + 0x60);
        if (x0_29 == 0)
        {
            goto label_29a4c;
        }
        *(*x0_29 + 0x30)();
        x20_1 = x0_26;
        char* var_288 = nullptr;
        if (x20_1 == 0)
        {
            goto label_299f8;
        }
        *x20_1;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x20_1[8]);
    label_29824:
        operator delete(x20_1);
    label_299f8:
        int64_t x0_53 = std::__ndk1::mutex::unlock();
        if (*(x27 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_53;
    }
    void* var_290 = nullptr;
    int64_t* x0_33 = *(x0_2 + 0x60);
    if (x0_33 == 0)
    {
        sub_13744();
        /* no return */
    }
    *(*x0_33 + 0x30)();
    void* x20_2 = var_290;
    var_290 = nullptr;
    if (x20_2 != 0)
    {
        char* x0_34 = x20_2;
        *x0_34;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_34[8]);
        operator delete(x20_2);
    }
    *x0_26;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0_26[8]);
    operator delete(x0_26);
    goto label_299f8;
}

int64_t sub_29a6c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    void* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_3, x1);
}

int64_t sub_29a8c(int64_t arg1)
{
    LogCapture::~LogCapture();
    std::__ndk1::mutex::unlock();
    int64_t* x0_1;
    void* x1;
    x0_1 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_1, x1);
}

int64_t sub_29a90(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_2;
    void* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_2, x1);
}

int64_t sub_29aac(int64_t arg1, char* arg2 @ x23, int64_t arg3 @ x24, void* arg4)
{
    void* x21 = arg4;
    arg4 = nullptr;
    if (x21 != 0)
    {
        char* x0 = x21;
        *x0;
        nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&x0[8]);
        operator delete(x21);
    }
    *arg2;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(arg3);
    operator delete(arg2);
    std::__ndk1::mutex::unlock();
    int64_t* x0_6;
    void* x1_3;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_6, x1_3);
}

int64_t sub_29b38(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    void* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_3, x1);
}

int64_t sub_29b84(void* arg1, int32_t arg2, void* arg3 @ x27, void* arg4 @ x29, int64_t arg5, void* arg6, void* arg7, char arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18, int64_t arg19)
{
    void* exceptionObject = arg1;
    nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>::json_value::destroy(&arg_f0);
    int64_t* x0_1 = *(arg4 - 0x80);
    int64_t x8_2;
    if ((arg4 - 0xa0) == x0_1)
    {
        x8_2 = *(*x0_1 + 0x20);
    }
    if (((arg4 - 0xa0) != x0_1 && x0_1 != 0))
    {
        x8_2 = *(*x0_1 + 0x28);
    }
    if (((arg4 - 0xa0) == x0_1 || ((arg4 - 0xa0) != x0_1 && x0_1 != 0)))
    {
        x8_2();
    }
    if (arg2 == 1)
    {
        void* x0_3 = __cxa_begin_catch(exceptionObject);
        char* x22_1;
        if ((*data_45638 & 1) == 0)
        {
            x22_1 = &*(data_45638 + 1);
        }
        else
        {
            x22_1 = *(data_45642 + 6);
        }
        arg_78 = data_45630;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_5 = strlen(x22_1);
        if (x0_5 >= -0x10)
        {
            void* x23;
            if (x0_5 >= 0x17)
            {
                uint64_t x24_1 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
                void* x0_7 = operator new(x24_1);
                x23 = x0_7;
                arg_88 = x0_5;
                arg7 = x0_7;
                s_1 = (x24_1 | 1);
            }
            else
            {
                x23 = &*s_1[1];
                s_1 = (x0_5 << 1);
            }
            if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
            {
                memcpy(x23, x22_1, x0_5);
            }
            *(x23 + x0_5) = 0;
            int32_t x0_10 = g3::logLevel(&arg_78);
            int32_t x21_1;
            if ((x0_10 & 1) == 0)
            {
                x21_1 = 0;
                if ((s_1 & 1) != 0)
                {
                label_29cec:
                    operator delete(arg7);
                    if ((x21_1 & 1) != 0)
                    {
                        goto label_29d1c;
                    }
                }
            }
            else
            {
                __builtin_memset(&s, 0, 0x18);
                s = 0x14;
                __builtin_strncpy(&*s[1], "DomainSock", 0xb);
                x21_1 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    operator delete(arg6);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_29cec;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_29cec;
                }
            }
            if (((((x0_10 & 1) == 0 && (s_1 & 1) == 0) || (x0_10 & 1) != 0) && (x21_1 & 1) != 0))
            {
            label_29d1c:
                LogCapture::LogCapture(&arg8, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_16 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&arg_f0, "protocol error:", 0xf);
                char* x0_18 = *(*x0_3 + 0x10)(x0_3);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_16, x0_18, strlen(x0_18));
                LogCapture::~LogCapture();
            }
            __cxa_end_catch();
            int64_t x0_27 = std::__ndk1::mutex::unlock();
            if (*(arg3 + 0x28) != arg5)
            {
                __stack_chk_fail();
                /* no return */
            }
            return x0_27;
        }
        exceptionObject = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        __cxa_end_catch();
    }
    std::__ndk1::mutex::unlock();
    int64_t* x0_25;
    void* x1_3;
    x0_25 = _Unwind_Resume(exceptionObject);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_25, x1_3);
}

int64_t sub_29ba0(void* arg1, int32_t arg2, void* arg3 @ x27, void* arg4 @ x29, int64_t arg5, void* arg6, void* arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t arg15, int64_t arg16, int64_t arg17, int64_t arg18)
{
    int64_t* x0 = *(arg4 - 0x80);
    int64_t x8_2;
    if ((arg4 - 0xa0) == x0)
    {
        x8_2 = *(*x0 + 0x20);
    }
    if (((arg4 - 0xa0) != x0 && x0 != 0))
    {
        x8_2 = *(*x0 + 0x28);
    }
    if (((arg4 - 0xa0) == x0 || ((arg4 - 0xa0) != x0 && x0 != 0)))
    {
        x8_2();
    }
    if (arg2 != 1)
    {
        std::__ndk1::mutex::unlock();
        int64_t* x0_24;
        void* x1_3;
        x0_24 = _Unwind_Resume(arg1);
        /* tailcall */
        return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_24, x1_3);
    }
    void* x0_2 = __cxa_begin_catch(arg1);
    char* x22;
    if ((*data_45638 & 1) == 0)
    {
        x22 = &*(data_45638 + 1);
    }
    else
    {
        x22 = *(data_45642 + 6);
    }
    arg_78 = data_45630;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_4 = strlen(x22);
    if (x0_4 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
        /* tailcall */
        return sub_29db0();
    }
    void* x23;
    if (x0_4 >= 0x17)
    {
        uint64_t x24_1 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
        void* x0_6 = operator new(x24_1);
        x23 = x0_6;
        arg_88 = x0_4;
        arg7 = x0_6;
        s_1 = (x24_1 | 1);
    }
    else
    {
        x23 = &*s_1[1];
        s_1 = (x0_4 << 1);
    }
    if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
    {
        memcpy(x23, x22, x0_4);
    }
    *(x23 + x0_4) = 0;
    int32_t x0_9 = g3::logLevel(&arg_78);
    int32_t x21_1;
    if ((x0_9 & 1) == 0)
    {
        x21_1 = 0;
        if ((s_1 & 1) != 0)
        {
        label_29cec:
            operator delete(arg7);
            if ((x21_1 & 1) != 0)
            {
                goto label_29d1c;
            }
        }
    }
    else
    {
        __builtin_memset(&s, 0, 0x18);
        s = 0x14;
        __builtin_strncpy(&*s[1], "DomainSock", 0xb);
        x21_1 = g3::logTag(&s);
        if ((s & 1) != 0)
        {
            operator delete(arg6);
            if ((s_1 & 1) != 0)
            {
                goto label_29cec;
            }
        }
        else if ((s_1 & 1) != 0)
        {
            goto label_29cec;
        }
    }
    if (((((x0_9 & 1) == 0 && (s_1 & 1) == 0) || (x0_9 & 1) != 0) && (x21_1 & 1) != 0))
    {
    label_29d1c:
        LogCapture::LogCapture(&arg_e8, "DomainSock", &data_45630, &data_2ddb7, &nullptr->ident.version);
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_15 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&arg_f0, "protocol error:", 0xf);
        char* x0_17 = *(*x0_2 + 0x10)(x0_2);
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_15, x0_17, strlen(x0_17));
        LogCapture::~LogCapture();
    }
    __cxa_end_catch();
    int64_t x0_26 = std::__ndk1::mutex::unlock();
    if (*(arg3 + 0x28) != arg5)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_26;
}

int64_t sub_29d90(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    __cxa_end_catch();
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    void* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_3, x1);
}

int64_t sub_29dcc(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    __cxa_end_catch();
    std::__ndk1::mutex::unlock();
    int64_t* x0_2;
    void* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(x0_2, x1);
}

void sub_29de8(void* arg1) __noreturn
{
    sub_1353c(arg1);
    /* no return */
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> >, std::__ndk1::default_delete<std::__ndk1::vector<uint8_t, std::__ndk1::allocator<uint8_t> > > >)> > > >::erase(int64_t* arg1, void* arg2)
{
    int64_t* i_1 = *(arg2 + 8);
    int64_t* i_2;
    if (i_1 == 0)
    {
        int64_t** x8_1 = (arg2 + 0x10);
        i_2 = *x8_1;
        if (*i_2 != arg2)
        {
            int64_t* i;
            do
            {
                i = *x8_1;
                x8_1 = &i[2];
                i_2 = *x8_1;
            } while (*i_2 != i);
        }
    }
    else
    {
        do
        {
            i_2 = i_1;
            i_1 = *i_1;
        } while (i_1 != 0);
    }
    if (*arg1 == arg2)
    {
        *arg1 = i_2;
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x8_4 = arg1[1];
    arg1[2] = (arg1[2] - 1);
    std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(x8_4, arg2);
    int64_t* x0_1 = *(arg2 + 0x60);
    int64_t x8_7;
    if ((arg2 + 0x40) == x0_1)
    {
        x8_7 = *(*x0_1 + 0x20);
    }
    if (((arg2 + 0x40) != x0_1 && x0_1 != 0))
    {
        x8_7 = *(*x0_1 + 0x28);
    }
    if (((arg2 + 0x40) == x0_1 || ((arg2 + 0x40) != x0_1 && x0_1 != 0)))
    {
        x8_7();
    }
    if ((*(arg2 + 0x20) & 1) != 0)
    {
        operator delete(*(arg2 + 0x30));
    }
    operator delete(arg2);
    return i_2;
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::function<void (std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&, std::__ndk1::unique_ptr<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer>, std::__ndk1::default_delete<nlohmann::basic_json<std::__ndk1::map, std::__ndk1::vector, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, bool, int64_t, uint64_t, double, std::__ndk1::allocator, nlohmann::adl_serializer> > >)> > > >::erase(int64_t* arg1, void* arg2)
{
    int64_t* i_1 = *(arg2 + 8);
    int64_t* i_2;
    if (i_1 == 0)
    {
        int64_t** x8_1 = (arg2 + 0x10);
        i_2 = *x8_1;
        if (*i_2 != arg2)
        {
            int64_t* i;
            do
            {
                i = *x8_1;
                x8_1 = &i[2];
                i_2 = *x8_1;
            } while (*i_2 != i);
        }
    }
    else
    {
        do
        {
            i_2 = i_1;
            i_1 = *i_1;
        } while (i_1 != 0);
    }
    if (*arg1 == arg2)
    {
        *arg1 = i_2;
    }
    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x8_4 = arg1[1];
    arg1[2] = (arg1[2] - 1);
    std::__ndk1::__tree_remove<std::__ndk1::__tree_node_base<void*>*>(x8_4, arg2);
    int64_t* x0_1 = *(arg2 + 0x60);
    int64_t x8_7;
    if ((arg2 + 0x40) == x0_1)
    {
        x8_7 = *(*x0_1 + 0x20);
    }
    if (((arg2 + 0x40) != x0_1 && x0_1 != 0))
    {
        x8_7 = *(*x0_1 + 0x28);
    }
    if (((arg2 + 0x40) == x0_1 || ((arg2 + 0x40) != x0_1 && x0_1 != 0)))
    {
        x8_7();
    }
    if ((*(arg2 + 0x20) & 1) != 0)
    {
        operator delete(*(arg2 + 0x30));
    }
    operator delete(arg2);
    return i_2;
}

int32_t sub_29fb8(int64_t arg1, int128_t* arg2)
{
    int64_t x0 = operator new(8);
    std::__ndk1::__thread_struct::__thread_struct();
    int64_t* x0_1;
    int128_t v0;
    x0_1 = operator new(0x20);
    *x0_1 = x0;
    v0 = *arg2;
    x0_1[3] = arg2[1];
    *(x0_1 + 8) = v0;
    int32_t x0_3 = pthread_create(arg1, 0, _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8protocol16DomainSockClientEFvvEJPS9_EEEEEEEEPvSF_, x0_1);
    if (x0_3 == 0)
    {
        return x0_3;
    }
    int64_t x0_4 = std::__ndk1::__throw_system_error(x0_3, "thread constructor failed");
    void* x21_1 = *x0_1;
    *x0_1 = 0;
    if (x21_1 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x21_1);
    }
    operator delete(x0_1);
    /* tailcall */
    return _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8protocol16DomainSockClientEFvvEJPS9_EEEEEEEEPvSF_(_Unwind_Resume(x0_4));
}

int64_t sub_2a060(int64_t arg1, void* arg2 @ x21)
{
    std::__ndk1::__thread_struct::~__thread_struct();
    operator delete(arg2);
    /* tailcall */
    return _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8protocol16DomainSockClientEFvvEJPS9_EEEEEEEEPvSF_(_Unwind_Resume(arg1));
}

int64_t _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN8protocol16DomainSockClientEFvvEJPS9_EEEEEEEEPvSF_(int64_t* arg1)
{
    int32_t* x0 = std::__ndk1::__thread_local_data();
    int64_t x1 = *arg1;
    *arg1 = 0;
    pthread_setspecific(*x0, x1);
    int64_t x10 = arg1[2];
    int64_t x8 = arg1[1];
    int64_t* x0_2 = (arg1[3] + (x10 >> 1));
    if ((x10 & 1) != 0)
    {
        x8 = *(*x0_2 + x8);
    }
    x8(x0_2);
    void* x20 = *arg1;
    *arg1 = 0;
    if (x20 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x20);
    }
    operator delete(arg1);
    return 0;
}

int64_t sub_2a100(int64_t arg1, int64_t* arg2 @ x19)
{
    if (arg2 != 0)
    {
        void* x21_1 = *arg2;
        *arg2 = 0;
        if (x21_1 != 0)
        {
            std::__ndk1::__thread_struct::~__thread_struct();
            operator delete(x21_1);
        }
        operator delete(arg2);
    }
    char* x0_4;
    char x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return pudutech::Ashdmem::Ashdmem(x0_4, x1);
}

int64_t sub_2a10c(int64_t arg1, int64_t* arg2 @ x19)
{
    void* x21 = *arg2;
    *arg2 = 0;
    if (x21 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x21);
    }
    operator delete(arg2);
    char* x0_4;
    char x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return pudutech::Ashdmem::Ashdmem(x0_4, x1);
}

void pudutech::Ashdmem::Ashdmem(char* arg1, char arg2)
{
    *arg1 = (arg2 & 1);
    *(arg1 + 4) = 0xffffffff;
    *(arg1 + 8) = 0;
}

int64_t pudutech::Ashdmem::~Ashdmem(char* arg1)
{
    int64_t x0 = pudutech::Ashdmem::releaseSharedMemory();
    if (*arg1 != 0)
    {
        x0 = pudutech::Ashdmem::closeSharedMemory();
    }
    return x0;
}

void sub_2a184(void* arg1) __noreturn
{
    sub_1353c(arg1);
    /* no return */
}

int64_t pudutech::Ashdmem::releaseSharedMemory(void* arg1)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int32_t x0 = *(arg1 + 4);
    void var_1b0;
    void var_1a8;
    int64_t x0_89;
    if ((x0 != 0xffffffff || (x0 == 0xffffffff && *(arg1 + 8) != 0)))
    {
        int32_t x0_1 = ioctl(x0, "4adl_serializerEEEE10end_objectE…", 0);
        if ((x0_1 & 0x80000000) != 0)
        {
            char* x20_1;
            if ((*data_45780 & 1) == 0)
            {
                x20_1 = &*(data_45780 + 1);
            }
            else
            {
                x20_1 = *(data_4578a + 6);
            }
            int32_t var_208 = data_45778;
            int64_t s_7;
            __builtin_memset(&s_7, 0, 0x18);
            size_t x0_5 = strlen(x20_1);
            if (x0_5 < -0x10)
            {
                goto label_2ab5c;
            }
            void* var_1f0_1;
            void* x21_3;
            if (x0_5 >= 0x17)
            {
                uint64_t x22_3 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
                void* x0_15 = operator new(x22_3);
                x21_3 = x0_15;
                size_t var_1f8_1 = x0_5;
                var_1f0_1 = x0_15;
                s_7 = (x22_3 | 1);
            }
            else
            {
                x21_3 = &*s_7[1];
                s_7 = (x0_5 << 1);
            }
            if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
            {
                memcpy(x21_3, x20_1, x0_5);
            }
            *(x21_3 + x0_5) = 0;
            int32_t x19_3;
            if ((g3::logLevel(&var_208) & 1) == 0)
            {
                x19_3 = 0;
                if ((s_7 & 1) != 0)
                {
                label_2a3e4:
                    operator delete(var_1f0_1);
                    if ((x19_3 & 1) == 0)
                    {
                        goto label_2a9a4;
                    }
                    goto label_2a97c;
                }
            }
            else
            {
                int64_t s_6;
                __builtin_memset(&s_6, 0, 0x18);
                uint64_t x19_2 = *pudutech::ASHTAG;
                size_t x0_20 = strlen(x19_2);
                if (x0_20 < -0x10)
                {
                    goto label_2ab7c;
                }
                void* var_210_1;
                void* x21_6;
                if (x0_20 >= 0x17)
                {
                    uint64_t x22_8 = ((x0_20 + 0x10) & 0xfffffffffffffff0);
                    void* x0_83 = operator new(x22_8);
                    x21_6 = x0_83;
                    size_t var_218_1 = x0_20;
                    var_210_1 = x0_83;
                    s_6 = (x22_8 | 1);
                }
                else
                {
                    x21_6 = (&s_6 | 1);
                    s_6 = (x0_20 << 1);
                }
                if ((x0_20 >= 0x17 || (x0_20 < 0x17 && x0_20 != 0)))
                {
                    memcpy(x21_6, x19_2, x0_20);
                }
                *(x21_6 + x0_20) = 0;
                x19_3 = g3::logTag(&s_6);
                if ((s_6 & 1) != 0)
                {
                    operator delete(var_210_1);
                    if ((s_7 & 1) != 0)
                    {
                        goto label_2a3e4;
                    }
                }
                else if ((s_7 & 1) != 0)
                {
                    goto label_2a3e4;
                }
            }
            if ((x19_3 & 1) == 0)
            {
            label_2a9a4:
                x0_89 = 0;
            }
            else
            {
            label_2a97c:
                LogCapture::LogCapture(&var_1b0, *pudutech::ASHTAG, &data_45778, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "closed memory size is smaller th…", 0x24);
            label_2a998:
                LogCapture::~LogCapture();
                x0_89 = 0;
            }
        }
        else
        {
            char* x22_1;
            if ((*data_45740 & 1) == 0)
            {
                x22_1 = &*(data_45740 + 1);
            }
            else
            {
                x22_1 = *(data_4574a + 6);
            }
            int32_t var_240 = data_45738;
            int64_t s_5;
            __builtin_memset(&s_5, 0, 0x18);
            size_t x0_3 = strlen(x22_1);
            if (x0_3 < -0x10)
            {
            label_2ab50:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_2ab54:
                __stack_chk_fail();
                /* no return */
            }
            void* var_228_1;
            void* x23_2;
            if (x0_3 >= 0x17)
            {
                uint64_t x24_1 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
                void* x0_7 = operator new(x24_1);
                x23_2 = x0_7;
                size_t var_230_1 = x0_3;
                var_228_1 = x0_7;
                s_5 = (x24_1 | 1);
            }
            else
            {
                x23_2 = &*s_5[1];
                s_5 = (x0_3 << 1);
            }
            if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
            {
                memcpy(x23_2, x22_1, x0_3);
            }
            *(x23_2 + x0_3) = 0;
            int32_t x21_5;
            if ((g3::logLevel(&var_240) & 1) == 0)
            {
                x21_5 = 0;
                if ((s_5 & 1) != 0)
                {
                label_2a340:
                    operator delete(var_228_1);
                    if ((x21_5 & 1) == 0)
                    {
                        goto label_2a514;
                    }
                    goto label_2a4d4;
                }
            }
            else
            {
                int64_t s_4;
                __builtin_memset(&s_4, 0, 0x18);
                uint64_t x21_4 = *pudutech::ASHTAG;
                size_t x0_12 = strlen(x21_4);
                if (x0_12 < -0x10)
                {
                    goto label_2ab64;
                }
                void* var_248_1;
                void* x23_3;
                if (x0_12 >= 0x17)
                {
                    uint64_t x24_2 = ((x0_12 + 0x10) & 0xfffffffffffffff0);
                    void* x0_25 = operator new(x24_2);
                    x23_3 = x0_25;
                    size_t var_250_1 = x0_12;
                    var_248_1 = x0_25;
                    s_4 = (x24_2 | 1);
                }
                else
                {
                    x23_3 = (&s_4 | 1);
                    s_4 = (x0_12 << 1);
                }
                if ((x0_12 >= 0x17 || (x0_12 < 0x17 && x0_12 != 0)))
                {
                    memcpy(x23_3, x21_4, x0_12);
                }
                *(x23_3 + x0_12) = 0;
                x21_5 = g3::logTag(&s_4);
                if ((s_4 & 1) != 0)
                {
                    operator delete(var_248_1);
                    if ((s_5 & 1) != 0)
                    {
                        goto label_2a340;
                    }
                }
                else if ((s_5 & 1) != 0)
                {
                    goto label_2a340;
                }
            }
            if ((x21_5 & 1) == 0)
            {
                goto label_2a514;
            }
        label_2a4d4:
            LogCapture::LogCapture(&var_1b0, *pudutech::ASHTAG, &data_45738, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "check shared memory size ", 0x19)), " before realse memory", 0x15);
            LogCapture::~LogCapture();
        label_2a514:
            int32_t x0_34 = munmap(*(arg1 + 8), x0_1);
            char* x22_4;
            if ((*data_45740 & 1) == 0)
            {
                x22_4 = &*(data_45740 + 1);
            }
            else
            {
                x22_4 = *(data_4574a + 6);
            }
            int32_t var_278 = data_45738;
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            size_t x0_36 = strlen(x22_4);
            if (x0_36 < -0x10)
            {
                goto label_2ab50;
            }
            void* var_260_1;
            void* x23_4;
            if (x0_36 >= 0x17)
            {
                uint64_t x24_3 = ((x0_36 + 0x10) & 0xfffffffffffffff0);
                void* x0_38 = operator new(x24_3);
                x23_4 = x0_38;
                size_t var_268_1 = x0_36;
                var_260_1 = x0_38;
                s_3 = (x24_3 | 1);
            }
            else
            {
                x23_4 = &*s_3[1];
                s_3 = (x0_36 << 1);
            }
            if ((x0_36 >= 0x17 || (x0_36 < 0x17 && x0_36 != 0)))
            {
                memcpy(x23_4, x22_4, x0_36);
            }
            *(x23_4 + x0_36) = 0;
            int32_t x0_41 = g3::logLevel(&var_278);
            int32_t x21_10;
            if ((x0_41 & 1) == 0)
            {
                x21_10 = 0;
                if ((s_3 & 1) != 0)
                {
                label_2a610:
                    operator delete(var_260_1);
                    if ((x21_10 & 1) != 0)
                    {
                        goto label_2a7b8;
                    }
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                uint64_t x21_9 = *pudutech::ASHTAG;
                size_t x0_43 = strlen(x21_9);
                if (x0_43 < -0x10)
                {
                    goto label_2ab6c;
                }
                void* var_280_1;
                void* x23_5;
                if (x0_43 >= 0x17)
                {
                    uint64_t x24_4 = ((x0_43 + 0x10) & 0xfffffffffffffff0);
                    void* x0_57 = operator new(x24_4);
                    x23_5 = x0_57;
                    size_t var_288_1 = x0_43;
                    var_280_1 = x0_57;
                    s_2 = (x24_4 | 1);
                }
                else
                {
                    x23_5 = (&s_2 | 1);
                    s_2 = (x0_43 << 1);
                }
                if ((x0_43 >= 0x17 || (x0_43 < 0x17 && x0_43 != 0)))
                {
                    memcpy(x23_5, x21_9, x0_43);
                }
                *(x23_5 + x0_43) = 0;
                x21_10 = g3::logTag(&s_2);
                if ((s_2 & 1) != 0)
                {
                    operator delete(var_280_1);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_2a610;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_2a610;
                }
            }
            if (((((((x0_41 & 1) == 0 && (s_3 & 1) == 0) || (x0_41 & 1) != 0) && (x21_10 & 1) == 0) || ((x0_41 & 1) == 0 && (s_3 & 1) != 0)) && x0_34 == 0))
            {
            label_2a7e4:
                *(arg1 + 8) = 0;
                goto label_2ab04;
            }
            if (((((x0_41 & 1) == 0 && (s_3 & 1) == 0) || (x0_41 & 1) != 0) && (x21_10 & 1) != 0))
            {
            label_2a7b8:
                LogCapture::LogCapture(&var_1b0, *pudutech::ASHTAG, &data_45738, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "unmap return ", 0xd));
                LogCapture::~LogCapture();
                if (x0_34 == 0)
                {
                    goto label_2a7e4;
                }
            }
            if ((((((((x0_41 & 1) == 0 && (s_3 & 1) == 0) || (x0_41 & 1) != 0) && (x21_10 & 1) == 0) || ((x0_41 & 1) == 0 && (s_3 & 1) != 0)) && x0_34 != 0) || ((((x0_41 & 1) == 0 && (s_3 & 1) == 0) || (x0_41 & 1) != 0) && (x21_10 & 1) != 0)))
            {
                char* x20_5;
                if ((*data_45780 & 1) == 0)
                {
                    x20_5 = &*(data_45780 + 1);
                label_2a648:
                    int32_t var_2b0 = data_45778;
                    int64_t s_1;
                    __builtin_memset(&s_1, 0, 0x18);
                    size_t x0_46 = strlen(x20_5);
                    if (x0_46 < -0x10)
                    {
                        goto label_2ab5c;
                    }
                    void* var_298_1;
                    void* x21_11;
                    if (x0_46 >= 0x17)
                    {
                        uint64_t x22_6 = ((x0_46 + 0x10) & 0xfffffffffffffff0);
                        void* x0_48 = operator new(x22_6);
                        x21_11 = x0_48;
                        size_t var_2a0_1 = x0_46;
                        var_298_1 = x0_48;
                        s_1 = (x22_6 | 1);
                    }
                    else
                    {
                        x21_11 = &*s_1[1];
                        s_1 = (x0_46 << 1);
                    }
                    if ((x0_46 >= 0x17 || (x0_46 < 0x17 && x0_46 != 0)))
                    {
                        memcpy(x21_11, x20_5, x0_46);
                    }
                    *(x21_11 + x0_46) = 0;
                    int32_t x19_7;
                    if ((g3::logLevel(&var_2b0) & 1) == 0)
                    {
                        x19_7 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_2a718:
                            operator delete(var_298_1);
                            if ((x19_7 & 1) == 0)
                            {
                                goto label_2a9a4;
                            }
                            goto label_2a880;
                        }
                    }
                    else
                    {
                        int64_t s;
                        __builtin_memset(&s, 0, 0x18);
                        uint64_t x19_6 = *pudutech::ASHTAG;
                        size_t x0_53 = strlen(x19_6);
                        if (x0_53 < -0x10)
                        {
                            goto label_2ab74;
                        }
                        void* var_2b8_1;
                        void* x21_12;
                        if (x0_53 >= 0x17)
                        {
                            uint64_t x22_7 = ((x0_53 + 0x10) & 0xfffffffffffffff0);
                            void* x0_66 = operator new(x22_7);
                            x21_12 = x0_66;
                            size_t var_2c0_1 = x0_53;
                            var_2b8_1 = x0_66;
                            s = (x22_7 | 1);
                        }
                        else
                        {
                            x21_12 = (&s | 1);
                            s = (x0_53 << 1);
                        }
                        if ((x0_53 >= 0x17 || (x0_53 < 0x17 && x0_53 != 0)))
                        {
                            memcpy(x21_12, x19_6, x0_53);
                        }
                        *(x21_12 + x0_53) = 0;
                        x19_7 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            operator delete(var_2b8_1);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_2a718;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_2a718;
                        }
                    }
                    if ((x19_7 & 1) == 0)
                    {
                        goto label_2a9a4;
                    }
                label_2a880:
                    LogCapture::LogCapture(&var_1b0, *pudutech::ASHTAG, &data_45778, &data_2ddb7, &nullptr->ident.version);
                    int32_t x0_72 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "unmap memory failed, error ", 0x1b);
                    int32_t* x0_73 = __errno();
                    *x0_73;
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_76 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_72), &data_2ddb6, 1);
                    char* x0_78 = strerror(*x0_73);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_76, x0_78, strlen(x0_78));
                    goto label_2a998;
                }
                x20_5 = *(data_4578a + 6);
                goto label_2a648;
            }
        }
    }
    if ((x0 == 0xffffffff && *(arg1 + 8) == 0))
    {
        char* x20_3;
        if ((*data_45780 & 1) == 0)
        {
            x20_3 = &*(data_45780 + 1);
        }
        else
        {
            x20_3 = *(data_4578a + 6);
        }
        int32_t var_1d0 = data_45778;
        int64_t s_9;
        __builtin_memset(&s_9, 0, 0x18);
        size_t x0_23 = strlen(x20_3);
        if (x0_23 < -0x10)
        {
        label_2ab5c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2ab64:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2ab6c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2ab74:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2ab7c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2ab84:
            int64_t x0_109 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            /* tailcall */
            return pudutech::Ashdmem::closeSharedMemory(_Unwind_Resume(x0_109));
        }
        void* var_1b8_1;
        void* x21_7;
        if (x0_23 >= 0x17)
        {
            uint64_t x22_9 = ((x0_23 + 0x10) & 0xfffffffffffffff0);
            void* x0_92 = operator new(x22_9);
            x21_7 = x0_92;
            size_t var_1c0_1 = x0_23;
            var_1b8_1 = x0_92;
            s_9 = (x22_9 | 1);
        }
        else
        {
            x21_7 = &*s_9[1];
            s_9 = (x0_23 << 1);
        }
        if ((x0_23 >= 0x17 || (x0_23 < 0x17 && x0_23 != 0)))
        {
            memcpy(x21_7, x20_3, x0_23);
        }
        *(x21_7 + x0_23) = 0;
        int32_t x19_11;
        if ((g3::logLevel(&var_1d0) & 1) == 0)
        {
            x19_11 = 0;
            if ((s_9 & 1) != 0)
            {
            label_2aa58:
                operator delete(var_1b8_1);
                if ((x19_11 & 1) == 0)
                {
                    goto label_2ab04;
                }
                goto label_2aae4;
            }
        }
        else
        {
            int64_t s_8;
            __builtin_memset(&s_8, 0, 0x18);
            uint64_t x19_10 = *pudutech::ASHTAG;
            size_t x0_97 = strlen(x19_10);
            if (x0_97 < -0x10)
            {
                goto label_2ab84;
            }
            void* var_1d8_1;
            void* x21_13;
            if (x0_97 >= 0x17)
            {
                uint64_t x22_10 = ((x0_97 + 0x10) & 0xfffffffffffffff0);
                void* x0_100 = operator new(x22_10);
                x21_13 = x0_100;
                size_t var_1e0_1 = x0_97;
                var_1d8_1 = x0_100;
                s_8 = (x22_10 | 1);
            }
            else
            {
                x21_13 = (&s_8 | 1);
                s_8 = (x0_97 << 1);
            }
            if ((x0_97 >= 0x17 || (x0_97 < 0x17 && x0_97 != 0)))
            {
                memcpy(x21_13, x19_10, x0_97);
            }
            *(x21_13 + x0_97) = 0;
            x19_11 = g3::logTag(&s_8);
            if ((s_8 & 1) != 0)
            {
                operator delete(var_1d8_1);
                if ((s_9 & 1) != 0)
                {
                    goto label_2aa58;
                }
            }
            else if ((s_9 & 1) != 0)
            {
                goto label_2aa58;
            }
        }
        if ((x19_11 & 1) == 0)
        {
            goto label_2ab04;
        }
    label_2aae4:
        LogCapture::LogCapture(&var_1b0, *pudutech::ASHTAG, &data_45778, &data_2ddb7, &nullptr->ident.version);
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "memory not  alloced", 0x13);
        LogCapture::~LogCapture();
    label_2ab04:
        x0_89 = 1;
    }
    if (*(x25 + 0x28) == x8)
    {
        return x0_89;
    }
    goto label_2ab54;
}

int64_t sub_2ab8c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return pudutech::Ashdmem::closeSharedMemory(_Unwind_Resume(x0_3));
}

int64_t sub_2abb0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t sub_2abd0(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t sub_2abf0(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t sub_2ac04(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t sub_2ac24(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t sub_2ac44(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t sub_2ac58(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t sub_2ac70(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t sub_2ac84(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return sub_2aca4();
}

int64_t pudutech::Ashdmem::closeSharedMemory(void* arg1)
{
    char* x21;
    char* var_28 = x21;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int32_t x0 = *(arg1 + 4);
    if (x0 == 0xffffffff)
    {
        goto label_2afbc;
    }
    int32_t x0_1 = close(x0);
    char* x22_1;
    if ((*data_45740 & 1) == 0)
    {
        x22_1 = &*(data_45740 + 1);
    }
    else
    {
        x22_1 = *(data_4574a + 6);
    }
    int32_t var_1c0 = data_45738;
    int64_t s_3;
    __builtin_memset(&s_3, 0, 0x18);
    size_t x0_3 = strlen(x22_1);
    char s;
    void* var_200;
    char s_1;
    void* var_1e0;
    if (x0_3 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_2b118:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_2b120:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_2b128:
        int64_t x0_50 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        if ((s & 1) != 0)
        {
            operator delete(var_200);
        }
        if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
        {
            operator delete(var_1e0);
        }
        int64_t x0_54 = _Unwind_Resume(x0_50);
        LogCapture::~LogCapture();
        /* tailcall */
        return pudutech::Ashdmem::create(_Unwind_Resume(x0_54));
    }
    void* var_1a8_1;
    void* x23_1;
    if (x0_3 >= 0x17)
    {
        uint64_t x24_1 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
        void* x0_5 = operator new(x24_1);
        x23_1 = x0_5;
        size_t var_1b0_1 = x0_3;
        var_1a8_1 = x0_5;
        s_3 = (x24_1 | 1);
    }
    else
    {
        x23_1 = &*s_3[1];
        s_3 = (x0_3 << 1);
    }
    if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
    {
        memcpy(x23_1, x22_1, x0_3);
    }
    *(x23_1 + x0_3) = 0;
    int32_t x0_8 = g3::logLevel(&var_1c0);
    int32_t x21_3;
    if ((x0_8 & 1) == 0)
    {
        x21_3 = 0;
        if ((s_3 & 1) != 0)
        {
        label_2adf4:
            operator delete(var_1a8_1);
            if ((x21_3 & 1) != 0)
            {
                goto label_2af88;
            }
        }
    }
    else
    {
        int64_t s_2;
        __builtin_memset(&s_2, 0, 0x18);
        uint64_t x21_2 = *pudutech::ASHTAG;
        size_t x0_10 = strlen(x21_2);
        if (x0_10 < -0x10)
        {
            goto label_2b120;
        }
        void* var_1c8_1;
        void* x23_2;
        if (x0_10 >= 0x17)
        {
            uint64_t x24_2 = ((x0_10 + 0x10) & 0xfffffffffffffff0);
            void* x0_23 = operator new(x24_2);
            x23_2 = x0_23;
            size_t var_1d0_1 = x0_10;
            var_1c8_1 = x0_23;
            s_2 = (x24_2 | 1);
        }
        else
        {
            x23_2 = (&s_2 | 1);
            s_2 = (x0_10 << 1);
        }
        if ((x0_10 >= 0x17 || (x0_10 < 0x17 && x0_10 != 0)))
        {
            memcpy(x23_2, x21_2, x0_10);
        }
        *(x23_2 + x0_10) = 0;
        x21_3 = g3::logTag(&s_2);
        if ((s_2 & 1) != 0)
        {
            operator delete(var_1c8_1);
            if ((s_3 & 1) != 0)
            {
                goto label_2adf4;
            }
        }
        else if ((s_3 & 1) != 0)
        {
            goto label_2adf4;
        }
    }
    int64_t x0_47;
    if (((((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) == 0) || ((x0_8 & 1) == 0 && (s_3 & 1) != 0)) && x0_1 == 0))
    {
    label_2afb8:
        *(arg1 + 4) = 0xffffffff;
    label_2afbc:
        x0_47 = 1;
    }
    void var_1a0;
    void var_198;
    if (((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) != 0))
    {
    label_2af88:
        LogCapture::LogCapture(&var_1a0, *pudutech::ASHTAG, &data_45738, &data_2ddb7, &nullptr->ident.version);
        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "close fd return ", 0x10));
        LogCapture::~LogCapture();
        if (x0_1 == 0)
        {
            goto label_2afb8;
        }
    }
    char* x20_2;
    if (((((((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) == 0) || ((x0_8 & 1) == 0 && (s_3 & 1) != 0)) && x0_1 != 0) || ((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) != 0)) && (*data_45780 & 1) == 0))
    {
        x20_2 = &*(data_45780 + 1);
    label_2ae2c:
        int32_t var_1f8 = data_45778;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_13 = strlen(x20_2);
        if (x0_13 < -0x10)
        {
            goto label_2b118;
        }
        void* x21_4;
        if (x0_13 >= 0x17)
        {
            uint64_t x22_3 = ((x0_13 + 0x10) & 0xfffffffffffffff0);
            void* x0_15 = operator new(x22_3);
            x21_4 = x0_15;
            size_t var_1e8_1 = x0_13;
            var_1e0 = x0_15;
            s_1 = (x22_3 | 1);
        }
        else
        {
            void var_1ef;
            x21_4 = &var_1ef;
            s_1 = (x0_13 << 1);
        }
        if ((x0_13 >= 0x17 || (x0_13 < 0x17 && x0_13 != 0)))
        {
            memcpy(x21_4, x20_2, x0_13);
        }
        *(x21_4 + x0_13) = 0;
        int32_t x19_3;
        if ((g3::logLevel(&var_1f8) & 1) == 0)
        {
            x19_3 = 0;
            if ((s_1 & 1) != 0)
            {
            label_2aefc:
                operator delete(var_1e0);
                if ((x19_3 & 1) == 0)
                {
                    goto label_2b0c4;
                }
                goto label_2b058;
            }
        }
        else
        {
            __builtin_memset(&s, 0, 0x18);
            uint64_t x19_2 = *pudutech::ASHTAG;
            size_t x0_20 = strlen(x19_2);
            if (x0_20 < -0x10)
            {
                goto label_2b128;
            }
            void* x21_5;
            if (x0_20 >= 0x17)
            {
                uint64_t x22_4 = ((x0_20 + 0x10) & 0xfffffffffffffff0);
                void* x0_32 = operator new(x22_4);
                x21_5 = x0_32;
                size_t var_208_1 = x0_20;
                var_200 = x0_32;
                s = (x22_4 | 1);
            }
            else
            {
                x21_5 = (&s | 1);
                s = (x0_20 << 1);
            }
            if ((x0_20 >= 0x17 || (x0_20 < 0x17 && x0_20 != 0)))
            {
                memcpy(x21_5, x19_2, x0_20);
            }
            *(x21_5 + x0_20) = 0;
            x19_3 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                operator delete(var_200);
                if ((s_1 & 1) != 0)
                {
                    goto label_2aefc;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_2aefc;
            }
        }
        if ((x19_3 & 1) == 0)
        {
            goto label_2b0c4;
        }
    label_2b058:
        LogCapture::LogCapture(&var_1a0, *pudutech::ASHTAG, &data_45778, &data_2ddb7, &nullptr->ident.version);
        int32_t x0_38 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "close file descriptor failed, er…", 0x24);
        int32_t* x0_39 = __errno();
        *x0_39;
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_42 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_38), &data_2ddb6, 1);
        char* x0_44 = strerror(*x0_39);
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_42, x0_44, strlen(x0_44));
        LogCapture::~LogCapture();
    label_2b0c4:
        x0_47 = 0;
    }
    if ((((((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) == 0) || ((x0_8 & 1) == 0 && (s_3 & 1) != 0)) && x0_1 == 0) || ((((((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) == 0) || ((x0_8 & 1) == 0 && (s_3 & 1) != 0)) && x0_1 != 0) || ((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) != 0)) && (*data_45780 & 1) == 0)))
    {
        if (*(x25 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x0_47;
    }
    if (((((((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) == 0) || ((x0_8 & 1) == 0 && (s_3 & 1) != 0)) && x0_1 != 0) || ((((x0_8 & 1) == 0 && (s_3 & 1) == 0) || (x0_8 & 1) != 0) && (x21_3 & 1) != 0)) && (*data_45780 & 1) != 0))
    {
        x20_2 = *(data_4578a + 6);
        goto label_2ae2c;
    }
}

int64_t sub_2b14c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t x0_3 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return pudutech::Ashdmem::create(_Unwind_Resume(x0_3));
}

int64_t sub_2b184(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_2 = _Unwind_Resume(arg1);
    LogCapture::~LogCapture();
    /* tailcall */
    return pudutech::Ashdmem::create(_Unwind_Resume(x0_2));
}

int64_t* pudutech::Ashdmem::create(void** arg1 @ x8)
{
    char* x0 = operator new(0x10);
    *(x0 + 8) = 0;
    *x0 = 1;
    *(x0 + 4) = 0xffffffff;
    *arg1 = x0;
    int64_t* x0_1 = operator new(0x20);
    x0_1[2] = 0;
    x0_1[3] = x0;
    arg1[1] = x0_1;
    *x0_1 = (_vtable_for_std::__ndk1::__shared_ptr_pointer<pudutech::Ashdmem*, std::__ndk1::default_delete<pudutech::Ashdmem>, std::__ndk1::allocator<pudutech::Ashdmem> > + 0x10);
    x0_1[1] = 0;
    return x0_1;
}

void sub_2b214(int64_t arg1, char* arg2 @ x19) __noreturn
{
    pudutech::Ashdmem::releaseSharedMemory();
    if (*arg2 != 0)
    {
        pudutech::Ashdmem::closeSharedMemory();
    }
    operator delete(arg2);
    sub_1353c(_Unwind_Resume(arg1));
    /* no return */
}

uint64_t pudutech::Ashdmem::createMemory(void* arg1, char* arg2, int32_t arg3)
{
    char* x24;
    char* var_40 = x24;
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    *pudutech::ASHMEM_DEVICE;
    int32_t x0_1 = open();
    int32_t x8_18;
    void var_1b8;
    void var_1b0;
    if ((x0_1 & 0x80000000) == 0)
    {
        *(arg1 + 4) = x0_1;
        int32_t x0_2 = ioctl(x0_1, "4adl_serializerEEEE10end_objectE…", 0);
        if ((*data_45740 & 1) == 0)
        {
            x24 = &*(data_45740 + 1);
        }
        else
        {
            x24 = *(data_4574a + 6);
        }
        int32_t var_210 = data_45738;
        int64_t s_7;
        __builtin_memset(&s_7, 0, 0x18);
        size_t x0_4 = strlen(x24);
        char s_2;
        void* var_288;
        char s_3;
        void* var_268;
        if (x0_4 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2bcec:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2bcf4:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2bcfc:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2bd04:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2bd0c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2bd14:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_2bd1c:
            int64_t x0_127 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s_2 & 1) != 0)
            {
                operator delete(var_288);
            }
            if ((((s_2 & 1) == 0 && (s_3 & 1) != 0) || ((s_2 & 1) != 0 && (s_3 & 1) != 0)))
            {
                operator delete(var_268);
            }
            int64_t* x0_131;
            int64_t* x1_25;
            x0_131 = _Unwind_Resume(x0_127);
            /* tailcall */
            return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_131, x1_25);
        }
        void* var_1f8_1;
        void* x25_1;
        if (x0_4 >= 0x17)
        {
            uint64_t x26_1 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
            void* x0_8 = operator new(x26_1);
            x25_1 = x0_8;
            size_t var_200_1 = x0_4;
            var_1f8_1 = x0_8;
            s_7 = (x26_1 | 1);
        }
        else
        {
            x25_1 = &*s_7[1];
            s_7 = (x0_4 << 1);
        }
        if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
        {
            memcpy(x25_1, x24, x0_4);
        }
        *(x25_1 + x0_4) = 0;
        int32_t x0_11 = g3::logLevel(&var_210);
        int32_t x23_3;
        if ((x0_11 & 1) == 0)
        {
            x23_3 = 0;
            if ((s_7 & 1) != 0)
            {
            label_2b518:
                operator delete(var_1f8_1);
                if ((x23_3 & 1) != 0)
                {
                    goto label_2b54c;
                }
            }
        }
        else
        {
            int64_t s_6;
            __builtin_memset(&s_6, 0, 0x18);
            uint64_t x23_2 = *pudutech::ASHTAG;
            char* x0_13 = strlen(x23_2);
            if (x0_13 < -0x10)
            {
                goto label_2bcf4;
            }
            char* var_218_1;
            char* x25_2;
            if (x0_13 >= 0x17)
            {
                uint64_t x26_2 = (&x0_13[0x10] & 0xfffffffffffffff0);
                char* x0_22 = operator new(x26_2);
                x25_2 = x0_22;
                char* var_220_1 = x0_13;
                var_218_1 = x0_22;
                s_6 = (x26_2 | 1);
            }
            else
            {
                x25_2 = (&s_6 | 1);
                s_6 = (x0_13 << 1);
            }
            if ((x0_13 >= 0x17 || (x0_13 < 0x17 && x0_13 != 0)))
            {
                memcpy(x25_2, x23_2, x0_13);
            }
            *(x25_2 + x0_13) = 0;
            x23_3 = g3::logTag(&s_6);
            if ((s_6 & 1) != 0)
            {
                operator delete(var_218_1);
                if ((s_7 & 1) != 0)
                {
                    goto label_2b518;
                }
            }
            else if ((s_7 & 1) != 0)
            {
                goto label_2b518;
            }
        }
        if (((((((x0_11 & 1) == 0 && (s_7 & 1) == 0) || (x0_11 & 1) != 0) && (x23_3 & 1) == 0) || ((x0_11 & 1) == 0 && (s_7 & 1) != 0)) && x0_2 >= 1))
        {
            goto label_2b594;
        }
        if (((((x0_11 & 1) == 0 && (s_7 & 1) == 0) || (x0_11 & 1) != 0) && (x23_3 & 1) != 0))
        {
        label_2b54c:
            LogCapture::LogCapture(&var_1b8, *pudutech::ASHTAG, &data_45738, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "shared memory length ", 0x15));
            LogCapture::~LogCapture();
            if (x0_2 >= 1)
            {
                goto label_2b594;
            }
        }
        if ((((((((x0_11 & 1) == 0 && (s_7 & 1) == 0) || (x0_11 & 1) != 0) && (x23_3 & 1) == 0) || ((x0_11 & 1) == 0 && (s_7 & 1) != 0)) && x0_2 < 1) || ((((x0_11 & 1) == 0 && (s_7 & 1) == 0) || (x0_11 & 1) != 0) && (x23_3 & 1) != 0)))
        {
            void* x2_3;
            if ((*arg2 & 1) == 0)
            {
                x2_3 = &arg2[1];
                goto label_2b5c4;
            }
            x2_3 = *(arg2 + 0x10);
        label_2b5c4:
            int32_t x0_33 = ioctl(*(arg1 + 4), 0x41007701, x2_3);
            int32_t x8_20 = *(arg1 + 4);
            if ((x0_33 & 0x80000000) != 0)
            {
                close(x8_20);
                *(arg1 + 4) = 0xffffffff;
                uint32_t x10_4 = *data_45780;
                int32_t var_248 = data_45778;
                char* x9_4 = *(data_4578a + 6);
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                char* x20_4;
                if ((x10_4 & 1) == 0)
                {
                    x20_4 = &*(data_45780 + 1);
                }
                else
                {
                    x20_4 = x9_4;
                }
                size_t x0_58 = strlen(x20_4);
                if (x0_58 < -0x10)
                {
                    goto label_2bcec;
                }
                void* var_230_1;
                void* x21_4;
                if (x0_58 >= 0x17)
                {
                    uint64_t x22_7 = ((x0_58 + 0x10) & 0xfffffffffffffff0);
                    void* x0_70 = operator new(x22_7);
                    x21_4 = x0_70;
                    size_t var_238_1 = x0_58;
                    var_230_1 = x0_70;
                    s_5 = (x22_7 | 1);
                }
                else
                {
                    x21_4 = &*s_5[1];
                    s_5 = (x0_58 << 1);
                }
                if ((x0_58 >= 0x17 || (x0_58 < 0x17 && x0_58 != 0)))
                {
                    memcpy(x21_4, x20_4, x0_58);
                }
                *(x21_4 + x0_58) = 0;
                int32_t x19_8;
                if ((g3::logLevel(&var_248) & 1) == 0)
                {
                    x19_8 = 0;
                    if ((s_5 & 1) != 0)
                    {
                    label_2bb80:
                        operator delete(var_230_1);
                        if ((x19_8 & 1) == 0)
                        {
                            goto label_2b748;
                        }
                        goto label_2bbb4;
                    }
                }
                else
                {
                    int64_t s_4;
                    __builtin_memset(&s_4, 0, 0x18);
                    uint64_t x19_7 = *pudutech::ASHTAG;
                    size_t x0_75 = strlen(x19_7);
                    if (x0_75 < -0x10)
                    {
                        goto label_2bd14;
                    }
                    void* var_250_1;
                    void* x21_6;
                    if (x0_75 >= 0x17)
                    {
                        uint64_t x22_9 = ((x0_75 + 0x10) & 0xfffffffffffffff0);
                        void* x0_96 = operator new(x22_9);
                        x21_6 = x0_96;
                        size_t var_258_1 = x0_75;
                        var_250_1 = x0_96;
                        s_4 = (x22_9 | 1);
                    }
                    else
                    {
                        x21_6 = (&s_4 | 1);
                        s_4 = (x0_75 << 1);
                    }
                    if ((x0_75 >= 0x17 || (x0_75 < 0x17 && x0_75 != 0)))
                    {
                        memcpy(x21_6, x19_7, x0_75);
                    }
                    *(x21_6 + x0_75) = 0;
                    x19_8 = g3::logTag(&s_4);
                    if ((s_4 & 1) != 0)
                    {
                        operator delete(var_250_1);
                        if ((s_5 & 1) != 0)
                        {
                            goto label_2bb80;
                        }
                    }
                    else if ((s_5 & 1) != 0)
                    {
                        goto label_2bb80;
                    }
                }
                if ((x19_8 & 1) == 0)
                {
                    goto label_2b748;
                }
            label_2bbb4:
                LogCapture::LogCapture(&var_1b8, *pudutech::ASHTAG, &data_45778, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_104 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "set ashmem name failed ", 0x17);
                char* x0_107 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_104, x0_107, strlen(x0_107));
                goto label_2b740;
            }
            int32_t x0_35 = ioctl(x8_20, 0x40087703, arg3);
            int32_t x8_21 = *(arg1 + 4);
            if ((x0_35 & 0x80000000) != 0)
            {
                close(x8_21);
                *(arg1 + 4) = 0xffffffff;
                uint32_t x10_5 = *data_45780;
                int32_t var_280 = data_45778;
                char* x9_5 = *(data_4578a + 6);
                __builtin_memset(&s_3, 0, 0x18);
                char* x20_5;
                if ((x10_5 & 1) == 0)
                {
                    x20_5 = &*(data_45780 + 1);
                }
                else
                {
                    x20_5 = x9_5;
                }
                size_t x0_61 = strlen(x20_5);
                if (x0_61 < -0x10)
                {
                    goto label_2bcec;
                }
                void* x21_5;
                if (x0_61 >= 0x17)
                {
                    uint64_t x22_8 = ((x0_61 + 0x10) & 0xfffffffffffffff0);
                    void* x0_77 = operator new(x22_8);
                    x21_5 = x0_77;
                    size_t var_270_1 = x0_61;
                    var_268 = x0_77;
                    s_3 = (x22_8 | 1);
                }
                else
                {
                    void var_277;
                    x21_5 = &var_277;
                    s_3 = (x0_61 << 1);
                }
                if ((x0_61 >= 0x17 || (x0_61 < 0x17 && x0_61 != 0)))
                {
                    memcpy(x21_5, x20_5, x0_61);
                }
                *(x21_5 + x0_61) = 0;
                int32_t x19_10;
                if ((g3::logLevel(&var_280) & 1) == 0)
                {
                    x19_10 = 0;
                    if ((s_3 & 1) != 0)
                    {
                    label_2bc64:
                        operator delete(var_268);
                        if ((x19_10 & 1) == 0)
                        {
                            goto label_2b748;
                        }
                        goto label_2bc98;
                    }
                }
                else
                {
                    __builtin_memset(&s_2, 0, 0x18);
                    char* x19_9 = *pudutech::ASHTAG;
                    size_t x0_82 = strlen(x19_9);
                    if (x0_82 < -0x10)
                    {
                        goto label_2bd1c;
                    }
                    void* x21_7;
                    if (x0_82 >= 0x17)
                    {
                        uint64_t x22_10 = ((x0_82 + 0x10) & 0xfffffffffffffff0);
                        void* x0_111 = operator new(x22_10);
                        x21_7 = x0_111;
                        size_t var_290_1 = x0_82;
                        var_288 = x0_111;
                        s_2 = (x22_10 | 1);
                    }
                    else
                    {
                        x21_7 = (&s_2 | 1);
                        s_2 = (x0_82 << 1);
                    }
                    if ((x0_82 >= 0x17 || (x0_82 < 0x17 && x0_82 != 0)))
                    {
                        memcpy(x21_7, x19_9, x0_82);
                    }
                    *(x21_7 + x0_82) = 0;
                    x19_10 = g3::logTag(&s_2);
                    if ((s_2 & 1) != 0)
                    {
                        operator delete(var_288);
                        if ((s_3 & 1) != 0)
                        {
                            goto label_2bc64;
                        }
                    }
                    else if ((s_3 & 1) != 0)
                    {
                        goto label_2bc64;
                    }
                }
                if ((x19_10 & 1) == 0)
                {
                    goto label_2b748;
                }
            label_2bc98:
                LogCapture::LogCapture(&var_1b8, *pudutech::ASHTAG, &data_45778, &data_2ddb7, &nullptr->ident.version);
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_119 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "set ashmem size failed ", 0x17);
                char* x0_122 = strerror(*__errno());
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_119, x0_122, strlen(x0_122));
                goto label_2b740;
            }
            ioctl(x8_21, "4adl_serializerEEEE10end_objectE…", 0);
            char* x23_4;
            if ((*data_45740 & 1) == 0)
            {
                x23_4 = &*(data_45740 + 1);
            }
            else
            {
                x23_4 = *(data_4574a + 6);
            }
            int32_t var_2b8 = data_45738;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_39 = strlen(x23_4);
            if (x0_39 < -0x10)
            {
                goto label_2bd04;
            }
            void* var_2a0_1;
            void* x24_1;
            if (x0_39 >= 0x17)
            {
                uint64_t x25_3 = ((x0_39 + 0x10) & 0xfffffffffffffff0);
                void* x0_63 = operator new(x25_3);
                x24_1 = x0_63;
                size_t var_2a8_1 = x0_39;
                var_2a0_1 = x0_63;
                s_1 = (x25_3 | 1);
            }
            else
            {
                x24_1 = &*s_1[1];
                s_1 = (x0_39 << 1);
            }
            if ((x0_39 >= 0x17 || (x0_39 < 0x17 && x0_39 != 0)))
            {
                memcpy(x24_1, x23_4, x0_39);
            }
            *(x24_1 + x0_39) = 0;
            int32_t x22_6;
            if ((g3::logLevel(&var_2b8) & 1) == 0)
            {
                x22_6 = 0;
                if ((s_1 & 1) != 0)
                {
                label_2ba9c:
                    operator delete(var_2a0_1);
                    if ((x22_6 & 1) == 0)
                    {
                        goto label_2b594;
                    }
                    goto label_2bad0;
                }
            }
            else
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                uint64_t x22_5 = *pudutech::ASHTAG;
                size_t x0_68 = strlen(x22_5);
                if (x0_68 < -0x10)
                {
                    goto label_2bd0c;
                }
                void* var_2c0_1;
                void* x24_3;
                if (x0_68 >= 0x17)
                {
                    uint64_t x25_4 = ((x0_68 + 0x10) & 0xfffffffffffffff0);
                    void* x0_84 = operator new(x25_4);
                    x24_3 = x0_84;
                    size_t var_2c8_1 = x0_68;
                    var_2c0_1 = x0_84;
                    s = (x25_4 | 1);
                }
                else
                {
                    x24_3 = (&s | 1);
                    s = (x0_68 << 1);
                }
                if ((x0_68 >= 0x17 || (x0_68 < 0x17 && x0_68 != 0)))
                {
                    memcpy(x24_3, x22_5, x0_68);
                }
                *(x24_3 + x0_68) = 0;
                x22_6 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    operator delete(var_2c0_1);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_2ba9c;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_2ba9c;
                }
            }
            if ((x22_6 & 1) == 0)
            {
                goto label_2b594;
            }
        label_2bad0:
            LogCapture::LogCapture(&var_1b8, *pudutech::ASHTAG, &data_45738, &data_2ddb7, &nullptr->ident.version);
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "check shared memory size ", 0x19)), " after set size ", 0x10));
            LogCapture::~LogCapture();
        label_2b594:
            int64_t x0_31 = mmap(0, arg3, 3, 1, *(arg1 + 4));
            x8_18 = *(arg1 + 4);
            *(arg1 + 8) = x0_31;
        }
    }
    else
    {
        char* x20_1;
        if ((*data_45780 & 1) == 0)
        {
            x20_1 = &*(data_45780 + 1);
        }
        else
        {
            x20_1 = *(data_4578a + 6);
        }
        int32_t var_1d8 = data_45778;
        int64_t s_9;
        __builtin_memset(&s_9, 0, 0x18);
        size_t x0_6 = strlen(x20_1);
        if (x0_6 < -0x10)
        {
            goto label_2bcec;
        }
        void* var_1c0_1;
        void* x21_1;
        if (x0_6 >= 0x17)
        {
            uint64_t x22_2 = ((x0_6 + 0x10) & 0xfffffffffffffff0);
            void* x0_15 = operator new(x22_2);
            x21_1 = x0_15;
            size_t var_1c8_1 = x0_6;
            var_1c0_1 = x0_15;
            s_9 = (x22_2 | 1);
        }
        else
        {
            x21_1 = &*s_9[1];
            s_9 = (x0_6 << 1);
        }
        if ((x0_6 >= 0x17 || (x0_6 < 0x17 && x0_6 != 0)))
        {
            memcpy(x21_1, x20_1, x0_6);
        }
        *(x21_1 + x0_6) = 0;
        int32_t x19_3;
        if ((g3::logLevel(&var_1d8) & 1) == 0)
        {
            x19_3 = 0;
            if ((s_9 & 1) != 0)
            {
            label_2b6c8:
                operator delete(var_1c0_1);
                if ((x19_3 & 1) != 0)
                {
                    goto label_2b6fc;
                }
                goto label_2b748;
            }
        }
        else
        {
            int64_t s_8;
            __builtin_memset(&s_8, 0, 0x18);
            uint64_t x19_2 = *pudutech::ASHTAG;
            size_t x0_20 = strlen(x19_2);
            if (x0_20 < -0x10)
            {
                goto label_2bcfc;
            }
            void* var_1e0_1;
            void* x21_2;
            if (x0_20 >= 0x17)
            {
                uint64_t x22_4 = ((x0_20 + 0x10) & 0xfffffffffffffff0);
                void* x0_41 = operator new(x22_4);
                x21_2 = x0_41;
                size_t var_1e8_1 = x0_20;
                var_1e0_1 = x0_41;
                s_8 = (x22_4 | 1);
            }
            else
            {
                x21_2 = (&s_8 | 1);
                s_8 = (x0_20 << 1);
            }
            if ((x0_20 >= 0x17 || (x0_20 < 0x17 && x0_20 != 0)))
            {
                memcpy(x21_2, x19_2, x0_20);
            }
            *(x21_2 + x0_20) = 0;
            x19_3 = g3::logTag(&s_8);
            if ((s_8 & 1) != 0)
            {
                operator delete(var_1e0_1);
                if ((s_9 & 1) != 0)
                {
                    goto label_2b6c8;
                }
            }
            else if ((s_9 & 1) != 0)
            {
                goto label_2b6c8;
            }
        }
        if ((x19_3 & 1) == 0)
        {
            goto label_2b748;
        }
    label_2b6fc:
        LogCapture::LogCapture(&var_1b8, *pudutech::ASHTAG, &data_45778, &data_2ddb7, &nullptr->ident.version);
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >* x0_49 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "open ashmem device failed ", 0x1a);
        char* x0_52 = strerror(*__errno());
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_49, x0_52, strlen(x0_52));
    label_2b740:
        LogCapture::~LogCapture();
    label_2b748:
        x8_18 = -1;
    }
    if (*(x27 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x8_18;
}

int64_t sub_2bd40(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_2bd60(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_2bd94(int64_t arg1, char arg2, void* arg3)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t* x0_4;
    int64_t* x1;
    x0_4 = _Unwind_Resume(x0_1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_4, x1);
}

int64_t sub_2bd98(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_2bdac(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_2bdc8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    int64_t* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_2be08(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int64_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        if (*(*x0_3 + 0x30)(x0_3, x23_1, x22_1, x3_1, arg2) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t pudutech::Ashdmem::destroyMemory(char* arg1)
{
    if ((*arg1 != 0 && (pudutech::Ashdmem::releaseSharedMemory() & 1) != 0))
    {
        /* tailcall */
        return pudutech::Ashdmem::closeSharedMemory();
    }
    return 0;
}

int64_t pudutech::Ashdmem::useMemory(int32_t arg1, char** arg2 @ x8)
{
    char* x0 = operator new(0x10);
    *x0 = 0;
    *(x0 + 4) = 0xffffffff;
    *(x0 + 8) = 0;
    void** x0_1 = operator new(0x20);
    x0_1[2] = 0;
    x0_1[1] = 0;
    *x0_1 = (_vtable_for_std::__ndk1::__shared_ptr_pointer<pudutech::Ashdmem*, std::__ndk1::default_delete<pudutech::Ashdmem>, std::__ndk1::allocator<pudutech::Ashdmem> > + 0x10);
    x0_1[3] = x0;
    int32_t x0_3 = pudutech::Ashdmem::linkSharedMemory(x0);
    if ((x0_3 & 1) != 0)
    {
        *arg2 = x0;
        arg2[1] = x0_1;
    }
    else
    {
        *arg2 = nullptr;
        arg2[1] = 0;
        int64_t x8_1;
        int32_t i;
        do
        {
            x8_1 = __ldaxr(&x0_1[1]);
            i = __stlxr((x8_1 - 1), &x0_1[1]);
        } while (i != 0);
        if (x8_1 == 0)
        {
            *(*x0_1 + 0x10)(x0_1);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    return x0_3;
}

void sub_2c12c(int64_t arg1, int64_t* arg2 @ x19, char* arg3 @ x20, int64_t arg4 @ x23) __noreturn
{
    int64_t x21 = arg1;
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg4);
        i = __stlxr((x8_1 - 1), arg4);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
        x21 = _Unwind_Resume(x21);
        pudutech::Ashdmem::releaseSharedMemory();
        if (*arg3 != 0)
        {
            pudutech::Ashdmem::closeSharedMemory();
        }
        operator delete(arg3);
    }
    sub_1353c(_Unwind_Resume(x21));
    /* no return */
}

uint64_t pudutech::Ashdmem::linkSharedMemory(void* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x25 + 0x28);
    *(arg1 + 4) = arg2;
    int32_t x0_1 = ioctl(arg2, "4adl_serializerEEEE10end_objectE…", 0);
    char* x22;
    if ((*data_45740 & 1) == 0)
    {
        x22 = &*(data_45740 + 1);
    }
    else
    {
        x22 = *(data_4574a + 6);
    }
    int32_t var_1c0 = data_45738;
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_3 = strlen(x22);
    if (x0_3 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_1a8_1;
        void* x23_1;
        if (x0_3 >= 0x17)
        {
            uint64_t x24_1 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
            void* x0_5 = operator new(x24_1);
            x23_1 = x0_5;
            size_t var_1b0_1 = x0_3;
            var_1a8_1 = x0_5;
            s_1 = (x24_1 | 1);
        }
        else
        {
            x23_1 = &*s_1[1];
            s_1 = (x0_3 << 1);
        }
        if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
        {
            memcpy(x23_1, x22, x0_3);
        }
        *(x23_1 + x0_3) = 0;
        int32_t x21_3;
        if ((g3::logLevel(&var_1c0) & 1) == 0)
        {
            x21_3 = 0;
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            uint64_t x21_2 = *pudutech::ASHTAG;
            size_t x0_10 = strlen(x21_2);
            void* var_1c8;
            if (x0_10 < -0x10)
            {
                int64_t x0_23 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                if ((s & 1) != 0)
                {
                    operator delete(var_1c8);
                }
                if ((((s & 1) == 0 && (s_1 & 1) == 0) || ((s & 1) != 0 && (s_1 & 1) == 0)))
                {
                    _Unwind_Resume(x0_23);
                }
                operator delete(var_1a8_1);
                /* tailcall */
                return pudutech::Ashdmem::getMemory(_Unwind_Resume(x0_23));
            }
            void* x23_2;
            if (x0_10 >= 0x17)
            {
                uint64_t x24_2 = ((x0_10 + 0x10) & 0xfffffffffffffff0);
                void* x0_12 = operator new(x24_2);
                x23_2 = x0_12;
                size_t var_1d0_1 = x0_10;
                var_1c8 = x0_12;
                s = (x24_2 | 1);
            }
            else
            {
                x23_2 = (&s | 1);
                s = (x0_10 << 1);
            }
            if ((x0_10 >= 0x17 || (x0_10 < 0x17 && x0_10 != 0)))
            {
                memcpy(x23_2, x21_2, x0_10);
            }
            *(x23_2 + x0_10) = 0;
            x21_3 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                operator delete(var_1c8);
            }
        }
        int64_t x20_1 = x0_1;
        if ((s_1 & 1) != 0)
        {
            operator delete(var_1a8_1);
        }
        if ((x21_3 & 1) != 0)
        {
            void var_1a0;
            LogCapture::LogCapture(&var_1a0, *pudutech::ASHTAG, &data_45738, &data_2ddb7, &nullptr->ident.version);
            void var_198;
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "shared memory length ", 0x15));
            LogCapture::~LogCapture();
        }
        int32_t x21_4;
        if (x20_1 == 0)
        {
            x21_4 = 0;
        }
        else
        {
            x21_4 = 1;
            *(arg1 + 8) = mmap(0, x20_1, 3, 1, *(arg1 + 4));
        }
        if (*(x25 + 0x28) == x9)
        {
            return x21_4;
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t pudutech::Ashdmem::getMemory(char* arg1)
{
    if (*arg1 == 0)
    {
        return *(arg1 + 8);
    }
    return 0;
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::Ashdmem*, std::__ndk1::default_delete<pudutech::Ashdmem>, std::__ndk1::allocator<pudutech::Ashdmem> >::~__shared_ptr_pointer(void* arg1)
{
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

void std::__ndk1::__shared_ptr_pointer<pudutech::Ashdmem*, std::__ndk1::default_delete<pudutech::Ashdmem>, std::__ndk1::allocator<pudutech::Ashdmem> >::__on_zero_shared(void* arg1)
{
    char* x19 = *(arg1 + 0x18);
    if (x19 == 0)
    {
        return;
    }
    pudutech::Ashdmem::releaseSharedMemory();
    if (*x19 != 0)
    {
        pudutech::Ashdmem::closeSharedMemory();
    }
    /* tailcall */
    return operator delete(x19);
}

void sub_2c4dc(void* arg1) __noreturn
{
    sub_1353c(arg1);
    /* no return */
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::Ashdmem*, std::__ndk1::default_delete<pudutech::Ashdmem>, std::__ndk1::allocator<pudutech::Ashdmem> >::__get_deleter(int64_t arg1, void* arg2)
{
    int64_t x0;
    if (*(arg2 + 8) == typeinfo_name_for_std::__ndk1::default_delete<pudutech::Ashdmem>)
    {
        x0 = (arg1 + 0x18);
    }
    else
    {
        x0 = 0;
    }
    return x0;
}

int64_t std::__ndk1::__shared_ptr_pointer<pudutech::Ashdmem*, std::__ndk1::default_delete<pudutech::Ashdmem>, std::__ndk1::allocator<pudutech::Ashdmem> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

