/* This file was generated by the Hex-Rays decompiler version 8.4.0.240320.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void sub_9F0();
void *__fastcall _JString2Char(__int64 a1, __int64 a2);
// int __fastcall __cxa_finalize(void *);
// int cfsetispeed(struct termios *termios_p, speed_t speed);
// void cfmakeraw(struct termios *termios_p);
// __int64 __fastcall __memcpy_chk(_QWORD, _QWORD, _QWORD, _QWORD); weak
// int __android_log_print(int prio, const char *tag, const char *fmt, ...);
// __int64 __fastcall __open_2(_QWORD, _QWORD); weak
// int tcflush(int fd, int queue_selector);
// int cfsetospeed(struct termios *termios_p, speed_t speed);
// int tcgetattr(int fd, struct termios *termios_p);
// int close(int fd);
// void *malloc(size_t size);
// void *memcpy(void *dest, const void *src, size_t n);
// int tcsetattr(int fd, int optional_actions, const struct termios *termios_p);
// int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle);
__int64 start();
__int64 (*__fastcall sub_B24(__int64 (*result)(void)))(void);
__int64 __fastcall sub_B30(void *a1);
void *__fastcall JString2Char(__int64 a1, __int64 a2);
__int64 __fastcall Java_com_pudutech_serialport_library_SerialPort_open(__int64 a1, __int64 a2, __int64 a3, unsigned int a4, unsigned int a5);
__int64 __fastcall sub_10C8(int a1);
__int64 __fastcall Java_com_pudutech_serialport_library_SerialPort_close(__int64 a1, __int64 a2);
__int64 __fastcall Java_com_pudutech_serialport_library_SerialPort_tcflush(__int64 a1, __int64 a2);

//-------------------------------------------------------------------------
// Data declarations

void *off_2D68 = &off_2D68; // weak
char *off_3000 = "serial_port"; // weak


//----- (00000000000009F0) ----------------------------------------------------
void sub_9F0()
{
  JUMPOUT(0LL);
}
// A00: control flows out of bounds to 0

//----- (0000000000000A10) ----------------------------------------------------
// attributes: thunk
void *__fastcall _JString2Char(__int64 a1, __int64 a2)
{
  return JString2Char(a1, a2);
}

//----- (0000000000000B10) ----------------------------------------------------
__int64 start()
{
  return __cxa_finalize(&off_2D68);
}
// 2D68: using guessed type void *off_2D68;

//----- (0000000000000B24) ----------------------------------------------------
__int64 (*__fastcall sub_B24(__int64 (*result)(void)))(void)
{
  if ( result )
    return (__int64 (*)(void))result();
  return result;
}

//----- (0000000000000B30) ----------------------------------------------------
__int64 __fastcall sub_B30(void *a1)
{
  return __cxa_atexit((void (__fastcall *)(void *))sub_B24, a1, &off_2D68);
}
// 2D68: using guessed type void *off_2D68;

//----- (0000000000000B4C) ----------------------------------------------------
void *__fastcall JString2Char(__int64 a1, __int64 a2)
{
  const void *v3; // [xsp+28h] [xbp-78h]
  int v4; // [xsp+34h] [xbp-6Ch]
  __int64 v5; // [xsp+38h] [xbp-68h]
  __int64 v6; // [xsp+40h] [xbp-60h]
  __int64 v7; // [xsp+48h] [xbp-58h]
  __int64 v8; // [xsp+50h] [xbp-50h]
  void *v9; // [xsp+58h] [xbp-48h]

  v9 = 0LL;
  v8 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)a1 + 48LL))(a1, "java/lang/String");
  v7 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)a1 + 1336LL))(a1, "GB2312");
  v6 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)a1 + 264LL))(
         a1,
         v8,
         "getBytes",
         "(Ljava/lang/String;)[B");
  v5 = (*(__int64 (__fastcall **)(__int64, __int64, __int64, __int64))(*(_QWORD *)a1 + 272LL))(a1, a2, v6, v7);
  v4 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 1368LL))(a1, v5);
  v3 = (const void *)(*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + 1472LL))(a1, v5, 0LL);
  if ( v4 > 0 )
  {
    v9 = malloc(v4 + 1);
    memcpy(v9, v3, v4);
    *((_BYTE *)v9 + v4) = 0;
  }
  (*(void (__fastcall **)(__int64, __int64, const void *, _QWORD))(*(_QWORD *)a1 + 1536LL))(a1, v5, v3, 0LL);
  return v9;
}
// CB4: conditional instruction was optimized away because w8.4==1
// A50: using guessed type __int64 __fastcall __memcpy_chk(_QWORD, _QWORD, _QWORD, _QWORD);

//----- (0000000000000D38) ----------------------------------------------------
__int64 __fastcall Java_com_pudutech_serialport_library_SerialPort_open(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        unsigned int a4,
        unsigned int a5)
{
  const char *v6; // [xsp+40h] [xbp-D0h]
  char *tag; // [xsp+50h] [xbp-C0h]
  __int64 v8; // [xsp+58h] [xbp-B8h]
  __int64 v9; // [xsp+60h] [xbp-B0h]
  __int64 v10; // [xsp+68h] [xbp-A8h]
  __int64 v11; // [xsp+78h] [xbp-98h]
  speed_t speed; // [xsp+80h] [xbp-90h]
  unsigned int fd; // [xsp+84h] [xbp-8Ch]
  __int64 v18; // [xsp+A8h] [xbp-68h]
  const char *v19; // [xsp+C0h] [xbp-50h]
  char v20[4]; // [xsp+CCh] [xbp-44h] BYREF
  struct termios termios_p; // [xsp+D0h] [xbp-40h] BYREF

  *(_QWORD *)&termios_p.c_cc[23] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  speed = sub_10C8(a4);
  if ( speed == -1 )
  {
    __android_log_print(6, off_3000, "Invalid baudrate");
    v18 = 0LL;
  }
  else
  {
    tag = off_3000;
    v6 = (const char *)_JString2Char(a1, a3);
    __android_log_print(3, tag, "path = %s, baudrate = %d, flags = %d", v6, a4, a5);
    v19 = (const char *)(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)a1 + 1352LL))(a1, a3, v20);
    __android_log_print(3, off_3000, "Opening serial port %s with flags 0x%x", v19, a5 | 2);
    fd = __open_2(v19, a5 | 2);
    __android_log_print(3, off_3000, "open() fd = %d", fd);
    (*(void (__fastcall **)(__int64, __int64, const char *))(*(_QWORD *)a1 + 1360LL))(a1, a3, v19);
    if ( fd == -1 )
    {
      __android_log_print(6, off_3000, "Cannot open port");
      v18 = 0LL;
    }
    else
    {
      __android_log_print(3, off_3000, "Configuring serial port");
      if ( tcgetattr(fd, &termios_p) )
      {
        __android_log_print(6, off_3000, "tcgetattr() failed");
        close(fd);
        v18 = 0LL;
      }
      else
      {
        cfmakeraw(&termios_p);
        cfsetispeed(&termios_p, speed);
        cfsetospeed(&termios_p, speed);
        if ( tcsetattr(fd, 0, &termios_p) )
        {
          __android_log_print(6, off_3000, "tcsetattr() failed");
          close(fd);
          v18 = 0LL;
        }
        else
        {
          v10 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)a1 + 48LL))(a1, "java/io/FileDescriptor");
          v9 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)a1 + 264LL))(
                 a1,
                 v10,
                 "<init>",
                 "()V");
          v8 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)a1 + 752LL))(
                 a1,
                 v10,
                 "descriptor",
                 "I");
          v11 = (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a1 + 224LL))(a1, v10, v9);
          (*(void (__fastcall **)(__int64, __int64, __int64, _QWORD))(*(_QWORD *)a1 + 872LL))(a1, v11, v8, fd);
          v18 = v11;
        }
      }
    }
  }
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  return v18;
}
// A80: using guessed type __int64 __fastcall __open_2(_QWORD, _QWORD);
// 3000: using guessed type char *off_3000;
// D38: using guessed type char var_44[4];

//----- (00000000000010C8) ----------------------------------------------------
__int64 __fastcall sub_10C8(int a1)
{
  unsigned int v2; // [xsp+14h] [xbp-Ch]

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  if ( a1 )
  {
    switch ( a1 )
    {
      case 50:
        v2 = 1;
        break;
      case 75:
        v2 = 2;
        break;
      case 110:
        v2 = 3;
        break;
      case 134:
        v2 = 4;
        break;
      case 150:
        v2 = 5;
        break;
      case 200:
        v2 = 6;
        break;
      case 300:
        v2 = 7;
        break;
      case 600:
        v2 = 8;
        break;
      case 1200:
        v2 = 9;
        break;
      case 1800:
        v2 = 10;
        break;
      case 2400:
        v2 = 11;
        break;
      case 4800:
        v2 = 12;
        break;
      case 9600:
        v2 = 13;
        break;
      case 19200:
        v2 = 14;
        break;
      case 38400:
        v2 = 15;
        break;
      case 57600:
        v2 = 4097;
        break;
      case 115200:
        v2 = 4098;
        break;
      case 230400:
        v2 = 4099;
        break;
      case 460800:
        v2 = 4100;
        break;
      case 500000:
        v2 = 4101;
        break;
      case 576000:
        v2 = 4102;
        break;
      case 921600:
        v2 = 4103;
        break;
      case 1000000:
        v2 = 4104;
        break;
      case 1152000:
        v2 = 4105;
        break;
      case 1500000:
        v2 = 4106;
        break;
      case 2000000:
        v2 = 4107;
        break;
      case 2500000:
        v2 = 4108;
        break;
      case 3000000:
        v2 = 4109;
        break;
      case 3500000:
        v2 = 4110;
        break;
      case 4000000:
        v2 = 4111;
        break;
      default:
        v2 = -1;
        break;
    }
  }
  else
  {
    v2 = 0;
  }
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  return v2;
}

//----- (0000000000001508) ----------------------------------------------------
__int64 __fastcall Java_com_pudutech_serialport_library_SerialPort_close(__int64 a1, __int64 a2)
{
  unsigned int v3; // [xsp+44h] [xbp-3Ch]
  __int64 v4; // [xsp+48h] [xbp-38h]
  __int64 v5; // [xsp+50h] [xbp-30h]
  __int64 v6; // [xsp+58h] [xbp-28h]
  __int64 v7; // [xsp+60h] [xbp-20h]
  __int64 v8; // [xsp+68h] [xbp-18h]

  v8 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 248LL))(a1, a2);
  v7 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)a1 + 48LL))(a1, "java/io/FileDescriptor");
  v6 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)a1 + 752LL))(
         a1,
         v8,
         "fd",
         "Ljava/io/FileDescriptor;");
  v5 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)a1 + 752LL))(
         a1,
         v7,
         "descriptor",
         "I");
  v4 = (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a1 + 760LL))(a1, a2, v6);
  v3 = (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a1 + 800LL))(a1, v4, v5);
  __android_log_print(3, off_3000, "close(fd = %d)", v3);
  return close(v3);
}
// 3000: using guessed type char *off_3000;

//----- (0000000000001668) ----------------------------------------------------
__int64 __fastcall Java_com_pudutech_serialport_library_SerialPort_tcflush(__int64 a1, __int64 a2)
{
  unsigned int v3; // [xsp+54h] [xbp-3Ch]
  __int64 v4; // [xsp+58h] [xbp-38h]
  __int64 v5; // [xsp+60h] [xbp-30h]
  __int64 v6; // [xsp+68h] [xbp-28h]
  __int64 v7; // [xsp+70h] [xbp-20h]
  __int64 v8; // [xsp+78h] [xbp-18h]

  v8 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 248LL))(a1, a2);
  v7 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)a1 + 48LL))(a1, "java/io/FileDescriptor");
  v6 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)a1 + 752LL))(
         a1,
         v8,
         "fd",
         "Ljava/io/FileDescriptor;");
  v5 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)a1 + 752LL))(
         a1,
         v7,
         "descriptor",
         "I");
  v4 = (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a1 + 760LL))(a1, a2, v6);
  v3 = (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)a1 + 800LL))(a1, v4, v5);
  __android_log_print(3, off_3000, "tcflush(fd = %d)", v3);
  return tcflush(v3, 2);
}
// 3000: using guessed type char *off_3000;

// nfuncs=42 queued=10 decompiled=10 lumina nreq=0 worse=0 better=0
// ALL OK, 10 function(s) have been successfully decompiled
