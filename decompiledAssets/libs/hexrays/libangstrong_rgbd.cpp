/* This file was generated by the Hex-Rays decompiler version 8.4.0.240320.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

void sub_D390();
// pthread_t pthread_self(void);
void __fastcall rgbd::RGBDAngStrong::~RGBDAngStrong(rgbd::RGBDAngStrong *this); // idb
void __fastcall std::unordered_map<std::string,rgbd::RGBDParam>::~unordered_map(__int64 a1);
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3);
// _QWORD cv::Mat::deallocate(cv::Mat *__hidden this); idb
// int system(const char *command);
// int pthread_setname_np(pthread_t target_thread, const char *name);
void __fastcall std::map<int,std::string>::~map(__int64 a1);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::pair<std::string,v4l2Capture *>>(__int64 a1, unsigned __int8 *a2, __int128 *a3);
void __fastcall std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(__int64 a1, _QWORD *a2);
__int64 *__fastcall std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2);
// __int64 __fastcall std::this_thread::sleep_for(_QWORD); weak
// _QWORD __fastcall std::logic_error::logic_error(std::logic_error *__hidden this, const char *); idb
// _QWORD pudutech::Ashdmem::destroyMemory(pudutech::Ashdmem *__hidden this); idb
// __int64 __fastcall rgbd::RGBDParam::createMemory(_QWORD, _QWORD, _QWORD); weak
// _QWORD *rgbd::RGBDParam::getName(_QWORD *__hidden __return_ptr, rgbd::RGBDParam *__hidden this); idb
// void *__fastcall __cxa_begin_catch(void *);
void __fastcall std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(__int64 a1, _QWORD *a2);
__int64 __fastcall rgbd::RGBDAngStrong::packageRGBD(rgbd::RGBDAngStrong *this, const void **a2);
// void __usercall rgbd::RGBDAngStrong::getSerialNumber(rgbd::RGBDAngStrong *this@<X0>, _QWORD *a2@<X8>);
// _QWORD __fastcall rgbd::RGBDParam::RGBDParam(rgbd::RGBDParam *__hidden this, signed __int8); idb
// int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle);
unsigned __int64 __fastcall std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16(_DWORD *a1, unsigned __int64 a2);
// int memcmp(const void *s1, const void *s2, size_t n);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// _QWORD __fastcall operator new(unsigned __int64); idb
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n);
void __noreturn std::__basic_string_common<true>::__throw_length_error();
__int64 __fastcall _JNIEnv::CallObjectMethod(__int64 a1, __int64 a2, __int64 a3);
// _QWORD __fastcall rgbd::RGBDParam::transmitLoacationData(rgbd::RGBDParam *__hidden this, const unsigned int *, const unsigned int *, const int *); idb
void __fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::rehash(__int64 a1, std::__ndk1 *this);
void __fastcall std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(__int64 a1, _QWORD *a2);
__int64 **__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2);
// _QWORD std::__shared_weak_count::__release_weak(std::__shared_weak_count *__hidden this); idb
// void __fastcall std::mutex::~mutex(std::mutex *__hidden this); idb
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n);
// _QWORD rgbd::RGBDParam::getAshmenAddress(rgbd::RGBDParam *__hidden this); idb
void __fastcall std::__tree<std::__value_type<std::string,rgbd::AngStrongInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::AngStrongInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::AngStrongInfo>>>::destroy(__int64 a1, _QWORD *a2);
// _QWORD __fastcall std::__throw_system_error(std::__ndk1 *__hidden this, int, const char *); idb
// __int64 __fastcall v4l2Capture::read(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __fastcall operator delete(void *); idb
// __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD); weak
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::map<std::string,pudutech::RGBD_INFO>::~map(__int64 a1);
// __int64 *__usercall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::remove@<X0>(__int64 *result@<X0>, __int64 *a2@<X1>, __int64 a3@<X8>);
void __fastcall std::unordered_map<rgbd::RgbdLocation,std::string>::~unordered_map(__int64 a1);
_QWORD *__fastcall std::ostream::flush(_QWORD *a1);
__int64 __fastcall rgbd::RGBDAngStrong::waitForFrame(__int64 a1, unsigned __int8 *a2);
void __fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__rehash(void **a1, unsigned __int64 a2);
// _QWORD std::uncaught_exception(void); idb
// LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *); weak
// __int64 __fastcall pudutech::Ashdmem::createMemory(_QWORD, _QWORD, _QWORD); weak
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n);
long double __fastcall rgbd::RGBDAngStrong::RGBDAngStrong(rgbd::RGBDAngStrong *this);
void __fastcall std::map<std::string,double>::~map(__int64 a1);
// void *__fastcall __cxa_allocate_exception(size_t thrown_size);
// _QWORD *std::ios_base::getloc(_QWORD *__hidden __return_ptr, std::ios_base *__hidden this); idb
// int __android_log_print(int prio, const char *tag, const char *fmt, ...);
__int64 __fastcall rgbd::RGBDAngStrong::setRgbdLocation(_QWORD *a1, int *a2, unsigned __int8 *a3, const signed __int8 *a4);
__int64 __fastcall rgbd::RGBDAngStrong::setRGBDCallback(_QWORD *a1, __int64 a2, __int128 *a3);
void __fastcall std::string::~string(__int64 a1);
void __fastcall rgbd::RGBDAngStrong::~RGBDAngStrong(rgbd::RGBDAngStrong *this); // idb
void __fastcall std::map<std::string,rgbd::AngStrongInfo>::~map(__int64 a1);
// _QWORD std::__thread_struct::__thread_struct(std::__thread_struct *__hidden this); idb
// _QWORD rgbd::RGBDParam::getLocation(rgbd::RGBDParam *__hidden this); idb
// __int64 __fastcall v4l2Capture::open(_QWORD); weak
// int pthread_setspecific(pthread_key_t key, const void *pointer);
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result);
// _QWORD std::thread::detach(std::thread *__hidden this); idb
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1, float a2);
// void __fastcall __noreturn __cxa_throw(void *, struct type_info *lptinfo, void (__fastcall *)(void *));
_QWORD *__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(__int64 a1, unsigned __int8 *a2, __int64 a3, __int128 **a4);
__int64 __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__erase_unique<rgbd::RgbdLocation>(__int64 *a1, int *a2);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
// void *memmove(void *dest, const void *src, size_t n);
// void *memset(void *s, int c, size_t n);
_QWORD *__fastcall std::map<std::string,pudutech::RGBD_INFO>::operator[](__int64 a1, __int128 *a2);
// _QWORD __fastcall std::__next_prime(std::__ndk1 *__hidden this, unsigned __int64); idb
// int __fastcall __cxa_finalize(void *);
void __fastcall std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(__int64 a1, _QWORD *a2);
// _QWORD __fastcall rgbd::RGBDParam::changeLocation(rgbd::RGBDParam *__hidden this, const signed __int8 *); idb
void __fastcall std::unordered_map<std::string,v4l2Capture *>::~unordered_map(__int64 a1);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
void __fastcall std::__tree<std::__value_type<std::string,rgbd::FrameTime>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::FrameTime>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::FrameTime>>>::destroy(__int64 a1, _QWORD *a2);
// void __fastcall std::thread::~thread(std::thread *__hidden this); idb
void __fastcall rgbd::RGBDParam::~RGBDParam(rgbd::RGBDParam *this); // idb
// _QWORD std::mutex::unlock(std::mutex *__hidden this); idb
__int64 __fastcall _JNIEnv::NewObject(__int64 a1, __int64 a2, __int64 a3);
__int64 __fastcall V4L2DeviceParameters::V4L2DeviceParameters(__int64 *a1, int a2, __int128 *a3);
// void __cxa_end_catch(void);
void __fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(__int64 a1, _QWORD *a2);
__int64 *__fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(__int64 a1, _QWORD *a2);
// _QWORD rgbd::RGBDParam::destoryOldMemory(rgbd::RGBDParam *__hidden this); idb
void __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::rehash(__int64 a1, std::__ndk1 *this);
// void __fastcall LogCapture::~LogCapture(LogCapture *__hidden this); idb
void __fastcall std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall rgbd::RGBDAngStrong::chmodDevices(rgbd::RGBDAngStrong *this);
__int64 __fastcall _JNIEnv::CallVoidMethod(__int64 a1, __int64 a2, __int64 a3);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation&&>,std::tuple<>>(__int64 a1, int *a2, __int64 a3, int **a4);
// void __fastcall std::__thread_struct::~__thread_struct(std::__thread_struct *__hidden this); idb
// _QWORD __fastcall rgbd::RGBDParam::setType(rgbd::RGBDParam *__hidden this, const signed __int8 *); idb
// void __fastcall std::locale::~locale(std::locale *__hidden this); idb
// __int64 __fastcall v4l2Capture::enumerateDevices(_QWORD); weak
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
__int64 __fastcall rgbd::RGBDAngStrong::packageRGBD(__int64 a1, unsigned __int8 *a2, __int64 a3);
// void __fastcall std::condition_variable::~condition_variable(std::condition_variable *__hidden this); idb
void __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__rehash(__int64 a1, unsigned __int64 a2);
__int64 **__fastcall rgbd::RGBDAngStrong::updateRgbdSet(__int64 a1, int *a2, __int64 *a3);
void __noreturn std::__basic_string_common<true>::__throw_out_of_range();
// _QWORD std::mutex::lock(std::mutex *__hidden this); idb
// _QWORD *__usercall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(__int128 **a3@<X3>, __int64 a1@<X0>, __int64 a2@<X1>, __int64 a4@<X8>);
_QWORD *__fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(__int64 a1, unsigned __int8 *a2, __int64 a3, __int128 **a4);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
// __int64 __fastcall g3::logLevel(_QWORD); weak
// _QWORD __fastcall std::ios_base::clear(std::ios_base *__hidden this, unsigned int); idb
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
// _QWORD std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *__hidden this); idb
// __int64 __fastcall rgbd::RGBDParam::setSerialNum(_QWORD, _QWORD); weak
// _QWORD std::__thread_local_data(std::__ndk1 *__hidden this); idb
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::pair<rgbd::RgbdLocation,std::string>>(__int64 a1, int *a2, __int64 a3);
// _QWORD pudutech::Ashdmem::create(pudutech::Ashdmem *__hidden this); idb
void __fastcall std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::destroy(__int64 a1, _QWORD *a2);
// _QWORD v4l2Capture::close(v4l2Capture *__hidden this); idb
void __fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::rehash(__int64 a1, std::__ndk1 *this);
const rgbd::RGBDParam *__fastcall rgbd::RGBDParam::RGBDParam(rgbd::RGBDParam *this, const rgbd::RGBDParam *a2);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(__int64 a1, _QWORD *a2);
// void *memcpy(void *dest, const void *src, size_t n);
// _QWORD std::chrono::system_clock::now(std::chrono::system_clock *__hidden this); idb
void __fastcall std::map<std::string,rgbd::FrameTime>::~map(__int64 a1);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation const&>,std::tuple<>>(__int64 a1, int *a2, __int64 a3, int **a4);
void __fastcall cv::Mat::~Mat(cv::Mat *this, void *a2);
__int64 __fastcall std::shared_ptr<pudutech::Ashdmem>::~shared_ptr(__int64 result);
// long double __usercall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<Q0>(__int128 **a3@<X3>, __int64 a1@<X0>, __int64 a2@<X1>, __int64 a4@<X8>);
// _QWORD __fastcall cv::fastFree(cv *__hidden this, void *); idb
// __int64 __fastcall g3::logTag(_QWORD); weak
// __int64 __fastcall __register_atfork(_QWORD, _QWORD, _QWORD, _QWORD); weak
__int64 *__fastcall std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::pair<std::string,rgbd::RGBDParam>>(__int64 a1, unsigned __int8 *a2, __int128 *a3);
// void __fastcall std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *__hidden this); idb
// __int64 __fastcall rgbd::RGBDParam::setLocationCallback(_QWORD, _QWORD); weak
// size_t strlen(const char *s);
unsigned __int64 __fastcall std::__murmur2_or_cityhash<unsigned long,64ul>::operator()(__int64 a1, __int64 *a2, unsigned __int64 a3);
void __fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__rehash(void **a1, unsigned __int64 a2);
// void __noreturn std::terminate(void); idb
void __fastcall std::map<std::string,int>::~map(__int64 a1);
// _QWORD *__fastcall std::to_string(_QWORD *__hidden __return_ptr, std::__ndk1 *__hidden this, int); idb
void start();
void sub_DD5C();
void sub_DD78();
void sub_DD94();
void sub_DDB0();
void sub_DDCC();
void sub_DDE8();
void sub_DE04();
void sub_DE20();
__int64 sub_DE3C();
__int64 sub_E1D0();
__int64 sub_E57C();
__int64 (*__fastcall sub_E590(__int64 (*result)(void)))(void);
__int64 __fastcall sub_E59C(void *a1);
__int64 __fastcall sub_E5B8(__int64 a1, __int64 a2, __int64 a3);
void __fastcall std::string::~string(__int64 a1);
void __fastcall LEVELS::~LEVELS(void **this);
void __fastcall std::map<std::string,_jclass *>::~map(__int64 a1);
void __fastcall std::map<std::string,_jmethodID *>::~map(__int64 a1);
void __fastcall std::map<std::string,std::map<std::string,_jfieldID *>>::~map(__int64 a1);
void __fastcall std::map<rgbd::RgbdLocation,std::string>::~map(__int64 a1);
void __fastcall std::map<rgbd::RgbdLocation,_jobject *>::~map(__int64 a1);
void __fastcall std::map<rgbd::RgbdLocation,_jmethodID *>::~map(__int64 a1);
long double __fastcall rgbd::RGBDAngStrong::RGBDAngStrong(rgbd::RGBDAngStrong *this);
void __fastcall std::map<std::string,rgbd::FrameTime>::~map(__int64 a1);
void __fastcall sub_EE7C(std::thread **a1);
void __fastcall std::map<std::string,int>::~map(__int64 a1);
void __fastcall std::map<std::string,rgbd::AngStrongInfo>::~map(__int64 a1);
void __fastcall std::map<std::string,double>::~map(__int64 a1);
void __fastcall std::map<std::string,pudutech::RGBD_INFO>::~map(__int64 a1);
void __fastcall std::map<int,std::string>::~map(__int64 a1);
void __fastcall cv::Mat::~Mat(cv::Mat *this, void *a2);
void __fastcall rgbd::RGBDAngStrong::~RGBDAngStrong(rgbd::RGBDAngStrong *this); // idb
void __fastcall rgbd::RGBDAngStrong::chmodDevices(rgbd::RGBDAngStrong *this);
void __fastcall std::unordered_map<std::string,v4l2Capture *>::~unordered_map(__int64 a1);
void __fastcall std::unordered_map<rgbd::RgbdLocation,std::string>::~unordered_map(__int64 a1);
void __fastcall std::unordered_map<std::string,rgbd::RGBDParam>::~unordered_map(__int64 a1);
__int64 __fastcall std::shared_ptr<pudutech::Ashdmem>::~shared_ptr(__int64 result);
void __fastcall __noreturn sub_FC18(void *a1);
void __fastcall rgbd::RGBDAngStrong::~RGBDAngStrong(rgbd::RGBDAngStrong *this); // idb
__int64 __fastcall rgbd::RGBDAngStrong::startCamera(rgbd::RGBDAngStrong *this);
__int64 __fastcall rgbd::RGBDAngStrong::pause(rgbd::RGBDAngStrong *this); // idb
__int64 __fastcall rgbd::RGBDAngStrong::resume(rgbd::RGBDAngStrong *this); // idb
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
__int64 __fastcall V4L2DeviceParameters::V4L2DeviceParameters(__int64 *a1, int a2, __int128 *a3);
void __fastcall rgbd::RGBDAngStrong::Polling(__int64 a1, unsigned __int8 *a2);
__int64 __fastcall rgbd::RGBDAngStrong::waitForFrame(__int64 a1, unsigned __int8 *a2);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
__int64 __fastcall rgbd::RGBDAngStrong::packageRGBD(__int64 a1, unsigned __int8 *a2, __int64 a3);
_QWORD *__fastcall std::map<std::string,pudutech::RGBD_INFO>::operator[](__int64 a1, __int128 *a2);
__int64 __fastcall rgbd::RGBDAngStrong::setRGBDCallback(_QWORD *a1, __int64 a2, __int128 *a3);
__int64 __fastcall rgbd::RGBDAngStrong::setRgbdLocation(_QWORD *a1, int *a2, unsigned __int8 *a3, const signed __int8 *a4);
void __fastcall rgbd::RGBDParam::~RGBDParam(rgbd::RGBDParam *this); // idb
__int64 **__fastcall rgbd::RGBDAngStrong::updateRgbdSet(__int64 a1, int *a2, __int64 *a3);
// void __usercall rgbd::RGBDAngStrong::getSerialNumber(rgbd::RGBDAngStrong *this@<X0>, _QWORD *a2@<X8>);
__int64 __fastcall rgbd::RGBDAngStrong::openDevice(rgbd::RGBDAngStrong *this); // idb
unsigned __int64 __fastcall rgbd::RGBDAngStrong::waitForFrame(rgbd::RGBDAngStrong *this);
__int64 __fastcall rgbd::RGBDAngStrong::packageRGBD(rgbd::RGBDAngStrong *this, const void **a2);
__int64 rgbd::RGBDAngStrong::validateFwVersion();
__int64 rgbd::RGBDAngStrong::updateFw();
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::static_delete(__int64 a1, void **a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::copy_from_value(__int64 a1, __int64 a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::clone(__int64 a1, __int64 a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::get_size();
void **cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::type();
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::print(int a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::copy_from_value(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<char const*>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<char const*>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<char const*>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<char const*>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<char const*>::print(__int64 a1, _QWORD *a2, const char **a3);
void __fastcall cvflann::anyimpl::small_any_policy<int>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<int>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<int>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<int>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<int>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<int>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<int>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<int>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::small_any_policy<float>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<float>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<float>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<float>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<float>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<float>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<float>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<float>::print(__int64 a1, _QWORD *a2, float *a3);
void __fastcall cvflann::anyimpl::small_any_policy<bool>::copy_from_value(__int64 a1, _BYTE *a2, _BYTE *a3);
void __fastcall cvflann::anyimpl::small_any_policy<bool>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<bool>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<bool>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<bool>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<bool>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<bool>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<bool>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::static_delete(__int64 a1, void **a2);
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::copy_from_value(__int64 a1, _DWORD *a2, _QWORD *a3);
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::clone(__int64 a1, _DWORD **a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::move(__int64 a1, _DWORD **a2, _DWORD **a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::get_size();
void **cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::type();
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::static_delete(__int64 a1, void **a2);
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::copy_from_value(__int64 a1, _DWORD *a2, _QWORD *a3);
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::clone(__int64 a1, _DWORD **a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::move(__int64 a1, _DWORD **a2, _DWORD **a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::get_size();
void **cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::type();
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<unsigned int>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<unsigned int>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<unsigned int>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::big_any_policy<std::string>::static_delete(__int64 a1, void **a2);
size_t *__fastcall cvflann::anyimpl::big_any_policy<std::string>::copy_from_value(__int64 a1, __int128 *a2, size_t **a3);
size_t *__fastcall cvflann::anyimpl::big_any_policy<std::string>::clone(__int64 a1, __int128 **a2, size_t **a3);
__int64 *__fastcall cvflann::anyimpl::big_any_policy<std::string>::move(__int64 a1, __int64 **a2, __int64 **a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<std::string>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<std::string>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<std::string>::get_size();
void **cvflann::anyimpl::typed_base_any_policy<std::string>::type();
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<std::string>::print(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,rgbd::FrameTime>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::FrameTime>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::FrameTime>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,rgbd::AngStrongInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::AngStrongInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::AngStrongInfo>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall __noreturn sub_16148(const char *a1);
__int64 __fastcall sub_16198(std::logic_error *a1, const char *a2);
const rgbd::RGBDParam *__fastcall rgbd::RGBDParam::RGBDParam(rgbd::RGBDParam *this, const rgbd::RGBDParam *a2);
void __noreturn std::__basic_string_common<true>::__throw_length_error();
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3);
__int64 __fastcall sub_166B8(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int c);
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result);
_QWORD *__fastcall std::ostream::flush(_QWORD *a1);
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n);
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n);
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n);
void __noreturn std::__basic_string_common<true>::__throw_out_of_range();
void __fastcall __noreturn sub_16F0C(const char *a1);
__int64 __fastcall sub_16F5C(std::logic_error *a1, const char *a2);
__int64 **__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2);
unsigned __int64 __fastcall std::__murmur2_or_cityhash<unsigned long,64ul>::operator()(__int64 a1, __int64 *a2, unsigned __int64 a3);
unsigned __int64 __fastcall std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16(_DWORD *a1, unsigned __int64 a2);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::pair<std::string,v4l2Capture *>>(__int64 a1, unsigned __int8 *a2, __int128 *a3);
void __fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::rehash(__int64 a1, std::__ndk1 *this);
void __fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__rehash(void **a1, unsigned __int64 a2);
__int64 *__fastcall std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
__int64 *__fastcall std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2);
std::__ndk1 *__fastcall sub_17EFC(pthread_t *a1, __int128 *a2);
__int64 __fastcall std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (rgbd::RGBDAngStrong::*)(std::string),rgbd::RGBDAngStrong*,std::string&>>>(__int64 a1);
void __fastcall sub_1810C(char **a1, _QWORD *a2, __int64 a3);
_QWORD *__fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(__int64 a1, unsigned __int8 *a2, __int64 a3, __int128 **a4);
// _QWORD *__usercall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(__int64 a1@<X0>, __int64 a2@<X1>, __int128 **a3@<X3>, __int64 a4@<X8>);
_QWORD *__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(__int64 a1, unsigned __int8 *a2, __int64 a3, __int128 **a4);
// long double __usercall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<Q0>(__int64 a1@<X0>, __int64 a2@<X1>, __int128 **a3@<X3>, __int64 a4@<X8>);
void __fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::rehash(__int64 a1, std::__ndk1 *this);
void __fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__rehash(void **a1, unsigned __int64 a2);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation const&>,std::tuple<>>(__int64 a1, int *a2, __int64 a3, int **a4);
void __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::rehash(__int64 a1, std::__ndk1 *this);
void __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__rehash(__int64 a1, unsigned __int64 a2);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::pair<rgbd::RgbdLocation,std::string>>(__int64 a1, int *a2, __int64 a3);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::pair<std::string,rgbd::RGBDParam>>(__int64 a1, unsigned __int8 *a2, __int128 *a3);
__int64 __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__erase_unique<rgbd::RgbdLocation>(__int64 *a1, int *a2);
// __int64 *__usercall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::remove@<X0>(__int64 *result@<X0>, __int64 *a2@<X1>, __int64 a3@<X8>);
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation&&>,std::tuple<>>(__int64 a1, int *a2, __int64 a3, int **a4);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1, float a2);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
__int64 __fastcall std::shared_ptr<rgbd::RGBDAngStrong>::~shared_ptr(__int64 result);
jint JNI_OnLoad(JavaVM *vm, void *reserved);
void JNI_OnUnload(JavaVM *vm, void *reserved);
__int64 __fastcall sub_1B3BC(__int64 a1);
__int64 __fastcall sub_1B7D8(__int64 a1, __int64 a2, int a3, __int64 a4, char a5);
__int64 __fastcall sub_1BB0C(__int64 a1, __int64 a2, int a3, __int64 a4);
__int64 __fastcall sub_1BC48(__int64 a1, __int64 a2);
__int64 sub_1C204();
__int64 sub_1C22C();
__int64 __fastcall sub_1C240(__int64 a1);
__int64 sub_1C38C();
// long double __usercall sub_1C394@<Q0>(__int64 a1@<X0>, __int64 a2@<X1>, long double *a3@<X8>);
__int64 _JNIEnv::CallObjectMethod(__int64 a1, __int64 a2, __int64 a3, ...);
_QWORD *sub_1C630();
void __fastcall sub_1C654(__int64 a1, _QWORD *a2);
void __fastcall sub_1C66C(__int64 a1, unsigned int *a2, char *a3);
__int64 __fastcall sub_1CE0C(__int64 a1, __int64 a2);
void **sub_1CE28();
__int64 _JNIEnv::CallVoidMethod(__int64 a1, __int64 a2, __int64 a3, ...);
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
__int64 *__fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
__int64 _JNIEnv::NewObject(__int64 a1, __int64 a2, __int64 a3, ...);
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::~__shared_ptr_emplace(__int64 a1);
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::~__shared_ptr_emplace(__int64 a1);
__int64 __fastcall std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::__on_zero_shared(__int64 a1);
// void __fastcall std::out_of_range::~out_of_range(std::out_of_range *__hidden this); idb
// void __fastcall std::length_error::~length_error(std::length_error *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

int dword_0 = 1179403647; // weak
__int128 xmmword_1D260 = 0x43D5800043D580004348000043A00000LL; // weak
__int128 xmmword_1D270 = 0x10000001E0000019000000280LL; // weak
_UNKNOWN unk_1D9F4; // weak
void (__fastcall *off_32010[2])(rgbd::RGBDAngStrong *__hidden this) = { &rgbd::RGBDAngStrong::~RGBDAngStrong, &rgbd::RGBDAngStrong::~RGBDAngStrong }; // weak
void *`typeinfo for'cvflann::anyimpl::empty_any = &rgbd::RGBDParam::setType; // weak
void *`typeinfo for'cvflann::flann_algorithm_t = &std::ctype<char>::id; // weak
void *`typeinfo for'cvflann::flann_centers_init_t = &std::ctype<char>::id; // weak
void *`typeinfo for'std::string = &std::__thread_struct::~__thread_struct; // weak
char *off_32648[4] = { "LeftRgbd", "RigbtRgbd", "CenterRgbd", "DownRgbd" }; // weak
__int64 (__fastcall *off_32678)() = &nullsub_3; // weak
void *`typeinfo for'`anonymous namespace'::setDycRGBDCallBack(rgbd::RgbdLocation)::$_0 = &rgbd::RGBDParam::setType; // weak
__int64 (__fastcall *off_32708[3])() =
{
  &std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::~__shared_ptr_emplace,
  &std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::~__shared_ptr_emplace,
  &std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::__on_zero_shared
}; // weak
char *off_32748 = "LeftRgbd"; // weak
void *off_33000 = &off_33000; // weak
char *rgbd::ASTAG = "RGBDAngStrong"; // weak
char *off_33060[2] = { "getAngstrongRGBDSerial", "()[Ljava/lang/String;" }; // weak
int dword_33120; // weak
__int16 word_33128; // weak
_UNKNOWN unk_3312A; // weak
_UNKNOWN unk_33132; // weak
__int64 qword_33138; // weak
int dword_33140; // weak
__int16 word_33148; // weak
_UNKNOWN unk_3314A; // weak
_UNKNOWN unk_33152; // weak
__int64 qword_33158; // weak
int dword_33160; // weak
__int16 word_33168; // weak
_UNKNOWN unk_3316A; // weak
_UNKNOWN unk_33172; // weak
__int64 qword_33178; // weak
int dword_33180; // weak
__int16 word_33188; // weak
_UNKNOWN unk_3318A; // weak
_UNKNOWN unk_33192; // weak
__int64 qword_33198; // weak
int dword_331A0; // weak
__int16 word_331A8; // weak
_UNKNOWN unk_331AA; // weak
_UNKNOWN unk_331B2; // weak
__int64 qword_331B8; // weak
int dword_331C0; // weak
__int16 word_331C8; // weak
_UNKNOWN unk_331CA; // weak
_UNKNOWN unk_331D2; // weak
__int64 qword_331D8; // weak
int dword_331E0; // weak
char byte_331E8; // weak
_UNKNOWN unk_331E9; // weak
_UNKNOWN unk_331F1; // weak
__int64 qword_331F8; // weak
int dword_33200; // weak
char byte_33208; // weak
_UNKNOWN unk_33209; // weak
_UNKNOWN unk_33211; // weak
_UNKNOWN unk_33215; // weak
_UNKNOWN unk_3321D; // weak
char byte_3321F; // weak
int dword_33220; // weak
char byte_33228; // weak
_BYTE algn_33229[7]; // weak
_UNKNOWN unk_33239; // weak
_UNKNOWN unk_3323D; // weak
char byte_3323F; // weak
__int64 qword_33240; // weak
_UNKNOWN unk_33248; // weak
__int64 qword_33250; // weak
__int64 qword_33258; // weak
_UNKNOWN unk_33260; // weak
__int64 qword_33268; // weak
__int64 qword_33270; // weak
__int64 qword_33278; // weak
__int64 qword_33280; // weak
__int64 qword_33288; // weak
__int64 qword_33290; // weak
__int64 qword_33298; // weak
__int64 qword_332A0; // weak
__int64 qword_332A8; // weak
__int64 qword_332B0; // weak
__int64 qword_332B8; // weak
__int64 qword_332C0; // weak
__int64 qword_332C8; // weak
__int64 qword_332D0; // weak
__int64 qword_332D8; // weak
__int64 qword_332E0; // weak
__int64 qword_332E8; // weak
__int64 qword_332F0; // weak
__int64 qword_332F8; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<char const*>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<int>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<float>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<bool>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<unsigned int>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<std::string>::policy; // weak
int dword_33348; // weak
__int16 word_33350; // weak
_BYTE algn_33352[14]; // weak
__int64 qword_33360; // weak
int dword_33368; // weak
__int16 word_33370; // weak
_BYTE algn_33372[14]; // weak
__int64 qword_33380; // weak
int dword_33388; // weak
__int16 word_33390; // weak
_BYTE algn_33392[14]; // weak
__int64 qword_333A0; // weak
int dword_333A8; // weak
__int16 word_333B0; // weak
_BYTE algn_333B2[14]; // weak
__int64 qword_333C0; // weak
int dword_333C8; // weak
__int16 word_333D0; // weak
_BYTE algn_333D2[14]; // weak
__int64 qword_333E0; // weak
int dword_333E8; // weak
__int16 word_333F0; // weak
_BYTE algn_333F2[14]; // weak
__int64 qword_33400; // weak
int dword_33408; // weak
char byte_33410; // weak
_BYTE algn_33411[15]; // weak
__int64 qword_33420; // weak
int dword_33428; // weak
char byte_33430; // weak
_UNKNOWN unk_33431; // weak
_UNKNOWN unk_33439; // weak
_UNKNOWN unk_3343D; // weak
_UNKNOWN unk_33445; // weak
char byte_33447; // weak
int dword_33448; // weak
char byte_33450; // weak
_BYTE algn_33451[7]; // weak
_UNKNOWN unk_33461; // weak
_UNKNOWN unk_33465; // weak
char byte_33467; // weak
__int64 qword_33468; // weak
_UNKNOWN unk_33470; // weak
__int64 qword_33478; // weak
__int64 qword_33480; // weak
_UNKNOWN unk_33488; // weak
__int64 qword_33490; // weak
__int64 qword_33498; // weak
__int64 qword_334A0; // weak
__int64 qword_334A8; // weak
__int64 qword_334B0; // weak
__int64 qword_334B8; // weak
__int64 qword_334C0; // weak
__int64 qword_334C8; // weak
__int64 qword_334D0; // weak
__int64 qword_334D8; // weak
__int64 qword_334E0; // weak
__int64 qword_334E8; // weak
__int64 qword_334F0; // weak
__int64 qword_334F8; // weak
__int64 qword_33500; // weak
__int64 qword_33508; // weak
__int64 qword_33510; // weak
__int64 qword_33518; // weak
__int64 qword_33520; // weak
__int64 qword_33528; // weak
__int64 qword_33530; // weak
__int64 qword_33538; // weak
__int64 qword_33540; // weak
__int64 qword_33548; // weak
__int64 qword_33550; // weak
__int64 qword_33558; // weak
__int64 qword_33560; // weak
// extern _UNKNOWN `typeinfo for'std::out_of_range; weak
// extern _UNKNOWN `vtable for'std::out_of_range; weak
// extern _UNKNOWN `typeinfo for'std::length_error; weak
// extern _UNKNOWN `typeinfo for'char const*; weak
// extern _UNKNOWN `typeinfo for'float; weak
// extern _UNKNOWN `typeinfo for'unsigned int; weak
// extern _UNKNOWN `typeinfo for'bool; weak
// extern _UNKNOWN `vtable for'std::length_error; weak
// extern _UNKNOWN `typeinfo for'int; weak
// extern _UNKNOWN std::num_put<char,std::ostreambuf_iterator<char>>::id; weak
// extern _UNKNOWN std::ctype<char>::id; weak


//----- (000000000000D390) ----------------------------------------------------
void sub_D390()
{
  JUMPOUT(0LL);
}
// D3A0: control flows out of bounds to 0

//----- (000000000000D3C0) ----------------------------------------------------
// attributes: thunk
void __fastcall rgbd::RGBDAngStrong::~RGBDAngStrong(rgbd::RGBDAngStrong *this)
{
  _ZN4rgbd13RGBDAngStrongD2Ev(this);
}

//----- (000000000000D3E0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::unordered_map<std::string,rgbd::RGBDParam>::~unordered_map(__int64 a1)
{
  _ZNSt6__ndk113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9RGBDParamENS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev(a1);
}

//----- (000000000000D3F0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3)
{
  return _ZNSt6__ndk124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(a1, a2, a3);
}

//----- (000000000000D430) ----------------------------------------------------
// attributes: thunk
void __fastcall std::map<int,std::string>::~map(__int64 a1)
{
  _ZNSt6__ndk13mapIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4lessIiEENS4_INS_4pairIKiS6_EEEEED2Ev(a1);
}

//----- (000000000000D440) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::pair<std::string,v4l2Capture *>>(
        __int64 a1,
        unsigned __int8 *a2,
        __int128 *a3)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP11v4l2CaptureEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JNS_4pairIS7_S9_EEEEENSM_INS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEEbEERKT_DpOT0_(
           a1,
           a2,
           a3);
}

//----- (000000000000D450) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeIiNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIiS8_NS_4lessIiEELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(
    a1,
    a2);
}

//----- (000000000000D460) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP9_jfieldIDEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (000000000000D480) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2)
{
  return _ZNSt6__ndk127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(result, a2);
}

//----- (000000000000D4F0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8pudutech9RGBD_INFOEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (000000000000D500) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall rgbd::RGBDAngStrong::packageRGBD(rgbd::RGBDAngStrong *this, const void **a2)
{
  return _ZN4rgbd13RGBDAngStrong11packageRGBDERKN2cv3MatE(this, a2);
}

//----- (000000000000D510) ----------------------------------------------------
// attributes: thunk
void __usercall rgbd::RGBDAngStrong::getSerialNumber(rgbd::RGBDAngStrong *this@<X0>, _QWORD *a2@<X8>)
{
  _ZN4rgbd13RGBDAngStrong15getSerialNumberEv(this, a2);
}

//----- (000000000000D540) ----------------------------------------------------
// attributes: thunk
unsigned __int64 __fastcall std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16(
        _DWORD *a1,
        unsigned __int64 a2)
{
  return _ZNSt6__ndk121__murmur2_or_cityhashImLm64EE18__hash_len_0_to_16EPKcm(a1, a2);
}

//----- (000000000000D580) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm(a1, src, n);
}

//----- (000000000000D590) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__basic_string_common<true>::__throw_length_error()
{
  _ZNKSt6__ndk121__basic_string_commonILb1EE20__throw_length_errorEv();
}

//----- (000000000000D5A0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall _JNIEnv::CallObjectMethod(__int64 a1, __int64 a2, __int64 a3)
{
  return _ZN7_JNIEnv16CallObjectMethodEP8_jobjectP10_jmethodIDz(a1, a2, a3);
}

//----- (000000000000D5C0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::rehash(
        __int64 a1,
        std::__ndk1 *this)
{
  _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9RGBDParamEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE6rehashEm(
    a1,
    this);
}

//----- (000000000000D5D0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP7_jclassEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (000000000000D5E0) ----------------------------------------------------
// attributes: thunk
__int64 **__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::find<std::string>(
        _QWORD *a1,
        unsigned __int8 *a2)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9RGBDParamEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE4findIS7_EENS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEERKT_(
           a1,
           a2);
}

//----- (000000000000D610) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm(a1, a2, src, n);
}

//----- (000000000000D640) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,rgbd::AngStrongInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::AngStrongInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::AngStrongInfo>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd13AngStrongInfoEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (000000000000D690) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (000000000000D6A0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::map<std::string,pudutech::RGBD_INFO>::~map(__int64 a1)
{
  _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8pudutech9RGBD_INFOENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev(a1);
}

//----- (000000000000D6B0) ----------------------------------------------------
// attributes: thunk
__int64 *__usercall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::remove@<X0>(
        __int64 *result@<X0>,
        __int64 *a2@<X1>,
        __int64 a3@<X8>)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS3_SA_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_SA_NS_8equal_toIS3_EELb1EEENS7_ISA_EEE6removeENS_21__hash_const_iteratorIPNS_11__hash_nodeISA_PvEEEE(
           result,
           a2,
           a3);
}

//----- (000000000000D6C0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::unordered_map<rgbd::RgbdLocation,std::string>::~unordered_map(__int64 a1)
{
  _ZNSt6__ndk113unordered_mapIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_4hashIS2_EENS_8equal_toIS2_EENS6_INS_4pairIKS2_S8_EEEEED2Ev(a1);
}

//----- (000000000000D6D0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::flush(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(a1);
}

//----- (000000000000D6E0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall rgbd::RGBDAngStrong::waitForFrame(__int64 a1, unsigned __int8 *a2)
{
  return _ZN4rgbd13RGBDAngStrong12waitForFrameENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(
           a1,
           a2);
}

//----- (000000000000D6F0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__rehash(
        void **a1,
        unsigned __int64 a2)
{
  _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9RGBDParamEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE8__rehashEm(
    a1,
    a2);
}

//----- (000000000000D730) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(a1, src, n);
}

//----- (000000000000D740) ----------------------------------------------------
// attributes: thunk
long double __fastcall rgbd::RGBDAngStrong::RGBDAngStrong(rgbd::RGBDAngStrong *this)
{
  return _ZN4rgbd13RGBDAngStrongC2Ev(this);
}

//----- (000000000000D750) ----------------------------------------------------
// attributes: thunk
void __fastcall std::map<std::string,double>::~map(__int64 a1)
{
  _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdNS_4lessIS6_EENS4_INS_4pairIKS6_dEEEEED2Ev(a1);
}

//----- (000000000000D790) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall rgbd::RGBDAngStrong::setRgbdLocation(
        _QWORD *a1,
        int *a2,
        unsigned __int8 *a3,
        const signed __int8 *a4)
{
  return _ZN4rgbd13RGBDAngStrong15setRgbdLocationERKiRKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERKa(
           a1,
           a2,
           a3,
           a4);
}

//----- (000000000000D7B0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall rgbd::RGBDAngStrong::setRGBDCallback(_QWORD *a1, __int64 a2, __int128 *a3)
{
  return _ZN4rgbd13RGBDAngStrong15setRGBDCallbackERKNSt6__ndk18functionIFviaiiiEEERKNS_12RgbdLocationE(a1, a2, a3);
}

//----- (000000000000D7D0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::string::~string(__int64 a1)
{
  _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(a1);
}

//----- (000000000000D7E0) ----------------------------------------------------
// attributes: thunk
void __fastcall rgbd::RGBDAngStrong::~RGBDAngStrong(rgbd::RGBDAngStrong *this)
{
  _ZN4rgbd13RGBDAngStrongD2Ev(this);
}

//----- (000000000000D7F0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::map<std::string,rgbd::AngStrongInfo>::~map(__int64 a1)
{
  _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd13AngStrongInfoENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev(a1);
}

//----- (000000000000D840) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(result);
}

//----- (000000000000D860) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1, float a2)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEf(a1, a2);
}

//----- (000000000000D880) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
        __int64 a1,
        unsigned __int8 *a2,
        __int64 a3,
        __int128 **a4)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9RGBDParamEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSP_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEEbEERKT_DpOT0_(
           a1,
           a2,
           a3,
           a4);
}

//----- (000000000000D890) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__erase_unique<rgbd::RgbdLocation>(
        __int64 *a1,
        int *a2)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS3_SA_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_SA_NS_8equal_toIS3_EELb1EEENS7_ISA_EEE14__erase_uniqueIS3_EEmRKT_(
           a1,
           a2);
}

//----- (000000000000D8A0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEj(a1);
}

//----- (000000000000D8D0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::map<std::string,pudutech::RGBD_INFO>::operator[](__int64 a1, __int128 *a2)
{
  return _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8pudutech9RGBD_INFOENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEEixERSC_(
           a1,
           a2);
}

//----- (000000000000D900) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(
    a1,
    a2);
}

//----- (000000000000D920) ----------------------------------------------------
// attributes: thunk
void __fastcall std::unordered_map<std::string,v4l2Capture *>::~unordered_map(__int64 a1)
{
  _ZNSt6__ndk113unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP11v4l2CaptureNS_4hashIS6_EENS_8equal_toIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev(a1);
}

//----- (000000000000D930) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEb(a1);
}

//----- (000000000000D940) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,rgbd::FrameTime>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::FrameTime>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::FrameTime>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9FrameTimeEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (000000000000D960) ----------------------------------------------------
// attributes: thunk
void __fastcall rgbd::RGBDParam::~RGBDParam(rgbd::RGBDParam *this)
{
  _ZN4rgbd9RGBDParamD2Ev(this);
}

//----- (000000000000D980) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall _JNIEnv::NewObject(__int64 a1, __int64 a2, __int64 a3)
{
  return _ZN7_JNIEnv9NewObjectEP7_jclassP10_jmethodIDz(a1, a2, a3);
}

//----- (000000000000D990) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall V4L2DeviceParameters::V4L2DeviceParameters(__int64 *a1, int a2, __int128 *a3)
{
  return _ZN20V4L2DeviceParametersC2E11SENSOR_TYPENSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(
           a1,
           a2,
           a3);
}

//----- (000000000000D9B0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_3mapIS7_P9_jfieldIDNS_4lessIS7_EENS5_INS_4pairIKS7_SA_EEEEEEEENS_19__map_value_compareIS7_SI_SC_Lb1EEENS5_ISI_EEE7destroyEPNS_11__tree_nodeISI_PvEE(
    a1,
    a2);
}

//----- (000000000000D9C0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP9_jfieldIDEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_(
           a1,
           a2,
           a3);
}

//----- (000000000000D9D0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeIN4rgbd12RgbdLocationEP8_jobjectEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(
    a1,
    a2);
}

//----- (000000000000D9F0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::rehash(
        __int64 a1,
        std::__ndk1 *this)
{
  _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS3_SA_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_SA_NS_8equal_toIS3_EELb1EEENS7_ISA_EEE6rehashEm(
    a1,
    this);
}

//----- (000000000000DA10) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_jmethodIDEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (000000000000DA20) ----------------------------------------------------
// attributes: thunk
void __fastcall rgbd::RGBDAngStrong::chmodDevices(rgbd::RGBDAngStrong *this)
{
  _ZN4rgbd13RGBDAngStrong12chmodDevicesEv(this);
}

//----- (000000000000DA30) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall _JNIEnv::CallVoidMethod(__int64 a1, __int64 a2, __int64 a3)
{
  return _ZN7_JNIEnv14CallVoidMethodEP8_jobjectP10_jmethodIDz(a1, a2, a3);
}

//----- (000000000000DA40) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation&&>,std::tuple<>>(
        __int64 a1,
        int *a2,
        __int64 a3,
        int **a4)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS3_SA_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_SA_NS_8equal_toIS3_EELb1EEENS7_ISA_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJOS3_EEENSP_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEEbEERKT_DpOT0_(
           a1,
           a2,
           a3,
           a4);
}

//----- (000000000000DA90) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEm(a1);
}

//----- (000000000000DAA0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall rgbd::RGBDAngStrong::packageRGBD(__int64 a1, unsigned __int8 *a2, __int64 a3)
{
  return _ZN4rgbd13RGBDAngStrong11packageRGBDERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKN2cv3MatE(
           a1,
           a2,
           a3);
}

//----- (000000000000DAC0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__rehash(
        __int64 a1,
        unsigned __int64 a2)
{
  _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS3_SA_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_SA_NS_8equal_toIS3_EELb1EEENS7_ISA_EEE8__rehashEm(
    a1,
    a2);
}

//----- (000000000000DAD0) ----------------------------------------------------
// attributes: thunk
__int64 **__fastcall rgbd::RGBDAngStrong::updateRgbdSet(__int64 a1, int *a2, __int64 *a3)
{
  return _ZN4rgbd13RGBDAngStrong13updateRgbdSetERKiRKNSt6__ndk112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(
           a1,
           a2,
           a3);
}

//----- (000000000000DAE0) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__basic_string_common<true>::__throw_out_of_range()
{
  _ZNKSt6__ndk121__basic_string_commonILb1EE20__throw_out_of_rangeEv();
}

//----- (000000000000DB00) ----------------------------------------------------
// attributes: thunk
_QWORD *__usercall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(
        __int128 **a3@<X3>,
        __int64 a1@<X0>,
        __int64 a2@<X1>,
        __int64 a4@<X8>)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP11v4l2CaptureEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSP_IJEEEEEENS_10unique_ptrINS_11__hash_nodeISA_PvEENS_22__hash_node_destructorINS5_ISX_EEEEEEmOT_DpOT0_(
           a1,
           a2,
           a3,
           a4);
}

//----- (000000000000DB10) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
        __int64 a1,
        unsigned __int8 *a2,
        __int64 a3,
        __int128 **a4)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP11v4l2CaptureEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSP_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEEbEERKT_DpOT0_(
           a1,
           a2,
           a3,
           a4);
}

//----- (000000000000DB20) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEi(a1);
}

//----- (000000000000DB50) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_3mapIS7_P9_jfieldIDNS_4lessIS7_EENS5_INS_4pairIKS7_SA_EEEEEEEENS_19__map_value_compareIS7_SI_SC_Lb1EEENS5_ISI_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISR_EERKT_(
           a1,
           a2,
           a3);
}

//----- (000000000000DB90) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::pair<rgbd::RgbdLocation,std::string>>(
        __int64 a1,
        int *a2,
        __int64 a3)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS3_SA_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_SA_NS_8equal_toIS3_EELb1EEENS7_ISA_EEE25__emplace_unique_key_argsIS3_JNS_4pairIS3_S9_EEEEENSM_INS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEEbEERKT_DpOT0_(
           a1,
           a2,
           a3);
}

//----- (000000000000DBB0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEdEENS_19__map_value_compareIS7_S8_NS_4lessIS7_EELb1EEENS5_IS8_EEE7destroyEPNS_11__tree_nodeIS8_PvEE(
    a1,
    a2);
}

//----- (000000000000DBD0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::rehash(
        __int64 a1,
        std::__ndk1 *this)
{
  _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP11v4l2CaptureEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE6rehashEm(
    a1,
    this);
}

//----- (000000000000DBE0) ----------------------------------------------------
// attributes: thunk
const rgbd::RGBDParam *__fastcall rgbd::RGBDParam::RGBDParam(rgbd::RGBDParam *this, const rgbd::RGBDParam *a2)
{
  return _ZN4rgbd9RGBDParamC2ERKS0_(this, a2);
}

//----- (000000000000DBF0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeIN4rgbd12RgbdLocationEP10_jmethodIDEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(
    a1,
    a2);
}

//----- (000000000000DC20) ----------------------------------------------------
// attributes: thunk
void __fastcall std::map<std::string,rgbd::FrameTime>::~map(__int64 a1)
{
  _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9FrameTimeENS_4lessIS6_EENS4_INS_4pairIKS6_S8_EEEEED2Ev(a1);
}

//----- (000000000000DC30) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation const&>,std::tuple<>>(
        __int64 a1,
        int *a2,
        __int64 a3,
        int **a4)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_22__unordered_map_hasherIS3_SA_NS_4hashIS3_EELb1EEENS_21__unordered_map_equalIS3_SA_NS_8equal_toIS3_EELb1EEENS7_ISA_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSP_IJEEEEEENS_4pairINS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEEbEERKT_DpOT0_(
           a1,
           a2,
           a3,
           a4);
}

//----- (000000000000DC40) ----------------------------------------------------
// attributes: thunk
void __fastcall cv::Mat::~Mat(cv::Mat *this, void *a2)
{
  _ZN2cv3MatD2Ev(this, a2);
}

//----- (000000000000DC50) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::shared_ptr<pudutech::Ashdmem>::~shared_ptr(__int64 result)
{
  return _ZNSt6__ndk110shared_ptrIN8pudutech7AshdmemEED2Ev(result);
}

//----- (000000000000DC60) ----------------------------------------------------
// attributes: thunk
long double __usercall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<Q0>(
        __int128 **a3@<X3>,
        __int64 a1@<X0>,
        __int64 a2@<X1>,
        __int64 a4@<X8>)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9RGBDParamEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE21__construct_node_hashIRKNS_21piecewise_construct_tEJNS_5tupleIJRKS7_EEENSP_IJEEEEEENS_10unique_ptrINS_11__hash_nodeISA_PvEENS_22__hash_node_destructorINS5_ISX_EEEEEEmOT_DpOT0_(
           a1,
           a2,
           a3,
           a4);
}

//----- (000000000000DCA0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8pudutech9RGBD_INFOEEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISL_EERKT_(
           a1,
           a2,
           a3);
}

//----- (000000000000DCB0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::pair<std::string,rgbd::RGBDParam>>(
        __int64 a1,
        unsigned __int8 *a2,
        __int128 *a3)
{
  return _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN4rgbd9RGBDParamEEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE25__emplace_unique_key_argsIS7_JNS_4pairIS7_S9_EEEEENSM_INS_15__hash_iteratorIPNS_11__hash_nodeISA_PvEEEEbEERKT_DpOT0_(
           a1,
           a2,
           a3);
}

//----- (000000000000DCF0) ----------------------------------------------------
// attributes: thunk
unsigned __int64 __fastcall std::__murmur2_or_cityhash<unsigned long,64ul>::operator()(
        __int64 a1,
        __int64 *a2,
        unsigned __int64 a3)
{
  return _ZNSt6__ndk121__murmur2_or_cityhashImLm64EEclEPKvm(a1, a2, a3);
}

//----- (000000000000DD00) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__rehash(
        void **a1,
        unsigned __int64 a2)
{
  _ZNSt6__ndk112__hash_tableINS_17__hash_value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP11v4l2CaptureEENS_22__unordered_map_hasherIS7_SA_NS_4hashIS7_EELb1EEENS_21__unordered_map_equalIS7_SA_NS_8equal_toIS7_EELb1EEENS5_ISA_EEE8__rehashEm(
    a1,
    a2);
}

//----- (000000000000DD20) ----------------------------------------------------
// attributes: thunk
void __fastcall std::map<std::string,int>::~map(__int64 a1)
{
  _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiNS_4lessIS6_EENS4_INS_4pairIKS6_iEEEEED2Ev(a1);
}

//----- (000000000000DD40) ----------------------------------------------------
void start()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy = 1LL;
}
// 33300: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy;

//----- (000000000000DD5C) ----------------------------------------------------
void sub_DD5C()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<char const*>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<char const*>::policy = 1LL;
}
// 33308: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<char const*>::policy;

//----- (000000000000DD78) ----------------------------------------------------
void sub_DD78()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<int>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<int>::policy = 1LL;
}
// 33310: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<int>::policy;

//----- (000000000000DD94) ----------------------------------------------------
void sub_DD94()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<float>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<float>::policy = 1LL;
}
// 33318: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<float>::policy;

//----- (000000000000DDB0) ----------------------------------------------------
void sub_DDB0()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<bool>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<bool>::policy = 1LL;
}
// 33320: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<bool>::policy;

//----- (000000000000DDCC) ----------------------------------------------------
void sub_DDCC()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy = 1LL;
}
// 33328: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy;

//----- (000000000000DDE8) ----------------------------------------------------
void sub_DDE8()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy = 1LL;
}
// 33330: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy;

//----- (000000000000DE04) ----------------------------------------------------
void sub_DE04()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<unsigned int>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<unsigned int>::policy = 1LL;
}
// 33338: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<unsigned int>::policy;

//----- (000000000000DE20) ----------------------------------------------------
void sub_DE20()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<std::string>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<std::string>::policy = 1LL;
}
// 33340: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<std::string>::policy;

//----- (000000000000DE3C) ----------------------------------------------------
__int64 sub_DE3C()
{
  dword_33120 = 100;
  word_33128 = 17410;
  unk_33132 = 0LL;
  unk_3312A = 0LL;
  qword_33138 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33120, &off_33000);
  dword_33140 = 50;
  word_33148 = 22018;
  unk_33152 = 0LL;
  unk_3314A = 0LL;
  qword_33158 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33140, &off_33000);
  dword_33160 = 300;
  word_33168 = 18690;
  unk_33172 = 0LL;
  unk_3316A = 0LL;
  qword_33178 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33160, &off_33000);
  dword_33180 = 500;
  word_33188 = 22274;
  unk_33192 = 0LL;
  unk_3318A = 0LL;
  qword_33198 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33180, &off_33000);
  dword_331A0 = 800;
  word_331A8 = 17666;
  unk_331B2 = 0LL;
  unk_331AA = 0LL;
  qword_331B8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_331A0, &off_33000);
  dword_331C0 = 1000;
  word_331C8 = 17922;
  unk_331D2 = 0LL;
  unk_331CA = 0LL;
  qword_331D8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_331C0, &off_33000);
  dword_331E0 = 2000;
  byte_331E8 = 16;
  unk_331E9 = 0x54434152544E4F43LL;
  qword_331F8 = 0LL;
  unk_331F1 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_331E0, &off_33000);
  dword_33200 = 2001;
  byte_33208 = 24;
  unk_33211 = 1279348295;
  byte_3321F = 0;
  unk_3321D = 0;
  unk_33209 = *(_QWORD *)"FATAL_SIGNAL";
  unk_33215 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33200, &off_33000);
  dword_33220 = 2002;
  byte_33228 = 30;
  byte_3323F = 0;
  unk_3323D = 0;
  strcpy(algn_33229, "FATAL_EXCEPTION");
  unk_33239 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33220, &off_33000);
  unk_33248 = 0LL;
  qword_33250 = 0LL;
  qword_33240 = 16LL;
  *(__int64 *)((char *)&qword_33240 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_33240, &off_33000);
  unk_33260 = 0x3366252000LL;
  qword_33268 = 0LL;
  qword_33258 = 24LL;
  *(__int64 *)((char *)&qword_33258 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_33258, &off_33000);
  qword_33278 = 0LL;
  qword_33280 = 0LL;
  qword_33270 = (__int64)&qword_33278;
  __cxa_atexit((void (__fastcall *)(void *))std::map<std::string,_jclass *>::~map, &qword_33270, &off_33000);
  qword_33290 = 0LL;
  qword_33298 = 0LL;
  qword_33288 = (__int64)&qword_33290;
  __cxa_atexit((void (__fastcall *)(void *))std::map<std::string,_jmethodID *>::~map, &qword_33288, &off_33000);
  qword_332A8 = 0LL;
  qword_332B0 = 0LL;
  qword_332A0 = (__int64)&qword_332A8;
  __cxa_atexit(
    (void (__fastcall *)(void *))std::map<std::string,std::map<std::string,_jfieldID *>>::~map,
    &qword_332A0,
    &off_33000);
  qword_332C0 = 0LL;
  qword_332C8 = 0LL;
  qword_332B8 = (__int64)&qword_332C0;
  __cxa_atexit((void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,std::string>::~map, &qword_332B8, &off_33000);
  qword_332D8 = 0LL;
  qword_332E0 = 0LL;
  qword_332D0 = (__int64)&qword_332D8;
  __cxa_atexit((void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,_jobject *>::~map, &qword_332D0, &off_33000);
  qword_332F8 = 0LL;
  qword_332F0 = 0LL;
  qword_332E8 = (__int64)&qword_332F0;
  return __cxa_atexit(
           (void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,_jmethodID *>::~map,
           &qword_332E8,
           &off_33000);
}
// 33000: using guessed type void *off_33000;
// 33120: using guessed type int dword_33120;
// 33128: using guessed type __int16 word_33128;
// 33138: using guessed type __int64 qword_33138;
// 33140: using guessed type int dword_33140;
// 33148: using guessed type __int16 word_33148;
// 33158: using guessed type __int64 qword_33158;
// 33160: using guessed type int dword_33160;
// 33168: using guessed type __int16 word_33168;
// 33178: using guessed type __int64 qword_33178;
// 33180: using guessed type int dword_33180;
// 33188: using guessed type __int16 word_33188;
// 33198: using guessed type __int64 qword_33198;
// 331A0: using guessed type int dword_331A0;
// 331A8: using guessed type __int16 word_331A8;
// 331B8: using guessed type __int64 qword_331B8;
// 331C0: using guessed type int dword_331C0;
// 331C8: using guessed type __int16 word_331C8;
// 331D8: using guessed type __int64 qword_331D8;
// 331E0: using guessed type int dword_331E0;
// 331E8: using guessed type char byte_331E8;
// 331F8: using guessed type __int64 qword_331F8;
// 33200: using guessed type int dword_33200;
// 33208: using guessed type char byte_33208;
// 3321F: using guessed type char byte_3321F;
// 33220: using guessed type int dword_33220;
// 33228: using guessed type char byte_33228;
// 33229: using guessed type _BYTE algn_33229[7];
// 33230: using guessed type __int64 qword_33230;
// 33238: using guessed type char byte_33238;
// 3323F: using guessed type char byte_3323F;
// 33240: using guessed type __int64 qword_33240;
// 33250: using guessed type __int64 qword_33250;
// 33258: using guessed type __int64 qword_33258;
// 33268: using guessed type __int64 qword_33268;
// 33270: using guessed type __int64 qword_33270;
// 33278: using guessed type __int64 qword_33278;
// 33280: using guessed type __int64 qword_33280;
// 33288: using guessed type __int64 qword_33288;
// 33290: using guessed type __int64 qword_33290;
// 33298: using guessed type __int64 qword_33298;
// 332A0: using guessed type __int64 qword_332A0;
// 332A8: using guessed type __int64 qword_332A8;
// 332B0: using guessed type __int64 qword_332B0;
// 332B8: using guessed type __int64 qword_332B8;
// 332C0: using guessed type __int64 qword_332C0;
// 332C8: using guessed type __int64 qword_332C8;
// 332D0: using guessed type __int64 qword_332D0;
// 332D8: using guessed type __int64 qword_332D8;
// 332E0: using guessed type __int64 qword_332E0;
// 332E8: using guessed type __int64 qword_332E8;
// 332F0: using guessed type __int64 qword_332F0;
// 332F8: using guessed type __int64 qword_332F8;

//----- (000000000000E1D0) ----------------------------------------------------
__int64 sub_E1D0()
{
  dword_33348 = 100;
  word_33350 = 17410;
  *(_QWORD *)&algn_33352[8] = 0LL;
  *(_QWORD *)algn_33352 = 0LL;
  qword_33360 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33348, &off_33000);
  dword_33368 = 50;
  word_33370 = 22018;
  *(_QWORD *)&algn_33372[8] = 0LL;
  *(_QWORD *)algn_33372 = 0LL;
  qword_33380 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33368, &off_33000);
  dword_33388 = 300;
  word_33390 = 18690;
  *(_QWORD *)&algn_33392[8] = 0LL;
  *(_QWORD *)algn_33392 = 0LL;
  qword_333A0 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33388, &off_33000);
  dword_333A8 = 500;
  word_333B0 = 22274;
  *(_QWORD *)&algn_333B2[8] = 0LL;
  *(_QWORD *)algn_333B2 = 0LL;
  qword_333C0 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_333A8, &off_33000);
  dword_333C8 = 800;
  word_333D0 = 17666;
  *(_QWORD *)&algn_333D2[8] = 0LL;
  *(_QWORD *)algn_333D2 = 0LL;
  qword_333E0 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_333C8, &off_33000);
  dword_333E8 = 1000;
  word_333F0 = 17922;
  *(_QWORD *)&algn_333F2[8] = 0LL;
  *(_QWORD *)algn_333F2 = 0LL;
  qword_33400 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_333E8, &off_33000);
  dword_33408 = 2000;
  byte_33410 = 16;
  *(_QWORD *)algn_33411 = 0x54434152544E4F43LL;
  qword_33420 = 0LL;
  *(_QWORD *)&algn_33411[8] = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33408, &off_33000);
  dword_33428 = 2001;
  byte_33430 = 24;
  unk_33439 = 1279348295;
  byte_33447 = 0;
  unk_33445 = 0;
  unk_33431 = *(_QWORD *)"FATAL_SIGNAL";
  unk_3343D = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33428, &off_33000);
  dword_33448 = 2002;
  byte_33450 = 30;
  byte_33467 = 0;
  unk_33465 = 0;
  strcpy(algn_33451, "FATAL_EXCEPTION");
  unk_33461 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_33448, &off_33000);
  unk_33470 = 0LL;
  qword_33478 = 0LL;
  qword_33468 = 16LL;
  *(__int64 *)((char *)&qword_33468 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_33468, &off_33000);
  unk_33488 = 0x3366252000LL;
  qword_33490 = 0LL;
  qword_33480 = 24LL;
  *(__int64 *)((char *)&qword_33480 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_33480, &off_33000);
  qword_334A0 = 0LL;
  qword_334A8 = 0LL;
  qword_33498 = (__int64)&qword_334A0;
  __cxa_atexit((void (__fastcall *)(void *))std::map<std::string,_jclass *>::~map, &qword_33498, &off_33000);
  qword_334B8 = 0LL;
  qword_334C0 = 0LL;
  qword_334B0 = (__int64)&qword_334B8;
  __cxa_atexit((void (__fastcall *)(void *))std::map<std::string,_jmethodID *>::~map, &qword_334B0, &off_33000);
  qword_334D0 = 0LL;
  qword_334D8 = 0LL;
  qword_334C8 = (__int64)&qword_334D0;
  __cxa_atexit(
    (void (__fastcall *)(void *))std::map<std::string,std::map<std::string,_jfieldID *>>::~map,
    &qword_334C8,
    &off_33000);
  qword_334E8 = 0LL;
  qword_334F0 = 0LL;
  qword_334E0 = (__int64)&qword_334E8;
  __cxa_atexit((void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,std::string>::~map, &qword_334E0, &off_33000);
  qword_33500 = 0LL;
  qword_33508 = 0LL;
  qword_334F8 = (__int64)&qword_33500;
  __cxa_atexit((void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,_jobject *>::~map, &qword_334F8, &off_33000);
  qword_33518 = 0LL;
  qword_33520 = 0LL;
  qword_33510 = (__int64)&qword_33518;
  __cxa_atexit((void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,_jmethodID *>::~map, &qword_33510, &off_33000);
  return __cxa_atexit(
           (void (__fastcall *)(void *))std::shared_ptr<rgbd::RGBDAngStrong>::~shared_ptr,
           &qword_33528,
           &off_33000);
}
// 33000: using guessed type void *off_33000;
// 33348: using guessed type int dword_33348;
// 33350: using guessed type __int16 word_33350;
// 33352: using guessed type _BYTE algn_33352[14];
// 33360: using guessed type __int64 qword_33360;
// 33368: using guessed type int dword_33368;
// 33370: using guessed type __int16 word_33370;
// 33372: using guessed type _BYTE algn_33372[14];
// 33380: using guessed type __int64 qword_33380;
// 33388: using guessed type int dword_33388;
// 33390: using guessed type __int16 word_33390;
// 33392: using guessed type _BYTE algn_33392[14];
// 333A0: using guessed type __int64 qword_333A0;
// 333A8: using guessed type int dword_333A8;
// 333B0: using guessed type __int16 word_333B0;
// 333B2: using guessed type _BYTE algn_333B2[14];
// 333C0: using guessed type __int64 qword_333C0;
// 333C8: using guessed type int dword_333C8;
// 333D0: using guessed type __int16 word_333D0;
// 333D2: using guessed type _BYTE algn_333D2[14];
// 333E0: using guessed type __int64 qword_333E0;
// 333E8: using guessed type int dword_333E8;
// 333F0: using guessed type __int16 word_333F0;
// 333F2: using guessed type _BYTE algn_333F2[14];
// 33400: using guessed type __int64 qword_33400;
// 33408: using guessed type int dword_33408;
// 33410: using guessed type char byte_33410;
// 33411: using guessed type _BYTE algn_33411[15];
// 33420: using guessed type __int64 qword_33420;
// 33428: using guessed type int dword_33428;
// 33430: using guessed type char byte_33430;
// 33447: using guessed type char byte_33447;
// 33448: using guessed type int dword_33448;
// 33450: using guessed type char byte_33450;
// 33451: using guessed type _BYTE algn_33451[7];
// 33458: using guessed type __int64 qword_33458;
// 33460: using guessed type char byte_33460;
// 33467: using guessed type char byte_33467;
// 33468: using guessed type __int64 qword_33468;
// 33478: using guessed type __int64 qword_33478;
// 33480: using guessed type __int64 qword_33480;
// 33490: using guessed type __int64 qword_33490;
// 33498: using guessed type __int64 qword_33498;
// 334A0: using guessed type __int64 qword_334A0;
// 334A8: using guessed type __int64 qword_334A8;
// 334B0: using guessed type __int64 qword_334B0;
// 334B8: using guessed type __int64 qword_334B8;
// 334C0: using guessed type __int64 qword_334C0;
// 334C8: using guessed type __int64 qword_334C8;
// 334D0: using guessed type __int64 qword_334D0;
// 334D8: using guessed type __int64 qword_334D8;
// 334E0: using guessed type __int64 qword_334E0;
// 334E8: using guessed type __int64 qword_334E8;
// 334F0: using guessed type __int64 qword_334F0;
// 334F8: using guessed type __int64 qword_334F8;
// 33500: using guessed type __int64 qword_33500;
// 33508: using guessed type __int64 qword_33508;
// 33510: using guessed type __int64 qword_33510;
// 33518: using guessed type __int64 qword_33518;
// 33520: using guessed type __int64 qword_33520;
// 33528: using guessed type __int64 qword_33528;

//----- (000000000000E57C) ----------------------------------------------------
__int64 sub_E57C()
{
  return __cxa_finalize(&off_33000);
}
// 33000: using guessed type void *off_33000;

//----- (000000000000E590) ----------------------------------------------------
__int64 (*__fastcall sub_E590(__int64 (*result)(void)))(void)
{
  if ( result )
    return (__int64 (*)(void))result();
  return result;
}

//----- (000000000000E59C) ----------------------------------------------------
__int64 __fastcall sub_E59C(void *a1)
{
  return __cxa_atexit((void (__fastcall *)(void *))sub_E590, a1, &off_33000);
}
// 33000: using guessed type void *off_33000;

//----- (000000000000E5B8) ----------------------------------------------------
__int64 __fastcall sub_E5B8(__int64 a1, __int64 a2, __int64 a3)
{
  return __register_atfork(a1, a2, a3, &off_33000);
}
// DC90: using guessed type __int64 __fastcall __register_atfork(_QWORD, _QWORD, _QWORD, _QWORD);
// 33000: using guessed type void *off_33000;

//----- (000000000000E5C4) ----------------------------------------------------
void __fastcall std::string::~string(__int64 a1)
{
  if ( (*(_BYTE *)a1 & 1) != 0 )
    operator delete(*(void **)(a1 + 16));
}

//----- (000000000000E5D8) ----------------------------------------------------
void __fastcall LEVELS::~LEVELS(void **this)
{
  if ( ((_BYTE)this[1] & 1) != 0 )
    operator delete(this[3]);
}

//----- (000000000000E5EC) ----------------------------------------------------
void __fastcall std::map<std::string,_jclass *>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000E5F4) ----------------------------------------------------
void __fastcall std::map<std::string,_jmethodID *>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000E5FC) ----------------------------------------------------
void __fastcall std::map<std::string,std::map<std::string,_jfieldID *>>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000E604) ----------------------------------------------------
void __fastcall std::map<rgbd::RgbdLocation,std::string>::~map(__int64 a1)
{
  std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000E60C) ----------------------------------------------------
void __fastcall std::map<rgbd::RgbdLocation,_jobject *>::~map(__int64 a1)
{
  std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000E614) ----------------------------------------------------
void __fastcall std::map<rgbd::RgbdLocation,_jmethodID *>::~map(__int64 a1)
{
  std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000E61C) ----------------------------------------------------
long double __fastcall rgbd::RGBDAngStrong::RGBDAngStrong(rgbd::RGBDAngStrong *this)
{
  long double result; // q0

  *((_QWORD *)this + 2) = 0LL;
  *((_QWORD *)this + 3) = 0LL;
  *(_QWORD *)this = off_32010;
  *((_QWORD *)this + 1) = 0LL;
  *((_BYTE *)this + 9) = 0;
  *((_DWORD *)this + 8) = 512164;
  *((_QWORD *)this + 5) = "/dev/ashmem";
  *((_QWORD *)this + 6) = 0LL;
  *((_DWORD *)this + 14) = 1124007936;
  *(_OWORD *)((char *)this + 60) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *(_OWORD *)((char *)this + 76) = 0u;
  *((_QWORD *)this + 17) = 0LL;
  *((_QWORD *)this + 18) = 0LL;
  *((_QWORD *)this + 15) = (char *)this + 64;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_DWORD *)this + 38) = 1124007936;
  *((_DWORD *)this + 62) = 1124007936;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 172) = 0u;
  *(_OWORD *)((char *)this + 156) = 0u;
  *((_QWORD *)this + 29) = 0LL;
  *((_QWORD *)this + 30) = 0LL;
  *((_QWORD *)this + 27) = (char *)this + 160;
  *((_QWORD *)this + 28) = (char *)this + 232;
  *(_OWORD *)((char *)this + 252) = 0u;
  *((_QWORD *)this + 51) = (char *)this + 352;
  *((_QWORD *)this + 52) = (char *)this + 424;
  *((_QWORD *)this + 63) = (char *)this + 448;
  *((_QWORD *)this + 39) = (char *)this + 256;
  *((_QWORD *)this + 40) = (char *)this + 328;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 284) = 0u;
  *(_OWORD *)((char *)this + 268) = 0u;
  *((_QWORD *)this + 41) = 0LL;
  *((_QWORD *)this + 42) = 0LL;
  *((_DWORD *)this + 86) = 1124007936;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 380) = 0u;
  *(_OWORD *)((char *)this + 364) = 0u;
  *(_OWORD *)((char *)this + 348) = 0u;
  *((_QWORD *)this + 53) = 0LL;
  *((_QWORD *)this + 54) = 0LL;
  *((_DWORD *)this + 110) = 1124007936;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 476) = 0u;
  *(_OWORD *)((char *)this + 460) = 0u;
  *(_OWORD *)((char *)this + 444) = 0u;
  *((_QWORD *)this + 64) = (char *)this + 520;
  *((_QWORD *)this + 65) = 0LL;
  *((_QWORD *)this + 66) = 0LL;
  *((_DWORD *)this + 134) = 1124007936;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 572) = 0u;
  *(_OWORD *)((char *)this + 556) = 0u;
  *(_OWORD *)((char *)this + 540) = 0u;
  *((_QWORD *)this + 75) = (char *)this + 544;
  *((_QWORD *)this + 76) = (char *)this + 616;
  *((_QWORD *)this + 77) = 0LL;
  *((_QWORD *)this + 78) = 0LL;
  *((_DWORD *)this + 158) = 1124007936;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 668) = 0u;
  *(_OWORD *)((char *)this + 652) = 0u;
  *(_OWORD *)((char *)this + 636) = 0u;
  *((_DWORD *)this + 182) = 1124007936;
  *((_QWORD *)this + 87) = (char *)this + 640;
  *((_QWORD *)this + 88) = (char *)this + 712;
  *((_QWORD *)this + 89) = 0LL;
  *((_QWORD *)this + 90) = 0LL;
  *(_OWORD *)((char *)this + 748) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *(_OWORD *)((char *)this + 764) = 0u;
  *(_OWORD *)((char *)this + 732) = 0u;
  *((_QWORD *)this + 103) = (char *)this + 832;
  *((_QWORD *)this + 109) = (char *)this + 880;
  *((_QWORD *)this + 106) = (char *)this + 856;
  *((_QWORD *)this + 116) = (char *)this + 936;
  *((_QWORD *)this + 99) = (char *)this + 736;
  *((_QWORD *)this + 112) = (char *)this + 904;
  *((_QWORD *)this + 100) = (char *)this + 808;
  *((_QWORD *)this + 101) = 0LL;
  *((_QWORD *)this + 102) = 0LL;
  *((_QWORD *)this + 104) = 0LL;
  *((_QWORD *)this + 105) = 0LL;
  *((_QWORD *)this + 107) = 0LL;
  *((_QWORD *)this + 108) = 0LL;
  *((_QWORD *)this + 110) = 0LL;
  *((_QWORD *)this + 111) = 0LL;
  *((_QWORD *)this + 113) = 0LL;
  *((_QWORD *)this + 114) = 0LL;
  *((_QWORD *)this + 115) = 0x19000000280LL;
  *((_QWORD *)this + 117) = 0LL;
  *((_QWORD *)this + 118) = 0LL;
  *((_QWORD *)this + 129) = 0LL;
  *((_QWORD *)this + 130) = 0LL;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_QWORD *)this + 128) = (char *)this + 1032;
  *((_WORD *)this + 524) = 0;
  *(_OWORD *)((char *)this + 1112) = 0u;
  *(_OWORD *)((char *)this + 1100) = 0u;
  *(_OWORD *)((char *)this + 1084) = 0u;
  *(_OWORD *)((char *)this + 1068) = 0u;
  *(_OWORD *)((char *)this + 1052) = 0u;
  pudutech::Ashdmem::create((rgbd::RGBDAngStrong *)((char *)this + 520));
  *(_OWORD *)&result = 0uLL;
  *((_QWORD *)this + 143) = 0LL;
  *((_DWORD *)this + 288) = -1;
  *(_OWORD *)((char *)this + 1176) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_DWORD *)this + 298) = 1065353216;
  *((_OWORD *)this + 76) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_DWORD *)this + 308) = 1065353216;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *((_DWORD *)this + 318) = 1065353216;
  return result;
}
// 32010: using guessed type void (__fastcall *off_32010[2])(rgbd::RGBDAngStrong *__hidden this);

//----- (000000000000EE74) ----------------------------------------------------
void __fastcall std::map<std::string,rgbd::FrameTime>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,rgbd::FrameTime>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::FrameTime>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::FrameTime>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000EE7C) ----------------------------------------------------
void __fastcall sub_EE7C(std::thread **a1)
{
  std::thread *v1; // x19

  v1 = *a1;
  *a1 = 0LL;
  if ( v1 )
  {
    std::thread::~thread(v1);
    operator delete(v1);
  }
}

//----- (000000000000EEB8) ----------------------------------------------------
void __fastcall std::map<std::string,int>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000EEC0) ----------------------------------------------------
void __fastcall std::map<std::string,rgbd::AngStrongInfo>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,rgbd::AngStrongInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::AngStrongInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::AngStrongInfo>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000EEC8) ----------------------------------------------------
void __fastcall std::map<std::string,double>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000EED0) ----------------------------------------------------
void __fastcall std::map<std::string,pudutech::RGBD_INFO>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000EED8) ----------------------------------------------------
void __fastcall std::map<int,std::string>::~map(__int64 a1)
{
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000EEE0) ----------------------------------------------------
void __fastcall cv::Mat::~Mat(cv::Mat *this, void *a2)
{
  __int64 v2; // x8
  unsigned int *v4; // x8
  unsigned int v5; // w9
  unsigned int v6; // w9
  int v7; // w8
  __int64 v8; // x8
  __int64 v9; // x9
  cv *v10; // x0

  v2 = *((_QWORD *)this + 7);
  if ( v2 )
  {
    v4 = (unsigned int *)(v2 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while ( __stlxr(v6, v4) );
    if ( !v6 )
      cv::Mat::deallocate(this);
  }
  v7 = *((_DWORD *)this + 1);
  *((_QWORD *)this + 7) = 0LL;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  if ( v7 >= 1 )
  {
    v8 = *((_QWORD *)this + 8);
    v9 = 0LL;
    do
      *(_DWORD *)(v8 + 4 * v9++) = 0;
    while ( v9 < *((int *)this + 1) );
  }
  v10 = (cv *)*((_QWORD *)this + 9);
  if ( v10 != (cv::Mat *)((char *)this + 80) )
    cv::fastFree(v10, a2);
}
// EF5C: variable 'a2' is possibly undefined

//----- (000000000000EF70) ----------------------------------------------------
void __fastcall rgbd::RGBDAngStrong::~RGBDAngStrong(rgbd::RGBDAngStrong *this)
{
  std::mutex *v2; // x20
  rgbd::RGBDAngStrong *v3; // x0
  __int64 *v4; // x26
  __int128 v5; // q0
  size_t v6; // x21
  const void *v7; // x22
  char *v8; // x23
  void **v9; // x21
  void **v10; // x22
  __int64 v11; // x8
  __int64 i; // x9
  void **v13; // x21
  void **v14; // x22
  void *v15; // x0
  void **v16; // x21
  void **v17; // x22
  void *v18; // x0
  void **v19; // x21
  void **v20; // x22
  void *v21; // x0
  std::__shared_weak_count *v22; // x21
  unsigned __int64 *v23; // x8
  unsigned __int64 v24; // x9
  std::thread *v25; // x21
  std::thread *v26; // x21
  std::thread *v27; // x21
  void *v28; // x1
  __int64 v29; // x8
  unsigned int *v30; // x8
  unsigned int v31; // w9
  unsigned int v32; // w9
  __int64 v33; // x8
  __int64 v34; // x9
  cv *v35; // x0
  __int64 v36; // x8
  unsigned int *v37; // x8
  unsigned int v38; // w9
  unsigned int v39; // w9
  __int64 v40; // x8
  __int64 v41; // x9
  cv *v42; // x0
  __int64 v43; // x8
  unsigned int *v44; // x8
  unsigned int v45; // w9
  unsigned int v46; // w9
  __int64 v47; // x8
  __int64 v48; // x9
  cv *v49; // x0
  __int64 v50; // x8
  unsigned int *v51; // x8
  unsigned int v52; // w9
  unsigned int v53; // w9
  __int64 v54; // x8
  __int64 v55; // x9
  cv *v56; // x0
  __int64 v57; // x8
  unsigned int *v58; // x8
  unsigned int v59; // w9
  unsigned int v60; // w9
  __int64 v61; // x8
  __int64 v62; // x9
  cv *v63; // x0
  __int64 v64; // x8
  unsigned int *v65; // x8
  unsigned int v66; // w9
  unsigned int v67; // w9
  __int64 v68; // x8
  __int64 v69; // x9
  cv *v70; // x0
  __int64 v71; // x8
  unsigned int *v72; // x8
  unsigned int v73; // w9
  unsigned int v74; // w9
  int v75; // w8
  __int64 v76; // x8
  __int64 v77; // x9
  cv *v78; // x0
  __int64 v79; // x8
  unsigned int *v80; // x8
  unsigned int v81; // w9
  unsigned int v82; // w9
  int v83; // w8
  __int64 v84; // x8
  __int64 v85; // x9
  cv *v86; // x0
  __int128 v87; // [xsp+0h] [xbp-80h] BYREF
  void *v88; // [xsp+10h] [xbp-70h]
  v4l2Capture *v89; // [xsp+18h] [xbp-68h]
  __int64 v90; // [xsp+28h] [xbp-58h]

  v2 = (rgbd::RGBDAngStrong *)((char *)this + 960);
  v90 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  *(_QWORD *)this = off_32010;
  v3 = (rgbd::RGBDAngStrong *)std::mutex::lock((rgbd::RGBDAngStrong *)((char *)this + 960));
  rgbd::RGBDAngStrong::chmodDevices(v3);
  v4 = (__int64 *)*((_QWORD *)this + 157);
  if ( v4 )
  {
    while ( 1 )
    {
      v88 = 0LL;
      v87 = 0uLL;
      if ( (v4[2] & 1) != 0 )
        break;
      v5 = *((_OWORD *)v4 + 1);
      v88 = (void *)v4[4];
      v87 = v5;
LABEL_11:
      v89 = (v4l2Capture *)v4[5];
      v4l2Capture::close(v89);
      if ( (v87 & 1) != 0 )
        operator delete(v88);
      v4 = (__int64 *)*v4;
      if ( !v4 )
        goto LABEL_14;
    }
    v6 = v4[3];
    if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v7 = (const void *)v4[4];
    if ( v6 >= 0x17 )
    {
      v8 = (char *)operator new((v6 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      *((_QWORD *)&v87 + 1) = v6;
      v88 = v8;
      *(_QWORD *)&v87 = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v8 = (char *)&v87 + 1;
      LOBYTE(v87) = 2 * v6;
      if ( !v6 )
        goto LABEL_10;
    }
    memcpy(v8, v7, v6);
LABEL_10:
    v8[v6] = 0;
    goto LABEL_11;
  }
LABEL_14:
  if ( *((_QWORD *)this + 158) )
  {
    v9 = (void **)*((_QWORD *)this + 157);
    if ( v9 )
    {
      do
      {
        v10 = (void **)*v9;
        if ( ((_BYTE)v9[2] & 1) != 0 )
          operator delete(v9[4]);
        operator delete(v9);
        v9 = v10;
      }
      while ( v10 );
    }
    v11 = *((_QWORD *)this + 156);
    *((_QWORD *)this + 157) = 0LL;
    if ( v11 )
    {
      for ( i = 0LL; i != v11; ++i )
        *(_QWORD *)(*((_QWORD *)this + 155) + 8 * i) = 0LL;
    }
    *((_QWORD *)this + 158) = 0LL;
  }
  std::mutex::unlock(v2);
  v13 = (void **)*((_QWORD *)this + 157);
  if ( v13 )
  {
    do
    {
      v14 = (void **)*v13;
      if ( ((_BYTE)v13[2] & 1) != 0 )
        operator delete(v13[4]);
      operator delete(v13);
      v13 = v14;
    }
    while ( v14 );
  }
  v15 = (void *)*((_QWORD *)this + 155);
  *((_QWORD *)this + 155) = 0LL;
  if ( v15 )
    operator delete(v15);
  v16 = (void **)*((_QWORD *)this + 152);
  if ( v16 )
  {
    do
    {
      v17 = (void **)*v16;
      if ( ((_BYTE)v16[3] & 1) != 0 )
        operator delete(v16[5]);
      operator delete(v16);
      v16 = v17;
    }
    while ( v17 );
  }
  v18 = (void *)*((_QWORD *)this + 150);
  *((_QWORD *)this + 150) = 0LL;
  if ( v18 )
    operator delete(v18);
  v19 = (void **)*((_QWORD *)this + 147);
  if ( v19 )
  {
    do
    {
      v20 = (void **)*v19;
      rgbd::RGBDParam::~RGBDParam((rgbd::RGBDParam *)(v19 + 6));
      if ( ((_BYTE)v19[2] & 1) != 0 )
        operator delete(v19[4]);
      operator delete(v19);
      v19 = v20;
    }
    while ( v20 );
  }
  v21 = (void *)*((_QWORD *)this + 145);
  *((_QWORD *)this + 145) = 0LL;
  if ( v21 )
    operator delete(v21);
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 142);
  if ( v22 )
  {
    v23 = (unsigned __int64 *)((char *)v22 + 8);
    do
      v24 = __ldaxr(v23);
    while ( __stlxr(v24 - 1, v23) );
    if ( !v24 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v22 + 16LL))(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  std::condition_variable::~condition_variable((rgbd::RGBDAngStrong *)((char *)this + 1056));
  std::__tree<std::__value_type<std::string,rgbd::FrameTime>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::FrameTime>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::FrameTime>>>::destroy(
    (__int64)this + 1024,
    *((_QWORD **)this + 129));
  v25 = (std::thread *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0LL;
  if ( v25 )
  {
    std::thread::~thread(v25);
    operator delete(v25);
  }
  v26 = (std::thread *)*((_QWORD *)this + 126);
  *((_QWORD *)this + 126) = 0LL;
  if ( v26 )
  {
    std::thread::~thread(v26);
    operator delete(v26);
  }
  v27 = (std::thread *)*((_QWORD *)this + 125);
  *((_QWORD *)this + 125) = 0LL;
  if ( v27 )
  {
    std::thread::~thread(v27);
    operator delete(v27);
  }
  std::mutex::~mutex(v2);
  std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(
    (__int64)this + 928,
    *((_QWORD **)this + 117));
  std::__tree<std::__value_type<std::string,rgbd::AngStrongInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::AngStrongInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::AngStrongInfo>>>::destroy(
    (__int64)this + 896,
    *((_QWORD **)this + 113));
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::destroy(
    (__int64)this + 872,
    *((_QWORD **)this + 110));
  std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(
    (__int64)this + 848,
    *((_QWORD **)this + 107));
  std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(
    (__int64)this + 824,
    *((_QWORD **)this + 104));
  v29 = *((_QWORD *)this + 98);
  if ( v29 )
  {
    v30 = (unsigned int *)(v29 + 20);
    do
    {
      v31 = __ldaxr(v30);
      v32 = v31 - 1;
    }
    while ( __stlxr(v32, v30) );
    if ( !v32 )
      cv::Mat::deallocate((rgbd::RGBDAngStrong *)((char *)this + 728));
  }
  *((_QWORD *)this + 98) = 0LL;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  if ( *((int *)this + 183) >= 1 )
  {
    v33 = *((_QWORD *)this + 99);
    v34 = 0LL;
    do
      *(_DWORD *)(v33 + 4 * v34++) = 0;
    while ( v34 < *((int *)this + 183) );
  }
  v35 = (cv *)*((_QWORD *)this + 100);
  if ( v35 != (rgbd::RGBDAngStrong *)((char *)this + 808) )
    cv::fastFree(v35, v28);
  v36 = *((_QWORD *)this + 86);
  if ( v36 )
  {
    v37 = (unsigned int *)(v36 + 20);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while ( __stlxr(v39, v37) );
    if ( !v39 )
      cv::Mat::deallocate((rgbd::RGBDAngStrong *)((char *)this + 632));
  }
  *((_QWORD *)this + 86) = 0LL;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  if ( *((int *)this + 159) >= 1 )
  {
    v40 = *((_QWORD *)this + 87);
    v41 = 0LL;
    do
      *(_DWORD *)(v40 + 4 * v41++) = 0;
    while ( v41 < *((int *)this + 159) );
  }
  v42 = (cv *)*((_QWORD *)this + 88);
  if ( v42 != (rgbd::RGBDAngStrong *)((char *)this + 712) )
    cv::fastFree(v42, v28);
  v43 = *((_QWORD *)this + 74);
  if ( v43 )
  {
    v44 = (unsigned int *)(v43 + 20);
    do
    {
      v45 = __ldaxr(v44);
      v46 = v45 - 1;
    }
    while ( __stlxr(v46, v44) );
    if ( !v46 )
      cv::Mat::deallocate((rgbd::RGBDAngStrong *)((char *)this + 536));
  }
  *((_QWORD *)this + 74) = 0LL;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 552) = 0u;
  if ( *((int *)this + 135) >= 1 )
  {
    v47 = *((_QWORD *)this + 75);
    v48 = 0LL;
    do
      *(_DWORD *)(v47 + 4 * v48++) = 0;
    while ( v48 < *((int *)this + 135) );
  }
  v49 = (cv *)*((_QWORD *)this + 76);
  if ( v49 != (rgbd::RGBDAngStrong *)((char *)this + 616) )
    cv::fastFree(v49, v28);
  v50 = *((_QWORD *)this + 62);
  if ( v50 )
  {
    v51 = (unsigned int *)(v50 + 20);
    do
    {
      v52 = __ldaxr(v51);
      v53 = v52 - 1;
    }
    while ( __stlxr(v53, v51) );
    if ( !v53 )
      cv::Mat::deallocate((rgbd::RGBDAngStrong *)((char *)this + 440));
  }
  *((_QWORD *)this + 62) = 0LL;
  *(_OWORD *)((char *)this + 472) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  if ( *((int *)this + 111) >= 1 )
  {
    v54 = *((_QWORD *)this + 63);
    v55 = 0LL;
    do
      *(_DWORD *)(v54 + 4 * v55++) = 0;
    while ( v55 < *((int *)this + 111) );
  }
  v56 = (cv *)*((_QWORD *)this + 64);
  if ( v56 != (rgbd::RGBDAngStrong *)((char *)this + 520) )
    cv::fastFree(v56, v28);
  v57 = *((_QWORD *)this + 50);
  if ( v57 )
  {
    v58 = (unsigned int *)(v57 + 20);
    do
    {
      v59 = __ldaxr(v58);
      v60 = v59 - 1;
    }
    while ( __stlxr(v60, v58) );
    if ( !v60 )
      cv::Mat::deallocate((rgbd::RGBDAngStrong *)((char *)this + 344));
  }
  *((_QWORD *)this + 50) = 0LL;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  if ( *((int *)this + 87) >= 1 )
  {
    v61 = *((_QWORD *)this + 51);
    v62 = 0LL;
    do
      *(_DWORD *)(v61 + 4 * v62++) = 0;
    while ( v62 < *((int *)this + 87) );
  }
  v63 = (cv *)*((_QWORD *)this + 52);
  if ( v63 != (rgbd::RGBDAngStrong *)((char *)this + 424) )
    cv::fastFree(v63, v28);
  v64 = *((_QWORD *)this + 38);
  if ( v64 )
  {
    v65 = (unsigned int *)(v64 + 20);
    do
    {
      v66 = __ldaxr(v65);
      v67 = v66 - 1;
    }
    while ( __stlxr(v67, v65) );
    if ( !v67 )
      cv::Mat::deallocate((rgbd::RGBDAngStrong *)((char *)this + 248));
  }
  *((_QWORD *)this + 38) = 0LL;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  if ( *((int *)this + 63) >= 1 )
  {
    v68 = *((_QWORD *)this + 39);
    v69 = 0LL;
    do
      *(_DWORD *)(v68 + 4 * v69++) = 0;
    while ( v69 < *((int *)this + 63) );
  }
  v70 = (cv *)*((_QWORD *)this + 40);
  if ( v70 != (rgbd::RGBDAngStrong *)((char *)this + 328) )
    cv::fastFree(v70, v28);
  v71 = *((_QWORD *)this + 26);
  if ( v71 )
  {
    v72 = (unsigned int *)(v71 + 20);
    do
    {
      v73 = __ldaxr(v72);
      v74 = v73 - 1;
    }
    while ( __stlxr(v74, v72) );
    if ( !v74 )
      cv::Mat::deallocate((rgbd::RGBDAngStrong *)((char *)this + 152));
  }
  v75 = *((_DWORD *)this + 39);
  *((_QWORD *)this + 26) = 0LL;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  if ( v75 >= 1 )
  {
    v76 = *((_QWORD *)this + 27);
    v77 = 0LL;
    do
      *(_DWORD *)(v76 + 4 * v77++) = 0;
    while ( v77 < *((int *)this + 39) );
  }
  v78 = (cv *)*((_QWORD *)this + 28);
  if ( v78 != (rgbd::RGBDAngStrong *)((char *)this + 232) )
    cv::fastFree(v78, v28);
  v79 = *((_QWORD *)this + 14);
  if ( v79 )
  {
    v80 = (unsigned int *)(v79 + 20);
    do
    {
      v81 = __ldaxr(v80);
      v82 = v81 - 1;
    }
    while ( __stlxr(v82, v80) );
    if ( !v82 )
      cv::Mat::deallocate((rgbd::RGBDAngStrong *)((char *)this + 56));
  }
  v83 = *((_DWORD *)this + 15);
  *((_QWORD *)this + 14) = 0LL;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  if ( v83 >= 1 )
  {
    v84 = *((_QWORD *)this + 15);
    v85 = 0LL;
    do
      *(_DWORD *)(v84 + 4 * v85++) = 0;
    while ( v85 < *((int *)this + 15) );
  }
  v86 = (cv *)*((_QWORD *)this + 16);
  if ( v86 != (rgbd::RGBDAngStrong *)((char *)this + 136) )
    cv::fastFree(v86, v28);
  if ( (*((_BYTE *)this + 8) & 1) != 0 )
    operator delete(*((void **)this + 3));
}
// F2F8: variable 'v28' is possibly undefined
// 32010: using guessed type void (__fastcall *[2])(rgbd::RGBDAngStrong *__hidden this);

//----- (000000000000F7C0) ----------------------------------------------------
void __fastcall rgbd::RGBDAngStrong::chmodDevices(rgbd::RGBDAngStrong *this)
{
  int v1; // w1
  unsigned int i; // w19
  __int64 *v3; // x0
  __int128 v4; // q0
  __int64 *v5; // x0
  __int128 v6; // q0
  char v7; // w28
  char *v8; // x23
  const char *v9; // x0
  int v10; // w27
  int v11; // w1
  __int64 *v12; // x0
  __int128 v13; // q0
  __int64 *v14; // x0
  char *v15; // x24
  __int64 v16; // x9
  char v17; // w28
  const char *v18; // x0
  __int64 v19[2]; // [xsp+8h] [xbp-B8h] BYREF
  void *v20; // [xsp+18h] [xbp-A8h]
  __int128 v21; // [xsp+20h] [xbp-A0h] BYREF
  void *v22; // [xsp+30h] [xbp-90h]
  __int128 v23; // [xsp+40h] [xbp-80h] BYREF
  char *v24; // [xsp+50h] [xbp-70h]
  _QWORD v25[3]; // [xsp+58h] [xbp-68h] BYREF

  v25[2] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  system("su -c \"chmod -R 666 /dev/bus/usb\"");
  for ( i = 0; i < 0x14; ++i )
  {
    std::to_string(v19, (std::__ndk1 *)i, v1);
    v3 = std::string::insert(v19, 0LL, "su -c \"chmod 666 /dev/video", 0x1BuLL);
    v4 = *(_OWORD *)v3;
    v22 = (void *)v3[2];
    v21 = v4;
    v3[1] = 0LL;
    v3[2] = 0LL;
    *v3 = 0LL;
    v5 = std::string::append((__int64 *)&v21, "\"", 1uLL);
    v6 = *(_OWORD *)v5;
    v24 = (char *)v5[2];
    v23 = v6;
    v5[1] = 0LL;
    v5[2] = 0LL;
    *v5 = 0LL;
    if ( (v21 & 1) != 0 )
      operator delete(v22);
    if ( (v19[0] & 1) != 0 )
      operator delete(v20);
    v7 = v23;
    v8 = v24;
    if ( (v23 & 1) != 0 )
      v9 = v24;
    else
      v9 = (char *)&v23 + 1;
    system(v9);
    v10 = v7 & 1;
    std::to_string(v19, (std::__ndk1 *)i, v11);
    v12 = std::string::insert(v19, 0LL, "su -c \"chmod 666 /dev/ttyACM", 0x1CuLL);
    v13 = *(_OWORD *)v12;
    v22 = (void *)v12[2];
    v21 = v13;
    v12[1] = 0LL;
    v12[2] = 0LL;
    *v12 = 0LL;
    v14 = std::string::append((__int64 *)&v21, "\"", 1uLL);
    v15 = (char *)v14[2];
    v16 = *(__int64 *)((char *)v14 + 1);
    v17 = *(_BYTE *)v14;
    *(_QWORD *)((char *)v25 + 7) = v14[1];
    v25[0] = v16;
    *v14 = 0LL;
    v14[1] = 0LL;
    v14[2] = 0LL;
    if ( v10 )
    {
      *((_QWORD *)&v23 + 1) = 0LL;
      operator delete(v8);
      *(_QWORD *)&v23 = 0LL;
    }
    else
    {
      LOWORD(v23) = 0;
    }
    LOBYTE(v23) = v17;
    *((_QWORD *)&v23 + 1) = *(_QWORD *)((char *)v25 + 7);
    *(_QWORD *)((char *)&v23 + 1) = v25[0];
    v24 = v15;
    memset(v25, 0, 15);
    if ( (v21 & 1) != 0 )
      operator delete(v22);
    if ( (v19[0] & 1) != 0 )
      operator delete(v20);
    if ( (v17 & 1) != 0 )
      v18 = v15;
    else
      v18 = (char *)&v23 + 1;
    system(v18);
    if ( (v17 & 1) != 0 )
      operator delete(v15);
  }
}
// F824: variable 'v1' is possibly undefined
// F8BC: variable 'v11' is possibly undefined

//----- (000000000000FA74) ----------------------------------------------------
void __fastcall std::unordered_map<std::string,v4l2Capture *>::~unordered_map(__int64 a1)
{
  void **v1; // x20
  void **v3; // x21
  void *v4; // x0

  v1 = *(void ***)(a1 + 16);
  if ( v1 )
  {
    do
    {
      v3 = (void **)*v1;
      if ( ((_BYTE)v1[2] & 1) != 0 )
        operator delete(v1[4]);
      operator delete(v1);
      v1 = v3;
    }
    while ( v3 );
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0LL;
  if ( v4 )
    operator delete(v4);
}

//----- (000000000000FAE0) ----------------------------------------------------
void __fastcall std::unordered_map<rgbd::RgbdLocation,std::string>::~unordered_map(__int64 a1)
{
  void **v1; // x20
  void **v3; // x21
  void *v4; // x0

  v1 = *(void ***)(a1 + 16);
  if ( v1 )
  {
    do
    {
      v3 = (void **)*v1;
      if ( ((_BYTE)v1[3] & 1) != 0 )
        operator delete(v1[5]);
      operator delete(v1);
      v1 = v3;
    }
    while ( v3 );
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0LL;
  if ( v4 )
    operator delete(v4);
}

//----- (000000000000FB4C) ----------------------------------------------------
void __fastcall std::unordered_map<std::string,rgbd::RGBDParam>::~unordered_map(__int64 a1)
{
  void **v1; // x20
  void **v3; // x21
  void *v4; // x0

  v1 = *(void ***)(a1 + 16);
  if ( v1 )
  {
    do
    {
      v3 = (void **)*v1;
      rgbd::RGBDParam::~RGBDParam((rgbd::RGBDParam *)(v1 + 6));
      if ( ((_BYTE)v1[2] & 1) != 0 )
        operator delete(v1[4]);
      operator delete(v1);
      v1 = v3;
    }
    while ( v3 );
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0LL;
  if ( v4 )
    operator delete(v4);
}

//----- (000000000000FBC0) ----------------------------------------------------
__int64 __fastcall std::shared_ptr<pudutech::Ashdmem>::~shared_ptr(__int64 result)
{
  std::__shared_weak_count *v1; // x19
  unsigned __int64 *v2; // x8
  unsigned __int64 v3; // x9

  v1 = *(std::__shared_weak_count **)(result + 8);
  if ( v1 )
  {
    v2 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v3 = __ldaxr(v2);
    while ( __stlxr(v3 - 1, v2) );
    if ( !v3 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      return std::__shared_weak_count::__release_weak(v1);
    }
  }
  return result;
}

//----- (000000000000FC18) ----------------------------------------------------
void __fastcall __noreturn sub_FC18(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

//----- (000000000000FC24) ----------------------------------------------------
void __fastcall rgbd::RGBDAngStrong::~RGBDAngStrong(rgbd::RGBDAngStrong *this)
{
  rgbd::RGBDAngStrong::~RGBDAngStrong(this);
  operator delete(this);
}

//----- (000000000000FC48) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::startCamera(rgbd::RGBDAngStrong *this)
{
  return (*(__int64 (__fastcall **)(rgbd::RGBDAngStrong *))(*(_QWORD *)this + 56LL))(this);
}

//----- (000000000000FC58) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::pause(rgbd::RGBDAngStrong *this)
{
  std::mutex *v1; // x19
  rgbd::RGBDAngStrong *v3; // x0
  unsigned __int8 v4; // w8
  __int64 *v5; // x26
  __int128 v6; // q0
  size_t v7; // x21
  const void *v8; // x22
  char *v9; // x23
  void **v10; // x21
  void **v11; // x22
  __int64 v12; // x8
  __int64 i; // x9
  const char *v14; // x22
  size_t v15; // x0
  size_t v16; // x21
  char *v17; // x23
  unsigned __int64 v18; // x24
  char *v19; // x21
  size_t v20; // x0
  size_t v21; // x22
  char *v22; // x23
  char v23; // w21
  unsigned __int64 v24; // x24
  unsigned __int64 v26; // [xsp+8h] [xbp-1E8h] BYREF
  size_t v27; // [xsp+10h] [xbp-1E0h]
  void *v28; // [xsp+18h] [xbp-1D8h]
  int v29; // [xsp+20h] [xbp-1D0h] BYREF
  unsigned __int64 v30; // [xsp+28h] [xbp-1C8h] BYREF
  size_t v31; // [xsp+30h] [xbp-1C0h]
  void *v32; // [xsp+38h] [xbp-1B8h]
  __int128 v33; // [xsp+40h] [xbp-1B0h] BYREF
  void *v34; // [xsp+50h] [xbp-1A0h]
  v4l2Capture *v35; // [xsp+58h] [xbp-198h]
  __int64 v36; // [xsp+190h] [xbp-60h]

  v1 = (rgbd::RGBDAngStrong *)((char *)this + 960);
  v36 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = (rgbd::RGBDAngStrong *)std::mutex::lock((rgbd::RGBDAngStrong *)((char *)this + 960));
  v4 = atomic_load((unsigned __int8 *)this + 1048);
  if ( (v4 & 1) != 0 )
  {
    rgbd::RGBDAngStrong::chmodDevices(v3);
    v5 = (__int64 *)*((_QWORD *)this + 157);
    if ( v5 )
    {
      while ( 1 )
      {
        v34 = 0LL;
        v33 = 0uLL;
        if ( (v5[2] & 1) != 0 )
          break;
        v6 = *((_OWORD *)v5 + 1);
        v34 = (void *)v5[4];
        v33 = v6;
LABEL_12:
        v35 = (v4l2Capture *)v5[5];
        v4l2Capture::close(v35);
        if ( (v33 & 1) != 0 )
          operator delete(v34);
        v5 = (__int64 *)*v5;
        if ( !v5 )
          goto LABEL_15;
      }
      v7 = v5[3];
      if ( v7 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v8 = (const void *)v5[4];
      if ( v7 >= 0x17 )
      {
        v9 = (char *)operator new((v7 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        *((_QWORD *)&v33 + 1) = v7;
        v34 = v9;
        *(_QWORD *)&v33 = (v7 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
      }
      else
      {
        v9 = (char *)&v33 + 1;
        LOBYTE(v33) = 2 * v7;
        if ( !v7 )
          goto LABEL_11;
      }
      memcpy(v9, v8, v7);
LABEL_11:
      v9[v7] = 0;
      goto LABEL_12;
    }
LABEL_15:
    if ( *((_QWORD *)this + 158) )
    {
      v10 = (void **)*((_QWORD *)this + 157);
      if ( v10 )
      {
        do
        {
          v11 = (void **)*v10;
          if ( ((_BYTE)v10[2] & 1) != 0 )
            operator delete(v10[4]);
          operator delete(v10);
          v10 = v11;
        }
        while ( v11 );
      }
      v12 = *((_QWORD *)this + 156);
      *((_QWORD *)this + 157) = 0LL;
      if ( v12 )
      {
        for ( i = 0LL; i != v12; ++i )
          *(_QWORD *)(*((_QWORD *)this + 155) + 8 * i) = 0LL;
      }
      *((_QWORD *)this + 158) = 0LL;
    }
    std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(
      (__int64)this + 848,
      *((_QWORD **)this + 107));
    *((_QWORD *)this + 106) = (char *)this + 856;
    *((_QWORD *)this + 108) = 0LL;
    *((_QWORD *)this + 107) = 0LL;
    v29 = dword_33120;
    v31 = 0LL;
    v32 = 0LL;
    if ( (word_33128 & 1) != 0 )
      v14 = (const char *)qword_33138;
    else
      v14 = (char *)&word_33128 + 1;
    v30 = 0LL;
    v15 = strlen(v14);
    if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v16 = v15;
    if ( v15 >= 0x17 )
    {
      v18 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v17 = (char *)operator new(v18);
      v31 = v16;
      v32 = v17;
      v30 = v18 | 1;
    }
    else
    {
      v17 = (char *)&v30 + 1;
      LOBYTE(v30) = 2 * v15;
      if ( !v15 )
      {
LABEL_33:
        v17[v16] = 0;
        if ( (g3::logLevel(&v29) & 1) == 0 )
        {
          v23 = 0;
          if ( (v30 & 1) == 0 )
            goto LABEL_45;
          goto LABEL_39;
        }
        v27 = 0LL;
        v28 = 0LL;
        v26 = 0LL;
        v19 = rgbd::ASTAG;
        v20 = strlen(rgbd::ASTAG);
        if ( v20 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v21 = v20;
        if ( v20 >= 0x17 )
        {
          v24 = (v20 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v22 = (char *)operator new(v24);
          v27 = v21;
          v28 = v22;
          v26 = v24 | 1;
        }
        else
        {
          v22 = (char *)&v26 + 1;
          LOBYTE(v26) = 2 * v20;
          if ( !v20 )
          {
LABEL_43:
            v22[v21] = 0;
            v23 = g3::logTag(&v26);
            if ( (v26 & 1) != 0 )
            {
              operator delete(v28);
              if ( (v30 & 1) == 0 )
              {
LABEL_45:
                if ( (v23 & 1) != 0 )
                {
LABEL_46:
                  LogCapture::LogCapture((LogCapture *)&v33, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
                  std::__put_character_sequence<char,std::char_traits<char>>(
                    (_QWORD *)&v33 + 1,
                    (__int64)"close angstrong device",
                    22LL);
                  LogCapture::~LogCapture((LogCapture *)&v33);
                }
LABEL_47:
                atomic_store(0, (unsigned __int8 *)this + 1048);
                return std::mutex::unlock(v1);
              }
            }
            else if ( (v30 & 1) == 0 )
            {
              goto LABEL_45;
            }
LABEL_39:
            operator delete(v32);
            if ( (v23 & 1) != 0 )
              goto LABEL_46;
            goto LABEL_47;
          }
        }
        memcpy(v22, v19, v21);
        goto LABEL_43;
      }
    }
    memcpy(v17, v14, v16);
    goto LABEL_33;
  }
  return std::mutex::unlock(v1);
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 33008: using guessed type char *rgbd::ASTAG;
// 33120: using guessed type int dword_33120;
// 33128: using guessed type __int16 word_33128;
// 33138: using guessed type __int64 qword_33138;

//----- (000000000001006C) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::resume(rgbd::RGBDAngStrong *this)
{
  std::mutex *v1; // x20
  rgbd::RGBDAngStrong *v3; // x0
  unsigned __int8 v4; // w8
  const char *v5; // x22
  size_t v6; // x0
  size_t v7; // x19
  char *v8; // x23
  unsigned int v9; // w19
  unsigned __int64 v10; // x20
  char *v11; // x19
  size_t v12; // x0
  size_t v13; // x22
  char *v14; // x23
  char v15; // w19
  unsigned __int64 v16; // x20
  const char *v17; // x22
  size_t v18; // x0
  size_t v19; // x19
  char *v20; // x23
  unsigned __int64 v21; // x20
  char *v22; // x19
  size_t v23; // x0
  size_t v24; // x22
  char *v25; // x23
  char v26; // w19
  unsigned __int64 v27; // x20
  _QWORD *v28; // x0
  unsigned __int8 *v29; // x22
  _QWORD *v30; // x28
  unsigned __int64 v31; // x20
  char *v32; // x24
  char v33; // w23
  unsigned __int64 v34; // x8
  __int64 v35; // x2
  __int64 v36; // x1
  const char *v37; // x27
  size_t v38; // x0
  size_t v39; // x23
  char *v40; // x24
  const char *v41; // x27
  size_t v42; // x0
  size_t v43; // x23
  char *v44; // x24
  unsigned __int64 v45; // x20
  char *v46; // x23
  size_t v47; // x0
  size_t v48; // x27
  char *v49; // x24
  char v50; // w23
  unsigned __int64 v51; // x20
  char *v52; // x23
  size_t v53; // x0
  size_t v54; // x27
  char *v55; // x24
  char v56; // w23
  unsigned __int64 v57; // x20
  _QWORD *v58; // x0
  unsigned __int64 v59; // x8
  __int64 v60; // x1
  __int64 v61; // x2
  __int128 v62; // q0
  size_t v63; // x23
  const void *v64; // x27
  char *v65; // x24
  __int64 v66; // x23
  __int128 v67; // q0
  unsigned __int64 v68; // x8
  void *v69; // x1
  size_t v70; // x2
  const char *v71; // x27
  size_t v72; // x0
  size_t v73; // x23
  char *v74; // x24
  size_t v75; // x27
  const void *v76; // x24
  char *v77; // x20
  unsigned __int64 v78; // x20
  char *v79; // x23
  size_t v80; // x0
  size_t v81; // x27
  unsigned __int8 *v82; // x23
  __int64 v83; // x8
  _QWORD *v84; // x0
  __int64 v85; // x10
  bool v86; // zf
  __int64 *v87; // x20
  __int128 v88; // q0
  size_t v89; // x23
  const void *v90; // x24
  char *v91; // x20
  __int64 v92; // x8
  size_t v93; // x23
  void *v94; // x24
  char *v95; // x27
  unsigned __int64 v96; // x20
  void *v97; // x0
  __int128 v98; // q0
  size_t v99; // x23
  const void *v100; // x24
  char *v101; // x20
  size_t v102; // x23
  void *v103; // x24
  char *v104; // x20
  unsigned __int64 v105; // x27
  __int64 *v106; // x23
  const char *v107; // x27
  size_t v108; // x0
  size_t v109; // x23
  char *v110; // x20
  unsigned __int64 v111; // x24
  char *v112; // x23
  size_t v113; // x0
  size_t v114; // x27
  char *v115; // x20
  char v116; // w23
  __int64 v117; // x1
  void *v118; // x8
  __int128 v119; // q0
  __int64 v120; // x8
  __int128 v121; // q1
  __int128 v122; // q2
  __int128 v123; // q3
  __int128 v124; // q0
  __int128 v125; // q1
  void *v126; // x8
  _QWORD *v127; // x8
  unsigned __int64 v128; // x24
  _QWORD *v129; // x0
  unsigned __int64 v130; // x8
  __int64 v131; // x1
  __int64 v132; // x2
  rgbd::RGBDAngStrong *v133; // x9
  __int128 v134; // q0
  size_t v135; // x23
  const void *v136; // x24
  char *v137; // x20
  pthread_t *v138; // x23
  __int64 v139; // x8
  _QWORD *v140; // x0
  __int64 v141; // x10
  __int64 *v142; // x20
  unsigned __int64 v143; // x20
  _QWORD *v144; // x0
  unsigned __int64 v145; // x8
  __int64 v146; // x1
  __int64 v147; // x2
  _QWORD *v148; // x0
  const char *v149; // x21
  size_t v150; // x0
  size_t v151; // x19
  char *v152; // x22
  void **v153; // x20
  unsigned __int64 v154; // x20
  char *v155; // x19
  size_t v156; // x0
  size_t v157; // x21
  char *v158; // x22
  char v159; // w19
  unsigned __int64 v160; // x20
  void **v161; // x8
  void **v162; // x21
  char v163; // t1
  void *v164; // x0
  std::mutex *v166; // [xsp+18h] [xbp-558h]
  __int64 *v167; // [xsp+E0h] [xbp-490h]
  _QWORD **v168; // [xsp+E8h] [xbp-488h]
  int v169; // [xsp+10Ch] [xbp-464h]
  unsigned __int8 *v170; // [xsp+118h] [xbp-458h]
  rgbd::RGBDAngStrong *v171; // [xsp+120h] [xbp-450h]
  unsigned __int64 v172; // [xsp+130h] [xbp-440h] BYREF
  size_t v173; // [xsp+138h] [xbp-438h]
  void *v174; // [xsp+140h] [xbp-430h]
  int v175; // [xsp+148h] [xbp-428h] BYREF
  unsigned __int64 v176; // [xsp+150h] [xbp-420h] BYREF
  size_t v177; // [xsp+158h] [xbp-418h]
  void *v178; // [xsp+160h] [xbp-410h]
  unsigned __int64 v179; // [xsp+168h] [xbp-408h] BYREF
  size_t v180; // [xsp+170h] [xbp-400h]
  void *v181; // [xsp+178h] [xbp-3F8h]
  int v182; // [xsp+180h] [xbp-3F0h] BYREF
  unsigned __int64 v183; // [xsp+188h] [xbp-3E8h] BYREF
  size_t v184; // [xsp+190h] [xbp-3E0h]
  void *v185; // [xsp+198h] [xbp-3D8h]
  size_t n[2]; // [xsp+1A0h] [xbp-3D0h] BYREF
  void *src; // [xsp+1B0h] [xbp-3C0h]
  unsigned __int64 v188; // [xsp+1B8h] [xbp-3B8h] BYREF
  size_t v189; // [xsp+1C0h] [xbp-3B0h]
  void *v190; // [xsp+1C8h] [xbp-3A8h]
  int v191; // [xsp+1D0h] [xbp-3A0h] BYREF
  unsigned __int64 v192; // [xsp+1D8h] [xbp-398h] BYREF
  size_t v193; // [xsp+1E0h] [xbp-390h]
  void *v194; // [xsp+1E8h] [xbp-388h]
  __int128 v195; // [xsp+1F0h] [xbp-380h] BYREF
  void *v196; // [xsp+200h] [xbp-370h]
  __int64 v197; // [xsp+208h] [xbp-368h] BYREF
  void *v198; // [xsp+210h] [xbp-360h]
  __int64 v199; // [xsp+218h] [xbp-358h]
  char v200; // [xsp+238h] [xbp-338h]
  void *v201; // [xsp+248h] [xbp-328h]
  unsigned __int64 v202; // [xsp+250h] [xbp-320h] BYREF
  size_t v203; // [xsp+258h] [xbp-318h]
  void *v204; // [xsp+260h] [xbp-310h]
  int v205; // [xsp+268h] [xbp-308h] BYREF
  unsigned __int64 v206; // [xsp+270h] [xbp-300h] BYREF
  size_t v207; // [xsp+278h] [xbp-2F8h]
  void *v208; // [xsp+280h] [xbp-2F0h]
  unsigned __int64 v209; // [xsp+288h] [xbp-2E8h] BYREF
  size_t v210; // [xsp+290h] [xbp-2E0h]
  void *v211; // [xsp+298h] [xbp-2D8h]
  int v212; // [xsp+2A0h] [xbp-2D0h] BYREF
  unsigned __int64 v213; // [xsp+2A8h] [xbp-2C8h] BYREF
  size_t v214; // [xsp+2B0h] [xbp-2C0h]
  void *v215; // [xsp+2B8h] [xbp-2B8h]
  unsigned __int64 v216; // [xsp+2C0h] [xbp-2B0h] BYREF
  size_t v217; // [xsp+2C8h] [xbp-2A8h]
  void *v218; // [xsp+2D0h] [xbp-2A0h]
  int v219; // [xsp+2D8h] [xbp-298h] BYREF
  unsigned __int64 v220; // [xsp+2E0h] [xbp-290h] BYREF
  size_t v221; // [xsp+2E8h] [xbp-288h]
  void *v222; // [xsp+2F0h] [xbp-280h]
  unsigned __int64 v223; // [xsp+2F8h] [xbp-278h] BYREF
  size_t v224; // [xsp+300h] [xbp-270h]
  void *v225; // [xsp+308h] [xbp-268h]
  int v226; // [xsp+310h] [xbp-260h] BYREF
  unsigned __int64 v227; // [xsp+318h] [xbp-258h] BYREF
  size_t v228; // [xsp+320h] [xbp-250h]
  void *v229; // [xsp+328h] [xbp-248h]
  void *v230; // [xsp+330h] [xbp-240h] BYREF
  unsigned __int8 *v231; // [xsp+338h] [xbp-238h]
  __int64 v232; // [xsp+340h] [xbp-230h]
  __int64 v233; // [xsp+348h] [xbp-228h] BYREF
  _BYTE v234[60]; // [xsp+350h] [xbp-220h]
  __int128 v235; // [xsp+390h] [xbp-1E0h] BYREF
  void *v236; // [xsp+3A0h] [xbp-1D0h]
  __int128 v237; // [xsp+3A8h] [xbp-1C8h]
  int v238; // [xsp+3B8h] [xbp-1B8h]
  __int128 v239; // [xsp+3C0h] [xbp-1B0h] BYREF
  void *v240; // [xsp+3D0h] [xbp-1A0h]
  __int128 v241; // [xsp+3D8h] [xbp-198h] BYREF
  __int128 v242; // [xsp+3E8h] [xbp-188h]
  __int128 v243[2]; // [xsp+3F8h] [xbp-178h]
  __int128 v244; // [xsp+418h] [xbp-158h] BYREF
  void *v245; // [xsp+428h] [xbp-148h]

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v1 = (rgbd::RGBDAngStrong *)((char *)this + 960);
  v3 = (rgbd::RGBDAngStrong *)std::mutex::lock((rgbd::RGBDAngStrong *)((char *)this + 960));
  v171 = this;
  v4 = atomic_load((unsigned __int8 *)this + 1048);
  if ( (v4 & 1) != 0 )
  {
    v9 = 1;
    goto LABEL_318;
  }
  v166 = v1;
  rgbd::RGBDAngStrong::chmodDevices(v3);
  v226 = dword_33120;
  if ( (word_33128 & 1) != 0 )
    v5 = (const char *)qword_33138;
  else
    v5 = (char *)&word_33128 + 1;
  v231 = 0LL;
  v230 = 0LL;
  v232 = 0LL;
  v229 = 0LL;
  v228 = 0LL;
  v227 = 0LL;
  v6 = strlen(v5);
  if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v7 = v6;
  if ( v6 >= 0x17 )
  {
    v10 = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v8 = (char *)operator new(v10);
    v229 = v8;
    v227 = v10 | 1;
    v228 = v7;
    goto LABEL_11;
  }
  v8 = (char *)&v227 + 1;
  LOBYTE(v227) = 2 * v6;
  if ( v6 )
LABEL_11:
    memcpy(v8, v5, v7);
  v8[v7] = 0;
  if ( (g3::logLevel(&v226) & 1) == 0 )
  {
    v15 = 0;
    if ( (v227 & 1) == 0 )
      goto LABEL_24;
    goto LABEL_18;
  }
  v225 = 0LL;
  v224 = 0LL;
  v223 = 0LL;
  v11 = rgbd::ASTAG;
  v12 = strlen(rgbd::ASTAG);
  if ( v12 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v13 = v12;
  if ( v12 >= 0x17 )
  {
    v16 = (v12 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v14 = (char *)operator new(v16);
    v225 = v14;
    v223 = v16 | 1;
    v224 = v13;
    goto LABEL_21;
  }
  v14 = (char *)&v223 + 1;
  LOBYTE(v223) = 2 * v12;
  if ( v12 )
LABEL_21:
    memcpy(v14, v11, v13);
  v14[v13] = 0;
  v15 = g3::logTag(&v223);
  if ( (v223 & 1) != 0 )
  {
    operator delete(v225);
    if ( (v227 & 1) == 0 )
    {
LABEL_24:
      if ( (v15 & 1) == 0 )
        goto LABEL_26;
      goto LABEL_25;
    }
  }
  else if ( (v227 & 1) == 0 )
  {
    goto LABEL_24;
  }
LABEL_18:
  operator delete(v229);
  if ( (v15 & 1) == 0 )
    goto LABEL_26;
LABEL_25:
  LogCapture::LogCapture((LogCapture *)&v239, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
  std::__put_character_sequence<char,std::char_traits<char>>((_QWORD *)&v239 + 1, (__int64)"startCamera", 11LL);
  LogCapture::~LogCapture((LogCapture *)&v239);
LABEL_26:
  v4l2Capture::enumerateDevices(&v230);
  if ( (word_33128 & 1) != 0 )
    v17 = (const char *)qword_33138;
  else
    v17 = (char *)&word_33128 + 1;
  v219 = dword_33120;
  v222 = 0LL;
  v221 = 0LL;
  v220 = 0LL;
  v18 = strlen(v17);
  if ( v18 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v19 = v18;
  if ( v18 >= 0x17 )
  {
    v21 = (v18 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v20 = (char *)operator new(v21);
    v222 = v20;
    v220 = v21 | 1;
    v221 = v19;
    goto LABEL_34;
  }
  v20 = (char *)&v220 + 1;
  LOBYTE(v220) = 2 * v18;
  if ( v18 )
LABEL_34:
    memcpy(v20, v17, v19);
  v20[v19] = 0;
  if ( (g3::logLevel(&v219) & 1) == 0 )
  {
    v26 = 0;
    if ( (v220 & 1) == 0 )
      goto LABEL_49;
    goto LABEL_41;
  }
  v218 = 0LL;
  v217 = 0LL;
  v216 = 0LL;
  v22 = rgbd::ASTAG;
  v23 = strlen(rgbd::ASTAG);
  if ( v23 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v24 = v23;
  if ( v23 >= 0x17 )
  {
    v27 = (v23 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v25 = (char *)operator new(v27);
    v218 = v25;
    v216 = v27 | 1;
    v217 = v24;
    goto LABEL_46;
  }
  v25 = (char *)&v216 + 1;
  LOBYTE(v216) = 2 * v23;
  if ( v23 )
LABEL_46:
    memcpy(v25, v22, v24);
  v25[v24] = 0;
  v26 = g3::logTag(&v216);
  if ( (v216 & 1) == 0 )
  {
    if ( (v220 & 1) == 0 )
      goto LABEL_49;
LABEL_41:
    operator delete(v222);
    if ( (v26 & 1) != 0 )
      goto LABEL_50;
    goto LABEL_51;
  }
  operator delete(v218);
  if ( (v220 & 1) != 0 )
    goto LABEL_41;
LABEL_49:
  if ( (v26 & 1) != 0 )
  {
LABEL_50:
    LogCapture::LogCapture((LogCapture *)&v239, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
    v28 = std::__put_character_sequence<char,std::char_traits<char>>((_QWORD *)&v239 + 1, (__int64)"device size:", 12LL);
    std::ostream::operator<<(v28);
    LogCapture::~LogCapture((LogCapture *)&v239);
  }
LABEL_51:
  v29 = (unsigned __int8 *)v230;
  if ( v230 == v231 )
  {
    std::string::assign((__int64 *)v171 + 1, "not find angstrong device", 0x19uLL);
LABEL_288:
    v9 = 0;
    v153 = (void **)v230;
    if ( v230 )
      goto LABEL_309;
    goto LABEL_317;
  }
  v167 = (__int64 *)((char *)v171 + 8);
  v168 = (_QWORD **)((char *)v171 + 848);
  v169 = -1431655765 * ((unsigned __int64)(v231 - (_BYTE *)v230) >> 3);
  v30 = (_QWORD *)((char *)v171 + 1160);
  v170 = v231;
  do
  {
    if ( !std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::find<std::string>(
            v30,
            v29) )
    {
      v212 = dword_33180;
      if ( (word_33188 & 1) != 0 )
        v41 = (const char *)qword_33198;
      else
        v41 = (char *)&word_33188 + 1;
      v213 = 0LL;
      v214 = 0LL;
      v215 = 0LL;
      v42 = strlen(v41);
      if ( v42 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v43 = v42;
      if ( v42 >= 0x17 )
      {
        v51 = (v42 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v44 = (char *)operator new(v51);
        v215 = v44;
        v213 = v51 | 1;
        v214 = v43;
      }
      else
      {
        v44 = (char *)&v213 + 1;
        LOBYTE(v213) = 2 * v42;
        if ( !v42 )
        {
LABEL_97:
          v44[v43] = 0;
          if ( (g3::logLevel(&v212) & 1) == 0 )
          {
            v56 = 0;
            if ( (v213 & 1) == 0 )
              goto LABEL_269;
            goto LABEL_103;
          }
          v52 = rgbd::ASTAG;
          v211 = 0LL;
          v210 = 0LL;
          v209 = 0LL;
          v53 = strlen(rgbd::ASTAG);
          if ( v53 >= 0xFFFFFFFFFFFFFFF0LL )
            std::__basic_string_common<true>::__throw_length_error();
          v54 = v53;
          if ( v53 >= 0x17 )
          {
            v143 = (v53 + 16) & 0xFFFFFFFFFFFFFFF0LL;
            v55 = (char *)operator new(v143);
            v211 = v55;
            v209 = v143 | 1;
            v210 = v54;
          }
          else
          {
            v55 = (char *)&v209 + 1;
            LOBYTE(v209) = 2 * v53;
            if ( !v53 )
            {
LABEL_267:
              v55[v54] = 0;
              v56 = g3::logTag(&v209);
              if ( (v209 & 1) != 0 )
              {
                operator delete(v211);
                if ( (v213 & 1) == 0 )
                  goto LABEL_269;
              }
              else if ( (v213 & 1) == 0 )
              {
LABEL_269:
                if ( (v56 & 1) != 0 )
                {
LABEL_270:
                  LogCapture::LogCapture((LogCapture *)&v239, rgbd::ASTAG, (const LEVELS *)&dword_33180, "", 6, 0LL);
                  v144 = std::__put_character_sequence<char,std::char_traits<char>>(
                           (_QWORD *)&v239 + 1,
                           (__int64)"angstong ",
                           9LL);
                  v145 = *v29;
                  if ( (v145 & 1) != 0 )
                    v146 = *((_QWORD *)v29 + 2);
                  else
                    v146 = (__int64)(v29 + 1);
                  if ( (v145 & 1) != 0 )
                    v147 = *((_QWORD *)v29 + 1);
                  else
                    v147 = v145 >> 1;
                  v148 = std::__put_character_sequence<char,std::char_traits<char>>(v144, v146, v147);
                  std::__put_character_sequence<char,std::char_traits<char>>(v148, (__int64)" not match.", 11LL);
                  LogCapture::~LogCapture((LogCapture *)&v239);
                }
LABEL_277:
                v82 = v170;
                --v169;
                goto LABEL_278;
              }
LABEL_103:
              operator delete(v215);
              if ( (v56 & 1) != 0 )
                goto LABEL_270;
              goto LABEL_277;
            }
          }
          memcpy(v55, v52, v54);
          goto LABEL_267;
        }
      }
      memcpy(v44, v41, v43);
      goto LABEL_97;
    }
    v205 = dword_33120;
    if ( (word_33128 & 1) != 0 )
      v37 = (const char *)qword_33138;
    else
      v37 = (char *)&word_33128 + 1;
    v206 = 0LL;
    v207 = 0LL;
    v208 = 0LL;
    v38 = strlen(v37);
    if ( v38 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v39 = v38;
    if ( v38 >= 0x17 )
    {
      v45 = (v38 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v40 = (char *)operator new(v45);
      v208 = v40;
      v206 = v45 | 1;
      v207 = v39;
LABEL_86:
      memcpy(v40, v37, v39);
      goto LABEL_87;
    }
    v40 = (char *)&v206 + 1;
    LOBYTE(v206) = 2 * v38;
    if ( v38 )
      goto LABEL_86;
LABEL_87:
    v40[v39] = 0;
    if ( (g3::logLevel(&v205) & 1) == 0 )
    {
      v50 = 0;
      if ( (v206 & 1) == 0 )
        goto LABEL_109;
      goto LABEL_93;
    }
    v46 = rgbd::ASTAG;
    v204 = 0LL;
    v203 = 0LL;
    v202 = 0LL;
    v47 = strlen(rgbd::ASTAG);
    if ( v47 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v48 = v47;
    if ( v47 >= 0x17 )
    {
      v57 = (v47 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v49 = (char *)operator new(v57);
      v204 = v49;
      v202 = v57 | 1;
      v203 = v48;
LABEL_106:
      memcpy(v49, v46, v48);
      goto LABEL_107;
    }
    v49 = (char *)&v202 + 1;
    LOBYTE(v202) = 2 * v47;
    if ( v47 )
      goto LABEL_106;
LABEL_107:
    v49[v48] = 0;
    v50 = g3::logTag(&v202);
    if ( (v202 & 1) != 0 )
    {
      operator delete(v204);
      if ( (v206 & 1) == 0 )
      {
LABEL_109:
        if ( (v50 & 1) == 0 )
          goto LABEL_117;
        goto LABEL_110;
      }
    }
    else if ( (v206 & 1) == 0 )
    {
      goto LABEL_109;
    }
LABEL_93:
    operator delete(v208);
    if ( (v50 & 1) == 0 )
      goto LABEL_117;
LABEL_110:
    LogCapture::LogCapture((LogCapture *)&v239, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
    v58 = std::__put_character_sequence<char,std::char_traits<char>>(
            (_QWORD *)&v239 + 1,
            (__int64)"angstrong device :",
            18LL);
    v59 = *v29;
    if ( (v59 & 1) != 0 )
      v60 = *((_QWORD *)v29 + 2);
    else
      v60 = (__int64)(v29 + 1);
    if ( (v59 & 1) != 0 )
      v61 = *((_QWORD *)v29 + 1);
    else
      v61 = v59 >> 1;
    std::__put_character_sequence<char,std::char_traits<char>>(v58, v60, v61);
    LogCapture::~LogCapture((LogCapture *)&v239);
LABEL_117:
    v196 = 0LL;
    v195 = 0uLL;
    if ( (*v29 & 1) == 0 )
    {
      v62 = *(_OWORD *)v29;
      v196 = (void *)*((_QWORD *)v29 + 2);
      v195 = v62;
      goto LABEL_128;
    }
    v63 = *((_QWORD *)v29 + 1);
    if ( v63 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v64 = (const void *)*((_QWORD *)v29 + 2);
    if ( v63 >= 0x17 )
    {
      v65 = (char *)operator new((v63 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      *((_QWORD *)&v195 + 1) = v63;
      v196 = v65;
      *(_QWORD *)&v195 = (v63 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v65 = (char *)&v195 + 1;
      LOBYTE(v195) = 2 * v63;
      if ( !v63 )
        goto LABEL_127;
    }
    memcpy(v65, v64, v63);
LABEL_127:
    v65[v63] = 0;
LABEL_128:
    V4L2DeviceParameters::V4L2DeviceParameters(&v197, 0, &v195);
    if ( (v195 & 1) != 0 )
      operator delete(v196);
    v66 = v4l2Capture::open(&v197);
    if ( v66 )
    {
      v240 = 0LL;
      v239 = 0uLL;
      if ( (*v29 & 1) == 0 )
      {
        v67 = *(_OWORD *)v29;
        v240 = (void *)*((_QWORD *)v29 + 2);
        v239 = v67;
        goto LABEL_168;
      }
      v75 = *((_QWORD *)v29 + 1);
      if ( v75 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v76 = (const void *)*((_QWORD *)v29 + 2);
      if ( v75 >= 0x17 )
      {
        v240 = (void *)operator new((v75 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        *(_QWORD *)&v239 = (v75 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
        *((_QWORD *)&v239 + 1) = v75;
        v77 = (char *)v240;
      }
      else
      {
        v77 = (char *)&v239 + 1;
        LOBYTE(v239) = 2 * v75;
        if ( !v75 )
          goto LABEL_167;
      }
      memcpy(v77, v76, v75);
LABEL_167:
      v77[v75] = 0;
LABEL_168:
      *(_QWORD *)&v241 = v66;
      std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::pair<std::string,v4l2Capture *>>(
        (__int64)v171 + 1240,
        (unsigned __int8 *)&v239,
        &v239);
      if ( (v239 & 1) != 0 )
        operator delete(v240);
      v237 = 0uLL;
      v238 = 0;
      n[1] = 0LL;
      src = 0LL;
      n[0] = 0LL;
      if ( (*v29 & 1) == 0 )
      {
        v88 = *(_OWORD *)v29;
        src = (void *)*((_QWORD *)v29 + 2);
        *(_OWORD *)n = v88;
        goto LABEL_179;
      }
      v89 = *((_QWORD *)v29 + 1);
      if ( v89 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v90 = (const void *)*((_QWORD *)v29 + 2);
      if ( v89 >= 0x17 )
      {
        v91 = (char *)operator new((v89 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        n[1] = v89;
        src = v91;
        n[0] = (v89 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
      }
      else
      {
        v91 = (char *)n + 1;
        LOBYTE(n[0]) = 2 * v89;
        if ( !v89 )
          goto LABEL_178;
      }
      memcpy(v91, v90, v89);
LABEL_178:
      v91[v89] = 0;
LABEL_179:
      v92 = *((_QWORD *)v171 + 115);
      *(_DWORD *)&v234[8] = 981668463;
      *(_OWORD *)&v234[20] = xmmword_1D260;
      *(_QWORD *)&v234[12] = v92;
      *(_DWORD *)&v234[36] = 1;
      *(_DWORD *)&v234[56] = v238;
      *(_OWORD *)&v234[40] = v237;
      v236 = 0LL;
      v235 = 0uLL;
      if ( (n[0] & 1) == 0 )
      {
        v236 = src;
        v235 = *(_OWORD *)n;
        goto LABEL_188;
      }
      v93 = n[1];
      if ( n[1] >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v94 = src;
      if ( n[1] >= 0x17 )
      {
        v96 = (n[1] + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v95 = (char *)operator new(v96);
        v236 = v95;
        *(_QWORD *)&v235 = v96 | 1;
        *((_QWORD *)&v235 + 1) = v93;
      }
      else
      {
        v95 = (char *)&v235 + 1;
        LOBYTE(v235) = 2 * LOBYTE(n[1]);
        if ( !n[1] )
          goto LABEL_187;
      }
      memcpy(v95, v94, v93);
LABEL_187:
      v97 = src;
      v95[v93] = 0;
      operator delete(v97);
LABEL_188:
      v240 = 0LL;
      v239 = 0uLL;
      if ( (*v29 & 1) == 0 )
      {
        v98 = *(_OWORD *)v29;
        v240 = (void *)*((_QWORD *)v29 + 2);
        v239 = v98;
        goto LABEL_197;
      }
      v99 = *((_QWORD *)v29 + 1);
      if ( v99 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v100 = (const void *)*((_QWORD *)v29 + 2);
      if ( v99 >= 0x17 )
      {
        v101 = (char *)operator new((v99 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        v240 = v101;
        *(_QWORD *)&v239 = (v99 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
        *((_QWORD *)&v239 + 1) = v99;
      }
      else
      {
        v101 = (char *)&v239 + 1;
        LOBYTE(v239) = 2 * v99;
        if ( !v99 )
          goto LABEL_196;
      }
      memcpy(v101, v100, v99);
LABEL_196:
      v101[v99] = 0;
LABEL_197:
      *(__int128 *)((char *)v243 + 12) = *(_OWORD *)&v234[44];
      v242 = *(_OWORD *)&v234[16];
      v243[0] = *(_OWORD *)&v234[32];
      v241 = *(_OWORD *)v234;
      v245 = 0LL;
      v244 = 0uLL;
      if ( (v235 & 1) == 0 )
      {
        v30 = (_QWORD *)((char *)v171 + 1160);
        v245 = v236;
        v244 = v235;
        goto LABEL_206;
      }
      v102 = *((_QWORD *)&v235 + 1);
      v30 = (_QWORD *)((char *)v171 + 1160);
      if ( *((_QWORD *)&v235 + 1) >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v103 = v236;
      if ( *((_QWORD *)&v235 + 1) >= 0x17uLL )
      {
        v105 = (*((_QWORD *)&v235 + 1) + 16LL) & 0xFFFFFFFFFFFFFFF0LL;
        v104 = (char *)operator new(v105);
        v245 = v104;
        *(_QWORD *)&v244 = v105 | 1;
        *((_QWORD *)&v244 + 1) = v102;
      }
      else
      {
        v104 = (char *)&v244 + 1;
        LOBYTE(v244) = 2 * BYTE8(v235);
        if ( !*((_QWORD *)&v235 + 1) )
          goto LABEL_205;
      }
      memcpy(v104, v103, v102);
LABEL_205:
      v104[v102] = 0;
LABEL_206:
      v106 = std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::__find_equal<std::string>(
               (__int64)v168,
               &v233,
               (unsigned __int8 *)&v239);
      if ( *v106 )
      {
        if ( (v244 & 1) == 0 )
          goto LABEL_209;
      }
      else
      {
        v117 = operator new(0x90uLL);
        v118 = v240;
        v119 = v239;
        v240 = 0LL;
        v239 = 0uLL;
        *(_QWORD *)(v117 + 48) = v118;
        v120 = v233;
        v121 = *(__int128 *)((char *)v243 + 12);
        v122 = v241;
        v123 = v242;
        *(_OWORD *)(v117 + 32) = v119;
        v124 = v243[0];
        *(_OWORD *)(v117 + 100) = v121;
        v125 = v244;
        *(_QWORD *)(v117 + 16) = v120;
        v126 = v245;
        v245 = 0LL;
        v244 = 0uLL;
        *(_QWORD *)v117 = 0LL;
        *(_QWORD *)(v117 + 8) = 0LL;
        *(_OWORD *)(v117 + 88) = v124;
        *(_OWORD *)(v117 + 72) = v123;
        *(_OWORD *)(v117 + 56) = v122;
        *(_QWORD *)(v117 + 136) = v126;
        *(_OWORD *)(v117 + 120) = v125;
        *v106 = v117;
        v127 = (_QWORD *)**v168;
        if ( v127 )
        {
          *v168 = v127;
          v117 = *v106;
        }
        std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(*((__int64 **)v171 + 107), (__int64 *)v117);
        ++*((_QWORD *)v171 + 108);
        if ( (v244 & 1) == 0 )
        {
LABEL_209:
          if ( (v239 & 1) != 0 )
            operator delete(v240);
          v182 = dword_33120;
          if ( (word_33128 & 1) != 0 )
            v107 = (const char *)qword_33138;
          else
            v107 = (char *)&word_33128 + 1;
          v183 = 0LL;
          v184 = 0LL;
          v185 = 0LL;
          v108 = strlen(v107);
          if ( v108 >= 0xFFFFFFFFFFFFFFF0LL )
            std::__basic_string_common<true>::__throw_length_error();
          v109 = v108;
          if ( v108 >= 0x17 )
          {
            v111 = (v108 + 16) & 0xFFFFFFFFFFFFFFF0LL;
            v110 = (char *)operator new(v111);
            v184 = v109;
            v185 = v110;
            v183 = v111 | 1;
          }
          else
          {
            v110 = (char *)&v183 + 1;
            LOBYTE(v183) = 2 * v108;
            if ( !v108 )
            {
LABEL_220:
              v110[v109] = 0;
              if ( (g3::logLevel(&v182) & 1) == 0 )
              {
                v116 = 0;
                if ( (v183 & 1) == 0 )
                  goto LABEL_236;
                goto LABEL_226;
              }
              v112 = rgbd::ASTAG;
              v180 = 0LL;
              v181 = 0LL;
              v179 = 0LL;
              v113 = strlen(rgbd::ASTAG);
              if ( v113 >= 0xFFFFFFFFFFFFFFF0LL )
                std::__basic_string_common<true>::__throw_length_error();
              v114 = v113;
              if ( v113 >= 0x17 )
              {
                v128 = (v113 + 16) & 0xFFFFFFFFFFFFFFF0LL;
                v115 = (char *)operator new(v128);
                v180 = v114;
                v181 = v115;
                v179 = v128 | 1;
              }
              else
              {
                v115 = (char *)&v179 + 1;
                LOBYTE(v179) = 2 * v113;
                if ( !v113 )
                {
LABEL_234:
                  v115[v114] = 0;
                  v116 = g3::logTag(&v179);
                  if ( (v179 & 1) != 0 )
                  {
                    operator delete(v181);
                    if ( (v183 & 1) == 0 )
                    {
LABEL_236:
                      if ( (v116 & 1) == 0 )
                        goto LABEL_244;
                      goto LABEL_237;
                    }
                  }
                  else if ( (v183 & 1) == 0 )
                  {
                    goto LABEL_236;
                  }
LABEL_226:
                  operator delete(v185);
                  if ( (v116 & 1) == 0 )
                    goto LABEL_244;
LABEL_237:
                  LogCapture::LogCapture((LogCapture *)&v239, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
                  v129 = std::__put_character_sequence<char,std::char_traits<char>>(
                           (_QWORD *)&v239 + 1,
                           (__int64)"Open device success,serial_num:",
                           31LL);
                  v130 = *v29;
                  if ( (v130 & 1) != 0 )
                    v131 = *((_QWORD *)v29 + 2);
                  else
                    v131 = (__int64)(v29 + 1);
                  if ( (v130 & 1) != 0 )
                    v132 = *((_QWORD *)v29 + 1);
                  else
                    v132 = v130 >> 1;
                  std::__put_character_sequence<char,std::char_traits<char>>(v129, v131, v132);
                  LogCapture::~LogCapture((LogCapture *)&v239);
LABEL_244:
                  v133 = v171;
                  atomic_store(1u, (unsigned __int8 *)v171 + 1048);
                  v240 = v133;
                  v239 = (unsigned __int64)rgbd::RGBDAngStrong::Polling;
                  *(_QWORD *)&v242 = 0LL;
                  v241 = 0uLL;
                  if ( (*v29 & 1) == 0 )
                  {
                    v134 = *(_OWORD *)v29;
                    *(_QWORD *)&v242 = *((_QWORD *)v29 + 2);
                    v241 = v134;
LABEL_255:
                    v138 = (pthread_t *)operator new(8uLL);
                    sub_17EFC(v138, &v239);
                    if ( (v241 & 1) != 0 )
                      operator delete((void *)v242);
                    std::thread::detach((std::thread *)v138);
                    std::thread::~thread((std::thread *)v138);
                    operator delete(v138);
                    if ( (v235 & 1) != 0 )
                      operator delete(v236);
                    v82 = v170;
                    if ( (v200 & 1) != 0 )
                      operator delete(v201);
                    if ( v199 )
                    {
                      v139 = v197;
                      v140 = v198;
                      v141 = *(_QWORD *)v198;
                      v86 = v198 == &v197;
                      *(_QWORD *)(v141 + 8) = *(_QWORD *)(v197 + 8);
                      **(_QWORD **)(v139 + 8) = v141;
                      v199 = 0LL;
                      if ( !v86 )
                      {
                        do
                        {
                          v142 = (__int64 *)v140[1];
                          operator delete(v140);
                          v140 = v142;
                        }
                        while ( v142 != &v197 );
                      }
                    }
                    goto LABEL_278;
                  }
                  v135 = *((_QWORD *)v29 + 1);
                  if ( v135 >= 0xFFFFFFFFFFFFFFF0LL )
                    std::__basic_string_common<true>::__throw_length_error();
                  v136 = (const void *)*((_QWORD *)v29 + 2);
                  if ( v135 >= 0x17 )
                  {
                    v137 = (char *)operator new((v135 + 16) & 0xFFFFFFFFFFFFFFF0LL);
                    *(_QWORD *)&v242 = v137;
                    *(_QWORD *)&v241 = (v135 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
                    *((_QWORD *)&v241 + 1) = v135;
                  }
                  else
                  {
                    v137 = (char *)&v241 + 1;
                    LOBYTE(v241) = 2 * v135;
                    if ( !v135 )
                      goto LABEL_254;
                  }
                  memcpy(v137, v136, v135);
LABEL_254:
                  v137[v135] = 0;
                  goto LABEL_255;
                }
              }
              memcpy(v115, v112, v114);
              goto LABEL_234;
            }
          }
          memcpy(v110, v107, v109);
          goto LABEL_220;
        }
      }
      operator delete(v245);
      goto LABEL_209;
    }
    std::string::assign(v167, "open angstrong device error : ", 0x1EuLL);
    v68 = *v29;
    if ( (v68 & 1) != 0 )
      v69 = (void *)*((_QWORD *)v29 + 2);
    else
      v69 = v29 + 1;
    if ( (v68 & 1) != 0 )
      v70 = *((_QWORD *)v29 + 1);
    else
      v70 = v68 >> 1;
    std::string::append(v167, v69, v70);
    v191 = dword_331A0;
    if ( (word_331A8 & 1) != 0 )
      v71 = (const char *)qword_331B8;
    else
      v71 = (char *)&word_331A8 + 1;
    v192 = 0LL;
    v193 = 0LL;
    v194 = 0LL;
    v72 = strlen(v71);
    if ( v72 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v73 = v72;
    if ( v72 >= 0x17 )
    {
      v78 = (v72 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v74 = (char *)operator new(v78);
      v193 = v73;
      v194 = v74;
      v192 = v78 | 1;
LABEL_151:
      memcpy(v74, v71, v73);
      goto LABEL_152;
    }
    v74 = (char *)&v192 + 1;
    LOBYTE(v192) = 2 * v72;
    if ( v72 )
      goto LABEL_151;
LABEL_152:
    v74[v73] = 0;
    if ( (g3::logLevel(&v191) & 1) != 0 )
    {
      v79 = rgbd::ASTAG;
      v189 = 0LL;
      v190 = 0LL;
      v188 = 0LL;
      v80 = strlen(rgbd::ASTAG);
      if ( v80 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v81 = v80;
      if ( v80 >= 0x17 )
      {
        v31 = (v80 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v32 = (char *)operator new(v31);
        v189 = v81;
        v190 = v32;
        v188 = v31 | 1;
      }
      else
      {
        v32 = (char *)&v188 + 1;
        LOBYTE(v188) = 2 * v80;
        if ( !v80 )
        {
LABEL_57:
          v32[v81] = 0;
          v33 = g3::logTag(&v188);
          if ( (v188 & 1) != 0 )
          {
            operator delete(v190);
            if ( (v192 & 1) == 0 )
              goto LABEL_59;
          }
          else if ( (v192 & 1) == 0 )
          {
            goto LABEL_59;
          }
          goto LABEL_158;
        }
      }
      memcpy(v32, v79, v81);
      goto LABEL_57;
    }
    v33 = 0;
    if ( (v192 & 1) == 0 )
    {
LABEL_59:
      if ( (v33 & 1) == 0 )
        goto LABEL_159;
      goto LABEL_60;
    }
LABEL_158:
    operator delete(v194);
    if ( (v33 & 1) == 0 )
    {
LABEL_159:
      if ( (v200 & 1) != 0 )
        goto LABEL_160;
      goto LABEL_161;
    }
LABEL_60:
    LogCapture::LogCapture((LogCapture *)&v239, rgbd::ASTAG, (const LEVELS *)&dword_331A0, "", 6, 0LL);
    v34 = *((unsigned __int8 *)v171 + 8);
    if ( (v34 & 1) != 0 )
      v35 = *((_QWORD *)v171 + 2);
    else
      v35 = v34 >> 1;
    if ( (v34 & 1) != 0 )
      v36 = *((_QWORD *)v171 + 3);
    else
      v36 = (__int64)v171 + 9;
    std::__put_character_sequence<char,std::char_traits<char>>((_QWORD *)&v239 + 1, v36, v35);
    LogCapture::~LogCapture((LogCapture *)&v239);
    if ( (v200 & 1) != 0 )
LABEL_160:
      operator delete(v201);
LABEL_161:
    v82 = v170;
    if ( v199 )
    {
      v83 = v197;
      v84 = v198;
      v85 = *(_QWORD *)v198;
      v86 = v198 == &v197;
      *(_QWORD *)(v85 + 8) = *(_QWORD *)(v197 + 8);
      **(_QWORD **)(v83 + 8) = v85;
      v199 = 0LL;
      if ( !v86 )
      {
        do
        {
          v87 = (__int64 *)v84[1];
          operator delete(v84);
          v84 = v87;
        }
        while ( v87 != &v197 );
      }
    }
LABEL_278:
    v29 += 24;
  }
  while ( v29 != v82 );
  if ( !v169 )
    goto LABEL_288;
  if ( (word_33128 & 1) != 0 )
    v149 = (const char *)qword_33138;
  else
    v149 = (char *)&word_33128 + 1;
  v175 = dword_33120;
  v177 = 0LL;
  v178 = 0LL;
  v176 = 0LL;
  v150 = strlen(v149);
  if ( v150 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v151 = v150;
  if ( v150 >= 0x17 )
  {
    v154 = (v150 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v152 = (char *)operator new(v154);
    v177 = v151;
    v178 = v152;
    v176 = v154 | 1;
    goto LABEL_293;
  }
  v152 = (char *)&v176 + 1;
  LOBYTE(v176) = 2 * v150;
  if ( v150 )
LABEL_293:
    memcpy(v152, v149, v151);
  v152[v151] = 0;
  if ( (g3::logLevel(&v175) & 1) == 0 )
  {
    v159 = 0;
    if ( (v176 & 1) == 0 )
      goto LABEL_306;
    goto LABEL_300;
  }
  v173 = 0LL;
  v174 = 0LL;
  v172 = 0LL;
  v155 = rgbd::ASTAG;
  v156 = strlen(rgbd::ASTAG);
  if ( v156 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v157 = v156;
  if ( v156 >= 0x17 )
  {
    v160 = (v156 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v158 = (char *)operator new(v160);
    v173 = v157;
    v174 = v158;
    v172 = v160 | 1;
    goto LABEL_303;
  }
  v158 = (char *)&v172 + 1;
  LOBYTE(v172) = 2 * v156;
  if ( v156 )
LABEL_303:
    memcpy(v158, v155, v157);
  v158[v157] = 0;
  v159 = g3::logTag(&v172);
  if ( (v172 & 1) != 0 )
  {
    operator delete(v174);
    if ( (v176 & 1) != 0 )
      goto LABEL_300;
LABEL_306:
    if ( (v159 & 1) != 0 )
      goto LABEL_307;
  }
  else
  {
    if ( (v176 & 1) == 0 )
      goto LABEL_306;
LABEL_300:
    operator delete(v178);
    if ( (v159 & 1) != 0 )
    {
LABEL_307:
      LogCapture::LogCapture((LogCapture *)&v239, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
      std::__put_character_sequence<char,std::char_traits<char>>(
        (_QWORD *)&v239 + 1,
        (__int64)"angstrong open success ",
        23LL);
      LogCapture::~LogCapture((LogCapture *)&v239);
    }
  }
  v9 = 1;
  atomic_store(1u, (unsigned __int8 *)v171 + 1048);
  v153 = (void **)v230;
  if ( v230 )
  {
LABEL_309:
    v161 = (void **)v231;
    if ( v231 == (unsigned __int8 *)v153 )
    {
      v164 = v153;
    }
    else
    {
      v162 = (void **)v231;
      do
      {
        v163 = *((_BYTE *)v162 - 24);
        v162 -= 3;
        if ( (v163 & 1) != 0 )
          operator delete(*(v161 - 1));
        v161 = v162;
      }
      while ( v153 != v162 );
      v164 = v230;
    }
    v231 = (unsigned __int8 *)v153;
    operator delete(v164);
  }
LABEL_317:
  v1 = v166;
LABEL_318:
  std::mutex::unlock(v1);
  return v9;
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// D820: using guessed type __int64 __fastcall v4l2Capture::open(_QWORD);
// DA80: using guessed type __int64 __fastcall v4l2Capture::enumerateDevices(_QWORD);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 1D260: using guessed type __int128 xmmword_1D260;
// 33008: using guessed type char *rgbd::ASTAG;
// 33120: using guessed type int dword_33120;
// 33128: using guessed type __int16 word_33128;
// 33138: using guessed type __int64 qword_33138;
// 33180: using guessed type int dword_33180;
// 33188: using guessed type __int16 word_33188;
// 33198: using guessed type __int64 qword_33198;
// 331A0: using guessed type int dword_331A0;
// 331A8: using guessed type __int16 word_331A8;
// 331B8: using guessed type __int64 qword_331B8;
// 1006C: using guessed type _OWORD anonymous_0[2];

//----- (0000000000011B5C) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 48LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// D680: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 11B5C: using guessed type char var_60[8];

//----- (0000000000011D28) ----------------------------------------------------
__int64 __fastcall V4L2DeviceParameters::V4L2DeviceParameters(__int64 *a1, int a2, __int128 *a3)
{
  _BYTE *v3; // x20
  __int128 v5; // q0
  size_t v6; // x21
  const void *v7; // x22
  void *v8; // x23
  __int64 result; // x0
  __int64 v10; // x8
  __int64 v11; // x8

  *a1 = (__int64)a1;
  a1[1] = (__int64)a1;
  a1[2] = 0LL;
  *((_DWORD *)a1 + 10) = a2;
  *(_OWORD *)(a1 + 3) = xmmword_1D270;
  a1[6] = 0LL;
  v3 = a1 + 6;
  a1[7] = 0LL;
  a1[8] = 0LL;
  if ( (*(_BYTE *)a3 & 1) != 0 )
  {
    v6 = *((_QWORD *)a3 + 1);
    if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v7 = (const void *)*((_QWORD *)a3 + 2);
    if ( v6 >= 0x17 )
    {
      v8 = (void *)operator new((v6 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      a1[7] = v6;
      a1[8] = (__int64)v8;
      a1[6] = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      *v3 = 2 * v6;
      v8 = (char *)a1 + 49;
      if ( !v6 )
        goto LABEL_9;
    }
    memcpy(v8, v7, v6);
LABEL_9:
    *((_BYTE *)v8 + v6) = 0;
    goto LABEL_10;
  }
  v5 = *a3;
  a1[8] = *((_QWORD *)a3 + 2);
  *(_OWORD *)v3 = v5;
LABEL_10:
  *((_DWORD *)a1 + 11) = 2;
  result = operator new(0x18uLL);
  *(_DWORD *)(result + 16) = 1448695129;
  v10 = *a1;
  *(_QWORD *)result = *a1;
  *(_QWORD *)(result + 8) = a1;
  *(_QWORD *)(v10 + 8) = result;
  v11 = a1[2];
  *a1 = result;
  a1[2] = v11 + 1;
  return result;
}
// 1D270: using guessed type __int128 xmmword_1D270;

//----- (0000000000011EA0) ----------------------------------------------------
void __fastcall rgbd::RGBDAngStrong::Polling(__int64 a1, unsigned __int8 *a2)
{
  unsigned __int8 v3; // w8
  __int64 v5; // x21
  __int64 v6; // x22
  _QWORD *v7; // x0
  _QWORD *v8; // x24
  _QWORD *v9; // x0
  char v10; // w25
  _QWORD *v11; // x0
  __int128 v12; // q0
  size_t v13; // x25
  const void *v14; // x27
  char *v15; // x28
  const char *v16; // x27
  size_t v17; // x0
  size_t v18; // x25
  char *v19; // x28
  unsigned __int64 v20; // x24
  char *v21; // x25
  size_t v22; // x0
  size_t v23; // x27
  char *v24; // x28
  char v25; // w25
  unsigned __int64 v26; // x24
  _QWORD *v27; // x0
  unsigned __int64 v28; // x8
  __int64 v29; // x2
  __int64 v30; // x1
  unsigned __int8 v31; // w8
  const char *v32; // x21
  size_t v33; // x0
  size_t v34; // x20
  char *v35; // x22
  unsigned __int64 v36; // x23
  char *v37; // x20
  size_t v38; // x0
  size_t v39; // x21
  char *v40; // x22
  char v41; // w20
  unsigned __int64 v42; // x23
  unsigned __int64 v43; // x8
  __int64 v44; // x1
  __int64 v45; // x2
  _QWORD *v46; // x0
  unsigned __int8 *v47; // [xsp+18h] [xbp-268h]
  unsigned __int64 v48; // [xsp+40h] [xbp-240h] BYREF
  size_t v49; // [xsp+48h] [xbp-238h]
  void *v50; // [xsp+50h] [xbp-230h]
  int v51; // [xsp+58h] [xbp-228h] BYREF
  unsigned __int64 v52; // [xsp+60h] [xbp-220h] BYREF
  size_t v53; // [xsp+68h] [xbp-218h]
  void *v54; // [xsp+70h] [xbp-210h]
  unsigned __int64 v55; // [xsp+78h] [xbp-208h] BYREF
  size_t v56; // [xsp+80h] [xbp-200h]
  void *v57; // [xsp+88h] [xbp-1F8h]
  int v58; // [xsp+90h] [xbp-1F0h] BYREF
  unsigned __int64 v59; // [xsp+98h] [xbp-1E8h] BYREF
  size_t v60; // [xsp+A0h] [xbp-1E0h]
  void *v61; // [xsp+A8h] [xbp-1D8h]
  __int128 v62; // [xsp+B0h] [xbp-1D0h] BYREF
  void *v63; // [xsp+C0h] [xbp-1C0h]
  __int128 *v64; // [xsp+D0h] [xbp-1B0h] BYREF
  __int64 v65; // [xsp+D8h] [xbp-1A8h] BYREF
  void *v66[42]; // [xsp+E0h] [xbp-1A0h] BYREF

  v66[40] = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = atomic_load((unsigned __int8 *)(a1 + 1048));
  if ( (v3 & 1) != 0 )
  {
    v47 = a2 + 1;
    v5 = a1 + 1160;
    v6 = a1 + 32;
    do
    {
      v65 = (__int64)a2;
      v7 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
             v5,
             a2,
             (__int64)&unk_1D9F4,
             (__int128 **)&v65);
      if ( (rgbd::RGBDParam::destoryOldMemory((rgbd::RGBDParam *)(v7 + 6)) & 1) == 0 )
        goto LABEL_50;
      v65 = (__int64)a2;
      v8 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
             v5,
             a2,
             (__int64)&unk_1D9F4,
             (__int128 **)&v65)
         + 6;
      v64 = (__int128 *)a2;
      v9 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
             v5,
             a2,
             (__int64)&unk_1D9F4,
             &v64);
      rgbd::RGBDParam::getName(&v65, (rgbd::RGBDParam *)(v9 + 6));
      v10 = rgbd::RGBDParam::createMemory(v8, &v65, v6);
      if ( (v65 & 1) != 0 )
        operator delete(v66[1]);
      if ( (v10 & 1) == 0 )
        goto LABEL_50;
      v65 = (__int64)a2;
      v11 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
              v5,
              a2,
              (__int64)&unk_1D9F4,
              (__int128 **)&v65);
      if ( !rgbd::RGBDParam::getAshmenAddress((rgbd::RGBDParam *)(v11 + 6)) )
        goto LABEL_50;
      v63 = 0LL;
      v62 = 0uLL;
      if ( (*a2 & 1) == 0 )
      {
        v12 = *(_OWORD *)a2;
        v63 = (void *)*((_QWORD *)a2 + 2);
        v62 = v12;
        goto LABEL_17;
      }
      v13 = *((_QWORD *)a2 + 1);
      if ( v13 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v14 = (const void *)*((_QWORD *)a2 + 2);
      if ( v13 >= 0x17 )
      {
        v15 = (char *)operator new((v13 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        *((_QWORD *)&v62 + 1) = v13;
        v63 = v15;
        *(_QWORD *)&v62 = (v13 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
      }
      else
      {
        v15 = (char *)&v62 + 1;
        LOBYTE(v62) = 2 * v13;
        if ( !v13 )
          goto LABEL_16;
      }
      memcpy(v15, v14, v13);
LABEL_16:
      v15[v13] = 0;
LABEL_17:
      rgbd::RGBDAngStrong::waitForFrame(a1, (unsigned __int8 *)&v62);
      if ( (v62 & 1) != 0 )
        operator delete(v63);
      v58 = dword_33120;
      if ( (word_33128 & 1) != 0 )
        v16 = (const char *)qword_33138;
      else
        v16 = (char *)&word_33128 + 1;
      v59 = 0LL;
      v60 = 0LL;
      v61 = 0LL;
      v17 = strlen(v16);
      if ( v17 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v18 = v17;
      if ( v17 >= 0x17 )
      {
        v20 = (v17 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v19 = (char *)operator new(v20);
        v60 = v18;
        v61 = v19;
        v59 = v20 | 1;
LABEL_27:
        memcpy(v19, v16, v18);
        goto LABEL_28;
      }
      v19 = (char *)&v59 + 1;
      LOBYTE(v59) = 2 * v17;
      if ( v17 )
        goto LABEL_27;
LABEL_28:
      v19[v18] = 0;
      if ( (g3::logLevel(&v58) & 1) == 0 )
      {
        v25 = 0;
        if ( (v59 & 1) == 0 )
          goto LABEL_39;
        goto LABEL_42;
      }
      v56 = 0LL;
      v57 = 0LL;
      v55 = 0LL;
      v21 = rgbd::ASTAG;
      v22 = strlen(rgbd::ASTAG);
      if ( v22 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v23 = v22;
      if ( v22 >= 0x17 )
      {
        v26 = (v22 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v24 = (char *)operator new(v26);
        v56 = v23;
        v57 = v24;
        v55 = v26 | 1;
LABEL_36:
        memcpy(v24, v21, v23);
        goto LABEL_37;
      }
      v24 = (char *)&v55 + 1;
      LOBYTE(v55) = 2 * v22;
      if ( v22 )
        goto LABEL_36;
LABEL_37:
      v24[v23] = 0;
      v25 = g3::logTag(&v55);
      if ( (v55 & 1) != 0 )
      {
        operator delete(v57);
        if ( (v59 & 1) == 0 )
        {
LABEL_39:
          if ( (v25 & 1) != 0 )
            goto LABEL_43;
          goto LABEL_50;
        }
      }
      else if ( (v59 & 1) == 0 )
      {
        goto LABEL_39;
      }
LABEL_42:
      operator delete(v61);
      if ( (v25 & 1) != 0 )
      {
LABEL_43:
        LogCapture::LogCapture((LogCapture *)&v65, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
        v27 = std::__put_character_sequence<char,std::char_traits<char>>(v66, (__int64)"Read finish", 11LL);
        v28 = *a2;
        if ( (v28 & 1) != 0 )
          v29 = *((_QWORD *)a2 + 1);
        else
          v29 = v28 >> 1;
        if ( (v28 & 1) != 0 )
          v30 = *((_QWORD *)a2 + 2);
        else
          v30 = (__int64)v47;
        std::__put_character_sequence<char,std::char_traits<char>>(v27, v30, v29);
        LogCapture::~LogCapture((LogCapture *)&v65);
      }
LABEL_50:
      v65 = 10000000LL;
      std::this_thread::sleep_for(&v65);
      v31 = atomic_load((unsigned __int8 *)(a1 + 1048));
    }
    while ( (v31 & 1) != 0 );
  }
  if ( (word_33128 & 1) != 0 )
    v32 = (const char *)qword_33138;
  else
    v32 = (char *)&word_33128 + 1;
  v51 = dword_33120;
  v53 = 0LL;
  v54 = 0LL;
  v52 = 0LL;
  v33 = strlen(v32);
  if ( v33 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v34 = v33;
  if ( v33 >= 0x17 )
  {
    v36 = (v33 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v35 = (char *)operator new(v36);
    v53 = v34;
    v54 = v35;
    v52 = v36 | 1;
    goto LABEL_59;
  }
  v35 = (char *)&v52 + 1;
  LOBYTE(v52) = 2 * v33;
  if ( v33 )
LABEL_59:
    memcpy(v35, v32, v34);
  v35[v34] = 0;
  if ( (g3::logLevel(&v51) & 1) == 0 )
  {
    v41 = 0;
    if ( (v52 & 1) == 0 )
      goto LABEL_71;
    goto LABEL_74;
  }
  v49 = 0LL;
  v50 = 0LL;
  v48 = 0LL;
  v37 = rgbd::ASTAG;
  v38 = strlen(rgbd::ASTAG);
  if ( v38 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v39 = v38;
  if ( v38 >= 0x17 )
  {
    v42 = (v38 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v40 = (char *)operator new(v42);
    v49 = v39;
    v50 = v40;
    v48 = v42 | 1;
    goto LABEL_68;
  }
  v40 = (char *)&v48 + 1;
  LOBYTE(v48) = 2 * v38;
  if ( v38 )
LABEL_68:
    memcpy(v40, v37, v39);
  v40[v39] = 0;
  v41 = g3::logTag(&v48);
  if ( (v48 & 1) == 0 )
  {
    if ( (v52 & 1) == 0 )
      goto LABEL_71;
LABEL_74:
    operator delete(v54);
    if ( (v41 & 1) == 0 )
      return;
    goto LABEL_75;
  }
  operator delete(v50);
  if ( (v52 & 1) != 0 )
    goto LABEL_74;
LABEL_71:
  if ( (v41 & 1) == 0 )
    return;
LABEL_75:
  LogCapture::LogCapture((LogCapture *)&v65, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
  v43 = *a2;
  if ( (v43 & 1) != 0 )
    v44 = *((_QWORD *)a2 + 2);
  else
    v44 = (__int64)(a2 + 1);
  if ( (v43 & 1) != 0 )
    v45 = *((_QWORD *)a2 + 1);
  else
    v45 = v43 >> 1;
  v46 = std::__put_character_sequence<char,std::char_traits<char>>(v66, v44, v45);
  std::__put_character_sequence<char,std::char_traits<char>>(v46, (__int64)" end thread", 11LL);
  LogCapture::~LogCapture((LogCapture *)&v65);
}
// D490: using guessed type __int64 __fastcall std::this_thread::sleep_for(_QWORD);
// D4C0: using guessed type __int64 __fastcall rgbd::RGBDParam::createMemory(_QWORD, _QWORD, _QWORD);
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 33008: using guessed type char *rgbd::ASTAG;
// 33120: using guessed type int dword_33120;
// 33128: using guessed type __int16 word_33128;
// 33138: using guessed type __int64 qword_33138;

//----- (000000000001257C) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::waitForFrame(__int64 a1, unsigned __int8 *a2)
{
  __int64 v2; // x21
  const char *v5; // x23
  size_t v6; // x0
  size_t v7; // x22
  char *v8; // x24
  unsigned int v9; // w19
  unsigned __int64 v10; // x25
  char *v11; // x22
  size_t v12; // x0
  size_t v13; // x23
  char *v14; // x24
  char v15; // w22
  unsigned __int64 v16; // x25
  unsigned __int64 v17; // x8
  __int64 v18; // x1
  __int64 v19; // x2
  _QWORD *v20; // x0
  _QWORD *v21; // x0
  void *v22; // x1
  void *v23; // x0
  unsigned int *v24; // x8
  unsigned int v25; // w9
  unsigned int v26; // w9
  _QWORD *v27; // x8
  __int64 v28; // x9
  const char *v30; // x22
  size_t v31; // x0
  size_t v32; // x21
  char *v33; // x23
  unsigned __int64 v34; // x24
  char *v35; // x21
  size_t v36; // x0
  size_t v37; // x22
  char *v38; // x23
  char v39; // w21
  unsigned __int64 v40; // x24
  unsigned __int64 v41; // x8
  __int64 v42; // x1
  __int64 v43; // x2
  _QWORD *v44; // x0
  _QWORD *v45; // x0
  _QWORD *v46; // x0
  _QWORD *v47; // x0
  _QWORD *v48; // x21
  const unsigned int *v49; // x22
  const unsigned int *v50; // x0
  unsigned __int64 v51; // [xsp+18h] [xbp-298h] BYREF
  size_t v52; // [xsp+20h] [xbp-290h]
  void *v53; // [xsp+28h] [xbp-288h]
  int v54; // [xsp+30h] [xbp-280h] BYREF
  unsigned __int64 v55; // [xsp+38h] [xbp-278h] BYREF
  size_t v56; // [xsp+40h] [xbp-270h]
  void *v57; // [xsp+48h] [xbp-268h]
  unsigned __int64 v58; // [xsp+50h] [xbp-260h] BYREF
  size_t v59; // [xsp+58h] [xbp-258h]
  void *v60; // [xsp+60h] [xbp-250h]
  int v61; // [xsp+68h] [xbp-248h] BYREF
  unsigned __int64 v62; // [xsp+70h] [xbp-240h] BYREF
  size_t v63; // [xsp+78h] [xbp-238h]
  void *v64; // [xsp+80h] [xbp-230h]
  void *v65; // [xsp+88h] [xbp-228h] BYREF
  void *v66; // [xsp+90h] [xbp-220h]
  __int64 v67; // [xsp+98h] [xbp-218h]
  __int128 *v68; // [xsp+A8h] [xbp-208h] BYREF
  _QWORD v69[40]; // [xsp+B0h] [xbp-200h] BYREF
  _QWORD v70[8]; // [xsp+1F0h] [xbp-C0h] BYREF
  _QWORD *v71; // [xsp+230h] [xbp-80h]
  cv *v72; // [xsp+238h] [xbp-78h]
  __int64 v73[4]; // [xsp+240h] [xbp-70h] BYREF

  v2 = a1 + 1240;
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v68 = (__int128 *)a2;
  if ( !std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
          a1 + 1240,
          a2,
          (__int64)&unk_1D9F4,
          &v68)[5] )
    return 0;
  LODWORD(v70[0]) = 1124007936;
  memset((char *)v70 + 4, 0, 60);
  v71 = &v70[1];
  v72 = (cv *)v73;
  v61 = dword_33180;
  if ( (word_33188 & 1) != 0 )
    v5 = (const char *)qword_33198;
  else
    v5 = (char *)&word_33188 + 1;
  v65 = 0LL;
  v66 = 0LL;
  v67 = 0LL;
  v73[0] = 0LL;
  v73[1] = 0LL;
  v63 = 0LL;
  v64 = 0LL;
  v62 = 0LL;
  v6 = strlen(v5);
  if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v7 = v6;
  if ( v6 >= 0x17 )
  {
    v10 = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v8 = (char *)operator new(v10);
    v63 = v7;
    v64 = v8;
    v62 = v10 | 1;
    goto LABEL_11;
  }
  v8 = (char *)&v62 + 1;
  LOBYTE(v62) = 2 * v6;
  if ( v6 )
LABEL_11:
    memcpy(v8, v5, v7);
  v8[v7] = 0;
  if ( (g3::logLevel(&v61) & 1) == 0 )
  {
    v15 = 0;
    if ( (v62 & 1) == 0 )
      goto LABEL_24;
    goto LABEL_18;
  }
  v59 = 0LL;
  v60 = 0LL;
  v58 = 0LL;
  v11 = rgbd::ASTAG;
  v12 = strlen(rgbd::ASTAG);
  if ( v12 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v13 = v12;
  if ( v12 >= 0x17 )
  {
    v16 = (v12 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v14 = (char *)operator new(v16);
    v59 = v13;
    v60 = v14;
    v58 = v16 | 1;
    goto LABEL_21;
  }
  v14 = (char *)&v58 + 1;
  LOBYTE(v58) = 2 * v12;
  if ( v12 )
LABEL_21:
    memcpy(v14, v11, v13);
  v14[v13] = 0;
  v15 = g3::logTag(&v58);
  if ( (v58 & 1) != 0 )
  {
    operator delete(v60);
    if ( (v62 & 1) == 0 )
    {
LABEL_24:
      if ( (v15 & 1) == 0 )
        goto LABEL_32;
      goto LABEL_25;
    }
  }
  else if ( (v62 & 1) == 0 )
  {
    goto LABEL_24;
  }
LABEL_18:
  operator delete(v64);
  if ( (v15 & 1) == 0 )
    goto LABEL_32;
LABEL_25:
  LogCapture::LogCapture((LogCapture *)&v68, rgbd::ASTAG, (const LEVELS *)&dword_33180, "", 6, 0LL);
  v17 = *a2;
  if ( (v17 & 1) != 0 )
    v18 = *((_QWORD *)a2 + 2);
  else
    v18 = (__int64)(a2 + 1);
  if ( (v17 & 1) != 0 )
    v19 = *((_QWORD *)a2 + 1);
  else
    v19 = v17 >> 1;
  v20 = std::__put_character_sequence<char,std::char_traits<char>>(v69, v18, v19);
  std::__put_character_sequence<char,std::char_traits<char>>(v20, (__int64)" ready to read", 14LL);
  LogCapture::~LogCapture((LogCapture *)&v68);
LABEL_32:
  v68 = (__int128 *)a2;
  v21 = std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
          v2,
          a2,
          (__int64)&unk_1D9F4,
          &v68);
  if ( (unsigned int)v4l2Capture::read(v21[5], v70, &v65, 1LL, 1LL) )
  {
    v9 = 0;
    v23 = v65;
    if ( !v65 )
      goto LABEL_35;
    goto LABEL_34;
  }
  if ( (word_33188 & 1) != 0 )
    v30 = (const char *)qword_33198;
  else
    v30 = (char *)&word_33188 + 1;
  v54 = dword_33180;
  v56 = 0LL;
  v57 = 0LL;
  v55 = 0LL;
  v31 = strlen(v30);
  if ( v31 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v32 = v31;
  if ( v31 >= 0x17 )
  {
    v34 = (v31 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v33 = (char *)operator new(v34);
    v56 = v32;
    v57 = v33;
    v55 = v34 | 1;
    goto LABEL_56;
  }
  v33 = (char *)&v55 + 1;
  LOBYTE(v55) = 2 * v31;
  if ( v31 )
LABEL_56:
    memcpy(v33, v30, v32);
  v33[v32] = 0;
  if ( (g3::logLevel(&v54) & 1) == 0 )
  {
    v39 = 0;
    if ( (v55 & 1) == 0 )
      goto LABEL_69;
    goto LABEL_63;
  }
  v52 = 0LL;
  v53 = 0LL;
  v51 = 0LL;
  v35 = rgbd::ASTAG;
  v36 = strlen(rgbd::ASTAG);
  if ( v36 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v37 = v36;
  if ( v36 >= 0x17 )
  {
    v40 = (v36 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v38 = (char *)operator new(v40);
    v52 = v37;
    v53 = v38;
    v51 = v40 | 1;
    goto LABEL_66;
  }
  v38 = (char *)&v51 + 1;
  LOBYTE(v51) = 2 * v36;
  if ( v36 )
LABEL_66:
    memcpy(v38, v35, v37);
  v38[v37] = 0;
  v39 = g3::logTag(&v51);
  if ( (v51 & 1) != 0 )
  {
    operator delete(v53);
    if ( (v55 & 1) == 0 )
    {
LABEL_69:
      if ( (v39 & 1) == 0 )
        goto LABEL_77;
      goto LABEL_70;
    }
  }
  else if ( (v55 & 1) == 0 )
  {
    goto LABEL_69;
  }
LABEL_63:
  operator delete(v57);
  if ( (v39 & 1) == 0 )
    goto LABEL_77;
LABEL_70:
  LogCapture::LogCapture((LogCapture *)&v68, rgbd::ASTAG, (const LEVELS *)&dword_33180, "", 6, 0LL);
  v41 = *a2;
  if ( (v41 & 1) != 0 )
    v42 = *((_QWORD *)a2 + 2);
  else
    v42 = (__int64)(a2 + 1);
  if ( (v41 & 1) != 0 )
    v43 = *((_QWORD *)a2 + 1);
  else
    v43 = v41 >> 1;
  v44 = std::__put_character_sequence<char,std::char_traits<char>>(v69, v42, v43);
  v45 = std::__put_character_sequence<char,std::char_traits<char>>(v44, (__int64)" read depath, row:", 18LL);
  v46 = std::ostream::operator<<(v45);
  v47 = std::__put_character_sequence<char,std::char_traits<char>>(v46, (__int64)",cols:", 6LL);
  std::ostream::operator<<(v47);
  LogCapture::~LogCapture((LogCapture *)&v68);
LABEL_77:
  rgbd::RGBDAngStrong::packageRGBD(a1, a2, (__int64)v70);
  v68 = (__int128 *)a2;
  v48 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
          a1 + 1160,
          a2,
          (__int64)&unk_1D9F4,
          &v68);
  v49 = (const unsigned int *)std::map<std::string,pudutech::RGBD_INFO>::operator[](a1 + 848, (__int128 *)a2);
  v50 = (const unsigned int *)std::map<std::string,pudutech::RGBD_INFO>::operator[](a1 + 848, (__int128 *)a2);
  rgbd::RGBDParam::transmitLoacationData((rgbd::RGBDParam *)(v48 + 6), v49 + 4, v50 + 3, (const int *)(a1 + 32));
  v9 = 1;
  v23 = v65;
  if ( v65 )
  {
LABEL_34:
    v66 = v23;
    operator delete(v23);
  }
LABEL_35:
  if ( v70[7] )
  {
    v24 = (unsigned int *)(v70[7] + 20LL);
    do
    {
      v25 = __ldaxr(v24);
      v26 = v25 - 1;
    }
    while ( __stlxr(v26, v24) );
    if ( !v26 )
      cv::Mat::deallocate((cv::Mat *)v70);
  }
  v70[7] = 0LL;
  memset(&v70[2], 0, 32);
  if ( SHIDWORD(v70[0]) >= 1 )
  {
    v27 = v71;
    v28 = 0LL;
    do
      *((_DWORD *)v27 + v28++) = 0;
    while ( v28 < SHIDWORD(v70[0]) );
  }
  if ( v72 != (cv *)v73 )
    cv::fastFree(v72, v22);
  return v9;
}
// 128A0: variable 'v22' is possibly undefined
// D660: using guessed type __int64 __fastcall v4l2Capture::read(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 33008: using guessed type char *rgbd::ASTAG;
// 33180: using guessed type int dword_33180;
// 33188: using guessed type __int16 word_33188;
// 33198: using guessed type __int64 qword_33198;

//----- (0000000000012CA8) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 32LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// D680: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 12CA8: using guessed type char var_60[8];

//----- (0000000000012E94) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::packageRGBD(__int64 a1, unsigned __int8 *a2, __int64 a3)
{
  int v6; // w24
  _QWORD *v7; // x0
  __int64 AshmenAddress; // x21
  int v9; // w0
  int v10; // w8
  unsigned __int64 v11; // x8
  unsigned __int64 v12; // x8
  unsigned __int64 v13; // x8
  const void *v14; // x1
  size_t v15; // x2
  unsigned __int64 v16; // x8
  unsigned __int64 v17; // x8
  __int128 *v19[2]; // [xsp+10h] [xbp-40h] BYREF

  v19[1] = *(__int128 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v6 = *(_DWORD *)(a1 + 924) * *(_DWORD *)(a1 + 920);
  v19[0] = (__int128 *)a2;
  v7 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
         a1 + 1160,
         a2,
         (__int64)&unk_1D9F4,
         v19);
  AshmenAddress = rgbd::RGBDParam::getAshmenAddress((rgbd::RGBDParam *)(v7 + 6));
  v9 = std::chrono::system_clock::now((std::chrono::system_clock *)AshmenAddress);
  *(_DWORD *)(AshmenAddress + 8) = 981668463;
  *(_DWORD *)AshmenAddress = v9 / 1000000;
  *(_DWORD *)(AshmenAddress + 4) = 1000000 * (v9 / 1000 - 1000 * (v9 / 1000000));
  *(_DWORD *)(AshmenAddress + 12) = *(_DWORD *)(a1 + 920);
  v10 = *(_DWORD *)(a1 + 924);
  *(_OWORD *)(AshmenAddress + 20) = xmmword_1D260;
  *(_DWORD *)(AshmenAddress + 36) = 1;
  *(_DWORD *)(AshmenAddress + 56) = 0;
  *(_QWORD *)(AshmenAddress + 40) = 0LL;
  *(_QWORD *)(AshmenAddress + 48) = 0LL;
  *(_DWORD *)(AshmenAddress + 16) = v10;
  v11 = *a2;
  if ( (v11 & 1) != 0 )
    v12 = *((_QWORD *)a2 + 1);
  else
    v12 = v11 >> 1;
  *(_DWORD *)(AshmenAddress + 60) = v12;
  v13 = *a2;
  if ( (v13 & 1) != 0 )
    v14 = (const void *)*((_QWORD *)a2 + 2);
  else
    v14 = a2 + 1;
  if ( (v13 & 1) != 0 )
    v15 = *((_QWORD *)a2 + 1);
  else
    v15 = v13 >> 1;
  memcpy((void *)(AshmenAddress + 64), v14, v15);
  v16 = *a2;
  if ( (v16 & 1) != 0 )
    v17 = *((_QWORD *)a2 + 1);
  else
    v17 = v16 >> 1;
  memcpy((void *)(AshmenAddress + ((__int64)((v17 << 32) + 0x4000000000LL) >> 32)), *(const void **)(a3 + 16), 2LL * v6);
  return 1LL;
}
// 1D260: using guessed type __int128 xmmword_1D260;

//----- (000000000001301C) ----------------------------------------------------
_QWORD *__fastcall std::map<std::string,pudutech::RGBD_INFO>::operator[](__int64 a1, __int128 *a2)
{
  __int64 *v4; // x0
  _QWORD *v5; // x19
  __int64 *v6; // x21
  __int128 v7; // q0
  size_t v8; // x22
  const void *v9; // x23
  void *v10; // x24
  __int64 v11; // x8
  __int64 v12; // x8
  __int64 *v13; // x1
  __int64 v15[2]; // [xsp+0h] [xbp-50h] BYREF

  v15[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::__find_equal<std::string>(
         a1,
         v15,
         (unsigned __int8 *)a2);
  v5 = (_QWORD *)*v4;
  if ( *v4 )
    return v5 + 7;
  v6 = v4;
  v5 = (_QWORD *)operator new(0x90uLL);
  v5[4] = 0LL;
  v5[5] = 0LL;
  v5[6] = 0LL;
  if ( (*(_BYTE *)a2 & 1) != 0 )
  {
    v8 = *((_QWORD *)a2 + 1);
    if ( v8 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v9 = (const void *)*((_QWORD *)a2 + 2);
    if ( v8 >= 0x17 )
    {
      v10 = (void *)operator new((v8 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v5[5] = v8;
      v5[6] = v10;
      v5[4] = (v8 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v10 = (char *)v5 + 33;
      *((_BYTE *)v5 + 32) = 2 * v8;
      if ( !v8 )
        goto LABEL_10;
    }
    memcpy(v10, v9, v8);
LABEL_10:
    *((_BYTE *)v10 + v8) = 0;
    goto LABEL_11;
  }
  v7 = *a2;
  v5[6] = *((_QWORD *)a2 + 2);
  *((_OWORD *)v5 + 2) = v7;
LABEL_11:
  v11 = v15[0];
  v5[16] = 0LL;
  v5[17] = 0LL;
  v5[15] = 0LL;
  *v5 = 0LL;
  v5[1] = 0LL;
  v5[2] = v11;
  *v6 = (__int64)v5;
  v12 = **(_QWORD **)a1;
  if ( v12 )
  {
    *(_QWORD *)a1 = v12;
    v13 = (__int64 *)*v6;
  }
  else
  {
    v13 = v5;
  }
  std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(*(__int64 **)(a1 + 8), v13);
  ++*(_QWORD *)(a1 + 16);
  return v5 + 7;
}

//----- (0000000000013188) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::setRGBDCallback(_QWORD *a1, __int64 a2, __int128 *a3)
{
  std::mutex *v3; // x19
  const char *v7; // x24
  size_t v8; // x0
  size_t v9; // x23
  char *v10; // x25
  unsigned __int64 v11; // x26
  char *v12; // x23
  size_t v13; // x0
  size_t v14; // x24
  char *v15; // x25
  char v16; // w23
  unsigned __int64 v17; // x8
  unsigned __int64 v18; // x26
  _QWORD *v19; // x0
  __int64 v20; // x8
  _QWORD *v21; // x23
  const char *v22; // x24
  __int64 v23; // x0
  unsigned __int64 v24; // x9
  unsigned __int64 v25; // x10
  _QWORD *v26; // x23
  unsigned __int64 v27; // x12
  __int64 *v28; // x13
  unsigned __int64 v29; // x14
  __int64 *v30; // x0
  _QWORD *v31; // x22
  _QWORD *v32; // x0
  const char *v33; // x22
  size_t v34; // x0
  size_t v35; // x21
  char *v36; // x23
  const char *v37; // x22
  size_t v38; // x0
  size_t v39; // x21
  char *v40; // x23
  unsigned __int64 v41; // x24
  char *v42; // x21
  size_t v43; // x0
  size_t v44; // x22
  char *v45; // x23
  char v46; // w21
  unsigned __int64 v47; // x24
  _QWORD *v48; // x0
  __int64 v49; // x8
  _QWORD *v50; // x21
  const char *v51; // x20
  __int64 v52; // x0
  unsigned __int64 v54; // x24
  char *v55; // x21
  size_t v56; // x0
  size_t v57; // x22
  char *v58; // x23
  char v59; // w21
  unsigned __int64 v60; // x24
  _QWORD *v61; // x0
  __int64 v62; // x8
  _QWORD *v63; // x21
  const char *v64; // x20
  __int64 v65; // x0
  unsigned __int64 v66; // [xsp+8h] [xbp-258h] BYREF
  size_t v67; // [xsp+10h] [xbp-250h]
  void *v68; // [xsp+18h] [xbp-248h]
  int v69; // [xsp+20h] [xbp-240h] BYREF
  unsigned __int64 v70; // [xsp+28h] [xbp-238h] BYREF
  size_t v71; // [xsp+30h] [xbp-230h]
  void *v72; // [xsp+38h] [xbp-228h]
  unsigned __int64 v73; // [xsp+40h] [xbp-220h] BYREF
  size_t v74; // [xsp+48h] [xbp-218h]
  void *v75; // [xsp+50h] [xbp-210h]
  int v76; // [xsp+58h] [xbp-208h] BYREF
  unsigned __int64 v77; // [xsp+60h] [xbp-200h] BYREF
  size_t v78; // [xsp+68h] [xbp-1F8h]
  void *v79; // [xsp+70h] [xbp-1F0h]
  unsigned __int64 v80; // [xsp+78h] [xbp-1E8h] BYREF
  size_t v81; // [xsp+80h] [xbp-1E0h]
  void *v82; // [xsp+88h] [xbp-1D8h]
  int v83; // [xsp+90h] [xbp-1D0h] BYREF
  unsigned __int64 v84; // [xsp+98h] [xbp-1C8h] BYREF
  size_t v85; // [xsp+A0h] [xbp-1C0h]
  void *v86; // [xsp+A8h] [xbp-1B8h]
  unsigned __int8 *v87; // [xsp+B8h] [xbp-1A8h] BYREF
  _QWORD v88[42]; // [xsp+C0h] [xbp-1A0h] BYREF

  v3 = (std::mutex *)(a1 + 120);
  v88[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  std::mutex::lock((std::mutex *)(a1 + 120));
  if ( (word_33128 & 1) != 0 )
    v7 = (const char *)qword_33138;
  else
    v7 = (char *)&word_33128 + 1;
  v83 = dword_33120;
  v85 = 0LL;
  v86 = 0LL;
  v84 = 0LL;
  v8 = strlen(v7);
  if ( v8 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v9 = v8;
  if ( v8 >= 0x17 )
  {
    v11 = (v8 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v10 = (char *)operator new(v11);
    v85 = v9;
    v86 = v10;
    v84 = v11 | 1;
    goto LABEL_9;
  }
  v10 = (char *)&v84 + 1;
  LOBYTE(v84) = 2 * v8;
  if ( v8 )
LABEL_9:
    memcpy(v10, v7, v9);
  v10[v9] = 0;
  if ( (g3::logLevel(&v83) & 1) == 0 )
  {
    v16 = 0;
    if ( (v84 & 1) == 0 )
      goto LABEL_23;
    goto LABEL_16;
  }
  v81 = 0LL;
  v82 = 0LL;
  v80 = 0LL;
  v12 = rgbd::ASTAG;
  v13 = strlen(rgbd::ASTAG);
  if ( v13 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v14 = v13;
  if ( v13 >= 0x17 )
  {
    v18 = (v13 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v15 = (char *)operator new(v18);
    v81 = v14;
    v82 = v15;
    v80 = v18 | 1;
    goto LABEL_20;
  }
  v15 = (char *)&v80 + 1;
  LOBYTE(v80) = 2 * v13;
  if ( v13 )
LABEL_20:
    memcpy(v15, v12, v14);
  v15[v14] = 0;
  v16 = g3::logTag(&v80);
  if ( (v80 & 1) == 0 )
  {
    if ( (v84 & 1) == 0 )
      goto LABEL_23;
LABEL_16:
    operator delete(v86);
    if ( (v16 & 1) != 0 )
      goto LABEL_24;
    goto LABEL_17;
  }
  operator delete(v82);
  if ( (v84 & 1) != 0 )
    goto LABEL_16;
LABEL_23:
  if ( (v16 & 1) != 0 )
  {
LABEL_24:
    LogCapture::LogCapture((LogCapture *)&v87, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
    v19 = std::__put_character_sequence<char,std::char_traits<char>>(v88, (__int64)"set callback ", 13LL);
    v20 = *(int *)a3;
    v21 = v19;
    if ( (unsigned int)v20 > 3 )
      v22 = "Rgbd";
    else
      v22 = off_32648[v20];
    v23 = strlen(v22);
    std::__put_character_sequence<char,std::char_traits<char>>(v21, (__int64)v22, v23);
    LogCapture::~LogCapture((LogCapture *)&v87);
    v17 = a1[151];
    if ( !v17 )
      goto LABEL_54;
    goto LABEL_30;
  }
LABEL_17:
  v17 = a1[151];
  if ( !v17 )
    goto LABEL_54;
LABEL_30:
  v24 = *(int *)a3;
  v25 = v17 - 1;
  v26 = a1 + 150;
  if ( ((v17 - 1) & v17) != 0 )
  {
    v27 = *(int *)a3;
    if ( v17 <= v24 )
      v27 = v24 % v17;
  }
  else
  {
    v27 = v25 & v24;
  }
  v28 = *(__int64 **)(*v26 + 8 * v27);
  if ( v28 )
  {
    do
    {
      while ( 1 )
      {
        v28 = (__int64 *)*v28;
        if ( !v28 )
          goto LABEL_54;
        v29 = v28[1];
        if ( v29 == v24 )
          break;
        if ( ((v17 - 1) & v17) != 0 )
        {
          if ( v29 >= v17 )
            v29 %= v17;
          if ( v29 != v27 )
            goto LABEL_54;
        }
        else if ( (v29 & v25) != v27 )
        {
          goto LABEL_54;
        }
      }
    }
    while ( *((_DWORD *)v28 + 4) != (_DWORD)v24 );
    v87 = (unsigned __int8 *)a3;
    v30 = std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation const&>,std::tuple<>>(
            (__int64)(a1 + 150),
            (int *)a3,
            (__int64)&unk_1D9F4,
            (int **)&v87);
    v31 = a1 + 145;
    if ( !std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::find<std::string>(
            v31,
            (unsigned __int8 *)v30 + 24) )
      goto LABEL_54;
    v87 = (unsigned __int8 *)a3;
    v87 = (unsigned __int8 *)(std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation const&>,std::tuple<>>(
                                (__int64)v26,
                                (int *)a3,
                                (__int64)&unk_1D9F4,
                                (int **)&v87)
                            + 3);
    v32 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
            (__int64)v31,
            v87,
            (__int64)&unk_1D9F4,
            (__int128 **)&v87);
    rgbd::RGBDParam::setLocationCallback(v32 + 6, a2);
    if ( (word_33128 & 1) != 0 )
      v33 = (const char *)qword_33138;
    else
      v33 = (char *)&word_33128 + 1;
    v76 = dword_33120;
    v78 = 0LL;
    v79 = 0LL;
    v77 = 0LL;
    v34 = strlen(v33);
    if ( v34 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v35 = v34;
    if ( v34 >= 0x17 )
    {
      v54 = (v34 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v36 = (char *)operator new(v54);
      v78 = v35;
      v79 = v36;
      v77 = v54 | 1;
    }
    else
    {
      v36 = (char *)&v77 + 1;
      LOBYTE(v77) = 2 * v34;
      if ( !v34 )
      {
LABEL_86:
        v36[v35] = 0;
        if ( (g3::logLevel(&v76) & 1) == 0 )
        {
          v59 = 0;
          if ( (v77 & 1) == 0 )
            goto LABEL_98;
          goto LABEL_92;
        }
        v74 = 0LL;
        v75 = 0LL;
        v73 = 0LL;
        v55 = rgbd::ASTAG;
        v56 = strlen(rgbd::ASTAG);
        if ( v56 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v57 = v56;
        if ( v56 >= 0x17 )
        {
          v60 = (v56 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v58 = (char *)operator new(v60);
          v74 = v57;
          v75 = v58;
          v73 = v60 | 1;
        }
        else
        {
          v58 = (char *)&v73 + 1;
          LOBYTE(v73) = 2 * v56;
          if ( !v56 )
          {
LABEL_96:
            v58[v57] = 0;
            v59 = g3::logTag(&v73);
            if ( (v73 & 1) != 0 )
            {
              operator delete(v75);
              if ( (v77 & 1) == 0 )
              {
LABEL_98:
                if ( (v59 & 1) == 0 )
                  return std::mutex::unlock(v3);
                goto LABEL_99;
              }
            }
            else if ( (v77 & 1) == 0 )
            {
              goto LABEL_98;
            }
LABEL_92:
            operator delete(v79);
            if ( (v59 & 1) == 0 )
              return std::mutex::unlock(v3);
LABEL_99:
            LogCapture::LogCapture((LogCapture *)&v87, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
            v61 = std::__put_character_sequence<char,std::char_traits<char>>(
                    v88,
                    (__int64)"set callback success ",
                    21LL);
            v62 = *(int *)a3;
            v63 = v61;
            if ( (unsigned int)v62 > 3 )
              v64 = "Rgbd";
            else
              v64 = off_32648[v62];
            v65 = strlen(v64);
            std::__put_character_sequence<char,std::char_traits<char>>(v63, (__int64)v64, v65);
            goto LABEL_82;
          }
        }
        memcpy(v58, v55, v57);
        goto LABEL_96;
      }
    }
    memcpy(v36, v33, v35);
    goto LABEL_86;
  }
LABEL_54:
  if ( (word_331A8 & 1) != 0 )
    v37 = (const char *)qword_331B8;
  else
    v37 = (char *)&word_331A8 + 1;
  v69 = dword_331A0;
  v71 = 0LL;
  v72 = 0LL;
  v70 = 0LL;
  v38 = strlen(v37);
  if ( v38 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v39 = v38;
  if ( v38 >= 0x17 )
  {
    v41 = (v38 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v40 = (char *)operator new(v41);
    v71 = v39;
    v72 = v40;
    v70 = v41 | 1;
    goto LABEL_62;
  }
  v40 = (char *)&v70 + 1;
  LOBYTE(v70) = 2 * v38;
  if ( v38 )
LABEL_62:
    memcpy(v40, v37, v39);
  v40[v39] = 0;
  if ( (g3::logLevel(&v69) & 1) == 0 )
  {
    v46 = 0;
    if ( (v70 & 1) == 0 )
      goto LABEL_75;
    goto LABEL_69;
  }
  v67 = 0LL;
  v68 = 0LL;
  v66 = 0LL;
  v42 = rgbd::ASTAG;
  v43 = strlen(rgbd::ASTAG);
  if ( v43 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v44 = v43;
  if ( v43 >= 0x17 )
  {
    v47 = (v43 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v45 = (char *)operator new(v47);
    v67 = v44;
    v68 = v45;
    v66 = v47 | 1;
    goto LABEL_72;
  }
  v45 = (char *)&v66 + 1;
  LOBYTE(v66) = 2 * v43;
  if ( v43 )
LABEL_72:
    memcpy(v45, v42, v44);
  v45[v44] = 0;
  v46 = g3::logTag(&v66);
  if ( (v66 & 1) == 0 )
  {
    if ( (v70 & 1) == 0 )
      goto LABEL_75;
LABEL_69:
    operator delete(v72);
    if ( (v46 & 1) == 0 )
      return std::mutex::unlock(v3);
    goto LABEL_76;
  }
  operator delete(v68);
  if ( (v70 & 1) != 0 )
    goto LABEL_69;
LABEL_75:
  if ( (v46 & 1) == 0 )
    return std::mutex::unlock(v3);
LABEL_76:
  LogCapture::LogCapture((LogCapture *)&v87, rgbd::ASTAG, (const LEVELS *)&dword_331A0, "", 6, 0LL);
  v48 = std::__put_character_sequence<char,std::char_traits<char>>(v88, (__int64)"set callback error ", 19LL);
  v49 = *(int *)a3;
  v50 = v48;
  if ( (unsigned int)v49 > 3 )
    v51 = "Rgbd";
  else
    v51 = off_32648[v49];
  v52 = strlen(v51);
  std::__put_character_sequence<char,std::char_traits<char>>(v50, (__int64)v51, v52);
LABEL_82:
  LogCapture::~LogCapture((LogCapture *)&v87);
  return std::mutex::unlock(v3);
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// DCD0: using guessed type __int64 __fastcall rgbd::RGBDParam::setLocationCallback(_QWORD, _QWORD);
// 32648: using guessed type char *off_32648[4];
// 33008: using guessed type char *rgbd::ASTAG;
// 33120: using guessed type int dword_33120;
// 33128: using guessed type __int16 word_33128;
// 33138: using guessed type __int64 qword_33138;
// 331A0: using guessed type int dword_331A0;
// 331A8: using guessed type __int16 word_331A8;
// 331B8: using guessed type __int64 qword_331B8;

//----- (0000000000013A28) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::setRgbdLocation(
        _QWORD *a1,
        int *a2,
        unsigned __int8 *a3,
        const signed __int8 *a4)
{
  _QWORD *v4; // x19
  const char *v9; // x23
  size_t v10; // x0
  size_t v11; // x20
  char *v12; // x24
  unsigned __int64 v13; // x8
  unsigned __int64 v14; // x1
  _QWORD *v15; // x20
  unsigned __int64 v16; // x9
  unsigned __int64 v17; // x11
  unsigned __int64 v18; // x25
  char *v19; // x20
  size_t v20; // x0
  size_t v21; // x23
  char *v22; // x24
  char v23; // w20
  void **v24; // x20
  void **v25; // x22
  __int64 v26; // x8
  __int64 k; // x9
  void **v28; // x19
  void **v29; // x20
  __int64 v30; // x8
  __int64 m; // x9
  __int64 result; // x0
  unsigned __int64 v33; // x25
  _QWORD *v34; // x0
  unsigned __int64 v35; // x8
  __int64 v36; // x1
  __int64 v37; // x2
  __int64 *v38; // x12
  unsigned __int64 v39; // x13
  const char *v40; // x24
  size_t v41; // x0
  size_t v42; // x21
  char *v43; // x25
  unsigned __int64 v44; // x26
  char *v45; // x21
  size_t v46; // x0
  size_t v47; // x24
  char *v48; // x25
  char v49; // w21
  unsigned __int64 v50; // x26
  char *v51; // x1
  void *v52; // x2
  _QWORD *v53; // x0
  _QWORD *v54; // x0
  unsigned __int64 v55; // x8
  __int64 v56; // x1
  __int64 v57; // x2
  int v58; // w8
  __int128 v59; // q0
  size_t v60; // x21
  const void *v61; // x23
  _BYTE *v62; // x24
  __int128 v63; // q0
  size_t v64; // x20
  const void *v65; // x21
  _BYTE *v66; // x22
  const char *v67; // x24
  size_t v68; // x0
  size_t v69; // x22
  char *v70; // x25
  unsigned __int64 v71; // x26
  char *v72; // x22
  size_t v73; // x0
  size_t v74; // x24
  char *v75; // x25
  char v76; // w22
  unsigned __int64 v77; // x26
  _QWORD *v78; // x0
  void **v79; // x22
  void **v80; // x23
  __int64 v81; // x8
  __int64 i; // x9
  void **v83; // x19
  void **v84; // x22
  __int64 v85; // x8
  __int64 j; // x9
  void *v87[2]; // [xsp+0h] [xbp-340h] BYREF
  void *v88; // [xsp+10h] [xbp-330h]
  unsigned __int64 v89; // [xsp+18h] [xbp-328h] BYREF
  size_t v90; // [xsp+20h] [xbp-320h]
  void *v91; // [xsp+28h] [xbp-318h]
  int v92; // [xsp+30h] [xbp-310h] BYREF
  unsigned __int64 v93; // [xsp+38h] [xbp-308h] BYREF
  size_t v94; // [xsp+40h] [xbp-300h]
  void *v95; // [xsp+48h] [xbp-2F8h]
  unsigned __int64 v96; // [xsp+50h] [xbp-2F0h] BYREF
  size_t v97; // [xsp+58h] [xbp-2E8h]
  void *v98; // [xsp+60h] [xbp-2E0h]
  int v99; // [xsp+68h] [xbp-2D8h] BYREF
  unsigned __int64 v100; // [xsp+70h] [xbp-2D0h] BYREF
  size_t v101; // [xsp+78h] [xbp-2C8h]
  void *v102; // [xsp+80h] [xbp-2C0h]
  unsigned __int64 v103; // [xsp+88h] [xbp-2B8h] BYREF
  size_t v104; // [xsp+90h] [xbp-2B0h]
  void *v105; // [xsp+98h] [xbp-2A8h]
  int v106; // [xsp+A0h] [xbp-2A0h] BYREF
  unsigned __int64 v107; // [xsp+A8h] [xbp-298h] BYREF
  size_t v108; // [xsp+B0h] [xbp-290h]
  void *v109; // [xsp+B8h] [xbp-288h]
  char v110[208]; // [xsp+C0h] [xbp-280h] BYREF
  _BYTE v111[24]; // [xsp+190h] [xbp-1B0h] BYREF
  void *v112; // [xsp+1A8h] [xbp-198h]
  _QWORD v113[40]; // [xsp+1B0h] [xbp-190h] BYREF

  v4 = a1 + 145;
  v113[38] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( !std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::find<std::string>(
          a1 + 145,
          a3) )
  {
    v13 = a1[151];
    v14 = *a2;
    v15 = a1 + 150;
    if ( v13 )
    {
      v16 = v13 - 1;
      if ( ((v13 - 1) & v13) != 0 )
      {
        v17 = *a2;
        if ( v13 <= v14 )
          v17 = v14 % v13;
      }
      else
      {
        v17 = v16 & v14;
      }
      v38 = *(__int64 **)(*v15 + 8 * v17);
      if ( v38 )
      {
        do
        {
          while ( 1 )
          {
            v38 = (__int64 *)*v38;
            if ( !v38 )
              goto LABEL_67;
            v39 = v38[1];
            if ( v39 == v14 )
              break;
            if ( ((v13 - 1) & v13) != 0 )
            {
              if ( v39 >= v13 )
                v39 %= v13;
              if ( v39 != v17 )
                goto LABEL_67;
            }
            else if ( (v39 & v16) != v17 )
            {
              goto LABEL_67;
            }
          }
        }
        while ( *((_DWORD *)v38 + 4) != (_DWORD)v14 );
        if ( (word_331A8 & 1) != 0 )
          v67 = (const char *)qword_331B8;
        else
          v67 = (char *)&word_331A8 + 1;
        v99 = dword_331A0;
        v101 = 0LL;
        v102 = 0LL;
        v100 = 0LL;
        v68 = strlen(v67);
        if ( v68 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v69 = v68;
        if ( v68 >= 0x17 )
        {
          v71 = (v68 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v70 = (char *)operator new(v71);
          v101 = v69;
          v102 = v70;
          v100 = v71 | 1;
        }
        else
        {
          v70 = (char *)&v100 + 1;
          LOBYTE(v100) = 2 * v68;
          if ( !v68 )
          {
LABEL_138:
            v70[v69] = 0;
            if ( (g3::logLevel(&v99) & 1) == 0 )
            {
              v76 = 0;
              if ( (v100 & 1) == 0 )
                goto LABEL_150;
              goto LABEL_144;
            }
            v97 = 0LL;
            v98 = 0LL;
            v96 = 0LL;
            v72 = rgbd::ASTAG;
            v73 = strlen(rgbd::ASTAG);
            if ( v73 >= 0xFFFFFFFFFFFFFFF0LL )
              std::__basic_string_common<true>::__throw_length_error();
            v74 = v73;
            if ( v73 >= 0x17 )
            {
              v77 = (v73 + 16) & 0xFFFFFFFFFFFFFFF0LL;
              v75 = (char *)operator new(v77);
              v97 = v74;
              v98 = v75;
              v96 = v77 | 1;
            }
            else
            {
              v75 = (char *)&v96 + 1;
              LOBYTE(v96) = 2 * v73;
              if ( !v73 )
              {
LABEL_148:
                v75[v74] = 0;
                v76 = g3::logTag(&v96);
                if ( (v96 & 1) != 0 )
                {
                  operator delete(v98);
                  if ( (v100 & 1) == 0 )
                  {
LABEL_150:
                    if ( (v76 & 1) == 0 )
                      goto LABEL_152;
                    goto LABEL_151;
                  }
                }
                else if ( (v100 & 1) == 0 )
                {
                  goto LABEL_150;
                }
LABEL_144:
                operator delete(v102);
                if ( (v76 & 1) == 0 )
                  goto LABEL_152;
LABEL_151:
                LogCapture::LogCapture((LogCapture *)v111, rgbd::ASTAG, (const LEVELS *)&dword_331A0, "", 6, 0LL);
                v78 = std::__put_character_sequence<char,std::char_traits<char>>(
                        &v111[8],
                        (__int64)"repetitive location set, ",
                        25LL);
                std::ostream::operator<<(v78);
                LogCapture::~LogCapture((LogCapture *)v111);
LABEL_152:
                if ( a1[148] )
                {
                  v79 = (void **)a1[147];
                  if ( v79 )
                  {
                    do
                    {
                      v80 = (void **)*v79;
                      rgbd::RGBDParam::~RGBDParam((rgbd::RGBDParam *)(v79 + 6));
                      if ( ((_BYTE)v79[2] & 1) != 0 )
                        operator delete(v79[4]);
                      operator delete(v79);
                      v79 = v80;
                    }
                    while ( v80 );
                  }
                  v81 = a1[146];
                  a1[147] = 0LL;
                  if ( v81 )
                  {
                    for ( i = 0LL; i != v81; ++i )
                      *(_QWORD *)(*v4 + 8 * i) = 0LL;
                  }
                  a1[148] = 0LL;
                }
                if ( a1[153] )
                {
                  v83 = (void **)a1[152];
                  if ( v83 )
                  {
                    do
                    {
                      v84 = (void **)*v83;
                      if ( ((_BYTE)v83[3] & 1) != 0 )
                        operator delete(v83[5]);
                      operator delete(v83);
                      v83 = v84;
                    }
                    while ( v84 );
                  }
                  v85 = a1[151];
                  a1[152] = 0LL;
                  if ( v85 )
                  {
                    for ( j = 0LL; j != v85; ++j )
                      *(_QWORD *)(*v15 + 8 * j) = 0LL;
                  }
                  goto LABEL_38;
                }
                return 0LL;
              }
            }
            memcpy(v75, v72, v74);
            goto LABEL_148;
          }
        }
        memcpy(v70, v67, v69);
        goto LABEL_138;
      }
    }
LABEL_67:
    rgbd::RGBDParam::RGBDParam((rgbd::RGBDParam *)v110, v14);
    rgbd::RGBDParam::setSerialNum(v110, a3);
    rgbd::RGBDParam::setType((rgbd::RGBDParam *)v110, a4);
    if ( (word_33128 & 1) != 0 )
      v40 = (const char *)qword_33138;
    else
      v40 = (char *)&word_33128 + 1;
    v92 = dword_33120;
    v94 = 0LL;
    v95 = 0LL;
    v93 = 0LL;
    v41 = strlen(v40);
    if ( v41 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v42 = v41;
    if ( v41 >= 0x17 )
    {
      v44 = (v41 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v43 = (char *)operator new(v44);
      v94 = v42;
      v95 = v43;
      v93 = v44 | 1;
    }
    else
    {
      v43 = (char *)&v93 + 1;
      LOBYTE(v93) = 2 * v41;
      if ( !v41 )
      {
LABEL_76:
        v43[v42] = 0;
        if ( (g3::logLevel(&v92) & 1) == 0 )
        {
          v49 = 0;
          if ( (v93 & 1) == 0 )
            goto LABEL_88;
          goto LABEL_82;
        }
        v90 = 0LL;
        v91 = 0LL;
        v89 = 0LL;
        v45 = rgbd::ASTAG;
        v46 = strlen(rgbd::ASTAG);
        if ( v46 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v47 = v46;
        if ( v46 >= 0x17 )
        {
          v50 = (v46 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v48 = (char *)operator new(v50);
          v90 = v47;
          v91 = v48;
          v89 = v50 | 1;
        }
        else
        {
          v48 = (char *)&v89 + 1;
          LOBYTE(v89) = 2 * v46;
          if ( !v46 )
          {
LABEL_86:
            v48[v47] = 0;
            v49 = g3::logTag(&v89);
            if ( (v89 & 1) != 0 )
            {
              operator delete(v91);
              if ( (v93 & 1) == 0 )
              {
LABEL_88:
                if ( (v49 & 1) == 0 )
                  goto LABEL_104;
                goto LABEL_89;
              }
            }
            else if ( (v93 & 1) == 0 )
            {
              goto LABEL_88;
            }
LABEL_82:
            operator delete(v95);
            if ( (v49 & 1) == 0 )
              goto LABEL_104;
LABEL_89:
            LogCapture::LogCapture((LogCapture *)v111, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
            rgbd::RGBDParam::getName(v87, (rgbd::RGBDParam *)v110);
            if ( ((__int64)v87[0] & 1) != 0 )
              v51 = (char *)v88;
            else
              v51 = (char *)v87 + 1;
            if ( ((__int64)v87[0] & 1) != 0 )
              v52 = v87[1];
            else
              v52 = (void *)((unsigned __int64)LOBYTE(v87[0]) >> 1);
            v53 = std::__put_character_sequence<char,std::char_traits<char>>(&v111[8], (__int64)v51, (__int64)v52);
            v54 = std::__put_character_sequence<char,std::char_traits<char>>(v53, (__int64)": ", 2LL);
            v55 = *a3;
            if ( (v55 & 1) != 0 )
              v56 = *((_QWORD *)a3 + 2);
            else
              v56 = (__int64)(a3 + 1);
            if ( (v55 & 1) != 0 )
              v57 = *((_QWORD *)a3 + 1);
            else
              v57 = v55 >> 1;
            std::__put_character_sequence<char,std::char_traits<char>>(v54, v56, v57);
            if ( ((__int64)v87[0] & 1) != 0 )
              operator delete(v88);
            LogCapture::~LogCapture((LogCapture *)v111);
LABEL_104:
            v58 = *a2;
            *(_QWORD *)&v111[16] = 0LL;
            v112 = 0LL;
            *(_QWORD *)&v111[8] = 0LL;
            *(_DWORD *)v111 = v58;
            if ( (*a3 & 1) == 0 )
            {
              v59 = *(_OWORD *)a3;
              v112 = (void *)*((_QWORD *)a3 + 2);
              *(_OWORD *)&v111[8] = v59;
              goto LABEL_115;
            }
            v60 = *((_QWORD *)a3 + 1);
            if ( v60 >= 0xFFFFFFFFFFFFFFF0LL )
              std::__basic_string_common<true>::__throw_length_error();
            v61 = (const void *)*((_QWORD *)a3 + 2);
            if ( v60 >= 0x17 )
            {
              v62 = (_BYTE *)operator new((v60 + 16) & 0xFFFFFFFFFFFFFFF0LL);
              *(_QWORD *)&v111[16] = v60;
              v112 = v62;
              *(_QWORD *)&v111[8] = (v60 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
            }
            else
            {
              v62 = &v111[9];
              v111[8] = 2 * v60;
              if ( !v60 )
                goto LABEL_114;
            }
            memcpy(v62, v61, v60);
LABEL_114:
            v62[v60] = 0;
LABEL_115:
            std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::pair<rgbd::RgbdLocation,std::string>>(
              (__int64)v15,
              (int *)v111,
              (__int64)v111);
            if ( (v111[8] & 1) != 0 )
              operator delete(v112);
            memset(v111, 0, sizeof(v111));
            if ( (*a3 & 1) == 0 )
            {
              v63 = *(_OWORD *)a3;
              *(_QWORD *)&v111[16] = *((_QWORD *)a3 + 2);
              *(_OWORD *)v111 = v63;
LABEL_126:
              rgbd::RGBDParam::RGBDParam((rgbd::RGBDParam *)v113, (const rgbd::RGBDParam *)v110);
              std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::pair<std::string,rgbd::RGBDParam>>(
                (__int64)v4,
                v111,
                (__int128 *)v111);
              rgbd::RGBDParam::~RGBDParam((rgbd::RGBDParam *)v113);
              if ( (v111[0] & 1) != 0 )
                operator delete(*(void **)&v111[16]);
              rgbd::RGBDParam::~RGBDParam((rgbd::RGBDParam *)v110);
              return 1LL;
            }
            v64 = *((_QWORD *)a3 + 1);
            if ( v64 >= 0xFFFFFFFFFFFFFFF0LL )
              std::__basic_string_common<true>::__throw_length_error();
            v65 = (const void *)*((_QWORD *)a3 + 2);
            if ( v64 >= 0x17 )
            {
              v66 = (_BYTE *)operator new((v64 + 16) & 0xFFFFFFFFFFFFFFF0LL);
              *(_QWORD *)&v111[8] = v64;
              *(_QWORD *)&v111[16] = v66;
              *(_QWORD *)v111 = (v64 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
            }
            else
            {
              v66 = &v111[1];
              v111[0] = 2 * v64;
              if ( !v64 )
                goto LABEL_125;
            }
            memcpy(v66, v65, v64);
LABEL_125:
            v66[v64] = 0;
            goto LABEL_126;
          }
        }
        memcpy(v48, v45, v47);
        goto LABEL_86;
      }
    }
    memcpy(v43, v40, v42);
    goto LABEL_76;
  }
  if ( (word_331A8 & 1) != 0 )
    v9 = (const char *)qword_331B8;
  else
    v9 = (char *)&word_331A8 + 1;
  v106 = dword_331A0;
  v108 = 0LL;
  v109 = 0LL;
  v107 = 0LL;
  v10 = strlen(v9);
  if ( v10 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v11 = v10;
  if ( v10 >= 0x17 )
  {
    v18 = (v10 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v12 = (char *)operator new(v18);
    v108 = v11;
    v109 = v12;
    v107 = v18 | 1;
    goto LABEL_14;
  }
  v12 = (char *)&v107 + 1;
  LOBYTE(v107) = 2 * v10;
  if ( v10 )
LABEL_14:
    memcpy(v12, v9, v11);
  v12[v11] = 0;
  if ( (g3::logLevel(&v106) & 1) == 0 )
  {
    v23 = 0;
    if ( (v107 & 1) == 0 )
      goto LABEL_43;
    goto LABEL_21;
  }
  v104 = 0LL;
  v105 = 0LL;
  v103 = 0LL;
  v19 = rgbd::ASTAG;
  v20 = strlen(rgbd::ASTAG);
  if ( v20 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v21 = v20;
  if ( v20 >= 0x17 )
  {
    v33 = (v20 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v22 = (char *)operator new(v33);
    v104 = v21;
    v105 = v22;
    v103 = v33 | 1;
    goto LABEL_40;
  }
  v22 = (char *)&v103 + 1;
  LOBYTE(v103) = 2 * v20;
  if ( v20 )
LABEL_40:
    memcpy(v22, v19, v21);
  v22[v21] = 0;
  v23 = g3::logTag(&v103);
  if ( (v103 & 1) == 0 )
  {
    if ( (v107 & 1) == 0 )
      goto LABEL_43;
LABEL_21:
    operator delete(v109);
    if ( (v23 & 1) != 0 )
      goto LABEL_44;
LABEL_22:
    if ( !a1[148] )
      goto LABEL_51;
    goto LABEL_23;
  }
  operator delete(v105);
  if ( (v107 & 1) != 0 )
    goto LABEL_21;
LABEL_43:
  if ( (v23 & 1) == 0 )
    goto LABEL_22;
LABEL_44:
  LogCapture::LogCapture((LogCapture *)v111, rgbd::ASTAG, (const LEVELS *)&dword_331A0, "", 6, 0LL);
  v34 = std::__put_character_sequence<char,std::char_traits<char>>(
          &v111[8],
          (__int64)"repetitive serial number, ",
          26LL);
  v35 = *a3;
  if ( (v35 & 1) != 0 )
    v36 = *((_QWORD *)a3 + 2);
  else
    v36 = (__int64)(a3 + 1);
  if ( (v35 & 1) != 0 )
    v37 = *((_QWORD *)a3 + 1);
  else
    v37 = v35 >> 1;
  std::__put_character_sequence<char,std::char_traits<char>>(v34, v36, v37);
  LogCapture::~LogCapture((LogCapture *)v111);
  if ( !a1[148] )
  {
LABEL_51:
    if ( !a1[153] )
      return 0LL;
    goto LABEL_31;
  }
LABEL_23:
  v24 = (void **)a1[147];
  if ( v24 )
  {
    do
    {
      v25 = (void **)*v24;
      rgbd::RGBDParam::~RGBDParam((rgbd::RGBDParam *)(v24 + 6));
      if ( ((_BYTE)v24[2] & 1) != 0 )
        operator delete(v24[4]);
      operator delete(v24);
      v24 = v25;
    }
    while ( v25 );
  }
  v26 = a1[146];
  a1[147] = 0LL;
  if ( v26 )
  {
    for ( k = 0LL; k != v26; ++k )
      *(_QWORD *)(*v4 + 8 * k) = 0LL;
  }
  a1[148] = 0LL;
  if ( !a1[153] )
    return 0LL;
LABEL_31:
  v28 = (void **)a1[152];
  if ( v28 )
  {
    do
    {
      v29 = (void **)*v28;
      if ( ((_BYTE)v28[3] & 1) != 0 )
        operator delete(v28[5]);
      operator delete(v28);
      v28 = v29;
    }
    while ( v29 );
  }
  v30 = a1[151];
  a1[152] = 0LL;
  if ( v30 )
  {
    for ( m = 0LL; m != v30; ++m )
      *(_QWORD *)(a1[150] + 8 * m) = 0LL;
  }
LABEL_38:
  result = 0LL;
  a1[153] = 0LL;
  return result;
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DB70: using guessed type __int64 __fastcall rgbd::RGBDParam::setSerialNum(_QWORD, _QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 33008: using guessed type char *rgbd::ASTAG;
// 33120: using guessed type int dword_33120;
// 33128: using guessed type __int16 word_33128;
// 33138: using guessed type __int64 qword_33138;
// 331A0: using guessed type int dword_331A0;
// 331A8: using guessed type __int16 word_331A8;
// 331B8: using guessed type __int64 qword_331B8;

//----- (00000000000145B8) ----------------------------------------------------
void __fastcall rgbd::RGBDParam::~RGBDParam(rgbd::RGBDParam *this)
{
  rgbd::RGBDParam *v2; // x0
  void (*v3)(void); // x8
  rgbd::RGBDParam *v4; // x0
  void (*v5)(void); // x8
  std::__shared_weak_count *v6; // x20
  unsigned __int64 *v7; // x8
  unsigned __int64 v8; // x9
  std::__shared_weak_count *v9; // x0

  v2 = (rgbd::RGBDParam *)*((_QWORD *)this + 24);
  if ( (rgbd::RGBDParam *)((char *)this + 160) == v2 )
  {
    v3 = *(void (**)(void))(*(_QWORD *)v2 + 32LL);
  }
  else
  {
    if ( !v2 )
      goto LABEL_6;
    v3 = *(void (**)(void))(*(_QWORD *)v2 + 40LL);
  }
  v3();
LABEL_6:
  v4 = (rgbd::RGBDParam *)*((_QWORD *)this + 18);
  if ( (rgbd::RGBDParam *)((char *)this + 112) == v4 )
  {
    v5 = *(void (**)(void))(*(_QWORD *)v4 + 32LL);
    goto LABEL_10;
  }
  if ( v4 )
  {
    v5 = *(void (**)(void))(*(_QWORD *)v4 + 40LL);
LABEL_10:
    v5();
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
  if ( !v6 )
    goto LABEL_15;
  v7 = (unsigned __int64 *)((char *)v6 + 8);
  do
    v8 = __ldaxr(v7);
  while ( __stlxr(v8 - 1, v7) );
  if ( !v8 )
  {
    (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v6 + 16LL))(v6);
    std::__shared_weak_count::__release_weak(v6);
    if ( (*((_BYTE *)this + 48) & 1) == 0 )
    {
LABEL_16:
      if ( (*((_BYTE *)this + 16) & 1) == 0 )
        goto LABEL_17;
      goto LABEL_21;
    }
  }
  else
  {
LABEL_15:
    if ( (*((_BYTE *)this + 48) & 1) == 0 )
      goto LABEL_16;
  }
  operator delete(*((void **)this + 8));
  if ( (*((_BYTE *)this + 16) & 1) == 0 )
  {
LABEL_17:
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
    if ( !v9 )
      return;
    goto LABEL_18;
  }
LABEL_21:
  operator delete(*((void **)this + 4));
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if ( v9 )
LABEL_18:
    std::__shared_weak_count::__release_weak(v9);
}

//----- (00000000000146B0) ----------------------------------------------------
__int64 **__fastcall rgbd::RGBDAngStrong::updateRgbdSet(__int64 a1, int *a2, __int64 *a3)
{
  __int64 v3; // x21
  __int64 **result; // x0
  _QWORD *v8; // x0
  __int64 *v9; // x22
  int v10; // w8
  __int64 *v11; // x0
  unsigned __int64 v12; // x8
  void *v13; // x1
  size_t v14; // x2
  _QWORD *v15; // x0
  int v16; // [xsp+0h] [xbp-60h] BYREF
  signed __int8 v17[8]; // [xsp+10h] [xbp-50h] BYREF
  __int64 v18; // [xsp+18h] [xbp-48h]

  v3 = a1 + 1160;
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  result = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::find<std::string>(
             (_QWORD *)(a1 + 1160),
             (unsigned __int8 *)a3);
  if ( result )
  {
    *(_QWORD *)v17 = a3;
    v8 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
           v3,
           (unsigned __int8 *)a3,
           (__int64)&unk_1D9F4,
           (__int128 **)v17);
    v9 = (__int64 *)(a1 + 1200);
    *(_DWORD *)v17 = rgbd::RGBDParam::getLocation((rgbd::RGBDParam *)(v8 + 6));
    std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__erase_unique<rgbd::RgbdLocation>(
      v9,
      (int *)v17);
    v10 = *a2;
    *(_QWORD *)v17 = &v16;
    v16 = v10;
    v11 = std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation&&>,std::tuple<>>(
            (__int64)v9,
            &v16,
            (__int64)&unk_1D9F4,
            (int **)v17)
        + 3;
    if ( v11 != a3 )
    {
      v12 = *(unsigned __int8 *)a3;
      if ( (v12 & 1) != 0 )
        v13 = (void *)a3[2];
      else
        v13 = (char *)a3 + 1;
      if ( (v12 & 1) != 0 )
        v14 = a3[1];
      else
        v14 = v12 >> 1;
      std::string::assign(v11, v13, v14);
    }
    *(_QWORD *)v17 = a3;
    v15 = std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
            v3,
            (unsigned __int8 *)a3,
            (__int64)&unk_1D9F4,
            (__int128 **)v17);
    v17[0] = *a2;
    rgbd::RGBDParam::changeLocation((rgbd::RGBDParam *)(v15 + 6), v17);
    return (__int64 **)(&dword_0 + 1);
  }
  return result;
}
// 0: using guessed type int dword_0;

//----- (00000000000147F0) ----------------------------------------------------
void __usercall rgbd::RGBDAngStrong::getSerialNumber(rgbd::RGBDAngStrong *this@<X0>, _QWORD *a2@<X8>)
{
  const char *v3; // x21
  size_t v4; // x0
  size_t v5; // x20
  char *v6; // x22
  unsigned __int64 v7; // x23
  char *v8; // x20
  size_t v9; // x0
  size_t v10; // x21
  char *v11; // x22
  char v12; // w20
  unsigned __int64 v13; // x23
  unsigned __int64 v14; // [xsp+8h] [xbp-1C8h] BYREF
  size_t v15; // [xsp+10h] [xbp-1C0h]
  void *v16; // [xsp+18h] [xbp-1B8h]
  int v17; // [xsp+20h] [xbp-1B0h] BYREF
  unsigned __int64 v18; // [xsp+28h] [xbp-1A8h] BYREF
  size_t v19; // [xsp+30h] [xbp-1A0h]
  void *v20; // [xsp+38h] [xbp-198h]
  char v21[8]; // [xsp+40h] [xbp-190h] BYREF
  _QWORD v22[41]; // [xsp+48h] [xbp-188h] BYREF

  v22[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  rgbd::RGBDAngStrong::chmodDevices(this);
  *a2 = 0LL;
  a2[1] = 0LL;
  a2[2] = 0LL;
  if ( (unsigned int)v4l2Capture::enumerateDevices(a2) )
  {
    if ( (word_331A8 & 1) != 0 )
      v3 = (const char *)qword_331B8;
    else
      v3 = (char *)&word_331A8 + 1;
    v17 = dword_331A0;
    v19 = 0LL;
    v20 = 0LL;
    v18 = 0LL;
    v4 = strlen(v3);
    if ( v4 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v5 = v4;
    if ( v4 >= 0x17 )
    {
      v7 = (v4 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v6 = (char *)operator new(v7);
      v19 = v5;
      v20 = v6;
      v18 = v7 | 1;
    }
    else
    {
      v6 = (char *)&v18 + 1;
      LOBYTE(v18) = 2 * v4;
      if ( !v4 )
      {
LABEL_11:
        v6[v5] = 0;
        if ( (g3::logLevel(&v17) & 1) == 0 )
        {
          v12 = 0;
          if ( (v18 & 1) == 0 )
            goto LABEL_22;
          goto LABEL_25;
        }
        v15 = 0LL;
        v16 = 0LL;
        v14 = 0LL;
        v8 = rgbd::ASTAG;
        v9 = strlen(rgbd::ASTAG);
        if ( v9 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v10 = v9;
        if ( v9 >= 0x17 )
        {
          v13 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v11 = (char *)operator new(v13);
          v15 = v10;
          v16 = v11;
          v14 = v13 | 1;
        }
        else
        {
          v11 = (char *)&v14 + 1;
          LOBYTE(v14) = 2 * v9;
          if ( !v9 )
          {
LABEL_20:
            v11[v10] = 0;
            v12 = g3::logTag(&v14);
            if ( (v14 & 1) != 0 )
            {
              operator delete(v16);
              if ( (v18 & 1) == 0 )
              {
LABEL_22:
                if ( (v12 & 1) == 0 )
                  return;
LABEL_26:
                LogCapture::LogCapture((LogCapture *)v21, rgbd::ASTAG, (const LEVELS *)&dword_331A0, "", 6, 0LL);
                std::__put_character_sequence<char,std::char_traits<char>>(v22, (__int64)"Get serial number fail", 22LL);
                LogCapture::~LogCapture((LogCapture *)v21);
                return;
              }
            }
            else if ( (v18 & 1) == 0 )
            {
              goto LABEL_22;
            }
LABEL_25:
            operator delete(v20);
            if ( (v12 & 1) == 0 )
              return;
            goto LABEL_26;
          }
        }
        memcpy(v11, v8, v10);
        goto LABEL_20;
      }
    }
    memcpy(v6, v3, v5);
    goto LABEL_11;
  }
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DA80: using guessed type __int64 __fastcall v4l2Capture::enumerateDevices(_QWORD);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 33008: using guessed type char *rgbd::ASTAG;
// 331A0: using guessed type int dword_331A0;
// 331A8: using guessed type __int16 word_331A8;
// 331B8: using guessed type __int64 qword_331B8;
// 147F0: using guessed type char var_190[8];

//----- (0000000000014AF4) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::openDevice(rgbd::RGBDAngStrong *this)
{
  return 1LL;
}

//----- (0000000000014AFC) ----------------------------------------------------
unsigned __int64 __fastcall rgbd::RGBDAngStrong::waitForFrame(rgbd::RGBDAngStrong *this)
{
  unsigned __int8 v1; // w8
  unsigned int v2; // w21
  unsigned int v3; // w23
  std::mutex *v4; // x19
  void *v6; // x1
  const char *v7; // x22
  size_t v8; // x0
  size_t v9; // x21
  char *v10; // x23
  unsigned __int64 v11; // x24
  char *v12; // x21
  size_t v13; // x0
  size_t v14; // x22
  char *v15; // x23
  char v16; // w21
  unsigned __int64 v17; // x24
  _QWORD *v18; // x0
  _QWORD *v19; // x0
  _QWORD *v20; // x0
  const char *v21; // x22
  size_t v22; // x0
  size_t v23; // x21
  char *v24; // x23
  unsigned __int64 v25; // x24
  char *v26; // x21
  size_t v27; // x0
  size_t v28; // x22
  char *v29; // x23
  char v30; // w21
  unsigned __int64 v31; // x24
  void *v32; // x0
  unsigned int *v33; // x8
  unsigned int v34; // w9
  unsigned int v35; // w9
  _QWORD *v36; // x8
  __int64 v37; // x9
  unsigned __int64 v39; // [xsp+8h] [xbp-288h] BYREF
  size_t v40; // [xsp+10h] [xbp-280h]
  void *v41; // [xsp+18h] [xbp-278h]
  int v42; // [xsp+20h] [xbp-270h] BYREF
  unsigned __int64 v43; // [xsp+28h] [xbp-268h] BYREF
  size_t v44; // [xsp+30h] [xbp-260h]
  void *v45; // [xsp+38h] [xbp-258h]
  unsigned __int64 v46; // [xsp+40h] [xbp-250h] BYREF
  size_t v47; // [xsp+48h] [xbp-248h]
  void *v48; // [xsp+50h] [xbp-240h]
  int v49; // [xsp+58h] [xbp-238h] BYREF
  unsigned __int64 v50; // [xsp+60h] [xbp-230h] BYREF
  size_t v51; // [xsp+68h] [xbp-228h]
  void *v52; // [xsp+70h] [xbp-220h]
  void *v53; // [xsp+78h] [xbp-218h] BYREF
  void *v54; // [xsp+80h] [xbp-210h]
  __int64 v55; // [xsp+88h] [xbp-208h]
  char v56[8]; // [xsp+90h] [xbp-200h] BYREF
  _QWORD v57[40]; // [xsp+98h] [xbp-1F8h] BYREF
  _QWORD v58[8]; // [xsp+1D8h] [xbp-B8h] BYREF
  _QWORD *v59; // [xsp+218h] [xbp-78h]
  cv *v60; // [xsp+220h] [xbp-70h]
  __int64 v61[3]; // [xsp+228h] [xbp-68h] BYREF

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v1 = atomic_load((unsigned __int8 *)this + 1048);
  if ( (v1 & 1) == 0 )
  {
    v2 = 0;
    v3 = -1;
    return v3 | ((unsigned __int64)v2 << 32);
  }
  v4 = (rgbd::RGBDAngStrong *)((char *)this + 960);
  std::mutex::lock((rgbd::RGBDAngStrong *)((char *)this + 960));
  LODWORD(v58[0]) = 1124007936;
  memset((char *)v58 + 4, 0, 60);
  v54 = 0LL;
  v55 = 0LL;
  v59 = &v58[1];
  v60 = (cv *)v61;
  v61[0] = 0LL;
  v61[1] = 0LL;
  v53 = 0LL;
  if ( (unsigned int)v4l2Capture::read(*((_QWORD *)this + 6), v58, &v53, 1LL, 1LL) )
  {
LABEL_56:
    v2 = 0;
    v3 = -1;
    v32 = v53;
    if ( !v53 )
      goto LABEL_58;
    goto LABEL_57;
  }
  if ( (word_33188 & 1) != 0 )
    v7 = (const char *)qword_33198;
  else
    v7 = (char *)&word_33188 + 1;
  v49 = dword_33180;
  v51 = 0LL;
  v52 = 0LL;
  v50 = 0LL;
  v8 = strlen(v7);
  if ( v8 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v9 = v8;
  if ( v8 >= 0x17 )
  {
    v11 = (v8 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v10 = (char *)operator new(v11);
    v51 = v9;
    v52 = v10;
    v50 = v11 | 1;
    goto LABEL_12;
  }
  v10 = (char *)&v50 + 1;
  LOBYTE(v50) = 2 * v8;
  if ( v8 )
LABEL_12:
    memcpy(v10, v7, v9);
  v10[v9] = 0;
  if ( (g3::logLevel(&v49) & 1) == 0 )
  {
    v16 = 0;
    if ( (v50 & 1) == 0 )
      goto LABEL_25;
    goto LABEL_19;
  }
  v47 = 0LL;
  v48 = 0LL;
  v46 = 0LL;
  v12 = rgbd::ASTAG;
  v13 = strlen(rgbd::ASTAG);
  if ( v13 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v14 = v13;
  if ( v13 >= 0x17 )
  {
    v17 = (v13 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v15 = (char *)operator new(v17);
    v47 = v14;
    v48 = v15;
    v46 = v17 | 1;
    goto LABEL_22;
  }
  v15 = (char *)&v46 + 1;
  LOBYTE(v46) = 2 * v13;
  if ( v13 )
LABEL_22:
    memcpy(v15, v12, v14);
  v15[v14] = 0;
  v16 = g3::logTag(&v46);
  if ( (v46 & 1) != 0 )
  {
    operator delete(v48);
    if ( (v50 & 1) == 0 )
    {
LABEL_25:
      if ( (v16 & 1) == 0 )
        goto LABEL_27;
      goto LABEL_26;
    }
  }
  else if ( (v50 & 1) == 0 )
  {
    goto LABEL_25;
  }
LABEL_19:
  operator delete(v52);
  if ( (v16 & 1) == 0 )
    goto LABEL_27;
LABEL_26:
  LogCapture::LogCapture((LogCapture *)v56, rgbd::ASTAG, (const LEVELS *)&dword_33180, "", 6, 0LL);
  v18 = std::__put_character_sequence<char,std::char_traits<char>>(v57, (__int64)"read depath, row:", 17LL);
  v19 = std::ostream::operator<<(v18);
  v20 = std::__put_character_sequence<char,std::char_traits<char>>(v19, (__int64)",cols:", 6LL);
  std::ostream::operator<<(v20);
  LogCapture::~LogCapture((LogCapture *)v56);
LABEL_27:
  if ( (pudutech::Ashdmem::destroyMemory(*((pudutech::Ashdmem **)this + 141)) & 1) != 0 )
    goto LABEL_53;
  if ( (word_33128 & 1) != 0 )
    v21 = (const char *)qword_33138;
  else
    v21 = (char *)&word_33128 + 1;
  v42 = dword_33120;
  v44 = 0LL;
  v45 = 0LL;
  v43 = 0LL;
  v22 = strlen(v21);
  if ( v22 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v23 = v22;
  if ( v22 >= 0x17 )
  {
    v25 = (v22 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v24 = (char *)operator new(v25);
    v44 = v23;
    v45 = v24;
    v43 = v25 | 1;
    goto LABEL_38;
  }
  v24 = (char *)&v43 + 1;
  LOBYTE(v43) = 2 * v22;
  if ( v22 )
LABEL_38:
    memcpy(v24, v21, v23);
  v24[v23] = 0;
  if ( (g3::logLevel(&v42) & 1) == 0 )
  {
    v30 = 0;
    if ( (v43 & 1) == 0 )
      goto LABEL_51;
    goto LABEL_45;
  }
  v40 = 0LL;
  v41 = 0LL;
  v39 = 0LL;
  v26 = rgbd::ASTAG;
  v27 = strlen(rgbd::ASTAG);
  if ( v27 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v28 = v27;
  if ( v27 >= 0x17 )
  {
    v31 = (v27 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v29 = (char *)operator new(v31);
    v40 = v28;
    v41 = v29;
    v39 = v31 | 1;
    goto LABEL_48;
  }
  v29 = (char *)&v39 + 1;
  LOBYTE(v39) = 2 * v27;
  if ( v27 )
LABEL_48:
    memcpy(v29, v26, v28);
  v29[v28] = 0;
  v30 = g3::logTag(&v39);
  if ( (v39 & 1) != 0 )
  {
    operator delete(v41);
    if ( (v43 & 1) == 0 )
    {
LABEL_51:
      if ( (v30 & 1) == 0 )
        goto LABEL_53;
      goto LABEL_52;
    }
  }
  else if ( (v43 & 1) == 0 )
  {
    goto LABEL_51;
  }
LABEL_45:
  operator delete(v45);
  if ( (v30 & 1) == 0 )
    goto LABEL_53;
LABEL_52:
  LogCapture::LogCapture((LogCapture *)v56, rgbd::ASTAG, (const LEVELS *)&dword_33120, "", 6, 0LL);
  std::__put_character_sequence<char,std::char_traits<char>>(v57, (__int64)"close old memory failed", 23LL);
  LogCapture::~LogCapture((LogCapture *)v56);
LABEL_53:
  if ( (rgbd::RGBDAngStrong::packageRGBD(this, (const void **)v58) & 1) == 0 )
    goto LABEL_56;
  v3 = *((_DWORD *)this + 288);
  v2 = *((_DWORD *)this + 230);
  v32 = v53;
  if ( v53 )
  {
LABEL_57:
    v54 = v32;
    operator delete(v32);
  }
LABEL_58:
  if ( v58[7] )
  {
    v33 = (unsigned int *)(v58[7] + 20LL);
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while ( __stlxr(v35, v33) );
    if ( !v35 )
      cv::Mat::deallocate((cv::Mat *)v58);
  }
  v58[7] = 0LL;
  memset(&v58[2], 0, 32);
  if ( SHIDWORD(v58[0]) >= 1 )
  {
    v36 = v59;
    v37 = 0LL;
    do
      *((_DWORD *)v36 + v37++) = 0;
    while ( v37 < SHIDWORD(v58[0]) );
  }
  if ( v60 != (cv *)v61 )
    cv::fastFree(v60, v6);
  std::mutex::unlock(v4);
  return v3 | ((unsigned __int64)v2 << 32);
}
// 14FF4: variable 'v6' is possibly undefined
// D660: using guessed type __int64 __fastcall v4l2Capture::read(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 33008: using guessed type char *rgbd::ASTAG;
// 33120: using guessed type int dword_33120;
// 33128: using guessed type __int16 word_33128;
// 33138: using guessed type __int64 qword_33138;
// 33180: using guessed type int dword_33180;
// 33188: using guessed type __int16 word_33188;
// 33198: using guessed type __int64 qword_33198;
// 14AFC: using guessed type char var_200[8];

//----- (00000000000151AC) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDAngStrong::packageRGBD(rgbd::RGBDAngStrong *this, const void **a2)
{
  int v2; // w21
  int v3; // w24
  __int64 v5; // x0
  std::chrono::system_clock *Memory; // x0
  __int64 v8; // x1
  __int64 v9; // x22
  __int64 v10; // x24
  int v11; // w0
  unsigned int v12; // w21
  int v13; // w8
  const char *v14; // x20
  size_t v15; // x0
  size_t v16; // x19
  char *v17; // x21
  unsigned __int64 v18; // x22
  char *v19; // x19
  size_t v20; // x0
  size_t v21; // x20
  char *v22; // x21
  char v23; // w19
  unsigned __int64 v24; // x22
  unsigned __int64 v26; // [xsp+0h] [xbp-1E0h] BYREF
  size_t v27; // [xsp+8h] [xbp-1D8h]
  void *v28; // [xsp+10h] [xbp-1D0h]
  int v29; // [xsp+18h] [xbp-1C8h] BYREF
  unsigned __int64 v30; // [xsp+20h] [xbp-1C0h] BYREF
  size_t v31; // [xsp+28h] [xbp-1B8h]
  void *v32; // [xsp+30h] [xbp-1B0h]
  char v33; // [xsp+38h] [xbp-1A8h]
  _BYTE v34[23]; // [xsp+39h] [xbp-1A7h]
  _QWORD v35[2]; // [xsp+50h] [xbp-190h] BYREF
  void *v36; // [xsp+60h] [xbp-180h]
  __int64 v37; // [xsp+198h] [xbp-48h]

  v37 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *((_DWORD *)this + 230);
  v3 = *((_DWORD *)this + 231);
  v33 = 32;
  *(_QWORD *)&v34[15] = 0LL;
  v35[0] = 0LL;
  *(_OWORD *)v34 = *(_OWORD *)"angstrong_serial";
  v5 = *((_QWORD *)this + 141);
  LOBYTE(v35[0]) = 26;
  v36 = 0LL;
  strcpy((char *)v35 + 1, "angstrongrgbd");
  HIBYTE(v35[1]) = 0;
  Memory = (std::chrono::system_clock *)pudutech::Ashdmem::createMemory(v5, v35, *((unsigned int *)this + 8));
  *((_DWORD *)this + 288) = (_DWORD)Memory;
  *((_QWORD *)this + 143) = v8;
  if ( (v35[0] & 1) != 0 )
  {
    operator delete(v36);
    Memory = (std::chrono::system_clock *)*((unsigned int *)this + 288);
  }
  if ( (_DWORD)Memory == -1 || (v9 = *((_QWORD *)this + 143)) == 0 )
  {
    if ( (word_33188 & 1) != 0 )
      v14 = (const char *)qword_33198;
    else
      v14 = (char *)&word_33188 + 1;
    v29 = dword_33180;
    v31 = 0LL;
    v32 = 0LL;
    v30 = 0LL;
    v15 = strlen(v14);
    if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v16 = v15;
    if ( v15 >= 0x17 )
    {
      v18 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v17 = (char *)operator new(v18);
      v31 = v16;
      v32 = v17;
      v30 = v18 | 1;
    }
    else
    {
      v17 = (char *)&v30 + 1;
      LOBYTE(v30) = 2 * v15;
      if ( !v15 )
      {
LABEL_15:
        v17[v16] = 0;
        if ( (g3::logLevel(&v29) & 1) == 0 )
        {
          v23 = 0;
          if ( (v30 & 1) == 0 )
            goto LABEL_27;
          goto LABEL_21;
        }
        v27 = 0LL;
        v28 = 0LL;
        v26 = 0LL;
        v19 = rgbd::ASTAG;
        v20 = strlen(rgbd::ASTAG);
        if ( v20 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v21 = v20;
        if ( v20 >= 0x17 )
        {
          v24 = (v20 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v22 = (char *)operator new(v24);
          v27 = v21;
          v28 = v22;
          v26 = v24 | 1;
        }
        else
        {
          v22 = (char *)&v26 + 1;
          LOBYTE(v26) = 2 * v20;
          if ( !v20 )
          {
LABEL_25:
            v22[v21] = 0;
            v23 = g3::logTag(&v26);
            if ( (v26 & 1) != 0 )
            {
              operator delete(v28);
              if ( (v30 & 1) == 0 )
              {
LABEL_27:
                if ( (v23 & 1) == 0 )
                  return 0;
LABEL_28:
                LogCapture::LogCapture((LogCapture *)v35, rgbd::ASTAG, (const LEVELS *)&dword_33180, "", 6, 0LL);
                std::__put_character_sequence<char,std::char_traits<char>>(
                  &v35[1],
                  (__int64)"failed to create memory for angstrong rgbd",
                  42LL);
                LogCapture::~LogCapture((LogCapture *)v35);
                return 0;
              }
            }
            else if ( (v30 & 1) == 0 )
            {
              goto LABEL_27;
            }
LABEL_21:
            operator delete(v32);
            if ( (v23 & 1) == 0 )
              return 0;
            goto LABEL_28;
          }
        }
        memcpy(v22, v19, v21);
        goto LABEL_25;
      }
    }
    memcpy(v17, v14, v16);
    goto LABEL_15;
  }
  v10 = v3 * v2;
  v11 = std::chrono::system_clock::now(Memory);
  *(_DWORD *)(v9 + 8) = 981668463;
  *(_DWORD *)v9 = v11 / 1000000;
  *(_DWORD *)(v9 + 4) = 1000000 * (v11 / 1000 - 1000 * (v11 / 1000000));
  v12 = 1;
  *(_DWORD *)(v9 + 12) = *((_DWORD *)this + 230);
  v13 = *((_DWORD *)this + 231);
  *(_OWORD *)(v9 + 20) = xmmword_1D260;
  *(_DWORD *)(v9 + 36) = 1;
  *(_QWORD *)(v9 + 40) = 0LL;
  *(_QWORD *)(v9 + 48) = 0LL;
  *(_DWORD *)(v9 + 16) = v13;
  *(_QWORD *)(v9 + 56) = 0x1000000000LL;
  *(_OWORD *)(v9 + 64) = *(_OWORD *)v34;
  memcpy((void *)(v9 + 80), a2[2], 2 * v10);
  return v12;
}
// 15244: variable 'v8' is possibly undefined
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// D720: using guessed type __int64 __fastcall pudutech::Ashdmem::createMemory(_QWORD, _QWORD, _QWORD);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 1D260: using guessed type __int128 xmmword_1D260;
// 33008: using guessed type char *rgbd::ASTAG;
// 33180: using guessed type int dword_33180;
// 33188: using guessed type __int16 word_33188;
// 33198: using guessed type __int64 qword_33198;

//----- (00000000000155B4) ----------------------------------------------------
__int64 rgbd::RGBDAngStrong::validateFwVersion()
{
  return 1LL;
}

//----- (00000000000155BC) ----------------------------------------------------
__int64 rgbd::RGBDAngStrong::updateFw()
{
  return 1LL;
}

//----- (00000000000155C8) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::static_delete(__int64 a1, void **a2)
{
  if ( *a2 )
    operator delete(*a2);
  *a2 = 0LL;
}

//----- (00000000000155F4) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::copy_from_value(
        __int64 a1,
        __int64 a2,
        _QWORD *a3)
{
  __int64 result; // x0

  result = operator new(1uLL);
  *a3 = result;
  return result;
}

//----- (000000000001561C) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::clone(
        __int64 a1,
        __int64 a2,
        _QWORD *a3)
{
  __int64 result; // x0

  result = operator new(1uLL);
  *a3 = result;
  return result;
}

//----- (0000000000015648) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (0000000000015650) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (0000000000015658) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::get_size()
{
  return 1LL;
}

//----- (0000000000015660) ----------------------------------------------------
void **cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::type()
{
  return &`typeinfo for'cvflann::anyimpl::empty_any;
}
// 325E0: using guessed type void *`typeinfo for'cvflann::anyimpl::empty_any;

//----- (000000000001566C) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::print(int a1, _QWORD *a2)
{
  return std::__put_character_sequence<char,std::char_traits<char>>(a2, (__int64)"[empty_any]", 11LL);
}

//----- (000000000001568C) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::copy_from_value(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (0000000000015698) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (00000000000156A4) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (00000000000156B0) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<char const*>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (00000000000156B8) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<char const*>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (00000000000156C0) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<char const*>::get_size()
{
  return 8LL;
}

//----- (00000000000156C8) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<char const*>::type()
{
  return &`typeinfo for'char const*;
}

//----- (00000000000156D4) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<char const*>::print(__int64 a1, _QWORD *a2, const char **a3)
{
  const char *v3; // x19
  __int64 v5; // x2

  v3 = *a3;
  v5 = strlen(*a3);
  return std::__put_character_sequence<char,std::char_traits<char>>(a2, (__int64)v3, v5);
}

//----- (0000000000015710) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<int>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000001571C) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<int>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (0000000000015728) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<int>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (0000000000015734) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<int>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000001573C) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<int>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (0000000000015744) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<int>::get_size()
{
  return 4LL;
}

//----- (000000000001574C) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<int>::type()
{
  return &`typeinfo for'int;
}

//----- (0000000000015758) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<int>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (0000000000015770) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<float>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000001577C) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<float>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (0000000000015788) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<float>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (0000000000015794) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<float>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000001579C) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<float>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (00000000000157A4) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<float>::get_size()
{
  return 4LL;
}

//----- (00000000000157AC) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<float>::type()
{
  return &`typeinfo for'float;
}

//----- (00000000000157B8) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<float>::print(__int64 a1, _QWORD *a2, float *a3)
{
  return std::ostream::operator<<(a2, *a3);
}

//----- (00000000000157CC) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<bool>::copy_from_value(__int64 a1, _BYTE *a2, _BYTE *a3)
{
  *a3 = *a2;
}

//----- (00000000000157D8) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<bool>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (00000000000157E4) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<bool>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (00000000000157F0) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<bool>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (00000000000157F8) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<bool>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (0000000000015800) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<bool>::get_size()
{
  return 1LL;
}

//----- (0000000000015808) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<bool>::type()
{
  return &`typeinfo for'bool;
}

//----- (0000000000015814) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<bool>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (0000000000015828) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::static_delete(__int64 a1, void **a2)
{
  if ( *a2 )
    operator delete(*a2);
  *a2 = 0LL;
}

//----- (0000000000015854) ----------------------------------------------------
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::copy_from_value(
        __int64 a1,
        _DWORD *a2,
        _QWORD *a3)
{
  _DWORD *result; // x0

  result = (_DWORD *)operator new(4uLL);
  *result = *a2;
  *a3 = result;
  return result;
}

//----- (0000000000015888) ----------------------------------------------------
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::clone(
        __int64 a1,
        _DWORD **a2,
        _QWORD *a3)
{
  _DWORD *result; // x0

  result = (_DWORD *)operator new(4uLL);
  *result = **a2;
  *a3 = result;
  return result;
}

//----- (00000000000158C0) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::move(
        __int64 a1,
        _DWORD **a2,
        _DWORD **a3)
{
  **a3 = **a2;
}

//----- (00000000000158D4) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (00000000000158DC) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (00000000000158E4) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::get_size()
{
  return 4LL;
}

//----- (00000000000158EC) ----------------------------------------------------
void **cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::type()
{
  return &`typeinfo for'cvflann::flann_algorithm_t;
}
// 325F0: using guessed type void *`typeinfo for'cvflann::flann_algorithm_t;

//----- (00000000000158F8) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (0000000000015910) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::static_delete(__int64 a1, void **a2)
{
  if ( *a2 )
    operator delete(*a2);
  *a2 = 0LL;
}

//----- (000000000001593C) ----------------------------------------------------
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::copy_from_value(
        __int64 a1,
        _DWORD *a2,
        _QWORD *a3)
{
  _DWORD *result; // x0

  result = (_DWORD *)operator new(4uLL);
  *result = *a2;
  *a3 = result;
  return result;
}

//----- (0000000000015970) ----------------------------------------------------
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::clone(
        __int64 a1,
        _DWORD **a2,
        _QWORD *a3)
{
  _DWORD *result; // x0

  result = (_DWORD *)operator new(4uLL);
  *result = **a2;
  *a3 = result;
  return result;
}

//----- (00000000000159A8) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::move(
        __int64 a1,
        _DWORD **a2,
        _DWORD **a3)
{
  **a3 = **a2;
}

//----- (00000000000159BC) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (00000000000159C4) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (00000000000159CC) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::get_size()
{
  return 4LL;
}

//----- (00000000000159D4) ----------------------------------------------------
void **cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::type()
{
  return &`typeinfo for'cvflann::flann_centers_init_t;
}
// 32600: using guessed type void *`typeinfo for'cvflann::flann_centers_init_t;

//----- (00000000000159E0) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (00000000000159FC) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3)
{
  *a3 = *a2;
}

//----- (0000000000015A08) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (0000000000015A14) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (0000000000015A20) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (0000000000015A28) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (0000000000015A30) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<unsigned int>::get_size()
{
  return 4LL;
}

//----- (0000000000015A38) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<unsigned int>::type()
{
  return &`typeinfo for'unsigned int;
}

//----- (0000000000015A44) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<unsigned int>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (0000000000015A58) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<std::string>::static_delete(__int64 a1, void **a2)
{
  void **v2; // x20

  v2 = (void **)*a2;
  if ( *a2 )
  {
    if ( (*(_BYTE *)v2 & 1) != 0 )
      operator delete(v2[2]);
    operator delete(v2);
  }
  *a2 = 0LL;
}

//----- (0000000000015A98) ----------------------------------------------------
size_t *__fastcall cvflann::anyimpl::big_any_policy<std::string>::copy_from_value(
        __int64 a1,
        __int128 *a2,
        size_t **a3)
{
  size_t *result; // x0
  size_t *v6; // x19
  __int128 v7; // q0
  size_t v8; // x21
  const void *v9; // x22
  void *v10; // x23

  result = (size_t *)operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *result = 0LL;
  v6 = result;
  if ( (*(_BYTE *)a2 & 1) != 0 )
  {
    v8 = *((_QWORD *)a2 + 1);
    if ( v8 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v9 = (const void *)*((_QWORD *)a2 + 2);
    if ( v8 >= 0x17 )
    {
      v10 = (void *)operator new((v8 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v6[1] = v8;
      v6[2] = (size_t)v10;
      *v6 = (v8 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      *(_BYTE *)result = 2 * v8;
      v10 = (char *)result + 1;
      if ( !v8 )
        goto LABEL_9;
    }
    result = (size_t *)memcpy(v10, v9, v8);
LABEL_9:
    *((_BYTE *)v10 + v8) = 0;
    goto LABEL_10;
  }
  v7 = *a2;
  result[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v7;
LABEL_10:
  *a3 = v6;
  return result;
}

//----- (0000000000015B78) ----------------------------------------------------
size_t *__fastcall cvflann::anyimpl::big_any_policy<std::string>::clone(__int64 a1, __int128 **a2, size_t **a3)
{
  size_t *result; // x0
  __int128 *v6; // x8
  size_t *v7; // x19
  __int128 v8; // q0
  size_t v9; // x21
  const void *v10; // x22
  void *v11; // x23

  result = (size_t *)operator new(0x18uLL);
  v6 = *a2;
  result[1] = 0LL;
  result[2] = 0LL;
  *result = 0LL;
  v7 = result;
  if ( (*(_BYTE *)v6 & 1) != 0 )
  {
    v9 = *((_QWORD *)v6 + 1);
    if ( v9 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v10 = (const void *)*((_QWORD *)v6 + 2);
    if ( v9 >= 0x17 )
    {
      v11 = (void *)operator new((v9 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v7[1] = v9;
      v7[2] = (size_t)v11;
      *v7 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      *(_BYTE *)result = 2 * v9;
      v11 = (char *)result + 1;
      if ( !v9 )
        goto LABEL_9;
    }
    result = (size_t *)memcpy(v11, v10, v9);
LABEL_9:
    *((_BYTE *)v11 + v9) = 0;
    goto LABEL_10;
  }
  v8 = *v6;
  result[2] = *((_QWORD *)v6 + 2);
  *(_OWORD *)result = v8;
LABEL_10:
  *a3 = v7;
  return result;
}

//----- (0000000000015C5C) ----------------------------------------------------
__int64 *__fastcall cvflann::anyimpl::big_any_policy<std::string>::move(__int64 a1, __int64 **a2, __int64 **a3)
{
  __int64 *result; // x0
  __int64 *v6; // x8
  unsigned __int64 v7; // x9
  void *v8; // x1
  size_t v9; // x2

  result = *a3;
  if ( (*(_BYTE *)*a3 & 1) != 0 )
  {
    operator delete((void *)result[2]);
    result = *a3;
  }
  v6 = *a2;
  if ( result != *a2 )
  {
    v7 = *(unsigned __int8 *)v6;
    if ( (v7 & 1) != 0 )
      v8 = (void *)v6[2];
    else
      v8 = (char *)v6 + 1;
    if ( (v7 & 1) != 0 )
      v9 = v6[1];
    else
      v9 = v7 >> 1;
    return std::string::assign(result, v8, v9);
  }
  return result;
}

//----- (0000000000015CBC) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<std::string>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (0000000000015CC4) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<std::string>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (0000000000015CCC) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<std::string>::get_size()
{
  return 24LL;
}

//----- (0000000000015CD4) ----------------------------------------------------
void **cvflann::anyimpl::typed_base_any_policy<std::string>::type()
{
  return &`typeinfo for'std::string;
}
// 32620: using guessed type void *`typeinfo for'std::string;

//----- (0000000000015CE0) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<std::string>::print(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  _BYTE *v3; // x8
  const char *v5; // x20
  __int64 v6; // x2

  v3 = (_BYTE *)*a3;
  if ( (*(_BYTE *)*a3 & 1) != 0 )
    v5 = (const char *)*((_QWORD *)v3 + 2);
  else
    v5 = v3 + 1;
  v6 = strlen(v5);
  return std::__put_character_sequence<char,std::char_traits<char>>(a2, (__int64)v5, v6);
}

//----- (0000000000015D2C) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000015D7C) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000015DCC) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
      (__int64)(a2 + 7),
      (_QWORD *)a2[8]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000015E28) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000015E78) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[5] & 1) != 0 )
      operator delete((void *)a2[7]);
    operator delete(a2);
  }
}

//----- (0000000000015EC8) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    operator delete(a2);
  }
}

//----- (0000000000015F08) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    operator delete(a2);
  }
}

//----- (0000000000015F48) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,rgbd::FrameTime>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::FrameTime>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::FrameTime>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,rgbd::FrameTime>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::FrameTime>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::FrameTime>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,rgbd::FrameTime>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::FrameTime>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::FrameTime>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000015F98) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000015FE8) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,rgbd::AngStrongInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::AngStrongInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::AngStrongInfo>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,rgbd::AngStrongInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::AngStrongInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::AngStrongInfo>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,rgbd::AngStrongInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,rgbd::AngStrongInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,rgbd::AngStrongInfo>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[7] & 1) != 0 )
      operator delete((void *)a2[9]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000016048) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000016098) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[15] & 1) != 0 )
      operator delete((void *)a2[17]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (00000000000160F8) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<int,std::string>,std::__map_value_compare<int,std::__value_type<int,std::string>,std::less<int>,true>,std::allocator<std::__value_type<int,std::string>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[5] & 1) != 0 )
      operator delete((void *)a2[7]);
    operator delete(a2);
  }
}

//----- (0000000000016148) ----------------------------------------------------
void __fastcall __noreturn sub_16148(const char *a1)
{
  std::logic_error *exception; // x19

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_16198(exception, a1);
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::length_error,
    (void (__fastcall *)(void *))&std::length_error::~length_error);
}

//----- (0000000000016198) ----------------------------------------------------
__int64 __fastcall sub_16198(std::logic_error *a1, const char *a2)
{
  __int64 result; // x0

  result = std::logic_error::logic_error(a1, a2);
  *(_QWORD *)a1 = (char *)&`vtable for'std::length_error + 16;
  return result;
}

//----- (00000000000161C8) ----------------------------------------------------
const rgbd::RGBDParam *__fastcall rgbd::RGBDParam::RGBDParam(rgbd::RGBDParam *this, const rgbd::RGBDParam *a2)
{
  _OWORD *v2; // x20
  __int128 v5; // q0
  size_t v6; // x21
  const void *v7; // x23
  char *v8; // x24
  char v9; // w8
  _OWORD *v10; // x21
  __int128 v11; // q0
  size_t v12; // x23
  const void *v13; // x24
  char *v14; // x25
  __int64 v15; // x8
  unsigned __int64 *v16; // x8
  unsigned __int64 v17; // x9
  __int64 v18; // x9
  const rgbd::RGBDParam *v19; // x0
  const rgbd::RGBDParam *result; // x0

  *((_QWORD *)this + 4) = 0LL;
  *((_OWORD *)this + 1) = 0u;
  v2 = (_OWORD *)((char *)this + 16);
  *(_OWORD *)this = 0u;
  if ( (*((_BYTE *)a2 + 16) & 1) == 0 )
  {
    v5 = *((_OWORD *)a2 + 1);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *v2 = v5;
    goto LABEL_10;
  }
  v6 = *((_QWORD *)a2 + 3);
  if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v7 = (const void *)*((_QWORD *)a2 + 4);
  if ( v6 >= 0x17 )
  {
    v8 = (char *)operator new((v6 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    *((_QWORD *)this + 3) = v6;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 2) = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
  }
  else
  {
    *(_BYTE *)v2 = 2 * v6;
    v8 = (char *)this + 17;
    if ( !v6 )
      goto LABEL_9;
  }
  memcpy(v8, v7, v6);
LABEL_9:
  v8[v6] = 0;
LABEL_10:
  v9 = *((_BYTE *)a2 + 40);
  *((_QWORD *)this + 6) = 0LL;
  v10 = (_OWORD *)((char *)this + 48);
  *((_QWORD *)this + 7) = 0LL;
  *((_QWORD *)this + 8) = 0LL;
  *((_BYTE *)this + 40) = v9;
  if ( (*((_BYTE *)a2 + 48) & 1) == 0 )
  {
    v11 = *((_OWORD *)a2 + 3);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *v10 = v11;
    goto LABEL_19;
  }
  v12 = *((_QWORD *)a2 + 7);
  if ( v12 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v13 = (const void *)*((_QWORD *)a2 + 8);
  if ( v12 >= 0x17 )
  {
    v14 = (char *)operator new((v12 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    *((_QWORD *)this + 7) = v12;
    *((_QWORD *)this + 8) = v14;
    *((_QWORD *)this + 6) = (v12 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
  }
  else
  {
    *(_BYTE *)v10 = 2 * v12;
    v14 = (char *)this + 49;
    if ( !v12 )
      goto LABEL_18;
  }
  memcpy(v14, v13, v12);
LABEL_18:
  v14[v12] = 0;
LABEL_19:
  *((_BYTE *)this + 72) = *((_BYTE *)a2 + 72);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  v15 = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 11) = v15;
  if ( v15 )
  {
    v16 = (unsigned __int64 *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while ( __stxr(v17 + 1, v16) );
  }
  v18 = *((_QWORD *)a2 + 12);
  *((_DWORD *)this + 26) = *((_DWORD *)a2 + 26);
  *((_QWORD *)this + 12) = v18;
  v19 = (const rgbd::RGBDParam *)*((_QWORD *)a2 + 18);
  if ( v19 )
  {
    if ( (const rgbd::RGBDParam *)((char *)a2 + 112) == v19 )
    {
      *((_QWORD *)this + 18) = (char *)this + 112;
      (*(void (__fastcall **)(_QWORD, char *))(**((_QWORD **)a2 + 18) + 24LL))(*((_QWORD *)a2 + 18), (char *)this + 112);
      result = (const rgbd::RGBDParam *)*((_QWORD *)a2 + 24);
      if ( !result )
      {
LABEL_31:
        *((_QWORD *)this + 24) = 0LL;
        return result;
      }
    }
    else
    {
      *((_QWORD *)this + 18) = (*(__int64 (__fastcall **)(const rgbd::RGBDParam *))(*(_QWORD *)v19 + 16LL))(v19);
      result = (const rgbd::RGBDParam *)*((_QWORD *)a2 + 24);
      if ( !result )
        goto LABEL_31;
    }
  }
  else
  {
    *((_QWORD *)this + 18) = 0LL;
    result = (const rgbd::RGBDParam *)*((_QWORD *)a2 + 24);
    if ( !result )
      goto LABEL_31;
  }
  if ( (const rgbd::RGBDParam *)((char *)a2 + 160) == result )
  {
    *((_QWORD *)this + 24) = (char *)this + 160;
    return (const rgbd::RGBDParam *)(*(__int64 (__fastcall **)(_QWORD))(**((_QWORD **)a2 + 24) + 24LL))(*((_QWORD *)a2 + 24));
  }
  else
  {
    result = (const rgbd::RGBDParam *)(*(__int64 (__fastcall **)(const rgbd::RGBDParam *))(*(_QWORD *)result + 16LL))(result);
    *((_QWORD *)this + 24) = result;
  }
  return result;
}

//----- (0000000000016500) ----------------------------------------------------
void __noreturn std::__basic_string_common<true>::__throw_length_error()
{
  sub_16148("basic_string");
}

//----- (0000000000016514) ----------------------------------------------------
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3)
{
  _QWORD *v4; // x8
  char *v5; // x9
  _QWORD *v6; // x0
  __int64 v9; // x22
  int v10; // w5
  __int64 v11; // x23
  int v12; // w26
  __int64 v13; // x0
  unsigned __int8 v14; // w24
  __int64 v15; // x2
  char v17[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v18; // [xsp+8h] [xbp-58h]
  _QWORD v19[2]; // [xsp+10h] [xbp-50h] BYREF

  v19[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v17[0] = 0;
  v18 = a1;
  v4 = (_QWORD *)(*a1 - 24LL);
  v5 = (char *)a1 + *v4;
  if ( !*((_DWORD *)v5 + 8) )
  {
    v6 = (_QWORD *)*((_QWORD *)v5 + 17);
    if ( v6 )
    {
      std::ostream::flush(v6);
      v4 = (_QWORD *)(*a1 - 24LL);
    }
    v17[0] = 1;
    v9 = (__int64)a1 + *v4;
    v10 = *(_DWORD *)(v9 + 144);
    v11 = *(_QWORD *)(v9 + 40);
    v12 = *(_DWORD *)(v9 + 8);
    if ( v10 == -1 )
    {
      std::ios_base::getloc(v19, (std::ios_base *)v9);
      v13 = std::locale::use_facet(v19, &std::ctype<char>::id);
      v14 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v13 + 56LL))(v13, 32LL);
      std::locale::~locale((std::locale *)v19);
      v10 = v14;
      *(_DWORD *)(v9 + 144) = v14;
    }
    if ( (v12 & 0xB0) == 32 )
      v15 = a2 + a3;
    else
      v15 = a2;
    if ( !sub_166B8(v11, a2, v15, a2 + a3, v9, v10) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v17);
  return a1;
}
// D680: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 16514: using guessed type char var_60[8];

//----- (00000000000166B8) ----------------------------------------------------
__int64 __fastcall sub_166B8(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int c)
{
  __int64 v6; // x19
  __int64 v7; // x8
  __int64 v8; // x25
  bool v10; // cc
  signed __int64 v11; // x8
  signed __int64 v15; // x23
  char *v16; // x25
  void *v17; // x1
  __int64 v18; // x24
  __int64 v19; // x22
  unsigned __int64 v21; // [xsp+0h] [xbp-70h] BYREF
  __int64 v22; // [xsp+8h] [xbp-68h]
  void *v23; // [xsp+10h] [xbp-60h]
  __int64 v24; // [xsp+18h] [xbp-58h]

  v6 = a1;
  v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( a1 )
  {
    v7 = *(_QWORD *)(a5 + 24);
    v8 = a3 - a2;
    v10 = v7 <= a4 - a2;
    v11 = v7 - (a4 - a2);
    if ( v10 )
      v15 = 0LL;
    else
      v15 = v11;
    if ( v8 >= 1 && (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 96LL))(a1) != v8 )
      return 0LL;
    if ( v15 >= 1 )
    {
      v21 = 0LL;
      v22 = 0LL;
      v23 = 0LL;
      if ( (unsigned __int64)v15 >= 0x17 )
      {
        v16 = (char *)operator new((v15 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        v22 = v15;
        v23 = v16;
        v21 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
      }
      else
      {
        v16 = (char *)&v21 + 1;
        LOBYTE(v21) = 2 * v15;
      }
      memset(v16, c, v15);
      v16[v15] = 0;
      v17 = (v21 & 1) != 0 ? v23 : (char *)&v21 + 1;
      v18 = (*(__int64 (__fastcall **)(__int64, void *, signed __int64))(*(_QWORD *)v6 + 96LL))(v6, v17, v15);
      if ( (v21 & 1) != 0 )
        operator delete(v23);
      if ( v18 != v15 )
        return 0LL;
    }
    v19 = a4 - a3;
    if ( v19 < 1 || (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)v6 + 96LL))(v6, a3, v19) == v19 )
      *(_QWORD *)(a5 + 24) = 0LL;
    else
      return 0LL;
  }
  return v6;
}

//----- (000000000001686C) ----------------------------------------------------
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result)
{
  __int64 v1; // x8
  __int64 v2; // x19
  __int64 v3; // x0
  std::ios_base *v4; // x0

  v1 = *(_QWORD *)(result + 8) + *(_QWORD *)(**(_QWORD **)(result + 8) - 24LL);
  if ( *(_QWORD *)(v1 + 40) )
  {
    if ( !*(_DWORD *)(v1 + 32) && (*(_BYTE *)(v1 + 9) & 0x20) != 0 )
    {
      v2 = result;
      result = std::uncaught_exception();
      if ( (result & 1) == 0 )
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + *(_QWORD *)(**(_QWORD **)(v2 + 8) - 24LL) + 40LL);
        result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v3 + 48LL))(v3);
        if ( (_DWORD)result == -1 )
        {
          v4 = (std::ios_base *)(*(_QWORD *)(v2 + 8) + *(_QWORD *)(**(_QWORD **)(v2 + 8) - 24LL));
          return std::ios_base::clear(v4, *((_DWORD *)v4 + 8) | 1u);
        }
      }
    }
  }
  return result;
}

//----- (000000000001690C) ----------------------------------------------------
_QWORD *__fastcall std::ostream::flush(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  char v6[8]; // [xsp+8h] [xbp-38h] BYREF
  _QWORD *v7; // [xsp+10h] [xbp-30h]
  __int64 v8; // [xsp+18h] [xbp-28h]

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = (_QWORD *)(*a1 - 24LL);
  if ( *(_QWORD *)((char *)a1 + *v2 + 40) )
  {
    v6[0] = 0;
    v7 = a1;
    v3 = (char *)a1 + *v2;
    if ( !*((_DWORD *)v3 + 8) )
    {
      v4 = (_QWORD *)*((_QWORD *)v3 + 17);
      if ( v4 )
      {
        std::ostream::flush(v4);
        v2 = (_QWORD *)(*a1 - 24LL);
      }
      v6[0] = 1;
      if ( (*(unsigned int (__fastcall **)(_QWORD))(**(_QWORD **)((char *)a1 + *v2 + 40) + 48LL))(*(_QWORD *)((char *)a1 + *v2 + 40)) == -1 )
        std::ios_base::clear(
          (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
          *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 1);
    }
    std::ostream::sentry::~sentry((__int64)v6);
  }
  return a1;
}
// 1690C: using guessed type char var_38[8];

//----- (0000000000016A2C) ----------------------------------------------------
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n)
{
  unsigned __int64 v6; // x25
  _BYTE *v7; // x22
  void *v8; // x22
  unsigned __int64 v9; // x8
  __int64 v10; // x23
  void *v11; // x24

  if ( (*(_BYTE *)a1 & 1) != 0 )
  {
    v6 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
    if ( v6 >= n )
    {
LABEL_3:
      if ( (*(_BYTE *)a1 & 1) != 0 )
      {
        v7 = (_BYTE *)a1[2];
        if ( !n )
          goto LABEL_12;
      }
      else
      {
        v7 = (char *)a1 + 1;
        if ( !n )
        {
LABEL_12:
          v7[n] = 0;
          if ( (*(_BYTE *)a1 & 1) != 0 )
            a1[1] = n;
          else
            *(_BYTE *)a1 = 2 * n;
          return a1;
        }
      }
      memmove(v7, src, n);
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 22LL;
    if ( n <= 0x16 )
      goto LABEL_3;
  }
  if ( -18LL - v6 < n - v6 )
    std::__basic_string_common<true>::__throw_length_error();
  if ( (*(_BYTE *)a1 & 1) != 0 )
    v8 = (void *)a1[2];
  else
    v8 = (char *)a1 + 1;
  if ( v6 > 0x7FFFFFFFFFFFFFE6LL )
  {
    v10 = -17LL;
  }
  else
  {
    v9 = 2 * v6;
    if ( 2 * v6 <= n )
      v9 = n;
    if ( v9 >= 0x17 )
      v10 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    else
      v10 = 23LL;
  }
  v11 = (void *)operator new(v10);
  memcpy(v11, src, n);
  if ( v6 != 22 )
    operator delete(v8);
  a1[1] = n;
  a1[2] = (__int64)v11;
  *a1 = v10 | 1;
  *((_BYTE *)v11 + n) = 0;
  return a1;
}

//----- (0000000000016B7C) ----------------------------------------------------
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n)
{
  unsigned __int64 v3; // x8
  size_t v7; // x22
  unsigned __int64 v8; // x26
  unsigned __int64 v9; // x27
  void *v10; // x23
  char *v11; // x23
  unsigned __int64 v12; // x8
  __int64 v13; // x24
  __int64 v14; // x8
  char *v15; // x8
  char *v16; // x0
  char *v17; // x25

  v3 = *(unsigned __int8 *)a1;
  if ( (v3 & 1) != 0 )
  {
    v7 = a1[1];
    v8 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
  }
  else
  {
    v7 = v3 >> 1;
    v8 = 22LL;
  }
  if ( v8 - v7 < n )
  {
    v9 = v7 + n;
    if ( -18LL - v8 < v7 + n - v8 )
      std::__basic_string_common<true>::__throw_length_error();
    if ( (v3 & 1) != 0 )
      v10 = (void *)a1[2];
    else
      v10 = (char *)a1 + 1;
    if ( v8 > 0x7FFFFFFFFFFFFFE6LL )
    {
      v13 = -17LL;
    }
    else
    {
      v12 = 2 * v8;
      if ( v9 >= 2 * v8 )
        v12 = v7 + n;
      if ( v12 >= 0x17 )
        v13 = (v12 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      else
        v13 = 23LL;
    }
    v16 = (char *)operator new(v13);
    v17 = v16;
    if ( v7 )
      memcpy(v16, v10, v7);
    memcpy(&v17[v7], src, n);
    if ( v8 != 22 )
      operator delete(v10);
    *a1 = v13 | 1;
    v15 = &v17[v9];
    a1[1] = v9;
    a1[2] = (__int64)v17;
    goto LABEL_29;
  }
  if ( n )
  {
    if ( (v3 & 1) != 0 )
      v11 = (char *)a1[2];
    else
      v11 = (char *)a1 + 1;
    memcpy(&v11[v7], src, n);
    v14 = v7 + n;
    if ( (*(_BYTE *)a1 & 1) != 0 )
      a1[1] = v14;
    else
      *(_BYTE *)a1 = 2 * v14;
    v15 = &v11[v14];
LABEL_29:
    *v15 = 0;
  }
  return a1;
}

//----- (0000000000016CFC) ----------------------------------------------------
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n)
{
  unsigned __int64 v4; // x8
  char *v6; // x21
  size_t v9; // x27
  unsigned __int64 v10; // x28
  unsigned __int64 v11; // x23
  char *v12; // x8
  char *v13; // x23
  unsigned __int64 v14; // x8
  __int64 v15; // x24
  char *v16; // x22
  __int64 v18; // x8
  char *v19; // x8
  char *v20; // x0
  char *v21; // x25
  char *srca; // [xsp+8h] [xbp-58h]

  v4 = *(unsigned __int8 *)a1;
  v6 = src;
  if ( (v4 & 1) != 0 )
  {
    v9 = a1[1];
    if ( v9 < a2 )
      goto LABEL_44;
  }
  else
  {
    v9 = v4 >> 1;
    if ( v4 >> 1 < a2 )
LABEL_44:
      std::__basic_string_common<true>::__throw_out_of_range();
  }
  if ( (v4 & 1) != 0 )
    v10 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
  else
    v10 = 22LL;
  if ( v10 - v9 < n )
  {
    v11 = v9 + n;
    if ( -18LL - v10 < v9 + n - v10 )
      std::__basic_string_common<true>::__throw_length_error();
    if ( (v4 & 1) != 0 )
      v12 = (char *)a1[2];
    else
      v12 = (char *)a1 + 1;
    srca = v12;
    if ( v10 > 0x7FFFFFFFFFFFFFE6LL )
    {
      v15 = -17LL;
    }
    else
    {
      v14 = 2 * v10;
      if ( v11 >= 2 * v10 )
        v14 = v9 + n;
      if ( v14 >= 0x17 )
        v15 = (v14 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      else
        v15 = 23LL;
    }
    v20 = (char *)operator new(v15);
    v21 = v20;
    if ( a2 )
      memcpy(v20, srca, a2);
    memcpy(&v21[a2], v6, n);
    if ( v9 != a2 )
      memcpy(&v21[a2 + n], &srca[a2], v9 - a2);
    if ( v10 != 22 )
      operator delete(srca);
    *a1 = v15 | 1;
    v19 = &v21[v11];
    a1[1] = v11;
    a1[2] = (__int64)v21;
LABEL_42:
    *v19 = 0;
    return a1;
  }
  if ( n )
  {
    if ( (v4 & 1) != 0 )
      v13 = (char *)a1[2];
    else
      v13 = (char *)a1 + 1;
    v16 = &v13[a2];
    if ( v9 != a2 )
    {
      if ( &v13[v9] > src && v16 <= src )
        v6 = &src[n];
      memmove(&v16[n], v16, v9 - a2);
    }
    memmove(v16, v6, n);
    v18 = v9 + n;
    if ( (*(_BYTE *)a1 & 1) != 0 )
      a1[1] = v18;
    else
      *(_BYTE *)a1 = 2 * v18;
    v19 = &v13[v18];
    goto LABEL_42;
  }
  return a1;
}

//----- (0000000000016EF8) ----------------------------------------------------
void __noreturn std::__basic_string_common<true>::__throw_out_of_range()
{
  sub_16F0C("basic_string");
}

//----- (0000000000016F0C) ----------------------------------------------------
void __fastcall __noreturn sub_16F0C(const char *a1)
{
  std::logic_error *exception; // x19

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_16F5C(exception, a1);
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::out_of_range,
    (void (__fastcall *)(void *))&std::out_of_range::~out_of_range);
}

//----- (0000000000016F5C) ----------------------------------------------------
__int64 __fastcall sub_16F5C(std::logic_error *a1, const char *a2)
{
  __int64 result; // x0

  result = std::logic_error::logic_error(a1, a2);
  *(_QWORD *)a1 = (char *)&`vtable for'std::out_of_range + 16;
  return result;
}

//----- (0000000000016F8C) ----------------------------------------------------
__int64 **__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::find<std::string>(
        _QWORD *a1,
        unsigned __int8 *a2)
{
  unsigned __int64 v4; // x8
  unsigned __int64 v5; // x10
  __int64 *v6; // x1
  unsigned __int64 v7; // x2
  unsigned __int64 v8; // x0
  unsigned __int64 v9; // x24
  unsigned __int64 v10; // x25
  unsigned __int64 v11; // x19
  unsigned __int64 v12; // x27
  __int64 ***v13; // x8
  __int64 **v14; // x20
  unsigned __int64 v15; // x8
  unsigned __int8 *v16; // x11
  unsigned __int8 *v17; // x9
  size_t v18; // x21
  unsigned __int8 *v19; // x22
  unsigned __int64 v20; // x8
  unsigned __int64 v21; // x10
  unsigned __int64 v22; // x11
  __int64 *v23; // x0
  unsigned __int8 *v24; // x8
  __int64 v25; // x9
  unsigned __int8 *i; // x10
  _QWORD v28[2]; // [xsp+0h] [xbp-60h] BYREF

  v28[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = *a2;
  v5 = *((_QWORD *)a2 + 1);
  if ( (v4 & 1) != 0 )
    v6 = (__int64 *)*((_QWORD *)a2 + 2);
  else
    v6 = (__int64 *)(a2 + 1);
  if ( (v4 & 1) != 0 )
    v7 = v5;
  else
    v7 = v4 >> 1;
  v8 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()((__int64)v28, v6, v7);
  v9 = a1[1];
  if ( !v9 )
    return 0LL;
  v10 = v9 - 1;
  v11 = v8;
  if ( ((v9 - 1) & v9) != 0 )
  {
    v12 = v8;
    if ( v8 >= v9 )
      v12 = v8 % v9;
  }
  else
  {
    v12 = v10 & v8;
  }
  v13 = *(__int64 ****)(*a1 + 8 * v12);
  if ( !v13 )
    return 0LL;
  v14 = *v13;
  if ( *v13 )
  {
    v15 = *a2;
    v16 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    v17 = a2 + 1;
    if ( (v15 & 1) != 0 )
      v18 = *((_QWORD *)a2 + 1);
    else
      v18 = v15 >> 1;
    if ( (v15 & 1) != 0 )
      v19 = v16;
    else
      v19 = v17;
    do
    {
      v20 = (unsigned __int64)v14[1];
      if ( v20 == v11 )
      {
        v21 = *((unsigned __int8 *)v14 + 16);
        v22 = (unsigned __int64)v14[3];
        if ( (v21 & 1) == 0 )
          v22 = v21 >> 1;
        if ( v22 == v18 )
        {
          if ( (v21 & 1) != 0 )
            v23 = v14[4];
          else
            v23 = (__int64 *)((char *)v14 + 17);
          if ( (v21 & 1) != 0 )
          {
            if ( !v18 || !memcmp(v23, v19, v18) )
              return v14;
          }
          else
          {
            if ( !v18 )
              return v14;
            v24 = (unsigned __int8 *)v14 + 17;
            v25 = -(__int64)(v21 >> 1);
            for ( i = v19; *v24 == *i; ++i )
            {
              ++v24;
              if ( !++v25 )
                return v14;
            }
          }
        }
      }
      else
      {
        if ( ((v9 - 1) & v9) == 0 )
        {
          v20 &= v10;
LABEL_38:
          if ( v20 != v12 )
            return 0LL;
          goto LABEL_39;
        }
        if ( v20 < v9 )
          goto LABEL_38;
        if ( v20 % v9 != v12 )
          return 0LL;
      }
LABEL_39:
      v14 = (__int64 **)*v14;
    }
    while ( v14 );
  }
  return v14;
}

//----- (0000000000017144) ----------------------------------------------------
unsigned __int64 __fastcall std::__murmur2_or_cityhash<unsigned long,64ul>::operator()(
        __int64 a1,
        __int64 *a2,
        unsigned __int64 a3)
{
  __int64 v4; // x14
  __int64 v5; // x8
  __int64 v6; // x9
  __int64 v7; // x12
  __int64 v8; // x15
  __int64 v9; // x8
  __int64 v10; // x16
  __int64 v11; // x12
  __int64 v12; // x13
  __int64 v13; // x10
  __int64 v14; // x9
  __int64 v15; // x14
  __int64 v16; // x16
  __int64 v17; // x8
  __int64 v18; // x14
  __int64 v19; // x9
  unsigned __int64 v20; // x9
  __int64 v21; // x10
  unsigned __int64 v22; // x8
  __int64 v23; // x11
  unsigned __int64 v24; // x9
  __int64 v25; // x10
  unsigned __int64 v26; // x8
  unsigned __int64 v27; // x9
  __int64 v28; // x10
  __int64 v29; // x12
  __int64 v30; // x13
  __int64 v31; // x17
  __int64 v32; // x15
  __int64 v33; // x16
  __int64 v34; // x3
  unsigned __int64 v35; // x14
  unsigned __int64 v36; // x0
  unsigned __int64 v37; // x11
  __int64 v38; // x2
  unsigned __int64 v39; // x0
  __int64 v40; // x10
  unsigned __int64 v41; // x12
  __int64 v42; // x15
  __int64 v43; // x16
  __int64 v44; // x3
  _QWORD *v45; // x1
  __int64 v46; // x17
  __int64 v47; // t1
  __int64 v48; // x10
  unsigned __int64 v49; // x5
  __int64 v50; // x11
  unsigned __int64 v51; // x15
  __int64 v52; // x3
  __int64 v53; // x14
  unsigned __int64 v54; // x16
  unsigned __int64 v55; // x0
  unsigned __int64 v56; // x15
  unsigned __int64 i; // x13
  unsigned __int64 v58; // x2
  __int64 v59; // x4
  __int64 v60; // x15
  unsigned __int64 v61; // x17
  __int64 v62; // t2
  __int64 v63; // x0
  __int64 v64; // x6
  unsigned __int64 v65; // x3
  __int64 v66; // t2
  __int64 v67; // x5
  __int64 v68; // x2
  __int64 v69; // x4
  __int64 v70; // x14
  __int64 v71; // x7
  __int64 v72; // x2
  __int64 v73; // x10
  unsigned __int64 v74; // x17
  __int64 v75; // x11
  unsigned __int64 v76; // x9
  unsigned __int64 v77; // x10

  if ( a3 > 0x20 )
  {
    if ( a3 > 0x40 )
    {
      v28 = (__int64)a2 + a3;
      v29 = *(__int64 *)((char *)a2 + a3 - 48);
      v30 = *(__int64 *)((char *)a2 + a3 - 40);
      v31 = *(__int64 *)((char *)a2 + a3 - 56);
      v32 = *(__int64 *)((char *)a2 + a3 - 32);
      v33 = *(__int64 *)((char *)a2 + a3 - 24);
      v34 = *(__int64 *)((char *)a2 + a3 - 16);
      v35 = *(__int64 *)((char *)a2 + a3 - 64) + a3;
      v36 = v33 ^ (v29 + a3);
      v37 = a3 - 1;
      v38 = v35 + v31 + v29;
      v39 = (0x9DDFEA08EB382D69LL * v36) ^ v33 ^ ((0x9DDFEA08EB382D69LL * v36) >> 47);
      v40 = *(_QWORD *)(v28 - 8);
      v41 = v31 + v34;
      v42 = v31 + v34 + v32 - 0x4B6D499041670D8DLL;
      v43 = v42 + v33 + v34;
      v44 = v42 + v30 + v40;
      v47 = *a2;
      v45 = a2 + 4;
      v46 = v47;
      v48 = v43 + v40;
      v49 = v37 & 0xFFFFFFFFFFFFFFC0LL;
      v50 = __ROR8__(v43, 44) + v42 + __ROR8__(v44, 21);
      v51 = __ROR8__(v38, 44) + v35;
      v52 = v30 + v35;
      v53 = v38 + v30;
      v54 = v47 - 0x4B6D499041670D8DLL * v30;
      v55 = 0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * v39) ^ ((0x9DDFEA08EB382D69LL * v39) >> 47));
      v56 = v51 + __ROR8__(v52 + v55, 21);
      for ( i = 64 - v49; ; i += 64LL )
      {
        v58 = v41 + v56;
        v59 = v45[1];
        v60 = v46 - 0x4B6D499041670D8DLL * v56;
        v61 = v54 + v53 + v41;
        v62 = __ROR8__(v55 + v48, 33);
        v63 = v45[2];
        v64 = v45[3];
        v54 = 0xB492B66FBE98F273LL * v62;
        v65 = 0xB492B66FBE98F273LL * v62 + v50 + *v45;
        v66 = __ROR8__(v58 + v63, 42);
        v67 = *(v45 - 1);
        v68 = v65 + v59;
        v41 = v59 + v53 - 0x4B6D499041670D8DLL * v66;
        v70 = *(v45 - 3);
        v69 = *(v45 - 2);
        v71 = v60 + v48 + v67;
        v72 = v68 + v63;
        v73 = v60 + v70 + v69;
        v74 = 0xB492B66FBE98F273LL * __ROR8__(v61 + v70, 37);
        v53 = v73 + v67;
        v55 = v74 ^ v50;
        v75 = __ROR8__(v73, 44) + v60;
        v48 = v72 + v64;
        v56 = v75 + __ROR8__(v71 + v55, 21);
        v50 = __ROR8__(v72, 44) + v65 + __ROR8__(v41 + v69 + v65 + v64, 21);
        if ( !i )
          break;
        v46 = v45[4];
        v45 += 8;
      }
      v76 = v55
          - 0x4B6D499041670D8DLL * (v41 ^ (v41 >> 47))
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * ((0x9DDFEA08EB382D69LL * (v48 ^ v53)) ^ v48 ^ ((0x9DDFEA08EB382D69LL * (v48 ^ v53)) >> 47))) ^ ((0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * (v48 ^ v53)) ^ v48 ^ ((0x9DDFEA08EB382D69LL * (v48 ^ v53)) >> 47))) >> 47));
      v77 = v54
          - 0x622015F714C7D297LL
          * ((0x9DDFEA08EB382D69LL
            * ((0x9DDFEA08EB382D69LL * (v50 ^ v56)) ^ v50 ^ ((0x9DDFEA08EB382D69LL * (v50 ^ v56)) >> 47))) ^ ((0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * (v50 ^ v56)) ^ v50 ^ ((0x9DDFEA08EB382D69LL * (v50 ^ v56)) >> 47))) >> 47));
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL
             * ((0x9DDFEA08EB382D69LL * (v77 ^ v76)) ^ v77 ^ ((0x9DDFEA08EB382D69LL * (v77 ^ v76)) >> 47))) ^ ((0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * (v77 ^ v76)) ^ v77 ^ ((0x9DDFEA08EB382D69LL * (v77 ^ v76)) >> 47))) >> 47));
    }
    else
    {
      v4 = *(__int64 *)((char *)a2 + a3 - 16);
      v5 = a2[2];
      v6 = a2[3];
      v7 = *a2 - 0x3C5A37A36834CED9LL * (v4 + a3);
      v8 = *(__int64 *)((char *)a2 + a3 - 32) + v5;
      v9 = v7 + a2[1] + v5;
      v10 = *(__int64 *)((char *)a2 + a3 - 8) + v6;
      v11 = __ROR8__(v7 + a2[1], 7) + __ROR8__(v7, 37) + __ROR8__(v7 + v6, 52);
      v12 = v10 + v8;
      v13 = *(__int64 *)((char *)a2 + a3 - 24) + v8;
      v14 = v9 + v6;
      v15 = v13 + v4;
      v16 = v15 + v10;
      v17 = v11 + __ROR8__(v9, 31);
      v18 = __ROR8__(v15, 31);
      v19 = v14 + __ROR8__(v8, 37) + __ROR8__(v13, 7) + __ROR8__(v12, 52);
      v20 = (0xC3A5C85C97CB3127LL * (v16 + v17) - 0x651E95C4D06FBFB1LL * (v19 + v18)) ^ ((0xC3A5C85C97CB3127LL
                                                                                        * (v16 + v17)
                                                                                        - 0x651E95C4D06FBFB1LL
                                                                                        * (v19 + v18)) >> 47);
      return 0x9AE16A3B2F90404FLL * ((v17 - 0x3C5A37A36834CED9LL * v20) ^ ((v17 - 0x3C5A37A36834CED9LL * v20) >> 47));
    }
  }
  else if ( a3 > 0x10 )
  {
    v21 = a2[1];
    v22 = 0xB492B66FBE98F273LL * *a2;
    v23 = *(__int64 *)((char *)a2 + a3 - 8);
    v24 = v21 ^ 0xC949D7C7509E6557LL;
    v25 = __ROR8__(v22 - v21, 43);
    v26 = v22 + a3 - 0x9AE16A3B2F90404FLL * v23 + __ROR8__(v24, 20);
    v27 = v25
        - 0x3C5A37A36834CED9LL * *(__int64 *)((char *)a2 + a3 - 16)
        + ((0xBE41013C00000000LL * v23) | ((0x9AE16A3B2F90404FLL * v23) >> 30));
    return 0x9DDFEA08EB382D69LL
         * ((0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v27 ^ v26)) ^ v26 ^ ((0x9DDFEA08EB382D69LL * (v27 ^ v26)) >> 47))) ^ ((0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * (v27 ^ v26)) ^ v26 ^ ((0x9DDFEA08EB382D69LL * (v27 ^ v26)) >> 47))) >> 47));
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16(a2, a3);
  }
}

//----- (00000000000174D0) ----------------------------------------------------
unsigned __int64 __fastcall std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16(
        _DWORD *a1,
        unsigned __int64 a2)
{
  __int64 v3; // x9
  unsigned __int64 v4; // x10
  unsigned __int64 result; // x0
  __int64 v6; // x8
  unsigned __int64 v7; // x9
  unsigned __int64 v8; // x8

  if ( a2 < 9 )
  {
    if ( a2 < 4 )
    {
      result = 0x9AE16A3B2F90404FLL;
      if ( a2 )
      {
        v8 = (0xC949D7C7509E6557LL * ((unsigned int)a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                                  * (*(unsigned __int8 *)a1 | ((unsigned __int64)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69LL * (((unsigned int)(8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69LL
           * ((0x9DDFEA08EB382D69LL * (v7 ^ v6 ^ (v7 >> 47))) ^ ((0x9DDFEA08EB382D69LL * (v7 ^ v6 ^ (v7 >> 47))) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = ((v3 + a2) << -(char)a2) | ((v3 + a2) >> a2);
    return (0x9DDFEA08EB382D69LL
          * ((0x9DDFEA08EB382D69LL
            * ((0x9DDFEA08EB382D69LL * (v4 ^ *(_QWORD *)a1)) ^ v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(_QWORD *)a1)) >> 47))) ^ ((0x9DDFEA08EB382D69LL * ((0x9DDFEA08EB382D69LL * (v4 ^ *(_QWORD *)a1)) ^ v4 ^ ((0x9DDFEA08EB382D69LL * (v4 ^ *(_QWORD *)a1)) >> 47))) >> 47))) ^ v3;
  }
  return result;
}

//----- (00000000000175D4) ----------------------------------------------------
__int64 *__fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::pair<std::string,v4l2Capture *>>(
        __int64 a1,
        unsigned __int8 *a2,
        __int128 *a3)
{
  unsigned __int64 v3; // x27
  unsigned __int64 v7; // x8
  unsigned __int64 v8; // x10
  __int64 *v9; // x1
  unsigned __int64 v10; // x2
  unsigned __int64 v11; // x0
  unsigned __int64 v12; // x26
  unsigned __int64 v13; // x21
  unsigned __int64 v14; // x28
  __int64 **v15; // x8
  __int64 *v16; // x20
  unsigned __int64 v17; // x8
  unsigned __int8 *v18; // x11
  unsigned __int8 *v19; // x9
  size_t v20; // x23
  unsigned __int8 *v21; // x24
  unsigned __int64 v22; // x8
  unsigned __int64 v23; // x10
  unsigned __int64 v24; // x11
  const void *v25; // x0
  __int64 v26; // x9
  __int64 *v27; // x0
  __int128 v28; // q0
  __int64 v29; // x8
  float v30; // s0
  float v31; // s1
  _BOOL8 v32; // x9
  unsigned __int64 v33; // x8
  unsigned __int64 v34; // x9
  std::__ndk1 *v35; // x1
  __int64 v36; // x9
  __int64 *v37; // x8
  unsigned __int64 v38; // x8
  char v40[8]; // [xsp+10h] [xbp-60h] BYREF
  __int64 v41; // [xsp+18h] [xbp-58h]

  v41 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  if ( (v7 & 1) != 0 )
    v9 = (__int64 *)*((_QWORD *)a2 + 2);
  else
    v9 = (__int64 *)(a2 + 1);
  if ( (v7 & 1) != 0 )
    v10 = v8;
  else
    v10 = v7 >> 1;
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()((__int64)v40, v9, v10);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = v11;
  if ( v12 )
  {
    v14 = v12 - 1;
    if ( ((v12 - 1) & v12) != 0 )
    {
      v3 = v11;
      if ( v11 >= v12 )
        v3 = v11 % v12;
    }
    else
    {
      v3 = v14 & v11;
    }
    v15 = *(__int64 ***)(*(_QWORD *)a1 + 8 * v3);
    if ( v15 )
    {
      v16 = *v15;
      if ( *v15 )
      {
        v17 = *a2;
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v19 = a2 + 1;
        if ( (v17 & 1) != 0 )
          v20 = *((_QWORD *)a2 + 1);
        else
          v20 = v17 >> 1;
        if ( (v17 & 1) != 0 )
          v21 = v18;
        else
          v21 = v19;
        do
        {
          v22 = v16[1];
          if ( v22 == v13 )
            goto LABEL_28;
          if ( ((v12 - 1) & v12) != 0 )
          {
            if ( v22 >= v12 )
            {
              if ( v22 % v12 != v3 )
                break;
              goto LABEL_28;
            }
          }
          else
          {
            v22 &= v14;
          }
          if ( v22 != v3 )
            break;
LABEL_28:
          v23 = *((unsigned __int8 *)v16 + 16);
          v24 = v16[3];
          if ( (v23 & 1) == 0 )
            v24 = v23 >> 1;
          if ( v24 == v20 )
          {
            if ( (v23 & 1) != 0 )
              v25 = (const void *)v16[4];
            else
              v25 = (char *)v16 + 17;
            if ( (v23 & 1) != 0 )
            {
              if ( !v20 || !memcmp(v25, v21, v20) )
                return v16;
            }
            else
            {
              if ( !v20 )
                return v16;
              v26 = 0LL;
              while ( *((unsigned __int8 *)v16 + v26 + 17) == v21[v26] )
              {
                if ( v23 >> 1 == ++v26 )
                  return v16;
              }
            }
          }
          v16 = (__int64 *)*v16;
        }
        while ( v16 );
      }
    }
  }
  v27 = (__int64 *)operator new(0x30uLL);
  v28 = *a3;
  v16 = v27;
  v27[4] = *((_QWORD *)a3 + 2);
  *((_OWORD *)v27 + 1) = v28;
  v29 = *((_QWORD *)a3 + 3);
  *((_QWORD *)a3 + 1) = 0LL;
  *((_QWORD *)a3 + 2) = 0LL;
  *(_QWORD *)a3 = 0LL;
  *v27 = 0LL;
  v27[1] = v13;
  v27[5] = v29;
  v30 = *(float *)(a1 + 32);
  v31 = (float)(unsigned __int64)(*(_QWORD *)(a1 + 24) + 1LL);
  if ( !v12 || (float)(v30 * (float)v12) < v31 )
  {
    v32 = v12 < 3 || ((v12 - 1) & v12) != 0;
    v33 = v32 | (2 * v12);
    v34 = vcvtps_u32_f32(v31 / v30);
    if ( v33 >= v34 )
      v35 = (std::__ndk1 *)v33;
    else
      v35 = (std::__ndk1 *)v34;
    std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::rehash(
      a1,
      v35);
    v12 = *(_QWORD *)(a1 + 8);
    if ( ((v12 - 1) & v12) != 0 )
    {
      if ( v13 >= v12 )
        v3 = v13 % v12;
      else
        v3 = v13;
    }
    else
    {
      v3 = (v12 - 1) & v13;
    }
  }
  v36 = *(_QWORD *)a1;
  v37 = *(__int64 **)(*(_QWORD *)a1 + 8 * v3);
  if ( v37 )
  {
    *v16 = *v37;
LABEL_65:
    *v37 = (__int64)v16;
    goto LABEL_66;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v36 + 8 * v3) = a1 + 16;
  if ( *v16 )
  {
    v38 = *(_QWORD *)(*v16 + 8);
    if ( ((v12 - 1) & v12) != 0 )
    {
      if ( v38 >= v12 )
        v38 %= v12;
    }
    else
    {
      v38 &= v12 - 1;
    }
    v37 = (__int64 *)(*(_QWORD *)a1 + 8 * v38);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}
// 17820: variable 'v3' is possibly undefined
// 175D4: using guessed type char var_60[8];

//----- (00000000000178F4) ----------------------------------------------------
void __fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::rehash(
        __int64 a1,
        std::__ndk1 *this)
{
  std::__ndk1 *prime; // x20
  unsigned __int64 v4; // x21
  void **v5; // x0
  unsigned __int64 v6; // x1
  _BOOL4 v7; // w8
  std::__ndk1 *v8; // x0

  if ( this == (std::__ndk1 *)((char *)&dword_0 + 1) )
  {
    prime = (std::__ndk1 *)(&dword_0 + 2);
  }
  else
  {
    prime = this;
    if ( (((unsigned __int64)this - 1) & (unsigned __int64)this) != 0 )
      prime = (std::__ndk1 *)std::__next_prime(this, (unsigned __int64)this);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if ( (unsigned __int64)prime > v4 )
  {
    v5 = (void **)a1;
    v6 = (unsigned __int64)prime;
LABEL_7:
    std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__rehash(
      v5,
      v6);
    return;
  }
  if ( (unsigned __int64)prime < v4 )
  {
    v7 = v4 >= 3 && ((v4 - 1) & v4) == 0;
    v8 = (std::__ndk1 *)vcvtps_u32_f32((float)*(unsigned __int64 *)(a1 + 24) / *(float *)(a1 + 32));
    if ( v7 )
    {
      if ( (unsigned __int64)v8 >= 2 )
        v8 = (std::__ndk1 *)(1LL << -(char)__clz((unsigned __int64)v8 - 1));
    }
    else
    {
      v8 = (std::__ndk1 *)std::__next_prime(v8, (unsigned __int64)this);
    }
    v6 = (unsigned __int64)(prime >= v8 ? prime : v8);
    if ( v6 < v4 )
    {
      v5 = (void **)a1;
      goto LABEL_7;
    }
  }
}
// 179AC: variable 'this' is possibly undefined
// 0: using guessed type int dword_0;

//----- (00000000000179D8) ----------------------------------------------------
void __fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__rehash(
        void **a1,
        unsigned __int64 a2)
{
  void **v2; // x19
  unsigned __int64 v3; // x20
  void *v4; // x0
  void *v5; // x8
  char *v6; // x8
  __int64 **v7; // x24
  unsigned __int64 v8; // x28
  unsigned __int64 v9; // x25
  __int64 v10; // x14
  void *v11; // x0
  __int64 *v12; // x23
  unsigned __int64 v13; // x27
  __int64 *v14; // x8
  __int64 **v15; // x22
  unsigned __int64 v16; // x16
  unsigned __int8 *v17; // x17
  __int64 **v18; // x26
  unsigned __int64 v19; // x10
  size_t v20; // x21
  __int64 v21; // x2
  __int64 *v22; // x8
  char v23; // w9
  unsigned int v24; // t1
  unsigned __int64 v25; // x10
  unsigned __int64 v26; // x11
  const void *v27; // x0
  unsigned __int8 *v28; // x1
  __int64 v29; // x8
  unsigned __int8 *v30; // x9
  unsigned __int64 v31; // x20
  unsigned __int8 *v32; // x19
  int v33; // w0
  __int64 v34; // [xsp+0h] [xbp-70h]
  void **v35; // [xsp+8h] [xbp-68h]
  unsigned __int64 v36; // [xsp+10h] [xbp-60h]
  __int64 v37; // [xsp+18h] [xbp-58h]

  v2 = a1;
  if ( a2 )
  {
    v3 = a2;
    if ( a2 >> 61 )
      sub_16148("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    v4 = (void *)operator new(8 * a2);
    v5 = *v2;
    *v2 = v4;
    if ( v5 )
      operator delete(v5);
    v6 = 0LL;
    v2[1] = (void *)v3;
    do
      *((_QWORD *)*v2 + (_QWORD)v6++) = 0LL;
    while ( (char *)v3 != v6 );
    v7 = (__int64 **)v2[2];
    if ( v7 )
    {
      v8 = (unsigned __int64)v7[1];
      v9 = v3 - 1;
      v10 = (v3 - 1) & v3;
      if ( v10 )
      {
        if ( v8 >= v3 )
          v8 %= v3;
      }
      else
      {
        v8 &= v9;
      }
      *((_QWORD *)*v2 + v8) = v2 + 2;
      v12 = *v7;
      if ( *v7 )
      {
        v35 = v2;
        v36 = v3;
        v34 = (v3 - 1) & v3;
        do
        {
          v13 = v12[1];
          if ( v10 )
          {
            if ( v13 >= v3 )
              v13 %= v3;
            if ( v13 != v8 )
            {
LABEL_23:
              if ( *((_QWORD *)*v2 + v13) )
              {
                v14 = (__int64 *)*v12;
                v15 = (__int64 **)v12;
                if ( *v12 )
                {
                  v16 = *((unsigned __int8 *)v12 + 16);
                  v17 = (unsigned __int8 *)v12 + 17;
                  v18 = (__int64 **)v12;
                  v19 = v16 >> 1;
                  if ( (v16 & 1) != 0 )
                    v20 = v12[3];
                  else
                    v20 = v16 >> 1;
                  v21 = -(__int64)v19;
                  v37 = -(__int64)v19;
                  do
                  {
                    v15 = v18;
                    v18 = (__int64 **)v14;
                    v24 = *((unsigned __int8 *)v14 + 16);
                    v22 = v14 + 2;
                    v23 = v24;
                    v25 = v22[1];
                    v26 = (unsigned __int64)v24 >> 1;
                    if ( (v24 & 1) == 0 )
                      v25 = v26;
                    if ( v20 != v25 )
                      break;
                    if ( (v16 & 1) != 0 )
                      v27 = (const void *)v12[4];
                    else
                      v27 = v17;
                    if ( (v23 & 1) != 0 )
                      v28 = (unsigned __int8 *)v18[4];
                    else
                      v28 = (unsigned __int8 *)v22 + 1;
                    if ( (v16 & 1) != 0 )
                    {
                      if ( v20 )
                      {
                        v31 = v16;
                        v32 = v17;
                        v33 = memcmp(v27, v28, v20);
                        v17 = v32;
                        v16 = v31;
                        v10 = v34;
                        v2 = v35;
                        v3 = v36;
                        v21 = v37;
                        if ( v33 )
                          break;
                      }
                    }
                    else
                    {
                      v29 = v21;
                      v30 = v17;
                      if ( v20 )
                      {
                        while ( *v30 == *v28 )
                        {
                          ++v30;
                          ++v29;
                          ++v28;
                          if ( !v29 )
                            goto LABEL_45;
                        }
                        break;
                      }
                    }
LABEL_45:
                    v14 = *v18;
                    v15 = v18;
                  }
                  while ( *v18 );
                }
                *v7 = *v15;
                *v15 = (__int64 *)**((_QWORD **)*v2 + v13);
                **((_QWORD **)*v2 + v13) = v12;
              }
              else
              {
                *((_QWORD *)*v2 + v13) = v7;
                v7 = (__int64 **)v12;
                v8 = v13;
              }
              goto LABEL_48;
            }
          }
          else
          {
            v13 &= v9;
            if ( v13 != v8 )
              goto LABEL_23;
          }
          v7 = (__int64 **)v12;
LABEL_48:
          v12 = *v7;
        }
        while ( *v7 );
      }
    }
  }
  else
  {
    v11 = *a1;
    *v2 = 0LL;
    if ( v11 )
      operator delete(v11);
    v2[1] = 0LL;
  }
}

//----- (0000000000017C28) ----------------------------------------------------
__int64 *__fastcall std::__tree<std::__value_type<std::string,pudutech::RGBD_INFO>,std::__map_value_compare<std::string,std::__value_type<std::string,pudutech::RGBD_INFO>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,pudutech::RGBD_INFO>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  __int64 *v3; // x20
  __int64 *v4; // x24
  unsigned __int64 v6; // x8
  size_t v7; // x25
  const void *v8; // x21
  unsigned __int64 v9; // x28
  size_t v10; // x26
  size_t v11; // x22
  char *v12; // x23
  int v13; // w0
  __int64 *v14; // x8
  int v15; // w0

  v3 = (__int64 *)(a1 + 8);
  v4 = *(__int64 **)(a1 + 8);
  if ( v4 )
  {
    v6 = *a3;
    v3 = (__int64 *)(a1 + 8);
    if ( (v6 & 1) != 0 )
      v7 = *((_QWORD *)a3 + 1);
    else
      v7 = v6 >> 1;
    if ( (v6 & 1) != 0 )
      v8 = (const void *)*((_QWORD *)a3 + 2);
    else
      v8 = a3 + 1;
    while ( 1 )
    {
      v9 = *((unsigned __int8 *)v4 + 32);
      if ( (v9 & 1) != 0 )
        v10 = v4[5];
      else
        v10 = v9 >> 1;
      if ( v10 >= v7 )
        v11 = v7;
      else
        v11 = v10;
      if ( v11 && ((v9 & 1) == 0 ? (v12 = (char *)v4 + 33) : (v12 = (char *)v4[6]), (v13 = memcmp(v8, v12, v11)) != 0) )
      {
        if ( (v13 & 0x80000000) == 0 )
          goto LABEL_29;
      }
      else if ( v7 >= v10 )
      {
        if ( !v11 )
          goto LABEL_32;
        v12 = (v9 & 1) != 0 ? (char *)v4[6] : (char *)v4 + 33;
LABEL_29:
        v15 = memcmp(v12, v8, v11);
        if ( v15 )
        {
          if ( (v15 & 0x80000000) == 0 )
            goto LABEL_34;
        }
        else
        {
LABEL_32:
          if ( v10 >= v7 )
            goto LABEL_34;
        }
        v3 = v4 + 1;
        v14 = (__int64 *)v4[1];
        if ( !v14 )
        {
LABEL_34:
          *a2 = v4;
          return v3;
        }
        goto LABEL_8;
      }
      v14 = (__int64 *)*v4;
      if ( !*v4 )
      {
        *a2 = v4;
        return v4;
      }
      v3 = v4;
LABEL_8:
      v4 = v14;
    }
  }
  *a2 = v3;
  return v3;
}

//----- (0000000000017D54) ----------------------------------------------------
__int64 *__fastcall std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2)
{
  __int64 v2; // x9
  _BYTE *v3; // x10
  __int64 *v4; // x8
  __int64 v5; // x12
  _BYTE *v6; // x12
  int v7; // t1
  __int64 v8; // x12
  int v9; // t1
  __int64 v10; // x10
  _QWORD *v11; // x8
  __int64 v12; // x10
  __int64 *v13; // x9
  __int64 v14; // x10
  __int64 **v15; // x10
  __int64 v16; // x11
  _QWORD *v17; // x10
  __int64 v18; // x11
  _QWORD *v19; // x8
  __int64 v20; // x11
  __int64 *v21; // x9
  __int64 v22; // x10
  __int64 **v23; // x10
  __int64 v24; // x11

  *((_BYTE *)a2 + 24) = a2 == result;
  if ( a2 != result )
  {
    do
    {
      v2 = a2[2];
      v3 = (_BYTE *)(v2 + 24);
      if ( *(_BYTE *)(v2 + 24) )
        break;
      v4 = *(__int64 **)(v2 + 16);
      v5 = *v4;
      if ( *v4 == v2 )
      {
        v8 = v4[1];
        if ( !v8 || (v9 = *(unsigned __int8 *)(v8 + 24), v6 = (_BYTE *)(v8 + 24), v9) )
        {
          if ( *(__int64 **)v2 != a2 )
          {
            v17 = *(_QWORD **)(v2 + 8);
            v18 = *v17;
            *(_QWORD *)(v2 + 8) = *v17;
            if ( v18 )
            {
              *(_QWORD *)(v18 + 16) = v2;
              v4 = *(__int64 **)(v2 + 16);
            }
            v17[2] = v4;
            v19 = *(_QWORD **)(v2 + 16);
            v20 = *v19 != v2;
            v19[v20] = v17;
            *v17 = v2;
            *(_QWORD *)(v2 + 16) = v17;
            v4 = (__int64 *)v17[2];
            v3 = v17 + 3;
          }
          *v3 = 1;
          v21 = (__int64 *)*v4;
          *((_BYTE *)v4 + 24) = 0;
          v22 = v21[1];
          *v4 = v22;
          if ( v22 )
            *(_QWORD *)(v22 + 16) = v4;
          v21[2] = v4[2];
          v23 = (__int64 **)v4[2];
          v24 = *v23 != v4;
          v23[v24] = v21;
          v21[1] = (__int64)v4;
          v4[2] = (__int64)v21;
          return result;
        }
      }
      else if ( !v5 || (v7 = *(unsigned __int8 *)(v5 + 24), v6 = (_BYTE *)(v5 + 24), v7) )
      {
        if ( *(__int64 **)v2 == a2 )
        {
          v10 = a2[1];
          *(_QWORD *)v2 = v10;
          if ( v10 )
          {
            *(_QWORD *)(v10 + 16) = v2;
            v4 = *(__int64 **)(v2 + 16);
          }
          a2[2] = (__int64)v4;
          v11 = *(_QWORD **)(v2 + 16);
          v12 = *v11 != v2;
          v11[v12] = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v4 = (__int64 *)a2[2];
          v3 = a2 + 3;
        }
        *v3 = 1;
        v13 = (__int64 *)v4[1];
        *((_BYTE *)v4 + 24) = 0;
        v14 = *v13;
        v4[1] = *v13;
        if ( v14 )
          *(_QWORD *)(v14 + 16) = v4;
        v13[2] = v4[2];
        v15 = (__int64 **)v4[2];
        v16 = *v15 != v4;
        v15[v16] = v13;
        *v13 = (__int64)v4;
        v4[2] = (__int64)v13;
        return result;
      }
      a2 = *(__int64 **)(v2 + 16);
      *v3 = 1;
      *((_BYTE *)v4 + 24) = v4 == result;
      *v6 = 1;
    }
    while ( v4 != result );
  }
  return result;
}

//----- (0000000000017EFC) ----------------------------------------------------
std::__ndk1 *__fastcall sub_17EFC(pthread_t *a1, __int128 *a2)
{
  std::__thread_struct *v4; // x21
  char *v5; // x0
  __int64 v6; // x10
  __int128 v7; // q0
  char v8; // w11
  __int64 v9; // x8
  std::__ndk1 *result; // x0
  const char *v11; // x2
  __int128 v12; // [xsp+8h] [xbp-48h]

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v4 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v4);
  v5 = (char *)operator new(0x38uLL);
  v6 = *((_QWORD *)a2 + 2);
  v7 = *a2;
  v8 = *((_BYTE *)a2 + 24);
  *(_QWORD *)((char *)&v12 + 7) = *((_QWORD *)a2 + 4);
  *(_QWORD *)&v12 = *(_QWORD *)((char *)a2 + 25);
  *((_QWORD *)a2 + 3) = 0LL;
  *((_QWORD *)a2 + 4) = 0LL;
  v9 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0LL;
  *((_QWORD *)v5 + 3) = v6;
  *(_QWORD *)v5 = v4;
  *(_OWORD *)(v5 + 8) = v7;
  v5[32] = v8;
  *((_QWORD *)v5 + 5) = *(_QWORD *)((char *)&v12 + 7);
  *((_QWORD *)v5 + 6) = v9;
  *(_QWORD *)(v5 + 33) = v12;
  result = (std::__ndk1 *)pthread_create(
                            a1,
                            0LL,
                            (void *(*)(void *))std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (rgbd::RGBDAngStrong::*)(std::string),rgbd::RGBDAngStrong*,std::string&>>>,
                            v5);
  if ( (_DWORD)result )
    std::__throw_system_error(result, (int)"thread constructor failed", v11);
  return result;
}
// 17FD8: variable 'v11' is possibly undefined

//----- (000000000001803C) ----------------------------------------------------
__int64 __fastcall std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (rgbd::RGBDAngStrong::*)(std::string),rgbd::RGBDAngStrong*,std::string&>>>(
        __int64 a1)
{
  pthread_key_t *v2; // x0
  const void *v3; // x1
  std::__thread_struct *v4; // x20

  v2 = (pthread_key_t *)std::__thread_local_data((std::__ndk1 *)a1);
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0LL;
  pthread_setspecific(*v2, v3);
  sub_1810C((char **)(a1 + 8), (_QWORD *)(a1 + 24), a1 + 32);
  if ( (*(_BYTE *)(a1 + 32) & 1) != 0 )
    operator delete(*(void **)(a1 + 48));
  v4 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0LL;
  if ( v4 )
  {
    std::__thread_struct::~__thread_struct(v4);
    operator delete(v4);
  }
  operator delete((void *)a1);
  return 0LL;
}

//----- (000000000001810C) ----------------------------------------------------
void __fastcall sub_1810C(char **a1, _QWORD *a2, __int64 a3)
{
  __int64 v3; // x9
  char *v4; // x25
  _QWORD *v5; // x19
  __int128 v6; // q0
  size_t v7; // x20
  const void *v8; // x21
  char *v9; // x22
  __int128 v10; // [xsp+0h] [xbp-60h] BYREF
  void *v11; // [xsp+10h] [xbp-50h]
  __int64 v12; // [xsp+18h] [xbp-48h]

  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = *a1;
  v3 = (__int64)a1[1];
  v5 = (_QWORD *)(*a2 + (v3 >> 1));
  if ( (v3 & 1) != 0 )
    v4 = *(char **)&v4[*v5];
  v11 = 0LL;
  v10 = 0uLL;
  if ( (*(_BYTE *)a3 & 1) == 0 )
  {
    v6 = *(_OWORD *)a3;
    v11 = *(void **)(a3 + 16);
    v10 = v6;
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(a3 + 8);
  if ( v7 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v8 = *(const void **)(a3 + 16);
  if ( v7 >= 0x17 )
  {
    v9 = (char *)operator new((v7 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    *((_QWORD *)&v10 + 1) = v7;
    v11 = v9;
    *(_QWORD *)&v10 = (v7 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
  }
  else
  {
    v9 = (char *)&v10 + 1;
    LOBYTE(v10) = 2 * v7;
    if ( !v7 )
      goto LABEL_11;
  }
  memcpy(v9, v8, v7);
LABEL_11:
  v9[v7] = 0;
LABEL_12:
  ((void (__fastcall *)(_QWORD *, __int128 *))v4)(v5, &v10);
  if ( (v10 & 1) != 0 )
    operator delete(v11);
}

//----- (0000000000018244) ----------------------------------------------------
_QWORD *__fastcall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
        __int64 a1,
        unsigned __int8 *a2,
        __int64 a3,
        __int128 **a4)
{
  unsigned __int64 v4; // x21
  unsigned __int64 v7; // x8
  unsigned __int64 v8; // x10
  __int64 *v11; // x1
  unsigned __int64 v12; // x2
  unsigned __int64 v13; // x0
  unsigned __int64 v14; // x28
  unsigned __int64 v15; // x20
  unsigned __int64 v16; // x27
  __int64 v17; // x13
  _QWORD *v18; // x8
  _QWORD *v19; // x24
  unsigned __int64 v20; // x8
  unsigned __int8 *v21; // x11
  unsigned __int8 *v22; // x9
  size_t v23; // x25
  unsigned __int8 *v24; // x26
  unsigned __int64 v25; // x8
  unsigned __int64 v26; // x10
  unsigned __int64 v27; // x11
  const void *v28; // x0
  __int64 v29; // x9
  unsigned __int64 v30; // x20
  __int64 v31; // x21
  __int128 **v32; // x23
  __int64 v33; // x22
  int v34; // w0
  float v35; // s0
  float v36; // s1
  _BOOL8 v37; // x9
  unsigned __int64 v38; // x8
  unsigned __int64 v39; // x9
  std::__ndk1 *v40; // x1
  _QWORD *v41; // x8
  unsigned __int64 v42; // x9
  unsigned __int64 v44; // [xsp+10h] [xbp-80h]
  void *v45[4]; // [xsp+20h] [xbp-70h] BYREF

  v45[3] = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  if ( (v7 & 1) != 0 )
    v11 = (__int64 *)*((_QWORD *)a2 + 2);
  else
    v11 = (__int64 *)(a2 + 1);
  if ( (v7 & 1) != 0 )
    v12 = v8;
  else
    v12 = v7 >> 1;
  v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()((__int64)v45, v11, v12);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = v13;
  if ( v14 )
  {
    v16 = v14 - 1;
    v17 = (v14 - 1) & v14;
    if ( v17 )
    {
      v4 = v13;
      if ( v13 >= v14 )
        v4 = v13 % v14;
    }
    else
    {
      v4 = v16 & v13;
    }
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if ( v18 )
    {
      v19 = (_QWORD *)*v18;
      if ( *v18 )
      {
        v44 = v13;
        v20 = *a2;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v22 = a2 + 1;
        if ( (v20 & 1) != 0 )
          v23 = *((_QWORD *)a2 + 1);
        else
          v23 = v20 >> 1;
        if ( (v20 & 1) != 0 )
          v24 = v21;
        else
          v24 = v22;
        do
        {
          v25 = v19[1];
          if ( v25 == v15 )
            goto LABEL_28;
          if ( v17 )
          {
            if ( v25 >= v14 )
            {
              if ( v25 % v14 != v4 )
                break;
              goto LABEL_28;
            }
          }
          else
          {
            v25 &= v16;
          }
          if ( v25 != v4 )
            break;
LABEL_28:
          v26 = *((unsigned __int8 *)v19 + 16);
          v27 = v19[3];
          if ( (v26 & 1) == 0 )
            v27 = v26 >> 1;
          if ( v27 == v23 )
          {
            if ( (v26 & 1) != 0 )
              v28 = (const void *)v19[4];
            else
              v28 = (char *)v19 + 17;
            if ( (v26 & 1) != 0 )
            {
              if ( !v23 )
                return v19;
              v30 = v4;
              v31 = a3;
              v32 = a4;
              v33 = v17;
              v34 = memcmp(v28, v24, v23);
              v17 = v33;
              a4 = v32;
              a3 = v31;
              v4 = v30;
              v15 = v44;
              if ( !v34 )
                return v19;
            }
            else
            {
              if ( !v23 )
                return v19;
              v29 = 0LL;
              while ( *((unsigned __int8 *)v19 + v29 + 17) == v24[v29] )
              {
                if ( v26 >> 1 == ++v29 )
                  return v19;
              }
            }
          }
          v19 = (_QWORD *)*v19;
        }
        while ( v19 );
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
    a4,
    a1,
    v15,
    (__int64)v45);
  v35 = *(float *)(a1 + 32);
  v36 = (float)(unsigned __int64)(*(_QWORD *)(a1 + 24) + 1LL);
  if ( !v14 || (float)(v35 * (float)v14) < v36 )
  {
    v37 = v14 < 3 || ((v14 - 1) & v14) != 0;
    v38 = v37 | (2 * v14);
    v39 = vcvtps_u32_f32(v36 / v35);
    if ( v38 >= v39 )
      v40 = (std::__ndk1 *)v38;
    else
      v40 = (std::__ndk1 *)v39;
    std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::rehash(
      a1,
      v40);
    v14 = *(_QWORD *)(a1 + 8);
    if ( ((v14 - 1) & v14) != 0 )
    {
      if ( v15 >= v14 )
        v4 = v15 % v14;
      else
        v4 = v15;
    }
    else
    {
      v4 = (v14 - 1) & v15;
    }
  }
  v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if ( v41 )
  {
    *(_QWORD *)v45[0] = *v41;
    *v41 = v45[0];
  }
  else
  {
    *(_QWORD *)v45[0] = *(_QWORD *)(a1 + 16);
    *(void **)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if ( *(_QWORD *)v45[0] )
    {
      v42 = *(_QWORD *)(*(_QWORD *)v45[0] + 8LL);
      if ( ((v14 - 1) & v14) != 0 )
      {
        if ( v42 >= v14 )
          v42 %= v14;
      }
      else
      {
        v42 &= v14 - 1;
      }
      *(void **)(*(_QWORD *)a1 + 8 * v42) = v45[0];
    }
  }
  v19 = v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v19;
}
// 184AC: variable 'v4' is possibly undefined

//----- (00000000000185B0) ----------------------------------------------------
_QWORD *__usercall std::__hash_table<std::__hash_value_type<std::string,v4l2Capture *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,v4l2Capture *>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,v4l2Capture *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(
        __int64 a1@<X0>,
        __int64 a2@<X1>,
        __int128 **a3@<X3>,
        __int64 a4@<X8>)
{
  __int64 v4; // x23
  _QWORD *v8; // x0
  __int128 *v9; // x8
  _QWORD *v10; // x20
  _QWORD *result; // x0
  __int128 v12; // q0
  size_t v13; // x22
  const void *v14; // x23
  void *v15; // x24
  _QWORD *v16; // x8

  v4 = a1 + 16;
  v8 = (_QWORD *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v4;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = *a3;
  v10 = v8;
  v8[2] = 0LL;
  result = v8 + 2;
  v10[3] = 0LL;
  v10[4] = 0LL;
  if ( (*(_BYTE *)v9 & 1) != 0 )
  {
    v13 = *((_QWORD *)v9 + 1);
    if ( v13 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v14 = (const void *)*((_QWORD *)v9 + 2);
    if ( v13 >= 0x17 )
    {
      v15 = (void *)operator new((v13 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v10[3] = v13;
      v10[4] = v15;
      v10[2] = (v13 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v15 = (char *)v10 + 17;
      *((_BYTE *)v10 + 16) = 2 * v13;
      if ( !v13 )
        goto LABEL_9;
    }
    result = memcpy(v15, v14, v13);
LABEL_9:
    *((_BYTE *)v15 + v13) = 0;
    goto LABEL_10;
  }
  v12 = *v9;
  result[2] = *((_QWORD *)v9 + 2);
  *(_OWORD *)result = v12;
LABEL_10:
  v16 = *(_QWORD **)a4;
  v10[5] = 0LL;
  *(_BYTE *)(a4 + 16) = 1;
  *v16 = 0LL;
  v16[1] = a2;
  return result;
}

//----- (00000000000186BC) ----------------------------------------------------
_QWORD *__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
        __int64 a1,
        unsigned __int8 *a2,
        __int64 a3,
        __int128 **a4)
{
  unsigned __int64 v4; // x21
  unsigned __int64 v7; // x8
  unsigned __int64 v8; // x10
  __int64 *v11; // x1
  unsigned __int64 v12; // x2
  unsigned __int64 v13; // x0
  unsigned __int64 v14; // x28
  unsigned __int64 v15; // x20
  unsigned __int64 v16; // x27
  __int64 v17; // x13
  _QWORD *v18; // x8
  _QWORD *v19; // x24
  unsigned __int64 v20; // x8
  unsigned __int8 *v21; // x11
  unsigned __int8 *v22; // x9
  size_t v23; // x25
  unsigned __int8 *v24; // x26
  unsigned __int64 v25; // x8
  unsigned __int64 v26; // x10
  unsigned __int64 v27; // x11
  const void *v28; // x0
  __int64 v29; // x9
  unsigned __int64 v30; // x20
  __int64 v31; // x21
  __int128 **v32; // x23
  __int64 v33; // x22
  int v34; // w0
  float v35; // s0
  float v36; // s1
  _BOOL8 v37; // x9
  unsigned __int64 v38; // x8
  unsigned __int64 v39; // x9
  std::__ndk1 *v40; // x1
  _QWORD *v41; // x8
  unsigned __int64 v42; // x9
  unsigned __int64 v44; // [xsp+10h] [xbp-80h]
  void *v45[4]; // [xsp+20h] [xbp-70h] BYREF

  v45[3] = *(void **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  if ( (v7 & 1) != 0 )
    v11 = (__int64 *)*((_QWORD *)a2 + 2);
  else
    v11 = (__int64 *)(a2 + 1);
  if ( (v7 & 1) != 0 )
    v12 = v8;
  else
    v12 = v7 >> 1;
  v13 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()((__int64)v45, v11, v12);
  v14 = *(_QWORD *)(a1 + 8);
  v15 = v13;
  if ( v14 )
  {
    v16 = v14 - 1;
    v17 = (v14 - 1) & v14;
    if ( v17 )
    {
      v4 = v13;
      if ( v13 >= v14 )
        v4 = v13 % v14;
    }
    else
    {
      v4 = v16 & v13;
    }
    v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if ( v18 )
    {
      v19 = (_QWORD *)*v18;
      if ( *v18 )
      {
        v44 = v13;
        v20 = *a2;
        v21 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v22 = a2 + 1;
        if ( (v20 & 1) != 0 )
          v23 = *((_QWORD *)a2 + 1);
        else
          v23 = v20 >> 1;
        if ( (v20 & 1) != 0 )
          v24 = v21;
        else
          v24 = v22;
        do
        {
          v25 = v19[1];
          if ( v25 == v15 )
            goto LABEL_28;
          if ( v17 )
          {
            if ( v25 >= v14 )
            {
              if ( v25 % v14 != v4 )
                break;
              goto LABEL_28;
            }
          }
          else
          {
            v25 &= v16;
          }
          if ( v25 != v4 )
            break;
LABEL_28:
          v26 = *((unsigned __int8 *)v19 + 16);
          v27 = v19[3];
          if ( (v26 & 1) == 0 )
            v27 = v26 >> 1;
          if ( v27 == v23 )
          {
            if ( (v26 & 1) != 0 )
              v28 = (const void *)v19[4];
            else
              v28 = (char *)v19 + 17;
            if ( (v26 & 1) != 0 )
            {
              if ( !v23 )
                return v19;
              v30 = v4;
              v31 = a3;
              v32 = a4;
              v33 = v17;
              v34 = memcmp(v28, v24, v23);
              v17 = v33;
              a4 = v32;
              a3 = v31;
              v4 = v30;
              v15 = v44;
              if ( !v34 )
                return v19;
            }
            else
            {
              if ( !v23 )
                return v19;
              v29 = 0LL;
              while ( *((unsigned __int8 *)v19 + v29 + 17) == v24[v29] )
              {
                if ( v26 >> 1 == ++v29 )
                  return v19;
              }
            }
          }
          v19 = (_QWORD *)*v19;
        }
        while ( v19 );
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
    a4,
    a1,
    v15,
    (__int64)v45);
  v35 = *(float *)(a1 + 32);
  v36 = (float)(unsigned __int64)(*(_QWORD *)(a1 + 24) + 1LL);
  if ( !v14 || (float)(v35 * (float)v14) < v36 )
  {
    v37 = v14 < 3 || ((v14 - 1) & v14) != 0;
    v38 = v37 | (2 * v14);
    v39 = vcvtps_u32_f32(v36 / v35);
    if ( v38 >= v39 )
      v40 = (std::__ndk1 *)v38;
    else
      v40 = (std::__ndk1 *)v39;
    std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::rehash(
      a1,
      v40);
    v14 = *(_QWORD *)(a1 + 8);
    if ( ((v14 - 1) & v14) != 0 )
    {
      if ( v15 >= v14 )
        v4 = v15 % v14;
      else
        v4 = v15;
    }
    else
    {
      v4 = (v14 - 1) & v15;
    }
  }
  v41 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if ( v41 )
  {
    *(_QWORD *)v45[0] = *v41;
    *v41 = v45[0];
  }
  else
  {
    *(_QWORD *)v45[0] = *(_QWORD *)(a1 + 16);
    *(void **)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if ( *(_QWORD *)v45[0] )
    {
      v42 = *(_QWORD *)(*(_QWORD *)v45[0] + 8LL);
      if ( ((v14 - 1) & v14) != 0 )
      {
        if ( v42 >= v14 )
          v42 %= v14;
      }
      else
      {
        v42 &= v14 - 1;
      }
      *(void **)(*(_QWORD *)a1 + 8 * v42) = v45[0];
    }
  }
  v19 = v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v19;
}
// 18924: variable 'v4' is possibly undefined

//----- (0000000000018A30) ----------------------------------------------------
long double __usercall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<Q0>(
        __int64 a1@<X0>,
        __int64 a2@<X1>,
        __int128 **a3@<X3>,
        __int64 a4@<X8>)
{
  __int64 v4; // x23
  __int64 v8; // x0
  __int128 *v9; // x8
  __int64 v10; // x21
  __int64 v11; // x0
  __int128 v12; // q0
  size_t v13; // x22
  const void *v14; // x23
  void *v15; // x24
  _QWORD *v16; // x8
  long double result; // q0

  v4 = a1 + 16;
  v8 = operator new(0x100uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v4;
  *(_BYTE *)(a4 + 16) = 0;
  v9 = *a3;
  v10 = v8;
  *(_QWORD *)(v8 + 16) = 0LL;
  v11 = v8 + 16;
  *(_QWORD *)(v10 + 24) = 0LL;
  *(_QWORD *)(v10 + 32) = 0LL;
  if ( (*(_BYTE *)v9 & 1) != 0 )
  {
    v13 = *((_QWORD *)v9 + 1);
    if ( v13 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v14 = (const void *)*((_QWORD *)v9 + 2);
    if ( v13 >= 0x17 )
    {
      v15 = (void *)operator new((v13 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      *(_QWORD *)(v10 + 24) = v13;
      *(_QWORD *)(v10 + 32) = v15;
      *(_QWORD *)(v10 + 16) = (v13 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v15 = (void *)(v10 + 17);
      *(_BYTE *)(v10 + 16) = 2 * v13;
      if ( !v13 )
        goto LABEL_9;
    }
    memcpy(v15, v14, v13);
LABEL_9:
    *((_BYTE *)v15 + v13) = 0;
    goto LABEL_10;
  }
  v12 = *v9;
  *(_QWORD *)(v11 + 16) = *((_QWORD *)v9 + 2);
  *(_OWORD *)v11 = v12;
LABEL_10:
  *(_BYTE *)(a4 + 16) = 1;
  v16 = *(_QWORD **)a4;
  *(_OWORD *)&result = 0uLL;
  *(_OWORD *)(v10 + 224) = 0u;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 192) = 0u;
  *(_OWORD *)(v10 + 208) = 0u;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_OWORD *)(v10 + 128) = 0u;
  *(_OWORD *)(v10 + 144) = 0u;
  *(_OWORD *)(v10 + 96) = 0u;
  *(_OWORD *)(v10 + 112) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_OWORD *)(v10 + 48) = 0u;
  *v16 = 0LL;
  v16[1] = a2;
  return result;
}

//----- (0000000000018B58) ----------------------------------------------------
void __fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::rehash(
        __int64 a1,
        std::__ndk1 *this)
{
  std::__ndk1 *prime; // x20
  unsigned __int64 v4; // x21
  void **v5; // x0
  unsigned __int64 v6; // x1
  _BOOL4 v7; // w8
  std::__ndk1 *v8; // x0

  if ( this == (std::__ndk1 *)((char *)&dword_0 + 1) )
  {
    prime = (std::__ndk1 *)(&dword_0 + 2);
  }
  else
  {
    prime = this;
    if ( (((unsigned __int64)this - 1) & (unsigned __int64)this) != 0 )
      prime = (std::__ndk1 *)std::__next_prime(this, (unsigned __int64)this);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if ( (unsigned __int64)prime > v4 )
  {
    v5 = (void **)a1;
    v6 = (unsigned __int64)prime;
LABEL_7:
    std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__rehash(
      v5,
      v6);
    return;
  }
  if ( (unsigned __int64)prime < v4 )
  {
    v7 = v4 >= 3 && ((v4 - 1) & v4) == 0;
    v8 = (std::__ndk1 *)vcvtps_u32_f32((float)*(unsigned __int64 *)(a1 + 24) / *(float *)(a1 + 32));
    if ( v7 )
    {
      if ( (unsigned __int64)v8 >= 2 )
        v8 = (std::__ndk1 *)(1LL << -(char)__clz((unsigned __int64)v8 - 1));
    }
    else
    {
      v8 = (std::__ndk1 *)std::__next_prime(v8, (unsigned __int64)this);
    }
    v6 = (unsigned __int64)(prime >= v8 ? prime : v8);
    if ( v6 < v4 )
    {
      v5 = (void **)a1;
      goto LABEL_7;
    }
  }
}
// 18C10: variable 'this' is possibly undefined
// 0: using guessed type int dword_0;

//----- (0000000000018C3C) ----------------------------------------------------
void __fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__rehash(
        void **a1,
        unsigned __int64 a2)
{
  void **v2; // x19
  unsigned __int64 v3; // x20
  void *v4; // x0
  void *v5; // x8
  char *v6; // x8
  __int64 **v7; // x24
  unsigned __int64 v8; // x28
  unsigned __int64 v9; // x25
  __int64 v10; // x14
  void *v11; // x0
  __int64 *v12; // x23
  unsigned __int64 v13; // x27
  __int64 *v14; // x8
  __int64 **v15; // x22
  unsigned __int64 v16; // x16
  unsigned __int8 *v17; // x17
  __int64 **v18; // x26
  unsigned __int64 v19; // x10
  size_t v20; // x21
  __int64 v21; // x2
  __int64 *v22; // x8
  char v23; // w9
  unsigned int v24; // t1
  unsigned __int64 v25; // x10
  unsigned __int64 v26; // x11
  const void *v27; // x0
  unsigned __int8 *v28; // x1
  __int64 v29; // x8
  unsigned __int8 *v30; // x9
  unsigned __int64 v31; // x20
  unsigned __int8 *v32; // x19
  int v33; // w0
  __int64 v34; // [xsp+0h] [xbp-70h]
  void **v35; // [xsp+8h] [xbp-68h]
  unsigned __int64 v36; // [xsp+10h] [xbp-60h]
  __int64 v37; // [xsp+18h] [xbp-58h]

  v2 = a1;
  if ( a2 )
  {
    v3 = a2;
    if ( a2 >> 61 )
      sub_16148("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    v4 = (void *)operator new(8 * a2);
    v5 = *v2;
    *v2 = v4;
    if ( v5 )
      operator delete(v5);
    v6 = 0LL;
    v2[1] = (void *)v3;
    do
      *((_QWORD *)*v2 + (_QWORD)v6++) = 0LL;
    while ( (char *)v3 != v6 );
    v7 = (__int64 **)v2[2];
    if ( v7 )
    {
      v8 = (unsigned __int64)v7[1];
      v9 = v3 - 1;
      v10 = (v3 - 1) & v3;
      if ( v10 )
      {
        if ( v8 >= v3 )
          v8 %= v3;
      }
      else
      {
        v8 &= v9;
      }
      *((_QWORD *)*v2 + v8) = v2 + 2;
      v12 = *v7;
      if ( *v7 )
      {
        v35 = v2;
        v36 = v3;
        v34 = (v3 - 1) & v3;
        do
        {
          v13 = v12[1];
          if ( v10 )
          {
            if ( v13 >= v3 )
              v13 %= v3;
            if ( v13 != v8 )
            {
LABEL_23:
              if ( *((_QWORD *)*v2 + v13) )
              {
                v14 = (__int64 *)*v12;
                v15 = (__int64 **)v12;
                if ( *v12 )
                {
                  v16 = *((unsigned __int8 *)v12 + 16);
                  v17 = (unsigned __int8 *)v12 + 17;
                  v18 = (__int64 **)v12;
                  v19 = v16 >> 1;
                  if ( (v16 & 1) != 0 )
                    v20 = v12[3];
                  else
                    v20 = v16 >> 1;
                  v21 = -(__int64)v19;
                  v37 = -(__int64)v19;
                  do
                  {
                    v15 = v18;
                    v18 = (__int64 **)v14;
                    v24 = *((unsigned __int8 *)v14 + 16);
                    v22 = v14 + 2;
                    v23 = v24;
                    v25 = v22[1];
                    v26 = (unsigned __int64)v24 >> 1;
                    if ( (v24 & 1) == 0 )
                      v25 = v26;
                    if ( v20 != v25 )
                      break;
                    if ( (v16 & 1) != 0 )
                      v27 = (const void *)v12[4];
                    else
                      v27 = v17;
                    if ( (v23 & 1) != 0 )
                      v28 = (unsigned __int8 *)v18[4];
                    else
                      v28 = (unsigned __int8 *)v22 + 1;
                    if ( (v16 & 1) != 0 )
                    {
                      if ( v20 )
                      {
                        v31 = v16;
                        v32 = v17;
                        v33 = memcmp(v27, v28, v20);
                        v17 = v32;
                        v16 = v31;
                        v10 = v34;
                        v2 = v35;
                        v3 = v36;
                        v21 = v37;
                        if ( v33 )
                          break;
                      }
                    }
                    else
                    {
                      v29 = v21;
                      v30 = v17;
                      if ( v20 )
                      {
                        while ( *v30 == *v28 )
                        {
                          ++v30;
                          ++v29;
                          ++v28;
                          if ( !v29 )
                            goto LABEL_45;
                        }
                        break;
                      }
                    }
LABEL_45:
                    v14 = *v18;
                    v15 = v18;
                  }
                  while ( *v18 );
                }
                *v7 = *v15;
                *v15 = (__int64 *)**((_QWORD **)*v2 + v13);
                **((_QWORD **)*v2 + v13) = v12;
              }
              else
              {
                *((_QWORD *)*v2 + v13) = v7;
                v7 = (__int64 **)v12;
                v8 = v13;
              }
              goto LABEL_48;
            }
          }
          else
          {
            v13 &= v9;
            if ( v13 != v8 )
              goto LABEL_23;
          }
          v7 = (__int64 **)v12;
LABEL_48:
          v12 = *v7;
        }
        while ( *v7 );
      }
    }
  }
  else
  {
    v11 = *a1;
    *v2 = 0LL;
    if ( v11 )
      operator delete(v11);
    v2[1] = 0LL;
  }
}

//----- (0000000000018E8C) ----------------------------------------------------
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation const&>,std::tuple<>>(
        __int64 a1,
        int *a2,
        __int64 a3,
        int **a4)
{
  unsigned __int64 v4; // x24
  unsigned __int64 v5; // x22
  unsigned __int64 v6; // x23
  unsigned __int64 v9; // x8
  __int64 *v10; // x20
  unsigned __int64 v11; // x10
  int v12; // w8
  float v13; // s0
  float v14; // s1
  _BOOL8 v15; // x9
  unsigned __int64 v16; // x8
  unsigned __int64 v17; // x9
  std::__ndk1 *v18; // x1
  __int64 v19; // x9
  __int64 *v20; // x8
  unsigned __int64 v21; // x8

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  if ( v5 )
  {
    v9 = v5 - 1;
    if ( ((v5 - 1) & v5) != 0 )
    {
      v4 = *a2;
      if ( v5 <= v6 )
        v4 = v6 % v5;
    }
    else
    {
      v4 = v9 & v6;
    }
    v10 = *(__int64 **)(*(_QWORD *)a1 + 8 * v4);
    if ( v10 )
    {
      while ( 1 )
      {
        v10 = (__int64 *)*v10;
        if ( !v10 )
          break;
        v11 = v10[1];
        if ( v11 != v6 )
        {
          if ( ((v5 - 1) & v5) == 0 )
          {
            v11 &= v9;
LABEL_15:
            if ( v11 != v4 )
              break;
            goto LABEL_16;
          }
          if ( v11 < v5 )
            goto LABEL_15;
          if ( v11 % v5 != v4 )
            break;
        }
LABEL_16:
        if ( *((_DWORD *)v10 + 4) == (_DWORD)v6 )
          return v10;
      }
    }
  }
  v10 = (__int64 *)operator new(0x30uLL);
  v12 = **a4;
  v10[4] = 0LL;
  v10[5] = 0LL;
  *((_DWORD *)v10 + 4) = v12;
  v10[3] = 0LL;
  *v10 = 0LL;
  v10[1] = v6;
  v13 = *(float *)(a1 + 32);
  v14 = (float)(unsigned __int64)(*(_QWORD *)(a1 + 24) + 1LL);
  if ( !v5 || (float)(v13 * (float)v5) < v14 )
  {
    v15 = v5 < 3 || ((v5 - 1) & v5) != 0;
    v16 = v15 | (2 * v5);
    v17 = vcvtps_u32_f32(v14 / v13);
    if ( v16 >= v17 )
      v18 = (std::__ndk1 *)v16;
    else
      v18 = (std::__ndk1 *)v17;
    std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::rehash(
      a1,
      v18);
    v5 = *(_QWORD *)(a1 + 8);
    if ( ((v5 - 1) & v5) != 0 )
    {
      if ( v5 <= v6 )
        v4 = v6 % v5;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v5 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(__int64 **)(*(_QWORD *)a1 + 8 * v4);
  if ( v20 )
  {
    *v10 = *v20;
LABEL_39:
    *v20 = (__int64)v10;
    goto LABEL_40;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if ( *v10 )
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ( ((v5 - 1) & v5) != 0 )
    {
      if ( v21 >= v5 )
        v21 %= v5;
    }
    else
    {
      v21 &= v5 - 1;
    }
    v20 = (__int64 *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}
// 18FFC: variable 'v4' is possibly undefined

//----- (00000000000190AC) ----------------------------------------------------
void __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::rehash(
        __int64 a1,
        std::__ndk1 *this)
{
  std::__ndk1 *prime; // x20
  unsigned __int64 v4; // x21
  __int64 v5; // x0
  unsigned __int64 v6; // x1
  _BOOL4 v7; // w8
  std::__ndk1 *v8; // x0

  if ( this == (std::__ndk1 *)((char *)&dword_0 + 1) )
  {
    prime = (std::__ndk1 *)(&dword_0 + 2);
  }
  else
  {
    prime = this;
    if ( (((unsigned __int64)this - 1) & (unsigned __int64)this) != 0 )
      prime = (std::__ndk1 *)std::__next_prime(this, (unsigned __int64)this);
  }
  v4 = *(_QWORD *)(a1 + 8);
  if ( (unsigned __int64)prime > v4 )
  {
    v5 = a1;
    v6 = (unsigned __int64)prime;
LABEL_7:
    std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__rehash(
      v5,
      v6);
    return;
  }
  if ( (unsigned __int64)prime < v4 )
  {
    v7 = v4 >= 3 && ((v4 - 1) & v4) == 0;
    v8 = (std::__ndk1 *)vcvtps_u32_f32((float)*(unsigned __int64 *)(a1 + 24) / *(float *)(a1 + 32));
    if ( v7 )
    {
      if ( (unsigned __int64)v8 >= 2 )
        v8 = (std::__ndk1 *)(1LL << -(char)__clz((unsigned __int64)v8 - 1));
    }
    else
    {
      v8 = (std::__ndk1 *)std::__next_prime(v8, (unsigned __int64)this);
    }
    v6 = (unsigned __int64)(prime >= v8 ? prime : v8);
    if ( v6 < v4 )
    {
      v5 = a1;
      goto LABEL_7;
    }
  }
}
// 19164: variable 'this' is possibly undefined
// 0: using guessed type int dword_0;

//----- (0000000000019190) ----------------------------------------------------
void __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__rehash(
        __int64 a1,
        unsigned __int64 a2)
{
  __int64 v4; // x0
  void *v5; // x8
  __int64 v6; // x8
  __int64 **v7; // x8
  unsigned __int64 v8; // x11
  unsigned __int64 v9; // x9
  void *v10; // x0
  __int64 *v11; // x12
  unsigned __int64 v12; // x13
  __int64 *v13; // x15
  _QWORD *v14; // x14
  __int64 v15; // x13

  if ( a2 )
  {
    if ( a2 >> 61 )
      sub_16148("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if ( v5 )
      operator delete(v5);
    v6 = 0LL;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0LL;
    while ( a2 != v6 );
    v7 = *(__int64 ***)(a1 + 16);
    if ( !v7 )
      return;
    v8 = (unsigned __int64)v7[1];
    v9 = a2 - 1;
    if ( ((a2 - 1) & a2) != 0 )
    {
      if ( v8 >= a2 )
        v8 %= a2;
    }
    else
    {
      v8 &= v9;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
    v11 = *v7;
    if ( !*v7 )
      return;
    while ( 1 )
    {
      v12 = v11[1];
      if ( ((a2 - 1) & a2) != 0 )
      {
        if ( v12 >= a2 )
          v12 %= a2;
        if ( v12 != v8 )
          goto LABEL_24;
LABEL_17:
        v7 = (__int64 **)v11;
        v11 = (__int64 *)*v11;
        if ( !v11 )
          return;
      }
      else
      {
        v12 &= v9;
        if ( v12 == v8 )
          goto LABEL_17;
LABEL_24:
        v13 = v11;
        if ( *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) )
        {
          do
          {
            v14 = v13;
            v13 = (__int64 *)*v13;
          }
          while ( v13 && *((_DWORD *)v11 + 4) == *((_DWORD *)v13 + 4) );
          *v7 = v13;
          v15 = 8 * v12;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + v15);
          **(_QWORD **)(*(_QWORD *)a1 + v15) = v11;
          v11 = *v7;
          if ( !*v7 )
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
          v7 = (__int64 **)v11;
          v8 = v12;
          v11 = (__int64 *)*v11;
          if ( !v11 )
            return;
        }
      }
    }
  }
  v10 = *(void **)a1;
  *(_QWORD *)a1 = 0LL;
  if ( v10 )
    operator delete(v10);
  *(_QWORD *)(a1 + 8) = 0LL;
}

//----- (000000000001930C) ----------------------------------------------------
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::pair<rgbd::RgbdLocation,std::string>>(
        __int64 a1,
        int *a2,
        __int64 a3)
{
  unsigned __int64 v3; // x24
  unsigned __int64 v4; // x22
  unsigned __int64 v5; // x23
  unsigned __int64 v8; // x8
  __int64 *v9; // x20
  unsigned __int64 v10; // x10
  __int128 v11; // q0
  float v12; // s0
  float v13; // s1
  _BOOL8 v14; // x9
  unsigned __int64 v15; // x8
  unsigned __int64 v16; // x9
  std::__ndk1 *v17; // x1
  __int64 v18; // x9
  __int64 *v19; // x8
  unsigned __int64 v20; // x8

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *a2;
  if ( v4 )
  {
    v8 = v4 - 1;
    if ( ((v4 - 1) & v4) != 0 )
    {
      v3 = *a2;
      if ( v4 <= v5 )
        v3 = v5 % v4;
    }
    else
    {
      v3 = v8 & v5;
    }
    v9 = *(__int64 **)(*(_QWORD *)a1 + 8 * v3);
    if ( v9 )
    {
      while ( 1 )
      {
        v9 = (__int64 *)*v9;
        if ( !v9 )
          break;
        v10 = v9[1];
        if ( v10 != v5 )
        {
          if ( ((v4 - 1) & v4) == 0 )
          {
            v10 &= v8;
LABEL_15:
            if ( v10 != v3 )
              break;
            goto LABEL_16;
          }
          if ( v10 < v4 )
            goto LABEL_15;
          if ( v10 % v4 != v3 )
            break;
        }
LABEL_16:
        if ( *((_DWORD *)v9 + 4) == (_DWORD)v5 )
          return v9;
      }
    }
  }
  v9 = (__int64 *)operator new(0x30uLL);
  *((_DWORD *)v9 + 4) = *(_DWORD *)a3;
  v11 = *(_OWORD *)(a3 + 8);
  v9[5] = *(_QWORD *)(a3 + 24);
  *(_OWORD *)(v9 + 3) = v11;
  *(_QWORD *)(a3 + 16) = 0LL;
  *(_QWORD *)(a3 + 24) = 0LL;
  *(_QWORD *)(a3 + 8) = 0LL;
  *v9 = 0LL;
  v9[1] = v5;
  v12 = *(float *)(a1 + 32);
  v13 = (float)(unsigned __int64)(*(_QWORD *)(a1 + 24) + 1LL);
  if ( !v4 || (float)(v12 * (float)v4) < v13 )
  {
    v14 = v4 < 3 || ((v4 - 1) & v4) != 0;
    v15 = v14 | (2 * v4);
    v16 = vcvtps_u32_f32(v13 / v12);
    if ( v15 >= v16 )
      v17 = (std::__ndk1 *)v15;
    else
      v17 = (std::__ndk1 *)v16;
    std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::rehash(
      a1,
      v17);
    v4 = *(_QWORD *)(a1 + 8);
    if ( ((v4 - 1) & v4) != 0 )
    {
      if ( v4 <= v5 )
        v3 = v5 % v4;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v4 - 1) & v5;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(__int64 **)(*(_QWORD *)a1 + 8 * v3);
  if ( v19 )
  {
    *v9 = *v19;
LABEL_39:
    *v19 = (__int64)v9;
    goto LABEL_40;
  }
  *v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if ( *v9 )
  {
    v20 = *(_QWORD *)(*v9 + 8);
    if ( ((v4 - 1) & v4) != 0 )
    {
      if ( v20 >= v4 )
        v20 %= v4;
    }
    else
    {
      v20 &= v4 - 1;
    }
    v19 = (__int64 *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v9;
}
// 19488: variable 'v3' is possibly undefined

//----- (0000000000019538) ----------------------------------------------------
__int64 *__fastcall std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::__emplace_unique_key_args<std::string,std::pair<std::string,rgbd::RGBDParam>>(
        __int64 a1,
        unsigned __int8 *a2,
        __int128 *a3)
{
  unsigned __int64 v3; // x27
  unsigned __int64 v7; // x8
  unsigned __int64 v8; // x10
  __int64 *v9; // x1
  unsigned __int64 v10; // x2
  unsigned __int64 v11; // x0
  unsigned __int64 v12; // x26
  unsigned __int64 v13; // x21
  unsigned __int64 v14; // x28
  __int64 **v15; // x8
  __int64 *v16; // x20
  unsigned __int64 v17; // x8
  unsigned __int8 *v18; // x11
  unsigned __int8 *v19; // x9
  size_t v20; // x23
  unsigned __int8 *v21; // x24
  unsigned __int64 v22; // x8
  unsigned __int64 v23; // x10
  unsigned __int64 v24; // x11
  const void *v25; // x0
  __int64 v26; // x9
  __int64 *v27; // x0
  __int128 v28; // q0
  float v29; // s0
  float v30; // s1
  _BOOL8 v31; // x9
  unsigned __int64 v32; // x8
  unsigned __int64 v33; // x9
  std::__ndk1 *v34; // x1
  __int64 v35; // x9
  __int64 *v36; // x8
  unsigned __int64 v37; // x8
  char v39[8]; // [xsp+10h] [xbp-60h] BYREF
  __int64 v40; // [xsp+18h] [xbp-58h]

  v40 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  if ( (v7 & 1) != 0 )
    v9 = (__int64 *)*((_QWORD *)a2 + 2);
  else
    v9 = (__int64 *)(a2 + 1);
  if ( (v7 & 1) != 0 )
    v10 = v8;
  else
    v10 = v7 >> 1;
  v11 = std::__murmur2_or_cityhash<unsigned long,64ul>::operator()((__int64)v39, v9, v10);
  v12 = *(_QWORD *)(a1 + 8);
  v13 = v11;
  if ( v12 )
  {
    v14 = v12 - 1;
    if ( ((v12 - 1) & v12) != 0 )
    {
      v3 = v11;
      if ( v11 >= v12 )
        v3 = v11 % v12;
    }
    else
    {
      v3 = v14 & v11;
    }
    v15 = *(__int64 ***)(*(_QWORD *)a1 + 8 * v3);
    if ( v15 )
    {
      v16 = *v15;
      if ( *v15 )
      {
        v17 = *a2;
        v18 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        v19 = a2 + 1;
        if ( (v17 & 1) != 0 )
          v20 = *((_QWORD *)a2 + 1);
        else
          v20 = v17 >> 1;
        if ( (v17 & 1) != 0 )
          v21 = v18;
        else
          v21 = v19;
        do
        {
          v22 = v16[1];
          if ( v22 == v13 )
            goto LABEL_28;
          if ( ((v12 - 1) & v12) != 0 )
          {
            if ( v22 >= v12 )
            {
              if ( v22 % v12 != v3 )
                break;
              goto LABEL_28;
            }
          }
          else
          {
            v22 &= v14;
          }
          if ( v22 != v3 )
            break;
LABEL_28:
          v23 = *((unsigned __int8 *)v16 + 16);
          v24 = v16[3];
          if ( (v23 & 1) == 0 )
            v24 = v23 >> 1;
          if ( v24 == v20 )
          {
            if ( (v23 & 1) != 0 )
              v25 = (const void *)v16[4];
            else
              v25 = (char *)v16 + 17;
            if ( (v23 & 1) != 0 )
            {
              if ( !v20 || !memcmp(v25, v21, v20) )
                return v16;
            }
            else
            {
              if ( !v20 )
                return v16;
              v26 = 0LL;
              while ( *((unsigned __int8 *)v16 + v26 + 17) == v21[v26] )
              {
                if ( v23 >> 1 == ++v26 )
                  return v16;
              }
            }
          }
          v16 = (__int64 *)*v16;
        }
        while ( v16 );
      }
    }
  }
  v27 = (__int64 *)operator new(0x100uLL);
  v28 = *a3;
  v16 = v27;
  v27[4] = *((_QWORD *)a3 + 2);
  *((_OWORD *)v27 + 1) = v28;
  *((_QWORD *)a3 + 1) = 0LL;
  *((_QWORD *)a3 + 2) = 0LL;
  *(_QWORD *)a3 = 0LL;
  rgbd::RGBDParam::RGBDParam((rgbd::RGBDParam *)(v27 + 6), (const rgbd::RGBDParam *)(a3 + 2));
  *v16 = 0LL;
  v16[1] = v13;
  v29 = *(float *)(a1 + 32);
  v30 = (float)(unsigned __int64)(*(_QWORD *)(a1 + 24) + 1LL);
  if ( !v12 || (float)(v29 * (float)v12) < v30 )
  {
    v31 = v12 < 3 || ((v12 - 1) & v12) != 0;
    v32 = v31 | (2 * v12);
    v33 = vcvtps_u32_f32(v30 / v29);
    if ( v32 >= v33 )
      v34 = (std::__ndk1 *)v32;
    else
      v34 = (std::__ndk1 *)v33;
    std::__hash_table<std::__hash_value_type<std::string,rgbd::RGBDParam>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::hash<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,rgbd::RGBDParam>,std::equal_to<std::string>,true>,std::allocator<std::__hash_value_type<std::string,rgbd::RGBDParam>>>::rehash(
      a1,
      v34);
    v12 = *(_QWORD *)(a1 + 8);
    if ( ((v12 - 1) & v12) != 0 )
    {
      if ( v13 >= v12 )
        v3 = v13 % v12;
      else
        v3 = v13;
    }
    else
    {
      v3 = (v12 - 1) & v13;
    }
  }
  v35 = *(_QWORD *)a1;
  v36 = *(__int64 **)(*(_QWORD *)a1 + 8 * v3);
  if ( v36 )
  {
    *v16 = *v36;
LABEL_65:
    *v36 = (__int64)v16;
    goto LABEL_66;
  }
  *v16 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v16;
  *(_QWORD *)(v35 + 8 * v3) = a1 + 16;
  if ( *v16 )
  {
    v37 = *(_QWORD *)(*v16 + 8);
    if ( ((v12 - 1) & v12) != 0 )
    {
      if ( v37 >= v12 )
        v37 %= v12;
    }
    else
    {
      v37 &= v12 - 1;
    }
    v36 = (__int64 *)(*(_QWORD *)a1 + 8 * v37);
    goto LABEL_65;
  }
LABEL_66:
  ++*(_QWORD *)(a1 + 24);
  return v16;
}
// 1978C: variable 'v3' is possibly undefined
// 19538: using guessed type char var_60[8];

//----- (0000000000019878) ----------------------------------------------------
__int64 __fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__erase_unique<rgbd::RgbdLocation>(
        __int64 *a1,
        int *a2)
{
  unsigned __int64 v2; // x8
  unsigned __int64 v3; // x9
  unsigned __int64 v4; // x10
  unsigned __int64 v5; // x12
  __int64 *v6; // x13
  __int64 v7; // x1
  unsigned __int64 v8; // x13
  void **v10; // x19
  void *v11; // [xsp+0h] [xbp-30h] BYREF
  char v12; // [xsp+10h] [xbp-20h]
  __int64 v13; // [xsp+18h] [xbp-18h]

  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = a1[1];
  if ( !v2 )
    return 0LL;
  v3 = *a2;
  v4 = v2 - 1;
  if ( ((v2 - 1) & v2) != 0 )
  {
    v5 = *a2;
    if ( v2 <= v3 )
      v5 = v3 % v2;
  }
  else
  {
    v5 = v4 & v3;
  }
  v6 = *(__int64 **)(*a1 + 8 * v5);
  if ( !v6 )
    return 0LL;
  v7 = *v6;
  if ( !*v6 )
    return 0LL;
  while ( 1 )
  {
    v8 = *(_QWORD *)(v7 + 8);
    if ( v8 == v3 )
      break;
    if ( ((v2 - 1) & v2) != 0 )
    {
      if ( v8 >= v2 )
      {
        if ( v8 % v2 != v5 )
          return 0LL;
        goto LABEL_14;
      }
    }
    else
    {
      v8 &= v4;
    }
    if ( v8 != v5 )
      return 0LL;
LABEL_14:
    v7 = *(_QWORD *)v7;
    if ( !v7 )
      return 0LL;
  }
  if ( *(_DWORD *)(v7 + 16) != (_DWORD)v3 )
    goto LABEL_14;
  std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::remove(
    a1,
    (__int64 *)v7,
    (__int64)&v11);
  v10 = (void **)v11;
  v11 = 0LL;
  if ( v10 )
  {
    if ( v12 )
    {
      if ( ((_BYTE)v10[3] & 1) != 0 )
        operator delete(v10[5]);
    }
    operator delete(v10);
  }
  return 1LL;
}

//----- (0000000000019990) ----------------------------------------------------
__int64 *__usercall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::remove@<X0>(
        __int64 *result@<X0>,
        __int64 *a2@<X1>,
        __int64 a3@<X8>)
{
  unsigned __int64 v3; // x11
  __int64 v4; // x15
  unsigned __int64 v5; // x9
  unsigned __int64 v6; // x13
  __int64 v7; // x12
  unsigned __int64 v8; // x14
  __int64 *v9; // x9
  __int64 *v10; // x10
  unsigned __int64 v11; // x16
  unsigned __int64 v12; // x16
  unsigned __int64 v13; // x15

  v4 = *result;
  v3 = result[1];
  v5 = a2[1];
  v6 = v3 - 1;
  v7 = (v3 - 1) & v5;
  if ( v5 >= v3 )
    v5 %= v3;
  v8 = v6 & v3;
  if ( (v6 & v3) != 0 )
    v7 = v5;
  v9 = *(__int64 **)(v4 + 8 * v7);
  do
  {
    v10 = v9;
    v9 = (__int64 *)*v9;
  }
  while ( v9 != a2 );
  if ( v10 == result + 2 )
    goto LABEL_12;
  v11 = v10[1];
  if ( !v8 )
  {
    if ( (v11 & v6) == v7 )
      goto LABEL_22;
LABEL_12:
    if ( *a2 )
    {
      v12 = *(_QWORD *)(*a2 + 8);
      if ( v8 )
      {
        if ( v12 >= v3 )
          v12 %= v3;
        if ( v12 == v7 )
          goto LABEL_22;
      }
      else if ( (v12 & v6) == v7 )
      {
        goto LABEL_22;
      }
    }
    *(_QWORD *)(v4 + 8 * v7) = 0LL;
    goto LABEL_22;
  }
  if ( v11 >= v3 )
    v11 %= v3;
  if ( v11 != v7 )
    goto LABEL_12;
LABEL_22:
  if ( *a2 )
  {
    v13 = *(_QWORD *)(*a2 + 8);
    if ( !v8 )
    {
      v13 &= v6;
      if ( v13 == v7 )
        goto LABEL_28;
      goto LABEL_27;
    }
    if ( v13 >= v3 )
      v13 %= v3;
    if ( v13 != v7 )
LABEL_27:
      *(_QWORD *)(*result + 8 * v13) = v10;
  }
LABEL_28:
  *v10 = *a2;
  *a2 = 0LL;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

//----- (0000000000019AAC) ----------------------------------------------------
__int64 *__fastcall std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::__emplace_unique_key_args<rgbd::RgbdLocation,std::piecewise_construct_t const&,std::tuple<rgbd::RgbdLocation&&>,std::tuple<>>(
        __int64 a1,
        int *a2,
        __int64 a3,
        int **a4)
{
  unsigned __int64 v4; // x24
  unsigned __int64 v5; // x22
  unsigned __int64 v6; // x23
  unsigned __int64 v9; // x8
  __int64 *v10; // x20
  unsigned __int64 v11; // x10
  int v12; // w8
  float v13; // s0
  float v14; // s1
  _BOOL8 v15; // x9
  unsigned __int64 v16; // x8
  unsigned __int64 v17; // x9
  std::__ndk1 *v18; // x1
  __int64 v19; // x9
  __int64 *v20; // x8
  unsigned __int64 v21; // x8

  v5 = *(_QWORD *)(a1 + 8);
  v6 = *a2;
  if ( v5 )
  {
    v9 = v5 - 1;
    if ( ((v5 - 1) & v5) != 0 )
    {
      v4 = *a2;
      if ( v5 <= v6 )
        v4 = v6 % v5;
    }
    else
    {
      v4 = v9 & v6;
    }
    v10 = *(__int64 **)(*(_QWORD *)a1 + 8 * v4);
    if ( v10 )
    {
      while ( 1 )
      {
        v10 = (__int64 *)*v10;
        if ( !v10 )
          break;
        v11 = v10[1];
        if ( v11 != v6 )
        {
          if ( ((v5 - 1) & v5) == 0 )
          {
            v11 &= v9;
LABEL_15:
            if ( v11 != v4 )
              break;
            goto LABEL_16;
          }
          if ( v11 < v5 )
            goto LABEL_15;
          if ( v11 % v5 != v4 )
            break;
        }
LABEL_16:
        if ( *((_DWORD *)v10 + 4) == (_DWORD)v6 )
          return v10;
      }
    }
  }
  v10 = (__int64 *)operator new(0x30uLL);
  v12 = **a4;
  v10[4] = 0LL;
  v10[5] = 0LL;
  *((_DWORD *)v10 + 4) = v12;
  v10[3] = 0LL;
  *v10 = 0LL;
  v10[1] = v6;
  v13 = *(float *)(a1 + 32);
  v14 = (float)(unsigned __int64)(*(_QWORD *)(a1 + 24) + 1LL);
  if ( !v5 || (float)(v13 * (float)v5) < v14 )
  {
    v15 = v5 < 3 || ((v5 - 1) & v5) != 0;
    v16 = v15 | (2 * v5);
    v17 = vcvtps_u32_f32(v14 / v13);
    if ( v16 >= v17 )
      v18 = (std::__ndk1 *)v16;
    else
      v18 = (std::__ndk1 *)v17;
    std::__hash_table<std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::__unordered_map_hasher<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::hash<rgbd::RgbdLocation>,true>,std::__unordered_map_equal<rgbd::RgbdLocation,std::__hash_value_type<rgbd::RgbdLocation,std::string>,std::equal_to<rgbd::RgbdLocation>,true>,std::allocator<std::__hash_value_type<rgbd::RgbdLocation,std::string>>>::rehash(
      a1,
      v18);
    v5 = *(_QWORD *)(a1 + 8);
    if ( ((v5 - 1) & v5) != 0 )
    {
      if ( v5 <= v6 )
        v4 = v6 % v5;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v5 - 1) & v6;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(__int64 **)(*(_QWORD *)a1 + 8 * v4);
  if ( v20 )
  {
    *v10 = *v20;
LABEL_39:
    *v20 = (__int64)v10;
    goto LABEL_40;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if ( *v10 )
  {
    v21 = *(_QWORD *)(*v10 + 8);
    if ( ((v5 - 1) & v5) != 0 )
    {
      if ( v21 >= v5 )
        v21 %= v5;
    }
    else
    {
      v21 &= v5 - 1;
    }
    v20 = (__int64 *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}
// 19C1C: variable 'v4' is possibly undefined

//----- (0000000000019CCC) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1, float a2)
{
  _QWORD *v3; // x8
  char *v4; // x9
  _QWORD *v5; // x0
  __int64 v7; // x20
  char *v8; // x21
  __int64 v9; // x22
  __int64 v10; // x0
  unsigned __int8 v11; // w23
  char v13[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v14; // [xsp+8h] [xbp-58h]
  _QWORD v15[2]; // [xsp+10h] [xbp-50h] BYREF

  v15[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v13[0] = 0;
  v14 = a1;
  v3 = (_QWORD *)(*a1 - 24LL);
  v4 = (char *)a1 + *v3;
  if ( !*((_DWORD *)v4 + 8) )
  {
    v5 = (_QWORD *)*((_QWORD *)v4 + 17);
    if ( v5 )
    {
      std::ostream::flush(v5);
      v3 = (_QWORD *)(*a1 - 24LL);
    }
    v13[0] = 1;
    std::ios_base::getloc(v15, (std::ios_base *)((char *)a1 + *v3));
    v7 = std::locale::use_facet(v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v9 = *((_QWORD *)v8 + 5);
    if ( *((_DWORD *)v8 + 36) == -1 )
    {
      std::ios_base::getloc(v15, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v10 = std::locale::use_facet(v15, &std::ctype<char>::id);
      v11 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v10 + 56LL))(v10, 32LL);
      std::locale::~locale((std::locale *)v15);
      *((_DWORD *)v8 + 36) = v11;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *, double))(*(_QWORD *)v7 + 64LL))(v7, v9, v8, a2) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v13);
  return a1;
}
// D680: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 19CCC: using guessed type char var_60[8];

//----- (0000000000019E98) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 24LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// D680: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 19E98: using guessed type char var_60[8];

//----- (000000000001A064) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 48LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// D680: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 1A064: using guessed type char var_60[8];

//----- (000000000001A230) ----------------------------------------------------
__int64 __fastcall std::shared_ptr<rgbd::RGBDAngStrong>::~shared_ptr(__int64 result)
{
  std::__shared_weak_count *v1; // x19
  unsigned __int64 *v2; // x8
  unsigned __int64 v3; // x9

  v1 = *(std::__shared_weak_count **)(result + 8);
  if ( v1 )
  {
    v2 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v3 = __ldaxr(v2);
    while ( __stlxr(v3 - 1, v2) );
    if ( !v3 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      return std::__shared_weak_count::__release_weak(v1);
    }
  }
  return result;
}

//----- (000000000001A288) ----------------------------------------------------
jint JNI_OnLoad(JavaVM *vm, void *reserved)
{
  jint v3; // w19
  __int64 v5; // x20
  __int64 v6; // x0
  __int64 v7; // x21
  __int64 *v8; // x25
  __int64 *v9; // x24
  int v10; // w8
  __int64 v11; // x22
  __int64 v12; // x0
  __int64 *v13; // x1
  __int64 *v14; // x25
  __int64 *v15; // x24
  int v16; // w8
  __int64 v17; // x22
  __int64 v18; // x0
  __int64 *v19; // x1
  __int64 *v20; // x25
  __int64 *v21; // x24
  int v22; // w8
  __int64 v23; // x22
  __int64 v24; // x0
  __int64 *v25; // x1
  __int64 *v26; // x25
  __int64 *v27; // x24
  int v28; // w8
  __int64 v29; // x22
  __int64 v30; // x0
  __int64 *v31; // x1
  __int64 v32; // x0
  __int64 *v33; // x26
  __int64 v34; // x22
  __int64 *v35; // x25
  int v36; // w8
  __int64 v37; // x23
  __int64 v38; // x0
  __int64 *v39; // x1
  __int64 v40; // x0
  __int64 *v41; // x26
  __int64 v42; // x22
  __int64 *v43; // x25
  int v44; // w8
  __int64 v45; // x23
  __int64 v46; // x0
  __int64 *v47; // x1
  __int64 v48; // x0
  __int64 *v49; // x26
  __int64 v50; // x22
  __int64 *v51; // x25
  int v52; // w8
  __int64 v53; // x23
  __int64 v54; // x0
  __int64 *v55; // x1
  __int64 v56; // x0
  __int64 *v57; // x26
  __int64 v58; // x22
  __int64 *v59; // x25
  int v60; // w8
  __int64 v61; // x23
  __int64 v62; // x0
  __int64 *v63; // x1
  __int64 v64; // x21
  __int64 v65; // x22
  __int64 v66; // x23
  __int64 *v67; // x0
  __int64 v68; // x24
  __int64 *v69; // x25
  __int64 v70; // x0
  void *v71; // x8
  __int128 v72; // q0
  __int64 v73; // x8
  __int64 *v74; // x1
  _QWORD **v75; // x25
  __int64 *v76; // x0
  __int64 v77; // x26
  __int64 *v78; // x27
  __int64 v79; // x0
  __int128 v80; // q0
  void *v81; // x8
  __int64 v82; // x9
  _QWORD *v83; // x8
  __int64 *v84; // x1
  __int64 v85; // x0
  __int64 v86; // x0
  __int64 v87; // x0
  __int64 v88; // x0
  __int64 *v89; // x23
  __int64 v90; // x25
  __int64 *v91; // x27
  __int64 *i; // x21
  int v93; // w8
  __int64 v94; // x20
  __int64 v95; // x0
  __int64 *v96; // x1
  __int64 v97; // x24
  __int64 *v98; // x26
  __int64 *v99; // x21
  void **v100; // x27
  int v101; // w8
  __int64 v102; // x20
  __int64 v103; // x0
  __int64 *v104; // x1
  void *v105; // x21
  __int64 *v106; // x25
  __int64 *j; // x26
  int v108; // w8
  __int64 v109; // x20
  __int64 v110; // x0
  __int64 *v111; // x1
  __int64 v112; // x22
  __int64 *v113; // x24
  int v114; // w8
  __int64 v115; // x20
  __int64 v116; // x0
  __int64 *v117; // x1
  _QWORD *v118; // x0
  __int64 v119; // x20
  __int64 v120; // x22
  long double v121; // q0
  std::__shared_weak_count *v122; // x21
  unsigned __int64 *v123; // x8
  unsigned __int64 v124; // x9
  __int64 v125; // [xsp+8h] [xbp-98h] BYREF
  __int128 v126; // [xsp+10h] [xbp-90h] BYREF
  void *v127; // [xsp+20h] [xbp-80h]
  __int128 v128; // [xsp+28h] [xbp-78h] BYREF
  void *v129; // [xsp+38h] [xbp-68h]
  __int64 v130[2]; // [xsp+40h] [xbp-60h] BYREF

  v130[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = 65542;
  if ( (*vm)->GetEnv(vm, (void **)&v125, 65542LL) )
    return -1;
  v5 = v125;
  qword_33538 = (__int64)vm;
  v6 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)v125 + 48LL))(
         v125,
         "com/pudutech/rgbdlib/RGBDSensor");
  if ( !v6 )
    return v3;
  v7 = v6;
  if ( ((*(__int64 (__fastcall **)(__int64, __int64, char **, __int64))(*(_QWORD *)v5 + 1720LL))(v5, v6, off_33060, 8LL) & 0x80000000) != 0 )
  {
    __android_log_print(5, "PDLOG", "registerNativeLog error");
    return v3;
  }
  v8 = (__int64 *)qword_334E8;
  if ( qword_334E8 )
  {
    v9 = &qword_334E8;
    while ( 1 )
    {
      while ( 1 )
      {
        v10 = *((_DWORD *)v8 + 8);
        if ( v10 >= 1 )
          break;
        if ( (v10 & 0x80000000) == 0 )
          goto LABEL_17;
        v9 = v8 + 1;
        if ( !v8[1] )
          goto LABEL_17;
        v8 = (__int64 *)v8[1];
      }
      if ( !*v8 )
        break;
      v9 = v8;
      v8 = (__int64 *)*v8;
    }
    v9 = v8;
    v11 = *v8;
    if ( !*v8 )
      goto LABEL_20;
  }
  else
  {
    v8 = &qword_334E8;
    v9 = &qword_334E8;
LABEL_17:
    v11 = *v9;
    if ( !*v9 )
    {
LABEL_20:
      v12 = operator new(0x40uLL);
      *(_DWORD *)(v12 + 32) = 0;
      *(_QWORD *)(v12 + 48) = 0LL;
      *(_QWORD *)(v12 + 56) = 0LL;
      *(_QWORD *)(v12 + 40) = 0LL;
      *(_QWORD *)v12 = 0LL;
      *(_QWORD *)(v12 + 8) = 0LL;
      *(_QWORD *)(v12 + 16) = v8;
      *v9 = v12;
      v11 = v12;
      if ( *(_QWORD *)qword_334E0 )
      {
        qword_334E0 = *(_QWORD *)qword_334E0;
        v13 = (__int64 *)*v9;
      }
      else
      {
        v13 = (__int64 *)v12;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_334E8, v13);
      ++qword_334F0;
    }
  }
  std::string::assign((__int64 *)(v11 + 40), "LeftCallbackMed", 0xFuLL);
  v14 = (__int64 *)qword_334E8;
  if ( qword_334E8 )
  {
    v15 = &qword_334E8;
    while ( 1 )
    {
      while ( 1 )
      {
        v16 = *((_DWORD *)v14 + 8);
        if ( v16 >= 2 )
          break;
        if ( v16 == 1 )
          goto LABEL_34;
        v15 = v14 + 1;
        if ( !v14[1] )
          goto LABEL_34;
        v14 = (__int64 *)v14[1];
      }
      if ( !*v14 )
        break;
      v15 = v14;
      v14 = (__int64 *)*v14;
    }
    v15 = v14;
    v17 = *v14;
    if ( !*v14 )
      goto LABEL_35;
  }
  else
  {
    v14 = &qword_334E8;
    v15 = &qword_334E8;
LABEL_34:
    v17 = *v15;
    if ( !*v15 )
    {
LABEL_35:
      v18 = operator new(0x40uLL);
      *(_QWORD *)(v18 + 48) = 0LL;
      *(_QWORD *)(v18 + 56) = 0LL;
      *(_QWORD *)(v18 + 40) = 0LL;
      *(_QWORD *)v18 = 0LL;
      *(_QWORD *)(v18 + 8) = 0LL;
      *(_QWORD *)(v18 + 16) = v14;
      *(_DWORD *)(v18 + 32) = 1;
      *v15 = v18;
      v17 = v18;
      if ( *(_QWORD *)qword_334E0 )
      {
        qword_334E0 = *(_QWORD *)qword_334E0;
        v19 = (__int64 *)*v15;
      }
      else
      {
        v19 = (__int64 *)v18;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_334E8, v19);
      ++qword_334F0;
    }
  }
  std::string::assign((__int64 *)(v17 + 40), "RightCallbackMed", 0x10uLL);
  v20 = (__int64 *)qword_334E8;
  if ( qword_334E8 )
  {
    v21 = &qword_334E8;
    while ( 1 )
    {
      while ( 1 )
      {
        v22 = *((_DWORD *)v20 + 8);
        if ( v22 >= 3 )
          break;
        if ( v22 == 2 )
          goto LABEL_51;
        v21 = v20 + 1;
        if ( !v20[1] )
          goto LABEL_51;
        v20 = (__int64 *)v20[1];
      }
      if ( !*v20 )
        break;
      v21 = v20;
      v20 = (__int64 *)*v20;
    }
    v21 = v20;
    v23 = *v20;
    if ( !*v20 )
      goto LABEL_52;
  }
  else
  {
    v20 = &qword_334E8;
    v21 = &qword_334E8;
LABEL_51:
    v23 = *v21;
    if ( !*v21 )
    {
LABEL_52:
      v24 = operator new(0x40uLL);
      *(_QWORD *)(v24 + 48) = 0LL;
      *(_QWORD *)(v24 + 56) = 0LL;
      *(_QWORD *)(v24 + 40) = 0LL;
      *(_QWORD *)v24 = 0LL;
      *(_QWORD *)(v24 + 8) = 0LL;
      *(_QWORD *)(v24 + 16) = v20;
      *(_DWORD *)(v24 + 32) = 2;
      *v21 = v24;
      v23 = v24;
      if ( *(_QWORD *)qword_334E0 )
      {
        qword_334E0 = *(_QWORD *)qword_334E0;
        v25 = (__int64 *)*v21;
      }
      else
      {
        v25 = (__int64 *)v24;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_334E8, v25);
      ++qword_334F0;
    }
  }
  std::string::assign((__int64 *)(v23 + 40), "CenterCallbackMed", 0x11uLL);
  v26 = (__int64 *)qword_334E8;
  if ( qword_334E8 )
  {
    v27 = &qword_334E8;
    while ( 1 )
    {
      while ( 1 )
      {
        v28 = *((_DWORD *)v26 + 8);
        if ( v28 >= 4 )
          break;
        if ( v28 == 3 )
          goto LABEL_68;
        v27 = v26 + 1;
        if ( !v26[1] )
          goto LABEL_68;
        v26 = (__int64 *)v26[1];
      }
      if ( !*v26 )
        break;
      v27 = v26;
      v26 = (__int64 *)*v26;
    }
    v27 = v26;
    v29 = *v26;
    if ( !*v26 )
      goto LABEL_69;
  }
  else
  {
    v26 = &qword_334E8;
    v27 = &qword_334E8;
LABEL_68:
    v29 = *v27;
    if ( !*v27 )
    {
LABEL_69:
      v30 = operator new(0x40uLL);
      *(_QWORD *)(v30 + 48) = 0LL;
      *(_QWORD *)(v30 + 56) = 0LL;
      *(_QWORD *)(v30 + 40) = 0LL;
      *(_QWORD *)v30 = 0LL;
      *(_QWORD *)(v30 + 8) = 0LL;
      *(_QWORD *)(v30 + 16) = v26;
      *(_DWORD *)(v30 + 32) = 3;
      *v27 = v30;
      v29 = v30;
      if ( *(_QWORD *)qword_334E0 )
      {
        qword_334E0 = *(_QWORD *)qword_334E0;
        v31 = (__int64 *)*v27;
      }
      else
      {
        v31 = (__int64 *)v30;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_334E8, v31);
      ++qword_334F0;
    }
  }
  std::string::assign((__int64 *)(v29 + 40), "DownCallbackMed", 0xFuLL);
  v32 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)v5 + 264LL))(
          v5,
          v7,
          "destributeLeftRGBD",
          "(Ljava/io/FileDescriptor;III)V");
  v33 = (__int64 *)qword_33518;
  v34 = v32;
  if ( qword_33518 )
  {
    v35 = &qword_33518;
    while ( 1 )
    {
      while ( 1 )
      {
        v36 = *((_DWORD *)v33 + 8);
        if ( v36 >= 1 )
          break;
        if ( (v36 & 0x80000000) == 0 )
          goto LABEL_85;
        v35 = v33 + 1;
        if ( !v33[1] )
          goto LABEL_85;
        v33 = (__int64 *)v33[1];
      }
      if ( !*v33 )
        break;
      v35 = v33;
      v33 = (__int64 *)*v33;
    }
    v35 = v33;
    v37 = *v33;
    if ( !*v33 )
      goto LABEL_88;
  }
  else
  {
    v33 = &qword_33518;
    v35 = &qword_33518;
LABEL_85:
    v37 = *v35;
    if ( !*v35 )
    {
LABEL_88:
      v38 = operator new(0x30uLL);
      *(_DWORD *)(v38 + 32) = 0;
      *(_QWORD *)(v38 + 40) = 0LL;
      *(_QWORD *)v38 = 0LL;
      *(_QWORD *)(v38 + 8) = 0LL;
      *(_QWORD *)(v38 + 16) = v33;
      *v35 = v38;
      v37 = v38;
      if ( *(_QWORD *)qword_33510 )
      {
        qword_33510 = *(_QWORD *)qword_33510;
        v39 = (__int64 *)*v35;
      }
      else
      {
        v39 = (__int64 *)v38;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33518, v39);
      ++qword_33520;
    }
  }
  *(_QWORD *)(v37 + 40) = v34;
  v40 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)v5 + 264LL))(
          v5,
          v7,
          "destributeRightRGBD",
          "(Ljava/io/FileDescriptor;III)V");
  v41 = (__int64 *)qword_33518;
  v42 = v40;
  if ( qword_33518 )
  {
    v43 = &qword_33518;
    while ( 1 )
    {
      while ( 1 )
      {
        v44 = *((_DWORD *)v41 + 8);
        if ( v44 >= 2 )
          break;
        if ( v44 == 1 )
          goto LABEL_102;
        v43 = v41 + 1;
        if ( !v41[1] )
          goto LABEL_102;
        v41 = (__int64 *)v41[1];
      }
      if ( !*v41 )
        break;
      v43 = v41;
      v41 = (__int64 *)*v41;
    }
    v43 = v41;
    v45 = *v41;
    if ( !*v41 )
      goto LABEL_103;
  }
  else
  {
    v41 = &qword_33518;
    v43 = &qword_33518;
LABEL_102:
    v45 = *v43;
    if ( !*v43 )
    {
LABEL_103:
      v46 = operator new(0x30uLL);
      *(_QWORD *)(v46 + 40) = 0LL;
      *(_QWORD *)v46 = 0LL;
      *(_QWORD *)(v46 + 8) = 0LL;
      *(_QWORD *)(v46 + 16) = v41;
      *(_DWORD *)(v46 + 32) = 1;
      *v43 = v46;
      v45 = v46;
      if ( *(_QWORD *)qword_33510 )
      {
        qword_33510 = *(_QWORD *)qword_33510;
        v47 = (__int64 *)*v43;
      }
      else
      {
        v47 = (__int64 *)v46;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33518, v47);
      ++qword_33520;
    }
  }
  *(_QWORD *)(v45 + 40) = v42;
  v48 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)v5 + 264LL))(
          v5,
          v7,
          "destributeCenterRGBD",
          "(Ljava/io/FileDescriptor;III)V");
  v49 = (__int64 *)qword_33518;
  v50 = v48;
  if ( qword_33518 )
  {
    v51 = &qword_33518;
    while ( 1 )
    {
      while ( 1 )
      {
        v52 = *((_DWORD *)v49 + 8);
        if ( v52 >= 3 )
          break;
        if ( v52 == 2 )
          goto LABEL_119;
        v51 = v49 + 1;
        if ( !v49[1] )
          goto LABEL_119;
        v49 = (__int64 *)v49[1];
      }
      if ( !*v49 )
        break;
      v51 = v49;
      v49 = (__int64 *)*v49;
    }
    v51 = v49;
    v53 = *v49;
    if ( !*v49 )
      goto LABEL_120;
  }
  else
  {
    v49 = &qword_33518;
    v51 = &qword_33518;
LABEL_119:
    v53 = *v51;
    if ( !*v51 )
    {
LABEL_120:
      v54 = operator new(0x30uLL);
      *(_QWORD *)(v54 + 40) = 0LL;
      *(_QWORD *)v54 = 0LL;
      *(_QWORD *)(v54 + 8) = 0LL;
      *(_QWORD *)(v54 + 16) = v49;
      *(_DWORD *)(v54 + 32) = 2;
      *v51 = v54;
      v53 = v54;
      if ( *(_QWORD *)qword_33510 )
      {
        qword_33510 = *(_QWORD *)qword_33510;
        v55 = (__int64 *)*v51;
      }
      else
      {
        v55 = (__int64 *)v54;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33518, v55);
      ++qword_33520;
    }
  }
  *(_QWORD *)(v53 + 40) = v50;
  v56 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)v5 + 264LL))(
          v5,
          v7,
          "destributeDownRGBD",
          "(Ljava/io/FileDescriptor;III)V");
  v57 = (__int64 *)qword_33518;
  v58 = v56;
  if ( qword_33518 )
  {
    v59 = &qword_33518;
    while ( 1 )
    {
      while ( 1 )
      {
        v60 = *((_DWORD *)v57 + 8);
        if ( v60 >= 4 )
          break;
        if ( v60 == 3 )
          goto LABEL_136;
        v59 = v57 + 1;
        if ( !v57[1] )
          goto LABEL_136;
        v57 = (__int64 *)v57[1];
      }
      if ( !*v57 )
        break;
      v59 = v57;
      v57 = (__int64 *)*v57;
    }
    v59 = v57;
    v61 = *v57;
    if ( !*v57 )
      goto LABEL_137;
  }
  else
  {
    v57 = &qword_33518;
    v59 = &qword_33518;
LABEL_136:
    v61 = *v59;
    if ( !*v59 )
    {
LABEL_137:
      v62 = operator new(0x30uLL);
      *(_QWORD *)(v62 + 40) = 0LL;
      *(_QWORD *)v62 = 0LL;
      *(_QWORD *)(v62 + 8) = 0LL;
      *(_QWORD *)(v62 + 16) = v57;
      *(_DWORD *)(v62 + 32) = 3;
      *v59 = v62;
      v61 = v62;
      if ( *(_QWORD *)qword_33510 )
      {
        qword_33510 = *(_QWORD *)qword_33510;
        v63 = (__int64 *)*v59;
      }
      else
      {
        v63 = (__int64 *)v62;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33518, v63);
      ++qword_33520;
    }
  }
  *(_QWORD *)(v61 + 40) = v58;
  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 184LL))(v5, v7);
  v64 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)v5 + 48LL))(v5, "java/io/FileDescriptor");
  v65 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)v5 + 264LL))(
          v5,
          v64,
          "<init>",
          "()V");
  v66 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)v5 + 752LL))(
          v5,
          v64,
          "descriptor",
          "I");
  *((_QWORD *)&v128 + 1) = 0LL;
  v129 = 0LL;
  LOBYTE(v128) = 16;
  *(_QWORD *)((char *)&v128 + 1) = 0x63736544656C6946LL;
  v67 = std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::__find_equal<std::string>(
          (__int64)&qword_334C8,
          &v126,
          (unsigned __int8 *)&v128);
  v68 = *v67;
  v69 = v67;
  if ( !*v67 )
  {
    v70 = operator new(0x50uLL);
    v71 = v129;
    v72 = v128;
    *((_QWORD *)&v128 + 1) = 0LL;
    v129 = 0LL;
    *(_QWORD *)(v70 + 48) = v71;
    v73 = v126;
    *(_OWORD *)(v70 + 32) = v72;
    *(_QWORD *)(v70 + 64) = 0LL;
    *(_QWORD *)&v128 = 0LL;
    *(_QWORD *)(v70 + 72) = 0LL;
    *(_QWORD *)v70 = 0LL;
    *(_QWORD *)(v70 + 8) = 0LL;
    *(_QWORD *)(v70 + 16) = v73;
    *(_QWORD *)(v70 + 56) = v70 + 64;
    *v69 = v70;
    v68 = v70;
    if ( *(_QWORD *)qword_334C8 )
    {
      qword_334C8 = *(_QWORD *)qword_334C8;
      v74 = (__int64 *)*v69;
    }
    else
    {
      v74 = (__int64 *)v70;
    }
    std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_334D0, v74);
    ++qword_334D8;
  }
  v75 = (_QWORD **)(v68 + 56);
  v127 = 0LL;
  v126 = 0x66637365640AuLL;
  v76 = std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::__find_equal<std::string>(
          v68 + 56,
          v130,
          (unsigned __int8 *)&v126);
  v77 = *v76;
  v78 = v76;
  if ( !*v76 )
  {
    v79 = operator new(0x40uLL);
    v80 = v126;
    v81 = v127;
    v82 = v130[0];
    v127 = 0LL;
    v126 = 0uLL;
    *(_QWORD *)v79 = 0LL;
    *(_QWORD *)(v79 + 8) = 0LL;
    *(_OWORD *)(v79 + 32) = v80;
    *(_QWORD *)(v79 + 48) = v81;
    *(_QWORD *)(v79 + 56) = 0LL;
    *(_QWORD *)(v79 + 16) = v82;
    *v78 = v79;
    v77 = v79;
    v83 = (_QWORD *)**v75;
    if ( v83 )
    {
      *v75 = v83;
      v84 = (__int64 *)*v78;
    }
    else
    {
      v84 = (__int64 *)v79;
    }
    std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(*(__int64 **)(v68 + 64), v84);
    ++*(_QWORD *)(v68 + 72);
  }
  *(_QWORD *)(v77 + 56) = v66;
  if ( (v126 & 1) != 0 )
    operator delete(v127);
  if ( (v128 & 1) != 0 )
    operator delete(v129);
  v85 = _JNIEnv::NewObject(v5, v64, v65);
  qword_33548 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 168LL))(v5, v85);
  v86 = _JNIEnv::NewObject(v5, v64, v65);
  qword_33550 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 168LL))(v5, v86);
  v87 = _JNIEnv::NewObject(v5, v64, v65);
  qword_33558 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 168LL))(v5, v87);
  v88 = _JNIEnv::NewObject(v5, v64, v65);
  qword_33560 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 168LL))(v5, v88);
  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 184LL))(v5, v64);
  v89 = (__int64 *)qword_33500;
  v90 = qword_33548;
  if ( qword_33500 )
  {
    v91 = &qword_33500;
    for ( i = (__int64 *)qword_33500; ; i = (__int64 *)*i )
    {
      while ( 1 )
      {
        v93 = *((_DWORD *)i + 8);
        if ( v93 >= 1 )
          break;
        if ( (v93 & 0x80000000) == 0 )
          goto LABEL_167;
        v91 = i + 1;
        if ( !i[1] )
          goto LABEL_167;
        i = (__int64 *)i[1];
      }
      if ( !*i )
        break;
      v91 = i;
    }
    v91 = i;
    v94 = *i;
    if ( !*i )
      goto LABEL_170;
  }
  else
  {
    i = &qword_33500;
    v91 = &qword_33500;
LABEL_167:
    v94 = *v91;
    if ( !*v91 )
    {
LABEL_170:
      v95 = operator new(0x30uLL);
      *(_DWORD *)(v95 + 32) = 0;
      *(_QWORD *)(v95 + 40) = 0LL;
      *(_QWORD *)v95 = 0LL;
      *(_QWORD *)(v95 + 8) = 0LL;
      *(_QWORD *)(v95 + 16) = i;
      *v91 = v95;
      v94 = v95;
      if ( *(_QWORD *)qword_334F8 )
      {
        qword_334F8 = *(_QWORD *)qword_334F8;
        v96 = (__int64 *)*v91;
      }
      else
      {
        v96 = (__int64 *)v95;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33500, v96);
      v89 = (__int64 *)qword_33500;
      ++qword_33508;
    }
  }
  *(_QWORD *)(v94 + 40) = v90;
  v97 = qword_33550;
  if ( v89 )
  {
    v98 = &qword_33500;
    v99 = v89;
    v100 = &off_33000;
    while ( 1 )
    {
      while ( 1 )
      {
        v101 = *((_DWORD *)v99 + 8);
        if ( v101 >= 2 )
          break;
        if ( v101 == 1 )
          goto LABEL_184;
        v98 = v99 + 1;
        if ( !v99[1] )
          goto LABEL_184;
        v99 = (__int64 *)v99[1];
      }
      if ( !*v99 )
        break;
      v98 = v99;
      v99 = (__int64 *)*v99;
    }
    v98 = v99;
    v102 = *v99;
    if ( !*v99 )
      goto LABEL_185;
  }
  else
  {
    v99 = &qword_33500;
    v98 = &qword_33500;
    v100 = &off_33000;
LABEL_184:
    v102 = *v98;
    if ( !*v98 )
    {
LABEL_185:
      v103 = operator new(0x30uLL);
      *(_QWORD *)(v103 + 40) = 0LL;
      *(_QWORD *)v103 = 0LL;
      *(_QWORD *)(v103 + 8) = 0LL;
      *(_QWORD *)(v103 + 16) = v99;
      *(_DWORD *)(v103 + 32) = 1;
      *v98 = v103;
      v102 = v103;
      if ( *(_QWORD *)qword_334F8 )
      {
        qword_334F8 = *(_QWORD *)qword_334F8;
        v104 = (__int64 *)*v98;
      }
      else
      {
        v104 = (__int64 *)v103;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33500, v104);
      v89 = (__int64 *)qword_33500;
      ++qword_33508;
    }
  }
  *(_QWORD *)(v102 + 40) = v97;
  v105 = v100[171];
  if ( v89 )
  {
    v106 = &qword_33500;
    for ( j = v89; ; j = (__int64 *)*j )
    {
      while ( 1 )
      {
        v108 = *((_DWORD *)j + 8);
        if ( v108 >= 3 )
          break;
        if ( v108 == 2 )
          goto LABEL_201;
        v106 = j + 1;
        if ( !j[1] )
          goto LABEL_201;
        j = (__int64 *)j[1];
      }
      if ( !*j )
        break;
      v106 = j;
    }
    v106 = j;
    v109 = *j;
    if ( !*j )
      goto LABEL_202;
  }
  else
  {
    j = &qword_33500;
    v106 = &qword_33500;
LABEL_201:
    v109 = *v106;
    if ( !*v106 )
    {
LABEL_202:
      v110 = operator new(0x30uLL);
      *(_QWORD *)(v110 + 40) = 0LL;
      *(_QWORD *)v110 = 0LL;
      *(_QWORD *)(v110 + 8) = 0LL;
      *(_QWORD *)(v110 + 16) = j;
      *(_DWORD *)(v110 + 32) = 2;
      *v106 = v110;
      v109 = v110;
      if ( *(_QWORD *)qword_334F8 )
      {
        qword_334F8 = *(_QWORD *)qword_334F8;
        v111 = (__int64 *)*v106;
      }
      else
      {
        v111 = (__int64 *)v110;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33500, v111);
      v89 = (__int64 *)qword_33500;
      ++qword_33508;
    }
  }
  *(_QWORD *)(v109 + 40) = v105;
  v112 = qword_33560;
  if ( v89 )
  {
    v113 = &qword_33500;
    while ( 1 )
    {
      while ( 1 )
      {
        v114 = *((_DWORD *)v89 + 8);
        if ( v114 >= 4 )
          break;
        if ( v114 == 3 )
          goto LABEL_218;
        v113 = v89 + 1;
        if ( !v89[1] )
          goto LABEL_218;
        v89 = (__int64 *)v89[1];
      }
      if ( !*v89 )
        break;
      v113 = v89;
      v89 = (__int64 *)*v89;
    }
    v113 = v89;
    v115 = *v89;
    if ( *v89 )
      goto LABEL_225;
  }
  else
  {
    v89 = &qword_33500;
    v113 = &qword_33500;
LABEL_218:
    v115 = *v113;
    if ( *v113 )
      goto LABEL_225;
  }
  v116 = operator new(0x30uLL);
  *(_QWORD *)(v116 + 40) = 0LL;
  *(_QWORD *)v116 = 0LL;
  *(_QWORD *)(v116 + 8) = 0LL;
  *(_QWORD *)(v116 + 16) = v89;
  *(_DWORD *)(v116 + 32) = 3;
  *v113 = v116;
  v115 = v116;
  if ( *(_QWORD *)qword_334F8 )
  {
    qword_334F8 = *(_QWORD *)qword_334F8;
    v117 = (__int64 *)*v113;
  }
  else
  {
    v117 = (__int64 *)v116;
  }
  std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33500, v117);
  ++qword_33508;
LABEL_225:
  *(_QWORD *)(v115 + 40) = v112;
  v118 = (_QWORD *)operator new(0x518uLL);
  v118[2] = 0LL;
  v119 = (__int64)v118;
  v120 = (__int64)(v118 + 3);
  *v118 = off_32708;
  v118[1] = 0LL;
  v121 = rgbd::RGBDAngStrong::RGBDAngStrong((rgbd::RGBDAngStrong *)(v118 + 3));
  v122 = (std::__shared_weak_count *)qword_33530;
  qword_33528 = v120;
  qword_33530 = v119;
  if ( v122 )
  {
    v123 = (unsigned __int64 *)((char *)v122 + 8);
    do
      v124 = __ldaxr(v123);
    while ( __stlxr(v124 - 1, v123) );
    if ( !v124 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *, long double))(*(_QWORD *)v122 + 16LL))(v122, v121);
      std::__shared_weak_count::__release_weak(v122);
    }
  }
  return v3;
}
// 32708: using guessed type __int64 (__fastcall *[3])();
// 33000: using guessed type void *off_33000;
// 33060: using guessed type char *off_33060[2];
// 334C8: using guessed type __int64 qword_334C8;
// 334D0: using guessed type __int64 qword_334D0;
// 334D8: using guessed type __int64 qword_334D8;
// 334E0: using guessed type __int64 qword_334E0;
// 334E8: using guessed type __int64 qword_334E8;
// 334F0: using guessed type __int64 qword_334F0;
// 334F8: using guessed type __int64 qword_334F8;
// 33500: using guessed type __int64 qword_33500;
// 33508: using guessed type __int64 qword_33508;
// 33510: using guessed type __int64 qword_33510;
// 33518: using guessed type __int64 qword_33518;
// 33520: using guessed type __int64 qword_33520;
// 33528: using guessed type __int64 qword_33528;
// 33530: using guessed type __int64 qword_33530;
// 33538: using guessed type __int64 qword_33538;
// 33548: using guessed type __int64 qword_33548;
// 33550: using guessed type __int64 qword_33550;
// 33558: using guessed type __int64 qword_33558;
// 33560: using guessed type __int64 qword_33560;

//----- (000000000001B1E0) ----------------------------------------------------
void JNI_OnUnload(JavaVM *vm, void *reserved)
{
  __int64 v2; // x19
  __int64 v3; // x0
  __int64 v4; // x20
  __int64 v5[2]; // [xsp+0h] [xbp-30h] BYREF

  v5[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( !(*vm)->GetEnv(vm, (void **)v5, 65542LL) )
  {
    v2 = v5[0];
    v3 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)v5[0] + 48LL))(
           v5[0],
           "com/pudutech/rgbdlib/RGBDSensor");
    if ( v3 )
    {
      v4 = v3;
      if ( ((*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 1728LL))(v2, v3) & 0x80000000) == 0 )
      {
        (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 184LL))(v2, v4);
        std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
          (__int64)&qword_33498,
          (_QWORD *)qword_334A0);
        qword_33498 = (__int64)&qword_334A0;
        qword_334A8 = 0LL;
        qword_334A0 = 0LL;
        std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
          (__int64)&qword_334B0,
          (_QWORD *)qword_334B8);
        qword_334B0 = (__int64)&qword_334B8;
        qword_334C0 = 0LL;
        qword_334B8 = 0LL;
        std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
          (__int64)&qword_334C8,
          (_QWORD *)qword_334D0);
        qword_334C8 = (__int64)&qword_334D0;
        qword_334D8 = 0LL;
        qword_334D0 = 0LL;
        std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
          (__int64)&qword_334E0,
          (_QWORD *)qword_334E8);
        qword_334E0 = (__int64)&qword_334E8;
        qword_334F0 = 0LL;
        qword_334E8 = 0LL;
        std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
          (__int64)&qword_334F8,
          (_QWORD *)qword_33500);
        qword_334F8 = (__int64)&qword_33500;
        qword_33508 = 0LL;
        qword_33500 = 0LL;
        if ( qword_33548 )
          (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 176LL))(v2);
        if ( qword_33550 )
          (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 176LL))(v2);
        if ( qword_33558 )
          (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 176LL))(v2);
        if ( qword_33560 )
          (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 176LL))(v2);
      }
    }
  }
}
// 33498: using guessed type __int64 qword_33498;
// 334A0: using guessed type __int64 qword_334A0;
// 334A8: using guessed type __int64 qword_334A8;
// 334B0: using guessed type __int64 qword_334B0;
// 334B8: using guessed type __int64 qword_334B8;
// 334C0: using guessed type __int64 qword_334C0;
// 334C8: using guessed type __int64 qword_334C8;
// 334D0: using guessed type __int64 qword_334D0;
// 334D8: using guessed type __int64 qword_334D8;
// 334E0: using guessed type __int64 qword_334E0;
// 334E8: using guessed type __int64 qword_334E8;
// 334F0: using guessed type __int64 qword_334F0;
// 334F8: using guessed type __int64 qword_334F8;
// 33500: using guessed type __int64 qword_33500;
// 33508: using guessed type __int64 qword_33508;
// 33548: using guessed type __int64 qword_33548;
// 33550: using guessed type __int64 qword_33550;
// 33558: using guessed type __int64 qword_33558;
// 33560: using guessed type __int64 qword_33560;

//----- (000000000001B3BC) ----------------------------------------------------
__int64 __fastcall sub_1B3BC(__int64 a1)
{
  void **v2; // x19
  _BYTE *v3; // x21
  __int64 v4; // x0
  void **v5; // x8
  void **v6; // x23
  __int64 v7; // x22
  unsigned int v8; // w26
  const char *v9; // x28
  size_t v10; // x0
  size_t v11; // x27
  char *v12; // x23
  unsigned __int64 v13; // x24
  char v14; // w27
  _QWORD *v15; // x0
  unsigned __int8 *v16; // x8
  unsigned __int64 v17; // x9
  __int64 v18; // x1
  __int64 v19; // x2
  _BYTE *v20; // x9
  _BYTE *v21; // x1
  __int64 v22; // x0
  void **v24; // x19
  char v25; // t1
  void *v26; // x0
  __int64 v28; // [xsp+20h] [xbp-200h]
  char v29[16]; // [xsp+28h] [xbp-1F8h] BYREF
  void *v30; // [xsp+38h] [xbp-1E8h]
  int v31; // [xsp+40h] [xbp-1E0h] BYREF
  unsigned __int64 v32; // [xsp+48h] [xbp-1D8h] BYREF
  size_t v33; // [xsp+50h] [xbp-1D0h]
  void *v34; // [xsp+58h] [xbp-1C8h]
  void *v35; // [xsp+60h] [xbp-1C0h] BYREF
  void **v36; // [xsp+68h] [xbp-1B8h]
  char v37[8]; // [xsp+78h] [xbp-1A8h] BYREF
  _QWORD v38[42]; // [xsp+80h] [xbp-1A0h] BYREF

  v38[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  rgbd::RGBDAngStrong::getSerialNumber((rgbd::RGBDAngStrong *)qword_33528, &v35);
  v3 = v35;
  v2 = v36;
  v4 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)a1 + 48LL))(a1, "java/lang/String");
  v28 = (*(__int64 (__fastcall **)(__int64, _QWORD, __int64, _QWORD))(*(_QWORD *)a1 + 1376LL))(
          a1,
          -1431655765 * (unsigned int)((unsigned __int64)((char *)v2 - v3) >> 3),
          v4,
          0LL);
  v6 = (void **)v35;
  v5 = v36;
  if ( v36 != v35 )
  {
    v7 = 0LL;
    v8 = 1;
    while ( 1 )
    {
      if ( (word_333B0 & 1) != 0 )
        v9 = (const char *)qword_333C0;
      else
        v9 = (char *)&word_333B0 + 1;
      v31 = dword_333A8;
      v32 = 0LL;
      v33 = 0LL;
      v34 = 0LL;
      v10 = strlen(v9);
      if ( v10 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v11 = v10;
      if ( v10 >= 0x17 )
        break;
      v12 = (char *)&v32 + 1;
      LOBYTE(v32) = 2 * v10;
      if ( v10 )
        goto LABEL_11;
LABEL_12:
      v12[v11] = 0;
      if ( (g3::logLevel(&v31) & 1) != 0 )
      {
        v30 = 0LL;
        v29[0] = 26;
        strcpy(&v29[1], "RGBDAngstrong");
        v29[15] = 0;
        v14 = g3::logTag(v29);
        if ( (v29[0] & 1) != 0 )
        {
          operator delete(v30);
          if ( (v32 & 1) == 0 )
          {
LABEL_15:
            if ( (v14 & 1) != 0 )
              goto LABEL_21;
            goto LABEL_28;
          }
        }
        else if ( (v32 & 1) == 0 )
        {
          goto LABEL_15;
        }
      }
      else
      {
        v14 = 0;
        if ( (v32 & 1) == 0 )
          goto LABEL_15;
      }
      operator delete(v34);
      if ( (v14 & 1) != 0 )
      {
LABEL_21:
        LogCapture::LogCapture((LogCapture *)v37, "RGBDAngstrong", (const LEVELS *)&dword_333A8, "", 6, 0LL);
        v15 = std::__put_character_sequence<char,std::char_traits<char>>(v38, (__int64)"serial number: ", 15LL);
        v16 = (unsigned __int8 *)v35 + 24 * v7;
        v17 = *v16;
        if ( (v17 & 1) != 0 )
          v18 = *((_QWORD *)v16 + 2);
        else
          v18 = (__int64)(v16 + 1);
        if ( (v17 & 1) != 0 )
          v19 = *((_QWORD *)v16 + 1);
        else
          v19 = v17 >> 1;
        std::__put_character_sequence<char,std::char_traits<char>>(v15, v18, v19);
        LogCapture::~LogCapture((LogCapture *)v37);
      }
LABEL_28:
      v20 = (char *)v35 + 24 * v7;
      if ( (*v20 & 1) != 0 )
        v21 = (_BYTE *)*((_QWORD *)v35 + 3 * v7 + 2);
      else
        v21 = v20 + 1;
      v22 = (*(__int64 (__fastcall **)(__int64, _BYTE *))(*(_QWORD *)a1 + 1336LL))(a1, v21);
      (*(void (__fastcall **)(__int64, __int64, _QWORD, __int64))(*(_QWORD *)a1 + 1392LL))(a1, v28, v8 - 1, v22);
      v6 = (void **)v35;
      v5 = v36;
      v7 = v8;
      if ( 0xAAAAAAAAAAAAAAABLL * (((char *)v36 - (_BYTE *)v35) >> 3) <= v8++ )
        goto LABEL_32;
    }
    v13 = (v10 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v12 = (char *)operator new(v13);
    v33 = v11;
    v34 = v12;
    v32 = v13 | 1;
LABEL_11:
    memcpy(v12, v9, v11);
    goto LABEL_12;
  }
LABEL_32:
  if ( v6 )
  {
    if ( v5 == v6 )
    {
      v26 = v6;
    }
    else
    {
      v24 = v5;
      do
      {
        v25 = *((_BYTE *)v24 - 24);
        v24 -= 3;
        if ( (v25 & 1) != 0 )
          operator delete(*(v5 - 1));
        v5 = v24;
      }
      while ( v6 != v24 );
      v26 = v35;
    }
    v36 = v6;
    operator delete(v26);
  }
  return v28;
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 333A8: using guessed type int dword_333A8;
// 333B0: using guessed type __int16 word_333B0;
// 333C0: using guessed type __int64 qword_333C0;
// 33528: using guessed type __int64 qword_33528;
// 1B3BC: using guessed type char var_1A8[8];

//----- (000000000001B7D8) ----------------------------------------------------
__int64 __fastcall sub_1B7D8(__int64 a1, __int64 a2, int a3, __int64 a4, char a5)
{
  const char *v8; // x23
  size_t v9; // x0
  size_t v10; // x22
  char *v11; // x24
  unsigned __int64 v12; // x25
  char v13; // w22
  _QWORD *v14; // x22
  char v15; // w19
  void (*v16)(void); // x8
  char v18[16]; // [xsp+0h] [xbp-1E0h] BYREF
  void *v19; // [xsp+10h] [xbp-1D0h]
  int v20; // [xsp+18h] [xbp-1C8h] BYREF
  unsigned __int64 v21; // [xsp+20h] [xbp-1C0h] BYREF
  size_t v22; // [xsp+28h] [xbp-1B8h]
  void *v23; // [xsp+30h] [xbp-1B0h]
  int v24; // [xsp+38h] [xbp-1A8h] BYREF
  __int128 v25; // [xsp+3Ch] [xbp-1A4h] BYREF
  void *v26; // [xsp+50h] [xbp-190h]
  __int128 *v27; // [xsp+60h] [xbp-180h]
  __int64 v28; // [xsp+188h] [xbp-58h]

  v28 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v20 = dword_33368;
  if ( (word_33370 & 1) != 0 )
    v8 = (const char *)qword_33380;
  else
    v8 = (char *)&word_33370 + 1;
  v24 = a3;
  v22 = 0LL;
  v23 = 0LL;
  v21 = 0LL;
  v9 = strlen(v8);
  if ( v9 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v10 = v9;
  if ( v9 >= 0x17 )
  {
    v12 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v11 = (char *)operator new(v12);
    v22 = v10;
    v23 = v11;
    v21 = v12 | 1;
    goto LABEL_9;
  }
  v11 = (char *)&v21 + 1;
  LOBYTE(v21) = 2 * v9;
  if ( v9 )
LABEL_9:
    memcpy(v11, v8, v10);
  v11[v10] = 0;
  if ( (g3::logLevel(&v20) & 1) != 0 )
  {
    v19 = 0LL;
    v18[0] = 26;
    strcpy(&v18[1], "RGBDAngstrong");
    v18[15] = 0;
    v13 = g3::logTag(v18);
    if ( (v18[0] & 1) == 0 )
    {
      if ( (v21 & 1) == 0 )
        goto LABEL_13;
LABEL_18:
      operator delete(v23);
      if ( (v13 & 1) == 0 )
        goto LABEL_20;
      goto LABEL_19;
    }
    operator delete(v19);
    if ( (v21 & 1) != 0 )
      goto LABEL_18;
  }
  else
  {
    v13 = 0;
    if ( (v21 & 1) != 0 )
      goto LABEL_18;
  }
LABEL_13:
  if ( (v13 & 1) != 0 )
  {
LABEL_19:
    LogCapture::LogCapture((LogCapture *)((char *)&v25 + 4), "RGBDAngstrong", (const LEVELS *)&dword_33368, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(
      (__int128 *)((char *)&v25 + 12),
      (__int64)"set angstrong configure",
      23LL);
    LogCapture::~LogCapture((LogCapture *)((char *)&v25 + 4));
  }
LABEL_20:
  v14 = (_QWORD *)qword_33528;
  sub_1C394(a1, a4, (long double *)((char *)&v25 + 4));
  LOBYTE(v25) = a5;
  v15 = rgbd::RGBDAngStrong::setRgbdLocation(v14, &v24, (unsigned __int8 *)&v25 + 4, (const signed __int8 *)&v25);
  if ( (BYTE4(v25) & 1) != 0 )
    operator delete(v26);
  if ( (v15 & 1) == 0 )
    return 0LL;
  *(_QWORD *)((char *)&v25 + 4) = &off_32678;
  LODWORD(v25) = v24;
  v27 = (__int128 *)((char *)&v25 + 4);
  rgbd::RGBDAngStrong::setRGBDCallback((_QWORD *)qword_33528, (__int64)&v25 + 4, &v25);
  if ( (__int128 *)((char *)&v25 + 4) == v27 )
  {
    v16 = *(void (**)(void))(*(_QWORD *)v27 + 32LL);
    goto LABEL_28;
  }
  if ( v27 )
  {
    v16 = *(void (**)(void))(*(_QWORD *)v27 + 40LL);
LABEL_28:
    v16();
  }
  return 1LL;
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 32678: using guessed type __int64 (__fastcall *off_32678)();
// 33368: using guessed type int dword_33368;
// 33370: using guessed type __int16 word_33370;
// 33380: using guessed type __int64 qword_33380;
// 33528: using guessed type __int64 qword_33528;

//----- (000000000001BB0C) ----------------------------------------------------
__int64 __fastcall sub_1BB0C(__int64 a1, __int64 a2, int a3, __int64 a4)
{
  __int64 v4; // x19
  unsigned __int8 updated; // w19
  void (*v6)(void); // x8
  int v8; // [xsp+8h] [xbp-68h] BYREF
  __int128 v9; // [xsp+Ch] [xbp-64h] BYREF
  void *v10; // [xsp+20h] [xbp-50h]
  __int128 *v11; // [xsp+30h] [xbp-40h]
  __int64 v12; // [xsp+48h] [xbp-28h]

  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = qword_33528;
  v8 = a3;
  sub_1C394(a1, a4, (long double *)((char *)&v9 + 4));
  updated = (unsigned __int8)rgbd::RGBDAngStrong::updateRgbdSet(v4, &v8, (__int64 *)((char *)&v9 + 4));
  if ( (BYTE4(v9) & 1) != 0 )
    operator delete(v10);
  if ( (updated & 1) == 0 )
    return 0LL;
  *(_QWORD *)((char *)&v9 + 4) = &off_32678;
  LODWORD(v9) = v8;
  v11 = (__int128 *)((char *)&v9 + 4);
  rgbd::RGBDAngStrong::setRGBDCallback((_QWORD *)qword_33528, (__int64)&v9 + 4, &v9);
  if ( (__int128 *)((char *)&v9 + 4) == v11 )
  {
    v6 = *(void (**)(void))(*(_QWORD *)v11 + 32LL);
    goto LABEL_9;
  }
  if ( v11 )
  {
    v6 = *(void (**)(void))(*(_QWORD *)v11 + 40LL);
LABEL_9:
    v6();
  }
  return 1LL;
}
// 32678: using guessed type __int64 (__fastcall *off_32678)();
// 33528: using guessed type __int64 qword_33528;

//----- (000000000001BC48) ----------------------------------------------------
__int64 __fastcall sub_1BC48(__int64 a1, __int64 a2)
{
  const char *v4; // x22
  size_t v5; // x0
  size_t v6; // x21
  char *v7; // x23
  unsigned __int64 v8; // x24
  char v9; // w21
  const char *v10; // x20
  size_t v11; // x0
  size_t v12; // x19
  char *v13; // x21
  const char *v14; // x20
  size_t v15; // x0
  size_t v16; // x19
  char *v17; // x21
  unsigned __int64 v18; // x22
  char v19; // w19
  unsigned __int64 v20; // x22
  char v21; // w19
  char v23[16]; // [xsp+8h] [xbp-238h] BYREF
  void *v24; // [xsp+18h] [xbp-228h]
  int v25; // [xsp+20h] [xbp-220h] BYREF
  unsigned __int64 v26; // [xsp+28h] [xbp-218h] BYREF
  size_t v27; // [xsp+30h] [xbp-210h]
  void *v28; // [xsp+38h] [xbp-208h]
  char v29[16]; // [xsp+40h] [xbp-200h] BYREF
  void *v30; // [xsp+50h] [xbp-1F0h]
  int v31; // [xsp+58h] [xbp-1E8h] BYREF
  unsigned __int64 v32; // [xsp+60h] [xbp-1E0h] BYREF
  size_t v33; // [xsp+68h] [xbp-1D8h]
  void *v34; // [xsp+70h] [xbp-1D0h]
  char v35[16]; // [xsp+78h] [xbp-1C8h] BYREF
  void *v36; // [xsp+88h] [xbp-1B8h]
  int v37; // [xsp+90h] [xbp-1B0h] BYREF
  unsigned __int64 v38; // [xsp+98h] [xbp-1A8h] BYREF
  size_t v39; // [xsp+A0h] [xbp-1A0h]
  void *v40; // [xsp+A8h] [xbp-198h]
  char v41[8]; // [xsp+B0h] [xbp-190h] BYREF
  _QWORD v42[41]; // [xsp+B8h] [xbp-188h] BYREF

  v42[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v37 = dword_33368;
  v39 = 0LL;
  v40 = 0LL;
  if ( (word_33370 & 1) != 0 )
    v4 = (const char *)qword_33380;
  else
    v4 = (char *)&word_33370 + 1;
  v38 = 0LL;
  v5 = strlen(v4);
  if ( v5 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v6 = v5;
  if ( v5 >= 0x17 )
  {
    v8 = (v5 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v7 = (char *)operator new(v8);
    v39 = v6;
    v40 = v7;
    v38 = v8 | 1;
    goto LABEL_9;
  }
  v7 = (char *)&v38 + 1;
  LOBYTE(v38) = 2 * v5;
  if ( v5 )
LABEL_9:
    memcpy(v7, v4, v6);
  v7[v6] = 0;
  if ( (g3::logLevel(&v37) & 1) != 0 )
  {
    v36 = 0LL;
    v35[0] = 26;
    strcpy(&v35[1], "RGBDAngstrong");
    v35[15] = 0;
    v9 = g3::logTag(v35);
    if ( (v35[0] & 1) == 0 )
    {
      if ( (v38 & 1) == 0 )
        goto LABEL_13;
LABEL_18:
      operator delete(v40);
      if ( (v9 & 1) == 0 )
        goto LABEL_20;
      goto LABEL_19;
    }
    operator delete(v36);
    if ( (v38 & 1) != 0 )
      goto LABEL_18;
  }
  else
  {
    v9 = 0;
    if ( (v38 & 1) != 0 )
      goto LABEL_18;
  }
LABEL_13:
  if ( (v9 & 1) != 0 )
  {
LABEL_19:
    LogCapture::LogCapture((LogCapture *)v41, "RGBDAngstrong", (const LEVELS *)&dword_33368, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(v42, (__int64)"start angstrong rgbd ", 21LL);
    LogCapture::~LogCapture((LogCapture *)v41);
  }
LABEL_20:
  qword_33540 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 168LL))(a1, a2);
  if ( ((*(__int64 (__fastcall **)(__int64, __int64, __int64, __int64, __int64))(*(_QWORD *)qword_33528 + 16LL))(
          qword_33528,
          640LL,
          400LL,
          3LL,
          10LL) & 1) != 0 )
  {
    if ( (word_33350 & 1) != 0 )
      v10 = (const char *)qword_33360;
    else
      v10 = (char *)&word_33350 + 1;
    v25 = dword_33348;
    v27 = 0LL;
    v28 = 0LL;
    v26 = 0LL;
    v11 = strlen(v10);
    if ( v11 < 0xFFFFFFFFFFFFFFF0LL )
    {
      v12 = v11;
      if ( v11 >= 0x17 )
      {
        v18 = (v11 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v13 = (char *)operator new(v18);
        v27 = v12;
        v28 = v13;
        v26 = v18 | 1;
      }
      else
      {
        v13 = (char *)&v26 + 1;
        LOBYTE(v26) = 2 * v11;
        if ( !v11 )
        {
LABEL_37:
          v13[v12] = 0;
          if ( (g3::logLevel(&v25) & 1) != 0 )
          {
            v24 = 0LL;
            v23[0] = 26;
            strcpy(&v23[1], "RGBDAngstrong");
            v23[15] = 0;
            v19 = g3::logTag(v23);
            if ( (v23[0] & 1) == 0 )
            {
              if ( (v26 & 1) == 0 )
                goto LABEL_40;
LABEL_54:
              operator delete(v28);
              if ( (v19 & 1) == 0 )
                return 1LL;
LABEL_55:
              LogCapture::LogCapture((LogCapture *)v41, "RGBDAngstrong", (const LEVELS *)&dword_33348, "", 6, 0LL);
              std::__put_character_sequence<char,std::char_traits<char>>(
                v42,
                (__int64)"start angstrong rgbd success ",
                29LL);
              LogCapture::~LogCapture((LogCapture *)v41);
              return 1LL;
            }
            operator delete(v24);
            if ( (v26 & 1) != 0 )
              goto LABEL_54;
          }
          else
          {
            v19 = 0;
            if ( (v26 & 1) != 0 )
              goto LABEL_54;
          }
LABEL_40:
          if ( (v19 & 1) == 0 )
            return 1LL;
          goto LABEL_55;
        }
      }
      memcpy(v13, v10, v12);
      goto LABEL_37;
    }
LABEL_62:
    std::__basic_string_common<true>::__throw_length_error();
  }
  if ( (word_333B0 & 1) != 0 )
    v14 = (const char *)qword_333C0;
  else
    v14 = (char *)&word_333B0 + 1;
  v31 = dword_333A8;
  v33 = 0LL;
  v34 = 0LL;
  v32 = 0LL;
  v15 = strlen(v14);
  if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
    goto LABEL_62;
  v16 = v15;
  if ( v15 >= 0x17 )
  {
    v20 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v17 = (char *)operator new(v20);
    v33 = v16;
    v34 = v17;
    v32 = v20 | 1;
    goto LABEL_43;
  }
  v17 = (char *)&v32 + 1;
  LOBYTE(v32) = 2 * v15;
  if ( v15 )
LABEL_43:
    memcpy(v17, v14, v16);
  v17[v16] = 0;
  if ( (g3::logLevel(&v31) & 1) == 0 )
  {
    v21 = 0;
    if ( (v32 & 1) != 0 )
      goto LABEL_58;
LABEL_47:
    if ( (v21 & 1) == 0 )
      return 0LL;
    goto LABEL_59;
  }
  v30 = 0LL;
  v29[0] = 26;
  strcpy(&v29[1], "RGBDAngstrong");
  v29[15] = 0;
  v21 = g3::logTag(v29);
  if ( (v29[0] & 1) != 0 )
  {
    operator delete(v30);
    if ( (v32 & 1) != 0 )
      goto LABEL_58;
    goto LABEL_47;
  }
  if ( (v32 & 1) == 0 )
    goto LABEL_47;
LABEL_58:
  operator delete(v34);
  if ( (v21 & 1) != 0 )
  {
LABEL_59:
    LogCapture::LogCapture((LogCapture *)v41, "RGBDAngstrong", (const LEVELS *)&dword_333A8, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(v42, (__int64)"start angstrong rgbd failed", 27LL);
    LogCapture::~LogCapture((LogCapture *)v41);
  }
  return 0LL;
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 33348: using guessed type int dword_33348;
// 33350: using guessed type __int16 word_33350;
// 33360: using guessed type __int64 qword_33360;
// 33368: using guessed type int dword_33368;
// 33370: using guessed type __int16 word_33370;
// 33380: using guessed type __int64 qword_33380;
// 333A8: using guessed type int dword_333A8;
// 333B0: using guessed type __int16 word_333B0;
// 333C0: using guessed type __int64 qword_333C0;
// 33528: using guessed type __int64 qword_33528;
// 33540: using guessed type __int64 qword_33540;
// 1BC48: using guessed type char var_190[8];

//----- (000000000001C204) ----------------------------------------------------
__int64 sub_1C204()
{
  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)qword_33528 + 56LL))(qword_33528) & 1;
}
// 33528: using guessed type __int64 qword_33528;

//----- (000000000001C22C) ----------------------------------------------------
__int64 sub_1C22C()
{
  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)qword_33528 + 48LL))(qword_33528);
}
// 33528: using guessed type __int64 qword_33528;

//----- (000000000001C240) ----------------------------------------------------
__int64 __fastcall sub_1C240(__int64 a1)
{
  __int128 v2; // q0
  size_t v3; // x20
  const void *v4; // x21
  char *v5; // x22
  char *v6; // x1
  __int64 v7; // x19
  __int128 v9; // [xsp+0h] [xbp-50h] BYREF
  void *v10; // [xsp+10h] [xbp-40h]
  __int64 v11; // [xsp+18h] [xbp-38h]

  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v10 = 0LL;
  v9 = 0uLL;
  if ( (*(_BYTE *)(qword_33528 + 8) & 1) == 0 )
  {
    v2 = *(_OWORD *)(qword_33528 + 8);
    v10 = *(void **)(qword_33528 + 24);
    v9 = v2;
    goto LABEL_10;
  }
  v3 = *(_QWORD *)(qword_33528 + 16);
  if ( v3 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v4 = *(const void **)(qword_33528 + 24);
  if ( v3 >= 0x17 )
  {
    v5 = (char *)operator new((v3 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    *((_QWORD *)&v9 + 1) = v3;
    v10 = v5;
    *(_QWORD *)&v9 = (v3 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
  }
  else
  {
    v5 = (char *)&v9 + 1;
    LOBYTE(v9) = 2 * v3;
    if ( !v3 )
      goto LABEL_9;
  }
  memcpy(v5, v4, v3);
LABEL_9:
  v5[v3] = 0;
LABEL_10:
  if ( (v9 & 1) != 0 )
    v6 = (char *)v10;
  else
    v6 = (char *)&v9 + 1;
  v7 = (*(__int64 (__fastcall **)(__int64, char *))(*(_QWORD *)a1 + 1336LL))(a1, v6);
  if ( (v9 & 1) != 0 )
    operator delete(v10);
  return v7;
}
// 33528: using guessed type __int64 qword_33528;

//----- (000000000001C38C) ----------------------------------------------------
__int64 sub_1C38C()
{
  return 0LL;
}

//----- (000000000001C394) ----------------------------------------------------
long double __usercall sub_1C394@<Q0>(__int64 a1@<X0>, __int64 a2@<X1>, long double *a3@<X8>)
{
  __int64 v6; // x21
  __int64 v7; // x23
  __int64 v8; // x22
  signed int v9; // w24
  __int64 v10; // x0
  const void *v11; // x23
  char *v12; // x25
  long double result; // q0
  long double v14; // [xsp+0h] [xbp-70h] BYREF
  void *v15; // [xsp+10h] [xbp-60h]
  __int64 v16; // [xsp+18h] [xbp-58h]

  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( !a2 )
  {
    *(_QWORD *)a3 = 0LL;
    *((_QWORD *)a3 + 1) = 0LL;
    *((_QWORD *)a3 + 2) = 0LL;
    return result;
  }
  v6 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 248LL))(a1);
  v7 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)a1 + 264LL))(
         a1,
         v6,
         "getBytes",
         "(Ljava/lang/String;)[B");
  (*(void (__fastcall **)(__int64, const char *))(*(_QWORD *)a1 + 1336LL))(a1, "UTF-8");
  v8 = _JNIEnv::CallObjectMethod(a1, a2, v7);
  v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 1368LL))(a1, v8);
  v10 = (*(__int64 (__fastcall **)(__int64, __int64, _QWORD))(*(_QWORD *)a1 + 1472LL))(a1, v8, 0LL);
  *(_OWORD *)&v14 = 0uLL;
  v15 = 0LL;
  if ( (unsigned int)v9 >= 0xFFFFFFF0 )
    std::__basic_string_common<true>::__throw_length_error();
  v11 = (const void *)v10;
  if ( (unsigned int)v9 >= 0x17 )
  {
    v12 = (char *)operator new((v9 + 16LL) & 0xFFFFFFFFFFFFFFF0LL);
    *((_QWORD *)&v14 + 1) = v9;
    v15 = v12;
    *(_QWORD *)&v14 = (v9 + 16LL) & 0xFFFFFFFFFFFFFFF0LL | 1;
  }
  else
  {
    v12 = (char *)&v14 + 1;
    LOBYTE(v14) = 2 * v9;
    if ( !v9 )
      goto LABEL_9;
  }
  memcpy(v12, v11, v9);
LABEL_9:
  v12[v9] = 0;
  (*(void (__fastcall **)(__int64, __int64, const void *, __int64))(*(_QWORD *)a1 + 1536LL))(a1, v8, v11, 2LL);
  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 184LL))(a1, v8);
  (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 184LL))(a1, v6);
  result = v14;
  *((_QWORD *)a3 + 2) = v15;
  *a3 = result;
  return result;
}

//----- (000000000001C58C) ----------------------------------------------------
__int64 _JNIEnv::CallObjectMethod(__int64 a1, __int64 a2, __int64 a3, ...)
{
  __int64 (__fastcall *v3)(__int64, __int64, __int64, __va_list_tag *); // x8
  gcc_va_list va1; // [xsp+C0h] [xbp-60h] BYREF
  gcc_va_list va; // [xsp+E8h] [xbp-38h] BYREF

  va_start(va, a3);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v3 = *(__int64 (__fastcall **)(__int64, __int64, __int64, __va_list_tag *))(*(_QWORD *)a1 + 280LL);
  va_copy(va1, va);
  return v3(a1, a2, a3, va1);
}

//----- (000000000001C630) ----------------------------------------------------
_QWORD *sub_1C630()
{
  _QWORD *result; // x0

  result = (_QWORD *)operator new(0x10uLL);
  *result = &off_32678;
  return result;
}
// 32678: using guessed type __int64 (__fastcall *off_32678)();

//----- (000000000001C654) ----------------------------------------------------
void __fastcall sub_1C654(__int64 a1, _QWORD *a2)
{
  *a2 = &off_32678;
}
// 32678: using guessed type __int64 (__fastcall *off_32678)();

//----- (000000000001C66C) ----------------------------------------------------
void __fastcall sub_1C66C(__int64 a1, unsigned int *a2, char *a3)
{
  unsigned int v3; // w22
  int v4; // w19
  int v5; // w0
  int v6; // w20
  const char *v7; // x20
  size_t v8; // x0
  void *v9; // x19
  char *v10; // x21
  __int64 *v11; // x26
  __int64 *v12; // x25
  int v13; // w8
  unsigned __int64 v14; // x22
  char v15; // w19
  _QWORD *v16; // x0
  __int64 v17; // x24
  __int64 v18; // x0
  __int64 *v19; // x1
  __int64 v20; // x24
  __int64 *v21; // x0
  __int64 v22; // x25
  __int64 *v23; // x26
  __int64 v24; // x0
  void *v25; // x8
  __int128 v26; // q0
  __int64 v27; // x8
  __int64 *v28; // x1
  _QWORD **v29; // x26
  __int64 *v30; // x0
  __int64 v31; // x27
  __int64 *v32; // x28
  __int64 v33; // x0
  __int128 v34; // q0
  void *v35; // x8
  __int64 v36; // x9
  _QWORD *v37; // x8
  __int64 *v38; // x1
  __int64 v39; // x21
  __int64 *v40; // x27
  __int64 v41; // x1
  __int64 *v42; // x26
  int v43; // w8
  __int64 v44; // x24
  __int64 v45; // x20
  __int64 v46; // x0
  __int64 *v47; // x1
  __int64 *v48; // x27
  __int64 v49; // x24
  __int64 *v50; // x26
  int v51; // w8
  __int64 v52; // x20
  __int64 v53; // x0
  __int64 *v54; // x1
  pthread_t v55; // x0
  const char *v56; // x1
  __int64 v57; // [xsp+10h] [xbp-1F0h]
  int v58; // [xsp+10h] [xbp-1F0h]
  int v59; // [xsp+10h] [xbp-1F0h]
  _QWORD v60[2]; // [xsp+18h] [xbp-1E8h] BYREF
  void *v61; // [xsp+28h] [xbp-1D8h]
  __int128 v62; // [xsp+30h] [xbp-1D0h] BYREF
  void *v63; // [xsp+40h] [xbp-1C0h]
  void *v64; // [xsp+48h] [xbp-1B8h]
  __int64 v65; // [xsp+50h] [xbp-1B0h] BYREF
  __int128 v66; // [xsp+58h] [xbp-1A8h] BYREF
  void *v67; // [xsp+68h] [xbp-198h]
  __int64 v68; // [xsp+1A0h] [xbp-60h]

  v68 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *a2;
  v4 = *a3;
  v5 = (*(__int64 (__fastcall **)(__int64, __int64 *, __int64))(*(_QWORD *)qword_33538 + 48LL))(
         qword_33538,
         &v65,
         65542LL);
  if ( v5 == -2 )
  {
    v6 = 1;
    if ( (*(unsigned int (__fastcall **)(__int64, __int64 *, _QWORD))(*(_QWORD *)qword_33538 + 32LL))(
           qword_33538,
           &v65,
           0LL) )
    {
      goto LABEL_3;
    }
LABEL_11:
    v11 = (__int64 *)qword_33500;
    v57 = v65;
    if ( qword_33500 )
    {
      v12 = &qword_33500;
      while ( 1 )
      {
        while ( 1 )
        {
          v13 = *((_DWORD *)v11 + 8);
          if ( v13 > v4 )
            break;
          if ( v13 >= v4 )
            goto LABEL_33;
          v12 = v11 + 1;
          if ( !v11[1] )
            goto LABEL_33;
          v11 = (__int64 *)v11[1];
        }
        if ( !*v11 )
          break;
        v12 = v11;
        v11 = (__int64 *)*v11;
      }
      v12 = v11;
      v17 = *v11;
      if ( !*v11 )
        goto LABEL_34;
    }
    else
    {
      v11 = &qword_33500;
      v12 = &qword_33500;
LABEL_33:
      v17 = *v12;
      if ( !*v12 )
      {
LABEL_34:
        v18 = operator new(0x30uLL);
        *(_DWORD *)(v18 + 32) = v4;
        *(_QWORD *)(v18 + 40) = 0LL;
        *(_QWORD *)v18 = 0LL;
        *(_QWORD *)(v18 + 8) = 0LL;
        *(_QWORD *)(v18 + 16) = v11;
        *v12 = v18;
        v17 = v18;
        if ( *(_QWORD *)qword_334F8 )
        {
          qword_334F8 = *(_QWORD *)qword_334F8;
          v19 = (__int64 *)*v12;
        }
        else
        {
          v19 = (__int64 *)v18;
        }
        std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33500, v19);
        ++qword_33508;
      }
    }
    v20 = *(_QWORD *)(v17 + 40);
    *((_QWORD *)&v66 + 1) = 0LL;
    LOBYTE(v66) = 16;
    v67 = 0LL;
    *(_QWORD *)((char *)&v66 + 1) = 0x63736544656C6946LL;
    v21 = std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::__find_equal<std::string>(
            (__int64)&qword_334C8,
            &v62,
            (unsigned __int8 *)&v66);
    v22 = *v21;
    v23 = v21;
    if ( !*v21 )
    {
      v24 = operator new(0x50uLL);
      v25 = v67;
      v26 = v66;
      *((_QWORD *)&v66 + 1) = 0LL;
      v67 = 0LL;
      *(_QWORD *)(v24 + 48) = v25;
      v27 = v62;
      *(_OWORD *)(v24 + 32) = v26;
      *(_QWORD *)(v24 + 64) = 0LL;
      *(_QWORD *)&v66 = 0LL;
      *(_QWORD *)(v24 + 72) = 0LL;
      *(_QWORD *)v24 = 0LL;
      *(_QWORD *)(v24 + 8) = 0LL;
      *(_QWORD *)(v24 + 16) = v27;
      *(_QWORD *)(v24 + 56) = v24 + 64;
      *v23 = v24;
      v22 = v24;
      if ( *(_QWORD *)qword_334C8 )
      {
        qword_334C8 = *(_QWORD *)qword_334C8;
        v28 = (__int64 *)*v23;
      }
      else
      {
        v28 = (__int64 *)v24;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_334D0, v28);
      ++qword_334D8;
    }
    v29 = (_QWORD **)(v22 + 56);
    v63 = 0LL;
    v62 = 0x66637365640AuLL;
    v30 = std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::__find_equal<std::string>(
            v22 + 56,
            v60,
            (unsigned __int8 *)&v62);
    v31 = *v30;
    v32 = v30;
    if ( !*v30 )
    {
      v33 = operator new(0x40uLL);
      v34 = v62;
      v35 = v63;
      v36 = v60[0];
      v63 = 0LL;
      v62 = 0uLL;
      *(_QWORD *)v33 = 0LL;
      *(_QWORD *)(v33 + 8) = 0LL;
      *(_OWORD *)(v33 + 32) = v34;
      *(_QWORD *)(v33 + 48) = v35;
      *(_QWORD *)(v33 + 56) = 0LL;
      *(_QWORD *)(v33 + 16) = v36;
      *v32 = v33;
      v31 = v33;
      v37 = (_QWORD *)**v29;
      if ( v37 )
      {
        *v29 = v37;
        v38 = (__int64 *)*v32;
      }
      else
      {
        v38 = (__int64 *)v33;
      }
      std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(*(__int64 **)(v22 + 64), v38);
      ++*(_QWORD *)(v22 + 72);
    }
    (*(void (__fastcall **)(__int64, __int64, _QWORD, _QWORD))(*(_QWORD *)v57 + 872LL))(
      v57,
      v20,
      *(_QWORD *)(v31 + 56),
      v3);
    if ( (v62 & 1) != 0 )
      operator delete(v63);
    if ( (v66 & 1) != 0 )
      operator delete(v67);
    v39 = v65;
    v40 = (__int64 *)qword_33518;
    v41 = qword_33540;
    if ( qword_33518 )
    {
      v42 = &qword_33518;
      while ( 1 )
      {
        while ( 1 )
        {
          v43 = *((_DWORD *)v40 + 8);
          if ( v43 > v4 )
            break;
          if ( v43 >= v4 )
            goto LABEL_64;
          v42 = v40 + 1;
          if ( !v40[1] )
            goto LABEL_64;
          v40 = (__int64 *)v40[1];
        }
        if ( !*v40 )
          break;
        v42 = v40;
        v40 = (__int64 *)*v40;
      }
      v42 = v40;
      v44 = *v40;
      if ( !*v40 )
        goto LABEL_65;
    }
    else
    {
      v40 = &qword_33518;
      v42 = &qword_33518;
LABEL_64:
      v44 = *v42;
      if ( !*v42 )
      {
LABEL_65:
        v58 = v6;
        v45 = qword_33540;
        v46 = operator new(0x30uLL);
        *(_DWORD *)(v46 + 32) = v4;
        *(_QWORD *)(v46 + 40) = 0LL;
        *(_QWORD *)v46 = 0LL;
        *(_QWORD *)(v46 + 8) = 0LL;
        *(_QWORD *)(v46 + 16) = v40;
        *v42 = v46;
        v44 = v46;
        if ( *(_QWORD *)qword_33510 )
        {
          qword_33510 = *(_QWORD *)qword_33510;
          v47 = (__int64 *)*v42;
        }
        else
        {
          v47 = (__int64 *)v46;
        }
        std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33518, v47);
        v41 = v45;
        v6 = v58;
        ++qword_33520;
      }
    }
    v48 = (__int64 *)qword_33500;
    v49 = *(_QWORD *)(v44 + 40);
    if ( qword_33500 )
    {
      v50 = &qword_33500;
      while ( 1 )
      {
        while ( 1 )
        {
          v51 = *((_DWORD *)v48 + 8);
          if ( v51 > v4 )
            break;
          if ( v51 >= v4 )
            goto LABEL_81;
          v50 = v48 + 1;
          if ( !v48[1] )
            goto LABEL_81;
          v48 = (__int64 *)v48[1];
        }
        if ( !*v48 )
          break;
        v50 = v48;
        v48 = (__int64 *)*v48;
      }
      v50 = v48;
      if ( *v48 )
        goto LABEL_88;
    }
    else
    {
      v48 = &qword_33500;
      v50 = &qword_33500;
LABEL_81:
      if ( *v50 )
        goto LABEL_88;
    }
    v59 = v6;
    v52 = v41;
    v53 = operator new(0x30uLL);
    *(_DWORD *)(v53 + 32) = v4;
    *(_QWORD *)(v53 + 40) = 0LL;
    *(_QWORD *)v53 = 0LL;
    *(_QWORD *)(v53 + 8) = 0LL;
    *(_QWORD *)(v53 + 16) = v48;
    *v50 = v53;
    if ( *(_QWORD *)qword_334F8 )
    {
      qword_334F8 = *(_QWORD *)qword_334F8;
      v54 = (__int64 *)*v50;
    }
    else
    {
      v54 = (__int64 *)v53;
    }
    std::__tree_balance_after_insert<std::__tree_node_base<void *> *>((__int64 *)qword_33500, v54);
    v41 = v52;
    v6 = v59;
    ++qword_33508;
LABEL_88:
    _JNIEnv::CallVoidMethod(v39, v41, v49);
    if ( v6 )
      (*(void (__fastcall **)(__int64))(*(_QWORD *)qword_33538 + 40LL))(qword_33538);
    v55 = pthread_self();
    if ( (unsigned __int8)v4 > 3u )
      v56 = "Rgbd";
    else
      v56 = (&off_32748)[v4];
    pthread_setname_np(v55, v56);
    return;
  }
  v6 = 0;
  if ( !v5 )
    goto LABEL_11;
LABEL_3:
  if ( (word_333B0 & 1) != 0 )
    v7 = (const char *)qword_333C0;
  else
    v7 = (char *)&word_333B0 + 1;
  LODWORD(v62) = dword_333A8;
  v63 = 0LL;
  v64 = 0LL;
  *((_QWORD *)&v62 + 1) = 0LL;
  v8 = strlen(v7);
  if ( v8 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v9 = (void *)v8;
  if ( v8 >= 0x17 )
  {
    v14 = (v8 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v10 = (char *)operator new(v14);
    v63 = v9;
    v64 = v10;
    *((_QWORD *)&v62 + 1) = v14 | 1;
    goto LABEL_21;
  }
  v10 = (char *)&v62 + 9;
  BYTE8(v62) = 2 * v8;
  if ( v8 )
LABEL_21:
    memcpy(v10, v7, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v10) = 0;
  if ( (g3::logLevel(&v62) & 1) == 0 )
  {
    v15 = 0;
    if ( (BYTE8(v62) & 1) != 0 )
      goto LABEL_28;
LABEL_25:
    if ( (v15 & 1) == 0 )
      return;
LABEL_29:
    LogCapture::LogCapture((LogCapture *)&v66, "RGBDAngstrong", (const LEVELS *)&dword_333A8, "", 6, 0LL);
    v16 = std::__put_character_sequence<char,std::char_traits<char>>(
            (_QWORD *)&v66 + 1,
            (__int64)"get jni env failed when get exposure ",
            37LL);
    std::ostream::operator<<(v16);
    LogCapture::~LogCapture((LogCapture *)&v66);
    return;
  }
  v61 = 0LL;
  LOBYTE(v60[0]) = 26;
  strcpy((char *)v60 + 1, "RGBDAngstrong");
  HIBYTE(v60[1]) = 0;
  v15 = g3::logTag(v60);
  if ( (v60[0] & 1) == 0 )
  {
    if ( (BYTE8(v62) & 1) == 0 )
      goto LABEL_25;
    goto LABEL_28;
  }
  operator delete(v61);
  if ( (BYTE8(v62) & 1) == 0 )
    goto LABEL_25;
LABEL_28:
  operator delete(v64);
  if ( (v15 & 1) != 0 )
    goto LABEL_29;
}
// D710: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// DB30: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// DC80: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 32748: using guessed type char *off_32748;
// 333A8: using guessed type int dword_333A8;
// 333B0: using guessed type __int16 word_333B0;
// 333C0: using guessed type __int64 qword_333C0;
// 334C8: using guessed type __int64 qword_334C8;
// 334D0: using guessed type __int64 qword_334D0;
// 334D8: using guessed type __int64 qword_334D8;
// 334F8: using guessed type __int64 qword_334F8;
// 33500: using guessed type __int64 qword_33500;
// 33508: using guessed type __int64 qword_33508;
// 33510: using guessed type __int64 qword_33510;
// 33518: using guessed type __int64 qword_33518;
// 33520: using guessed type __int64 qword_33520;
// 33538: using guessed type __int64 qword_33538;
// 33540: using guessed type __int64 qword_33540;

//----- (000000000001CE0C) ----------------------------------------------------
__int64 __fastcall sub_1CE0C(__int64 a1, __int64 a2)
{
  if ( *(char **)(a2 + 8) == "ZN12_GLOBAL__N_118setDycRGBDCallBackEN4rgbd12RgbdLocationEE3$_0" )
    return a1 + 8;
  else
    return 0LL;
}

//----- (000000000001CE28) ----------------------------------------------------
void **sub_1CE28()
{
  return &`typeinfo for'`anonymous namespace'::setDycRGBDCallBack(rgbd::RgbdLocation)::$_0;
}
// 326E8: using guessed type void *`typeinfo for'`anonymous namespace'::setDycRGBDCallBack(rgbd::RgbdLocation)::$_0;

//----- (000000000001CE34) ----------------------------------------------------
__int64 _JNIEnv::CallVoidMethod(__int64 a1, __int64 a2, __int64 a3, ...)
{
  __int64 (__fastcall *v3)(__int64, __int64, __int64, __va_list_tag *); // x8
  gcc_va_list va1; // [xsp+C0h] [xbp-60h] BYREF
  gcc_va_list va; // [xsp+E8h] [xbp-38h] BYREF

  va_start(va, a3);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v3 = *(__int64 (__fastcall **)(__int64, __int64, __int64, __va_list_tag *))(*(_QWORD *)a1 + 496LL);
  va_copy(va1, va);
  return v3(a1, a2, a3, va1);
}

//----- (000000000001CED0) ----------------------------------------------------
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  __int64 *v3; // x20
  __int64 *v4; // x24
  unsigned __int64 v6; // x8
  size_t v7; // x25
  const void *v8; // x21
  unsigned __int64 v9; // x28
  size_t v10; // x26
  size_t v11; // x22
  char *v12; // x23
  int v13; // w0
  __int64 *v14; // x8
  int v15; // w0

  v3 = (__int64 *)(a1 + 8);
  v4 = *(__int64 **)(a1 + 8);
  if ( v4 )
  {
    v6 = *a3;
    v3 = (__int64 *)(a1 + 8);
    if ( (v6 & 1) != 0 )
      v7 = *((_QWORD *)a3 + 1);
    else
      v7 = v6 >> 1;
    if ( (v6 & 1) != 0 )
      v8 = (const void *)*((_QWORD *)a3 + 2);
    else
      v8 = a3 + 1;
    while ( 1 )
    {
      v9 = *((unsigned __int8 *)v4 + 32);
      if ( (v9 & 1) != 0 )
        v10 = v4[5];
      else
        v10 = v9 >> 1;
      if ( v10 >= v7 )
        v11 = v7;
      else
        v11 = v10;
      if ( v11 && ((v9 & 1) == 0 ? (v12 = (char *)v4 + 33) : (v12 = (char *)v4[6]), (v13 = memcmp(v8, v12, v11)) != 0) )
      {
        if ( (v13 & 0x80000000) == 0 )
          goto LABEL_29;
      }
      else if ( v7 >= v10 )
      {
        if ( !v11 )
          goto LABEL_32;
        v12 = (v9 & 1) != 0 ? (char *)v4[6] : (char *)v4 + 33;
LABEL_29:
        v15 = memcmp(v12, v8, v11);
        if ( v15 )
        {
          if ( (v15 & 0x80000000) == 0 )
            goto LABEL_34;
        }
        else
        {
LABEL_32:
          if ( v10 >= v7 )
            goto LABEL_34;
        }
        v3 = v4 + 1;
        v14 = (__int64 *)v4[1];
        if ( !v14 )
        {
LABEL_34:
          *a2 = v4;
          return v3;
        }
        goto LABEL_8;
      }
      v14 = (__int64 *)*v4;
      if ( !*v4 )
      {
        *a2 = v4;
        return v4;
      }
      v3 = v4;
LABEL_8:
      v4 = v14;
    }
  }
  *a2 = v3;
  return v3;
}

//----- (000000000001CFFC) ----------------------------------------------------
__int64 *__fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  __int64 *v3; // x20
  __int64 *v4; // x24
  unsigned __int64 v6; // x8
  size_t v7; // x25
  const void *v8; // x21
  unsigned __int64 v9; // x28
  size_t v10; // x26
  size_t v11; // x22
  char *v12; // x23
  int v13; // w0
  __int64 *v14; // x8
  int v15; // w0

  v3 = (__int64 *)(a1 + 8);
  v4 = *(__int64 **)(a1 + 8);
  if ( v4 )
  {
    v6 = *a3;
    v3 = (__int64 *)(a1 + 8);
    if ( (v6 & 1) != 0 )
      v7 = *((_QWORD *)a3 + 1);
    else
      v7 = v6 >> 1;
    if ( (v6 & 1) != 0 )
      v8 = (const void *)*((_QWORD *)a3 + 2);
    else
      v8 = a3 + 1;
    while ( 1 )
    {
      v9 = *((unsigned __int8 *)v4 + 32);
      if ( (v9 & 1) != 0 )
        v10 = v4[5];
      else
        v10 = v9 >> 1;
      if ( v10 >= v7 )
        v11 = v7;
      else
        v11 = v10;
      if ( v11 && ((v9 & 1) == 0 ? (v12 = (char *)v4 + 33) : (v12 = (char *)v4[6]), (v13 = memcmp(v8, v12, v11)) != 0) )
      {
        if ( (v13 & 0x80000000) == 0 )
          goto LABEL_29;
      }
      else if ( v7 >= v10 )
      {
        if ( !v11 )
          goto LABEL_32;
        v12 = (v9 & 1) != 0 ? (char *)v4[6] : (char *)v4 + 33;
LABEL_29:
        v15 = memcmp(v12, v8, v11);
        if ( v15 )
        {
          if ( (v15 & 0x80000000) == 0 )
            goto LABEL_34;
        }
        else
        {
LABEL_32:
          if ( v10 >= v7 )
            goto LABEL_34;
        }
        v3 = v4 + 1;
        v14 = (__int64 *)v4[1];
        if ( !v14 )
        {
LABEL_34:
          *a2 = v4;
          return v3;
        }
        goto LABEL_8;
      }
      v14 = (__int64 *)*v4;
      if ( !*v4 )
      {
        *a2 = v4;
        return v4;
      }
      v3 = v4;
LABEL_8:
      v4 = v14;
    }
  }
  *a2 = v3;
  return v3;
}

//----- (000000000001D128) ----------------------------------------------------
__int64 _JNIEnv::NewObject(__int64 a1, __int64 a2, __int64 a3, ...)
{
  __int64 (__fastcall *v3)(__int64, __int64, __int64, __va_list_tag *); // x8
  gcc_va_list va1; // [xsp+C0h] [xbp-60h] BYREF
  gcc_va_list va; // [xsp+E8h] [xbp-38h] BYREF

  va_start(va, a3);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v3 = *(__int64 (__fastcall **)(__int64, __int64, __int64, __va_list_tag *))(*(_QWORD *)a1 + 232LL);
  va_copy(va1, va);
  return v3(a1, a2, a3, va1);
}

//----- (000000000001D1C4) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::~__shared_ptr_emplace(__int64 a1)
{
  *(_QWORD *)a1 = off_32708;
  rgbd::RGBDAngStrong::~RGBDAngStrong((rgbd::RGBDAngStrong *)(a1 + 24));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);
}
// 32708: using guessed type __int64 (__fastcall *off_32708[3])();

//----- (000000000001D1F8) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::~__shared_ptr_emplace(__int64 a1)
{
  *(_QWORD *)a1 = off_32708;
  rgbd::RGBDAngStrong::~RGBDAngStrong((rgbd::RGBDAngStrong *)(a1 + 24));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);
  operator delete((void *)a1);
}
// 32708: using guessed type __int64 (__fastcall *off_32708[3])();

//----- (000000000001D234) ----------------------------------------------------
__int64 __fastcall std::__shared_ptr_emplace<rgbd::RGBDAngStrong>::__on_zero_shared(__int64 a1)
{
  return (**(__int64 (__fastcall ***)(__int64))(a1 + 24))(a1 + 24);
}

// nfuncs=468 queued=296 decompiled=296 lumina nreq=0 worse=0 better=0
// ALL OK, 296 function(s) have been successfully decompiled
