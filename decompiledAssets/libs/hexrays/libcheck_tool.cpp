/* This file was generated by the Hex-Rays decompiler version 8.4.0.240320.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>

#include <stdarg.h>


//-------------------------------------------------------------------------
// Function declarations

void sub_A3D0();
// pthread_t pthread_self(void);
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3);
// _QWORD cv::Mat::deallocate(cv::Mat *__hidden this); idb
// int system(const char *command);
// int pthread_setname_np(pthread_t target_thread, const char *name);
// _QWORD __fastcall std::logic_error::logic_error(std::logic_error *__hidden this, const char *); idb
// _QWORD pudutech::Ashdmem::destroyMemory(pudutech::Ashdmem *__hidden this); idb
// void *__fastcall __cxa_begin_catch(void *);
// _QWORD std::bad_cast::bad_cast(std::bad_cast *__hidden this); idb
// int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle);
__int64 __fastcall std::filebuf::sync(__int64 a1);
// _QWORD pudutech::Ashdmem::getMemory(pudutech::Ashdmem *__hidden this); idb
// void __fastcall operator delete[](void *); idb
// _QWORD __fastcall operator new(unsigned __int64); idb
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n);
void __noreturn std::__basic_string_common<true>::__throw_length_error();
// size_t fread(void *ptr, size_t size, size_t n, FILE *stream);
// _QWORD std::__shared_weak_count::__release_weak(std::__shared_weak_count *__hidden this); idb
void __fastcall std::vector<int>::__push_back_slow_path<int const&>(__int64 a1, _DWORD *a2);
// void __fastcall std::mutex::~mutex(std::mutex *__hidden this); idb
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n);
bool __fastcall rgbd::RGBDCheck::runCheckToolSaveImg(rgbd::RGBDCheck *this, const int *a2, int *a3, int *a4);
// size_t fwrite(const void *ptr, size_t size, size_t n, FILE *s);
// __int64 __fastcall cv::Mat::operator=(_QWORD, _QWORD); weak
void __fastcall rgbd::RGBDCheck::~RGBDCheck(rgbd::RGBDCheck *this); // idb
__int64 __fastcall rgbd::RGBDCheck::initCheckTool(rgbd::RGBDCheck *this, unsigned int *a2, int *a3);
cv::Mat *__fastcall cv::Mat_<double>::operator=(cv::Mat *this, cv::Mat *a2);
// void __fastcall operator delete(void *); idb
// __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD); weak
// _QWORD __fastcall cv::MatConstIterator::seek(cv::MatConstIterator *__hidden this, __int64, bool); idb
_QWORD *__fastcall std::ostream::flush(_QWORD *a1);
// _QWORD __fastcall cv::MatConstIterator::seek(cv::MatConstIterator *__hidden this, const int *, bool); idb
// _QWORD *__fastcall pudutech::Ashdmem::useMemory(_QWORD *__hidden __return_ptr, pudutech::Ashdmem *__hidden this, int); idb
// _QWORD __fastcall cv::Mat::create(cv::Mat *__hidden this, int, const int *, int); idb
// _QWORD __fastcall operator new[](unsigned __int64); idb
// _QWORD std::uncaught_exception(void); idb
// LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *); weak
// void free(void *ptr);
// __int64 __fastcall pudutech::Ashdmem::createMemory(_QWORD, _QWORD, _QWORD); weak
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n);
__int64 __fastcall rgbd::RGBDCheck::RGBDCheck(rgbd::RGBDCheck *this); // idb
bool __fastcall rgbd::RGBDCheck::runCheckTool(rgbd::RGBDCheck *this, const int *a2, int *a3, int *a4);
// void *__fastcall __cxa_allocate_exception(size_t thrown_size);
// _QWORD *std::ios_base::getloc(_QWORD *__hidden __return_ptr, std::ios_base *__hidden this); idb
// int __android_log_print(int prio, const char *tag, const char *fmt, ...);
// int fflush(FILE *stream);
// void _Unwind_Resume(struct _Unwind_Exception *);
void __fastcall std::filebuf::~filebuf(__int64 a1);
__int64 *__fastcall std::vector<cv::Mat>::__swap_out_circular_buffer(__int64 *result, _QWORD *a2);
void __fastcall std::streambuf::~streambuf(_QWORD *a1);
__int64 __fastcall rgbd::RGBDCheck::setCallback(__int64 a1, __int64 a2);
// __int64 __fastcall checktool::init(_QWORD, _QWORD, _QWORD, _QWORD); weak
cv::Mat *__fastcall cv::Mat::operator=(cv::Mat *this, cv::Mat *a2);
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result);
void __fastcall checktool::~checktool(checktool *this, void *a2);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1, float a2);
// void __fastcall __noreturn __cxa_throw(void *, struct type_info *lptinfo, void (__fastcall *)(void *));
// std::__shared_weak_count *__usercall std::shared_ptr<rgbd::RGBDCheck>::make_shared<>@<X0>(_QWORD *a1@<X8>);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
// void *memmove(void *dest, const void *src, size_t n);
// void *memset(void *s, int c, size_t n);
// int fseeko(FILE *stream, __off_t off, int whence);
// __int64 __fastcall cv::Mat::convertTo(_QWORD, _QWORD, _QWORD, double, double); weak
// int __fastcall __cxa_finalize(void *);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
// _QWORD std::mutex::unlock(std::mutex *__hidden this); idb
__int64 __fastcall _JNIEnv::NewObject(__int64 a1, __int64 a2, __int64 a3);
void __fastcall std::vector<cv::Mat>::__append(__int64 *a1, unsigned __int64 a2, cv::Mat *a3);
// _QWORD __fastcall cv::Mat::copySize(cv::Mat *__hidden this, const cv::Mat *); idb
// __int64 __fastcall cv::imwrite(_QWORD, _QWORD, _QWORD); weak
// void __cxa_end_catch(void);
// __off_t ftello(FILE *stream);
// void __fastcall LogCapture::~LogCapture(LogCapture *__hidden this); idb
// int fclose(FILE *stream);
__int64 __fastcall _JNIEnv::CallVoidMethod(__int64 a1, __int64 a2, __int64 a3);
// void __fastcall std::locale::~locale(std::locale *__hidden this); idb
void __fastcall feasibal_region::PreParamInfo::~PreParamInfo(void **this, void *a2);
// __int64 __fastcall cv::error(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD); weak
void __noreturn std::__basic_string_common<true>::__throw_out_of_range();
// _QWORD std::mutex::lock(std::mutex *__hidden this); idb
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
// void __fastcall CAPE::~CAPE(CAPE *__hidden this); idb
// __int64 __fastcall g3::logLevel(_QWORD); weak
void __fastcall std::__split_buffer<cv::Mat>::~__split_buffer(__int64 a1, void *a2);
// _QWORD __fastcall std::ios_base::clear(std::ios_base *__hidden this, unsigned int); idb
void __noreturn std::__vector_base_common<true>::__throw_length_error();
// _QWORD cv::Mat::updateContinuityFlag(cv::Mat *__hidden this); idb
// _QWORD std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *__hidden this); idb
// checktool *checktool::checktool(checktool *__hidden this); idb
void __fastcall feasibal_region::feasibal_region::~feasibal_region(feasibal_region::feasibal_region *this, void *a2);
// _QWORD pudutech::Ashdmem::create(pudutech::Ashdmem *__hidden this); idb
void __fastcall feasibal_region::ground_process::~ground_process(feasibal_region::ground_process *this); // idb
// void *memcpy(void *dest, const void *src, size_t n);
// void __fastcall std::ios_base::~ios_base(std::ios_base *__hidden this); idb
// _QWORD __fastcall cv::fastFree(cv *__hidden this, void *); idb
// __int64 __fastcall g3::logTag(_QWORD); weak
// __int64 __fastcall __register_atfork(_QWORD, _QWORD, _QWORD, _QWORD); weak
cv::Mat *__fastcall cv::Mat_<double>::operator=(cv::Mat *this, cv::Mat *a2);
// void __fastcall std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *__hidden this); idb
// _QWORD *__fastcall cv::Mat::reshape(_QWORD *__hidden __return_ptr, cv::Mat *__hidden this, int, int, const int *); idb
// size_t strlen(const char *s);
// _QWORD *__fastcall checktool::runcheck(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD); weak
// void __noreturn std::terminate(void); idb
// _QWORD *__fastcall std::to_string(_QWORD *__hidden __return_ptr, std::__ndk1 *__hidden this, int); idb
void start();
void sub_AACC();
void sub_AAE8();
void sub_AB04();
void sub_AB20();
void sub_AB3C();
void sub_AB58();
void sub_AB74();
void sub_AB90();
__int64 sub_ABAC();
__int64 sub_AEAC();
__int64 sub_B1C8();
__int64 (*__fastcall sub_B1DC(__int64 (*result)(void)))(void);
__int64 __fastcall sub_B1E8(void *a1);
__int64 __fastcall sub_B204(__int64 a1, __int64 a2, __int64 a3);
void __fastcall std::string::~string(__int64 a1);
void __fastcall LEVELS::~LEVELS(void **this);
__int64 __fastcall std::shared_ptr<rgbd::RGBDCheck>::~shared_ptr(__int64 result);
jint JNI_OnLoad(JavaVM *vm, void *reserved);
void JNI_OnUnload(JavaVM *vm, void *reserved);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::static_delete(__int64 a1, void **a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::copy_from_value(__int64 a1, __int64 a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::clone(__int64 a1, __int64 a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::get_size();
void **cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::type();
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::print(int a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::copy_from_value(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<char const*>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<char const*>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<char const*>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<char const*>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<char const*>::print(__int64 a1, _QWORD *a2, const char **a3);
void __fastcall cvflann::anyimpl::small_any_policy<int>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<int>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<int>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<int>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<int>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<int>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<int>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<int>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::small_any_policy<float>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<float>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<float>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<float>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<float>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<float>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<float>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<float>::print(__int64 a1, _QWORD *a2, float *a3);
void __fastcall cvflann::anyimpl::small_any_policy<bool>::copy_from_value(__int64 a1, _BYTE *a2, _BYTE *a3);
void __fastcall cvflann::anyimpl::small_any_policy<bool>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<bool>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<bool>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<bool>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<bool>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<bool>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<bool>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::static_delete(__int64 a1, void **a2);
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::copy_from_value(__int64 a1, _DWORD *a2, _QWORD *a3);
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::clone(__int64 a1, _DWORD **a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::move(__int64 a1, _DWORD **a2, _DWORD **a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::get_size();
void **cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::type();
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::static_delete(__int64 a1, void **a2);
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::copy_from_value(__int64 a1, _DWORD *a2, _QWORD *a3);
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::clone(__int64 a1, _DWORD **a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::move(__int64 a1, _DWORD **a2, _DWORD **a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::get_size();
void **cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::type();
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::clone(__int64 a1, _QWORD *a2, _QWORD *a3);
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::move(__int64 a1, _QWORD *a2, _QWORD *a3);
__int64 __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<unsigned int>::get_size();
void *cvflann::anyimpl::typed_base_any_policy<unsigned int>::type();
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<unsigned int>::print(__int64 a1, _QWORD *a2);
void __fastcall cvflann::anyimpl::big_any_policy<std::string>::static_delete(__int64 a1, void **a2);
size_t *__fastcall cvflann::anyimpl::big_any_policy<std::string>::copy_from_value(__int64 a1, __int128 *a2, size_t **a3);
size_t *__fastcall cvflann::anyimpl::big_any_policy<std::string>::clone(__int64 a1, __int128 **a2, size_t **a3);
__int64 *__fastcall cvflann::anyimpl::big_any_policy<std::string>::move(__int64 a1, __int64 **a2, __int64 **a3);
__int64 __fastcall cvflann::anyimpl::big_any_policy<std::string>::get_value(__int64 a1, __int64 a2);
__int64 __fastcall cvflann::anyimpl::big_any_policy<std::string>::get_value(__int64 a1, __int64 a2);
__int64 cvflann::anyimpl::typed_base_any_policy<std::string>::get_size();
void **cvflann::anyimpl::typed_base_any_policy<std::string>::type();
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<std::string>::print(__int64 a1, _QWORD *a2, _QWORD *a3);
void __noreturn std::__basic_string_common<true>::__throw_length_error();
void __fastcall __noreturn sub_BD4C(const char *a1);
__int64 __fastcall sub_BD9C(std::logic_error *a1, const char *a2);
__int64 __fastcall sub_BDCC(__int64 a1, __int64 a2, int a3, int a4);
bool __fastcall sub_BECC(int a1, int a2, int a3, int a4, int a5);
bool __fastcall sub_BF34(int a1, int a2, int a3, int a4, int a5);
_QWORD *sub_BFA0();
void __fastcall sub_BFC4(__int64 a1, _QWORD *a2);
void __fastcall sub_BFDC(__int64 a1, unsigned int *a2);
__int64 __fastcall sub_C2E8(__int64 a1, __int64 a2);
void **sub_C304();
void __fastcall __noreturn sub_C314(void *a1);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
__int64 _JNIEnv::CallVoidMethod(__int64 a1, __int64 a2, __int64 a3, ...);
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3);
__int64 __fastcall sub_C74C(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int c);
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result);
_QWORD *__fastcall std::ostream::flush(_QWORD *a1);
__int64 _JNIEnv::NewObject(__int64 a1, __int64 a2, __int64 a3, ...);
// std::__shared_weak_count *__usercall std::shared_ptr<rgbd::RGBDCheck>::make_shared<>@<X0>(_QWORD *a1@<X8>);
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDCheck>::~__shared_ptr_emplace(__int64 a1);
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDCheck>::~__shared_ptr_emplace(__int64 a1);
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDCheck>::__on_zero_shared(__int64 a1);
void __fastcall rgbd::RGBDCheck::~RGBDCheck(rgbd::RGBDCheck *this); // idb
void __fastcall checktool::~checktool(checktool *this, void *a2);
void __fastcall feasibal_region::feasibal_region::~feasibal_region(feasibal_region::feasibal_region *this, void *a2);
void __fastcall feasibal_region::PreParamInfo::~PreParamInfo(void **this, void *a2);
void __fastcall feasibal_region::ground_process::~ground_process(feasibal_region::ground_process *this); // idb
void __fastcall std::ofstream::~ofstream(_QWORD *a1);
void __fastcall `virtual thunk to'std::ofstream::~ofstream(_QWORD *a1);
void __fastcall std::ofstream::~ofstream(_QWORD *a1);
void __fastcall `virtual thunk to'std::ofstream::~ofstream(_QWORD *a1);
void __fastcall std::filebuf::~filebuf(__int64 a1);
void __fastcall std::filebuf::~filebuf(void *a1);
void __fastcall std::filebuf::imbue(__int64 a1, __int64 a2);
__int64 __fastcall std::filebuf::setbuf(__int64 a1, __int64 a2, signed __int64 a3);
__int64 __fastcall std::filebuf::seekoff(__int64 a1, __int64 a2, unsigned int a3);
__int64 __fastcall std::filebuf::seekpos(__int64 a1, __int64 a2, __off_t a3);
__int64 __fastcall std::filebuf::sync(__int64 a1);
__int64 std::streambuf::showmanyc();
__int64 __fastcall std::streambuf::xsgetn(_QWORD *a1, char *dest, __int64 a3);
__int64 __fastcall std::filebuf::underflow(__int64 a1);
__int64 __fastcall std::streambuf::uflow(_QWORD *a1);
__int64 __fastcall std::filebuf::pbackfail(__int64 a1, unsigned int a2);
__int64 __fastcall std::streambuf::xsputn(_QWORD *a1, unsigned __int8 *src, __int64 a3);
__int64 __fastcall std::filebuf::overflow(__int64 a1, unsigned int a2);
void __fastcall std::streambuf::~streambuf(_QWORD *a1);
void __fastcall std::streambuf::~streambuf(_QWORD *a1);
__int64 std::streambuf::seekoff();
__int64 std::streambuf::seekpos();
__int64 std::streambuf::sync();
__int64 std::streambuf::underflow();
__int64 std::streambuf::pbackfail();
__int64 std::streambuf::overflow();
void __noreturn sub_E8D4();
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1, float a2);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n);
__int64 __fastcall rgbd::RGBDCheck::RGBDCheck(rgbd::RGBDCheck *this); // idb
__int64 __fastcall rgbd::RGBDCheck::setCallback(__int64 a1, __int64 a2);
__int64 __fastcall rgbd::RGBDCheck::initCheckTool(rgbd::RGBDCheck *this, unsigned int *a2, int *a3);
cv::Mat *__fastcall cv::Mat::operator=(cv::Mat *this, cv::Mat *a2);
bool __fastcall rgbd::RGBDCheck::runCheckTool(rgbd::RGBDCheck *this, const int *a2, int *a3, int *a4);
void __fastcall sub_129F4(void **a1, void *a2);
bool __fastcall rgbd::RGBDCheck::runCheckToolSaveImg(rgbd::RGBDCheck *this, const int *a2, int *a3, int *a4);
// void __usercall rgbd::RGBDCheck::getColorDepthImage(const cv::Mat *a1@<X1>, int a2@<W2>, int a3@<W3>, __int64 a4@<X8>);
_QWORD *__fastcall sub_13A5C(_QWORD *result, __int64 a2);
cv::Mat *__fastcall cv::Mat_<double>::operator=(cv::Mat *this, cv::Mat *a2);
cv::Mat *__fastcall cv::Mat_<double>::operator=(cv::Mat *this, cv::Mat *a2);
void __fastcall std::vector<cv::Mat>::__append(__int64 *a1, unsigned __int64 a2, cv::Mat *a3);
__int64 *__fastcall std::vector<cv::Mat>::__swap_out_circular_buffer(__int64 *result, _QWORD *a2);
void __fastcall std::__split_buffer<cv::Mat>::~__split_buffer(__int64 a1, void *a2);
void __noreturn std::__vector_base_common<true>::__throw_length_error();
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n);
void __noreturn std::__basic_string_common<true>::__throw_out_of_range();
void __fastcall __noreturn sub_14964(const char *a1);
__int64 __fastcall sub_149B4(std::logic_error *a1, const char *a2);
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n);
void __fastcall std::vector<int>::__push_back_slow_path<int const&>(__int64 a1, _DWORD *a2);
// void __fastcall std::out_of_range::~out_of_range(std::out_of_range *__hidden this); idb
// void __fastcall std::bad_cast::~bad_cast(std::bad_cast *__hidden this); idb
// void __fastcall std::length_error::~length_error(std::length_error *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

_UNKNOWN unk_14C60; // weak
__int128 xmmword_154B0 = 0x340000000000000041LL; // weak
__int64 (__fastcall *off_285E8)() = &nullsub_3; // weak
void *`typeinfo for'`anonymous namespace'::setCallBack(void)::$_0 = &cv::error; // weak
__int64 (__fastcall *off_28678[3])() =
{
  &std::__shared_ptr_emplace<rgbd::RGBDCheck>::~__shared_ptr_emplace,
  &std::__shared_ptr_emplace<rgbd::RGBDCheck>::~__shared_ptr_emplace,
  &std::__shared_ptr_emplace<rgbd::RGBDCheck>::__on_zero_shared
}; // weak
__int64 (__fastcall *off_286D0[2])() = { &std::ofstream::~ofstream, &std::ofstream::~ofstream }; // weak
__int64 (__fastcall *off_286F8[2])() =
{
  &`virtual thunk to'std::ofstream::~ofstream,
  &`virtual thunk to'std::ofstream::~ofstream
}; // weak
__int64 (__fastcall *off_28770[3])() = { &std::filebuf::~filebuf, &std::filebuf::~filebuf, &std::filebuf::imbue }; // weak
__int64 (__fastcall *off_28818[8])() =
{
  &std::streambuf::~streambuf,
  &std::streambuf::~streambuf,
  &std::streambuf::imbue,
  &std::streambuf::setbuf,
  &std::streambuf::seekoff,
  &std::streambuf::seekpos,
  &std::streambuf::sync,
  &std::streambuf::showmanyc
}; // weak
void *`typeinfo for'cvflann::anyimpl::empty_any = &cv::error; // weak
void *`typeinfo for'cvflann::flann_algorithm_t = &std::ctype<char>::id; // weak
void *`typeinfo for'cvflann::flann_centers_init_t = &std::ctype<char>::id; // weak
void *`typeinfo for'std::string = &std::locale::~locale; // weak
void *off_29000 = &off_29000; // weak
char *off_29050[2] = { "setRGBDCheckTool", "(II)Z" }; // weak
void *rgbd::TAG = (void *)0x14D39LL; // weak
_UNKNOWN rgbd::colormap_; // weak
int dword_29CA0; // weak
__int16 word_29CA8; // weak
_UNKNOWN unk_29CAA; // weak
_UNKNOWN unk_29CB2; // weak
__int64 qword_29CB8; // weak
int dword_29CC0; // weak
__int16 word_29CC8; // weak
_UNKNOWN unk_29CCA; // weak
_UNKNOWN unk_29CD2; // weak
__int64 qword_29CD8; // weak
int dword_29CE0; // weak
__int16 word_29CE8; // weak
_UNKNOWN unk_29CEA; // weak
_UNKNOWN unk_29CF2; // weak
__int64 qword_29CF8; // weak
int dword_29D00; // weak
__int16 word_29D08; // weak
_UNKNOWN unk_29D0A; // weak
_UNKNOWN unk_29D12; // weak
__int64 qword_29D18; // weak
int dword_29D20; // weak
__int16 word_29D28; // weak
_UNKNOWN unk_29D2A; // weak
_UNKNOWN unk_29D32; // weak
__int64 qword_29D38; // weak
int dword_29D40; // weak
__int16 word_29D48; // weak
_UNKNOWN unk_29D4A; // weak
_UNKNOWN unk_29D52; // weak
__int64 qword_29D58; // weak
int dword_29D60; // weak
char byte_29D68; // weak
_UNKNOWN unk_29D69; // weak
_UNKNOWN unk_29D71; // weak
__int64 qword_29D78; // weak
int dword_29D80; // weak
char byte_29D88; // weak
_UNKNOWN unk_29D89; // weak
_UNKNOWN unk_29D91; // weak
_UNKNOWN unk_29D95; // weak
_UNKNOWN unk_29D9D; // weak
char byte_29D9F; // weak
int dword_29DA0; // weak
char byte_29DA8; // weak
_BYTE algn_29DA9[7]; // weak
_UNKNOWN unk_29DB9; // weak
_UNKNOWN unk_29DBD; // weak
char byte_29DBF; // weak
__int64 qword_29DC0; // weak
_UNKNOWN unk_29DC8; // weak
__int64 qword_29DD0; // weak
__int64 qword_29DD8; // weak
_UNKNOWN unk_29DE0; // weak
__int64 qword_29DE8; // weak
__int64 qword_29DF0; // weak
_UNKNOWN unk_29E00; // weak
__int64 qword_29E08; // weak
__int64 qword_29E10; // weak
__int64 qword_29E18; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<char const*>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<int>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<float>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<bool>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<unsigned int>::policy; // weak
__int64 `guard variable for'cvflann::anyimpl::SinglePolicy<std::string>::policy; // weak
__int64 qword_29E68; // weak
__int64 qword_29E70; // weak
__int64 qword_29E78; // weak
__int64 qword_29E80; // weak
int dword_29E88; // weak
__int16 word_29E90; // weak
_BYTE algn_29E92[14]; // weak
__int64 qword_29EA0; // weak
int dword_29EA8; // weak
__int16 word_29EB0; // weak
_BYTE algn_29EB2[14]; // weak
__int64 qword_29EC0; // weak
int dword_29EC8; // weak
__int16 word_29ED0; // weak
_BYTE algn_29ED2[14]; // weak
__int64 qword_29EE0; // weak
int dword_29EE8; // weak
__int16 word_29EF0; // weak
_BYTE algn_29EF2[14]; // weak
__int64 qword_29F00; // weak
int dword_29F08; // weak
__int16 word_29F10; // weak
_BYTE algn_29F12[14]; // weak
__int64 qword_29F20; // weak
int dword_29F28; // weak
__int16 word_29F30; // weak
_BYTE algn_29F32[14]; // weak
__int64 qword_29F40; // weak
int dword_29F48; // weak
char byte_29F50; // weak
_BYTE algn_29F51[15]; // weak
__int64 qword_29F60; // weak
int dword_29F68; // weak
char byte_29F70; // weak
_UNKNOWN unk_29F71; // weak
_UNKNOWN unk_29F79; // weak
_UNKNOWN unk_29F7D; // weak
_UNKNOWN unk_29F85; // weak
char byte_29F87; // weak
int dword_29F88; // weak
char byte_29F90; // weak
_BYTE algn_29F91[7]; // weak
_UNKNOWN unk_29FA1; // weak
_UNKNOWN unk_29FA5; // weak
char byte_29FA7; // weak
__int64 qword_29FA8; // weak
_UNKNOWN unk_29FB0; // weak
__int64 qword_29FB8; // weak
__int64 qword_29FC0; // weak
_UNKNOWN unk_29FC8; // weak
__int64 qword_29FD0; // weak
__int64 qword_29FD8; // weak
_UNKNOWN unk_29FE8; // weak
__int64 qword_29FF0; // weak
__int64 qword_29FF8; // weak
_UNKNOWN unk_2A000; // weak
int rgbd::RGBDCheck::index; // weak
int rgbd::RGBDCheck::cricul; // weak
// extern _UNKNOWN `typeinfo for'std::bad_cast; weak
// extern _UNKNOWN `typeinfo for'std::out_of_range; weak
// extern _UNKNOWN `vtable for'std::out_of_range; weak
// extern _UNKNOWN std::codecvt<char,char,mbstate_t>::id; weak
// extern _UNKNOWN `typeinfo for'std::length_error; weak
// extern _UNKNOWN `typeinfo for'char const*; weak
// extern _UNKNOWN `typeinfo for'float; weak
// extern _UNKNOWN `typeinfo for'unsigned int; weak
// extern _UNKNOWN `typeinfo for'bool; weak
// extern _UNKNOWN `vtable for'std::length_error; weak
// extern _UNKNOWN `typeinfo for'int; weak
// extern _UNKNOWN std::num_put<char,std::ostreambuf_iterator<char>>::id; weak
// extern _UNKNOWN std::ctype<char>::id; weak


//----- (000000000000A3D0) ----------------------------------------------------
void sub_A3D0()
{
  JUMPOUT(0LL);
}
// A3E0: control flows out of bounds to 0

//----- (000000000000A410) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3)
{
  return _ZNSt6__ndk124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(a1, a2, a3);
}

//----- (000000000000A4B0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::filebuf::sync(__int64 a1)
{
  return _ZNSt6__ndk113basic_filebufIcNS_11char_traitsIcEEE4syncEv(a1);
}

//----- (000000000000A4F0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm(a1, src, n);
}

//----- (000000000000A500) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__basic_string_common<true>::__throw_length_error()
{
  _ZNKSt6__ndk121__basic_string_commonILb1EE20__throw_length_errorEv();
}

//----- (000000000000A530) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<int>::__push_back_slow_path<int const&>(__int64 a1, _DWORD *a2)
{
  _ZNSt6__ndk16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIRKiEEvOT_(a1, a2);
}

//----- (000000000000A550) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm(a1, a2, src, n);
}

//----- (000000000000A570) ----------------------------------------------------
// attributes: thunk
bool __fastcall rgbd::RGBDCheck::runCheckToolSaveImg(rgbd::RGBDCheck *this, const int *a2, int *a3, int *a4)
{
  return _ZN4rgbd9RGBDCheck19runCheckToolSaveImgERKiS2_S2_i(this, a2, a3, a4);
}

//----- (000000000000A5A0) ----------------------------------------------------
// attributes: thunk
void __fastcall rgbd::RGBDCheck::~RGBDCheck(rgbd::RGBDCheck *this)
{
  _ZN4rgbd9RGBDCheckD2Ev(this);
}

//----- (000000000000A5B0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall rgbd::RGBDCheck::initCheckTool(rgbd::RGBDCheck *this, unsigned int *a2, int *a3)
{
  return _ZN4rgbd9RGBDCheck13initCheckToolERKiS2_(this, a2, a3);
}

//----- (000000000000A5C0) ----------------------------------------------------
// attributes: thunk
cv::Mat *__fastcall cv::Mat_<double>::operator=(cv::Mat *this, cv::Mat *a2)
{
  return _ZN2cv4Mat_IdEaSERKNS_3MatE(this, a2);
}

//----- (000000000000A600) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::flush(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(a1);
}

//----- (000000000000A690) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(a1, src, n);
}

//----- (000000000000A6A0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall rgbd::RGBDCheck::RGBDCheck(rgbd::RGBDCheck *this)
{
  return _ZN4rgbd9RGBDCheckC2Ev(this);
}

//----- (000000000000A6B0) ----------------------------------------------------
// attributes: thunk
bool __fastcall rgbd::RGBDCheck::runCheckTool(rgbd::RGBDCheck *this, const int *a2, int *a3, int *a4)
{
  return _ZN4rgbd9RGBDCheck12runCheckToolERKiS2_S2_i(this, a2, a3, a4);
}

//----- (000000000000A720) ----------------------------------------------------
// attributes: thunk
void __fastcall std::filebuf::~filebuf(__int64 a1)
{
  _ZNSt6__ndk113basic_filebufIcNS_11char_traitsIcEEED2Ev(a1);
}

//----- (000000000000A730) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::vector<cv::Mat>::__swap_out_circular_buffer(__int64 *result, _QWORD *a2)
{
  return _ZNSt6__ndk16vectorIN2cv3MatENS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE(
           result,
           a2);
}

//----- (000000000000A740) ----------------------------------------------------
// attributes: thunk
void __fastcall std::streambuf::~streambuf(_QWORD *a1)
{
  _ZNSt6__ndk115basic_streambufIcNS_11char_traitsIcEEED2Ev(a1);
}

//----- (000000000000A750) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall rgbd::RGBDCheck::setCallback(__int64 a1, __int64 a2)
{
  return _ZN4rgbd9RGBDCheck11setCallbackERKNSt6__ndk18functionIFviiiiEEE(a1, a2);
}

//----- (000000000000A770) ----------------------------------------------------
// attributes: thunk
cv::Mat *__fastcall cv::Mat::operator=(cv::Mat *this, cv::Mat *a2)
{
  return _ZN2cv3MataSEOS0_(this, a2);
}

//----- (000000000000A780) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(result);
}

//----- (000000000000A790) ----------------------------------------------------
// attributes: thunk
void __fastcall checktool::~checktool(checktool *this, void *a2)
{
  _ZN9checktoolD2Ev(this, a2);
}

//----- (000000000000A7A0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1, float a2)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEf(a1, a2);
}

//----- (000000000000A7C0) ----------------------------------------------------
// attributes: thunk
std::__shared_weak_count *__usercall std::shared_ptr<rgbd::RGBDCheck>::make_shared<>@<X0>(_QWORD *a1@<X8>)
{
  return _ZNSt6__ndk110shared_ptrIN4rgbd9RGBDCheckEE11make_sharedIJEEES3_DpOT_(a1);
}

//----- (000000000000A7D0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEj(a1);
}

//----- (000000000000A830) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEb(a1);
}

//----- (000000000000A850) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall _JNIEnv::NewObject(__int64 a1, __int64 a2, __int64 a3)
{
  return _ZN7_JNIEnv9NewObjectEP7_jclassP10_jmethodIDz(a1, a2, a3);
}

//----- (000000000000A860) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<cv::Mat>::__append(__int64 *a1, unsigned __int64 a2, cv::Mat *a3)
{
  _ZNSt6__ndk16vectorIN2cv3MatENS_9allocatorIS2_EEE8__appendEmRKS2_(a1, a2, a3);
}

//----- (000000000000A8D0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall _JNIEnv::CallVoidMethod(__int64 a1, __int64 a2, __int64 a3)
{
  return _ZN7_JNIEnv14CallVoidMethodEP8_jobjectP10_jmethodIDz(a1, a2, a3);
}

//----- (000000000000A8F0) ----------------------------------------------------
// attributes: thunk
void __fastcall feasibal_region::PreParamInfo::~PreParamInfo(void **this, void *a2)
{
  _ZN15feasibal_region12PreParamInfoD2Ev(this, a2);
}

//----- (000000000000A910) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__basic_string_common<true>::__throw_out_of_range()
{
  _ZNKSt6__ndk121__basic_string_commonILb1EE20__throw_out_of_rangeEv();
}

//----- (000000000000A930) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEi(a1);
}

//----- (000000000000A960) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__split_buffer<cv::Mat>::~__split_buffer(__int64 a1, void *a2)
{
  _ZNSt6__ndk114__split_bufferIN2cv3MatERNS_9allocatorIS2_EEED2Ev(a1, a2);
}

//----- (000000000000A980) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__vector_base_common<true>::__throw_length_error()
{
  _ZNKSt6__ndk120__vector_base_commonILb1EE20__throw_length_errorEv();
}

//----- (000000000000A9C0) ----------------------------------------------------
// attributes: thunk
void __fastcall feasibal_region::feasibal_region::~feasibal_region(feasibal_region::feasibal_region *this, void *a2)
{
  _ZN15feasibal_region15feasibal_regionD2Ev(this, a2);
}

//----- (000000000000A9E0) ----------------------------------------------------
// attributes: thunk
void __fastcall feasibal_region::ground_process::~ground_process(feasibal_region::ground_process *this)
{
  _ZN15feasibal_region14ground_processD2Ev(this);
}

//----- (000000000000AA40) ----------------------------------------------------
// attributes: thunk
cv::Mat *__fastcall cv::Mat_<double>::operator=(cv::Mat *this, cv::Mat *a2)
{
  return _ZN2cv4Mat_IdEaSEONS_3MatE(this, a2);
}

//----- (000000000000AAB0) ----------------------------------------------------
void start()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy = 1LL;
}
// 29E20: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy;

//----- (000000000000AACC) ----------------------------------------------------
void sub_AACC()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<char const*>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<char const*>::policy = 1LL;
}
// 29E28: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<char const*>::policy;

//----- (000000000000AAE8) ----------------------------------------------------
void sub_AAE8()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<int>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<int>::policy = 1LL;
}
// 29E30: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<int>::policy;

//----- (000000000000AB04) ----------------------------------------------------
void sub_AB04()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<float>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<float>::policy = 1LL;
}
// 29E38: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<float>::policy;

//----- (000000000000AB20) ----------------------------------------------------
void sub_AB20()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<bool>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<bool>::policy = 1LL;
}
// 29E40: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<bool>::policy;

//----- (000000000000AB3C) ----------------------------------------------------
void sub_AB3C()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy = 1LL;
}
// 29E48: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy;

//----- (000000000000AB58) ----------------------------------------------------
void sub_AB58()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy = 1LL;
}
// 29E50: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy;

//----- (000000000000AB74) ----------------------------------------------------
void sub_AB74()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<unsigned int>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<unsigned int>::policy = 1LL;
}
// 29E58: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<unsigned int>::policy;

//----- (000000000000AB90) ----------------------------------------------------
void sub_AB90()
{
  if ( (`guard variable for'cvflann::anyimpl::SinglePolicy<std::string>::policy & 1) == 0 )
    `guard variable for'cvflann::anyimpl::SinglePolicy<std::string>::policy = 1LL;
}
// 29E60: using guessed type __int64 `guard variable for'cvflann::anyimpl::SinglePolicy<std::string>::policy;

//----- (000000000000ABAC) ----------------------------------------------------
__int64 sub_ABAC()
{
  dword_29CA0 = 100;
  word_29CA8 = 17410;
  unk_29CB2 = 0LL;
  unk_29CAA = 0LL;
  qword_29CB8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29CA0, &off_29000);
  dword_29CC0 = 50;
  word_29CC8 = 22018;
  unk_29CD2 = 0LL;
  unk_29CCA = 0LL;
  qword_29CD8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29CC0, &off_29000);
  dword_29CE0 = 300;
  word_29CE8 = 18690;
  unk_29CF2 = 0LL;
  unk_29CEA = 0LL;
  qword_29CF8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29CE0, &off_29000);
  dword_29D00 = 500;
  word_29D08 = 22274;
  unk_29D12 = 0LL;
  unk_29D0A = 0LL;
  qword_29D18 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29D00, &off_29000);
  dword_29D20 = 800;
  word_29D28 = 17666;
  unk_29D32 = 0LL;
  unk_29D2A = 0LL;
  qword_29D38 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29D20, &off_29000);
  dword_29D40 = 1000;
  word_29D48 = 17922;
  unk_29D52 = 0LL;
  unk_29D4A = 0LL;
  qword_29D58 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29D40, &off_29000);
  dword_29D60 = 2000;
  byte_29D68 = 16;
  unk_29D69 = 0x54434152544E4F43LL;
  qword_29D78 = 0LL;
  unk_29D71 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29D60, &off_29000);
  dword_29D80 = 2001;
  byte_29D88 = 24;
  unk_29D91 = 1279348295;
  byte_29D9F = 0;
  unk_29D9D = 0;
  unk_29D89 = *(_QWORD *)"FATAL_SIGNAL";
  unk_29D95 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29D80, &off_29000);
  dword_29DA0 = 2002;
  byte_29DA8 = 30;
  byte_29DBF = 0;
  unk_29DBD = 0;
  strcpy(algn_29DA9, "FATAL_EXCEPTION");
  unk_29DB9 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29DA0, &off_29000);
  unk_29DC8 = 0LL;
  qword_29DD0 = 0LL;
  qword_29DC0 = 16LL;
  *(__int64 *)((char *)&qword_29DC0 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_29DC0, &off_29000);
  unk_29DE0 = 0x3366252000LL;
  qword_29DE8 = 0LL;
  qword_29DD8 = 24LL;
  *(__int64 *)((char *)&qword_29DD8 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_29DD8, &off_29000);
  unk_29E00 = 0x2F67696600LL;
  qword_29DF0 = 40LL;
  *(_OWORD *)((char *)&qword_29DF0 + 1) = *(_OWORD *)"/sdcard/pudu/config/";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_29DF0, &off_29000);
  return __cxa_atexit(
           (void (__fastcall *)(void *))std::shared_ptr<rgbd::RGBDCheck>::~shared_ptr,
           &qword_29E08,
           &off_29000);
}
// 29000: using guessed type void *off_29000;
// 29CA0: using guessed type int dword_29CA0;
// 29CA8: using guessed type __int16 word_29CA8;
// 29CB8: using guessed type __int64 qword_29CB8;
// 29CC0: using guessed type int dword_29CC0;
// 29CC8: using guessed type __int16 word_29CC8;
// 29CD8: using guessed type __int64 qword_29CD8;
// 29CE0: using guessed type int dword_29CE0;
// 29CE8: using guessed type __int16 word_29CE8;
// 29CF8: using guessed type __int64 qword_29CF8;
// 29D00: using guessed type int dword_29D00;
// 29D08: using guessed type __int16 word_29D08;
// 29D18: using guessed type __int64 qword_29D18;
// 29D20: using guessed type int dword_29D20;
// 29D28: using guessed type __int16 word_29D28;
// 29D38: using guessed type __int64 qword_29D38;
// 29D40: using guessed type int dword_29D40;
// 29D48: using guessed type __int16 word_29D48;
// 29D58: using guessed type __int64 qword_29D58;
// 29D60: using guessed type int dword_29D60;
// 29D68: using guessed type char byte_29D68;
// 29D78: using guessed type __int64 qword_29D78;
// 29D80: using guessed type int dword_29D80;
// 29D88: using guessed type char byte_29D88;
// 29D9F: using guessed type char byte_29D9F;
// 29DA0: using guessed type int dword_29DA0;
// 29DA8: using guessed type char byte_29DA8;
// 29DA9: using guessed type _BYTE algn_29DA9[7];
// 29DB0: using guessed type __int64 qword_29DB0;
// 29DB8: using guessed type char byte_29DB8;
// 29DBF: using guessed type char byte_29DBF;
// 29DC0: using guessed type __int64 qword_29DC0;
// 29DD0: using guessed type __int64 qword_29DD0;
// 29DD8: using guessed type __int64 qword_29DD8;
// 29DE8: using guessed type __int64 qword_29DE8;
// 29DF0: using guessed type __int64 qword_29DF0;
// 29E08: using guessed type __int64 qword_29E08;

//----- (000000000000AEAC) ----------------------------------------------------
__int64 sub_AEAC()
{
  dword_29E88 = 100;
  word_29E90 = 17410;
  *(_QWORD *)&algn_29E92[8] = 0LL;
  *(_QWORD *)algn_29E92 = 0LL;
  qword_29EA0 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29E88, &off_29000);
  dword_29EA8 = 50;
  word_29EB0 = 22018;
  *(_QWORD *)&algn_29EB2[8] = 0LL;
  *(_QWORD *)algn_29EB2 = 0LL;
  qword_29EC0 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29EA8, &off_29000);
  dword_29EC8 = 300;
  word_29ED0 = 18690;
  *(_QWORD *)&algn_29ED2[8] = 0LL;
  *(_QWORD *)algn_29ED2 = 0LL;
  qword_29EE0 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29EC8, &off_29000);
  dword_29EE8 = 500;
  word_29EF0 = 22274;
  *(_QWORD *)&algn_29EF2[8] = 0LL;
  *(_QWORD *)algn_29EF2 = 0LL;
  qword_29F00 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29EE8, &off_29000);
  dword_29F08 = 800;
  word_29F10 = 17666;
  *(_QWORD *)&algn_29F12[8] = 0LL;
  *(_QWORD *)algn_29F12 = 0LL;
  qword_29F20 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29F08, &off_29000);
  dword_29F28 = 1000;
  word_29F30 = 17922;
  *(_QWORD *)&algn_29F32[8] = 0LL;
  *(_QWORD *)algn_29F32 = 0LL;
  qword_29F40 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29F28, &off_29000);
  dword_29F48 = 2000;
  byte_29F50 = 16;
  *(_QWORD *)algn_29F51 = 0x54434152544E4F43LL;
  qword_29F60 = 0LL;
  *(_QWORD *)&algn_29F51[8] = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29F48, &off_29000);
  dword_29F68 = 2001;
  byte_29F70 = 24;
  unk_29F79 = 1279348295;
  byte_29F87 = 0;
  unk_29F85 = 0;
  unk_29F71 = *(_QWORD *)"FATAL_SIGNAL";
  unk_29F7D = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29F68, &off_29000);
  dword_29F88 = 2002;
  byte_29F90 = 30;
  byte_29FA7 = 0;
  unk_29FA5 = 0;
  strcpy(algn_29F91, "FATAL_EXCEPTION");
  unk_29FA1 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_29F88, &off_29000);
  unk_29FB0 = 0LL;
  qword_29FB8 = 0LL;
  qword_29FA8 = 16LL;
  *(__int64 *)((char *)&qword_29FA8 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_29FA8, &off_29000);
  unk_29FC8 = 0x3366252000LL;
  qword_29FD0 = 0LL;
  qword_29FC0 = 24LL;
  *(__int64 *)((char *)&qword_29FC0 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_29FC0, &off_29000);
  unk_29FE8 = 0x2F67696600LL;
  qword_29FD8 = 40LL;
  *(_OWORD *)((char *)&qword_29FD8 + 1) = *(_OWORD *)"/sdcard/pudu/config/";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_29FD8, &off_29000);
  qword_29FF8 = 0LL;
  unk_2A000 = 0LL;
  qword_29FF0 = 0x676E702E08LL;
  return __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_29FF0, &off_29000);
}
// 29000: using guessed type void *off_29000;
// 29E88: using guessed type int dword_29E88;
// 29E90: using guessed type __int16 word_29E90;
// 29E92: using guessed type _BYTE algn_29E92[14];
// 29EA0: using guessed type __int64 qword_29EA0;
// 29EA8: using guessed type int dword_29EA8;
// 29EB0: using guessed type __int16 word_29EB0;
// 29EB2: using guessed type _BYTE algn_29EB2[14];
// 29EC0: using guessed type __int64 qword_29EC0;
// 29EC8: using guessed type int dword_29EC8;
// 29ED0: using guessed type __int16 word_29ED0;
// 29ED2: using guessed type _BYTE algn_29ED2[14];
// 29EE0: using guessed type __int64 qword_29EE0;
// 29EE8: using guessed type int dword_29EE8;
// 29EF0: using guessed type __int16 word_29EF0;
// 29EF2: using guessed type _BYTE algn_29EF2[14];
// 29F00: using guessed type __int64 qword_29F00;
// 29F08: using guessed type int dword_29F08;
// 29F10: using guessed type __int16 word_29F10;
// 29F12: using guessed type _BYTE algn_29F12[14];
// 29F20: using guessed type __int64 qword_29F20;
// 29F28: using guessed type int dword_29F28;
// 29F30: using guessed type __int16 word_29F30;
// 29F32: using guessed type _BYTE algn_29F32[14];
// 29F40: using guessed type __int64 qword_29F40;
// 29F48: using guessed type int dword_29F48;
// 29F50: using guessed type char byte_29F50;
// 29F51: using guessed type _BYTE algn_29F51[15];
// 29F60: using guessed type __int64 qword_29F60;
// 29F68: using guessed type int dword_29F68;
// 29F70: using guessed type char byte_29F70;
// 29F87: using guessed type char byte_29F87;
// 29F88: using guessed type int dword_29F88;
// 29F90: using guessed type char byte_29F90;
// 29F91: using guessed type _BYTE algn_29F91[7];
// 29F98: using guessed type __int64 qword_29F98;
// 29FA0: using guessed type char byte_29FA0;
// 29FA7: using guessed type char byte_29FA7;
// 29FA8: using guessed type __int64 qword_29FA8;
// 29FB8: using guessed type __int64 qword_29FB8;
// 29FC0: using guessed type __int64 qword_29FC0;
// 29FD0: using guessed type __int64 qword_29FD0;
// 29FD8: using guessed type __int64 qword_29FD8;
// 29FF0: using guessed type __int64 qword_29FF0;
// 29FF8: using guessed type __int64 qword_29FF8;

//----- (000000000000B1C8) ----------------------------------------------------
__int64 sub_B1C8()
{
  return __cxa_finalize(&off_29000);
}
// 29000: using guessed type void *off_29000;

//----- (000000000000B1DC) ----------------------------------------------------
__int64 (*__fastcall sub_B1DC(__int64 (*result)(void)))(void)
{
  if ( result )
    return (__int64 (*)(void))result();
  return result;
}

//----- (000000000000B1E8) ----------------------------------------------------
__int64 __fastcall sub_B1E8(void *a1)
{
  return __cxa_atexit((void (__fastcall *)(void *))sub_B1DC, a1, &off_29000);
}
// 29000: using guessed type void *off_29000;

//----- (000000000000B204) ----------------------------------------------------
__int64 __fastcall sub_B204(__int64 a1, __int64 a2, __int64 a3)
{
  return __register_atfork(a1, a2, a3, &off_29000);
}
// AA30: using guessed type __int64 __fastcall __register_atfork(_QWORD, _QWORD, _QWORD, _QWORD);
// 29000: using guessed type void *off_29000;

//----- (000000000000B210) ----------------------------------------------------
void __fastcall std::string::~string(__int64 a1)
{
  if ( (*(_BYTE *)a1 & 1) != 0 )
    operator delete(*(void **)(a1 + 16));
}

//----- (000000000000B224) ----------------------------------------------------
void __fastcall LEVELS::~LEVELS(void **this)
{
  if ( ((_BYTE)this[1] & 1) != 0 )
    operator delete(this[3]);
}

//----- (000000000000B238) ----------------------------------------------------
__int64 __fastcall std::shared_ptr<rgbd::RGBDCheck>::~shared_ptr(__int64 result)
{
  std::__shared_weak_count *v1; // x19
  unsigned __int64 *v2; // x8
  unsigned __int64 v3; // x9

  v1 = *(std::__shared_weak_count **)(result + 8);
  if ( v1 )
  {
    v2 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v3 = __ldaxr(v2);
    while ( __stlxr(v3 - 1, v2) );
    if ( !v3 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      return std::__shared_weak_count::__release_weak(v1);
    }
  }
  return result;
}

//----- (000000000000B290) ----------------------------------------------------
jint JNI_OnLoad(JavaVM *vm, void *reserved)
{
  jint v3; // w19
  __int64 v5; // x20
  __int64 v6; // x0
  __int64 v7; // x21
  __int64 v8; // x21
  __int64 v9; // x22
  __int64 v10; // x0
  __int64 v11; // x8
  __int64 v12; // x9
  std::__shared_weak_count *v13; // x20
  unsigned __int64 *v14; // x8
  unsigned __int64 v15; // x9
  std::__shared_weak_count *v16; // x20
  unsigned __int64 *v17; // x8
  unsigned __int64 v18; // x9
  __int64 v19; // [xsp+0h] [xbp-50h] BYREF
  __int64 v20; // [xsp+8h] [xbp-48h] BYREF
  unsigned __int64 *v21; // [xsp+10h] [xbp-40h]
  __int64 v22; // [xsp+18h] [xbp-38h]

  v22 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = 65542;
  if ( (*vm)->GetEnv(vm, (void **)&v19, 65542LL) )
    return -1;
  v5 = v19;
  qword_29E18 = (__int64)vm;
  v6 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)v19 + 48LL))(
         v19,
         "com/pudutech/rgbdlib/RGBDSensor");
  if ( v6 )
  {
    v7 = v6;
    if ( ((*(__int64 (__fastcall **)(__int64, __int64, char **, __int64))(*(_QWORD *)v5 + 1720LL))(
            v5,
            v6,
            off_29050,
            3LL) & 0x80000000) != 0 )
    {
      __android_log_print(5, "PDLOG", "registerNativeLog error");
    }
    else
    {
      qword_29E68 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)v5 + 264LL))(
                      v5,
                      v7,
                      "destributeCheckRGBD",
                      "(Ljava/io/FileDescriptor;III)V");
      (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 184LL))(v5, v7);
      v8 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)v5 + 48LL))(v5, "java/io/FileDescriptor");
      v9 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, const char *))(*(_QWORD *)v5 + 264LL))(
             v5,
             v8,
             "<init>",
             "()V");
      qword_29E80 = (*(__int64 (__fastcall **)(__int64, __int64, const char *, void *))(*(_QWORD *)v5 + 752LL))(
                      v5,
                      v8,
                      "descriptor",
                      &unk_14C60);
      v10 = _JNIEnv::NewObject(v5, v8, v9);
      qword_29E78 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 168LL))(v5, v10);
      (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v5 + 184LL))(v5, v8);
      std::shared_ptr<rgbd::RGBDCheck>::make_shared<>(&v20);
      v11 = v20;
      v12 = (__int64)v21;
      v13 = (std::__shared_weak_count *)qword_29E10;
      v20 = 0LL;
      v21 = 0LL;
      qword_29E08 = v11;
      qword_29E10 = v12;
      if ( v13 )
      {
        v14 = (unsigned __int64 *)((char *)v13 + 8);
        do
          v15 = __ldaxr(v14);
        while ( __stlxr(v15 - 1, v14) );
        if ( !v15 )
        {
          (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v13 + 16LL))(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (std::__shared_weak_count *)v21;
      if ( v21 )
      {
        v17 = v21 + 1;
        do
          v18 = __ldaxr(v17);
        while ( __stlxr(v18 - 1, v17) );
        if ( !v18 )
        {
          (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v16 + 16LL))(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  return v3;
}
// 29050: using guessed type char *off_29050[2];
// 29E08: using guessed type __int64 qword_29E08;
// 29E10: using guessed type __int64 qword_29E10;
// 29E18: using guessed type __int64 qword_29E18;
// 29E68: using guessed type __int64 qword_29E68;
// 29E78: using guessed type __int64 qword_29E78;
// 29E80: using guessed type __int64 qword_29E80;

//----- (000000000000B4FC) ----------------------------------------------------
void JNI_OnUnload(JavaVM *vm, void *reserved)
{
  __int64 v2; // x19
  __int64 v3; // x0
  __int64 v4; // x20
  __int64 v5[2]; // [xsp+0h] [xbp-30h] BYREF

  v5[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( !(*vm)->GetEnv(vm, (void **)v5, 65542LL) )
  {
    v2 = v5[0];
    v3 = (*(__int64 (__fastcall **)(__int64, const char *))(*(_QWORD *)v5[0] + 48LL))(
           v5[0],
           "com/pudutech/rgbdlib/RGBDSensor");
    if ( v3 )
    {
      v4 = v3;
      if ( ((*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 1728LL))(v2, v3) & 0x80000000) == 0 )
      {
        (*(void (__fastcall **)(__int64, __int64))(*(_QWORD *)v2 + 184LL))(v2, v4);
        if ( qword_29E78 )
          (*(void (__fastcall **)(__int64))(*(_QWORD *)v2 + 176LL))(v2);
      }
    }
  }
}
// 29E78: using guessed type __int64 qword_29E78;

//----- (000000000000B5D4) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::static_delete(__int64 a1, void **a2)
{
  if ( *a2 )
    operator delete(*a2);
  *a2 = 0LL;
}

//----- (000000000000B600) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::copy_from_value(
        __int64 a1,
        __int64 a2,
        _QWORD *a3)
{
  __int64 result; // x0

  result = operator new(1uLL);
  *a3 = result;
  return result;
}

//----- (000000000000B628) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::clone(
        __int64 a1,
        __int64 a2,
        _QWORD *a3)
{
  __int64 result; // x0

  result = operator new(1uLL);
  *a3 = result;
  return result;
}

//----- (000000000000B654) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (000000000000B65C) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (000000000000B664) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::get_size()
{
  return 1LL;
}

//----- (000000000000B66C) ----------------------------------------------------
void **cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::type()
{
  return &`typeinfo for'cvflann::anyimpl::empty_any;
}
// 28888: using guessed type void *`typeinfo for'cvflann::anyimpl::empty_any;

//----- (000000000000B678) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::print(int a1, _QWORD *a2)
{
  return std::__put_character_sequence<char,std::char_traits<char>>(a2, (__int64)"[empty_any]", 11LL);
}

//----- (000000000000B698) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::copy_from_value(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B6A4) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B6B0) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<char const*>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B6BC) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<char const*>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000B6C4) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<char const*>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000B6CC) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<char const*>::get_size()
{
  return 8LL;
}

//----- (000000000000B6D4) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<char const*>::type()
{
  return &`typeinfo for'char const*;
}

//----- (000000000000B6E0) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<char const*>::print(__int64 a1, _QWORD *a2, const char **a3)
{
  const char *v3; // x19
  __int64 v5; // x2

  v3 = *a3;
  v5 = strlen(*a3);
  return std::__put_character_sequence<char,std::char_traits<char>>(a2, (__int64)v3, v5);
}

//----- (000000000000B71C) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<int>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B728) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<int>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B734) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<int>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B740) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<int>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000B748) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<int>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000B750) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<int>::get_size()
{
  return 4LL;
}

//----- (000000000000B758) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<int>::type()
{
  return &`typeinfo for'int;
}

//----- (000000000000B764) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<int>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (000000000000B77C) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<float>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B788) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<float>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B794) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<float>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B7A0) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<float>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000B7A8) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<float>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000B7B0) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<float>::get_size()
{
  return 4LL;
}

//----- (000000000000B7B8) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<float>::type()
{
  return &`typeinfo for'float;
}

//----- (000000000000B7C4) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<float>::print(__int64 a1, _QWORD *a2, float *a3)
{
  return std::ostream::operator<<(a2, *a3);
}

//----- (000000000000B7D8) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<bool>::copy_from_value(__int64 a1, _BYTE *a2, _BYTE *a3)
{
  *a3 = *a2;
}

//----- (000000000000B7E4) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<bool>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B7F0) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<bool>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000B7FC) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<bool>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000B804) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<bool>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000B80C) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<bool>::get_size()
{
  return 1LL;
}

//----- (000000000000B814) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<bool>::type()
{
  return &`typeinfo for'bool;
}

//----- (000000000000B820) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<bool>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (000000000000B834) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::static_delete(__int64 a1, void **a2)
{
  if ( *a2 )
    operator delete(*a2);
  *a2 = 0LL;
}

//----- (000000000000B860) ----------------------------------------------------
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::copy_from_value(
        __int64 a1,
        _DWORD *a2,
        _QWORD *a3)
{
  _DWORD *result; // x0

  result = (_DWORD *)operator new(4uLL);
  *result = *a2;
  *a3 = result;
  return result;
}

//----- (000000000000B894) ----------------------------------------------------
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::clone(
        __int64 a1,
        _DWORD **a2,
        _QWORD *a3)
{
  _DWORD *result; // x0

  result = (_DWORD *)operator new(4uLL);
  *result = **a2;
  *a3 = result;
  return result;
}

//----- (000000000000B8CC) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::move(
        __int64 a1,
        _DWORD **a2,
        _DWORD **a3)
{
  **a3 = **a2;
}

//----- (000000000000B8E0) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (000000000000B8E8) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (000000000000B8F0) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::get_size()
{
  return 4LL;
}

//----- (000000000000B8F8) ----------------------------------------------------
void **cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::type()
{
  return &`typeinfo for'cvflann::flann_algorithm_t;
}
// 28898: using guessed type void *`typeinfo for'cvflann::flann_algorithm_t;

//----- (000000000000B904) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (000000000000B91C) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::static_delete(__int64 a1, void **a2)
{
  if ( *a2 )
    operator delete(*a2);
  *a2 = 0LL;
}

//----- (000000000000B948) ----------------------------------------------------
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::copy_from_value(
        __int64 a1,
        _DWORD *a2,
        _QWORD *a3)
{
  _DWORD *result; // x0

  result = (_DWORD *)operator new(4uLL);
  *result = *a2;
  *a3 = result;
  return result;
}

//----- (000000000000B97C) ----------------------------------------------------
_DWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::clone(
        __int64 a1,
        _DWORD **a2,
        _QWORD *a3)
{
  _DWORD *result; // x0

  result = (_DWORD *)operator new(4uLL);
  *result = **a2;
  *a3 = result;
  return result;
}

//----- (000000000000B9B4) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::move(
        __int64 a1,
        _DWORD **a2,
        _DWORD **a3)
{
  **a3 = **a2;
}

//----- (000000000000B9C8) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (000000000000B9D0) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (000000000000B9D8) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::get_size()
{
  return 4LL;
}

//----- (000000000000B9E0) ----------------------------------------------------
void **cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::type()
{
  return &`typeinfo for'cvflann::flann_centers_init_t;
}
// 288A8: using guessed type void *`typeinfo for'cvflann::flann_centers_init_t;

//----- (000000000000B9EC) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (000000000000BA08) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::copy_from_value(__int64 a1, _DWORD *a2, _DWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000BA14) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::clone(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000BA20) ----------------------------------------------------
void __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::move(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  *a3 = *a2;
}

//----- (000000000000BA2C) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000BA34) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::small_any_policy<unsigned int>::get_value(__int64 a1, __int64 a2)
{
  return a2;
}

//----- (000000000000BA3C) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<unsigned int>::get_size()
{
  return 4LL;
}

//----- (000000000000BA44) ----------------------------------------------------
void *cvflann::anyimpl::typed_base_any_policy<unsigned int>::type()
{
  return &`typeinfo for'unsigned int;
}

//----- (000000000000BA50) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::small_any_policy<unsigned int>::print(__int64 a1, _QWORD *a2)
{
  return std::ostream::operator<<(a2);
}

//----- (000000000000BA64) ----------------------------------------------------
void __fastcall cvflann::anyimpl::big_any_policy<std::string>::static_delete(__int64 a1, void **a2)
{
  void **v2; // x20

  v2 = (void **)*a2;
  if ( *a2 )
  {
    if ( (*(_BYTE *)v2 & 1) != 0 )
      operator delete(v2[2]);
    operator delete(v2);
  }
  *a2 = 0LL;
}

//----- (000000000000BAA4) ----------------------------------------------------
size_t *__fastcall cvflann::anyimpl::big_any_policy<std::string>::copy_from_value(
        __int64 a1,
        __int128 *a2,
        size_t **a3)
{
  size_t *result; // x0
  size_t *v6; // x19
  __int128 v7; // q0
  size_t v8; // x21
  const void *v9; // x22
  void *v10; // x23

  result = (size_t *)operator new(0x18uLL);
  result[1] = 0LL;
  result[2] = 0LL;
  *result = 0LL;
  v6 = result;
  if ( (*(_BYTE *)a2 & 1) != 0 )
  {
    v8 = *((_QWORD *)a2 + 1);
    if ( v8 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v9 = (const void *)*((_QWORD *)a2 + 2);
    if ( v8 >= 0x17 )
    {
      v10 = (void *)operator new((v8 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v6[1] = v8;
      v6[2] = (size_t)v10;
      *v6 = (v8 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      *(_BYTE *)result = 2 * v8;
      v10 = (char *)result + 1;
      if ( !v8 )
        goto LABEL_9;
    }
    result = (size_t *)memcpy(v10, v9, v8);
LABEL_9:
    *((_BYTE *)v10 + v8) = 0;
    goto LABEL_10;
  }
  v7 = *a2;
  result[2] = *((_QWORD *)a2 + 2);
  *(_OWORD *)result = v7;
LABEL_10:
  *a3 = v6;
  return result;
}

//----- (000000000000BB84) ----------------------------------------------------
size_t *__fastcall cvflann::anyimpl::big_any_policy<std::string>::clone(__int64 a1, __int128 **a2, size_t **a3)
{
  size_t *result; // x0
  __int128 *v6; // x8
  size_t *v7; // x19
  __int128 v8; // q0
  size_t v9; // x21
  const void *v10; // x22
  void *v11; // x23

  result = (size_t *)operator new(0x18uLL);
  v6 = *a2;
  result[1] = 0LL;
  result[2] = 0LL;
  *result = 0LL;
  v7 = result;
  if ( (*(_BYTE *)v6 & 1) != 0 )
  {
    v9 = *((_QWORD *)v6 + 1);
    if ( v9 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v10 = (const void *)*((_QWORD *)v6 + 2);
    if ( v9 >= 0x17 )
    {
      v11 = (void *)operator new((v9 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v7[1] = v9;
      v7[2] = (size_t)v11;
      *v7 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      *(_BYTE *)result = 2 * v9;
      v11 = (char *)result + 1;
      if ( !v9 )
        goto LABEL_9;
    }
    result = (size_t *)memcpy(v11, v10, v9);
LABEL_9:
    *((_BYTE *)v11 + v9) = 0;
    goto LABEL_10;
  }
  v8 = *v6;
  result[2] = *((_QWORD *)v6 + 2);
  *(_OWORD *)result = v8;
LABEL_10:
  *a3 = v7;
  return result;
}

//----- (000000000000BC68) ----------------------------------------------------
__int64 *__fastcall cvflann::anyimpl::big_any_policy<std::string>::move(__int64 a1, __int64 **a2, __int64 **a3)
{
  __int64 *result; // x0
  __int64 *v6; // x8
  unsigned __int64 v7; // x9
  void *v8; // x1
  size_t v9; // x2

  result = *a3;
  if ( (*(_BYTE *)*a3 & 1) != 0 )
  {
    operator delete((void *)result[2]);
    result = *a3;
  }
  v6 = *a2;
  if ( result != *a2 )
  {
    v7 = *(unsigned __int8 *)v6;
    if ( (v7 & 1) != 0 )
      v8 = (void *)v6[2];
    else
      v8 = (char *)v6 + 1;
    if ( (v7 & 1) != 0 )
      v9 = v6[1];
    else
      v9 = v7 >> 1;
    return std::string::assign(result, v8, v9);
  }
  return result;
}

//----- (000000000000BCC8) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<std::string>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (000000000000BCD0) ----------------------------------------------------
__int64 __fastcall cvflann::anyimpl::big_any_policy<std::string>::get_value(__int64 a1, __int64 a2)
{
  return *(_QWORD *)a2;
}

//----- (000000000000BCD8) ----------------------------------------------------
__int64 cvflann::anyimpl::typed_base_any_policy<std::string>::get_size()
{
  return 24LL;
}

//----- (000000000000BCE0) ----------------------------------------------------
void **cvflann::anyimpl::typed_base_any_policy<std::string>::type()
{
  return &`typeinfo for'std::string;
}
// 288C8: using guessed type void *`typeinfo for'std::string;

//----- (000000000000BCEC) ----------------------------------------------------
_QWORD *__fastcall cvflann::anyimpl::big_any_policy<std::string>::print(__int64 a1, _QWORD *a2, _QWORD *a3)
{
  _BYTE *v3; // x8
  const char *v5; // x20
  __int64 v6; // x2

  v3 = (_BYTE *)*a3;
  if ( (*(_BYTE *)*a3 & 1) != 0 )
    v5 = (const char *)*((_QWORD *)v3 + 2);
  else
    v5 = v3 + 1;
  v6 = strlen(v5);
  return std::__put_character_sequence<char,std::char_traits<char>>(a2, (__int64)v5, v6);
}

//----- (000000000000BD38) ----------------------------------------------------
void __noreturn std::__basic_string_common<true>::__throw_length_error()
{
  sub_BD4C("basic_string");
}

//----- (000000000000BD4C) ----------------------------------------------------
void __fastcall __noreturn sub_BD4C(const char *a1)
{
  std::logic_error *exception; // x19

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_BD9C(exception, a1);
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::length_error,
    (void (__fastcall *)(void *))&std::length_error::~length_error);
}

//----- (000000000000BD9C) ----------------------------------------------------
__int64 __fastcall sub_BD9C(std::logic_error *a1, const char *a2)
{
  __int64 result; // x0

  result = std::logic_error::logic_error(a1, a2);
  *(_QWORD *)a1 = (char *)&`vtable for'std::length_error + 16;
  return result;
}

//----- (000000000000BDCC) ----------------------------------------------------
__int64 __fastcall sub_BDCC(__int64 a1, __int64 a2, int a3, int a4)
{
  char v4; // w19
  void (*v5)(void); // x8
  int v7; // [xsp+8h] [xbp-68h] BYREF
  int v8; // [xsp+Ch] [xbp-64h] BYREF
  __int64 v9[4]; // [xsp+10h] [xbp-60h] BYREF
  __int64 *v10; // [xsp+30h] [xbp-40h]
  __int64 v11; // [xsp+48h] [xbp-28h]

  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v7 = a4;
  v8 = a3;
  qword_29E70 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 168LL))(a1);
  v4 = rgbd::RGBDCheck::initCheckTool((rgbd::RGBDCheck *)qword_29E08, (unsigned int *)&v8, &v7);
  v9[0] = (__int64)&off_285E8;
  v10 = v9;
  rgbd::RGBDCheck::setCallback(qword_29E08, (__int64)v9);
  if ( v9 == v10 )
  {
    v5 = *(void (**)(void))(*v10 + 32);
    goto LABEL_5;
  }
  if ( v10 )
  {
    v5 = *(void (**)(void))(*v10 + 40);
LABEL_5:
    v5();
  }
  return v4 & 1;
}
// 285E8: using guessed type __int64 (__fastcall *off_285E8)();
// 29E08: using guessed type __int64 qword_29E08;
// 29E70: using guessed type __int64 qword_29E70;

//----- (000000000000BECC) ----------------------------------------------------
bool __fastcall sub_BECC(int a1, int a2, int a3, int a4, int a5)
{
  int v6; // [xsp+Ch] [xbp-24h] BYREF
  int v7; // [xsp+10h] [xbp-20h] BYREF
  int v8; // [xsp+14h] [xbp-1Ch] BYREF
  __int64 v9; // [xsp+18h] [xbp-18h]

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v7 = a4;
  v8 = a3;
  v6 = a5;
  return rgbd::RGBDCheck::runCheckTool((rgbd::RGBDCheck *)qword_29E08, &v8, &v7, &v6);
}
// 29E08: using guessed type __int64 qword_29E08;

//----- (000000000000BF34) ----------------------------------------------------
bool __fastcall sub_BF34(int a1, int a2, int a3, int a4, int a5)
{
  int v6; // [xsp+Ch] [xbp-24h] BYREF
  int v7; // [xsp+10h] [xbp-20h] BYREF
  int v8; // [xsp+14h] [xbp-1Ch] BYREF
  __int64 v9; // [xsp+18h] [xbp-18h]

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v7 = a4;
  v8 = a3;
  v6 = a5;
  return rgbd::RGBDCheck::runCheckToolSaveImg((rgbd::RGBDCheck *)qword_29E08, &v8, &v7, &v6);
}
// 29E08: using guessed type __int64 qword_29E08;

//----- (000000000000BFA0) ----------------------------------------------------
_QWORD *sub_BFA0()
{
  _QWORD *result; // x0

  result = (_QWORD *)operator new(0x10uLL);
  *result = &off_285E8;
  return result;
}
// 285E8: using guessed type __int64 (__fastcall *off_285E8)();

//----- (000000000000BFC4) ----------------------------------------------------
void __fastcall sub_BFC4(__int64 a1, _QWORD *a2)
{
  *a2 = &off_285E8;
}
// 285E8: using guessed type __int64 (__fastcall *off_285E8)();

//----- (000000000000BFDC) ----------------------------------------------------
void __fastcall sub_BFDC(__int64 a1, unsigned int *a2)
{
  unsigned int v2; // w23
  int v3; // w0
  int v4; // w26
  const char *v5; // x21
  size_t v6; // x0
  size_t v7; // x20
  char *v8; // x22
  pthread_t v9; // x0
  unsigned __int64 v10; // x23
  char v11; // w20
  _QWORD *v12; // x0
  char v13[16]; // [xsp+0h] [xbp-1E0h] BYREF
  void *v14; // [xsp+10h] [xbp-1D0h]
  int v15; // [xsp+18h] [xbp-1C8h] BYREF
  unsigned __int64 v16; // [xsp+20h] [xbp-1C0h] BYREF
  size_t v17; // [xsp+28h] [xbp-1B8h]
  void *v18; // [xsp+30h] [xbp-1B0h]
  __int64 v19; // [xsp+38h] [xbp-1A8h] BYREF
  char v20[8]; // [xsp+40h] [xbp-1A0h] BYREF
  _QWORD v21[41]; // [xsp+48h] [xbp-198h] BYREF

  v21[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *a2;
  v3 = (*(__int64 (__fastcall **)(__int64, __int64 *, __int64))(*(_QWORD *)qword_29E18 + 48LL))(
         qword_29E18,
         &v19,
         65542LL);
  if ( v3 == -2 )
  {
    v4 = 1;
    if ( (*(unsigned int (__fastcall **)(__int64, __int64 *, _QWORD))(*(_QWORD *)qword_29E18 + 32LL))(
           qword_29E18,
           &v19,
           0LL) )
    {
      goto LABEL_3;
    }
  }
  else
  {
    v4 = 0;
    if ( v3 )
    {
LABEL_3:
      if ( (word_29D08 & 1) != 0 )
        v5 = (const char *)qword_29D18;
      else
        v5 = (char *)&word_29D08 + 1;
      v15 = dword_29D00;
      v17 = 0LL;
      v18 = 0LL;
      v16 = 0LL;
      v6 = strlen(v5);
      if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v7 = v6;
      if ( v6 >= 0x17 )
      {
        v10 = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v8 = (char *)operator new(v10);
        v17 = v7;
        v18 = v8;
        v16 = v10 | 1;
      }
      else
      {
        v8 = (char *)&v16 + 1;
        LOBYTE(v16) = 2 * v6;
        if ( !v6 )
        {
LABEL_16:
          v8[v7] = 0;
          if ( (g3::logLevel(&v15) & 1) != 0 )
          {
            v14 = 0LL;
            v13[0] = 26;
            strcpy(&v13[1], "RGBDCheckTool");
            v13[15] = 0;
            v11 = g3::logTag(v13);
            if ( (v13[0] & 1) == 0 )
            {
              if ( (v16 & 1) == 0 )
                goto LABEL_19;
LABEL_24:
              operator delete(v18);
              if ( (v11 & 1) == 0 )
                return;
              goto LABEL_25;
            }
            operator delete(v14);
            if ( (v16 & 1) != 0 )
              goto LABEL_24;
          }
          else
          {
            v11 = 0;
            if ( (v16 & 1) != 0 )
              goto LABEL_24;
          }
LABEL_19:
          if ( (v11 & 1) == 0 )
            return;
LABEL_25:
          LogCapture::LogCapture((LogCapture *)v20, "RGBDCheckTool", (const LEVELS *)&dword_29D00, "", 6, 0LL);
          v12 = std::__put_character_sequence<char,std::char_traits<char>>(
                  v21,
                  (__int64)"get jni env failed when get exposure ",
                  37LL);
          std::ostream::operator<<(v12);
          LogCapture::~LogCapture((LogCapture *)v20);
          return;
        }
      }
      memcpy(v8, v5, v7);
      goto LABEL_16;
    }
  }
  (*(void (__fastcall **)(__int64, __int64, __int64, _QWORD))(*(_QWORD *)v19 + 872LL))(
    v19,
    qword_29E78,
    qword_29E80,
    v2);
  _JNIEnv::CallVoidMethod(v19, qword_29E70, qword_29E68);
  if ( v4 )
    (*(void (__fastcall **)(__int64))(*(_QWORD *)qword_29E18 + 40LL))(qword_29E18);
  v9 = pthread_self();
  pthread_setname_np(v9, "rgbd check tool");
}
// A660: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// A950: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// AA20: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 29D00: using guessed type int dword_29D00;
// 29D08: using guessed type __int16 word_29D08;
// 29D18: using guessed type __int64 qword_29D18;
// 29E18: using guessed type __int64 qword_29E18;
// 29E68: using guessed type __int64 qword_29E68;
// 29E70: using guessed type __int64 qword_29E70;
// 29E78: using guessed type __int64 qword_29E78;
// 29E80: using guessed type __int64 qword_29E80;
// BFDC: using guessed type char var_1A0[8];

//----- (000000000000C2E8) ----------------------------------------------------
__int64 __fastcall sub_C2E8(__int64 a1, __int64 a2)
{
  if ( *(char **)(a2 + 8) == "ZN12_GLOBAL__N_111setCallBackEvE3$_0" )
    return a1 + 8;
  else
    return 0LL;
}

//----- (000000000000C304) ----------------------------------------------------
void **sub_C304()
{
  return &`typeinfo for'`anonymous namespace'::setCallBack(void)::$_0;
}
// 28658: using guessed type void *`typeinfo for'`anonymous namespace'::setCallBack(void)::$_0;

//----- (000000000000C314) ----------------------------------------------------
void __fastcall __noreturn sub_C314(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

//----- (000000000000C320) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 32LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// A5E0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// C320: using guessed type char var_60[8];

//----- (000000000000C50C) ----------------------------------------------------
__int64 _JNIEnv::CallVoidMethod(__int64 a1, __int64 a2, __int64 a3, ...)
{
  __int64 (__fastcall *v3)(__int64, __int64, __int64, __va_list_tag *); // x8
  gcc_va_list va1; // [xsp+C0h] [xbp-60h] BYREF
  gcc_va_list va; // [xsp+E8h] [xbp-38h] BYREF

  va_start(va, a3);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v3 = *(__int64 (__fastcall **)(__int64, __int64, __int64, __va_list_tag *))(*(_QWORD *)a1 + 496LL);
  va_copy(va1, va);
  return v3(a1, a2, a3, va1);
}

//----- (000000000000C5A8) ----------------------------------------------------
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3)
{
  _QWORD *v4; // x8
  char *v5; // x9
  _QWORD *v6; // x0
  __int64 v9; // x22
  int v10; // w5
  __int64 v11; // x23
  int v12; // w26
  __int64 v13; // x0
  unsigned __int8 v14; // w24
  __int64 v15; // x2
  char v17[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v18; // [xsp+8h] [xbp-58h]
  _QWORD v19[2]; // [xsp+10h] [xbp-50h] BYREF

  v19[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v17[0] = 0;
  v18 = a1;
  v4 = (_QWORD *)(*a1 - 24LL);
  v5 = (char *)a1 + *v4;
  if ( !*((_DWORD *)v5 + 8) )
  {
    v6 = (_QWORD *)*((_QWORD *)v5 + 17);
    if ( v6 )
    {
      std::ostream::flush(v6);
      v4 = (_QWORD *)(*a1 - 24LL);
    }
    v17[0] = 1;
    v9 = (__int64)a1 + *v4;
    v10 = *(_DWORD *)(v9 + 144);
    v11 = *(_QWORD *)(v9 + 40);
    v12 = *(_DWORD *)(v9 + 8);
    if ( v10 == -1 )
    {
      std::ios_base::getloc(v19, (std::ios_base *)v9);
      v13 = std::locale::use_facet(v19, &std::ctype<char>::id);
      v14 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v13 + 56LL))(v13, 32LL);
      std::locale::~locale((std::locale *)v19);
      v10 = v14;
      *(_DWORD *)(v9 + 144) = v14;
    }
    if ( (v12 & 0xB0) == 32 )
      v15 = a2 + a3;
    else
      v15 = a2;
    if ( !sub_C74C(v11, a2, v15, a2 + a3, v9, v10) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v17);
  return a1;
}
// A5E0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// C5A8: using guessed type char var_60[8];

//----- (000000000000C74C) ----------------------------------------------------
__int64 __fastcall sub_C74C(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int c)
{
  __int64 v6; // x19
  __int64 v7; // x8
  __int64 v8; // x25
  bool v10; // cc
  signed __int64 v11; // x8
  signed __int64 v15; // x23
  char *v16; // x25
  void *v17; // x1
  __int64 v18; // x24
  __int64 v19; // x22
  unsigned __int64 v21; // [xsp+0h] [xbp-70h] BYREF
  __int64 v22; // [xsp+8h] [xbp-68h]
  void *v23; // [xsp+10h] [xbp-60h]
  __int64 v24; // [xsp+18h] [xbp-58h]

  v6 = a1;
  v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( a1 )
  {
    v7 = *(_QWORD *)(a5 + 24);
    v8 = a3 - a2;
    v10 = v7 <= a4 - a2;
    v11 = v7 - (a4 - a2);
    if ( v10 )
      v15 = 0LL;
    else
      v15 = v11;
    if ( v8 >= 1 && (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 96LL))(a1) != v8 )
      return 0LL;
    if ( v15 >= 1 )
    {
      v21 = 0LL;
      v22 = 0LL;
      v23 = 0LL;
      if ( (unsigned __int64)v15 >= 0x17 )
      {
        v16 = (char *)operator new((v15 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        v22 = v15;
        v23 = v16;
        v21 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
      }
      else
      {
        v16 = (char *)&v21 + 1;
        LOBYTE(v21) = 2 * v15;
      }
      memset(v16, c, v15);
      v16[v15] = 0;
      v17 = (v21 & 1) != 0 ? v23 : (char *)&v21 + 1;
      v18 = (*(__int64 (__fastcall **)(__int64, void *, signed __int64))(*(_QWORD *)v6 + 96LL))(v6, v17, v15);
      if ( (v21 & 1) != 0 )
        operator delete(v23);
      if ( v18 != v15 )
        return 0LL;
    }
    v19 = a4 - a3;
    if ( v19 < 1 || (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)v6 + 96LL))(v6, a3, v19) == v19 )
      *(_QWORD *)(a5 + 24) = 0LL;
    else
      return 0LL;
  }
  return v6;
}

//----- (000000000000C900) ----------------------------------------------------
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result)
{
  __int64 v1; // x8
  __int64 v2; // x19
  __int64 v3; // x0
  std::ios_base *v4; // x0

  v1 = *(_QWORD *)(result + 8) + *(_QWORD *)(**(_QWORD **)(result + 8) - 24LL);
  if ( *(_QWORD *)(v1 + 40) )
  {
    if ( !*(_DWORD *)(v1 + 32) && (*(_BYTE *)(v1 + 9) & 0x20) != 0 )
    {
      v2 = result;
      result = std::uncaught_exception();
      if ( (result & 1) == 0 )
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + *(_QWORD *)(**(_QWORD **)(v2 + 8) - 24LL) + 40LL);
        result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v3 + 48LL))(v3);
        if ( (_DWORD)result == -1 )
        {
          v4 = (std::ios_base *)(*(_QWORD *)(v2 + 8) + *(_QWORD *)(**(_QWORD **)(v2 + 8) - 24LL));
          return std::ios_base::clear(v4, *((_DWORD *)v4 + 8) | 1u);
        }
      }
    }
  }
  return result;
}

//----- (000000000000C9A0) ----------------------------------------------------
_QWORD *__fastcall std::ostream::flush(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  char v6[8]; // [xsp+8h] [xbp-38h] BYREF
  _QWORD *v7; // [xsp+10h] [xbp-30h]
  __int64 v8; // [xsp+18h] [xbp-28h]

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = (_QWORD *)(*a1 - 24LL);
  if ( *(_QWORD *)((char *)a1 + *v2 + 40) )
  {
    v6[0] = 0;
    v7 = a1;
    v3 = (char *)a1 + *v2;
    if ( !*((_DWORD *)v3 + 8) )
    {
      v4 = (_QWORD *)*((_QWORD *)v3 + 17);
      if ( v4 )
      {
        std::ostream::flush(v4);
        v2 = (_QWORD *)(*a1 - 24LL);
      }
      v6[0] = 1;
      if ( (*(unsigned int (__fastcall **)(_QWORD))(**(_QWORD **)((char *)a1 + *v2 + 40) + 48LL))(*(_QWORD *)((char *)a1 + *v2 + 40)) == -1 )
        std::ios_base::clear(
          (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
          *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 1);
    }
    std::ostream::sentry::~sentry((__int64)v6);
  }
  return a1;
}
// C9A0: using guessed type char var_38[8];

//----- (000000000000CAC0) ----------------------------------------------------
__int64 _JNIEnv::NewObject(__int64 a1, __int64 a2, __int64 a3, ...)
{
  __int64 (__fastcall *v3)(__int64, __int64, __int64, __va_list_tag *); // x8
  gcc_va_list va1; // [xsp+C0h] [xbp-60h] BYREF
  gcc_va_list va; // [xsp+E8h] [xbp-38h] BYREF

  va_start(va, a3);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v3 = *(__int64 (__fastcall **)(__int64, __int64, __int64, __va_list_tag *))(*(_QWORD *)a1 + 232LL);
  va_copy(va1, va);
  return v3(a1, a2, a3, va1);
}

//----- (000000000000CB5C) ----------------------------------------------------
std::__shared_weak_count *__usercall std::shared_ptr<rgbd::RGBDCheck>::make_shared<>@<X0>(_QWORD *a1@<X8>)
{
  std::__shared_weak_count *v2; // x19
  unsigned __int64 *v3; // x22
  unsigned __int64 *v4; // x23
  std::__shared_weak_count *result; // x0
  unsigned __int64 v6; // x8
  unsigned __int64 v7; // x8
  unsigned __int64 v8; // x8

  v2 = (std::__shared_weak_count *)operator new(0x420uLL);
  *((_QWORD *)v2 + 1) = 0LL;
  v3 = (unsigned __int64 *)((char *)v2 + 8);
  *((_QWORD *)v2 + 2) = 0LL;
  v4 = (unsigned __int64 *)((char *)v2 + 16);
  *(_QWORD *)v2 = off_28678;
  rgbd::RGBDCheck::RGBDCheck((std::__shared_weak_count *)((char *)v2 + 32));
  result = (std::__shared_weak_count *)*((_QWORD *)v2 + 5);
  *a1 = (char *)v2 + 32;
  a1[1] = v2;
  if ( !result || *((_QWORD *)result + 1) == -1LL )
  {
    do
      v6 = __ldxr(v3);
    while ( __stxr(v6 + 1, v3) );
    do
      v7 = __ldxr(v4);
    while ( __stxr(v7 + 1, v4) );
    *((_QWORD *)v2 + 4) = (char *)v2 + 32;
    *((_QWORD *)v2 + 5) = v2;
    if ( result )
      result = (std::__shared_weak_count *)std::__shared_weak_count::__release_weak(result);
    do
      v8 = __ldaxr(v3);
    while ( __stlxr(v8 - 1, v3) );
    if ( !v8 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v2 + 16LL))(v2);
      return (std::__shared_weak_count *)std::__shared_weak_count::__release_weak(v2);
    }
  }
  return result;
}
// 28678: using guessed type __int64 (__fastcall *[3])();

//----- (000000000000CC5C) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDCheck>::~__shared_ptr_emplace(__int64 a1)
{
  *(_QWORD *)a1 = off_28678;
  rgbd::RGBDCheck::~RGBDCheck((rgbd::RGBDCheck *)(a1 + 32));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);
}
// 28678: using guessed type __int64 (__fastcall *off_28678[3])();

//----- (000000000000CC90) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDCheck>::~__shared_ptr_emplace(__int64 a1)
{
  *(_QWORD *)a1 = off_28678;
  rgbd::RGBDCheck::~RGBDCheck((rgbd::RGBDCheck *)(a1 + 32));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);
  operator delete((void *)a1);
}
// 28678: using guessed type __int64 (__fastcall *off_28678[3])();

//----- (000000000000CCCC) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<rgbd::RGBDCheck>::__on_zero_shared(__int64 a1)
{
  rgbd::RGBDCheck::~RGBDCheck((rgbd::RGBDCheck *)(a1 + 32));
}

//----- (000000000000CCD8) ----------------------------------------------------
void __fastcall rgbd::RGBDCheck::~RGBDCheck(rgbd::RGBDCheck *this)
{
  rgbd::RGBDCheck *v2; // x0
  void (*v3)(void); // x8
  std::__shared_weak_count *v4; // x20
  unsigned __int64 *v5; // x8
  unsigned __int64 v6; // x9
  void *v7; // x1
  std::__shared_weak_count *v8; // x0

  v2 = (rgbd::RGBDCheck *)*((_QWORD *)this + 124);
  if ( (rgbd::RGBDCheck *)((char *)this + 960) == v2 )
  {
    v3 = *(void (**)(void))(*(_QWORD *)v2 + 32LL);
    goto LABEL_5;
  }
  if ( v2 )
  {
    v3 = *(void (**)(void))(*(_QWORD *)v2 + 40LL);
LABEL_5:
    v3();
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 116);
  if ( v4 )
  {
    v5 = (unsigned __int64 *)((char *)v4 + 8);
    do
      v6 = __ldaxr(v5);
    while ( __stlxr(v6 - 1, v5) );
    if ( !v6 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::mutex::~mutex((rgbd::RGBDCheck *)((char *)this + 880));
  checktool::~checktool((rgbd::RGBDCheck *)((char *)this + 16), v7);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if ( v8 )
    std::__shared_weak_count::__release_weak(v8);
}
// CD58: variable 'v7' is possibly undefined

//----- (000000000000CD7C) ----------------------------------------------------
void __fastcall checktool::~checktool(checktool *this, void *a2)
{
  __int64 v2; // x8
  cv::Mat *v4; // x0
  unsigned int *v5; // x8
  unsigned int v6; // w9
  unsigned int v7; // w9
  int v8; // w8
  __int64 v9; // x8
  __int64 v10; // x9
  cv *v11; // x0
  __int64 v12; // x8
  unsigned int *v13; // x8
  unsigned int v14; // w9
  unsigned int v15; // w9
  int v16; // w8
  __int64 v17; // x8
  __int64 v18; // x9
  cv *v19; // x0

  v2 = *((_QWORD *)this + 99);
  if ( v2 )
  {
    v4 = (checktool *)((char *)this + 736);
    v5 = (unsigned int *)(v2 + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while ( __stlxr(v7, v5) );
    if ( !v7 )
      cv::Mat::deallocate(v4);
  }
  v8 = *((_DWORD *)this + 185);
  *((_QWORD *)this + 99) = 0LL;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  if ( v8 >= 1 )
  {
    v9 = *((_QWORD *)this + 100);
    v10 = 0LL;
    do
      *(_DWORD *)(v9 + 4 * v10++) = 0;
    while ( v10 < *((int *)this + 185) );
  }
  v11 = (cv *)*((_QWORD *)this + 101);
  if ( v11 != (checktool *)((char *)this + 816) )
    cv::fastFree(v11, a2);
  v12 = *((_QWORD *)this + 87);
  if ( v12 )
  {
    v13 = (unsigned int *)(v12 + 20);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while ( __stlxr(v15, v13) );
    if ( !v15 )
      cv::Mat::deallocate((checktool *)((char *)this + 640));
  }
  v16 = *((_DWORD *)this + 161);
  *((_QWORD *)this + 87) = 0LL;
  *((_OWORD *)this + 41) = 0u;
  *((_OWORD *)this + 42) = 0u;
  if ( v16 >= 1 )
  {
    v17 = *((_QWORD *)this + 88);
    v18 = 0LL;
    do
      *(_DWORD *)(v17 + 4 * v18++) = 0;
    while ( v18 < *((int *)this + 161) );
  }
  v19 = (cv *)*((_QWORD *)this + 89);
  if ( v19 != (checktool *)((char *)this + 720) )
    cv::fastFree(v19, a2);
  feasibal_region::feasibal_region::~feasibal_region(this, a2);
}
// CDF8: variable 'a2' is possibly undefined

//----- (000000000000CE84) ----------------------------------------------------
void __fastcall feasibal_region::feasibal_region::~feasibal_region(feasibal_region::feasibal_region *this, void *a2)
{
  feasibal_region::ground_process *v2; // x20
  __int64 v4; // x20
  __int64 v5; // x8
  void *v6; // x0
  __int64 v7; // x21
  void *v8; // x0
  __int64 v9; // x20
  __int64 v10; // x8
  void *v11; // x0
  __int64 v12; // x21
  void *v13; // x0

  v2 = (feasibal_region::ground_process *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0LL;
  if ( v2 )
  {
    feasibal_region::ground_process::~ground_process(v2);
    operator delete(v2);
  }
  if ( (*((_BYTE *)this + 600) & 1) != 0 )
    operator delete(*((void **)this + 77));
  v4 = *((_QWORD *)this + 71);
  if ( v4 )
  {
    v5 = *((_QWORD *)this + 72);
    if ( v5 == v4 )
    {
      v8 = (void *)*((_QWORD *)this + 71);
    }
    else
    {
      do
      {
        v6 = *(void **)(v5 - 24);
        v7 = v5 - 32;
        if ( v6 )
        {
          *(_QWORD *)(v5 - 16) = v6;
          operator delete(v6);
        }
        v5 = v7;
      }
      while ( v4 != v7 );
      v8 = (void *)*((_QWORD *)this + 71);
    }
    *((_QWORD *)this + 72) = v4;
    operator delete(v8);
  }
  v9 = *((_QWORD *)this + 68);
  if ( v9 )
  {
    v10 = *((_QWORD *)this + 69);
    if ( v10 == v9 )
    {
      v13 = (void *)*((_QWORD *)this + 68);
    }
    else
    {
      do
      {
        v11 = *(void **)(v10 - 40);
        v12 = v10 - 48;
        if ( v11 )
        {
          *(_QWORD *)(v10 - 32) = v11;
          operator delete(v11);
        }
        v10 = v12;
      }
      while ( v9 != v12 );
      v13 = (void *)*((_QWORD *)this + 68);
    }
    *((_QWORD *)this + 69) = v9;
    operator delete(v13);
  }
  feasibal_region::PreParamInfo::~PreParamInfo((void **)this + 6, a2);
}
// CF64: variable 'a2' is possibly undefined

//----- (000000000000CF68) ----------------------------------------------------
void __fastcall feasibal_region::PreParamInfo::~PreParamInfo(void **this, void *a2)
{
  char *v3; // x8
  unsigned int *v4; // x8
  unsigned int v5; // w9
  unsigned int v6; // w9
  int v7; // w8
  _DWORD *v8; // x8
  __int64 v9; // x9
  cv *v10; // x0
  char *v11; // x8
  unsigned int *v12; // x8
  unsigned int v13; // w9
  unsigned int v14; // w9
  int v15; // w8
  _DWORD *v16; // x8
  __int64 v17; // x9
  cv *v18; // x0

  if ( ((_BYTE)this[58] & 1) != 0 )
    operator delete(this[60]);
  v3 = (char *)this[53];
  if ( v3 )
  {
    v4 = (unsigned int *)(v3 + 20);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while ( __stlxr(v6, v4) );
    if ( !v6 )
      cv::Mat::deallocate((cv::Mat *)(this + 46));
  }
  v7 = *((_DWORD *)this + 93);
  this[53] = 0LL;
  *((_OWORD *)this + 24) = 0u;
  *((_OWORD *)this + 25) = 0u;
  if ( v7 >= 1 )
  {
    v8 = this[54];
    v9 = 0LL;
    do
      v8[v9++] = 0;
    while ( v9 < *((int *)this + 93) );
  }
  v10 = (cv *)this[55];
  if ( v10 != (cv *)(this + 56) )
    cv::fastFree(v10, a2);
  v11 = (char *)this[41];
  if ( v11 )
  {
    v12 = (unsigned int *)(v11 + 20);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while ( __stlxr(v14, v12) );
    if ( !v14 )
      cv::Mat::deallocate((cv::Mat *)(this + 34));
  }
  v15 = *((_DWORD *)this + 69);
  this[41] = 0LL;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  if ( v15 >= 1 )
  {
    v16 = this[42];
    v17 = 0LL;
    do
      v16[v17++] = 0;
    while ( v17 < *((int *)this + 69) );
  }
  v18 = (cv *)this[43];
  if ( v18 != (cv *)(this + 44) )
    cv::fastFree(v18, a2);
}
// CFF4: variable 'a2' is possibly undefined

//----- (000000000000D07C) ----------------------------------------------------
void __fastcall feasibal_region::ground_process::~ground_process(feasibal_region::ground_process *this)
{
  std::ios_base *v2; // x20
  void *v3; // x1
  __int64 v4; // x8
  unsigned int *v5; // x8
  unsigned int v6; // w9
  unsigned int v7; // w9
  int v8; // w8
  __int64 v9; // x8
  __int64 v10; // x9
  cv *v11; // x0
  void *v12; // x0
  void *v13; // x0
  void *v14; // x0
  void *v15; // x0
  void *v16; // x0
  void *v17; // x0
  void *v18; // x0
  __int64 v19; // x8
  unsigned int *v20; // x8
  unsigned int v21; // w9
  unsigned int v22; // w9
  int v23; // w8
  __int64 v24; // x8
  __int64 v25; // x9
  cv *v26; // x0
  __int64 v27; // x8
  unsigned int *v28; // x8
  unsigned int v29; // w9
  unsigned int v30; // w9
  int v31; // w8
  __int64 v32; // x8
  __int64 v33; // x9
  cv *v34; // x0
  __int64 v35; // x8
  unsigned int *v36; // x8
  unsigned int v37; // w9
  unsigned int v38; // w9
  __int64 v39; // x8
  __int64 v40; // x9
  cv *v41; // x0
  __int64 v42; // x8
  unsigned int *v43; // x8
  unsigned int v44; // w9
  unsigned int v45; // w9
  __int64 v46; // x8
  __int64 v47; // x9
  cv *v48; // x0
  __int64 v49; // x8
  unsigned int *v50; // x8
  unsigned int v51; // w9
  unsigned int v52; // w9
  __int64 v53; // x8
  __int64 v54; // x9
  cv *v55; // x0
  void *v56; // x0
  void *v57; // x0
  void *v58; // x0
  __int64 v59; // x8
  unsigned int *v60; // x8
  unsigned int v61; // w9
  unsigned int v62; // w9
  __int64 v63; // x8
  __int64 v64; // x9
  cv *v65; // x0
  __int64 v66; // x8
  unsigned int *v67; // x8
  unsigned int v68; // w9
  unsigned int v69; // w9
  __int64 v70; // x8
  __int64 v71; // x9
  cv *v72; // x0
  __int64 v73; // x8
  unsigned int *v74; // x8
  unsigned int v75; // w9
  unsigned int v76; // w9
  __int64 v77; // x8
  __int64 v78; // x9
  cv *v79; // x0
  __int64 v80; // x8
  unsigned int *v81; // x8
  unsigned int v82; // w9
  unsigned int v83; // w9
  __int64 v84; // x8
  __int64 v85; // x9
  cv *v86; // x0
  __int64 v87; // x8
  unsigned int *v88; // x8
  unsigned int v89; // w9
  unsigned int v90; // w9
  __int64 v91; // x8
  __int64 v92; // x9
  cv *v93; // x0
  __int64 v94; // x8
  unsigned int *v95; // x8
  unsigned int v96; // w9
  unsigned int v97; // w9
  __int64 v98; // x8
  __int64 v99; // x9
  cv *v100; // x0
  __int64 v101; // x8
  unsigned int *v102; // x8
  unsigned int v103; // w9
  unsigned int v104; // w9
  __int64 v105; // x8
  __int64 v106; // x9
  cv *v107; // x0
  __int64 v108; // x8
  unsigned int *v109; // x8
  unsigned int v110; // w9
  unsigned int v111; // w9
  __int64 v112; // x8
  __int64 v113; // x9
  cv *v114; // x0
  __int64 v115; // x8
  unsigned int *v116; // x8
  unsigned int v117; // w9
  unsigned int v118; // w9
  __int64 v119; // x8
  __int64 v120; // x9
  cv *v121; // x0
  __int64 v122; // x8
  unsigned int *v123; // x8
  unsigned int v124; // w9
  unsigned int v125; // w9
  __int64 v126; // x8
  __int64 v127; // x9
  cv *v128; // x0
  __int64 v129; // x8
  unsigned int *v130; // x8
  unsigned int v131; // w9
  unsigned int v132; // w9
  __int64 v133; // x8
  __int64 v134; // x9
  cv *v135; // x0
  void *v136; // x1
  CAPE *v137; // x20

  v2 = (feasibal_region::ground_process *)((char *)this + 2912);
  *((_QWORD *)this + 342) = off_286D0;
  *((_QWORD *)this + 364) = off_286F8;
  std::filebuf::~filebuf((__int64)this + 2744);
  std::ios_base::~ios_base(v2);
  v4 = *((_QWORD *)this + 333);
  if ( v4 )
  {
    v5 = (unsigned int *)(v4 + 20);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while ( __stlxr(v7, v5) );
    if ( !v7 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 2608));
  }
  v8 = *((_DWORD *)this + 653);
  *((_QWORD *)this + 333) = 0LL;
  *((_OWORD *)this + 165) = 0u;
  *((_OWORD *)this + 164) = 0u;
  if ( v8 >= 1 )
  {
    v9 = *((_QWORD *)this + 334);
    v10 = 0LL;
    do
      *(_DWORD *)(v9 + 4 * v10++) = 0;
    while ( v10 < *((int *)this + 653) );
  }
  v11 = (cv *)*((_QWORD *)this + 335);
  if ( v11 != (feasibal_region::ground_process *)((char *)this + 2688) )
    cv::fastFree(v11, v3);
  v12 = (void *)*((_QWORD *)this + 322);
  if ( v12 )
  {
    *((_QWORD *)this + 323) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 317);
  if ( v13 )
  {
    *((_QWORD *)this + 318) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 311);
  if ( v14 )
  {
    *((_QWORD *)this + 312) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 308);
  if ( v15 )
  {
    *((_QWORD *)this + 309) = v15;
    operator delete(v15);
  }
  v16 = (void *)*((_QWORD *)this + 305);
  if ( v16 )
  {
    *((_QWORD *)this + 306) = v16;
    operator delete(v16);
  }
  v17 = (void *)*((_QWORD *)this + 302);
  if ( v17 )
  {
    *((_QWORD *)this + 303) = v17;
    operator delete(v17);
  }
  v18 = (void *)*((_QWORD *)this + 299);
  if ( v18 )
  {
    *((_QWORD *)this + 300) = v18;
    operator delete(v18);
  }
  v19 = *((_QWORD *)this + 293);
  if ( v19 )
  {
    v20 = (unsigned int *)(v19 + 20);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while ( __stlxr(v22, v20) );
    if ( !v22 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 2288));
  }
  v23 = *((_DWORD *)this + 573);
  *((_QWORD *)this + 293) = 0LL;
  *((_OWORD *)this + 145) = 0u;
  *((_OWORD *)this + 144) = 0u;
  if ( v23 >= 1 )
  {
    v24 = *((_QWORD *)this + 294);
    v25 = 0LL;
    do
      *(_DWORD *)(v24 + 4 * v25++) = 0;
    while ( v25 < *((int *)this + 573) );
  }
  v26 = (cv *)*((_QWORD *)this + 295);
  if ( v26 != (feasibal_region::ground_process *)((char *)this + 2368) )
    cv::fastFree(v26, v3);
  v27 = *((_QWORD *)this + 281);
  if ( v27 )
  {
    v28 = (unsigned int *)(v27 + 20);
    do
    {
      v29 = __ldaxr(v28);
      v30 = v29 - 1;
    }
    while ( __stlxr(v30, v28) );
    if ( !v30 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 2192));
  }
  v31 = *((_DWORD *)this + 549);
  *((_QWORD *)this + 281) = 0LL;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  if ( v31 >= 1 )
  {
    v32 = *((_QWORD *)this + 282);
    v33 = 0LL;
    do
      *(_DWORD *)(v32 + 4 * v33++) = 0;
    while ( v33 < *((int *)this + 549) );
  }
  v34 = (cv *)*((_QWORD *)this + 283);
  if ( v34 != (feasibal_region::ground_process *)((char *)this + 2272) )
    cv::fastFree(v34, v3);
  v35 = *((_QWORD *)this + 268);
  if ( v35 )
  {
    v36 = (unsigned int *)(v35 + 20);
    do
    {
      v37 = __ldaxr(v36);
      v38 = v37 - 1;
    }
    while ( __stlxr(v38, v36) );
    if ( !v38 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 2088));
  }
  *((_QWORD *)this + 268) = 0LL;
  *(_OWORD *)((char *)this + 2120) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  if ( *((int *)this + 523) >= 1 )
  {
    v39 = *((_QWORD *)this + 269);
    v40 = 0LL;
    do
      *(_DWORD *)(v39 + 4 * v40++) = 0;
    while ( v40 < *((int *)this + 523) );
  }
  v41 = (cv *)*((_QWORD *)this + 270);
  if ( v41 != (feasibal_region::ground_process *)((char *)this + 2168) )
    cv::fastFree(v41, v3);
  v42 = *((_QWORD *)this + 256);
  if ( v42 )
  {
    v43 = (unsigned int *)(v42 + 20);
    do
    {
      v44 = __ldaxr(v43);
      v45 = v44 - 1;
    }
    while ( __stlxr(v45, v43) );
    if ( !v45 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 1992));
  }
  *((_QWORD *)this + 256) = 0LL;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *(_OWORD *)((char *)this + 2008) = 0u;
  if ( *((int *)this + 499) >= 1 )
  {
    v46 = *((_QWORD *)this + 257);
    v47 = 0LL;
    do
      *(_DWORD *)(v46 + 4 * v47++) = 0;
    while ( v47 < *((int *)this + 499) );
  }
  v48 = (cv *)*((_QWORD *)this + 258);
  if ( v48 != (feasibal_region::ground_process *)((char *)this + 2072) )
    cv::fastFree(v48, v3);
  v49 = *((_QWORD *)this + 244);
  if ( v49 )
  {
    v50 = (unsigned int *)(v49 + 20);
    do
    {
      v51 = __ldaxr(v50);
      v52 = v51 - 1;
    }
    while ( __stlxr(v52, v50) );
    if ( !v52 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 1896));
  }
  *((_QWORD *)this + 244) = 0LL;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1912) = 0u;
  if ( *((int *)this + 475) >= 1 )
  {
    v53 = *((_QWORD *)this + 245);
    v54 = 0LL;
    do
      *(_DWORD *)(v53 + 4 * v54++) = 0;
    while ( v54 < *((int *)this + 475) );
  }
  v55 = (cv *)*((_QWORD *)this + 246);
  if ( v55 != (feasibal_region::ground_process *)((char *)this + 1976) )
    cv::fastFree(v55, v3);
  v56 = (void *)*((_QWORD *)this + 234);
  if ( v56 )
  {
    *((_QWORD *)this + 235) = v56;
    operator delete(v56);
  }
  v57 = (void *)*((_QWORD *)this + 231);
  if ( v57 )
  {
    *((_QWORD *)this + 232) = v57;
    operator delete(v57);
  }
  v58 = (void *)*((_QWORD *)this + 205);
  if ( v58 )
  {
    *((_QWORD *)this + 206) = v58;
    operator delete(v58);
  }
  v59 = *((_QWORD *)this + 200);
  if ( v59 )
  {
    v60 = (unsigned int *)(v59 + 20);
    do
    {
      v61 = __ldaxr(v60);
      v62 = v61 - 1;
    }
    while ( __stlxr(v62, v60) );
    if ( !v62 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 1544));
  }
  *((_QWORD *)this + 200) = 0LL;
  *(_OWORD *)((char *)this + 1576) = 0u;
  *(_OWORD *)((char *)this + 1560) = 0u;
  if ( *((int *)this + 387) >= 1 )
  {
    v63 = *((_QWORD *)this + 201);
    v64 = 0LL;
    do
      *(_DWORD *)(v63 + 4 * v64++) = 0;
    while ( v64 < *((int *)this + 387) );
  }
  v65 = (cv *)*((_QWORD *)this + 202);
  if ( v65 != (feasibal_region::ground_process *)((char *)this + 1624) )
    cv::fastFree(v65, v3);
  v66 = *((_QWORD *)this + 188);
  if ( v66 )
  {
    v67 = (unsigned int *)(v66 + 20);
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while ( __stlxr(v69, v67) );
    if ( !v69 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 1448));
  }
  *((_QWORD *)this + 188) = 0LL;
  *(_OWORD *)((char *)this + 1480) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  if ( *((int *)this + 363) >= 1 )
  {
    v70 = *((_QWORD *)this + 189);
    v71 = 0LL;
    do
      *(_DWORD *)(v70 + 4 * v71++) = 0;
    while ( v71 < *((int *)this + 363) );
  }
  v72 = (cv *)*((_QWORD *)this + 190);
  if ( v72 != (feasibal_region::ground_process *)((char *)this + 1528) )
    cv::fastFree(v72, v3);
  v73 = *((_QWORD *)this + 176);
  if ( v73 )
  {
    v74 = (unsigned int *)(v73 + 20);
    do
    {
      v75 = __ldaxr(v74);
      v76 = v75 - 1;
    }
    while ( __stlxr(v76, v74) );
    if ( !v76 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 1352));
  }
  *((_QWORD *)this + 176) = 0LL;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  if ( *((int *)this + 339) >= 1 )
  {
    v77 = *((_QWORD *)this + 177);
    v78 = 0LL;
    do
      *(_DWORD *)(v77 + 4 * v78++) = 0;
    while ( v78 < *((int *)this + 339) );
  }
  v79 = (cv *)*((_QWORD *)this + 178);
  if ( v79 != (feasibal_region::ground_process *)((char *)this + 1432) )
    cv::fastFree(v79, v3);
  v80 = *((_QWORD *)this + 164);
  if ( v80 )
  {
    v81 = (unsigned int *)(v80 + 20);
    do
    {
      v82 = __ldaxr(v81);
      v83 = v82 - 1;
    }
    while ( __stlxr(v83, v81) );
    if ( !v83 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 1256));
  }
  *((_QWORD *)this + 164) = 0LL;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1272) = 0u;
  if ( *((int *)this + 315) >= 1 )
  {
    v84 = *((_QWORD *)this + 165);
    v85 = 0LL;
    do
      *(_DWORD *)(v84 + 4 * v85++) = 0;
    while ( v85 < *((int *)this + 315) );
  }
  v86 = (cv *)*((_QWORD *)this + 166);
  if ( v86 != (feasibal_region::ground_process *)((char *)this + 1336) )
    cv::fastFree(v86, v3);
  v87 = *((_QWORD *)this + 152);
  if ( v87 )
  {
    v88 = (unsigned int *)(v87 + 20);
    do
    {
      v89 = __ldaxr(v88);
      v90 = v89 - 1;
    }
    while ( __stlxr(v90, v88) );
    if ( !v90 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 1160));
  }
  *((_QWORD *)this + 152) = 0LL;
  *(_OWORD *)((char *)this + 1192) = 0u;
  *(_OWORD *)((char *)this + 1176) = 0u;
  if ( *((int *)this + 291) >= 1 )
  {
    v91 = *((_QWORD *)this + 153);
    v92 = 0LL;
    do
      *(_DWORD *)(v91 + 4 * v92++) = 0;
    while ( v92 < *((int *)this + 291) );
  }
  v93 = (cv *)*((_QWORD *)this + 154);
  if ( v93 != (feasibal_region::ground_process *)((char *)this + 1240) )
    cv::fastFree(v93, v3);
  v94 = *((_QWORD *)this + 140);
  if ( v94 )
  {
    v95 = (unsigned int *)(v94 + 20);
    do
    {
      v96 = __ldaxr(v95);
      v97 = v96 - 1;
    }
    while ( __stlxr(v97, v95) );
    if ( !v97 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 1064));
  }
  *((_QWORD *)this + 140) = 0LL;
  *(_OWORD *)((char *)this + 1096) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  if ( *((int *)this + 267) >= 1 )
  {
    v98 = *((_QWORD *)this + 141);
    v99 = 0LL;
    do
      *(_DWORD *)(v98 + 4 * v99++) = 0;
    while ( v99 < *((int *)this + 267) );
  }
  v100 = (cv *)*((_QWORD *)this + 142);
  if ( v100 != (feasibal_region::ground_process *)((char *)this + 1144) )
    cv::fastFree(v100, v3);
  v101 = *((_QWORD *)this + 128);
  if ( v101 )
  {
    v102 = (unsigned int *)(v101 + 20);
    do
    {
      v103 = __ldaxr(v102);
      v104 = v103 - 1;
    }
    while ( __stlxr(v104, v102) );
    if ( !v104 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 968));
  }
  *((_QWORD *)this + 128) = 0LL;
  *(_OWORD *)((char *)this + 1000) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  if ( *((int *)this + 243) >= 1 )
  {
    v105 = *((_QWORD *)this + 129);
    v106 = 0LL;
    do
      *(_DWORD *)(v105 + 4 * v106++) = 0;
    while ( v106 < *((int *)this + 243) );
  }
  v107 = (cv *)*((_QWORD *)this + 130);
  if ( v107 != (feasibal_region::ground_process *)((char *)this + 1048) )
    cv::fastFree(v107, v3);
  v108 = *((_QWORD *)this + 116);
  if ( v108 )
  {
    v109 = (unsigned int *)(v108 + 20);
    do
    {
      v110 = __ldaxr(v109);
      v111 = v110 - 1;
    }
    while ( __stlxr(v111, v109) );
    if ( !v111 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 872));
  }
  *((_QWORD *)this + 116) = 0LL;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  if ( *((int *)this + 219) >= 1 )
  {
    v112 = *((_QWORD *)this + 117);
    v113 = 0LL;
    do
      *(_DWORD *)(v112 + 4 * v113++) = 0;
    while ( v113 < *((int *)this + 219) );
  }
  v114 = (cv *)*((_QWORD *)this + 118);
  if ( v114 != (feasibal_region::ground_process *)((char *)this + 952) )
    cv::fastFree(v114, v3);
  v115 = *((_QWORD *)this + 104);
  if ( v115 )
  {
    v116 = (unsigned int *)(v115 + 20);
    do
    {
      v117 = __ldaxr(v116);
      v118 = v117 - 1;
    }
    while ( __stlxr(v118, v116) );
    if ( !v118 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 776));
  }
  *((_QWORD *)this + 104) = 0LL;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 792) = 0u;
  if ( *((int *)this + 195) >= 1 )
  {
    v119 = *((_QWORD *)this + 105);
    v120 = 0LL;
    do
      *(_DWORD *)(v119 + 4 * v120++) = 0;
    while ( v120 < *((int *)this + 195) );
  }
  v121 = (cv *)*((_QWORD *)this + 106);
  if ( v121 != (feasibal_region::ground_process *)((char *)this + 856) )
    cv::fastFree(v121, v3);
  v122 = *((_QWORD *)this + 92);
  if ( v122 )
  {
    v123 = (unsigned int *)(v122 + 20);
    do
    {
      v124 = __ldaxr(v123);
      v125 = v124 - 1;
    }
    while ( __stlxr(v125, v123) );
    if ( !v125 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 680));
  }
  *((_QWORD *)this + 92) = 0LL;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  if ( *((int *)this + 171) >= 1 )
  {
    v126 = *((_QWORD *)this + 93);
    v127 = 0LL;
    do
      *(_DWORD *)(v126 + 4 * v127++) = 0;
    while ( v127 < *((int *)this + 171) );
  }
  v128 = (cv *)*((_QWORD *)this + 94);
  if ( v128 != (feasibal_region::ground_process *)((char *)this + 760) )
    cv::fastFree(v128, v3);
  v129 = *((_QWORD *)this + 80);
  if ( v129 )
  {
    v130 = (unsigned int *)(v129 + 20);
    do
    {
      v131 = __ldaxr(v130);
      v132 = v131 - 1;
    }
    while ( __stlxr(v132, v130) );
    if ( !v132 )
      cv::Mat::deallocate((feasibal_region::ground_process *)((char *)this + 584));
  }
  *((_QWORD *)this + 80) = 0LL;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  if ( *((int *)this + 147) >= 1 )
  {
    v133 = *((_QWORD *)this + 81);
    v134 = 0LL;
    do
      *(_DWORD *)(v133 + 4 * v134++) = 0;
    while ( v134 < *((int *)this + 147) );
  }
  v135 = (cv *)*((_QWORD *)this + 82);
  if ( v135 != (feasibal_region::ground_process *)((char *)this + 664) )
    cv::fastFree(v135, v3);
  free(*((void **)this + 70));
  free(*((void **)this + 67));
  v137 = (CAPE *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0LL;
  if ( v137 )
  {
    CAPE::~CAPE(v137);
    operator delete(v137);
  }
  feasibal_region::PreParamInfo::~PreParamInfo((void **)this + 2, v136);
}
// D128: variable 'v3' is possibly undefined
// D9B4: variable 'v136' is possibly undefined
// 286D0: using guessed type __int64 (__fastcall *[2])();
// 286F8: using guessed type __int64 (__fastcall *[2])();

//----- (000000000000D9FC) ----------------------------------------------------
void __fastcall std::ofstream::~ofstream(_QWORD *a1)
{
  *a1 = off_286D0;
  a1[22] = off_286F8;
  std::filebuf::~filebuf((__int64)(a1 + 1));
  std::ios_base::~ios_base((std::ios_base *)(a1 + 22));
}
// 286D0: using guessed type __int64 (__fastcall *off_286D0[2])();
// 286F8: using guessed type __int64 (__fastcall *off_286F8[2])();

//----- (000000000000DA38) ----------------------------------------------------
void __fastcall `virtual thunk to'std::ofstream::~ofstream(_QWORD *a1)
{
  _QWORD *v1; // x19

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL));
  *v1 = off_286D0;
  v1[22] = off_286F8;
  std::filebuf::~filebuf((__int64)(v1 + 1));
  std::ios_base::~ios_base((std::ios_base *)(v1 + 22));
}
// 286D0: using guessed type __int64 (__fastcall *off_286D0[2])();
// 286F8: using guessed type __int64 (__fastcall *off_286F8[2])();

//----- (000000000000DA80) ----------------------------------------------------
void __fastcall std::ofstream::~ofstream(_QWORD *a1)
{
  *a1 = off_286D0;
  a1[22] = off_286F8;
  std::filebuf::~filebuf((__int64)(a1 + 1));
  std::ios_base::~ios_base((std::ios_base *)(a1 + 22));
  operator delete(a1);
}
// 286D0: using guessed type __int64 (__fastcall *off_286D0[2])();
// 286F8: using guessed type __int64 (__fastcall *off_286F8[2])();

//----- (000000000000DAC8) ----------------------------------------------------
void __fastcall `virtual thunk to'std::ofstream::~ofstream(_QWORD *a1)
{
  _QWORD *v1; // x19

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL));
  *v1 = off_286D0;
  v1[22] = off_286F8;
  std::filebuf::~filebuf((__int64)(v1 + 1));
  std::ios_base::~ios_base((std::ios_base *)(v1 + 22));
  operator delete(v1);
}
// 286D0: using guessed type __int64 (__fastcall *off_286D0[2])();
// 286F8: using guessed type __int64 (__fastcall *off_286F8[2])();

//----- (000000000000DB1C) ----------------------------------------------------
void __fastcall std::filebuf::~filebuf(__int64 a1)
{
  FILE *v1; // x20
  void *v3; // x0
  void *v4; // x0

  v1 = *(FILE **)(a1 + 120);
  *(_QWORD *)a1 = off_28770;
  if ( v1 )
  {
    std::filebuf::sync(a1);
    if ( !fclose(v1) )
      *(_QWORD *)(a1 + 120) = 0LL;
    (*(void (__fastcall **)(__int64, _QWORD, _QWORD))(*(_QWORD *)a1 + 24LL))(a1, 0LL, 0LL);
  }
  if ( *(_BYTE *)(a1 + 160) )
  {
    v3 = *(void **)(a1 + 64);
    if ( v3 )
      operator delete[](v3);
  }
  if ( *(_BYTE *)(a1 + 161) )
  {
    v4 = *(void **)(a1 + 104);
    if ( v4 )
      operator delete[](v4);
  }
  *(_QWORD *)a1 = off_28818;
  std::locale::~locale((std::locale *)(a1 + 8));
}
// 28770: using guessed type __int64 (__fastcall *[3])();
// 28818: using guessed type __int64 (__fastcall *off_28818[8])();

//----- (000000000000DBFC) ----------------------------------------------------
void __fastcall std::filebuf::~filebuf(void *a1)
{
  std::filebuf::~filebuf((__int64)a1);
  operator delete(a1);
}

//----- (000000000000DC20) ----------------------------------------------------
void __fastcall std::filebuf::imbue(__int64 a1, __int64 a2)
{
  __int64 v4; // x0
  char v5; // w0
  int v6; // w8
  void *v7; // x0
  char v8; // w8
  __int64 v9; // x9
  __int64 v10; // x10
  unsigned __int64 v11; // x0
  __int64 v12; // x8
  unsigned __int64 v13; // x0

  (*(void (__fastcall **)(__int64))(*(_QWORD *)a1 + 48LL))(a1);
  v4 = std::locale::use_facet(a2, &std::codecvt<char,char,mbstate_t>::id);
  *(_QWORD *)(a1 + 128) = v4;
  LODWORD(a2) = *(unsigned __int8 *)(a1 + 162);
  v5 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v4 + 56LL))(v4);
  *(_BYTE *)(a1 + 162) = v5 & 1;
  if ( (_DWORD)a2 != (v5 & 1) )
  {
    v6 = *(unsigned __int8 *)(a1 + 160);
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    if ( (v5 & 1) != 0 )
    {
      if ( v6 )
      {
        v7 = *(void **)(a1 + 64);
        if ( v7 )
          operator delete[](v7);
      }
      v8 = *(_BYTE *)(a1 + 161);
      v9 = *(_QWORD *)(a1 + 104);
      v10 = *(_QWORD *)(a1 + 112);
      *(_BYTE *)(a1 + 161) = 0;
      *(_QWORD *)(a1 + 112) = 0LL;
      *(_BYTE *)(a1 + 160) = v8;
      *(_QWORD *)(a1 + 96) = v10;
      *(_QWORD *)(a1 + 104) = 0LL;
      *(_QWORD *)(a1 + 64) = v9;
    }
    else if ( v6 || (v12 = *(_QWORD *)(a1 + 64), v12 == a1 + 88) )
    {
      v11 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 112) = v11;
      *(_QWORD *)(a1 + 104) = operator new[](v11);
      *(_BYTE *)(a1 + 161) = 1;
    }
    else
    {
      v13 = *(_QWORD *)(a1 + 96);
      *(_BYTE *)(a1 + 161) = 0;
      *(_QWORD *)(a1 + 104) = v12;
      *(_QWORD *)(a1 + 112) = v13;
      *(_QWORD *)(a1 + 64) = operator new[](v13);
      *(_BYTE *)(a1 + 160) = 1;
    }
  }
}
// A5E0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);

//----- (000000000000DD10) ----------------------------------------------------
__int64 __fastcall std::filebuf::setbuf(__int64 a1, __int64 a2, signed __int64 a3)
{
  int v3; // w8
  void *v7; // x0
  void *v8; // x0
  int v9; // w22
  int v10; // w22
  unsigned __int64 v12; // x0

  v3 = *(unsigned __int8 *)(a1 + 160);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if ( v3 )
  {
    v7 = *(void **)(a1 + 64);
    if ( v7 )
      operator delete[](v7);
  }
  if ( *(_BYTE *)(a1 + 161) )
  {
    v8 = *(void **)(a1 + 104);
    if ( v8 )
      operator delete[](v8);
  }
  *(_QWORD *)(a1 + 96) = a3;
  if ( (unsigned __int64)a3 < 9 )
  {
    v10 = *(unsigned __int8 *)(a1 + 162);
    *(_QWORD *)(a1 + 64) = a1 + 88;
    *(_QWORD *)(a1 + 96) = 8LL;
    *(_BYTE *)(a1 + 160) = 0;
    if ( v10 )
      goto LABEL_12;
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 162);
    if ( a2 && *(_BYTE *)(a1 + 162) )
    {
      *(_QWORD *)(a1 + 64) = a2;
      *(_BYTE *)(a1 + 160) = 0;
LABEL_12:
      *(_BYTE *)(a1 + 161) = 0;
      *(_QWORD *)(a1 + 104) = 0LL;
      *(_QWORD *)(a1 + 112) = 0LL;
      return a1;
    }
    *(_QWORD *)(a1 + 64) = operator new[](a3);
    *(_BYTE *)(a1 + 160) = 1;
    if ( v9 )
      goto LABEL_12;
  }
  if ( a3 <= 8 )
    v12 = 8LL;
  else
    v12 = a3;
  *(_QWORD *)(a1 + 112) = v12;
  if ( a2 )
  {
    *(_QWORD *)(a1 + 104) = a2;
    *(_BYTE *)(a1 + 161) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 104) = operator new[](v12);
    *(_BYTE *)(a1 + 161) = 1;
  }
  return a1;
}
// DDEC: conditional instruction was optimized away because x0.8>=8

//----- (000000000000DE10) ----------------------------------------------------
__int64 __fastcall std::filebuf::seekoff(__int64 a1, __int64 a2, unsigned int a3)
{
  __int64 v4; // x0
  int v7; // w0
  __int64 v8; // x8
  int v9; // w22
  int v10; // w0
  __off_t v11; // x1

  v4 = *(_QWORD *)(a1 + 128);
  if ( !v4 )
    sub_E8D4();
  v7 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v4 + 48LL))(v4);
  v8 = *(_QWORD *)(a1 + 120);
  if ( v8 )
  {
    v9 = v7;
    if ( a2 && v7 < 1 )
      return 0LL;
    v10 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 48LL))(a1);
    v8 = 0LL;
    if ( !v10 && a3 <= 2 )
    {
      if ( v9 <= 0 )
        v11 = 0LL;
      else
        v11 = v9 * a2;
      if ( !fseeko(*(FILE **)(a1 + 120), v11, a3) )
      {
        ftello(*(FILE **)(a1 + 120));
        return *(_QWORD *)(a1 + 136);
      }
      return 0LL;
    }
  }
  return v8;
}

//----- (000000000000DED0) ----------------------------------------------------
__int64 __fastcall std::filebuf::seekpos(__int64 a1, __int64 a2, __off_t a3)
{
  if ( !*(_QWORD *)(a1 + 120)
    || (*(unsigned int (__fastcall **)(__int64))(*(_QWORD *)a1 + 48LL))(a1)
    || fseeko(*(FILE **)(a1 + 120), a3, 0) )
  {
    return 0LL;
  }
  *(_QWORD *)(a1 + 136) = a2;
  return a2;
}

//----- (000000000000DF40) ----------------------------------------------------
__int64 __fastcall std::filebuf::sync(__int64 a1)
{
  __int64 v2; // x0
  int v3; // w8
  int v4; // w21
  __int64 v5; // x20
  unsigned int v6; // w20
  int v7; // w21
  const void *v8; // x0
  __int64 v9; // x22
  int v10; // w0
  __int64 v11; // x8
  __int64 v13[2]; // [xsp+0h] [xbp-40h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( !*(_QWORD *)(a1 + 120) )
    return 0;
  v2 = *(_QWORD *)(a1 + 128);
  if ( !v2 )
    sub_E8D4();
  v3 = *(_DWORD *)(a1 + 156);
  if ( (v3 & 0x10) == 0 )
  {
    if ( (v3 & 8) != 0 )
    {
      v13[0] = *(_QWORD *)(a1 + 144);
      if ( *(_BYTE *)(a1 + 162) )
      {
        v4 = 0;
        v5 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
      }
      else
      {
        v10 = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v2 + 48LL))(v2);
        v5 = *(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72);
        if ( v10 < 1 )
        {
          if ( *(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32) )
          {
            v4 = 0;
          }
          else
          {
            v4 = 1;
            v5 = *(_QWORD *)(a1 + 72)
               + v5
               - (*(int (__fastcall **)(_QWORD, __int64 *, _QWORD))(**(_QWORD **)(a1 + 128) + 64LL))(
                   *(_QWORD *)(a1 + 128),
                   v13,
                   *(_QWORD *)(a1 + 64))
               - *(_QWORD *)(a1 + 64);
          }
        }
        else
        {
          v4 = 0;
          v5 += (*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) * v10;
        }
      }
      if ( fseeko(*(FILE **)(a1 + 120), -v5, 1) )
        return (unsigned int)-1;
      if ( v4 )
        *(_QWORD *)(a1 + 136) = v13[0];
      v11 = *(_QWORD *)(a1 + 64);
      *(_DWORD *)(a1 + 156) = 0;
      *(_QWORD *)(a1 + 24) = 0LL;
      *(_QWORD *)(a1 + 32) = 0LL;
      *(_QWORD *)(a1 + 16) = 0LL;
      *(_QWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 80) = v11;
    }
    return 0;
  }
  if ( *(_QWORD *)(a1 + 48) == *(_QWORD *)(a1 + 40)
    || (v6 = -1, (*(unsigned int (__fastcall **)(__int64, __int64))(*(_QWORD *)a1 + 104LL))(a1, 0xFFFFFFFFLL) != -1) )
  {
    while ( 1 )
    {
      v7 = (*(__int64 (__fastcall **)(_QWORD, __int64, _QWORD, _QWORD, __int64 *))(**(_QWORD **)(a1 + 128) + 40LL))(
             *(_QWORD *)(a1 + 128),
             a1 + 136,
             *(_QWORD *)(a1 + 64),
             *(_QWORD *)(a1 + 64) + *(_QWORD *)(a1 + 96),
             v13);
      v8 = *(const void **)(a1 + 64);
      v9 = v13[0] - (_QWORD)v8;
      if ( fwrite(v8, 1uLL, v13[0] - (_QWORD)v8, *(FILE **)(a1 + 120)) != v9 )
        break;
      if ( v7 != 1 )
      {
        if ( v7 == 2 || fflush(*(FILE **)(a1 + 120)) )
          return (unsigned int)-1;
        return 0;
      }
    }
    return (unsigned int)-1;
  }
  return v6;
}

//----- (000000000000E130) ----------------------------------------------------
__int64 std::streambuf::showmanyc()
{
  return 0LL;
}

//----- (000000000000E138) ----------------------------------------------------
__int64 __fastcall std::streambuf::xsgetn(_QWORD *a1, char *dest, __int64 a3)
{
  __int64 i; // x19
  char *v7; // x1
  unsigned __int64 v8; // x8
  __int64 v9; // x8
  size_t v10; // x23
  int v11; // w0

  if ( a3 < 1 )
    return 0LL;
  for ( i = 0LL; i < a3; i += v10 )
  {
    v7 = (char *)a1[3];
    v8 = a1[4];
    if ( (unsigned __int64)v7 >= v8 )
    {
      v11 = (*(__int64 (__fastcall **)(_QWORD *))(*a1 + 80LL))(a1);
      if ( v11 == -1 )
        return i;
      *dest++ = v11;
      v10 = 1LL;
    }
    else
    {
      v9 = v8 - (_QWORD)v7;
      if ( a3 - i < v9 )
        v9 = a3 - i;
      if ( v9 >= 0x7FFFFFFF )
        v10 = 0x7FFFFFFFLL;
      else
        v10 = v9;
      if ( v10 )
      {
        memcpy(dest, v7, v10);
        v7 = (char *)a1[3];
      }
      dest += v10;
      a1[3] = &v7[(int)v10];
    }
  }
  return i;
}

//----- (000000000000E1FC) ----------------------------------------------------
__int64 __fastcall std::filebuf::underflow(__int64 a1)
{
  int v2; // w8
  __int64 v3; // x9
  bool v4; // zf
  __int64 v5; // x8
  __int64 v6; // x10
  __int64 v7; // x8
  int v8; // w9
  unsigned __int8 *v9; // x8
  __int64 v10; // x20
  __int64 result; // x0
  char **v12; // x24
  unsigned __int8 *v13; // x9
  size_t v14; // x0
  unsigned __int8 *v15; // x8
  __int64 v16; // x9
  _BYTE *v17; // x1
  _BYTE *v18; // x9
  __int64 v19; // x8
  void *v20; // x0
  __int64 v21; // x9
  __int64 v22; // x10
  __int64 v23; // x8
  FILE *v24; // x3
  __int64 v25; // x9
  size_t v26; // x2
  size_t v27; // x0
  size_t v28; // x8
  __int64 v29; // x0
  __int64 v30; // x2
  __int64 v31; // x10
  size_t v32; // x3
  unsigned __int8 *v33; // [xsp+8h] [xbp-48h] BYREF
  char v34; // [xsp+14h] [xbp-3Ch] BYREF
  _BYTE v35[11]; // [xsp+15h] [xbp-3Bh] BYREF

  *(_QWORD *)&v35[3] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( !*(_QWORD *)(a1 + 120) )
    return 0xFFFFFFFFLL;
  if ( (*(_BYTE *)(a1 + 156) & 8) != 0 )
  {
    v9 = *(unsigned __int8 **)(a1 + 24);
    v8 = 0;
    if ( v9 )
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned __int8 *)(a1 + 162);
    v3 = 96LL;
    *(_QWORD *)(a1 + 40) = 0LL;
    *(_QWORD *)(a1 + 48) = 0LL;
    v4 = v2 == 0;
    v5 = 64LL;
    if ( v4 )
      v3 = 112LL;
    *(_QWORD *)(a1 + 56) = 0LL;
    if ( v4 )
      v5 = 104LL;
    v6 = *(_QWORD *)(a1 + v5);
    v7 = *(_QWORD *)(a1 + v3);
    *(_DWORD *)(a1 + 156) = 8;
    v8 = 1;
    v9 = (unsigned __int8 *)(v6 + v7);
    *(_QWORD *)(a1 + 16) = v6;
    *(_QWORD *)(a1 + 24) = v9;
    *(_QWORD *)(a1 + 32) = v9;
    if ( v9 )
    {
LABEL_8:
      if ( v8 )
        goto LABEL_9;
LABEL_14:
      v13 = *(unsigned __int8 **)(a1 + 32);
      if ( (unsigned __int64)((__int64)&v13[-*(_QWORD *)(a1 + 16)] / 2) >= 4 )
        v10 = 4LL;
      else
        v10 = (__int64)&v13[-*(_QWORD *)(a1 + 16)] / 2;
      if ( v9 != v13 )
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  v9 = v35;
  *(_QWORD *)(a1 + 16) = &v34;
  *(_QWORD *)(a1 + 24) = v35;
  *(_QWORD *)(a1 + 32) = v35;
  if ( !v8 )
    goto LABEL_14;
LABEL_9:
  v10 = 0LL;
  if ( v9 != *(unsigned __int8 **)(a1 + 32) )
  {
LABEL_10:
    result = *v9;
    v12 = (char **)(a1 + 16);
    goto LABEL_36;
  }
LABEL_18:
  v12 = (char **)(a1 + 16);
  memmove(*(void **)(a1 + 16), &v9[-v10], v10);
  if ( *(_BYTE *)(a1 + 162) )
  {
    v14 = fread(
            (void *)(*(_QWORD *)(a1 + 16) + v10),
            1uLL,
            *(_QWORD *)(a1 + 32) - v10 - *(_QWORD *)(a1 + 16),
            *(FILE **)(a1 + 120));
    if ( v14 )
    {
      v15 = (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v10);
      v16 = (__int64)&v15[v14];
LABEL_34:
      *(_QWORD *)(a1 + 24) = v15;
      *(_QWORD *)(a1 + 32) = v16;
      result = *v15;
      goto LABEL_36;
    }
  }
  else
  {
    v17 = *(_BYTE **)(a1 + 72);
    v18 = *(_BYTE **)(a1 + 80);
    if ( v18 != v17 )
    {
      memmove(*(void **)(a1 + 64), v17, v18 - v17);
      v17 = *(_BYTE **)(a1 + 72);
      v18 = *(_BYTE **)(a1 + 80);
    }
    v19 = *(_QWORD *)(a1 + 64);
    v20 = (void *)(v19 + v18 - v17);
    *(_QWORD *)(a1 + 72) = v20;
    if ( v19 == a1 + 88 )
      v21 = 8LL;
    else
      v21 = *(_QWORD *)(a1 + 96);
    v22 = *(_QWORD *)(a1 + 136);
    v23 = v19 + v21;
    v25 = *(_QWORD *)(a1 + 112);
    v24 = *(FILE **)(a1 + 120);
    *(_QWORD *)(a1 + 80) = v23;
    *(_QWORD *)(a1 + 144) = v22;
    if ( v23 - (__int64)v20 >= (unsigned __int64)(v25 - v10) )
      v26 = v25 - v10;
    else
      v26 = v23 - (_QWORD)v20;
    v27 = fread(v20, 1uLL, v26, v24);
    if ( v27 )
    {
      v28 = v27;
      v29 = *(_QWORD *)(a1 + 128);
      if ( !v29 )
        sub_E8D4();
      v30 = *(_QWORD *)(a1 + 64);
      v31 = *(_QWORD *)(a1 + 112);
      v32 = *(_QWORD *)(a1 + 72) + v28;
      *(_QWORD *)(a1 + 80) = v32;
      if ( (*(unsigned int (__fastcall **)(__int64, __int64, __int64, size_t, __int64, __int64, __int64, unsigned __int8 **))(*(_QWORD *)v29 + 32LL))(
             v29,
             a1 + 136,
             v30,
             v32,
             a1 + 72,
             *(_QWORD *)(a1 + 16) + v10,
             *(_QWORD *)(a1 + 16) + v31,
             &v33) == 3 )
      {
        v15 = *(unsigned __int8 **)(a1 + 64);
        v16 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 16) = v15;
        goto LABEL_34;
      }
      v16 = (__int64)v33;
      v15 = (unsigned __int8 *)&(*v12)[v10];
      if ( v33 != v15 )
        goto LABEL_34;
    }
  }
  result = 0xFFFFFFFFLL;
LABEL_36:
  if ( *v12 == &v34 )
  {
    *(_QWORD *)(a1 + 16) = 0LL;
    *(_QWORD *)(a1 + 24) = 0LL;
    *(_QWORD *)(a1 + 32) = 0LL;
  }
  return result;
}
// E1FC: using guessed type unsigned __int8 *var_48;

//----- (000000000000E484) ----------------------------------------------------
__int64 __fastcall std::streambuf::uflow(_QWORD *a1)
{
  __int64 result; // x0
  unsigned __int8 *v3; // x8

  result = (*(__int64 (__fastcall **)(_QWORD *))(*a1 + 72LL))(a1);
  if ( (_DWORD)result != -1 )
  {
    v3 = (unsigned __int8 *)a1[3];
    a1[3] = v3 + 1;
    return *v3;
  }
  return result;
}

//----- (000000000000E4C4) ----------------------------------------------------
__int64 __fastcall std::filebuf::pbackfail(__int64 a1, unsigned int a2)
{
  unsigned __int64 v2; // x9
  __int64 result; // x0
  _BYTE *v5; // x9
  int v6; // t1

  if ( !*(_QWORD *)(a1 + 120) )
    return 0xFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 24);
  if ( *(_QWORD *)(a1 + 16) >= v2 )
    return 0xFFFFFFFFLL;
  result = a2;
  if ( a2 == -1 )
  {
    result = 0LL;
    *(_QWORD *)(a1 + 24) = v2 - 1;
  }
  else
  {
    if ( (*(_BYTE *)(a1 + 152) & 0x10) != 0 )
    {
      v5 = (_BYTE *)(v2 - 1);
    }
    else
    {
      v6 = *(unsigned __int8 *)(v2 - 1);
      v5 = (_BYTE *)(v2 - 1);
      if ( v6 != (unsigned __int8)a2 )
        return 0xFFFFFFFFLL;
    }
    *(_QWORD *)(a1 + 24) = v5;
    *v5 = a2;
  }
  return result;
}

//----- (000000000000E524) ----------------------------------------------------
__int64 __fastcall std::streambuf::xsputn(_QWORD *a1, unsigned __int8 *src, __int64 a3)
{
  __int64 v6; // x21
  char *v7; // x0
  unsigned __int64 v8; // x8
  signed __int64 v9; // x8
  size_t v10; // x23

  if ( a3 < 1 )
    return 0LL;
  v6 = 0LL;
  do
  {
    while ( 1 )
    {
      v7 = (char *)a1[6];
      v8 = a1[7];
      if ( (unsigned __int64)v7 < v8 )
        break;
      if ( (*(unsigned int (__fastcall **)(_QWORD *, _QWORD))(*a1 + 104LL))(a1, *src) != -1 )
      {
        ++src;
        if ( ++v6 < a3 )
          continue;
      }
      return v6;
    }
    v9 = v8 - (_QWORD)v7;
    if ( a3 - v6 >= v9 )
      v10 = v9;
    else
      v10 = a3 - v6;
    if ( v10 )
    {
      memcpy(v7, src, v10);
      v7 = (char *)a1[6];
    }
    src += v10;
    v6 += v10;
    a1[6] = &v7[v10];
  }
  while ( v6 < a3 );
  return v6;
}

//----- (000000000000E5E8) ----------------------------------------------------
__int64 __fastcall std::filebuf::overflow(__int64 a1, unsigned int a2)
{
  unsigned __int64 v4; // x8
  char *v5; // x2
  char **v6; // x25
  __int64 v7; // x26
  __int64 *v8; // x27
  char *v9; // x3
  char *v10; // x28
  size_t v11; // x21
  FILE *v12; // x3
  char *v13; // x0
  __int64 v15; // x0
  unsigned int v16; // w0
  char *v17; // x8
  unsigned int v18; // w22
  const void *v19; // x0
  __int64 v20; // x3
  __int64 v21; // x0
  unsigned int v22; // w0
  char *v23; // [xsp+0h] [xbp-70h]
  __int64 v24; // [xsp+8h] [xbp-68h]
  char v25; // [xsp+14h] [xbp-5Ch] BYREF
  _BYTE v26[11]; // [xsp+15h] [xbp-5Bh] BYREF

  *(_QWORD *)&v26[3] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( !*(_QWORD *)(a1 + 120) )
    return 0xFFFFFFFFLL;
  if ( (*(_BYTE *)(a1 + 156) & 0x10) != 0 )
  {
    v6 = (char **)(a1 + 40);
    v5 = *(char **)(a1 + 40);
    v8 = (__int64 *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 96);
    *(_QWORD *)(a1 + 16) = 0LL;
    *(_QWORD *)(a1 + 24) = 0LL;
    *(_QWORD *)(a1 + 32) = 0LL;
    if ( v4 < 9 )
    {
      *(_QWORD *)(a1 + 40) = 0LL;
      v6 = (char **)(a1 + 40);
      v5 = 0LL;
      v7 = 0LL;
      *(_QWORD *)(a1 + 56) = 0LL;
      v8 = (__int64 *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = 0LL;
    }
    else
    {
      if ( *(_BYTE *)(a1 + 162) )
      {
        v5 = *(char **)(a1 + 64);
      }
      else
      {
        v5 = *(char **)(a1 + 104);
        v4 = *(_QWORD *)(a1 + 112);
      }
      v7 = (__int64)&v5[v4 - 1];
      v6 = (char **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v5;
      *(_QWORD *)(a1 + 48) = v5;
      v8 = (__int64 *)(a1 + 56);
      *(_QWORD *)(a1 + 56) = v7;
    }
    *(_DWORD *)(a1 + 156) = 16;
  }
  v9 = *(char **)(a1 + 48);
  v10 = v5;
  if ( a2 != -1 )
  {
    if ( !v9 )
    {
      v9 = &v25;
      *(_QWORD *)(a1 + 40) = &v25;
      *(_QWORD *)(a1 + 48) = &v25;
      *(_QWORD *)(a1 + 56) = v26;
    }
    *v9 = a2;
    v5 = *(char **)(a1 + 40);
    v9 = (char *)(*(_QWORD *)(a1 + 48) + 1LL);
    *(_QWORD *)(a1 + 48) = v9;
  }
  v11 = v9 - v5;
  if ( v9 == v5 )
    goto LABEL_20;
  if ( *(_BYTE *)(a1 + 162) )
  {
    v12 = *(FILE **)(a1 + 120);
    v13 = v5;
  }
  else
  {
    v24 = *(_QWORD *)(a1 + 64);
    v15 = *(_QWORD *)(a1 + 128);
    if ( !v15 )
LABEL_35:
      sub_E8D4();
    v16 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v15 + 24LL))(v15, a1 + 136);
    v17 = *(char **)(a1 + 40);
    if ( v23 == v17 )
      return 0xFFFFFFFFLL;
    v18 = v16;
    while ( v18 != 3 )
    {
      if ( v18 > 1 )
        return 0xFFFFFFFFLL;
      v19 = *(const void **)(a1 + 64);
      if ( fwrite(v19, 1uLL, v24 - (_QWORD)v19, *(FILE **)(a1 + 120)) != v24 - (_QWORD)v19 )
        return 0xFFFFFFFFLL;
      if ( v18 != 1 )
        goto LABEL_19;
      v20 = *(_QWORD *)(a1 + 48);
      *v6 = v23;
      *v8 = v20;
      v21 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 48) = v20;
      if ( !v21 )
        goto LABEL_35;
      v22 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v21 + 24LL))(v21, a1 + 136);
      v17 = *(char **)(a1 + 40);
      v18 = v22;
      if ( v23 == v17 )
        return 0xFFFFFFFFLL;
    }
    v12 = *(FILE **)(a1 + 120);
    v13 = v17;
    v11 = *(_QWORD *)(a1 + 48) - (_QWORD)v17;
  }
  if ( fwrite(v13, 1uLL, v11, v12) != v11 )
    return 0xFFFFFFFFLL;
LABEL_19:
  *(_QWORD *)(a1 + 48) = v10;
  *v6 = v10;
  *v8 = v7;
LABEL_20:
  if ( a2 == -1 )
    return 0LL;
  else
    return a2;
}
// E760: variable 'v23' is possibly undefined

//----- (000000000000E84C) ----------------------------------------------------
void __fastcall std::streambuf::~streambuf(_QWORD *a1)
{
  *a1 = off_28818;
  std::locale::~locale((std::locale *)(a1 + 1));
}
// 28818: using guessed type __int64 (__fastcall *[8])();

//----- (000000000000E860) ----------------------------------------------------
void __fastcall std::streambuf::~streambuf(_QWORD *a1)
{
  *a1 = off_28818;
  std::locale::~locale((std::locale *)(a1 + 1));
  operator delete(a1);
}
// 28818: using guessed type __int64 (__fastcall *off_28818[8])();

//----- (000000000000E89C) ----------------------------------------------------
__int64 std::streambuf::seekoff()
{
  return 0LL;
}

//----- (000000000000E8A8) ----------------------------------------------------
__int64 std::streambuf::seekpos()
{
  return 0LL;
}

//----- (000000000000E8B4) ----------------------------------------------------
__int64 std::streambuf::sync()
{
  return 0LL;
}

//----- (000000000000E8BC) ----------------------------------------------------
__int64 std::streambuf::underflow()
{
  return 0xFFFFFFFFLL;
}

//----- (000000000000E8C4) ----------------------------------------------------
__int64 std::streambuf::pbackfail()
{
  return 0xFFFFFFFFLL;
}

//----- (000000000000E8CC) ----------------------------------------------------
__int64 std::streambuf::overflow()
{
  return 0xFFFFFFFFLL;
}

//----- (000000000000E8D4) ----------------------------------------------------
void __noreturn sub_E8D4()
{
  std::bad_cast *exception; // x19

  exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
  std::bad_cast::bad_cast(exception);
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::bad_cast,
    (void (__fastcall *)(void *))&std::bad_cast::~bad_cast);
}

//----- (000000000000E908) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1, float a2)
{
  _QWORD *v3; // x8
  char *v4; // x9
  _QWORD *v5; // x0
  __int64 v7; // x20
  char *v8; // x21
  __int64 v9; // x22
  __int64 v10; // x0
  unsigned __int8 v11; // w23
  char v13[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v14; // [xsp+8h] [xbp-58h]
  _QWORD v15[2]; // [xsp+10h] [xbp-50h] BYREF

  v15[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v13[0] = 0;
  v14 = a1;
  v3 = (_QWORD *)(*a1 - 24LL);
  v4 = (char *)a1 + *v3;
  if ( !*((_DWORD *)v4 + 8) )
  {
    v5 = (_QWORD *)*((_QWORD *)v4 + 17);
    if ( v5 )
    {
      std::ostream::flush(v5);
      v3 = (_QWORD *)(*a1 - 24LL);
    }
    v13[0] = 1;
    std::ios_base::getloc(v15, (std::ios_base *)((char *)a1 + *v3));
    v7 = std::locale::use_facet(v15, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v15);
    v8 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v9 = *((_QWORD *)v8 + 5);
    if ( *((_DWORD *)v8 + 36) == -1 )
    {
      std::ios_base::getloc(v15, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v10 = std::locale::use_facet(v15, &std::ctype<char>::id);
      v11 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v10 + 56LL))(v10, 32LL);
      std::locale::~locale((std::locale *)v15);
      *((_DWORD *)v8 + 36) = v11;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *, double))(*(_QWORD *)v7 + 64LL))(v7, v9, v8, a2) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v13);
  return a1;
}
// A5E0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// E908: using guessed type char var_60[8];

//----- (000000000000EAD4) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 24LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// A5E0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// EAD4: using guessed type char var_60[8];

//----- (000000000000ECA0) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 48LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// A5E0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// ECA0: using guessed type char var_60[8];

//----- (000000000000EE6C) ----------------------------------------------------
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n)
{
  unsigned __int64 v6; // x25
  _BYTE *v7; // x22
  void *v8; // x22
  unsigned __int64 v9; // x8
  __int64 v10; // x23
  void *v11; // x24

  if ( (*(_BYTE *)a1 & 1) != 0 )
  {
    v6 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
    if ( v6 >= n )
    {
LABEL_3:
      if ( (*(_BYTE *)a1 & 1) != 0 )
      {
        v7 = (_BYTE *)a1[2];
        if ( !n )
          goto LABEL_12;
      }
      else
      {
        v7 = (char *)a1 + 1;
        if ( !n )
        {
LABEL_12:
          v7[n] = 0;
          if ( (*(_BYTE *)a1 & 1) != 0 )
            a1[1] = n;
          else
            *(_BYTE *)a1 = 2 * n;
          return a1;
        }
      }
      memmove(v7, src, n);
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 22LL;
    if ( n <= 0x16 )
      goto LABEL_3;
  }
  if ( -18LL - v6 < n - v6 )
    std::__basic_string_common<true>::__throw_length_error();
  if ( (*(_BYTE *)a1 & 1) != 0 )
    v8 = (void *)a1[2];
  else
    v8 = (char *)a1 + 1;
  if ( v6 > 0x7FFFFFFFFFFFFFE6LL )
  {
    v10 = -17LL;
  }
  else
  {
    v9 = 2 * v6;
    if ( 2 * v6 <= n )
      v9 = n;
    if ( v9 >= 0x17 )
      v10 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    else
      v10 = 23LL;
  }
  v11 = (void *)operator new(v10);
  memcpy(v11, src, n);
  if ( v6 != 22 )
    operator delete(v8);
  a1[1] = n;
  a1[2] = (__int64)v11;
  *a1 = v10 | 1;
  *((_BYTE *)v11 + n) = 0;
  return a1;
}

//----- (000000000000EFBC) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDCheck::RGBDCheck(rgbd::RGBDCheck *this)
{
  pudutech::Ashdmem *v2; // x0

  *(_QWORD *)this = 0LL;
  *((_QWORD *)this + 1) = 0LL;
  v2 = checktool::checktool((rgbd::RGBDCheck *)((char *)this + 16));
  *((_QWORD *)this + 114) = 0LL;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  pudutech::Ashdmem::create(v2);
  *((_QWORD *)this + 117) = 0LL;
  *((_QWORD *)this + 124) = 0LL;
  *((_DWORD *)this + 236) = -1;
  *((_DWORD *)this + 252) = 0;
  return system("su -c \"mkdir /sdcard/pudu/check_tool/\"");
}

//----- (000000000000F0CC) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDCheck::setCallback(__int64 a1, __int64 a2)
{
  std::mutex *v2; // x19
  __int64 v5; // x0
  void (*v6)(void); // x8
  _QWORD v8[4]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v9; // [xsp+20h] [xbp-40h]
  __int64 v10; // [xsp+38h] [xbp-28h]

  v2 = (std::mutex *)(a1 + 880);
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  std::mutex::lock((std::mutex *)(a1 + 880));
  v5 = *(_QWORD *)(a2 + 32);
  if ( v5 )
  {
    if ( a2 == v5 )
    {
      v9 = v8;
      (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v5 + 24LL))(v5, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v5 + 16LL))(v5);
    }
  }
  else
  {
    v9 = 0LL;
  }
  sub_13A5C(v8, a1 + 960);
  if ( v8 == v9 )
  {
    v6 = *(void (**)(void))(*v9 + 32LL);
    goto LABEL_10;
  }
  if ( v9 )
  {
    v6 = *(void (**)(void))(*v9 + 40LL);
LABEL_10:
    v6();
  }
  return std::mutex::unlock(v2);
}

//----- (000000000000F1C0) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDCheck::initCheckTool(rgbd::RGBDCheck *this, unsigned int *a2, int *a3)
{
  unsigned int v3; // w9
  int v4; // w8
  __int64 v8; // x8
  __int64 v9; // x8
  __int64 v10; // x8
  __int64 v11; // x13
  __int64 v12; // x8
  __int64 v13; // x12
  __int64 v14; // x13
  __int64 v15; // x8
  __int64 v16; // x12
  int64x2_t v17; // q1
  _QWORD *v18; // x13
  __int64 v19; // x14
  int64x2_t v20; // q0
  __int64 v21; // d2
  __int64 v22; // x10
  int *v23; // x11
  __int64 v24; // t1
  _QWORD *v25; // x8
  cv::Mat *v26; // x1
  __int64 v27; // x9
  unsigned __int64 v28; // x10
  _QWORD *v29; // x9
  _QWORD *v30; // x8
  _QWORD *v31; // x9
  _QWORD *v32; // x8
  _QWORD *v33; // x9
  _QWORD *v34; // x8
  _QWORD *v35; // x9
  void *v36; // x1
  unsigned int *v37; // x8
  unsigned int v38; // w9
  unsigned int v39; // w9
  __int64 v40; // x8
  __int64 v41; // x9
  int v42; // w9
  __int128 v43; // q0
  cv *v44; // x0
  unsigned int *v45; // x8
  unsigned int v46; // w9
  unsigned int v47; // w9
  int *v48; // x8
  __int64 v49; // x9
  cv *v50; // x0
  __int64 v51; // x13
  __int64 v52; // x8
  __int64 v53; // x12
  int64x2_t v54; // q1
  _QWORD *v55; // x13
  __int64 v56; // x14
  int64x2_t v57; // q0
  __int64 v58; // d2
  __int64 v59; // x10
  int *v60; // x11
  __int64 v61; // t1
  _QWORD *v62; // x8
  cv::Mat *v63; // x1
  __int64 v64; // x9
  unsigned __int64 v65; // x10
  _QWORD *v66; // x9
  _QWORD *v67; // x8
  _QWORD *v68; // x9
  _QWORD *v69; // x8
  _QWORD *v70; // x9
  _QWORD *v71; // x8
  _QWORD *v72; // x9
  unsigned int *v73; // x8
  unsigned int v74; // w9
  unsigned int v75; // w9
  __int64 v76; // x8
  __int64 v77; // x9
  int v78; // w9
  __int128 v79; // q0
  cv *v80; // x0
  unsigned int *v81; // x8
  unsigned int v82; // w9
  unsigned int v83; // w9
  int *v84; // x8
  __int64 v85; // x9
  __int64 v86; // x13
  unsigned int v87; // w19
  __int64 v88; // x8
  __int64 v89; // x12
  int64x2_t v90; // q1
  _QWORD *v91; // x13
  __int64 v92; // x14
  int64x2_t v93; // q0
  __int64 v94; // d2
  __int64 v95; // x10
  int *v96; // x11
  __int64 v97; // t1
  _QWORD *v98; // x8
  cv::Mat *v99; // x1
  __int64 v100; // x9
  unsigned __int64 v101; // x10
  _QWORD *v102; // x9
  _QWORD *v103; // x8
  _QWORD *v104; // x9
  _QWORD *v105; // x8
  _QWORD *v106; // x9
  _QWORD *v107; // x8
  _QWORD *v108; // x9
  unsigned int *v109; // x8
  unsigned int v110; // w9
  unsigned int v111; // w9
  __int64 v112; // x8
  __int64 v113; // x9
  int v114; // w9
  __int128 v115; // q0
  cv *v116; // x0
  unsigned int *v117; // x8
  unsigned int v118; // w9
  unsigned int v119; // w9
  int *v120; // x8
  __int64 v121; // x9
  __int64 v122; // x13
  __int64 v123; // x12
  int64x2_t v124; // q1
  _QWORD *v125; // x13
  __int64 v126; // x14
  int64x2_t v127; // q0
  __int64 v128; // d2
  __int64 v129; // x10
  int *v130; // x11
  __int64 v131; // t1
  _QWORD *v132; // x8
  cv::Mat *v133; // x1
  __int64 v134; // x9
  unsigned __int64 v135; // x10
  _QWORD *v136; // x9
  _QWORD *v137; // x8
  _QWORD *v138; // x9
  _QWORD *v139; // x8
  _QWORD *v140; // x9
  _QWORD *v141; // x8
  _QWORD *v142; // x9
  unsigned int *v143; // x8
  unsigned int v144; // w9
  unsigned int v145; // w9
  __int64 v146; // x8
  __int64 v147; // x9
  int v148; // w9
  __int128 v149; // q0
  cv *v150; // x0
  unsigned int *v151; // x8
  unsigned int v152; // w9
  unsigned int v153; // w9
  int *v154; // x8
  __int64 v155; // x9
  __int64 v156; // x13
  __int64 v157; // x12
  int64x2_t v158; // q1
  _QWORD *v159; // x13
  __int64 v160; // x14
  int64x2_t v161; // q0
  __int64 v162; // d2
  __int64 v163; // x10
  int *v164; // x11
  __int64 v165; // t1
  _QWORD *v166; // x8
  cv::Mat *v167; // x1
  __int64 v168; // x9
  unsigned __int64 v169; // x10
  _QWORD *v170; // x9
  _QWORD *v171; // x8
  _QWORD *v172; // x9
  _QWORD *v173; // x8
  _QWORD *v174; // x9
  _QWORD *v175; // x8
  _QWORD *v176; // x9
  unsigned int *v177; // x8
  unsigned int v178; // w9
  unsigned int v179; // w9
  __int64 v180; // x8
  __int64 v181; // x9
  int v182; // w9
  __int128 v183; // q0
  cv *v184; // x0
  unsigned int *v185; // x8
  unsigned int v186; // w9
  unsigned int v187; // w9
  int *v188; // x8
  __int64 v189; // x9
  int64x2_t v190; // q1
  _QWORD *v191; // x13
  __int64 v192; // x14
  int64x2_t v193; // q0
  __int64 v194; // d2
  __int64 v195; // x10
  int *v196; // x11
  __int64 v197; // t1
  _QWORD *v198; // x8
  cv::Mat *v199; // x1
  __int64 v200; // x9
  unsigned __int64 v201; // x10
  _QWORD *v202; // x9
  _QWORD *v203; // x8
  _QWORD *v204; // x9
  _QWORD *v205; // x8
  _QWORD *v206; // x9
  _QWORD *v207; // x8
  _QWORD *v208; // x9
  unsigned int *v209; // x8
  unsigned int v210; // w9
  unsigned int v211; // w9
  __int64 v212; // x8
  __int64 v213; // x9
  int v214; // w9
  __int128 v215; // q0
  cv *v216; // x0
  unsigned int *v217; // x8
  unsigned int v218; // w9
  unsigned int v219; // w9
  int *v220; // x8
  __int64 v221; // x9
  unsigned int *v222; // x8
  unsigned int v223; // w9
  __int64 v224; // x8
  cv *v225; // x10
  unsigned int *v226; // x8
  unsigned int v227; // w9
  unsigned int v228; // w9
  __int64 v229; // x8
  __int64 v230; // x9
  unsigned int *v231; // x8
  unsigned int v232; // w9
  unsigned int v233; // w9
  __int64 v234; // x8
  __int64 v235; // x9
  cv::Mat *v237; // [xsp+10h] [xbp-240h] BYREF
  __int64 v238; // [xsp+18h] [xbp-238h]
  _QWORD *v239; // [xsp+20h] [xbp-230h]
  __int64 v240; // [xsp+28h] [xbp-228h]
  unsigned __int64 v241; // [xsp+30h] [xbp-220h]
  int v242[2]; // [xsp+38h] [xbp-218h] BYREF
  __int64 v243; // [xsp+40h] [xbp-210h]
  _QWORD *v244; // [xsp+48h] [xbp-208h]
  __int64 v245; // [xsp+50h] [xbp-200h]
  unsigned __int64 v246; // [xsp+58h] [xbp-1F8h]
  int v247; // [xsp+60h] [xbp-1F0h] BYREF
  __int64 v248; // [xsp+64h] [xbp-1ECh] BYREF
  int v249; // [xsp+6Ch] [xbp-1E4h]
  __int128 v250; // [xsp+70h] [xbp-1E0h]
  __int128 v251; // [xsp+80h] [xbp-1D0h]
  __int128 v252; // [xsp+90h] [xbp-1C0h]
  __int64 v253; // [xsp+A0h] [xbp-1B0h]
  cv *v254; // [xsp+A8h] [xbp-1A8h]
  __int64 v255[2]; // [xsp+B0h] [xbp-1A0h] BYREF
  int v256; // [xsp+C0h] [xbp-190h] BYREF
  int v257[15]; // [xsp+C4h] [xbp-18Ch] BYREF
  int *v258; // [xsp+100h] [xbp-150h]
  cv *v259; // [xsp+108h] [xbp-148h]
  __int64 v260; // [xsp+110h] [xbp-140h] BYREF
  __int64 v261; // [xsp+118h] [xbp-138h]
  _BYTE v262[64]; // [xsp+120h] [xbp-130h] BYREF
  cv *v263[2]; // [xsp+160h] [xbp-F0h]
  __int64 v264; // [xsp+170h] [xbp-E0h] BYREF
  __int64 v265; // [xsp+178h] [xbp-D8h]
  _BYTE v266[64]; // [xsp+180h] [xbp-D0h] BYREF
  __int128 v267; // [xsp+1C0h] [xbp-90h]
  __int64 v268; // [xsp+1D0h] [xbp-80h] BYREF
  __int64 v269; // [xsp+1D8h] [xbp-78h]

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  *(_DWORD *)v266 = 1124007936;
  memset(&v266[4], 0, 60);
  *(_QWORD *)&v267 = &v266[8];
  *((_QWORD *)&v267 + 1) = &v268;
  v268 = 0LL;
  v269 = 0LL;
  v3 = *a2;
  v4 = *a3;
  if ( *a2 != 3 || v4 )
  {
    if ( v3 == 4 && !v4 )
    {
      v256 = 1124007936;
      memset(v257, 0, sizeof(v257));
      v258 = &v257[1];
      v259 = (cv *)&v260;
      v260 = 0LL;
      v261 = 0LL;
      *(_QWORD *)v242 = 0x300000003LL;
      cv::Mat::create((cv::Mat *)&v256, 2, v242, 6);
      *(_QWORD *)v242 = &v256;
      if ( v257[0] < 1 )
        v9 = 0LL;
      else
        v9 = *((_QWORD *)v259 + v257[0] - 1);
      v243 = v9;
      v244 = 0LL;
      v245 = 0LL;
      v246 = 0LL;
      if ( (v256 & 0x4000) == 0 )
      {
LABEL_116:
        cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 0LL, 0);
        v62 = v244;
        *v244 = 0x40820AAA40000000LL;
        v63 = *(cv::Mat **)v242;
        if ( *(_QWORD *)v242 )
        {
          v244 = (_QWORD *)((char *)v62 + v243);
          if ( (unsigned __int64)v62 + v243 >= v246 )
          {
            v244 = v62;
            cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 1LL, 1);
            v63 = *(cv::Mat **)v242;
            v62 = v244;
          }
          else
          {
            v62 = (_QWORD *)((char *)v62 + v243);
          }
        }
        v64 = v243;
        v65 = v246;
        v237 = v63;
        v238 = v243;
        v239 = v62;
        v240 = v245;
        v241 = v246;
        *v62 = 0LL;
        if ( !v63 )
        {
          *v62 = 0x3FF0000000000000LL;
          goto LABEL_151;
        }
        v66 = (_QWORD *)((char *)v62 + v64);
        v239 = v66;
        if ( (unsigned __int64)v66 >= v65 )
        {
          v239 = v62;
          cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
          v66 = v239;
          v63 = v237;
        }
        *v66 = 0x4073CB48A0000000LL;
        if ( v63 )
        {
          v67 = (_QWORD *)((char *)v66 + v238);
          v239 = (_QWORD *)((char *)v66 + v238);
          if ( (unsigned __int64)v66 + v238 >= v241 )
          {
            v239 = v66;
            cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
            v67 = v239;
            v63 = v237;
          }
          *v67 = 0LL;
          if ( v63 )
          {
            v68 = (_QWORD *)((char *)v67 + v238);
            v239 = (_QWORD *)((char *)v67 + v238);
            if ( (unsigned __int64)v67 + v238 >= v241 )
            {
              v239 = v67;
              cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
              v68 = v239;
              v63 = v237;
            }
LABEL_132:
            *v68 = 0x40820AAA40000000LL;
            if ( v63 )
            {
              v69 = (_QWORD *)((char *)v68 + v238);
              v239 = (_QWORD *)((char *)v68 + v238);
              if ( (unsigned __int64)v68 + v238 >= v241 )
              {
                v239 = v68;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v69 = v239;
                v63 = v237;
              }
            }
            else
            {
              v69 = v68;
            }
            *v69 = 0x406E22C500000000LL;
            if ( v63 )
            {
              v70 = (_QWORD *)((char *)v69 + v238);
              v239 = (_QWORD *)((char *)v69 + v238);
              if ( (unsigned __int64)v69 + v238 >= v241 )
              {
                v239 = v69;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v70 = v239;
                v63 = v237;
              }
              *v70 = 0LL;
              if ( v63 )
              {
                v71 = (_QWORD *)((char *)v70 + v238);
                v239 = (_QWORD *)((char *)v70 + v238);
                if ( (unsigned __int64)v70 + v238 >= v241 )
                {
                  v239 = v70;
                  cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                  v71 = v239;
                  v63 = v237;
                }
                *v71 = 0LL;
                if ( v63 )
                {
                  v72 = (_QWORD *)((char *)v71 + v238);
                  v239 = (_QWORD *)((char *)v71 + v238);
                  if ( (unsigned __int64)v71 + v238 >= v241 )
                  {
                    v239 = v71;
                    cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                    v72 = v239;
                    v63 = v237;
                  }
                  goto LABEL_148;
                }
LABEL_147:
                v72 = v71;
LABEL_148:
                *v72 = 0x3FF0000000000000LL;
                if ( v63 )
                {
                  v239 = (_QWORD *)((char *)v72 + v238);
                  if ( (unsigned __int64)v72 + v238 >= v241 )
                  {
                    v239 = v72;
                    cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                    v63 = v237;
                  }
                }
LABEL_151:
                memset(&v262[4], 0, 60);
                v263[0] = (cv *)&v262[8];
                v263[1] = (cv *)&v264;
                v264 = 0LL;
                v265 = 0LL;
                *(_DWORD *)v262 = 1124007942;
                cv::Mat_<double>::operator=((cv::Mat *)v262, v63);
                if ( *(_QWORD *)&v266[56] )
                {
                  v73 = (unsigned int *)(*(_QWORD *)&v266[56] + 20LL);
                  do
                  {
                    v74 = __ldaxr(v73);
                    v75 = v74 - 1;
                  }
                  while ( __stlxr(v75, v73) );
                  if ( !v75 )
                    cv::Mat::deallocate((cv::Mat *)v266);
                }
                *(_QWORD *)&v266[56] = 0LL;
                memset(&v266[16], 0, 32);
                if ( *(int *)&v266[4] >= 1 )
                {
                  v76 = v267;
                  v77 = 0LL;
                  do
                    *(_DWORD *)(v76 + 4 * v77++) = 0;
                  while ( v77 < *(int *)&v266[4] );
                }
                *(_OWORD *)v266 = *(_OWORD *)v262;
                *(_OWORD *)&v266[16] = *(_OWORD *)&v262[16];
                *(_OWORD *)&v266[32] = *(_OWORD *)&v262[32];
                *(_OWORD *)&v266[48] = *(_OWORD *)&v262[48];
                if ( *((__int64 **)&v267 + 1) == &v268 )
                {
                  v78 = *(_DWORD *)&v262[4];
                }
                else
                {
                  cv::fastFree(*((cv **)&v267 + 1), v36);
                  v78 = *(_DWORD *)&v262[4];
                  *(_QWORD *)&v267 = &v266[8];
                  *((_QWORD *)&v267 + 1) = &v268;
                }
                if ( v78 <= 2 )
                {
                  v80 = v263[1];
                  v268 = *(_QWORD *)v263[1];
                  v269 = *((_QWORD *)v263[1] + 1);
                }
                else
                {
                  v79 = *(_OWORD *)v263;
                  v80 = (cv *)&v264;
                  v263[0] = (cv *)&v262[8];
                  v263[1] = (cv *)&v264;
                  v267 = v79;
                }
                *(_DWORD *)v262 = 1124007936;
                memset(&v262[4], 0, 60);
                if ( v80 != (cv *)&v264 )
                  cv::fastFree(v80, v36);
                if ( *(_QWORD *)&v257[13] )
                {
                  v81 = (unsigned int *)(*(_QWORD *)&v257[13] + 20LL);
                  do
                  {
                    v82 = __ldaxr(v81);
                    v83 = v82 - 1;
                  }
                  while ( __stlxr(v83, v81) );
                  if ( !v83 )
                    cv::Mat::deallocate((cv::Mat *)&v256);
                }
                *(_QWORD *)&v257[13] = 0LL;
                memset(&v257[3], 0, 32);
                if ( v257[0] >= 1 )
                {
                  v84 = v258;
                  v85 = 0LL;
                  do
                    v84[v85++] = 0;
                  while ( v85 < v257[0] );
                }
                v50 = v259;
                if ( v259 != (cv *)&v260 )
                  goto LABEL_464;
                goto LABEL_465;
              }
            }
            else
            {
              v70 = v69;
              *v69 = 0LL;
            }
            v71 = v70;
            *v70 = 0LL;
            goto LABEL_147;
          }
        }
        else
        {
          v67 = v66;
          *v66 = 0LL;
        }
        v68 = v67;
        goto LABEL_132;
      }
      v245 = *(_QWORD *)&v257[3];
      if ( v257[0] >= 3 )
      {
        if ( v257[0] == 3 )
        {
          v16 = 0LL;
          v14 = 1LL;
        }
        else
        {
          v16 = v257[0] & 0xFFFFFFFC;
          v54 = vdupq_n_s64(1uLL);
          v55 = v258 + 2;
          v56 = v16;
          v57 = v54;
          do
          {
            v58 = *(v55 - 1);
            v54.n128_u64[0] *= (int)v58;
            v57.n128_u64[0] *= (int)*v55;
            v56 -= 4LL;
            v54.n128_u64[1] *= SHIDWORD(v58);
            v57.n128_u64[1] *= (int)HIDWORD(*v55);
            v55 += 2;
          }
          while ( v56 );
          v14 = v57.n128_u64[0] * v54.n128_u64[0] * v57.n128_u64[1] * v54.n128_u64[1];
          if ( v16 == v257[0] )
            goto LABEL_115;
        }
        v59 = (unsigned int)v257[0] - v16;
        v60 = &v258[v16];
        do
        {
          v61 = *v60++;
          --v59;
          v14 *= v61;
        }
        while ( v59 );
      }
      else
      {
        v14 = v257[2] * (__int64)v257[1];
      }
LABEL_115:
      v246 = *(_QWORD *)&v257[3] + v14 * v9;
      goto LABEL_116;
    }
    if ( v3 == 6 && !v4 )
    {
      v256 = 1124007936;
      memset(v257, 0, sizeof(v257));
      v258 = &v257[1];
      v259 = (cv *)&v260;
      v260 = 0LL;
      v261 = 0LL;
      *(_QWORD *)v242 = 0x300000003LL;
      cv::Mat::create((cv::Mat *)&v256, 2, v242, 6);
      *(_QWORD *)v242 = &v256;
      if ( v257[0] < 1 )
        v10 = 0LL;
      else
        v10 = *((_QWORD *)v259 + v257[0] - 1);
      v243 = v10;
      v244 = 0LL;
      v245 = 0LL;
      v246 = 0LL;
      if ( (v256 & 0x4000) == 0 )
      {
LABEL_191:
        cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 0LL, 0);
        v98 = v244;
        *v244 = 0x40820AAA40000000LL;
        v99 = *(cv::Mat **)v242;
        if ( *(_QWORD *)v242 )
        {
          v244 = (_QWORD *)((char *)v98 + v243);
          if ( (unsigned __int64)v98 + v243 >= v246 )
          {
            v244 = v98;
            cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 1LL, 1);
            v99 = *(cv::Mat **)v242;
            v98 = v244;
          }
          else
          {
            v98 = (_QWORD *)((char *)v98 + v243);
          }
        }
        v100 = v243;
        v101 = v246;
        v237 = v99;
        v238 = v243;
        v239 = v98;
        v240 = v245;
        v241 = v246;
        *v98 = 0LL;
        if ( !v99 )
        {
          *v98 = 0x3FF0000000000000LL;
          goto LABEL_226;
        }
        v102 = (_QWORD *)((char *)v98 + v100);
        v239 = v102;
        if ( (unsigned __int64)v102 >= v101 )
        {
          v239 = v98;
          cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
          v102 = v239;
          v99 = v237;
        }
        *v102 = 0x4073CB48A0000000LL;
        if ( v99 )
        {
          v103 = (_QWORD *)((char *)v102 + v238);
          v239 = (_QWORD *)((char *)v102 + v238);
          if ( (unsigned __int64)v102 + v238 >= v241 )
          {
            v239 = v102;
            cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
            v103 = v239;
            v99 = v237;
            *v239 = 0LL;
            if ( !v99 )
            {
LABEL_201:
              v104 = v103;
              goto LABEL_207;
            }
LABEL_205:
            v104 = (_QWORD *)((char *)v103 + v238);
            v239 = (_QWORD *)((char *)v103 + v238);
            if ( (unsigned __int64)v103 + v238 >= v241 )
            {
              v239 = v103;
              cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
              v104 = v239;
              v99 = v237;
            }
LABEL_207:
            *v104 = 0x40820AAA40000000LL;
            if ( v99 )
            {
              v105 = (_QWORD *)((char *)v104 + v238);
              v239 = (_QWORD *)((char *)v104 + v238);
              if ( (unsigned __int64)v104 + v238 >= v241 )
              {
                v239 = v104;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v105 = v239;
                v99 = v237;
              }
            }
            else
            {
              v105 = v104;
            }
            *v105 = 0x406E22C500000000LL;
            if ( v99 )
            {
              v106 = (_QWORD *)((char *)v105 + v238);
              v239 = (_QWORD *)((char *)v105 + v238);
              if ( (unsigned __int64)v105 + v238 >= v241 )
              {
                v239 = v105;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v106 = v239;
                v99 = v237;
                *v239 = 0LL;
                if ( !v99 )
                {
LABEL_214:
                  v107 = v106;
                  *v106 = 0LL;
LABEL_222:
                  v108 = v107;
LABEL_223:
                  *v108 = 0x3FF0000000000000LL;
                  if ( v99 )
                  {
                    v239 = (_QWORD *)((char *)v108 + v238);
                    if ( (unsigned __int64)v108 + v238 >= v241 )
                    {
                      v239 = v108;
                      cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                      v99 = v237;
                    }
                  }
LABEL_226:
                  memset(&v262[4], 0, 60);
                  v263[0] = (cv *)&v262[8];
                  v263[1] = (cv *)&v264;
                  v264 = 0LL;
                  v265 = 0LL;
                  *(_DWORD *)v262 = 1124007942;
                  cv::Mat_<double>::operator=((cv::Mat *)v262, v99);
                  if ( *(_QWORD *)&v266[56] )
                  {
                    v109 = (unsigned int *)(*(_QWORD *)&v266[56] + 20LL);
                    do
                    {
                      v110 = __ldaxr(v109);
                      v111 = v110 - 1;
                    }
                    while ( __stlxr(v111, v109) );
                    if ( !v111 )
                      cv::Mat::deallocate((cv::Mat *)v266);
                  }
                  *(_QWORD *)&v266[56] = 0LL;
                  memset(&v266[16], 0, 32);
                  if ( *(int *)&v266[4] >= 1 )
                  {
                    v112 = v267;
                    v113 = 0LL;
                    do
                      *(_DWORD *)(v112 + 4 * v113++) = 0;
                    while ( v113 < *(int *)&v266[4] );
                  }
                  *(_OWORD *)v266 = *(_OWORD *)v262;
                  *(_OWORD *)&v266[16] = *(_OWORD *)&v262[16];
                  *(_OWORD *)&v266[32] = *(_OWORD *)&v262[32];
                  *(_OWORD *)&v266[48] = *(_OWORD *)&v262[48];
                  if ( *((__int64 **)&v267 + 1) == &v268 )
                  {
                    v114 = *(_DWORD *)&v262[4];
                  }
                  else
                  {
                    cv::fastFree(*((cv **)&v267 + 1), v36);
                    v114 = *(_DWORD *)&v262[4];
                    *(_QWORD *)&v267 = &v266[8];
                    *((_QWORD *)&v267 + 1) = &v268;
                  }
                  if ( v114 <= 2 )
                  {
                    v116 = v263[1];
                    v268 = *(_QWORD *)v263[1];
                    v269 = *((_QWORD *)v263[1] + 1);
                  }
                  else
                  {
                    v115 = *(_OWORD *)v263;
                    v116 = (cv *)&v264;
                    v263[0] = (cv *)&v262[8];
                    v263[1] = (cv *)&v264;
                    v267 = v115;
                  }
                  *(_DWORD *)v262 = 1124007936;
                  memset(&v262[4], 0, 60);
                  if ( v116 != (cv *)&v264 )
                    cv::fastFree(v116, v36);
                  if ( *(_QWORD *)&v257[13] )
                  {
                    v117 = (unsigned int *)(*(_QWORD *)&v257[13] + 20LL);
                    do
                    {
                      v118 = __ldaxr(v117);
                      v119 = v118 - 1;
                    }
                    while ( __stlxr(v119, v117) );
                    if ( !v119 )
                      cv::Mat::deallocate((cv::Mat *)&v256);
                  }
                  *(_QWORD *)&v257[13] = 0LL;
                  memset(&v257[3], 0, 32);
                  if ( v257[0] >= 1 )
                  {
                    v120 = v258;
                    v121 = 0LL;
                    do
                      v120[v121++] = 0;
                    while ( v121 < v257[0] );
                  }
                  v50 = v259;
                  if ( v259 != (cv *)&v260 )
                    goto LABEL_464;
                  goto LABEL_465;
                }
LABEL_217:
                v107 = (_QWORD *)((char *)v106 + v238);
                v239 = (_QWORD *)((char *)v106 + v238);
                if ( (unsigned __int64)v106 + v238 >= v241 )
                {
                  v239 = v106;
                  cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                  v107 = v239;
                  v99 = v237;
                  *v239 = 0LL;
                  if ( !v99 )
                    goto LABEL_222;
                }
                else
                {
                  *v107 = 0LL;
                }
                v108 = (_QWORD *)((char *)v107 + v238);
                v239 = (_QWORD *)((char *)v107 + v238);
                if ( (unsigned __int64)v107 + v238 >= v241 )
                {
                  v239 = v107;
                  cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                  v108 = v239;
                  v99 = v237;
                }
                goto LABEL_223;
              }
            }
            else
            {
              v106 = v105;
            }
            *v106 = 0LL;
            if ( !v99 )
              goto LABEL_214;
            goto LABEL_217;
          }
        }
        else
        {
          v103 = v102;
        }
        *v103 = 0LL;
        if ( !v99 )
          goto LABEL_201;
        goto LABEL_205;
      }
      v245 = *(_QWORD *)&v257[3];
      if ( v257[0] >= 3 )
      {
        if ( v257[0] == 3 )
        {
          v53 = 0LL;
          v51 = 1LL;
        }
        else
        {
          v53 = v257[0] & 0xFFFFFFFC;
          v90 = vdupq_n_s64(1uLL);
          v91 = v258 + 2;
          v92 = v53;
          v93 = v90;
          do
          {
            v94 = *(v91 - 1);
            v90.n128_u64[0] *= (int)v94;
            v93.n128_u64[0] *= (int)*v91;
            v92 -= 4LL;
            v90.n128_u64[1] *= SHIDWORD(v94);
            v93.n128_u64[1] *= (int)HIDWORD(*v91);
            v91 += 2;
          }
          while ( v92 );
          v51 = v93.n128_u64[0] * v90.n128_u64[0] * v93.n128_u64[1] * v90.n128_u64[1];
          if ( v53 == v257[0] )
            goto LABEL_190;
        }
        v95 = (unsigned int)v257[0] - v53;
        v96 = &v258[v53];
        do
        {
          v97 = *v96++;
          --v95;
          v51 *= v97;
        }
        while ( v95 );
      }
      else
      {
        v51 = v257[2] * (__int64)v257[1];
      }
LABEL_190:
      v246 = *(_QWORD *)&v257[3] + v51 * v10;
      goto LABEL_191;
    }
    if ( v3 == 6 && v4 == 1 )
    {
      v256 = 1124007936;
      memset(v257, 0, sizeof(v257));
      v258 = &v257[1];
      v259 = (cv *)&v260;
      v260 = 0LL;
      v261 = 0LL;
      *(_QWORD *)v242 = 0x300000003LL;
      cv::Mat::create((cv::Mat *)&v256, 2, v242, 6);
      *(_QWORD *)v242 = &v256;
      if ( v257[0] < 1 )
        v12 = 0LL;
      else
        v12 = *((_QWORD *)v259 + v257[0] - 1);
      v243 = v12;
      v244 = 0LL;
      v245 = 0LL;
      v246 = 0LL;
      if ( (v256 & 0x4000) == 0 )
      {
LABEL_264:
        cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 0LL, 0);
        v132 = v244;
        *v244 = 0x407A620C49BA5E35LL;
        v133 = *(cv::Mat **)v242;
        if ( *(_QWORD *)v242 )
        {
          v244 = (_QWORD *)((char *)v132 + v243);
          if ( (unsigned __int64)v132 + v243 >= v246 )
          {
            v244 = v132;
            cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 1LL, 1);
            v133 = *(cv::Mat **)v242;
            v132 = v244;
          }
          else
          {
            v132 = (_QWORD *)((char *)v132 + v243);
          }
        }
        v134 = v243;
        v135 = v246;
        v237 = v133;
        v238 = v243;
        v239 = v132;
        v240 = v245;
        v241 = v246;
        *v132 = 0LL;
        if ( !v133 )
        {
          *v132 = 0x3FF0000000000000LL;
          goto LABEL_299;
        }
        v136 = (_QWORD *)((char *)v132 + v134);
        v239 = v136;
        if ( (unsigned __int64)v136 >= v135 )
        {
          v239 = v132;
          cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
          v136 = v239;
          v133 = v237;
        }
        *v136 = 0x407AB09BA5E353F8LL;
        if ( v133 )
        {
          v137 = (_QWORD *)((char *)v136 + v238);
          v239 = (_QWORD *)((char *)v136 + v238);
          if ( (unsigned __int64)v136 + v238 >= v241 )
          {
            v239 = v136;
            cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
            v137 = v239;
            v133 = v237;
            *v239 = 0LL;
            if ( !v133 )
            {
LABEL_274:
              v138 = v137;
              goto LABEL_280;
            }
LABEL_278:
            v138 = (_QWORD *)((char *)v137 + v238);
            v239 = (_QWORD *)((char *)v137 + v238);
            if ( (unsigned __int64)v137 + v238 >= v241 )
            {
              v239 = v137;
              cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
              v138 = v239;
              v133 = v237;
            }
LABEL_280:
            *v138 = 0x407A620C49BA5E35LL;
            if ( v133 )
            {
              v139 = (_QWORD *)((char *)v138 + v238);
              v239 = (_QWORD *)((char *)v138 + v238);
              if ( (unsigned __int64)v138 + v238 >= v241 )
              {
                v239 = v138;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v139 = v239;
                v133 = v237;
              }
            }
            else
            {
              v139 = v138;
            }
            *v139 = 0x406D7B1A9FBE76C9LL;
            if ( v133 )
            {
              v140 = (_QWORD *)((char *)v139 + v238);
              v239 = (_QWORD *)((char *)v139 + v238);
              if ( (unsigned __int64)v139 + v238 >= v241 )
              {
                v239 = v139;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v140 = v239;
                v133 = v237;
                *v239 = 0LL;
                if ( !v133 )
                {
LABEL_287:
                  v141 = v140;
                  *v140 = 0LL;
LABEL_295:
                  v142 = v141;
LABEL_296:
                  *v142 = 0x3FF0000000000000LL;
                  if ( v133 )
                  {
                    v239 = (_QWORD *)((char *)v142 + v238);
                    if ( (unsigned __int64)v142 + v238 >= v241 )
                    {
                      v239 = v142;
                      cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                      v133 = v237;
                    }
                  }
LABEL_299:
                  memset(&v262[4], 0, 60);
                  v263[0] = (cv *)&v262[8];
                  v263[1] = (cv *)&v264;
                  v264 = 0LL;
                  v265 = 0LL;
                  *(_DWORD *)v262 = 1124007942;
                  cv::Mat_<double>::operator=((cv::Mat *)v262, v133);
                  if ( *(_QWORD *)&v266[56] )
                  {
                    v143 = (unsigned int *)(*(_QWORD *)&v266[56] + 20LL);
                    do
                    {
                      v144 = __ldaxr(v143);
                      v145 = v144 - 1;
                    }
                    while ( __stlxr(v145, v143) );
                    if ( !v145 )
                      cv::Mat::deallocate((cv::Mat *)v266);
                  }
                  *(_QWORD *)&v266[56] = 0LL;
                  memset(&v266[16], 0, 32);
                  if ( *(int *)&v266[4] >= 1 )
                  {
                    v146 = v267;
                    v147 = 0LL;
                    do
                      *(_DWORD *)(v146 + 4 * v147++) = 0;
                    while ( v147 < *(int *)&v266[4] );
                  }
                  *(_OWORD *)v266 = *(_OWORD *)v262;
                  *(_OWORD *)&v266[16] = *(_OWORD *)&v262[16];
                  *(_OWORD *)&v266[32] = *(_OWORD *)&v262[32];
                  *(_OWORD *)&v266[48] = *(_OWORD *)&v262[48];
                  if ( *((__int64 **)&v267 + 1) == &v268 )
                  {
                    v148 = *(_DWORD *)&v262[4];
                  }
                  else
                  {
                    cv::fastFree(*((cv **)&v267 + 1), v36);
                    v148 = *(_DWORD *)&v262[4];
                    *(_QWORD *)&v267 = &v266[8];
                    *((_QWORD *)&v267 + 1) = &v268;
                  }
                  if ( v148 <= 2 )
                  {
                    v150 = v263[1];
                    v268 = *(_QWORD *)v263[1];
                    v269 = *((_QWORD *)v263[1] + 1);
                  }
                  else
                  {
                    v149 = *(_OWORD *)v263;
                    v150 = (cv *)&v264;
                    v263[0] = (cv *)&v262[8];
                    v263[1] = (cv *)&v264;
                    v267 = v149;
                  }
                  *(_DWORD *)v262 = 1124007936;
                  memset(&v262[4], 0, 60);
                  if ( v150 != (cv *)&v264 )
                    cv::fastFree(v150, v36);
                  if ( *(_QWORD *)&v257[13] )
                  {
                    v151 = (unsigned int *)(*(_QWORD *)&v257[13] + 20LL);
                    do
                    {
                      v152 = __ldaxr(v151);
                      v153 = v152 - 1;
                    }
                    while ( __stlxr(v153, v151) );
                    if ( !v153 )
                      cv::Mat::deallocate((cv::Mat *)&v256);
                  }
                  *(_QWORD *)&v257[13] = 0LL;
                  memset(&v257[3], 0, 32);
                  if ( v257[0] >= 1 )
                  {
                    v154 = v258;
                    v155 = 0LL;
                    do
                      v154[v155++] = 0;
                    while ( v155 < v257[0] );
                  }
                  v50 = v259;
                  if ( v259 != (cv *)&v260 )
                    goto LABEL_464;
                  goto LABEL_465;
                }
LABEL_290:
                v141 = (_QWORD *)((char *)v140 + v238);
                v239 = (_QWORD *)((char *)v140 + v238);
                if ( (unsigned __int64)v140 + v238 >= v241 )
                {
                  v239 = v140;
                  cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                  v141 = v239;
                  v133 = v237;
                  *v239 = 0LL;
                  if ( !v133 )
                    goto LABEL_295;
                }
                else
                {
                  *v141 = 0LL;
                }
                v142 = (_QWORD *)((char *)v141 + v238);
                v239 = (_QWORD *)((char *)v141 + v238);
                if ( (unsigned __int64)v141 + v238 >= v241 )
                {
                  v239 = v141;
                  cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                  v142 = v239;
                  v133 = v237;
                }
                goto LABEL_296;
              }
            }
            else
            {
              v140 = v139;
            }
            *v140 = 0LL;
            if ( !v133 )
              goto LABEL_287;
            goto LABEL_290;
          }
        }
        else
        {
          v137 = v136;
        }
        *v137 = 0LL;
        if ( !v133 )
          goto LABEL_274;
        goto LABEL_278;
      }
      v245 = *(_QWORD *)&v257[3];
      if ( v257[0] >= 3 )
      {
        if ( v257[0] == 3 )
        {
          v89 = 0LL;
          v86 = 1LL;
        }
        else
        {
          v89 = v257[0] & 0xFFFFFFFC;
          v124 = vdupq_n_s64(1uLL);
          v125 = v258 + 2;
          v126 = v89;
          v127 = v124;
          do
          {
            v128 = *(v125 - 1);
            v124.n128_u64[0] *= (int)v128;
            v127.n128_u64[0] *= (int)*v125;
            v126 -= 4LL;
            v124.n128_u64[1] *= SHIDWORD(v128);
            v127.n128_u64[1] *= (int)HIDWORD(*v125);
            v125 += 2;
          }
          while ( v126 );
          v86 = v127.n128_u64[0] * v124.n128_u64[0] * v127.n128_u64[1] * v124.n128_u64[1];
          if ( v89 == v257[0] )
            goto LABEL_263;
        }
        v129 = (unsigned int)v257[0] - v89;
        v130 = &v258[v89];
        do
        {
          v131 = *v130++;
          --v129;
          v86 *= v131;
        }
        while ( v129 );
      }
      else
      {
        v86 = v257[2] * (__int64)v257[1];
      }
LABEL_263:
      v246 = *(_QWORD *)&v257[3] + v86 * v12;
      goto LABEL_264;
    }
    if ( v3 == 6 && v4 == 2 )
    {
      v256 = 1124007936;
      memset(v257, 0, sizeof(v257));
      v258 = &v257[1];
      v259 = (cv *)&v260;
      v260 = 0LL;
      v261 = 0LL;
      *(_QWORD *)v242 = 0x300000003LL;
      cv::Mat::create((cv::Mat *)&v256, 2, v242, 6);
      *(_QWORD *)v242 = &v256;
      if ( v257[0] < 1 )
        v15 = 0LL;
      else
        v15 = *((_QWORD *)v259 + v257[0] - 1);
      v243 = v15;
      v244 = 0LL;
      v245 = 0LL;
      v246 = 0LL;
      if ( (v256 & 0x4000) == 0 )
      {
LABEL_337:
        cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 0LL, 0);
        v166 = v244;
        *v244 = 0x407AB00000000000LL;
        v167 = *(cv::Mat **)v242;
        if ( *(_QWORD *)v242 )
        {
          v244 = (_QWORD *)((char *)v166 + v243);
          if ( (unsigned __int64)v166 + v243 >= v246 )
          {
            v244 = v166;
            cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 1LL, 1);
            v167 = *(cv::Mat **)v242;
            v166 = v244;
          }
          else
          {
            v166 = (_QWORD *)((char *)v166 + v243);
          }
        }
        v168 = v243;
        v169 = v246;
        v237 = v167;
        v238 = v243;
        v239 = v166;
        v240 = v245;
        v241 = v246;
        *v166 = 0LL;
        if ( !v167 )
        {
          *v166 = 0x3FF0000000000000LL;
          goto LABEL_372;
        }
        v170 = (_QWORD *)((char *)v166 + v168);
        v239 = v170;
        if ( (unsigned __int64)v170 >= v169 )
        {
          v239 = v166;
          cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
          v170 = v239;
          v167 = v237;
        }
        *v170 = 0x4069000000000000LL;
        if ( v167 )
        {
          v171 = (_QWORD *)((char *)v170 + v238);
          v239 = (_QWORD *)((char *)v170 + v238);
          if ( (unsigned __int64)v170 + v238 >= v241 )
          {
            v239 = v170;
            cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
            v171 = v239;
            v167 = v237;
            *v239 = 0LL;
            if ( !v167 )
            {
LABEL_347:
              v172 = v171;
              goto LABEL_353;
            }
LABEL_351:
            v172 = (_QWORD *)((char *)v171 + v238);
            v239 = (_QWORD *)((char *)v171 + v238);
            if ( (unsigned __int64)v171 + v238 >= v241 )
            {
              v239 = v171;
              cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
              v172 = v239;
              v167 = v237;
            }
LABEL_353:
            *v172 = 0x407AB00000000000LL;
            if ( v167 )
            {
              v173 = (_QWORD *)((char *)v172 + v238);
              v239 = (_QWORD *)((char *)v172 + v238);
              if ( (unsigned __int64)v172 + v238 >= v241 )
              {
                v239 = v172;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v173 = v239;
                v167 = v237;
              }
            }
            else
            {
              v173 = v172;
            }
            *v173 = 0x4074000000000000LL;
            if ( v167 )
            {
              v174 = (_QWORD *)((char *)v173 + v238);
              v239 = (_QWORD *)((char *)v173 + v238);
              if ( (unsigned __int64)v173 + v238 >= v241 )
              {
                v239 = v173;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v174 = v239;
                v167 = v237;
                *v239 = 0LL;
                if ( !v167 )
                {
LABEL_360:
                  v175 = v174;
                  *v174 = 0LL;
LABEL_368:
                  v176 = v175;
LABEL_369:
                  *v176 = 0x3FF0000000000000LL;
                  if ( v167 )
                  {
                    v239 = (_QWORD *)((char *)v176 + v238);
                    if ( (unsigned __int64)v176 + v238 >= v241 )
                    {
                      v239 = v176;
                      cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                      v167 = v237;
                    }
                  }
LABEL_372:
                  memset(&v262[4], 0, 60);
                  v263[0] = (cv *)&v262[8];
                  v263[1] = (cv *)&v264;
                  v264 = 0LL;
                  v265 = 0LL;
                  *(_DWORD *)v262 = 1124007942;
                  cv::Mat_<double>::operator=((cv::Mat *)v262, v167);
                  if ( *(_QWORD *)&v266[56] )
                  {
                    v177 = (unsigned int *)(*(_QWORD *)&v266[56] + 20LL);
                    do
                    {
                      v178 = __ldaxr(v177);
                      v179 = v178 - 1;
                    }
                    while ( __stlxr(v179, v177) );
                    if ( !v179 )
                      cv::Mat::deallocate((cv::Mat *)v266);
                  }
                  *(_QWORD *)&v266[56] = 0LL;
                  memset(&v266[16], 0, 32);
                  if ( *(int *)&v266[4] >= 1 )
                  {
                    v180 = v267;
                    v181 = 0LL;
                    do
                      *(_DWORD *)(v180 + 4 * v181++) = 0;
                    while ( v181 < *(int *)&v266[4] );
                  }
                  *(_OWORD *)v266 = *(_OWORD *)v262;
                  *(_OWORD *)&v266[16] = *(_OWORD *)&v262[16];
                  *(_OWORD *)&v266[32] = *(_OWORD *)&v262[32];
                  *(_OWORD *)&v266[48] = *(_OWORD *)&v262[48];
                  if ( *((__int64 **)&v267 + 1) == &v268 )
                  {
                    v182 = *(_DWORD *)&v262[4];
                  }
                  else
                  {
                    cv::fastFree(*((cv **)&v267 + 1), v36);
                    v182 = *(_DWORD *)&v262[4];
                    *(_QWORD *)&v267 = &v266[8];
                    *((_QWORD *)&v267 + 1) = &v268;
                  }
                  if ( v182 <= 2 )
                  {
                    v184 = v263[1];
                    v268 = *(_QWORD *)v263[1];
                    v269 = *((_QWORD *)v263[1] + 1);
                  }
                  else
                  {
                    v183 = *(_OWORD *)v263;
                    v184 = (cv *)&v264;
                    v263[0] = (cv *)&v262[8];
                    v263[1] = (cv *)&v264;
                    v267 = v183;
                  }
                  *(_DWORD *)v262 = 1124007936;
                  memset(&v262[4], 0, 60);
                  if ( v184 != (cv *)&v264 )
                    cv::fastFree(v184, v36);
                  if ( *(_QWORD *)&v257[13] )
                  {
                    v185 = (unsigned int *)(*(_QWORD *)&v257[13] + 20LL);
                    do
                    {
                      v186 = __ldaxr(v185);
                      v187 = v186 - 1;
                    }
                    while ( __stlxr(v187, v185) );
                    if ( !v187 )
                      cv::Mat::deallocate((cv::Mat *)&v256);
                  }
                  *(_QWORD *)&v257[13] = 0LL;
                  memset(&v257[3], 0, 32);
                  if ( v257[0] >= 1 )
                  {
                    v188 = v258;
                    v189 = 0LL;
                    do
                      v188[v189++] = 0;
                    while ( v189 < v257[0] );
                  }
                  v50 = v259;
                  if ( v259 != (cv *)&v260 )
                    goto LABEL_464;
                  goto LABEL_465;
                }
LABEL_363:
                v175 = (_QWORD *)((char *)v174 + v238);
                v239 = (_QWORD *)((char *)v174 + v238);
                if ( (unsigned __int64)v174 + v238 >= v241 )
                {
                  v239 = v174;
                  cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                  v175 = v239;
                  v167 = v237;
                  *v239 = 0LL;
                  if ( !v167 )
                    goto LABEL_368;
                }
                else
                {
                  *v175 = 0LL;
                }
                v176 = (_QWORD *)((char *)v175 + v238);
                v239 = (_QWORD *)((char *)v175 + v238);
                if ( (unsigned __int64)v175 + v238 >= v241 )
                {
                  v239 = v175;
                  cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                  v176 = v239;
                  v167 = v237;
                }
                goto LABEL_369;
              }
            }
            else
            {
              v174 = v173;
            }
            *v174 = 0LL;
            if ( !v167 )
              goto LABEL_360;
            goto LABEL_363;
          }
        }
        else
        {
          v171 = v170;
        }
        *v171 = 0LL;
        if ( !v167 )
          goto LABEL_347;
        goto LABEL_351;
      }
      v245 = *(_QWORD *)&v257[3];
      if ( v257[0] >= 3 )
      {
        if ( v257[0] == 3 )
        {
          v123 = 0LL;
          v122 = 1LL;
        }
        else
        {
          v123 = v257[0] & 0xFFFFFFFC;
          v158 = vdupq_n_s64(1uLL);
          v159 = v258 + 2;
          v160 = v123;
          v161 = v158;
          do
          {
            v162 = *(v159 - 1);
            v158.n128_u64[0] *= (int)v162;
            v161.n128_u64[0] *= (int)*v159;
            v160 -= 4LL;
            v158.n128_u64[1] *= SHIDWORD(v162);
            v161.n128_u64[1] *= (int)HIDWORD(*v159);
            v159 += 2;
          }
          while ( v160 );
          v122 = v161.n128_u64[0] * v158.n128_u64[0] * v161.n128_u64[1] * v158.n128_u64[1];
          if ( v123 == v257[0] )
            goto LABEL_336;
        }
        v163 = (unsigned int)v257[0] - v123;
        v164 = &v258[v123];
        do
        {
          v165 = *v164++;
          --v163;
          v122 *= v165;
        }
        while ( v163 );
      }
      else
      {
        v122 = v257[2] * (__int64)v257[1];
      }
LABEL_336:
      v246 = *(_QWORD *)&v257[3] + v122 * v15;
      goto LABEL_337;
    }
    if ( v3 != 6 || v4 != 3 )
    {
      v87 = 0;
      v88 = *(_QWORD *)&v266[56];
      if ( !*(_QWORD *)&v266[56] )
        goto LABEL_487;
      goto LABEL_483;
    }
    v256 = 1124007936;
    memset(v257, 0, sizeof(v257));
    v258 = &v257[1];
    v259 = (cv *)&v260;
    v260 = 0LL;
    v261 = 0LL;
    *(_QWORD *)v242 = 0x300000003LL;
    cv::Mat::create((cv::Mat *)&v256, 2, v242, 6);
    *(_QWORD *)v242 = &v256;
    if ( v257[0] < 1 )
      v52 = 0LL;
    else
      v52 = *((_QWORD *)v259 + v257[0] - 1);
    v243 = v52;
    v244 = 0LL;
    v245 = 0LL;
    v246 = 0LL;
    if ( (v256 & 0x4000) == 0 )
    {
LABEL_404:
      cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 0LL, 0);
      v198 = v244;
      *v244 = 0x407AB00000000000LL;
      v199 = *(cv::Mat **)v242;
      if ( *(_QWORD *)v242 )
      {
        v244 = (_QWORD *)((char *)v198 + v243);
        if ( (unsigned __int64)v198 + v243 >= v246 )
        {
          v244 = v198;
          cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 1LL, 1);
          v199 = *(cv::Mat **)v242;
          v198 = v244;
        }
        else
        {
          v198 = (_QWORD *)((char *)v198 + v243);
        }
      }
      v200 = v243;
      v201 = v246;
      v237 = v199;
      v238 = v243;
      v239 = v198;
      v240 = v245;
      v241 = v246;
      *v198 = 0LL;
      if ( !v199 )
      {
        *v198 = 0x3FF0000000000000LL;
        goto LABEL_439;
      }
      v202 = (_QWORD *)((char *)v198 + v200);
      v239 = v202;
      if ( (unsigned __int64)v202 >= v201 )
      {
        v239 = v198;
        cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
        v202 = v239;
        v199 = v237;
      }
      *v202 = 0x4074000000000000LL;
      if ( v199 )
      {
        v203 = (_QWORD *)((char *)v202 + v238);
        v239 = (_QWORD *)((char *)v202 + v238);
        if ( (unsigned __int64)v202 + v238 >= v241 )
        {
          v239 = v202;
          cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
          v203 = v239;
          v199 = v237;
          *v239 = 0LL;
          if ( !v199 )
          {
LABEL_414:
            v204 = v203;
            goto LABEL_420;
          }
LABEL_418:
          v204 = (_QWORD *)((char *)v203 + v238);
          v239 = (_QWORD *)((char *)v203 + v238);
          if ( (unsigned __int64)v203 + v238 >= v241 )
          {
            v239 = v203;
            cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
            v204 = v239;
            v199 = v237;
          }
LABEL_420:
          *v204 = 0x407AB00000000000LL;
          if ( v199 )
          {
            v205 = (_QWORD *)((char *)v204 + v238);
            v239 = (_QWORD *)((char *)v204 + v238);
            if ( (unsigned __int64)v204 + v238 >= v241 )
            {
              v239 = v204;
              cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
              v205 = v239;
              v199 = v237;
            }
          }
          else
          {
            v205 = v204;
          }
          *v205 = 0x4069000000000000LL;
          if ( v199 )
          {
            v206 = (_QWORD *)((char *)v205 + v238);
            v239 = (_QWORD *)((char *)v205 + v238);
            if ( (unsigned __int64)v205 + v238 >= v241 )
            {
              v239 = v205;
              cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
              v206 = v239;
              v199 = v237;
              *v239 = 0LL;
              if ( !v199 )
              {
LABEL_427:
                v207 = v206;
                *v206 = 0LL;
LABEL_435:
                v208 = v207;
LABEL_436:
                *v208 = 0x3FF0000000000000LL;
                if ( v199 )
                {
                  v239 = (_QWORD *)((char *)v208 + v238);
                  if ( (unsigned __int64)v208 + v238 >= v241 )
                  {
                    v239 = v208;
                    cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                    v199 = v237;
                  }
                }
LABEL_439:
                memset(&v262[4], 0, 60);
                v263[0] = (cv *)&v262[8];
                v263[1] = (cv *)&v264;
                v264 = 0LL;
                v265 = 0LL;
                *(_DWORD *)v262 = 1124007942;
                cv::Mat_<double>::operator=((cv::Mat *)v262, v199);
                if ( *(_QWORD *)&v266[56] )
                {
                  v209 = (unsigned int *)(*(_QWORD *)&v266[56] + 20LL);
                  do
                  {
                    v210 = __ldaxr(v209);
                    v211 = v210 - 1;
                  }
                  while ( __stlxr(v211, v209) );
                  if ( !v211 )
                    cv::Mat::deallocate((cv::Mat *)v266);
                }
                *(_QWORD *)&v266[56] = 0LL;
                memset(&v266[16], 0, 32);
                if ( *(int *)&v266[4] >= 1 )
                {
                  v212 = v267;
                  v213 = 0LL;
                  do
                    *(_DWORD *)(v212 + 4 * v213++) = 0;
                  while ( v213 < *(int *)&v266[4] );
                }
                *(_OWORD *)v266 = *(_OWORD *)v262;
                *(_OWORD *)&v266[16] = *(_OWORD *)&v262[16];
                *(_OWORD *)&v266[32] = *(_OWORD *)&v262[32];
                *(_OWORD *)&v266[48] = *(_OWORD *)&v262[48];
                if ( *((__int64 **)&v267 + 1) == &v268 )
                {
                  v214 = *(_DWORD *)&v262[4];
                }
                else
                {
                  cv::fastFree(*((cv **)&v267 + 1), v36);
                  v214 = *(_DWORD *)&v262[4];
                  *(_QWORD *)&v267 = &v266[8];
                  *((_QWORD *)&v267 + 1) = &v268;
                }
                if ( v214 <= 2 )
                {
                  v216 = v263[1];
                  v268 = *(_QWORD *)v263[1];
                  v269 = *((_QWORD *)v263[1] + 1);
                }
                else
                {
                  v215 = *(_OWORD *)v263;
                  v216 = (cv *)&v264;
                  v263[0] = (cv *)&v262[8];
                  v263[1] = (cv *)&v264;
                  v267 = v215;
                }
                *(_DWORD *)v262 = 1124007936;
                memset(&v262[4], 0, 60);
                if ( v216 != (cv *)&v264 )
                  cv::fastFree(v216, v36);
                if ( *(_QWORD *)&v257[13] )
                {
                  v217 = (unsigned int *)(*(_QWORD *)&v257[13] + 20LL);
                  do
                  {
                    v218 = __ldaxr(v217);
                    v219 = v218 - 1;
                  }
                  while ( __stlxr(v219, v217) );
                  if ( !v219 )
                    cv::Mat::deallocate((cv::Mat *)&v256);
                }
                *(_QWORD *)&v257[13] = 0LL;
                memset(&v257[3], 0, 32);
                if ( v257[0] >= 1 )
                {
                  v220 = v258;
                  v221 = 0LL;
                  do
                    v220[v221++] = 0;
                  while ( v221 < v257[0] );
                }
                v50 = v259;
                if ( v259 != (cv *)&v260 )
                  goto LABEL_464;
                goto LABEL_465;
              }
LABEL_430:
              v207 = (_QWORD *)((char *)v206 + v238);
              v239 = (_QWORD *)((char *)v206 + v238);
              if ( (unsigned __int64)v206 + v238 >= v241 )
              {
                v239 = v206;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v207 = v239;
                v199 = v237;
                *v239 = 0LL;
                if ( !v199 )
                  goto LABEL_435;
              }
              else
              {
                *v207 = 0LL;
              }
              v208 = (_QWORD *)((char *)v207 + v238);
              v239 = (_QWORD *)((char *)v207 + v238);
              if ( (unsigned __int64)v207 + v238 >= v241 )
              {
                v239 = v207;
                cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
                v208 = v239;
                v199 = v237;
              }
              goto LABEL_436;
            }
          }
          else
          {
            v206 = v205;
          }
          *v206 = 0LL;
          if ( !v199 )
            goto LABEL_427;
          goto LABEL_430;
        }
      }
      else
      {
        v203 = v202;
      }
      *v203 = 0LL;
      if ( !v199 )
        goto LABEL_414;
      goto LABEL_418;
    }
    v245 = *(_QWORD *)&v257[3];
    if ( v257[0] >= 3 )
    {
      if ( v257[0] == 3 )
      {
        v157 = 0LL;
        v156 = 1LL;
      }
      else
      {
        v157 = v257[0] & 0xFFFFFFFC;
        v190 = vdupq_n_s64(1uLL);
        v191 = v258 + 2;
        v192 = v157;
        v193 = v190;
        do
        {
          v194 = *(v191 - 1);
          v190.n128_u64[0] *= (int)v194;
          v193.n128_u64[0] *= (int)*v191;
          v192 -= 4LL;
          v190.n128_u64[1] *= SHIDWORD(v194);
          v193.n128_u64[1] *= (int)HIDWORD(*v191);
          v191 += 2;
        }
        while ( v192 );
        v156 = v193.n128_u64[0] * v190.n128_u64[0] * v193.n128_u64[1] * v190.n128_u64[1];
        if ( v157 == v257[0] )
          goto LABEL_403;
      }
      v195 = (unsigned int)v257[0] - v157;
      v196 = &v258[v157];
      do
      {
        v197 = *v196++;
        --v195;
        v156 *= v197;
      }
      while ( v195 );
    }
    else
    {
      v156 = v257[2] * (__int64)v257[1];
    }
LABEL_403:
    v246 = *(_QWORD *)&v257[3] + v156 * v52;
    goto LABEL_404;
  }
  v256 = 1124007936;
  memset(v257, 0, sizeof(v257));
  v258 = &v257[1];
  v259 = (cv *)&v260;
  v260 = 0LL;
  v261 = 0LL;
  *(_QWORD *)v242 = 0x300000003LL;
  cv::Mat::create((cv::Mat *)&v256, 2, v242, 6);
  *(_QWORD *)v242 = &v256;
  if ( v257[0] < 1 )
    v8 = 0LL;
  else
    v8 = *((_QWORD *)v259 + v257[0] - 1);
  v243 = v8;
  v244 = 0LL;
  v245 = 0LL;
  v246 = 0LL;
  if ( (v256 & 0x4000) != 0 )
  {
    v245 = *(_QWORD *)&v257[3];
    if ( v257[0] >= 3 )
    {
      if ( v257[0] == 3 )
      {
        v13 = 0LL;
        v11 = 1LL;
      }
      else
      {
        v13 = v257[0] & 0xFFFFFFFC;
        v17 = vdupq_n_s64(1uLL);
        v18 = v258 + 2;
        v19 = v13;
        v20 = v17;
        do
        {
          v21 = *(v18 - 1);
          v17.n128_u64[0] *= (int)v21;
          v20.n128_u64[0] *= (int)*v18;
          v19 -= 4LL;
          v17.n128_u64[1] *= SHIDWORD(v21);
          v20.n128_u64[1] *= (int)HIDWORD(*v18);
          v18 += 2;
        }
        while ( v19 );
        v11 = v20.n128_u64[0] * v17.n128_u64[0] * v20.n128_u64[1] * v17.n128_u64[1];
        if ( v13 == v257[0] )
          goto LABEL_38;
      }
      v22 = (unsigned int)v257[0] - v13;
      v23 = &v258[v13];
      do
      {
        v24 = *v23++;
        --v22;
        v11 *= v24;
      }
      while ( v22 );
    }
    else
    {
      v11 = v257[2] * (__int64)v257[1];
    }
LABEL_38:
    v246 = *(_QWORD *)&v257[3] + v11 * v8;
  }
  cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 0LL, 0);
  v25 = v244;
  *v244 = 0x40820AAA40000000LL;
  v26 = *(cv::Mat **)v242;
  if ( *(_QWORD *)v242 )
  {
    v244 = (_QWORD *)((char *)v25 + v243);
    if ( (unsigned __int64)v25 + v243 >= v246 )
    {
      v244 = v25;
      cv::MatConstIterator::seek((cv::MatConstIterator *)v242, 1LL, 1);
      v26 = *(cv::Mat **)v242;
      v25 = v244;
    }
    else
    {
      v25 = (_QWORD *)((char *)v25 + v243);
    }
  }
  v27 = v243;
  v28 = v246;
  v237 = v26;
  v238 = v243;
  v239 = v25;
  v240 = v245;
  v241 = v246;
  *v25 = 0LL;
  if ( !v26 )
  {
    *v25 = 0x3FF0000000000000LL;
    goto LABEL_74;
  }
  v29 = (_QWORD *)((char *)v25 + v27);
  v239 = v29;
  if ( (unsigned __int64)v29 >= v28 )
  {
    v239 = v25;
    cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
    v29 = v239;
    v26 = v237;
  }
  *v29 = 0x4073CB48A0000000LL;
  if ( !v26 )
  {
    v30 = v29;
    *v29 = 0LL;
LABEL_54:
    v31 = v30;
    goto LABEL_55;
  }
  v30 = (_QWORD *)((char *)v29 + v238);
  v239 = (_QWORD *)((char *)v29 + v238);
  if ( (unsigned __int64)v29 + v238 >= v241 )
  {
    v239 = v29;
    cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
    v30 = v239;
    v26 = v237;
  }
  *v30 = 0LL;
  if ( !v26 )
    goto LABEL_54;
  v31 = (_QWORD *)((char *)v30 + v238);
  v239 = (_QWORD *)((char *)v30 + v238);
  if ( (unsigned __int64)v30 + v238 >= v241 )
  {
    v239 = v30;
    cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
    v31 = v239;
    v26 = v237;
  }
LABEL_55:
  *v31 = 0x40820AAA40000000LL;
  if ( v26 )
  {
    v32 = (_QWORD *)((char *)v31 + v238);
    v239 = (_QWORD *)((char *)v31 + v238);
    if ( (unsigned __int64)v31 + v238 >= v241 )
    {
      v239 = v31;
      cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
      v32 = v239;
      v26 = v237;
    }
  }
  else
  {
    v32 = v31;
  }
  *v32 = 0x406E22C500000000LL;
  if ( !v26 )
  {
    v33 = v32;
    *v32 = 0LL;
LABEL_69:
    v34 = v33;
    *v33 = 0LL;
    goto LABEL_70;
  }
  v33 = (_QWORD *)((char *)v32 + v238);
  v239 = (_QWORD *)((char *)v32 + v238);
  if ( (unsigned __int64)v32 + v238 >= v241 )
  {
    v239 = v32;
    cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
    v33 = v239;
    v26 = v237;
  }
  *v33 = 0LL;
  if ( !v26 )
    goto LABEL_69;
  v34 = (_QWORD *)((char *)v33 + v238);
  v239 = (_QWORD *)((char *)v33 + v238);
  if ( (unsigned __int64)v33 + v238 >= v241 )
  {
    v239 = v33;
    cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
    v34 = v239;
    v26 = v237;
  }
  *v34 = 0LL;
  if ( v26 )
  {
    v35 = (_QWORD *)((char *)v34 + v238);
    v239 = (_QWORD *)((char *)v34 + v238);
    if ( (unsigned __int64)v34 + v238 >= v241 )
    {
      v239 = v34;
      cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
      v35 = v239;
      v26 = v237;
    }
    goto LABEL_71;
  }
LABEL_70:
  v35 = v34;
LABEL_71:
  *v35 = 0x3FF0000000000000LL;
  if ( v26 )
  {
    v239 = (_QWORD *)((char *)v35 + v238);
    if ( (unsigned __int64)v35 + v238 >= v241 )
    {
      v239 = v35;
      cv::MatConstIterator::seek((cv::MatConstIterator *)&v237, 1LL, 1);
      v26 = v237;
    }
  }
LABEL_74:
  memset(&v262[4], 0, 60);
  v263[0] = (cv *)&v262[8];
  v263[1] = (cv *)&v264;
  v264 = 0LL;
  v265 = 0LL;
  *(_DWORD *)v262 = 1124007942;
  cv::Mat_<double>::operator=((cv::Mat *)v262, v26);
  if ( *(_QWORD *)&v266[56] )
  {
    v37 = (unsigned int *)(*(_QWORD *)&v266[56] + 20LL);
    do
    {
      v38 = __ldaxr(v37);
      v39 = v38 - 1;
    }
    while ( __stlxr(v39, v37) );
    if ( !v39 )
      cv::Mat::deallocate((cv::Mat *)v266);
  }
  *(_QWORD *)&v266[56] = 0LL;
  memset(&v266[16], 0, 32);
  if ( *(int *)&v266[4] >= 1 )
  {
    v40 = v267;
    v41 = 0LL;
    do
      *(_DWORD *)(v40 + 4 * v41++) = 0;
    while ( v41 < *(int *)&v266[4] );
  }
  *(_OWORD *)v266 = *(_OWORD *)v262;
  *(_OWORD *)&v266[16] = *(_OWORD *)&v262[16];
  *(_OWORD *)&v266[32] = *(_OWORD *)&v262[32];
  *(_OWORD *)&v266[48] = *(_OWORD *)&v262[48];
  if ( *((__int64 **)&v267 + 1) == &v268 )
  {
    v42 = *(_DWORD *)&v262[4];
  }
  else
  {
    cv::fastFree(*((cv **)&v267 + 1), v36);
    v42 = *(_DWORD *)&v262[4];
    *(_QWORD *)&v267 = &v266[8];
    *((_QWORD *)&v267 + 1) = &v268;
  }
  if ( v42 <= 2 )
  {
    v44 = v263[1];
    v268 = *(_QWORD *)v263[1];
    v269 = *((_QWORD *)v263[1] + 1);
  }
  else
  {
    v43 = *(_OWORD *)v263;
    v44 = (cv *)&v264;
    v263[0] = (cv *)&v262[8];
    v263[1] = (cv *)&v264;
    v267 = v43;
  }
  *(_DWORD *)v262 = 1124007936;
  memset(&v262[4], 0, 60);
  if ( v44 != (cv *)&v264 )
    cv::fastFree(v44, v36);
  if ( *(_QWORD *)&v257[13] )
  {
    v45 = (unsigned int *)(*(_QWORD *)&v257[13] + 20LL);
    do
    {
      v46 = __ldaxr(v45);
      v47 = v46 - 1;
    }
    while ( __stlxr(v47, v45) );
    if ( !v47 )
      cv::Mat::deallocate((cv::Mat *)&v256);
  }
  *(_QWORD *)&v257[13] = 0LL;
  memset(&v257[3], 0, 32);
  if ( v257[0] >= 1 )
  {
    v48 = v258;
    v49 = 0LL;
    do
      v48[v49++] = 0;
    while ( v49 < v257[0] );
  }
  v50 = v259;
  if ( v259 != (cv *)&v260 )
LABEL_464:
    cv::fastFree(v50, v36);
LABEL_465:
  v247 = *(_DWORD *)v266;
  v248 = *(_QWORD *)&v266[4];
  v249 = *(_DWORD *)&v266[12];
  v250 = *(_OWORD *)&v266[16];
  v251 = *(_OWORD *)&v266[32];
  v252 = *(_OWORD *)&v266[48];
  v253 = (__int64)&v248 + 4;
  v254 = (cv *)v255;
  v255[0] = 0LL;
  v255[1] = 0LL;
  if ( *(_QWORD *)&v266[56] )
  {
    v222 = (unsigned int *)(*(_QWORD *)&v266[56] + 20LL);
    do
      v223 = __ldaxr(v222);
    while ( __stlxr(v223 + 1, v222) );
    if ( *(int *)&v266[4] <= 2 )
      goto LABEL_469;
LABEL_471:
    LODWORD(v248) = 0;
    cv::Mat::copySize((cv::Mat *)&v247, (const cv::Mat *)v266);
    goto LABEL_472;
  }
  if ( *(int *)&v266[4] > 2 )
    goto LABEL_471;
LABEL_469:
  v224 = *((_QWORD *)&v267 + 1);
  v225 = v254;
  *(_QWORD *)v254 = **((_QWORD **)&v267 + 1);
  *((_QWORD *)v225 + 1) = *(_QWORD *)(v224 + 8);
LABEL_472:
  checktool::init((char *)this + 16, &v247, *a2, (unsigned int)*a3);
  if ( *((_QWORD *)&v252 + 1) )
  {
    v226 = (unsigned int *)(*((_QWORD *)&v252 + 1) + 20LL);
    do
    {
      v227 = __ldaxr(v226);
      v228 = v227 - 1;
    }
    while ( __stlxr(v228, v226) );
    if ( !v228 )
      cv::Mat::deallocate((cv::Mat *)&v247);
  }
  *((_QWORD *)&v252 + 1) = 0LL;
  v250 = 0u;
  v251 = 0u;
  if ( (int)v248 >= 1 )
  {
    v229 = v253;
    v230 = 0LL;
    do
      *(_DWORD *)(v229 + 4 * v230++) = 0;
    while ( v230 < (int)v248 );
  }
  if ( v254 != (cv *)v255 )
    cv::fastFree(v254, a2);
  v87 = 1;
  v88 = *(_QWORD *)&v266[56];
  if ( *(_QWORD *)&v266[56] )
  {
LABEL_483:
    v231 = (unsigned int *)(v88 + 20);
    do
    {
      v232 = __ldaxr(v231);
      v233 = v232 - 1;
    }
    while ( __stlxr(v233, v231) );
    if ( !v233 )
      cv::Mat::deallocate((cv::Mat *)v266);
  }
LABEL_487:
  *(_QWORD *)&v266[56] = 0LL;
  memset(&v266[16], 0, 32);
  if ( *(int *)&v266[4] >= 1 )
  {
    v234 = v267;
    v235 = 0LL;
    do
      *(_DWORD *)(v234 + 4 * v235++) = 0;
    while ( v235 < *(int *)&v266[4] );
  }
  if ( *((__int64 **)&v267 + 1) != &v268 )
    cv::fastFree(*((cv **)&v267 + 1), a2);
  return v87;
}
// F840: conditional instruction was optimized away because x1.8==0
// FE38: conditional instruction was optimized away because x1.8==0
// 1034C: conditional instruction was optimized away because x1.8==0
// 1037C: conditional instruction was optimized away because x1.8!=0
// 108CC: conditional instruction was optimized away because x1.8==0
// 108FC: conditional instruction was optimized away because x1.8!=0
// 10E24: conditional instruction was optimized away because x1.8==0
// 10E54: conditional instruction was optimized away because x1.8!=0
// 11334: conditional instruction was optimized away because x1.8==0
// 11364: conditional instruction was optimized away because x1.8!=0
// F950: variable 'v36' is possibly undefined
// 116F8: variable 'a2' is possibly undefined
// A760: using guessed type __int64 __fastcall checktool::init(_QWORD, _QWORD, _QWORD, _QWORD);

//----- (0000000000012168) ----------------------------------------------------
cv::Mat *__fastcall cv::Mat::operator=(cv::Mat *this, cv::Mat *a2)
{
  __int64 v3; // x8
  unsigned int *v5; // x8
  unsigned int v6; // w9
  unsigned int v7; // w9
  int v8; // w8
  __int64 v9; // x8
  __int64 v10; // x9
  cv *v11; // x0
  _QWORD *v12; // x9

  if ( this != a2 )
  {
    v3 = *((_QWORD *)this + 7);
    if ( v3 )
    {
      v5 = (unsigned int *)(v3 + 20);
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while ( __stlxr(v7, v5) );
      if ( !v7 )
        cv::Mat::deallocate(this);
    }
    v8 = *((_DWORD *)this + 1);
    *((_QWORD *)this + 7) = 0LL;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    if ( v8 >= 1 )
    {
      v9 = *((_QWORD *)this + 8);
      v10 = 0LL;
      do
        *(_DWORD *)(v9 + 4 * v10++) = 0;
      while ( v10 < *((int *)this + 1) );
    }
    v11 = (cv *)*((_QWORD *)this + 9);
    *(_OWORD *)this = *(_OWORD *)a2;
    *((_OWORD *)this + 1) = *((_OWORD *)a2 + 1);
    *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)this + 3) = *((_OWORD *)a2 + 3);
    if ( v11 != (cv::Mat *)((char *)this + 80) )
    {
      cv::fastFree(v11, a2);
      v11 = (cv::Mat *)((char *)this + 80);
      *((_QWORD *)this + 8) = (char *)this + 8;
      *((_QWORD *)this + 9) = (char *)this + 80;
    }
    if ( *((int *)a2 + 1) <= 2 )
    {
      v12 = (_QWORD *)*((_QWORD *)a2 + 9);
      *(_QWORD *)v11 = *v12;
      *((_QWORD *)v11 + 1) = v12[1];
    }
    else
    {
      *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
      *((_QWORD *)a2 + 8) = (char *)a2 + 8;
      *((_QWORD *)a2 + 9) = (char *)a2 + 80;
    }
    *(_DWORD *)a2 = 1124007936;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)((char *)a2 + 20) = 0u;
    *(_OWORD *)((char *)a2 + 36) = 0u;
    *(_OWORD *)((char *)a2 + 4) = 0u;
  }
  return this;
}
// 12218: variable 'a2' is possibly undefined

//----- (000000000001228C) ----------------------------------------------------
bool __fastcall rgbd::RGBDCheck::runCheckTool(rgbd::RGBDCheck *this, const int *a2, int *a3, int *a4)
{
  _DWORD *Memory; // x0
  const void *v8; // x23
  __int64 v9; // x10
  size_t v10; // x22
  void *v11; // x1
  __int64 v12; // x0
  __int64 v13; // x9
  _BOOL4 v14; // w19
  const char *v15; // x20
  size_t v16; // x0
  size_t v17; // x19
  char *v18; // x21
  unsigned __int64 v19; // x22
  const void *v20; // x19
  size_t v21; // x0
  size_t v22; // x20
  char *v23; // x21
  char v24; // w19
  int v25; // w0
  void *v26; // x0
  __int64 v27; // x9
  __int64 v28; // x8
  unsigned __int64 v29; // x22
  std::__shared_weak_count *v30; // x20
  __int64 v31; // x0
  int v32; // w8
  int v33; // w9
  int v34; // w11
  __int64 v35; // x12
  unsigned int *v36; // x8
  unsigned int v37; // w9
  unsigned int v38; // w9
  __int64 v39; // x8
  __int64 v40; // x9
  void *v41; // x1
  unsigned int *v42; // x8
  unsigned int v43; // w9
  unsigned int v44; // w9
  __int64 v45; // x8
  __int64 v46; // x9
  unsigned __int64 *v47; // x8
  unsigned __int64 v48; // x9
  _DWORD v50[4]; // [xsp+0h] [xbp-290h] BYREF
  void *v51; // [xsp+10h] [xbp-280h]
  void *v52[3]; // [xsp+18h] [xbp-278h] BYREF
  char v53[4]; // [xsp+34h] [xbp-25Ch] BYREF
  unsigned __int64 v54; // [xsp+38h] [xbp-258h] BYREF
  size_t v55; // [xsp+40h] [xbp-250h]
  void *v56; // [xsp+48h] [xbp-248h]
  int v57; // [xsp+50h] [xbp-240h] BYREF
  unsigned __int64 v58; // [xsp+58h] [xbp-238h] BYREF
  size_t v59; // [xsp+60h] [xbp-230h]
  void *v60; // [xsp+68h] [xbp-228h]
  pudutech::Ashdmem *v61; // [xsp+70h] [xbp-220h] BYREF
  std::__shared_weak_count *v62; // [xsp+78h] [xbp-218h]
  int v63; // [xsp+84h] [xbp-20Ch] BYREF
  int v64; // [xsp+88h] [xbp-208h] BYREF
  int v65; // [xsp+8Ch] [xbp-204h] BYREF
  void *v66[2]; // [xsp+90h] [xbp-200h] BYREF
  void *src[2]; // [xsp+A0h] [xbp-1F0h]
  __int128 v68; // [xsp+B0h] [xbp-1E0h]
  __int64 v69; // [xsp+C8h] [xbp-1C8h]
  __int64 v70; // [xsp+D0h] [xbp-1C0h]
  cv *v71; // [xsp+D8h] [xbp-1B8h]
  __int64 v72; // [xsp+E0h] [xbp-1B0h] BYREF
  __int64 v73; // [xsp+F0h] [xbp-1A0h] BYREF
  __int64 v74; // [xsp+F8h] [xbp-198h] BYREF
  __int128 v75; // [xsp+100h] [xbp-190h]
  __int128 v76; // [xsp+110h] [xbp-180h]
  __int64 v77; // [xsp+120h] [xbp-170h]
  __int64 v78; // [xsp+128h] [xbp-168h]
  __int64 *v79; // [xsp+130h] [xbp-160h]
  cv *v80; // [xsp+138h] [xbp-158h]
  __int64 v81[32]; // [xsp+140h] [xbp-150h] BYREF

  v81[31] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( *a2 == -1 )
    return 0;
  pudutech::Ashdmem::useMemory(&v61, (pudutech::Ashdmem *)*(unsigned int *)a2, (int)a2);
  if ( !v61 )
    goto LABEL_40;
  Memory = (_DWORD *)pudutech::Ashdmem::getMemory(v61);
  v8 = Memory;
  if ( !Memory )
  {
    if ( (word_29E90 & 1) != 0 )
      v15 = (const char *)qword_29EA0;
    else
      v15 = (char *)&word_29E90 + 1;
    v57 = dword_29E88;
    v59 = 0LL;
    v60 = 0LL;
    v58 = 0LL;
    v16 = strlen(v15);
    if ( v16 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v17 = v16;
    if ( v16 >= 0x17 )
    {
      v19 = (v16 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v18 = (char *)operator new(v19);
      v59 = v17;
      v60 = v18;
      v58 = v19 | 1;
    }
    else
    {
      v18 = (char *)&v58 + 1;
      LOBYTE(v58) = 2 * v16;
      if ( !v16 )
      {
LABEL_17:
        v18[v17] = 0;
        if ( (g3::logLevel(&v57) & 1) == 0 )
        {
          v24 = 0;
          if ( (v58 & 1) == 0 )
            goto LABEL_38;
          goto LABEL_23;
        }
        v55 = 0LL;
        v56 = 0LL;
        v54 = 0LL;
        v20 = rgbd::TAG;
        v21 = strlen((const char *)rgbd::TAG);
        if ( v21 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v22 = v21;
        if ( v21 >= 0x17 )
        {
          v29 = (v21 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v23 = (char *)operator new(v29);
          v55 = v22;
          v56 = v23;
          v54 = v29 | 1;
        }
        else
        {
          v23 = (char *)&v54 + 1;
          LOBYTE(v54) = 2 * v21;
          if ( !v21 )
          {
LABEL_36:
            v23[v22] = 0;
            v24 = g3::logTag(&v54);
            if ( (v54 & 1) != 0 )
            {
              operator delete(v56);
              if ( (v58 & 1) == 0 )
              {
LABEL_38:
                if ( (v24 & 1) == 0 )
                  goto LABEL_40;
                goto LABEL_39;
              }
            }
            else if ( (v58 & 1) == 0 )
            {
              goto LABEL_38;
            }
LABEL_23:
            operator delete(v60);
            if ( (v24 & 1) == 0 )
              goto LABEL_40;
LABEL_39:
            LogCapture::LogCapture(
              (LogCapture *)&v73,
              (const char *)rgbd::TAG,
              (const LEVELS *)&dword_29E88,
              "",
              6,
              0LL);
            std::__put_character_sequence<char,std::char_traits<char>>(&v74, (__int64)"recv null data", 14LL);
            LogCapture::~LogCapture((LogCapture *)&v73);
LABEL_40:
            v14 = 0;
            v30 = v62;
            if ( !v62 )
              return v14;
            goto LABEL_71;
          }
        }
        memcpy(v23, v20, v22);
        goto LABEL_36;
      }
    }
    memcpy(v18, v15, v17);
    goto LABEL_17;
  }
  v9 = *a4;
  v10 = Memory[15] + 64;
  LODWORD(v74) = *a3;
  HIDWORD(v74) = v9;
  *(_QWORD *)&v75 = (char *)Memory + v10;
  *((_QWORD *)&v75 + 1) = (char *)Memory + v10;
  v73 = 0x242FF0002LL;
  v77 = 0LL;
  v78 = 0LL;
  v79 = &v74;
  v80 = (cv *)v81;
  v81[0] = 2 * v9;
  v81[1] = 2LL;
  *(_QWORD *)&v76 = (char *)Memory + v10 + 2 * v9 * (int)v74;
  *((_QWORD *)&v76 + 1) = v76;
  cv::Mat::updateContinuityFlag((cv::Mat *)&v73);
  v53[0] = 0;
  memset(v52, 0, sizeof(v52));
  std::vector<cv::Mat>::__append((__int64 *)v52, 5uLL, (cv::Mat *)&v73);
  checktool::runcheck(v66, (char *)this + 16, v52, &qword_29FD8, v53);
  if ( (pudutech::Ashdmem::destroyMemory(*((pudutech::Ashdmem **)this + 115)) & 1) != 0 )
  {
    v12 = *((_QWORD *)this + 115);
    v51 = 0LL;
    LOBYTE(v50[0]) = 26;
    strcpy((char *)v50 + 1, "RgbdCheckTool");
    HIBYTE(v50[3]) = 0;
    if ( SHIDWORD(v66[0]) < 1 )
      LODWORD(v13) = 0;
    else
      v13 = *((_QWORD *)v71 + HIDWORD(v66[0]) - 1);
    v25 = pudutech::Ashdmem::createMemory(v12, v50, (unsigned int)(v10 + *a4 * *a3 * v13));
    *((_DWORD *)this + 236) = v25;
    *((_QWORD *)this + 117) = v11;
    if ( (v50[0] & 1) != 0 )
    {
      operator delete(v51);
      v25 = *((_DWORD *)this + 236);
    }
    if ( v25 == -1 || (v26 = (void *)*((_QWORD *)this + 117)) == 0LL )
    {
      v14 = 0;
      v28 = v69;
      if ( !v69 )
        goto LABEL_55;
      goto LABEL_51;
    }
    memcpy(v26, v8, v10);
    if ( SHIDWORD(v66[0]) < 1 )
      v27 = 0LL;
    else
      v27 = *((_QWORD *)v71 + HIDWORD(v66[0]) - 1);
    memcpy((void *)(*((_QWORD *)this + 117) + v10), src[0], v27 * *a4 * (__int64)*a3);
    v31 = *((_QWORD *)this + 124);
    if ( v31 )
    {
      v32 = *a3;
      v33 = *a4;
      v34 = *a4 * *a3;
      if ( SHIDWORD(v66[0]) < 1 )
        LODWORD(v35) = 0;
      else
        v35 = *((_QWORD *)v71 + HIDWORD(v66[0]) - 1);
      v50[0] = *((_DWORD *)this + 236);
      v64 = v33;
      v65 = v32;
      v63 = v10 + v34 * v35;
      (*(void (__fastcall **)(__int64, _DWORD *, int *, int *, int *))(*(_QWORD *)v31 + 48LL))(
        v31,
        v50,
        &v65,
        &v64,
        &v63);
    }
  }
  v14 = v53[0] != 0;
  v28 = v69;
  if ( !v69 )
    goto LABEL_55;
LABEL_51:
  v36 = (unsigned int *)(v28 + 20);
  do
  {
    v37 = __ldaxr(v36);
    v38 = v37 - 1;
  }
  while ( __stlxr(v38, v36) );
  if ( !v38 )
    cv::Mat::deallocate((cv::Mat *)v66);
LABEL_55:
  v69 = 0LL;
  *(_OWORD *)src = 0u;
  v68 = 0u;
  if ( SHIDWORD(v66[0]) >= 1 )
  {
    v39 = v70;
    v40 = 0LL;
    do
      *(_DWORD *)(v39 + 4 * v40++) = 0;
    while ( v40 < SHIDWORD(v66[0]) );
  }
  if ( v71 != (cv *)&v72 )
    cv::fastFree(v71, v11);
  sub_129F4(v52, v11);
  if ( v78 )
  {
    v42 = (unsigned int *)(v78 + 20);
    do
    {
      v43 = __ldaxr(v42);
      v44 = v43 - 1;
    }
    while ( __stlxr(v44, v42) );
    if ( !v44 )
      cv::Mat::deallocate((cv::Mat *)&v73);
  }
  v78 = 0LL;
  v75 = 0u;
  v76 = 0u;
  if ( SHIDWORD(v73) >= 1 )
  {
    v45 = (__int64)v79;
    v46 = 0LL;
    do
      *(_DWORD *)(v45 + 4 * v46++) = 0;
    while ( v46 < SHIDWORD(v73) );
  }
  if ( v80 != (cv *)v81 )
    cv::fastFree(v80, v41);
  v30 = v62;
  if ( v62 )
  {
LABEL_71:
    v47 = (unsigned __int64 *)((char *)v30 + 8);
    do
      v48 = __ldaxr(v47);
    while ( __stlxr(v48 - 1, v47) );
    if ( !v48 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v30 + 16LL))(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  return v14;
}
// 1250C: variable 'v11' is possibly undefined
// 127A0: variable 'v41' is possibly undefined
// A660: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// A680: using guessed type __int64 __fastcall pudutech::Ashdmem::createMemory(_QWORD, _QWORD, _QWORD);
// A950: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// AA20: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// AA80: using guessed type _QWORD *__fastcall checktool::runcheck(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
// 290A0: using guessed type void *rgbd::TAG;
// 29E88: using guessed type int dword_29E88;
// 29E90: using guessed type __int16 word_29E90;
// 29EA0: using guessed type __int64 qword_29EA0;
// 29FD8: using guessed type __int64 qword_29FD8;
// 1228C: using guessed type char var_25C[4];

//----- (00000000000129F4) ----------------------------------------------------
void __fastcall sub_129F4(void **a1, void *a2)
{
  char *v2; // x21
  char *v3; // x22
  __int64 v5; // x8
  char *v6; // x20
  unsigned int *v7; // x8
  unsigned int v8; // w9
  unsigned int v9; // w9
  int v10; // w8
  __int64 v11; // x8
  __int64 v12; // x9
  cv *v13; // x0
  void *v14; // x0

  v2 = (char *)*a1;
  if ( *a1 )
  {
    v3 = (char *)a1[1];
    if ( v3 == v2 )
    {
      v14 = *a1;
    }
    else
    {
      do
      {
        v5 = *((_QWORD *)v3 - 5);
        v6 = v3 - 96;
        if ( v5 )
        {
          v7 = (unsigned int *)(v5 + 20);
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while ( __stlxr(v9, v7) );
          if ( !v9 )
            cv::Mat::deallocate((cv::Mat *)(v3 - 96));
        }
        v10 = *((_DWORD *)v3 - 23);
        *((_QWORD *)v3 - 5) = 0LL;
        *((_OWORD *)v3 - 5) = 0u;
        *((_OWORD *)v3 - 4) = 0u;
        if ( v10 >= 1 )
        {
          v11 = *((_QWORD *)v3 - 4);
          v12 = 0LL;
          do
            *(_DWORD *)(v11 + 4 * v12++) = 0;
          while ( v12 < *((int *)v3 - 23) );
        }
        v13 = (cv *)*((_QWORD *)v3 - 3);
        if ( v13 != (cv *)(v3 - 16) )
          cv::fastFree(v13, a2);
        v3 -= 96;
      }
      while ( v6 != v2 );
      v14 = *a1;
    }
    a1[1] = v2;
    operator delete(v14);
  }
}
// 12A8C: variable 'a2' is possibly undefined

//----- (0000000000012AD0) ----------------------------------------------------
bool __fastcall rgbd::RGBDCheck::runCheckToolSaveImg(rgbd::RGBDCheck *this, const int *a2, int *a3, int *a4)
{
  _DWORD *Memory; // x0
  const void *v8; // x23
  __int64 v9; // x10
  size_t v10; // x27
  const char *v11; // x25
  size_t v12; // x0
  size_t v13; // x24
  char *v14; // x26
  _BOOL4 v15; // w19
  const char *v16; // x20
  size_t v17; // x0
  size_t v18; // x19
  char *v19; // x21
  unsigned __int64 v20; // x27
  int v21; // w1
  const void *v22; // x24
  size_t v23; // x0
  size_t v24; // x25
  char *v25; // x26
  char v26; // w24
  unsigned __int64 v27; // x22
  const void *v28; // x19
  size_t v29; // x0
  size_t v30; // x20
  char *v31; // x21
  char v32; // w19
  unsigned __int64 v33; // x27
  __int64 *v34; // x0
  __int128 v35; // q0
  char *v36; // x1
  unsigned __int64 v37; // x2
  __int64 *v38; // x0
  __int128 v39; // q0
  int v40; // w1
  __int64 *v41; // x0
  __int128 v42; // q0
  char *v43; // x1
  unsigned __int64 v44; // x2
  __int64 *v45; // x0
  __int128 v46; // q0
  void *v47; // x1
  __int64 v48; // x0
  __int64 v49; // x9
  int v50; // w0
  void *v51; // x0
  __int64 v52; // x9
  __int64 v53; // x8
  unsigned __int64 v54; // x22
  std::__shared_weak_count *v55; // x20
  __int64 v56; // x0
  int v57; // w8
  int v58; // w9
  int v59; // w11
  __int64 v60; // x12
  unsigned int *v61; // x8
  unsigned int v62; // w9
  unsigned int v63; // w9
  __int64 v64; // x8
  __int64 v65; // x9
  void *v66; // x1
  unsigned int *v67; // x8
  unsigned int v68; // w9
  unsigned int v69; // w9
  __int64 v70; // x8
  __int64 v71; // x9
  unsigned __int64 *v72; // x8
  unsigned __int64 v73; // x9
  size_t v75; // [xsp+8h] [xbp-388h]
  void *v76; // [xsp+28h] [xbp-368h] BYREF
  void *v77; // [xsp+30h] [xbp-360h]
  void *v78; // [xsp+38h] [xbp-358h]
  void *v79[2]; // [xsp+40h] [xbp-350h] BYREF
  void *v80; // [xsp+50h] [xbp-340h]
  __int128 v81; // [xsp+60h] [xbp-330h] BYREF
  void *v82; // [xsp+70h] [xbp-320h]
  unsigned __int64 v83; // [xsp+80h] [xbp-310h] BYREF
  size_t v84; // [xsp+88h] [xbp-308h]
  void *v85; // [xsp+90h] [xbp-300h]
  int v86; // [xsp+98h] [xbp-2F8h] BYREF
  unsigned __int64 v87; // [xsp+A0h] [xbp-2F0h] BYREF
  size_t v88; // [xsp+A8h] [xbp-2E8h]
  void *v89; // [xsp+B0h] [xbp-2E0h]
  void *v90[3]; // [xsp+B8h] [xbp-2D8h] BYREF
  char v91[4]; // [xsp+D4h] [xbp-2BCh] BYREF
  unsigned __int64 v92; // [xsp+D8h] [xbp-2B8h] BYREF
  size_t v93; // [xsp+E0h] [xbp-2B0h]
  void *v94; // [xsp+E8h] [xbp-2A8h]
  int v95; // [xsp+F0h] [xbp-2A0h] BYREF
  unsigned __int64 v96; // [xsp+F8h] [xbp-298h] BYREF
  size_t v97; // [xsp+100h] [xbp-290h]
  void *v98; // [xsp+108h] [xbp-288h]
  pudutech::Ashdmem *v99; // [xsp+110h] [xbp-280h] BYREF
  std::__shared_weak_count *v100; // [xsp+118h] [xbp-278h]
  __int128 v101; // [xsp+120h] [xbp-270h] BYREF
  void *v102; // [xsp+130h] [xbp-260h]
  _QWORD v103[2]; // [xsp+268h] [xbp-128h] BYREF
  __int128 src; // [xsp+278h] [xbp-118h]
  __int128 v105; // [xsp+288h] [xbp-108h]
  __int64 v106; // [xsp+2A0h] [xbp-F0h]
  __int64 v107; // [xsp+2A8h] [xbp-E8h]
  cv *v108; // [xsp+2B0h] [xbp-E0h]
  __int64 v109; // [xsp+2B8h] [xbp-D8h] BYREF
  __int64 v110; // [xsp+2C8h] [xbp-C8h] BYREF
  int v111[2]; // [xsp+2D0h] [xbp-C0h] BYREF
  __int128 v112; // [xsp+2D8h] [xbp-B8h]
  __int128 v113; // [xsp+2E8h] [xbp-A8h]
  __int64 v114; // [xsp+2F8h] [xbp-98h]
  __int64 v115; // [xsp+300h] [xbp-90h]
  int *v116; // [xsp+308h] [xbp-88h]
  cv *v117; // [xsp+310h] [xbp-80h]
  __int64 v118[5]; // [xsp+318h] [xbp-78h] BYREF

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  if ( *a2 == -1 )
    return 0;
  pudutech::Ashdmem::useMemory(&v99, (pudutech::Ashdmem *)*(unsigned int *)a2, (int)a2);
  if ( !v99 )
    goto LABEL_94;
  Memory = (_DWORD *)pudutech::Ashdmem::getMemory(v99);
  v8 = Memory;
  if ( !Memory )
  {
    if ( (word_29E90 & 1) != 0 )
      v16 = (const char *)qword_29EA0;
    else
      v16 = (char *)&word_29E90 + 1;
    v95 = dword_29E88;
    v97 = 0LL;
    v98 = 0LL;
    v96 = 0LL;
    v17 = strlen(v16);
    if ( v17 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v18 = v17;
    if ( v17 >= 0x17 )
    {
      v27 = (v17 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v19 = (char *)operator new(v27);
      v97 = v18;
      v98 = v19;
      v96 = v27 | 1;
    }
    else
    {
      v19 = (char *)&v96 + 1;
      LOBYTE(v96) = 2 * v17;
      if ( !v17 )
      {
LABEL_31:
        v19[v18] = 0;
        if ( (g3::logLevel(&v95) & 1) == 0 )
        {
          v32 = 0;
          if ( (v96 & 1) == 0 )
            goto LABEL_92;
          goto LABEL_37;
        }
        v93 = 0LL;
        v94 = 0LL;
        v92 = 0LL;
        v28 = rgbd::TAG;
        v29 = strlen((const char *)rgbd::TAG);
        if ( v29 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v30 = v29;
        if ( v29 >= 0x17 )
        {
          v54 = (v29 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v31 = (char *)operator new(v54);
          v93 = v30;
          v94 = v31;
          v92 = v54 | 1;
        }
        else
        {
          v31 = (char *)&v92 + 1;
          LOBYTE(v92) = 2 * v29;
          if ( !v29 )
          {
LABEL_90:
            v31[v30] = 0;
            v32 = g3::logTag(&v92);
            if ( (v92 & 1) != 0 )
            {
              operator delete(v94);
              if ( (v96 & 1) == 0 )
              {
LABEL_92:
                if ( (v32 & 1) == 0 )
                  goto LABEL_94;
                goto LABEL_93;
              }
            }
            else if ( (v96 & 1) == 0 )
            {
              goto LABEL_92;
            }
LABEL_37:
            operator delete(v98);
            if ( (v32 & 1) == 0 )
              goto LABEL_94;
LABEL_93:
            LogCapture::LogCapture(
              (LogCapture *)&v101,
              (const char *)rgbd::TAG,
              (const LEVELS *)&dword_29E88,
              "",
              6,
              0LL);
            std::__put_character_sequence<char,std::char_traits<char>>(
              (_QWORD *)&v101 + 1,
              (__int64)"recv null data",
              14LL);
            LogCapture::~LogCapture((LogCapture *)&v101);
LABEL_94:
            v15 = 0;
            v55 = v100;
            if ( !v100 )
              return v15;
            goto LABEL_125;
          }
        }
        memcpy(v31, v28, v30);
        goto LABEL_90;
      }
    }
    memcpy(v19, v16, v18);
    goto LABEL_31;
  }
  v9 = *a4;
  v10 = Memory[15] + 64;
  v111[0] = *a3;
  v111[1] = v9;
  *(_QWORD *)&v112 = (char *)Memory + v10;
  *((_QWORD *)&v112 + 1) = (char *)Memory + v10;
  v116 = v111;
  v110 = 0x242FF0002LL;
  v114 = 0LL;
  v115 = 0LL;
  v117 = (cv *)v118;
  v118[0] = 2 * v9;
  v118[1] = 2LL;
  *(_QWORD *)&v113 = (char *)Memory + v10 + 2 * v9 * v111[0];
  *((_QWORD *)&v113 + 1) = v113;
  cv::Mat::updateContinuityFlag((cv::Mat *)&v110);
  v91[0] = 0;
  memset(v90, 0, sizeof(v90));
  ++rgbd::RGBDCheck::cricul;
  std::vector<cv::Mat>::__append((__int64 *)v90, 5uLL, (cv::Mat *)&v110);
  checktool::runcheck(v103, (char *)this + 16, v90, &qword_29FD8, v91);
  if ( (word_29E90 & 1) != 0 )
    v11 = (const char *)qword_29EA0;
  else
    v11 = (char *)&word_29E90 + 1;
  v86 = dword_29E88;
  v88 = 0LL;
  v89 = 0LL;
  v87 = 0LL;
  v12 = strlen(v11);
  if ( v12 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v13 = v12;
  v75 = v10;
  if ( v12 >= 0x17 )
  {
    v20 = (v12 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v14 = (char *)operator new(v20);
    v88 = v13;
    v89 = v14;
    v87 = v20 | 1;
    goto LABEL_20;
  }
  v14 = (char *)&v87 + 1;
  LOBYTE(v87) = 2 * v12;
  if ( v12 )
LABEL_20:
    memcpy(v14, v11, v13);
  v14[v13] = 0;
  if ( (g3::logLevel(&v86) & 1) == 0 )
  {
    v26 = 0;
    if ( (v87 & 1) == 0 )
      goto LABEL_43;
    goto LABEL_27;
  }
  v84 = 0LL;
  v85 = 0LL;
  v83 = 0LL;
  v22 = rgbd::TAG;
  v23 = strlen((const char *)rgbd::TAG);
  if ( v23 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v24 = v23;
  if ( v23 >= 0x17 )
  {
    v33 = (v23 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v25 = (char *)operator new(v33);
    v84 = v24;
    v85 = v25;
    v83 = v33 | 1;
    goto LABEL_40;
  }
  v25 = (char *)&v83 + 1;
  LOBYTE(v83) = 2 * v23;
  if ( v23 )
LABEL_40:
    memcpy(v25, v22, v24);
  v25[v24] = 0;
  v26 = g3::logTag(&v83);
  if ( (v83 & 1) != 0 )
  {
    operator delete(v85);
    if ( (v87 & 1) == 0 )
    {
LABEL_43:
      if ( (v26 & 1) == 0 )
        goto LABEL_45;
      goto LABEL_44;
    }
  }
  else if ( (v87 & 1) == 0 )
  {
    goto LABEL_43;
  }
LABEL_27:
  operator delete(v89);
  if ( (v26 & 1) == 0 )
    goto LABEL_45;
LABEL_44:
  LogCapture::LogCapture((LogCapture *)&v101, (const char *)rgbd::TAG, (const LEVELS *)&dword_29E88, "", 6, 0LL);
  std::__put_character_sequence<char,std::char_traits<char>>((_QWORD *)&v101 + 1, (__int64)"save img before", 15LL);
  LogCapture::~LogCapture((LogCapture *)&v101);
LABEL_45:
  if ( rgbd::RGBDCheck::cricul == 5 )
  {
    rgbd::RGBDCheck::cricul = 0;
    std::to_string(v79, (std::__ndk1 *)(unsigned int)rgbd::RGBDCheck::index, v21);
    v34 = std::string::insert((__int64 *)v79, 0LL, "/sdcard/pudu/check_tool/input_img_", 0x22uLL);
    v35 = *(_OWORD *)v34;
    v82 = (void *)v34[2];
    v81 = v35;
    v34[1] = 0LL;
    v34[2] = 0LL;
    *v34 = 0LL;
    if ( (qword_29FF0 & 1) != 0 )
      v36 = (char *)unk_2A000;
    else
      v36 = (char *)&qword_29FF0 + 1;
    if ( (qword_29FF0 & 1) != 0 )
      v37 = qword_29FF8;
    else
      v37 = (unsigned __int64)(unsigned __int8)qword_29FF0 >> 1;
    v38 = std::string::append((__int64 *)&v81, v36, v37);
    v39 = *(_OWORD *)v38;
    v102 = (void *)v38[2];
    v101 = v39;
    v38[1] = 0LL;
    v38[2] = 0LL;
    *v38 = 0LL;
    if ( (v81 & 1) != 0 )
      operator delete(v82);
    if ( ((__int64)v79[0] & 1) != 0 )
      operator delete(v80);
    v79[0] = 0LL;
    v79[1] = 0LL;
    LODWORD(v81) = 16842752;
    *((_QWORD *)&v81 + 1) = &v110;
    v82 = 0LL;
    v80 = 0LL;
    cv::imwrite(&v101, &v81, v79);
    if ( v79[0] )
    {
      v79[1] = v79[0];
      operator delete(v79[0]);
    }
    std::to_string(&v76, (std::__ndk1 *)(unsigned int)rgbd::RGBDCheck::index, v40);
    v41 = std::string::insert((__int64 *)&v76, 0LL, "/sdcard/pudu/check_tool/output_img_", 0x23uLL);
    v42 = *(_OWORD *)v41;
    v80 = (void *)v41[2];
    *(_OWORD *)v79 = v42;
    v41[1] = 0LL;
    v41[2] = 0LL;
    *v41 = 0LL;
    if ( (qword_29FF0 & 1) != 0 )
      v43 = (char *)unk_2A000;
    else
      v43 = (char *)&qword_29FF0 + 1;
    if ( (qword_29FF0 & 1) != 0 )
      v44 = qword_29FF8;
    else
      v44 = (unsigned __int64)(unsigned __int8)qword_29FF0 >> 1;
    v45 = std::string::append((__int64 *)v79, v43, v44);
    v46 = *(_OWORD *)v45;
    v82 = (void *)v45[2];
    v81 = v46;
    v45[1] = 0LL;
    v45[2] = 0LL;
    *v45 = 0LL;
    if ( ((__int64)v79[0] & 1) != 0 )
      operator delete(v80);
    if ( ((unsigned __int8)v76 & 1) != 0 )
      operator delete(v78);
    LODWORD(v79[0]) = 16842752;
    v76 = 0LL;
    v77 = 0LL;
    v79[1] = v103;
    v80 = 0LL;
    v78 = 0LL;
    cv::imwrite(&v81, v79, &v76);
    if ( v76 )
    {
      v77 = v76;
      operator delete(v76);
    }
    ++rgbd::RGBDCheck::index;
    if ( (v81 & 1) != 0 )
      operator delete(v82);
    if ( (v101 & 1) != 0 )
      operator delete(v102);
  }
  if ( (pudutech::Ashdmem::destroyMemory(*((pudutech::Ashdmem **)this + 115)) & 1) != 0 )
  {
    v48 = *((_QWORD *)this + 115);
    LOBYTE(v101) = 26;
    v102 = 0LL;
    strcpy((char *)&v101 + 1, "RgbdCheckTool");
    HIBYTE(v101) = 0;
    if ( SHIDWORD(v103[0]) < 1 )
      LODWORD(v49) = 0;
    else
      v49 = *((_QWORD *)v108 + HIDWORD(v103[0]) - 1);
    v50 = pudutech::Ashdmem::createMemory(v48, &v101, (unsigned int)(v75 + *a4 * *a3 * v49));
    *((_DWORD *)this + 236) = v50;
    *((_QWORD *)this + 117) = v47;
    if ( (v101 & 1) != 0 )
    {
      operator delete(v102);
      v50 = *((_DWORD *)this + 236);
    }
    if ( v50 == -1 || (v51 = (void *)*((_QWORD *)this + 117)) == 0LL )
    {
      v15 = 0;
      v53 = v106;
      if ( !v106 )
        goto LABEL_109;
      goto LABEL_105;
    }
    memcpy(v51, v8, v75);
    if ( SHIDWORD(v103[0]) < 1 )
      v52 = 0LL;
    else
      v52 = *((_QWORD *)v108 + HIDWORD(v103[0]) - 1);
    memcpy((void *)(*((_QWORD *)this + 117) + v75), (const void *)src, v52 * *a4 * (__int64)*a3);
    v56 = *((_QWORD *)this + 124);
    if ( v56 )
    {
      v57 = *a3;
      v58 = *a4;
      v59 = *a4 * *a3;
      if ( SHIDWORD(v103[0]) < 1 )
        LODWORD(v60) = 0;
      else
        v60 = *((_QWORD *)v108 + HIDWORD(v103[0]) - 1);
      LODWORD(v101) = *((_DWORD *)this + 236);
      LODWORD(v81) = v57;
      LODWORD(v79[0]) = v58;
      LODWORD(v76) = v75 + v59 * v60;
      (*(void (__fastcall **)(__int64, __int128 *, __int128 *, void **, void **))(*(_QWORD *)v56 + 48LL))(
        v56,
        &v101,
        &v81,
        v79,
        &v76);
    }
  }
  v15 = v91[0] != 0;
  v53 = v106;
  if ( !v106 )
    goto LABEL_109;
LABEL_105:
  v61 = (unsigned int *)(v53 + 20);
  do
  {
    v62 = __ldaxr(v61);
    v63 = v62 - 1;
  }
  while ( __stlxr(v63, v61) );
  if ( !v63 )
    cv::Mat::deallocate((cv::Mat *)v103);
LABEL_109:
  v106 = 0LL;
  v105 = 0u;
  src = 0u;
  if ( SHIDWORD(v103[0]) >= 1 )
  {
    v64 = v107;
    v65 = 0LL;
    do
      *(_DWORD *)(v64 + 4 * v65++) = 0;
    while ( v65 < SHIDWORD(v103[0]) );
  }
  if ( v108 != (cv *)&v109 )
    cv::fastFree(v108, v47);
  sub_129F4(v90, v47);
  if ( v115 )
  {
    v67 = (unsigned int *)(v115 + 20);
    do
    {
      v68 = __ldaxr(v67);
      v69 = v68 - 1;
    }
    while ( __stlxr(v69, v67) );
    if ( !v69 )
      cv::Mat::deallocate((cv::Mat *)&v110);
  }
  v115 = 0LL;
  v112 = 0u;
  v113 = 0u;
  if ( SHIDWORD(v110) >= 1 )
  {
    v70 = (__int64)v116;
    v71 = 0LL;
    do
      *(_DWORD *)(v70 + 4 * v71++) = 0;
    while ( v71 < SHIDWORD(v110) );
  }
  if ( v117 != (cv *)v118 )
    cv::fastFree(v117, v66);
  v55 = v100;
  if ( v100 )
  {
LABEL_125:
    v72 = (unsigned __int64 *)((char *)v55 + 8);
    do
      v73 = __ldaxr(v72);
    while ( __stlxr(v73 - 1, v72) );
    if ( !v73 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v55 + 16LL))(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  return v15;
}
// 12ECC: variable 'v21' is possibly undefined
// 12FA0: variable 'v40' is possibly undefined
// 13118: variable 'v47' is possibly undefined
// 133C8: variable 'v66' is possibly undefined
// A660: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// A680: using guessed type __int64 __fastcall pudutech::Ashdmem::createMemory(_QWORD, _QWORD, _QWORD);
// A880: using guessed type __int64 __fastcall cv::imwrite(_QWORD, _QWORD, _QWORD);
// A950: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// AA20: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// AA80: using guessed type _QWORD *__fastcall checktool::runcheck(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD);
// 290A0: using guessed type void *rgbd::TAG;
// 29E88: using guessed type int dword_29E88;
// 29E90: using guessed type __int16 word_29E90;
// 29EA0: using guessed type __int64 qword_29EA0;
// 29FD8: using guessed type __int64 qword_29FD8;
// 29FF0: using guessed type __int64 qword_29FF0;
// 29FF8: using guessed type __int64 qword_29FF8;
// 2A008: using guessed type int rgbd::RGBDCheck::index;
// 2A00C: using guessed type int rgbd::RGBDCheck::cricul;
// 12AD0: using guessed type char var_2BC[4];

//----- (0000000000013758) ----------------------------------------------------
void __usercall rgbd::RGBDCheck::getColorDepthImage(const cv::Mat *a1@<X1>, int a2@<W2>, int a3@<W3>, __int64 a4@<X8>)
{
  __int64 v8; // x8
  int v10; // w26
  int v11; // w27
  int *v12; // x9
  int *v13; // x8
  int i; // w28
  int v15; // w11
  __int64 v16; // x13
  __int64 j; // x8
  __int64 v18; // x11
  __int64 v19; // x12
  unsigned __int64 v20; // x13
  _DWORD *v21; // x13
  int v22; // w13
  int v23[2]; // [xsp+8h] [xbp-88h] BYREF
  void *v24[2]; // [xsp+10h] [xbp-80h] BYREF
  __int128 v25; // [xsp+20h] [xbp-70h]
  __int64 v26; // [xsp+38h] [xbp-58h]

  v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v8 = **((_QWORD **)a1 + 8);
  *(_DWORD *)a4 = 1124007936;
  *(_OWORD *)(a4 + 4) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 36) = 0u;
  *(_OWORD *)(a4 + 20) = 0u;
  *(_QWORD *)(a4 + 80) = 0LL;
  *(_OWORD *)v24 = 0u;
  v25 = 0u;
  *(_QWORD *)(a4 + 64) = a4 + 8;
  *(_QWORD *)(a4 + 72) = a4 + 80;
  *(_QWORD *)(a4 + 88) = 0LL;
  *(_QWORD *)v23 = v8;
  cv::Mat::create((cv::Mat *)a4, 2, v23, 16);
  cv::Mat::operator=(a4, v24);
  v10 = a3 - a2;
  v24[0] = 0LL;
  v24[1] = 0LL;
  *(_QWORD *)&v25 = 0LL;
  if ( a3 >= a2 )
  {
    v11 = 0;
    v12 = 0LL;
    v13 = 0LL;
    for ( i = a2; ; ++i )
    {
      v23[0] = v11 / v10;
      if ( v13 == v12 )
      {
        std::vector<int>::__push_back_slow_path<int const&>((__int64)v24, v23);
        if ( i >= a3 )
          break;
      }
      else
      {
        *v13 = v11 / v10;
        v24[1] = v13 + 1;
        if ( i >= a3 )
          break;
      }
      v13 = (int *)v24[1];
      v12 = (int *)v25;
      v11 += 255;
    }
  }
  v15 = *((_DWORD *)a1 + 2);
  if ( v15 > 0 )
  {
    LODWORD(v16) = *((_DWORD *)a1 + 3);
    for ( j = 0LL; j < v15; ++j )
    {
      if ( (int)v16 >= 1 )
      {
        v18 = 0LL;
        v19 = 0LL;
        do
        {
          v20 = *(__int16 *)(*((_QWORD *)a1 + 2) + j * **((_QWORD **)a1 + 9) + 2 * v19) - (__int64)a2;
          if ( (v20 & 0x80000000) != 0 || v20 >= ((char *)v24[1] - (char *)v24[0]) >> 2 )
          {
            LOBYTE(v22) = 0;
            *(_BYTE *)(*(_QWORD *)(a4 + 16) + j * **(_QWORD **)(a4 + 72) + v18) = 0;
            *(_BYTE *)(*(_QWORD *)(a4 + 16) + j * **(_QWORD **)(a4 + 72) + v18 + 1) = 0;
          }
          else
          {
            v21 = (_DWORD *)((char *)&rgbd::colormap_ + 12 * *((int *)v24[0] + v20));
            *(_BYTE *)(*(_QWORD *)(a4 + 16) + j * **(_QWORD **)(a4 + 72) + v18) = *v21;
            *(_BYTE *)(*(_QWORD *)(a4 + 16) + j * **(_QWORD **)(a4 + 72) + v18 + 1) = v21[1];
            v22 = v21[2];
          }
          ++v19;
          *(_BYTE *)(*(_QWORD *)(a4 + 16) + j * **(_QWORD **)(a4 + 72) + v18 + 2) = v22;
          v16 = *((int *)a1 + 3);
          v18 += 3LL;
        }
        while ( v19 < v16 );
        v15 = *((_DWORD *)a1 + 2);
      }
    }
  }
  if ( v24[0] )
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
}
// A590: using guessed type __int64 __fastcall cv::Mat::operator=(_QWORD, _QWORD);

//----- (0000000000013A5C) ----------------------------------------------------
_QWORD *__fastcall sub_13A5C(_QWORD *result, __int64 a2)
{
  _QWORD *v2; // x20
  __int64 v4; // x8
  __int64 v5[6]; // [xsp+0h] [xbp-50h] BYREF

  v5[5] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (_QWORD *)a2 != result )
  {
    v2 = result;
    result = (_QWORD *)result[4];
    if ( result == v2 )
    {
      if ( *(_QWORD *)(a2 + 32) == a2 )
      {
        (*(void (__fastcall **)(_QWORD *, __int64 *))(*result + 24LL))(result, v5);
        (*(void (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = 0LL;
        (*(void (__fastcall **)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 32) + 24LL))(*(_QWORD *)(a2 + 32), v2);
        (*(void (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = 0LL;
        v2[4] = v2;
        (*(void (__fastcall **)(__int64 *, __int64))(v5[0] + 24))(v5, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(__int64 *))(v5[0] + 32))(v5);
      }
      else
      {
        (*(void (__fastcall **)(_QWORD *, __int64))(*result + 24LL))(result, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = a2;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 32);
      if ( a2 == v4 )
      {
        (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 24LL))(*(_QWORD *)(a2 + 32), v2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = v2[4];
        v2[4] = v2;
      }
      else
      {
        v2[4] = v4;
        *(_QWORD *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

//----- (0000000000013BC4) ----------------------------------------------------
cv::Mat *__fastcall cv::Mat_<double>::operator=(cv::Mat *this, cv::Mat *a2)
{
  cv::Mat *v3; // x19
  __int64 v4; // x8
  unsigned int *v5; // x8
  unsigned int v6; // w9
  __int64 v7; // x8
  unsigned int *v8; // x8
  unsigned int v9; // w9
  unsigned int v10; // w9
  int v11; // w8
  __int64 v12; // x8
  __int64 v13; // x9
  __int64 v14; // x10
  void *v15; // x1
  unsigned int *v16; // x8
  unsigned int v17; // w9
  unsigned int v18; // w9
  __int64 v19; // x8
  __int64 v20; // x9
  __int64 v21; // x8
  __int64 v22; // x11
  int v23; // w8
  _QWORD *v24; // x10
  _QWORD *v25; // x8
  __int64 v26; // x9
  __int64 v27; // x10
  int64x2_t v28; // q1
  _QWORD *v29; // x11
  __int64 v30; // x12
  int64x2_t v31; // q0
  __int64 v32; // d2
  __int64 v33; // x12
  int *v34; // x9
  __int64 v35; // t1
  struct _Unwind_Exception *v37; // x0
  struct _Unwind_Exception *v38; // x19
  __int128 v39; // [xsp+0h] [xbp-90h] BYREF
  void *v40[2]; // [xsp+10h] [xbp-80h]
  __int128 v41; // [xsp+20h] [xbp-70h]
  __int64 v42; // [xsp+38h] [xbp-58h]
  __int64 v43; // [xsp+40h] [xbp-50h]
  cv *v44; // [xsp+48h] [xbp-48h]
  _QWORD v45[4]; // [xsp+50h] [xbp-40h] BYREF

  v3 = this;
  v45[3] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (*(_DWORD *)a2 & 0xFFF) != 6 )
  {
    if ( (*(_DWORD *)a2 & 7) == 6 )
    {
      cv::Mat::reshape(&v39, a2, 1, *((_DWORD *)a2 + 1), 0LL);
      v3 = cv::Mat_<double>::operator=(v3, (cv::Mat *)&v39);
      if ( v42 )
      {
        v16 = (unsigned int *)(v42 + 20);
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while ( __stlxr(v18, v16) );
        if ( !v18 )
          cv::Mat::deallocate((cv::Mat *)&v39);
      }
      v42 = 0LL;
      *(_OWORD *)v40 = 0u;
      v41 = 0u;
      if ( SDWORD1(v39) >= 1 )
      {
        v19 = v43;
        v20 = 0LL;
        do
          *(_DWORD *)(v19 + 4 * v20++) = 0;
        while ( v20 < SDWORD1(v39) );
      }
      if ( v44 != (cv *)v45 )
        cv::fastFree(v44, v15);
      return v3;
    }
    if ( (*(_DWORD *)a2 & 0xFF8) == 0 || !*((_QWORD *)a2 + 2) )
    {
LABEL_45:
      *((_QWORD *)&v39 + 1) = this;
      v40[0] = 0LL;
      LODWORD(v39) = -2113863674;
      cv::Mat::convertTo(a2, &v39, 6LL, 1.0, 0.0);
      return v3;
    }
    v21 = *((unsigned int *)a2 + 1);
    if ( (int)v21 < 3 )
    {
      v22 = *((int *)a2 + 3) * (__int64)*((int *)a2 + 2);
      if ( !(_DWORD)v21 )
        goto LABEL_45;
LABEL_44:
      if ( v22 )
      {
        v39 = xmmword_154B0;
        v40[0] = (void *)operator new(0x40uLL);
        strcpy((char *)v40[0], "DataType<_Tp>::channels == m.channels() || m.empty()");
        v37 = (struct _Unwind_Exception *)cv::error(
                                            4294967081LL,
                                            &v39,
                                            "operator=",
                                            "D:/project/MirRGBDApp/RGBDLib/src/main/jni/cppbase/include/opencv\\opencv2/core/mat.inl.hpp",
                                            1711LL);
        v38 = v37;
        if ( (v39 & 1) != 0 )
        {
          operator delete(v40[0]);
          _Unwind_Resume(v38);
        }
        _Unwind_Resume(v37);
      }
      goto LABEL_45;
    }
    v26 = *((_QWORD *)a2 + 8);
    if ( (_DWORD)v21 == 3 )
    {
      v27 = 0LL;
      v22 = 1LL;
    }
    else
    {
      v27 = v21 & 0x7FFFFFFC;
      v28 = vdupq_n_s64(1uLL);
      v29 = (_QWORD *)(v26 + 8);
      v30 = (unsigned int)v21 & 0xFFFFFFFC;
      v31 = v28;
      do
      {
        v32 = *(v29 - 1);
        v28.n128_u64[0] *= (int)v32;
        v31.n128_u64[0] *= (int)*v29;
        v30 -= 4LL;
        v28.n128_u64[1] *= SHIDWORD(v32);
        v31.n128_u64[1] *= (int)HIDWORD(*v29);
        v29 += 2;
      }
      while ( v30 );
      v22 = v31.n128_u64[0] * v28.n128_u64[0] * v31.n128_u64[1] * v28.n128_u64[1];
      if ( v27 == v21 )
        goto LABEL_44;
    }
    v33 = v21 - v27;
    v34 = (int *)(v26 + 4 * v27);
    do
    {
      v35 = *v34++;
      --v33;
      v22 *= v35;
    }
    while ( v33 );
    goto LABEL_44;
  }
  if ( this != a2 )
  {
    v4 = *((_QWORD *)a2 + 7);
    if ( v4 )
    {
      v5 = (unsigned int *)(v4 + 20);
      do
        v6 = __ldaxr(v5);
      while ( __stlxr(v6 + 1, v5) );
    }
    v7 = *((_QWORD *)this + 7);
    if ( v7 )
    {
      v8 = (unsigned int *)(v7 + 20);
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while ( __stlxr(v10, v8) );
      if ( !v10 )
        cv::Mat::deallocate(this);
    }
    v11 = *((_DWORD *)v3 + 1);
    *((_QWORD *)v3 + 7) = 0LL;
    *((_OWORD *)v3 + 1) = 0u;
    *((_OWORD *)v3 + 2) = 0u;
    if ( v11 <= 0 )
    {
      *(_DWORD *)v3 = *(_DWORD *)a2;
    }
    else
    {
      v12 = *((_QWORD *)v3 + 8);
      v13 = 0LL;
      do
      {
        *(_DWORD *)(v12 + 4 * v13) = 0;
        v14 = *((int *)v3 + 1);
        ++v13;
      }
      while ( v13 < v14 );
      *(_DWORD *)v3 = *(_DWORD *)a2;
      if ( (int)v14 > 2 )
        goto LABEL_35;
    }
    v23 = *((_DWORD *)a2 + 1);
    if ( v23 <= 2 )
    {
      *((_DWORD *)v3 + 1) = v23;
      v24 = (_QWORD *)*((_QWORD *)v3 + 9);
      *((_QWORD *)v3 + 1) = *((_QWORD *)a2 + 1);
      v25 = (_QWORD *)*((_QWORD *)a2 + 9);
      *v24 = *v25;
      v24[1] = v25[1];
LABEL_36:
      *((_OWORD *)v3 + 1) = *((_OWORD *)a2 + 1);
      *((_OWORD *)v3 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)v3 + 3) = *((_OWORD *)a2 + 3);
      return v3;
    }
LABEL_35:
    cv::Mat::copySize(v3, a2);
    goto LABEL_36;
  }
  return v3;
}
// 13E90: conditional instruction was optimized away because w8.4>=3
// 13DE8: mask 0xFFFFFFFC is shortened because x8.8 <= 0x7FFFFFFF
// 13D34: variable 'v15' is possibly undefined
// A810: using guessed type __int64 __fastcall cv::Mat::convertTo(_QWORD, _QWORD, _QWORD, double, double);
// A900: using guessed type __int64 __fastcall cv::error(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
// 154B0: using guessed type __int128 xmmword_154B0;

//----- (0000000000013FFC) ----------------------------------------------------
cv::Mat *__fastcall cv::Mat_<double>::operator=(cv::Mat *this, cv::Mat *a2)
{
  void *v3; // x1
  __int64 v4; // x8
  unsigned int *v5; // x8
  unsigned int v6; // w9
  unsigned int v7; // w9
  int v8; // w8
  __int64 v9; // x8
  __int64 v10; // x9
  int v11; // v0.s[1]
  __int128 v12; // q1
  cv *v13; // x0
  int v14; // w8
  unsigned int *v15; // x8
  unsigned int v16; // w9
  unsigned int v17; // w9
  cv *v18; // x9
  cv *v19; // x8
  __int64 v20; // x9
  _BYTE v22[64]; // [xsp+0h] [xbp-90h] BYREF
  cv *v23[2]; // [xsp+40h] [xbp-50h]
  _QWORD v24[4]; // [xsp+50h] [xbp-40h] BYREF

  v24[3] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (*(_DWORD *)a2 & 0xFFF) == 6 )
  {
    cv::Mat::operator=(this, a2);
  }
  else if ( (*(_DWORD *)a2 & 7) == 6 )
  {
    cv::Mat::reshape(v22, a2, 1, *((_DWORD *)a2 + 1), 0LL);
    if ( this == (cv::Mat *)v22 )
    {
      if ( *(_QWORD *)&v22[56] )
      {
        v15 = (unsigned int *)(*(_QWORD *)&v22[56] + 20LL);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while ( __stlxr(v17, v15) );
        if ( !v17 )
          cv::Mat::deallocate((cv::Mat *)v22);
      }
    }
    else
    {
      v4 = *((_QWORD *)this + 7);
      if ( v4 )
      {
        v5 = (unsigned int *)(v4 + 20);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while ( __stlxr(v7, v5) );
        if ( !v7 )
          cv::Mat::deallocate(this);
      }
      v8 = *((_DWORD *)this + 1);
      *((_QWORD *)this + 7) = 0LL;
      *((_OWORD *)this + 1) = 0u;
      *((_OWORD *)this + 2) = 0u;
      if ( v8 >= 1 )
      {
        v9 = *((_QWORD *)this + 8);
        v10 = 0LL;
        do
          *(_DWORD *)(v9 + 4 * v10++) = 0;
        while ( v10 < *((int *)this + 1) );
      }
      v11 = *(_DWORD *)&v22[4];
      v12 = *(_OWORD *)&v22[16];
      v13 = (cv *)*((_QWORD *)this + 9);
      *(_OWORD *)this = *(_OWORD *)v22;
      *((_OWORD *)this + 1) = v12;
      *((_OWORD *)this + 2) = *(_OWORD *)&v22[32];
      *((_OWORD *)this + 3) = *(_OWORD *)&v22[48];
      if ( v13 == (cv::Mat *)((char *)this + 80) )
      {
        v14 = v11;
      }
      else
      {
        cv::fastFree(v13, v3);
        *((_QWORD *)this + 8) = (char *)this + 8;
        *((_QWORD *)this + 9) = (char *)this + 80;
        v14 = *(_DWORD *)&v22[4];
        v13 = (cv::Mat *)((char *)this + 80);
      }
      if ( v14 <= 2 )
      {
        v18 = v23[1];
        *(_QWORD *)v13 = *(_QWORD *)v23[1];
        *((_QWORD *)v13 + 1) = *((_QWORD *)v18 + 1);
      }
      else
      {
        *((_OWORD *)this + 4) = *(_OWORD *)v23;
        v23[0] = (cv *)&v22[8];
        v23[1] = (cv *)v24;
      }
      *(_DWORD *)v22 = 1124007936;
      memset(&v22[4], 0, 60);
    }
    *(_QWORD *)&v22[56] = 0LL;
    memset(&v22[16], 0, 32);
    if ( *(int *)&v22[4] >= 1 )
    {
      v19 = v23[0];
      v20 = 0LL;
      do
        *((_DWORD *)v19 + v20++) = 0;
      while ( v20 < *(int *)&v22[4] );
    }
    if ( (_QWORD *)v23[1] != v24 )
      cv::fastFree(v23[1], v3);
  }
  else
  {
    *(_QWORD *)&v22[8] = this;
    *(_QWORD *)&v22[16] = 0LL;
    *(_DWORD *)v22 = -2113863674;
    cv::Mat::convertTo(a2, v22, 6LL, 1.0, 0.0);
  }
  return this;
}
// 140F8: variable 'v3' is possibly undefined
// A810: using guessed type __int64 __fastcall cv::Mat::convertTo(_QWORD, _QWORD, _QWORD, double, double);

//----- (00000000000142CC) ----------------------------------------------------
void __fastcall std::vector<cv::Mat>::__append(__int64 *a1, unsigned __int64 a2, cv::Mat *a3)
{
  __int64 v4; // x0
  __int64 v5; // x9
  unsigned __int64 v6; // x20
  __int64 v8; // x23
  unsigned __int64 v9; // x24
  unsigned __int64 v10; // x9
  unsigned __int64 v11; // x9
  __int64 v12; // x8
  __int64 v13; // x8
  unsigned int *v14; // x8
  unsigned int v15; // w9
  _QWORD *v16; // x8
  _QWORD *v17; // x10
  __int64 v18; // x0
  __int64 v19; // x8
  unsigned int *v20; // x8
  unsigned int v21; // w9
  _QWORD *v22; // x8
  _QWORD *v23; // x10
  void *v24; // x1
  __int64 v25[2]; // [xsp+0h] [xbp-60h] BYREF
  __int64 v26; // [xsp+10h] [xbp-50h]
  __int64 v27; // [xsp+18h] [xbp-48h]
  __int64 *v28; // [xsp+20h] [xbp-40h]
  __int64 v29; // [xsp+28h] [xbp-38h]

  v29 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2;
  if ( 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 5) < a2 )
  {
    v8 = 0x2AAAAAAAAAAAAAALL;
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 5);
    if ( v9 + a2 > 0x2AAAAAAAAAAAAAALL )
      std::__vector_base_common<true>::__throw_length_error();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if ( v10 >= 0x155555555555555LL )
    {
      v27 = 0LL;
      v28 = a1 + 2;
    }
    else
    {
      v11 = 2 * v10;
      if ( v11 >= v9 + a2 )
        v8 = v11;
      else
        v8 = v9 + a2;
      v27 = 0LL;
      v28 = a1 + 2;
      if ( !v8 )
      {
        v12 = 0LL;
        goto LABEL_19;
      }
    }
    v12 = operator new(96 * v8);
LABEL_19:
    v25[0] = v12;
    v18 = v12 + 96 * v9;
    v25[1] = v18;
    v26 = v18;
    v27 = v12 + 96 * v8;
    do
    {
      *(_OWORD *)v18 = *(_OWORD *)a3;
      *(_OWORD *)(v18 + 16) = *((_OWORD *)a3 + 1);
      *(_OWORD *)(v18 + 32) = *((_OWORD *)a3 + 2);
      *(_QWORD *)(v18 + 48) = *((_QWORD *)a3 + 6);
      v19 = *((_QWORD *)a3 + 7);
      *(_QWORD *)(v18 + 80) = 0LL;
      *(_QWORD *)(v18 + 64) = v18 + 8;
      *(_QWORD *)(v18 + 72) = v18 + 80;
      *(_QWORD *)(v18 + 56) = v19;
      *(_QWORD *)(v18 + 88) = 0LL;
      if ( v19 )
      {
        v20 = (unsigned int *)(v19 + 20);
        do
          v21 = __ldaxr(v20);
        while ( __stlxr(v21 + 1, v20) );
      }
      if ( *((int *)a3 + 1) > 2 )
      {
        *(_DWORD *)(v18 + 4) = 0;
        cv::Mat::copySize((cv::Mat *)v18, a3);
      }
      else
      {
        v22 = (_QWORD *)*((_QWORD *)a3 + 9);
        v23 = *(_QWORD **)(v18 + 72);
        *v23 = *v22;
        v23[1] = v22[1];
      }
      --v6;
      v18 = v26 + 96;
      v26 += 96LL;
    }
    while ( v6 );
    std::vector<cv::Mat>::__swap_out_circular_buffer(a1, v25);
    std::__split_buffer<cv::Mat>::~__split_buffer((__int64)v25, v24);
    return;
  }
  do
  {
    *(_OWORD *)v4 = *(_OWORD *)a3;
    *(_OWORD *)(v4 + 16) = *((_OWORD *)a3 + 1);
    *(_OWORD *)(v4 + 32) = *((_OWORD *)a3 + 2);
    *(_QWORD *)(v4 + 48) = *((_QWORD *)a3 + 6);
    v13 = *((_QWORD *)a3 + 7);
    *(_QWORD *)(v4 + 80) = 0LL;
    *(_QWORD *)(v4 + 64) = v4 + 8;
    *(_QWORD *)(v4 + 72) = v4 + 80;
    *(_QWORD *)(v4 + 56) = v13;
    *(_QWORD *)(v4 + 88) = 0LL;
    if ( v13 )
    {
      v14 = (unsigned int *)(v13 + 20);
      do
        v15 = __ldaxr(v14);
      while ( __stlxr(v15 + 1, v14) );
    }
    if ( *((int *)a3 + 1) > 2 )
    {
      *(_DWORD *)(v4 + 4) = 0;
      cv::Mat::copySize((cv::Mat *)v4, a3);
    }
    else
    {
      v16 = (_QWORD *)*((_QWORD *)a3 + 9);
      v17 = *(_QWORD **)(v4 + 72);
      *v17 = *v16;
      v17[1] = v16[1];
    }
    --v6;
    v4 = a1[1] + 96;
    a1[1] = v4;
  }
  while ( v6 );
}
// 14504: variable 'v24' is possibly undefined

//----- (0000000000014554) ----------------------------------------------------
__int64 *__fastcall std::vector<cv::Mat>::__swap_out_circular_buffer(__int64 *result, _QWORD *a2)
{
  __int64 v2; // x9
  __int64 v3; // x22
  __int64 *v4; // x19
  __int64 v6; // x8
  __int64 v7; // x21
  __int128 v8; // t1
  __int64 v9; // x10
  unsigned int *v10; // x10
  unsigned int v11; // w11
  _QWORD *v12; // x9
  _QWORD *v13; // x8
  __int64 v14; // x8
  __int64 v15; // x9
  __int64 v16; // x8
  __int64 v17; // x9
  __int64 v18; // x8

  v3 = *result;
  v2 = result[1];
  v4 = result;
  if ( v2 == *result )
  {
    v6 = a2[1];
  }
  else
  {
    v6 = a2[1];
    v7 = result[1];
    do
    {
      v8 = *(_OWORD *)(v7 - 96);
      v7 -= 96LL;
      *(_OWORD *)(v6 - 96) = v8;
      result = (__int64 *)(v6 - 96);
      *(_OWORD *)(v6 - 80) = *(_OWORD *)(v7 + 16);
      *(_OWORD *)(v6 - 64) = *(_OWORD *)(v7 + 32);
      *(_QWORD *)(v6 - 48) = *(_QWORD *)(v7 + 48);
      v9 = *(_QWORD *)(v7 + 56);
      *(_QWORD *)(v6 - 16) = 0LL;
      *(_QWORD *)(v6 - 32) = v6 - 88;
      *(_QWORD *)(v6 - 24) = v6 - 16;
      *(_QWORD *)(v6 - 40) = v9;
      *(_QWORD *)(v6 - 8) = 0LL;
      if ( v9 )
      {
        v10 = (unsigned int *)(v9 + 20);
        do
          v11 = __ldaxr(v10);
        while ( __stlxr(v11 + 1, v10) );
      }
      if ( *(int *)(v2 - 92) > 2 )
      {
        *(_DWORD *)(v6 - 92) = 0;
        result = (__int64 *)cv::Mat::copySize((cv::Mat *)result, (const cv::Mat *)v7);
      }
      else
      {
        v12 = *(_QWORD **)(v2 - 24);
        v13 = *(_QWORD **)(v6 - 24);
        *v13 = *v12;
        v13[1] = v12[1];
      }
      v2 = v7;
      v6 = a2[1] - 96LL;
      a2[1] = v6;
    }
    while ( v7 != v3 );
    v3 = *v4;
  }
  *v4 = v6;
  v14 = a2[2];
  a2[1] = v3;
  v15 = v4[1];
  v4[1] = v14;
  v16 = a2[3];
  a2[2] = v15;
  v17 = v4[2];
  v4[2] = v16;
  v18 = a2[1];
  a2[3] = v17;
  *a2 = v18;
  return result;
}

//----- (0000000000014670) ----------------------------------------------------
void __fastcall std::__split_buffer<cv::Mat>::~__split_buffer(__int64 a1, void *a2)
{
  __int64 v2; // x20
  __int64 i; // x21
  __int64 v5; // x8
  unsigned int *v6; // x8
  unsigned int v7; // w9
  unsigned int v8; // w9
  int v9; // w8
  __int64 v10; // x8
  __int64 v11; // x9
  cv *v12; // x0

  v2 = *(_QWORD *)(a1 + 8);
  for ( i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16) )
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    v5 = *(_QWORD *)(i - 40);
    if ( v5 )
    {
      v6 = (unsigned int *)(v5 + 20);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while ( __stlxr(v8, v6) );
      if ( !v8 )
        cv::Mat::deallocate((cv::Mat *)(i - 96));
    }
    v9 = *(_DWORD *)(i - 92);
    *(_QWORD *)(i - 40) = 0LL;
    *(_OWORD *)(i - 80) = 0u;
    *(_OWORD *)(i - 64) = 0u;
    if ( v9 >= 1 )
    {
      v10 = *(_QWORD *)(i - 32);
      v11 = 0LL;
      do
        *(_DWORD *)(v10 + 4 * v11++) = 0;
      while ( v11 < *(int *)(i - 92) );
    }
    v12 = *(cv **)(i - 24);
    if ( v12 != (cv *)(i - 16) )
      cv::fastFree(v12, a2);
  }
  if ( *(_QWORD *)a1 )
    operator delete(*(void **)a1);
}
// 14724: variable 'a2' is possibly undefined

//----- (0000000000014740) ----------------------------------------------------
void __noreturn std::__vector_base_common<true>::__throw_length_error()
{
  sub_BD4C("vector");
}

//----- (0000000000014754) ----------------------------------------------------
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n)
{
  unsigned __int64 v4; // x8
  char *v6; // x21
  size_t v9; // x27
  unsigned __int64 v10; // x28
  unsigned __int64 v11; // x23
  char *v12; // x8
  char *v13; // x23
  unsigned __int64 v14; // x8
  __int64 v15; // x24
  char *v16; // x22
  __int64 v18; // x8
  char *v19; // x8
  char *v20; // x0
  char *v21; // x25
  char *srca; // [xsp+8h] [xbp-58h]

  v4 = *(unsigned __int8 *)a1;
  v6 = src;
  if ( (v4 & 1) != 0 )
  {
    v9 = a1[1];
    if ( v9 < a2 )
      goto LABEL_44;
  }
  else
  {
    v9 = v4 >> 1;
    if ( v4 >> 1 < a2 )
LABEL_44:
      std::__basic_string_common<true>::__throw_out_of_range();
  }
  if ( (v4 & 1) != 0 )
    v10 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
  else
    v10 = 22LL;
  if ( v10 - v9 < n )
  {
    v11 = v9 + n;
    if ( -18LL - v10 < v9 + n - v10 )
      std::__basic_string_common<true>::__throw_length_error();
    if ( (v4 & 1) != 0 )
      v12 = (char *)a1[2];
    else
      v12 = (char *)a1 + 1;
    srca = v12;
    if ( v10 > 0x7FFFFFFFFFFFFFE6LL )
    {
      v15 = -17LL;
    }
    else
    {
      v14 = 2 * v10;
      if ( v11 >= 2 * v10 )
        v14 = v9 + n;
      if ( v14 >= 0x17 )
        v15 = (v14 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      else
        v15 = 23LL;
    }
    v20 = (char *)operator new(v15);
    v21 = v20;
    if ( a2 )
      memcpy(v20, srca, a2);
    memcpy(&v21[a2], v6, n);
    if ( v9 != a2 )
      memcpy(&v21[a2 + n], &srca[a2], v9 - a2);
    if ( v10 != 22 )
      operator delete(srca);
    *a1 = v15 | 1;
    v19 = &v21[v11];
    a1[1] = v11;
    a1[2] = (__int64)v21;
LABEL_42:
    *v19 = 0;
    return a1;
  }
  if ( n )
  {
    if ( (v4 & 1) != 0 )
      v13 = (char *)a1[2];
    else
      v13 = (char *)a1 + 1;
    v16 = &v13[a2];
    if ( v9 != a2 )
    {
      if ( &v13[v9] > src && v16 <= src )
        v6 = &src[n];
      memmove(&v16[n], v16, v9 - a2);
    }
    memmove(v16, v6, n);
    v18 = v9 + n;
    if ( (*(_BYTE *)a1 & 1) != 0 )
      a1[1] = v18;
    else
      *(_BYTE *)a1 = 2 * v18;
    v19 = &v13[v18];
    goto LABEL_42;
  }
  return a1;
}

//----- (0000000000014950) ----------------------------------------------------
void __noreturn std::__basic_string_common<true>::__throw_out_of_range()
{
  sub_14964("basic_string");
}

//----- (0000000000014964) ----------------------------------------------------
void __fastcall __noreturn sub_14964(const char *a1)
{
  std::logic_error *exception; // x19

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_149B4(exception, a1);
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::out_of_range,
    (void (__fastcall *)(void *))&std::out_of_range::~out_of_range);
}

//----- (00000000000149B4) ----------------------------------------------------
__int64 __fastcall sub_149B4(std::logic_error *a1, const char *a2)
{
  __int64 result; // x0

  result = std::logic_error::logic_error(a1, a2);
  *(_QWORD *)a1 = (char *)&`vtable for'std::out_of_range + 16;
  return result;
}

//----- (00000000000149E4) ----------------------------------------------------
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n)
{
  unsigned __int64 v3; // x8
  size_t v7; // x22
  unsigned __int64 v8; // x26
  unsigned __int64 v9; // x27
  void *v10; // x23
  char *v11; // x23
  unsigned __int64 v12; // x8
  __int64 v13; // x24
  __int64 v14; // x8
  char *v15; // x8
  char *v16; // x0
  char *v17; // x25

  v3 = *(unsigned __int8 *)a1;
  if ( (v3 & 1) != 0 )
  {
    v7 = a1[1];
    v8 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
  }
  else
  {
    v7 = v3 >> 1;
    v8 = 22LL;
  }
  if ( v8 - v7 < n )
  {
    v9 = v7 + n;
    if ( -18LL - v8 < v7 + n - v8 )
      std::__basic_string_common<true>::__throw_length_error();
    if ( (v3 & 1) != 0 )
      v10 = (void *)a1[2];
    else
      v10 = (char *)a1 + 1;
    if ( v8 > 0x7FFFFFFFFFFFFFE6LL )
    {
      v13 = -17LL;
    }
    else
    {
      v12 = 2 * v8;
      if ( v9 >= 2 * v8 )
        v12 = v7 + n;
      if ( v12 >= 0x17 )
        v13 = (v12 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      else
        v13 = 23LL;
    }
    v16 = (char *)operator new(v13);
    v17 = v16;
    if ( v7 )
      memcpy(v16, v10, v7);
    memcpy(&v17[v7], src, n);
    if ( v8 != 22 )
      operator delete(v10);
    *a1 = v13 | 1;
    v15 = &v17[v9];
    a1[1] = v9;
    a1[2] = (__int64)v17;
    goto LABEL_29;
  }
  if ( n )
  {
    if ( (v3 & 1) != 0 )
      v11 = (char *)a1[2];
    else
      v11 = (char *)a1 + 1;
    memcpy(&v11[v7], src, n);
    v14 = v7 + n;
    if ( (*(_BYTE *)a1 & 1) != 0 )
      a1[1] = v14;
    else
      *(_BYTE *)a1 = 2 * v14;
    v15 = &v11[v14];
LABEL_29:
    *v15 = 0;
  }
  return a1;
}

//----- (0000000000014B64) ----------------------------------------------------
void __fastcall std::vector<int>::__push_back_slow_path<int const&>(__int64 a1, _DWORD *a2)
{
  void *v2; // x20
  signed __int64 v4; // x21
  unsigned __int64 v5; // x8
  __int64 v7; // x9
  unsigned __int64 v8; // x9
  unsigned __int64 v9; // x25
  char *v10; // x23
  char *v11; // x24
  _DWORD *v12; // x24

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v5 = (v4 >> 2) + 1;
  if ( v5 >> 62 )
    std::__vector_base_common<true>::__throw_length_error();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if ( (unsigned __int64)(v7 >> 2) > 0x1FFFFFFFFFFFFFFELL )
  {
    v9 = 0x3FFFFFFFFFFFFFFFLL;
LABEL_10:
    v10 = (char *)operator new(4 * v9);
    goto LABEL_11;
  }
  v8 = v7 >> 1;
  if ( v8 >= v5 )
    v9 = v8;
  else
    v9 = (v4 >> 2) + 1;
  if ( v9 )
  {
    if ( v9 >> 62 )
      sub_BD4C("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v10 = 0LL;
LABEL_11:
  v11 = &v10[4 * (v4 >> 2)];
  *(_DWORD *)v11 = *a2;
  v12 = v11 + 4;
  if ( v4 >= 1 )
    memcpy(v10, v2, v4);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = &v10[4 * v9];
  if ( v2 )
    operator delete(v2);
}

// nfuncs=384 queued=212 decompiled=212 lumina nreq=0 worse=0 better=0
// ALL OK, 212 function(s) have been successfully decompiled
