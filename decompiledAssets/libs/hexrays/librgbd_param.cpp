/* This file was generated by the Hex-Rays decompiler version 8.4.0.240320.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void sub_1E80();
// void *memcpy(void *dest, const void *src, size_t n);
// void __fastcall operator delete(void *); idb
// _QWORD __fastcall std::logic_error::logic_error(std::logic_error *__hidden this, const char *); idb
void __fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(__int64 a1, _QWORD *a2);
// void *__fastcall __cxa_allocate_exception(size_t thrown_size);
void __fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(__int64 a1, _QWORD *a2);
// _QWORD pudutech::Ashdmem::create(pudutech::Ashdmem *__hidden this); idb
// void *memmove(void *dest, const void *src, size_t n);
// size_t strlen(const char *s);
// _QWORD pudutech::Ashdmem::destroyMemory(pudutech::Ashdmem *__hidden this); idb
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(__int64 a1, _QWORD *a2);
// __int64 __fastcall pudutech::Ashdmem::createMemory(_QWORD, _QWORD, _QWORD); weak
// void *__fastcall __cxa_begin_catch(void *);
// void __fastcall __noreturn __cxa_throw(void *, struct type_info *lptinfo, void (__fastcall *)(void *));
// int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle);
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n);
// _QWORD __fastcall operator new(unsigned __int64); idb
// int __fastcall __cxa_finalize(void *);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(__int64 a1, _QWORD *a2);
// __int64 __fastcall __register_atfork(_QWORD, _QWORD, _QWORD, _QWORD); weak
void __fastcall std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(__int64 a1, _QWORD *a2);
// void __noreturn std::terminate(void); idb
void __noreturn std::__basic_string_common<true>::__throw_length_error();
__int64 start();
__int64 sub_2414();
__int64 (*__fastcall sub_2428(__int64 (*result)(void)))(void);
__int64 __fastcall sub_2434(void *a1);
__int64 __fastcall sub_2450(__int64 a1, __int64 a2, __int64 a3);
void __fastcall std::string::~string(__int64 a1);
void __fastcall LEVELS::~LEVELS(void **this);
void __fastcall std::map<std::string,_jclass *>::~map(__int64 a1);
void __fastcall std::map<std::string,_jmethodID *>::~map(__int64 a1);
void __fastcall std::map<std::string,std::map<std::string,_jfieldID *>>::~map(__int64 a1);
void __fastcall std::map<rgbd::RgbdLocation,std::string>::~map(__int64 a1);
void __fastcall std::map<rgbd::RgbdLocation,_jobject *>::~map(__int64 a1);
void __fastcall std::map<rgbd::RgbdLocation,_jmethodID *>::~map(__int64 a1);
__int64 __fastcall rgbd::RGBDParam::RGBDParam(rgbd::RGBDParam *this, unsigned __int8 a2);
__int64 *__fastcall rgbd::RGBDParam::setSerialNum(__int64 a1, __int64 *a2);
__int64 __fastcall rgbd::RGBDParam::setType(__int64 this, const signed __int8 *a2);
__int64 __fastcall rgbd::RGBDParam::setCallback(__int64 a1, _QWORD *a2);
__int64 __fastcall rgbd::RGBDParam::setLocationCallback(__int64 a1, _QWORD *a2);
__int64 __fastcall rgbd::RGBDParam::transmitData(rgbd::RGBDParam *this, const unsigned int *a2, const unsigned int *a3, int *a4);
__int64 __fastcall rgbd::RGBDParam::transmitLoacationData(rgbd::RGBDParam *this, const unsigned int *a2, const unsigned int *a3, int *a4);
bool __fastcall rgbd::RGBDParam::createMemory(__int64 a1, __int64 a2, unsigned int *a3);
__int64 __fastcall rgbd::RGBDParam::destoryOldMemory(pudutech::Ashdmem **this);
__int64 __fastcall rgbd::RGBDParam::getLocation(rgbd::RGBDParam *this); // idb
// void *__usercall rgbd::RGBDParam::getName@<X0>(void *this@<X0>, size_t *a2@<X8>);
// void *__usercall rgbd::RGBDParam::getSerialNum@<X0>(void *this@<X0>, size_t *a2@<X8>);
__int64 __fastcall rgbd::RGBDParam::getType(rgbd::RGBDParam *this); // idb
__int64 __fastcall rgbd::RGBDParam::getAshmenAddress(rgbd::RGBDParam *this); // idb
__int64 *__fastcall rgbd::RGBDParam::changeLocation(rgbd::RGBDParam *this, const signed __int8 *a2);
void __fastcall std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall __noreturn sub_2B94(void *a1);
void __fastcall std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(__int64 a1, _QWORD *a2);
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(__int64 a1, _QWORD *a2);
void __noreturn std::__basic_string_common<true>::__throw_length_error();
void __fastcall __noreturn sub_2D80(const char *a1);
__int64 __fastcall sub_2DD0(std::logic_error *a1, const char *a2);
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n);
_QWORD *__fastcall sub_2F50(_QWORD *result, __int64 a2);
_QWORD *__fastcall sub_30B8(_QWORD *result, __int64 a2);
// void __fastcall std::length_error::~length_error(std::length_error *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

char *off_13C48 = "LeftRgbd"; // weak
void *off_14000 = &off_14000; // weak
int dword_14010; // weak
__int16 word_14018; // weak
_UNKNOWN unk_1401A; // weak
_UNKNOWN unk_14022; // weak
__int64 qword_14028; // weak
int dword_14030; // weak
__int16 word_14038; // weak
_UNKNOWN unk_1403A; // weak
_UNKNOWN unk_14042; // weak
__int64 qword_14048; // weak
int dword_14050; // weak
__int16 word_14058; // weak
_UNKNOWN unk_1405A; // weak
_UNKNOWN unk_14062; // weak
__int64 qword_14068; // weak
int dword_14070; // weak
__int16 word_14078; // weak
_UNKNOWN unk_1407A; // weak
_UNKNOWN unk_14082; // weak
__int64 qword_14088; // weak
int dword_14090; // weak
__int16 word_14098; // weak
_UNKNOWN unk_1409A; // weak
_UNKNOWN unk_140A2; // weak
__int64 qword_140A8; // weak
int dword_140B0; // weak
__int16 word_140B8; // weak
_UNKNOWN unk_140BA; // weak
_UNKNOWN unk_140C2; // weak
__int64 qword_140C8; // weak
int dword_140D0; // weak
char byte_140D8; // weak
_UNKNOWN unk_140D9; // weak
_UNKNOWN unk_140E1; // weak
__int64 qword_140E8; // weak
int dword_140F0; // weak
char byte_140F8; // weak
_UNKNOWN unk_140F9; // weak
_UNKNOWN unk_14101; // weak
_UNKNOWN unk_14105; // weak
_UNKNOWN unk_1410D; // weak
char byte_1410F; // weak
int dword_14110; // weak
char byte_14118; // weak
_BYTE algn_14119[7]; // weak
_UNKNOWN unk_14129; // weak
_UNKNOWN unk_1412D; // weak
char byte_1412F; // weak
__int64 qword_14130; // weak
_UNKNOWN unk_14138; // weak
__int64 qword_14140; // weak
__int64 qword_14148; // weak
_UNKNOWN unk_14150; // weak
__int64 qword_14158; // weak
__int64 qword_14160; // weak
__int64 qword_14168; // weak
__int64 qword_14170; // weak
__int64 qword_14178; // weak
__int64 qword_14180; // weak
__int64 qword_14188; // weak
__int64 qword_14190; // weak
__int64 qword_14198; // weak
__int64 qword_141A0; // weak
__int64 qword_141A8; // weak
__int64 qword_141B0; // weak
__int64 qword_141B8; // weak
__int64 qword_141C0; // weak
__int64 qword_141C8; // weak
__int64 qword_141D0; // weak
__int64 qword_141D8; // weak
__int64 qword_141E0; // weak
__int64 qword_141E8; // weak
// extern _UNKNOWN `typeinfo for'std::length_error; weak
// extern _UNKNOWN `vtable for'std::length_error; weak


//----- (0000000000001E80) ----------------------------------------------------
void sub_1E80()
{
  JUMPOUT(0LL);
}
// 1E90: control flows out of bounds to 0

//----- (0000000000001ED0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP9_jfieldIDEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (0000000000001EF0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_3mapIS7_P9_jfieldIDNS_4lessIS7_EENS5_INS_4pairIKS7_SA_EEEEEEEENS_19__map_value_compareIS7_SI_SC_Lb1EEENS5_ISI_EEE7destroyEPNS_11__tree_nodeISI_PvEE(
    a1,
    a2);
}

//----- (0000000000001F00) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP10_jmethodIDEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (0000000000001F50) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeIN4rgbd12RgbdLocationEP10_jmethodIDEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(
    a1,
    a2);
}

//----- (0000000000001F60) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeIN4rgbd12RgbdLocationEP8_jobjectEENS_19__map_value_compareIS3_S6_NS_4lessIS3_EELb1EEENS_9allocatorIS6_EEE7destroyEPNS_11__tree_nodeIS6_PvEE(
    a1,
    a2);
}

//----- (0000000000001FE0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm(a1, src, n);
}

//----- (0000000000002010) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeIN4rgbd12RgbdLocationENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEENS_19__map_value_compareIS3_SA_NS_4lessIS3_EELb1EEENS7_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (0000000000002030) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEP7_jclassEENS_19__map_value_compareIS7_SA_NS_4lessIS7_EELb1EEENS5_ISA_EEE7destroyEPNS_11__tree_nodeISA_PvEE(
    a1,
    a2);
}

//----- (0000000000002060) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__basic_string_common<true>::__throw_length_error()
{
  _ZNKSt6__ndk121__basic_string_commonILb1EE20__throw_length_errorEv();
}

//----- (0000000000002080) ----------------------------------------------------
__int64 start()
{
  dword_14010 = 100;
  word_14018 = 17410;
  unk_14022 = 0LL;
  unk_1401A = 0LL;
  qword_14028 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_14010, &off_14000);
  dword_14030 = 50;
  word_14038 = 22018;
  unk_14042 = 0LL;
  unk_1403A = 0LL;
  qword_14048 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_14030, &off_14000);
  dword_14050 = 300;
  word_14058 = 18690;
  unk_14062 = 0LL;
  unk_1405A = 0LL;
  qword_14068 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_14050, &off_14000);
  dword_14070 = 500;
  word_14078 = 22274;
  unk_14082 = 0LL;
  unk_1407A = 0LL;
  qword_14088 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_14070, &off_14000);
  dword_14090 = 800;
  word_14098 = 17666;
  unk_140A2 = 0LL;
  unk_1409A = 0LL;
  qword_140A8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_14090, &off_14000);
  dword_140B0 = 1000;
  word_140B8 = 17922;
  unk_140C2 = 0LL;
  unk_140BA = 0LL;
  qword_140C8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_140B0, &off_14000);
  dword_140D0 = 2000;
  byte_140D8 = 16;
  unk_140D9 = 0x54434152544E4F43LL;
  qword_140E8 = 0LL;
  unk_140E1 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_140D0, &off_14000);
  dword_140F0 = 2001;
  byte_140F8 = 24;
  unk_14101 = 1279348295;
  byte_1410F = 0;
  unk_1410D = 0;
  unk_140F9 = *(_QWORD *)"FATAL_SIGNAL";
  unk_14105 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_140F0, &off_14000);
  dword_14110 = 2002;
  byte_14118 = 30;
  byte_1412F = 0;
  unk_1412D = 0;
  strcpy(algn_14119, "FATAL_EXCEPTION");
  unk_14129 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_14110, &off_14000);
  unk_14138 = 0LL;
  qword_14140 = 0LL;
  qword_14130 = 16LL;
  *(__int64 *)((char *)&qword_14130 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_14130, &off_14000);
  unk_14150 = 0x3366252000LL;
  qword_14158 = 0LL;
  qword_14148 = 24LL;
  *(__int64 *)((char *)&qword_14148 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_14148, &off_14000);
  qword_14168 = 0LL;
  qword_14170 = 0LL;
  qword_14160 = (__int64)&qword_14168;
  __cxa_atexit((void (__fastcall *)(void *))std::map<std::string,_jclass *>::~map, &qword_14160, &off_14000);
  qword_14180 = 0LL;
  qword_14188 = 0LL;
  qword_14178 = (__int64)&qword_14180;
  __cxa_atexit((void (__fastcall *)(void *))std::map<std::string,_jmethodID *>::~map, &qword_14178, &off_14000);
  qword_14198 = 0LL;
  qword_141A0 = 0LL;
  qword_14190 = (__int64)&qword_14198;
  __cxa_atexit(
    (void (__fastcall *)(void *))std::map<std::string,std::map<std::string,_jfieldID *>>::~map,
    &qword_14190,
    &off_14000);
  qword_141B0 = 0LL;
  qword_141B8 = 0LL;
  qword_141A8 = (__int64)&qword_141B0;
  __cxa_atexit((void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,std::string>::~map, &qword_141A8, &off_14000);
  qword_141C8 = 0LL;
  qword_141D0 = 0LL;
  qword_141C0 = (__int64)&qword_141C8;
  __cxa_atexit((void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,_jobject *>::~map, &qword_141C0, &off_14000);
  qword_141E8 = 0LL;
  qword_141E0 = 0LL;
  qword_141D8 = (__int64)&qword_141E0;
  return __cxa_atexit(
           (void (__fastcall *)(void *))std::map<rgbd::RgbdLocation,_jmethodID *>::~map,
           &qword_141D8,
           &off_14000);
}
// 14000: using guessed type void *off_14000;
// 14010: using guessed type int dword_14010;
// 14018: using guessed type __int16 word_14018;
// 14028: using guessed type __int64 qword_14028;
// 14030: using guessed type int dword_14030;
// 14038: using guessed type __int16 word_14038;
// 14048: using guessed type __int64 qword_14048;
// 14050: using guessed type int dword_14050;
// 14058: using guessed type __int16 word_14058;
// 14068: using guessed type __int64 qword_14068;
// 14070: using guessed type int dword_14070;
// 14078: using guessed type __int16 word_14078;
// 14088: using guessed type __int64 qword_14088;
// 14090: using guessed type int dword_14090;
// 14098: using guessed type __int16 word_14098;
// 140A8: using guessed type __int64 qword_140A8;
// 140B0: using guessed type int dword_140B0;
// 140B8: using guessed type __int16 word_140B8;
// 140C8: using guessed type __int64 qword_140C8;
// 140D0: using guessed type int dword_140D0;
// 140D8: using guessed type char byte_140D8;
// 140E8: using guessed type __int64 qword_140E8;
// 140F0: using guessed type int dword_140F0;
// 140F8: using guessed type char byte_140F8;
// 1410F: using guessed type char byte_1410F;
// 14110: using guessed type int dword_14110;
// 14118: using guessed type char byte_14118;
// 14119: using guessed type _BYTE algn_14119[7];
// 14120: using guessed type __int64 qword_14120;
// 14128: using guessed type char byte_14128;
// 1412F: using guessed type char byte_1412F;
// 14130: using guessed type __int64 qword_14130;
// 14140: using guessed type __int64 qword_14140;
// 14148: using guessed type __int64 qword_14148;
// 14158: using guessed type __int64 qword_14158;
// 14160: using guessed type __int64 qword_14160;
// 14168: using guessed type __int64 qword_14168;
// 14170: using guessed type __int64 qword_14170;
// 14178: using guessed type __int64 qword_14178;
// 14180: using guessed type __int64 qword_14180;
// 14188: using guessed type __int64 qword_14188;
// 14190: using guessed type __int64 qword_14190;
// 14198: using guessed type __int64 qword_14198;
// 141A0: using guessed type __int64 qword_141A0;
// 141A8: using guessed type __int64 qword_141A8;
// 141B0: using guessed type __int64 qword_141B0;
// 141B8: using guessed type __int64 qword_141B8;
// 141C0: using guessed type __int64 qword_141C0;
// 141C8: using guessed type __int64 qword_141C8;
// 141D0: using guessed type __int64 qword_141D0;
// 141D8: using guessed type __int64 qword_141D8;
// 141E0: using guessed type __int64 qword_141E0;
// 141E8: using guessed type __int64 qword_141E8;

//----- (0000000000002414) ----------------------------------------------------
__int64 sub_2414()
{
  return __cxa_finalize(&off_14000);
}
// 14000: using guessed type void *off_14000;

//----- (0000000000002428) ----------------------------------------------------
__int64 (*__fastcall sub_2428(__int64 (*result)(void)))(void)
{
  if ( result )
    return (__int64 (*)(void))result();
  return result;
}

//----- (0000000000002434) ----------------------------------------------------
__int64 __fastcall sub_2434(void *a1)
{
  return __cxa_atexit((void (__fastcall *)(void *))sub_2428, a1, &off_14000);
}
// 14000: using guessed type void *off_14000;

//----- (0000000000002450) ----------------------------------------------------
__int64 __fastcall sub_2450(__int64 a1, __int64 a2, __int64 a3)
{
  return __register_atfork(a1, a2, a3, &off_14000);
}
// 2020: using guessed type __int64 __fastcall __register_atfork(_QWORD, _QWORD, _QWORD, _QWORD);
// 14000: using guessed type void *off_14000;

//----- (000000000000245C) ----------------------------------------------------
void __fastcall std::string::~string(__int64 a1)
{
  if ( (*(_BYTE *)a1 & 1) != 0 )
    operator delete(*(void **)(a1 + 16));
}

//----- (0000000000002470) ----------------------------------------------------
void __fastcall LEVELS::~LEVELS(void **this)
{
  if ( ((_BYTE)this[1] & 1) != 0 )
    operator delete(this[3]);
}

//----- (0000000000002484) ----------------------------------------------------
void __fastcall std::map<std::string,_jclass *>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000248C) ----------------------------------------------------
void __fastcall std::map<std::string,_jmethodID *>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (0000000000002494) ----------------------------------------------------
void __fastcall std::map<std::string,std::map<std::string,_jfieldID *>>::~map(__int64 a1)
{
  std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (000000000000249C) ----------------------------------------------------
void __fastcall std::map<rgbd::RgbdLocation,std::string>::~map(__int64 a1)
{
  std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (00000000000024A4) ----------------------------------------------------
void __fastcall std::map<rgbd::RgbdLocation,_jobject *>::~map(__int64 a1)
{
  std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (00000000000024AC) ----------------------------------------------------
void __fastcall std::map<rgbd::RgbdLocation,_jmethodID *>::~map(__int64 a1)
{
  std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
    a1,
    *(_QWORD **)(a1 + 8));
}

//----- (00000000000024B4) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::RGBDParam(rgbd::RGBDParam *this, unsigned __int8 a2)
{
  _QWORD *v4; // x20
  const char *v5; // x22
  size_t v6; // x0
  size_t v7; // x23
  void *v8; // x24
  unsigned __int64 v9; // x25
  __int64 result; // x0

  v4 = (_QWORD *)((char *)this + 16);
  *(_QWORD *)this = 0LL;
  *((_QWORD *)this + 1) = 0LL;
  if ( a2 > 3u )
    v5 = "Rgbd";
  else
    v5 = (&off_13C48)[(char)a2];
  *v4 = 0LL;
  *((_QWORD *)this + 3) = 0LL;
  *((_QWORD *)this + 4) = 0LL;
  v6 = strlen(v5);
  if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v7 = v6;
  if ( v6 >= 0x17 )
  {
    v9 = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v8 = (void *)operator new(v9);
    *((_QWORD *)this + 3) = v7;
    *((_QWORD *)this + 4) = v8;
    *((_QWORD *)this + 2) = v9 | 1;
  }
  else
  {
    *(_BYTE *)v4 = 2 * v6;
    v8 = (char *)v4 + 1;
    if ( !v6 )
      goto LABEL_10;
  }
  v6 = (size_t)memcpy(v8, v5, v7);
LABEL_10:
  *((_BYTE *)v8 + v7) = 0;
  *((_QWORD *)this + 6) = 0LL;
  *((_BYTE *)this + 40) = a2;
  *((_QWORD *)this + 7) = 0LL;
  *((_QWORD *)this + 8) = 0LL;
  *((_BYTE *)this + 49) = 0;
  *((_BYTE *)this + 72) = -1;
  result = pudutech::Ashdmem::create((pudutech::Ashdmem *)v6);
  *((_QWORD *)this + 12) = 0LL;
  *((_QWORD *)this + 18) = 0LL;
  *((_DWORD *)this + 26) = -1;
  *((_QWORD *)this + 24) = 0LL;
  return result;
}
// 13C48: using guessed type char *off_13C48;

//----- (0000000000002628) ----------------------------------------------------
__int64 *__fastcall rgbd::RGBDParam::setSerialNum(__int64 a1, __int64 *a2)
{
  __int64 *result; // x0
  unsigned __int64 v3; // x8
  size_t v4; // x10
  void *v5; // x1
  size_t v6; // x2

  result = (__int64 *)(a1 + 48);
  if ( result != a2 )
  {
    v3 = *(unsigned __int8 *)a2;
    v4 = a2[1];
    if ( (v3 & 1) != 0 )
      v5 = (void *)a2[2];
    else
      v5 = (char *)a2 + 1;
    if ( (v3 & 1) != 0 )
      v6 = v4;
    else
      v6 = v3 >> 1;
    return std::string::assign(result, v5, v6);
  }
  return result;
}

//----- (0000000000002660) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::setType(__int64 this, const signed __int8 *a2)
{
  *(_BYTE *)(this + 72) = *a2;
  return this;
}

//----- (000000000000266C) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::setCallback(__int64 a1, _QWORD *a2)
{
  _QWORD *v3; // x8
  __int64 result; // x0
  __int64 (*v5)(void); // x8
  _QWORD v6[4]; // [xsp+0h] [xbp-50h] BYREF
  _QWORD *v7; // [xsp+20h] [xbp-30h]
  __int64 v8; // [xsp+38h] [xbp-18h]

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = (_QWORD *)a2[4];
  if ( v3 )
  {
    if ( a2 == v3 )
    {
      v7 = v6;
      (*(void (__fastcall **)(_QWORD *, _QWORD *, _QWORD *))(*v3 + 24LL))(v3, v3, v6);
    }
    else
    {
      v7 = (*(_QWORD *(__fastcall **)(_QWORD *, _QWORD))(*v3 + 16LL))(v3, a2[4]);
    }
  }
  else
  {
    v7 = 0LL;
  }
  sub_2F50(v6, a1 + 112);
  result = (__int64)v7;
  if ( v6 == v7 )
  {
    v5 = *(__int64 (**)(void))(*v7 + 32LL);
  }
  else
  {
    if ( !v7 )
      return result;
    v5 = *(__int64 (**)(void))(*v7 + 40LL);
  }
  return v5();
}

//----- (0000000000002734) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::setLocationCallback(__int64 a1, _QWORD *a2)
{
  _QWORD *v3; // x8
  __int64 result; // x0
  __int64 (*v5)(void); // x8
  _QWORD v6[4]; // [xsp+0h] [xbp-50h] BYREF
  _QWORD *v7; // [xsp+20h] [xbp-30h]
  __int64 v8; // [xsp+38h] [xbp-18h]

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = (_QWORD *)a2[4];
  if ( v3 )
  {
    if ( a2 == v3 )
    {
      v7 = v6;
      (*(void (__fastcall **)(_QWORD *, _QWORD *, _QWORD *))(*v3 + 24LL))(v3, v3, v6);
    }
    else
    {
      v7 = (*(_QWORD *(__fastcall **)(_QWORD *, _QWORD))(*v3 + 16LL))(v3, a2[4]);
    }
  }
  else
  {
    v7 = 0LL;
  }
  sub_30B8(v6, a1 + 160);
  result = (__int64)v7;
  if ( v6 == v7 )
  {
    v5 = *(__int64 (**)(void))(*v7 + 32LL);
  }
  else
  {
    if ( !v7 )
      return result;
    v5 = *(__int64 (**)(void))(*v7 + 40LL);
  }
  return v5();
}

//----- (00000000000027FC) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::transmitData(
        rgbd::RGBDParam *this,
        const unsigned int *a2,
        const unsigned int *a3,
        int *a4)
{
  __int64 result; // x0
  int v6; // w8
  int v7; // w10
  int v8; // w11
  int v9; // [xsp+8h] [xbp-28h] BYREF
  int v10; // [xsp+Ch] [xbp-24h] BYREF
  int v11; // [xsp+10h] [xbp-20h] BYREF
  int v12; // [xsp+14h] [xbp-1Ch] BYREF
  __int64 v13; // [xsp+18h] [xbp-18h]

  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  result = *((_QWORD *)this + 18);
  if ( result )
  {
    v6 = *((_DWORD *)this + 26);
    v7 = *a3;
    v8 = *a4;
    v11 = *a2;
    v12 = v6;
    v9 = v8;
    v10 = v7;
    return (*(__int64 (__fastcall **)(__int64, int *, int *, int *, int *))(*(_QWORD *)result + 48LL))(
             result,
             &v12,
             &v11,
             &v10,
             &v9);
  }
  return result;
}

//----- (000000000000287C) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::transmitLoacationData(
        rgbd::RGBDParam *this,
        const unsigned int *a2,
        const unsigned int *a3,
        int *a4)
{
  __int64 result; // x0
  int v6; // w9
  char v7; // w8
  int v8; // w10
  int v9; // w11
  int v10; // w12
  int v11; // [xsp+4h] [xbp-2Ch] BYREF
  int v12; // [xsp+8h] [xbp-28h] BYREF
  int v13; // [xsp+Ch] [xbp-24h] BYREF
  char v14[4]; // [xsp+10h] [xbp-20h] BYREF
  int v15; // [xsp+14h] [xbp-1Ch] BYREF
  __int64 v16; // [xsp+18h] [xbp-18h]

  v16 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  result = *((_QWORD *)this + 24);
  if ( result )
  {
    v6 = *((_DWORD *)this + 26);
    v7 = *((_BYTE *)this + 40);
    v8 = *a2;
    v9 = *a3;
    v10 = *a4;
    v15 = v6;
    v14[0] = v7;
    v12 = v9;
    v13 = v8;
    v11 = v10;
    return (*(__int64 (__fastcall **)(__int64, int *, char *, int *, int *, int *))(*(_QWORD *)result + 48LL))(
             result,
             &v15,
             v14,
             &v13,
             &v12,
             &v11);
  }
  return result;
}
// 287C: using guessed type char var_20[4];

//----- (000000000000290C) ----------------------------------------------------
bool __fastcall rgbd::RGBDParam::createMemory(__int64 a1, __int64 a2, unsigned int *a3)
{
  int Memory; // w0
  __int64 v5; // x1

  Memory = pudutech::Ashdmem::createMemory(*(_QWORD *)(a1 + 80), a2, *a3);
  *(_DWORD *)(a1 + 104) = Memory;
  *(_QWORD *)(a1 + 96) = v5;
  return Memory != -1 && v5 != 0;
}
// 2930: variable 'v5' is possibly undefined
// 1F70: using guessed type __int64 __fastcall pudutech::Ashdmem::createMemory(_QWORD, _QWORD, _QWORD);

//----- (0000000000002954) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::destoryOldMemory(pudutech::Ashdmem **this)
{
  return pudutech::Ashdmem::destroyMemory(this[10]);
}

//----- (000000000000295C) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::getLocation(rgbd::RGBDParam *this)
{
  return (unsigned int)*((char *)this + 40);
}

//----- (0000000000002964) ----------------------------------------------------
void *__usercall rgbd::RGBDParam::getName@<X0>(void *this@<X0>, size_t *a2@<X8>)
{
  __int128 v3; // q0
  size_t v4; // x20
  const void *v5; // x21
  void *v6; // x19
  void *v7; // x0

  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = 0LL;
  if ( (*((_BYTE *)this + 16) & 1) == 0 )
  {
    v3 = *((_OWORD *)this + 1);
    a2[2] = *((_QWORD *)this + 4);
    *(_OWORD *)a2 = v3;
    return this;
  }
  v4 = *((_QWORD *)this + 3);
  if ( v4 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v5 = (const void *)*((_QWORD *)this + 4);
  if ( v4 >= 0x17 )
  {
    v7 = (void *)operator new((v4 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    a2[1] = v4;
    a2[2] = (size_t)v7;
    *a2 = (v4 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    v6 = v7;
  }
  else
  {
    *(_BYTE *)a2 = 2 * v4;
    v6 = (char *)a2 + 1;
    if ( !v4 )
      goto LABEL_9;
  }
  this = memcpy(v6, v5, v4);
LABEL_9:
  *((_BYTE *)v6 + v4) = 0;
  return this;
}

//----- (0000000000002A14) ----------------------------------------------------
void *__usercall rgbd::RGBDParam::getSerialNum@<X0>(void *this@<X0>, size_t *a2@<X8>)
{
  __int128 v3; // q0
  size_t v4; // x20
  const void *v5; // x21
  void *v6; // x19
  void *v7; // x0

  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = 0LL;
  if ( (*((_BYTE *)this + 48) & 1) == 0 )
  {
    v3 = *((_OWORD *)this + 3);
    a2[2] = *((_QWORD *)this + 8);
    *(_OWORD *)a2 = v3;
    return this;
  }
  v4 = *((_QWORD *)this + 7);
  if ( v4 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v5 = (const void *)*((_QWORD *)this + 8);
  if ( v4 >= 0x17 )
  {
    v7 = (void *)operator new((v4 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    a2[1] = v4;
    a2[2] = (size_t)v7;
    *a2 = (v4 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    v6 = v7;
  }
  else
  {
    *(_BYTE *)a2 = 2 * v4;
    v6 = (char *)a2 + 1;
    if ( !v4 )
      goto LABEL_9;
  }
  this = memcpy(v6, v5, v4);
LABEL_9:
  *((_BYTE *)v6 + v4) = 0;
  return this;
}

//----- (0000000000002AC4) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::getType(rgbd::RGBDParam *this)
{
  return *((unsigned __int8 *)this + 72);
}

//----- (0000000000002ACC) ----------------------------------------------------
__int64 __fastcall rgbd::RGBDParam::getAshmenAddress(rgbd::RGBDParam *this)
{
  return *((_QWORD *)this + 12);
}

//----- (0000000000002AD4) ----------------------------------------------------
__int64 *__fastcall rgbd::RGBDParam::changeLocation(rgbd::RGBDParam *this, const signed __int8 *a2)
{
  unsigned __int64 v2; // x8
  char *v5; // x21
  size_t v6; // x0
  __int64 *result; // x0

  v2 = *a2;
  if ( v2 > 3 )
    v5 = "Rgbd";
  else
    v5 = (&off_13C48)[v2];
  v6 = strlen(v5);
  result = std::string::assign((__int64 *)this + 2, v5, v6);
  *((_BYTE *)this + 40) = *a2;
  return result;
}
// 13C48: using guessed type char *off_13C48;

//----- (0000000000002B44) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,_jclass *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jclass *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jclass *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000002B94) ----------------------------------------------------
void __fastcall __noreturn sub_2B94(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

//----- (0000000000002BA0) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,_jmethodID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jmethodID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jmethodID *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000002BF0) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::map<std::string,_jfieldID *>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::map<std::string,_jfieldID *>>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
      (__int64)(a2 + 7),
      (_QWORD *)a2[8]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000002C4C) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<std::string,_jfieldID *>,std::__map_value_compare<std::string,std::__value_type<std::string,_jfieldID *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,_jfieldID *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[4] & 1) != 0 )
      operator delete((void *)a2[6]);
    operator delete(a2);
  }
}

//----- (0000000000002C9C) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<rgbd::RgbdLocation,std::string>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,std::string>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,std::string>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    if ( (a2[5] & 1) != 0 )
      operator delete((void *)a2[7]);
    operator delete(a2);
  }
}

//----- (0000000000002CEC) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<rgbd::RgbdLocation,_jobject *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jobject *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jobject *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    operator delete(a2);
  }
}

//----- (0000000000002D2C) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
        __int64 a1,
        _QWORD *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
      a1,
      (_QWORD *)*a2);
    std::__tree<std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::__map_value_compare<rgbd::RgbdLocation,std::__value_type<rgbd::RgbdLocation,_jmethodID *>,std::less<rgbd::RgbdLocation>,true>,std::allocator<std::__value_type<rgbd::RgbdLocation,_jmethodID *>>>::destroy(
      a1,
      (_QWORD *)a2[1]);
    operator delete(a2);
  }
}

//----- (0000000000002D6C) ----------------------------------------------------
void __noreturn std::__basic_string_common<true>::__throw_length_error()
{
  sub_2D80("basic_string");
}

//----- (0000000000002D80) ----------------------------------------------------
void __fastcall __noreturn sub_2D80(const char *a1)
{
  std::logic_error *exception; // x19

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2DD0(exception, a1);
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::length_error,
    (void (__fastcall *)(void *))&std::length_error::~length_error);
}

//----- (0000000000002DD0) ----------------------------------------------------
__int64 __fastcall sub_2DD0(std::logic_error *a1, const char *a2)
{
  __int64 result; // x0

  result = std::logic_error::logic_error(a1, a2);
  *(_QWORD *)a1 = (char *)&`vtable for'std::length_error + 16;
  return result;
}

//----- (0000000000002E00) ----------------------------------------------------
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n)
{
  unsigned __int64 v6; // x25
  _BYTE *v7; // x22
  void *v8; // x22
  unsigned __int64 v9; // x8
  __int64 v10; // x23
  void *v11; // x24

  if ( (*(_BYTE *)a1 & 1) != 0 )
  {
    v6 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
    if ( v6 >= n )
    {
LABEL_3:
      if ( (*(_BYTE *)a1 & 1) != 0 )
      {
        v7 = (_BYTE *)a1[2];
        if ( !n )
          goto LABEL_12;
      }
      else
      {
        v7 = (char *)a1 + 1;
        if ( !n )
        {
LABEL_12:
          v7[n] = 0;
          if ( (*(_BYTE *)a1 & 1) != 0 )
            a1[1] = n;
          else
            *(_BYTE *)a1 = 2 * n;
          return a1;
        }
      }
      memmove(v7, src, n);
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 22LL;
    if ( n <= 0x16 )
      goto LABEL_3;
  }
  if ( -18LL - v6 < n - v6 )
    std::__basic_string_common<true>::__throw_length_error();
  if ( (*(_BYTE *)a1 & 1) != 0 )
    v8 = (void *)a1[2];
  else
    v8 = (char *)a1 + 1;
  if ( v6 > 0x7FFFFFFFFFFFFFE6LL )
  {
    v10 = -17LL;
  }
  else
  {
    v9 = 2 * v6;
    if ( 2 * v6 <= n )
      v9 = n;
    if ( v9 >= 0x17 )
      v10 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    else
      v10 = 23LL;
  }
  v11 = (void *)operator new(v10);
  memcpy(v11, src, n);
  if ( v6 != 22 )
    operator delete(v8);
  a1[1] = n;
  a1[2] = (__int64)v11;
  *a1 = v10 | 1;
  *((_BYTE *)v11 + n) = 0;
  return a1;
}

//----- (0000000000002F50) ----------------------------------------------------
_QWORD *__fastcall sub_2F50(_QWORD *result, __int64 a2)
{
  _QWORD *v2; // x20
  __int64 v4; // x8
  __int64 v5[6]; // [xsp+0h] [xbp-50h] BYREF

  v5[5] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (_QWORD *)a2 != result )
  {
    v2 = result;
    result = (_QWORD *)result[4];
    if ( result == v2 )
    {
      if ( *(_QWORD *)(a2 + 32) == a2 )
      {
        (*(void (__fastcall **)(_QWORD *, __int64 *))(*result + 24LL))(result, v5);
        (*(void (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = 0LL;
        (*(void (__fastcall **)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 32) + 24LL))(*(_QWORD *)(a2 + 32), v2);
        (*(void (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = 0LL;
        v2[4] = v2;
        (*(void (__fastcall **)(__int64 *, __int64))(v5[0] + 24))(v5, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(__int64 *))(v5[0] + 32))(v5);
      }
      else
      {
        (*(void (__fastcall **)(_QWORD *, __int64))(*result + 24LL))(result, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = a2;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 32);
      if ( a2 == v4 )
      {
        (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 24LL))(*(_QWORD *)(a2 + 32), v2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = v2[4];
        v2[4] = v2;
      }
      else
      {
        v2[4] = v4;
        *(_QWORD *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

//----- (00000000000030B8) ----------------------------------------------------
_QWORD *__fastcall sub_30B8(_QWORD *result, __int64 a2)
{
  _QWORD *v2; // x20
  __int64 v4; // x8
  __int64 v5[6]; // [xsp+0h] [xbp-50h] BYREF

  v5[5] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (_QWORD *)a2 != result )
  {
    v2 = result;
    result = (_QWORD *)result[4];
    if ( result == v2 )
    {
      if ( *(_QWORD *)(a2 + 32) == a2 )
      {
        (*(void (__fastcall **)(_QWORD *, __int64 *))(*result + 24LL))(result, v5);
        (*(void (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = 0LL;
        (*(void (__fastcall **)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 32) + 24LL))(*(_QWORD *)(a2 + 32), v2);
        (*(void (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = 0LL;
        v2[4] = v2;
        (*(void (__fastcall **)(__int64 *, __int64))(v5[0] + 24))(v5, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(__int64 *))(v5[0] + 32))(v5);
      }
      else
      {
        (*(void (__fastcall **)(_QWORD *, __int64))(*result + 24LL))(result, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = a2;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 32);
      if ( a2 == v4 )
      {
        (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 24LL))(*(_QWORD *)(a2 + 32), v2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = v2[4];
        v2[4] = v2;
      }
      else
      {
        v2[4] = v4;
        *(_QWORD *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

// nfuncs=97 queued=52 decompiled=52 lumina nreq=0 worse=0 better=0
// ALL OK, 52 function(s) have been successfully decompiled
