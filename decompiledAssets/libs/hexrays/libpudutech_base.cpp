/* This file was generated by the Hex-Rays decompiler version 8.4.0.240320.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

void sub_10410();
// void __usercall nlohmann::detail::type_error::create(unsigned __int8 *a2@<X1>, unsigned int a1@<W0>, __int64 a3@<X8>);
// void __usercall nlohmann::detail::exception::name(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, __int64 a3@<X8>);
// char *strerror(int errnum);
// void *memcpy(void *dest, const void *src, size_t n);
__int64 __fastcall pudutech::Ashdmem::releaseSharedMemory(pudutech::Ashdmem *this); // idb
unsigned __int64 *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>(const char *a1);
char *__fastcall std::vector<unsigned char>::insert<char *>(__int64 a1, char *src, char *a3, char *a4);
_QWORD *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::erase(_QWORD *a1, __int64 a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(void **a1, __int64 a2);
// __int64 *__usercall std::operator+<char>@<X0>(const char *a1@<X0>, unsigned __int8 *a2@<X1>, __int64 *a3@<X8>);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<double &>(__int64 a1, _QWORD *a2);
char *__fastcall pudutech::ThreadTaskQueue::init(pudutech::ThreadTaskQueue *this);
void __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(__int64 a1, char *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(__int64 a1, __int64 a2, __int64 a3, const nlohmann::detail::invalid_iterator *a4);
// void __fastcall operator delete(void *); idb
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(__int64 a1);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_array(_QWORD *a1, std::__ndk1 *a2);
__int64 __fastcall pudutech::Ashdmem::linkSharedMemory(pudutech::Ashdmem *this, int fd); // idb
// int close(int fd);
// _QWORD __fastcall std::logic_error::logic_error(std::logic_error *__hidden this, const char *); idb
__int64 __fastcall nlohmann::detail::invalid_iterator::invalid_iterator(nlohmann::detail::invalid_iterator *this, const nlohmann::detail::invalid_iterator *a2); // idb
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
// _QWORD __fastcall std::runtime_error::runtime_error(std::runtime_error *__hidden this, const std::runtime_error *); idb
// _QWORD __fastcall std::ios_base::clear(std::ios_base *__hidden this, unsigned int); idb
__int64 *__fastcall std::__tree_remove<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2);
_QWORD *__fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::operator[](__int64 a1, __int128 *a2);
// void __cxa_end_catch(void);
_QWORD *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::erase(_QWORD *a1, __int64 a2);
// void *__fastcall __cxa_allocate_exception(size_t thrown_size);
_QWORD *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::erase(_QWORD *a1, __int64 a2);
// int pthread_setname_np(pthread_t target_thread, const char *name);
void __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::json_sax_dom_callback_parser(__int64 a1, __int64 a2, __int64 a3, char a4);
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front(const void **a1, _QWORD *a2);
__int64 __fastcall protocol::DomainSockClient::processLoop(__int64 a1, __int64 a2);
void __noreturn std::__basic_string_common<true>::__throw_out_of_range();
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_number(__int64 a1);
// _QWORD std::thread::detach(std::thread *__hidden this); idb
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<unsigned long &>(__int64 a1, _QWORD *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_array(__int64 a1);
// _QWORD std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *__hidden this); idb
__int64 __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::find<std::string>(__int64 a1, unsigned __int8 *a2);
void __fastcall std::__deque_base<std::function<void ()(void)>>::clear(_QWORD *a1);
__int64 __fastcall pudutech::ThreadRunner::getMutex(pudutech::ThreadRunner *this); // idb
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result);
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
__int64 __fastcall nlohmann::detail::out_of_range::out_of_range(nlohmann::detail::out_of_range *this, const nlohmann::detail::out_of_range *a2); // idb
signed __int64 __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::vector(signed __int64 *a1, unsigned __int8 **a2);
// _QWORD std::mutex::unlock(std::mutex *__hidden this); idb
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(__int64 a1, void ***a2, char a3);
// void __fastcall std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *__hidden this); idb
// int pthread_setspecific(pthread_key_t key, const void *pointer);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<long &>(__int64 a1, _QWORD *a2);
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3);
// ssize_t send(int fd, const void *buf, size_t n, int flags);
// void __fastcall __cxa_guard_release(__guard *);
// void *memmove(void *dest, const void *src, size_t n);
// int bind(int fd, const struct sockaddr *addr, socklen_t len);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(__int64 a1, __int128 *a2);
// size_t strlen(const char *s);
__int64 __fastcall std::function<bool ()(void)>::~function(__int64 a1);
// pthread_t pthread_self(void);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
// _QWORD std::__thread_struct::__thread_struct(std::__thread_struct *__hidden this); idb
__int64 __fastcall protocol::DomainSockServer::processLoop(__int64 a1, __int64 a2);
_QWORD *__fastcall std::vector<bool>::__construct_at_end<std::__bit_iterator<std::vector<bool>,false,0ul>>(_QWORD *result, __int64 a2, __int64 a3);
// __int64 __fastcall g3::logLevel(_QWORD); weak
// _QWORD std::thread::join(std::thread *__hidden this); idb
// LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *); weak
// double strtod(const char *nptr, char **endptr);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
void __fastcall pudutech::ThreadRunner::init(__int64 a1, __int64 a2, char a3, char a4, __int64 a5);
// void __fastcall std::condition_variable::~condition_variable(std::condition_variable *__hidden this); idb
__int64 __fastcall nlohmann::detail::type_error::type_error(nlohmann::detail::type_error *this, const nlohmann::detail::type_error *a2); // idb
void __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::~json_sax_dom_callback_parser(__int64 a1);
// int munmap(void *addr, size_t len);
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_string(__int64 a1);
// void __usercall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(unsigned __int8 *a3@<X2>, __int64 a1@<X0>, int a2@<W1>, __int64 a4@<X8>);
signed __int64 *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(signed __int64 *result, unsigned __int8 *a2);
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(__int64 a1, __int64 a2);
// int snprintf(char *s, size_t maxlen, const char *format, ...);
__int64 __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::find<std::string>(__int64 a1, unsigned __int8 *a2);
void __fastcall protocol::DomainSockServer::triggerPluginProcess(__int64 a1, unsigned __int8 *a2, unsigned __int64 **a3);
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(__int64 a1, void ***a2, char a3);
// void __usercall nlohmann::detail::invalid_iterator::create(unsigned __int8 *a2@<X1>, unsigned int a1@<W0>, __int64 a3@<X8>);
void __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse(__int64 a1, char a2, __int64 a3);
// int listen(int fd, int n);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<std::string&>(void **a1, __int128 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(__int64 a1, void ***a2);
__int64 *__fastcall std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(__int64 a1, __int128 *a2);
// unsigned __int64 __usercall std::__copy_unaligned<std::vector<bool>,false>@<X0>(unsigned __int64 result@<X0>, __int64 a2@<X1>, __int64 a3@<X2>, __int64 a4@<X8>);
// __int64 __usercall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::parse<std::__wrap_iter<unsigned char *>,0>@<X0>(unsigned __int64 a1@<X0>, __int64 a2@<X1>, __int64 a3@<X2>, char a4@<W3>, __int64 a5@<X8>);
std::__shared_weak_count *__fastcall std::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(_QWORD *a1, _QWORD *a2);
__int64 __fastcall protocol::DomainSockClient::triggerPluginProcess(__int64 a1, unsigned __int8 *a2, unsigned __int64 **a3);
// int connect(int fd, const struct sockaddr *addr, socklen_t len);
void __fastcall std::deque<std::function<void ()(void)>>::push_back(_QWORD *a1, __int64 a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>(__int64 a1, _QWORD *a2);
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parser(__int64 a1, __int64 a2, _QWORD *a3, char a4);
__int64 __fastcall protocol::DomainSockClient::send(__int64 a1, unsigned __int8 *a2, __int64 a3);
void __fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::~map(__int64 a1);
bool __fastcall nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator==(unsigned __int8 **a1, unsigned __int8 **a2);
// void __usercall nlohmann::detail::parse_error::position_string(__int64 a1@<X0>, unsigned __int64 a2@<X1>, __int64 a3@<X8>);
void __noreturn std::__vector_base_common<true>::__throw_length_error();
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<nlohmann::detail::value_t>(void ****a1, unsigned __int8 *a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<bool &>(__int64 a1, unsigned __int8 *a2);
std::__shared_weak_count *__fastcall std::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(_QWORD *a1, _QWORD *a2);
// int pthread_create(pthread_t *newthread, const pthread_attr_t *attr, void *(*start_routine)(void *), void *arg);
// void __usercall nlohmann::detail::parse_error::create(__int64 *a2@<X1>, unsigned __int8 *a3@<X2>, unsigned int a1@<W0>, __int64 a4@<X8>);
// void __usercall nlohmann::detail::out_of_range::create(unsigned __int8 *a2@<X1>, unsigned int a1@<W0>, __int64 a3@<X8>);
__int64 __fastcall protocol::DomainSockClient::create(__int64 a1, __int64 a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_object(__int64 a1);
// void __fastcall LogCapture::~LogCapture(LogCapture *__hidden this); idb
// void *mmap(void *addr, size_t len, int prot, int flags, int fd, __off_t offset);
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front(const void **a1, _QWORD *a2);
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(_QWORD **a1, __int64 *a2, unsigned __int8 *a3, __int128 *a4);
// _QWORD *__fastcall std::to_string(_QWORD *__hidden __return_ptr, std::__ndk1 *__hidden this, unsigned __int64); idb
// char *strcpy(char *dest, const char *src);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> * const&>(__int64 a1, _QWORD *a2);
// _QWORD *__fastcall std::to_string(_QWORD *__hidden __return_ptr, std::__ndk1 *__hidden this, int); idb
unsigned __int8 *__fastcall nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator->(unsigned __int8 **a1);
void __fastcall std::deque<std::function<void ()(void)>>::__add_back_capacity(__int64 a1);
// void __fastcall std::runtime_error::~runtime_error(std::runtime_error *__hidden this); idb
// _QWORD __fastcall std::runtime_error::runtime_error(std::runtime_error *__hidden this, const char *); idb
// void *memset(void *s, int c, size_t n);
__int64 __fastcall std::function<void ()(void)>::~function(__int64 a1);
// _QWORD std::runtime_error::what(std::runtime_error *__hidden this); idb
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(__int64 a1, __int128 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(__int64 a1, __int64 a2, __int64 a3, const nlohmann::detail::invalid_iterator *a4);
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_codepoint(__int64 a1);
// _QWORD std::__shared_weak_count::__release_weak(std::__shared_weak_count *__hidden this); idb
__int64 __fastcall pudutech::ThreadRunner::wakeup(__int64 this);
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(_QWORD *a1, __int64 *a2, __int64 **a3, __int64 **a4, unsigned __int8 *a5);
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(__int64 a1);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(__int64 a1, unsigned __int8 *a2);
// void *__fastcall __cxa_begin_catch(void *);
// int ioctl(int fd, unsigned __int64 request, ...);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(__int64 a1);
// void __fastcall __noreturn __cxa_throw(void *, struct type_info *lptinfo, void (__fastcall *)(void *));
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(__int64 a1, unsigned __int8 *a2);
// int __fastcall __cxa_atexit(void (__fastcall *lpfunc)(void *), void *obj, void *lpdso_handle);
// int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(__int64 a1, char *a2, char a3);
void __fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::~map(__int64 a1);
// __int64 __fastcall g3::logTag(_QWORD); weak
__int64 __fastcall protocol::DomainSockServer::create(__int64 a1, __int64 a2);
// void _Unwind_Resume(struct _Unwind_Exception *);
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n);
void __fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(void ***a1, char a2);
// int memcmp(const void *s1, const void *s2, size_t n);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<decltype(nullptr)>(__int64 a1);
__int64 __fastcall protocol::DomainSockServer::send(__int64 a1, unsigned __int8 *a2, __int64 a3);
// __int64 __fastcall __errno(_QWORD, _QWORD); weak
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n);
// void __fastcall std::exception::~exception(std::exception *__hidden this); idb
// _QWORD std::condition_variable::notify_one(std::condition_variable *__hidden this); idb
// _QWORD std::chrono::steady_clock::now(std::chrono::steady_clock *__hidden this); idb
// void __usercall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(__int64 *a2@<X8>, __int64 a1@<X0>);
// void __fastcall std::thread::~thread(std::thread *__hidden this); idb
void __fastcall std::vector<bool>::reserve(__int64 *a1, unsigned __int64 a2);
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n);
// _QWORD __fastcall operator new(unsigned __int64); idb
// __int64 strtoll(const char *nptr, char **endptr, int base);
__int64 __fastcall pudutech::Ashdmem::closeSharedMemory(pudutech::Ashdmem *this); // idb
// struct lconv *localeconv(void);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_object(_QWORD *a1, std::__ndk1 *a2);
// int __fastcall __cxa_finalize(void *);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(__int64 a1, void ***a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(__int64 a1, __int64 a2, char a3);
// ssize_t recv(int fd, void *buf, size_t n, int flags);
void __fastcall std::string::push_back(__int64 *a1, char a2);
// void __fastcall std::__thread_struct::~__thread_struct(std::__thread_struct *__hidden this); idb
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(__int64 a1, void ***a2);
void __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::reset(__int64 a1);
_QWORD **__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(_QWORD *a1);
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(_BYTE **a1, _QWORD *a2);
size_t *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(__int128 *a1);
// _QWORD *std::ios_base::getloc(_QWORD *__hidden __return_ptr, std::ios_base *__hidden this); idb
// int socket(int domain, int type, int protocol);
// int accept(int fd, struct sockaddr *addr, socklen_t *addr_len);
void __fastcall pudutech::ThreadRunner::exit(pudutech::ThreadRunner *this, char a2);
void __fastcall pudutech::ThreadTaskQueue::~ThreadTaskQueue(void **this);
__int64 __fastcall nlohmann::detail::other_error::other_error(nlohmann::detail::other_error *this, const nlohmann::detail::other_error *a2); // idb
// void __fastcall std::mutex::~mutex(std::mutex *__hidden this); idb
// void __usercall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X8>);
// _QWORD std::__thread_local_data(std::__ndk1 *__hidden this); idb
void __fastcall pudutech::ThreadRunner::~ThreadRunner(pudutech::ThreadRunner *this); // idb
void __fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::destroy(__int64 a1, char *a2);
__int64 __fastcall std::shared_ptr<std::thread>::~shared_ptr(__int64 result);
void __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(__int64 a1, char *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(__int64 a1, unsigned __int8 *a2, char a3);
// __int64 __fastcall std::condition_variable::wait(_QWORD, _QWORD); weak
// void __noreturn std::terminate(void); idb
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(__int64 a1, __int128 *a2, char a3);
// _QWORD *__usercall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(__int128 **a2@<X2>, __int64 a1@<X0>, __int64 a3@<X8>);
// void __fastcall std::locale::~locale(std::locale *__hidden this); idb
_QWORD *__fastcall std::ostream::flush(_QWORD *a1);
// __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD); weak
// _QWORD std::uncaught_exception(void); idb
__int64 __fastcall nlohmann::detail::parse_error::parse_error(__int64 this, __int64 a2);
// _QWORD std::mutex::lock(std::mutex *__hidden this); idb
// _QWORD __fastcall std::__throw_system_error(std::__ndk1 *__hidden this, int, const char *); idb
void __noreturn std::__basic_string_common<true>::__throw_length_error();
// _QWORD std::__shared_weak_count::lock(std::__shared_weak_count *__hidden this); idb
// void __usercall pudutech::ThreadRunner::create(unsigned __int8 *a3@<X2>, __int64 *a6@<X8>, __int64 a1@<X0>, char a2@<W1>, char a4@<W3>, __int64 a5@<X4>);
// int open(const char *file, int oflag, ...);
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(_BYTE **a1, _QWORD *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(__int64 a1, void ***a2, char a3);
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(__int64 a1, _QWORD *a2);
// int __fastcall __cxa_guard_acquire(__guard *);
_QWORD *__fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::operator[](__int64 a1, __int128 *a2);
// unsigned __int64 strtoull(const char *nptr, char **endptr, int base);
void __fastcall std::string::~string(__int64 a1);
__int64 start();
__int64 sub_11474();
__int64 sub_11718();
__int64 sub_119FC();
__int64 sub_11CE0();
__int64 sub_11F84();
__int64 (*__fastcall sub_11F98(__int64 (*result)(void)))(void);
__int64 __fastcall sub_11FA4(void *a1);
void __fastcall std::string::~string(__int64 a1);
void __fastcall LEVELS::~LEVELS(void **this);
// void __usercall pudutech::ThreadRunner::create(__int64 a1@<X0>, char a2@<W1>, unsigned __int8 *a3@<X2>, char a4@<W3>, __int64 a5@<X4>, __int64 *a6@<X8>);
std::__shared_weak_count *__fastcall std::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(_QWORD *a1, _QWORD *a2);
void __fastcall pudutech::ThreadRunner::init(__int64 a1, __int64 a2, char a3, char a4, __int64 a5);
void __fastcall pudutech::ThreadRunner::threadRun(pudutech::ThreadRunner *this);
void __fastcall sub_12F74(std::thread **a1);
void __fastcall pudutech::ThreadRunner::start(pudutech::ThreadRunner *this);
void __fastcall pudutech::ThreadRunner::exit(pudutech::ThreadRunner *this, char a2);
__int64 __fastcall pudutech::ThreadRunner::wakeup(__int64 this);
void __fastcall pudutech::ThreadRunner::~ThreadRunner(pudutech::ThreadRunner *this); // idb
__int64 __fastcall std::function<bool ()(void)>::~function(__int64 a1);
__int64 __fastcall std::function<void ()(void)>::~function(__int64 a1);
std::__shared_weak_count *__fastcall sub_1352C(__int64 a1);
void __fastcall __noreturn sub_1353C(void *a1);
__int64 __fastcall pudutech::ThreadRunner::isExit(pudutech::ThreadRunner *this); // idb
__int64 __fastcall pudutech::ThreadRunner::getMutex(pudutech::ThreadRunner *this); // idb
void __noreturn std::__basic_string_common<true>::__throw_length_error();
void __fastcall __noreturn sub_13574(const char *a1);
__int64 __fastcall sub_135C4(std::logic_error *a1, const char *a2);
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n);
void __noreturn sub_13744();
void __fastcall std::bad_function_call::~bad_function_call(std::bad_function_call *this); // idb
void __fastcall std::__shared_ptr_pointer<pudutech::ThreadRunner  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1);
void __fastcall std::__shared_ptr_pointer<pudutech::ThreadRunner  *>::__on_zero_shared(__int64 a1);
__int64 __fastcall std::__shared_ptr_pointer<pudutech::ThreadRunner  *>::__get_deleter(__int64 a1, __int64 a2);
_QWORD *__fastcall sub_13818(_QWORD *result, __int64 a2);
_QWORD *__fastcall sub_13980(_QWORD *result, __int64 a2);
void __noreturn sub_13AE8();
std::__ndk1 *__fastcall sub_13B1C(pthread_t *a1, __int128 *a2);
__int64 __fastcall std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (pudutech::ThreadRunner::*)(void),std::shared_ptr<pudutech::ThreadRunner>>>>(std::__ndk1 *a1);
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3);
__int64 __fastcall sub_13EF0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int c);
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result);
_QWORD *__fastcall std::ostream::flush(_QWORD *a1);
// char *__usercall pudutech::ThreadTaskQueue::create@<X0>(__int64 *a1@<X0>, pudutech::ThreadTaskQueue **a2@<X8>);
std::__shared_weak_count *__fastcall std::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(_QWORD *a1, _QWORD *a2);
char *__fastcall pudutech::ThreadTaskQueue::init(pudutech::ThreadTaskQueue *this);
_BYTE *__fastcall pudutech::ThreadTaskQueue::loop(pudutech::ThreadTaskQueue *this);
bool __fastcall pudutech::ThreadTaskQueue::wakeupCondition(pudutech::ThreadTaskQueue *this);
void __fastcall pudutech::ThreadTaskQueue::~ThreadTaskQueue(void **this);
void __fastcall pudutech::ThreadTaskQueue::exit(pudutech::ThreadTaskQueue *this);
__int64 __fastcall pudutech::ThreadTaskQueue::postTask(__int64 a1, __int64 a2);
pudutech::ThreadRunner *__fastcall pudutech::ThreadTaskQueue::size(pudutech::ThreadRunner **this);
void __fastcall std::__deque_base<std::function<void ()(void)>>::clear(_QWORD *a1);
void __fastcall std::__shared_ptr_pointer<pudutech::ThreadTaskQueue  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1);
void __fastcall std::__shared_ptr_pointer<pudutech::ThreadTaskQueue  *>::__on_zero_shared(__int64 a1);
__int64 __fastcall std::__shared_ptr_pointer<pudutech::ThreadTaskQueue  *>::__get_deleter(__int64 a1, __int64 a2);
_QWORD *__fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::~__func(_QWORD *result);
void __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::~__func(_QWORD *a1);
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::__clone(__int64 a1);
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::__clone(__int64 result, __int64 a2);
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::destroy(__int64 result);
void __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::destroy_deallocate(_QWORD *a1);
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::operator()(_QWORD *a1);
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::target(__int64 a1, __int64 a2);
void **std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::target_type();
_QWORD *__fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::~__func(_QWORD *result);
void __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::~__func(_QWORD *a1);
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::__clone(__int64 a1);
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::__clone(__int64 result, __int64 a2);
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::destroy(__int64 result);
void __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::destroy_deallocate(_QWORD *a1);
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::operator()(_QWORD *a1);
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::target(__int64 a1, __int64 a2);
void **std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::target_type();
void __fastcall std::deque<std::function<void ()(void)>>::push_back(_QWORD *a1, __int64 a2);
void __fastcall std::deque<std::function<void ()(void)>>::__add_back_capacity(__int64 a1);
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(_BYTE **a1, _QWORD *a2);
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front(const void **a1, _QWORD *a2);
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(_BYTE **a1, _QWORD *a2);
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front(const void **a1, _QWORD *a2);
void *__fastcall protocol::DomainSockServer::instance(protocol::DomainSockServer *this);
long double __fastcall protocol::DomainSockServer::DomainSockServer(protocol::DomainSockServer *this);
void __fastcall protocol::DomainSockServer::~DomainSockServer(protocol::DomainSockServer *this); // idb
void __fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::~map(__int64 a1);
void __fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::~map(__int64 a1);
__int64 __fastcall std::shared_ptr<std::thread>::~shared_ptr(__int64 result);
__int64 __fastcall protocol::DomainSockServer::init(__int64 a1, __int64 *a2);
__int64 __fastcall protocol::DomainSockServer::create(__int64 a1, __int64 a2);
void __fastcall protocol::DomainSockServer::run(protocol::DomainSockServer *this);
__int64 __fastcall protocol::DomainSockServer::isInited(protocol::DomainSockServer *this); // idb
__int64 __fastcall protocol::DomainSockServer::isConnected(protocol::DomainSockServer *this); // idb
__int64 __fastcall protocol::DomainSockServer::addPlugin(__int64 a1, __int128 *a2, _QWORD *a3);
_QWORD *__fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::operator[](__int64 a1, __int128 *a2);
__int64 __fastcall protocol::DomainSockServer::addPlugin(__int64 a1, __int128 *a2, _QWORD *a3);
_QWORD *__fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::operator[](__int64 a1, __int128 *a2);
__int64 __fastcall protocol::DomainSockServer::send(__int64 a1, unsigned __int8 *a2, unsigned __int8 *a3);
__int64 __fastcall protocol::DomainSockServer::send(__int64 a1, unsigned __int8 *a2, __int64 a3);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
char *__fastcall std::vector<unsigned char>::insert<char *>(__int64 a1, char *src, char *a3, char *a4);
__int64 __fastcall protocol::DomainSockServer::processLoop(__int64 a1, __int64 a2);
void __fastcall protocol::DomainSockServer::triggerPluginProcess(__int64 a1, unsigned __int8 *a2, unsigned __int64 **a3);
// __int64 __usercall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::parse<std::__wrap_iter<unsigned char *>,0>@<X0>(unsigned __int64 a1@<X0>, __int64 a2@<X1>, __int64 a3@<X2>, char a4@<W3>, __int64 a5@<X8>);
void __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(__int64 a1, char *a2);
void __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(__int64 a1, char *a2);
void __fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(void ***a1, char a2);
void __fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::destroy(__int64 a1, char *a2);
void __fastcall std::__shared_ptr_emplace<std::thread>::~__shared_ptr_emplace(__int64 a1);
void __fastcall std::__shared_ptr_emplace<std::thread>::~__shared_ptr_emplace(__int64 a1);
void __fastcall std::__shared_ptr_emplace<std::thread>::__on_zero_shared(__int64 a1);
std::__ndk1 *__fastcall sub_1B6F8(pthread_t *a1, __int128 *a2);
__int64 __fastcall std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (protocol::DomainSockServer::*)(void),protocol::DomainSockServer*>>>(std::__ndk1 *a1);
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
__int64 *__fastcall std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2);
_QWORD *__fastcall sub_1BB50(_QWORD *result, __int64 a2);
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
_QWORD *__fastcall sub_1BDE4(_QWORD *result, __int64 a2);
void __noreturn std::__vector_base_common<true>::__throw_length_error();
void __noreturn std::__basic_string_common<true>::__throw_out_of_range();
void __fastcall __noreturn sub_1BF74(const char *a1);
__int64 __fastcall sub_1BFC4(std::logic_error *a1, const char *a2);
__int64 __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::find<std::string>(__int64 a1, unsigned __int8 *a2);
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parser(__int64 a1, __int64 a2, _QWORD *a3, char a4);
void __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse(__int64 a1, char a2, __int64 a3);
unsigned __int64 *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>(const char *a1);
// void __usercall nlohmann::detail::exception::name(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, __int64 a3@<X8>);
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n);
// __int64 *__usercall std::operator+<char>@<X0>(const char *a1@<X0>, unsigned __int8 *a2@<X1>, __int64 *a3@<X8>);
void __fastcall nlohmann::detail::other_error::~other_error(nlohmann::detail::other_error *this); // idb
__int64 __fastcall nlohmann::detail::exception::what(nlohmann::detail::exception *this); // idb
void __fastcall nlohmann::detail::exception::~exception(nlohmann::detail::exception *this); // idb
void __fastcall std::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter>::~__shared_ptr_emplace(std::__shared_weak_count *a1);
__int64 __fastcall std::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter>::__on_zero_shared(__int64 a1);
__int64 __fastcall nlohmann::detail::input_buffer_adapter::get_character(nlohmann::detail::input_buffer_adapter *this); // idb
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(__int64 a1);
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(__int64 a1);
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_string(__int64 a1);
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_number(__int64 a1);
void __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::reset(__int64 a1);
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_codepoint(__int64 a1);
void __fastcall std::string::push_back(__int64 *a1, char a2);
void __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::json_sax_dom_callback_parser(__int64 a1, __int64 a2, __int64 a3, char a4);
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(__int64 a1, _QWORD *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(__int64 a1, __int64 a2, __int64 a3, const nlohmann::detail::invalid_iterator *a4);
// void __usercall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(__int64 a1@<X0>, __int64 *a2@<X8>);
// void __usercall nlohmann::detail::parse_error::create(unsigned int a1@<W0>, __int64 *a2@<X1>, unsigned __int8 *a3@<X2>, __int64 a4@<X8>);
// void __usercall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(__int64 a1@<X0>, int a2@<W1>, unsigned __int8 *a3@<X2>, __int64 a4@<X8>);
void __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::~json_sax_dom_callback_parser(__int64 a1);
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(__int64 a1, __int64 a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(__int64 a1, __int64 a2, __int64 a3, const nlohmann::detail::invalid_iterator *a4);
void __fastcall std::vector<bool>::reserve(__int64 *a1, unsigned __int64 a2);
_QWORD *__fastcall std::vector<bool>::__construct_at_end<std::__bit_iterator<std::vector<bool>,false,0ul>>(_QWORD *result, __int64 a2, __int64 a3);
// unsigned __int64 __usercall std::__copy_unaligned<std::vector<bool>,false>@<X0>(unsigned __int64 result@<X0>, __int64 a2@<X1>, __int64 a3@<X2>, __int64 a4@<X8>);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_object(_QWORD *a1, std::__ndk1 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_object(__int64 a1);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(__int64 a1, __int128 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_array(_QWORD *a1, std::__ndk1 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_array(__int64 a1);
// void __usercall nlohmann::detail::out_of_range::create(unsigned int a1@<W0>, unsigned __int8 *a2@<X1>, __int64 a3@<X8>);
void __fastcall nlohmann::detail::exception::~exception(nlohmann::detail::exception *this); // idb
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(__int64 a1, char *a2, char a3);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(void **a1, __int64 a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> * const&>(__int64 a1, _QWORD *a2);
signed __int64 *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(signed __int64 *result, unsigned __int8 *a2);
unsigned __int8 *__fastcall nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator->(unsigned __int8 **a1);
// void __usercall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,0>(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X8>);
_QWORD **__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(_QWORD *a1);
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(_QWORD **a1, __int64 *a2, unsigned __int8 *a3, __int128 *a4);
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(_QWORD *a1, __int64 *a2, __int64 **a3, __int64 **a4, unsigned __int8 *a5);
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(__int64 a1, _QWORD *a2, unsigned __int8 *a3);
signed __int64 __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::vector(signed __int64 *a1, unsigned __int8 **a2);
size_t *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(__int128 *a1);
bool __fastcall nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator==(unsigned __int8 **a1, unsigned __int8 **a2);
// void __usercall nlohmann::detail::invalid_iterator::create(unsigned int a1@<W0>, unsigned __int8 *a2@<X1>, __int64 a3@<X8>);
void __fastcall nlohmann::detail::invalid_iterator::~invalid_iterator(nlohmann::detail::invalid_iterator *this); // idb
// void __usercall nlohmann::detail::type_error::create(unsigned int a1@<W0>, unsigned __int8 *a2@<X1>, __int64 a3@<X8>);
_QWORD *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::erase(_QWORD *a1, __int64 a2);
__int64 *__fastcall std::__tree_remove<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2);
void __fastcall nlohmann::detail::type_error::~type_error(nlohmann::detail::type_error *this); // idb
// _QWORD *__usercall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(__int64 a1@<X0>, __int128 **a2@<X2>, __int64 a3@<X8>);
void __fastcall nlohmann::detail::out_of_range::~out_of_range(nlohmann::detail::out_of_range *this); // idb
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(__int64 a1, void ***a2, char a3);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(__int64 a1, unsigned __int8 *a2, char a3);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(__int64 a1, __int64 a2, char a3);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(__int64 a1, void ***a2, char a3);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(__int64 a1, __int128 *a2, char a3);
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(__int64 a1, void ***a2, char a3);
__int64 __fastcall nlohmann::detail::parse_error::parse_error(__int64 a1, __int64 a2);
__int64 __fastcall nlohmann::detail::out_of_range::out_of_range(nlohmann::detail::out_of_range *this, const nlohmann::detail::out_of_range *a2); // idb
__int64 __fastcall nlohmann::detail::invalid_iterator::invalid_iterator(nlohmann::detail::invalid_iterator *this, const nlohmann::detail::invalid_iterator *a2); // idb
__int64 __fastcall nlohmann::detail::type_error::type_error(nlohmann::detail::type_error *this, const nlohmann::detail::type_error *a2); // idb
__int64 __fastcall nlohmann::detail::other_error::other_error(nlohmann::detail::other_error *this, const nlohmann::detail::other_error *a2); // idb
void __fastcall nlohmann::detail::parse_error::~parse_error(nlohmann::detail::parse_error *this); // idb
// void __usercall nlohmann::detail::parse_error::position_string(__int64 a1@<X0>, unsigned __int64 a2@<X1>, __int64 a3@<X8>);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(__int64 a1, __int128 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(__int64 a1, unsigned __int8 *a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>(__int64 a1, _QWORD *a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<nlohmann::detail::value_t>(void ****a1, unsigned __int8 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(__int64 a1, void ***a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<double &>(__int64 a1, _QWORD *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(__int64 a1, unsigned __int8 *a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<bool &>(__int64 a1, unsigned __int8 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(__int64 a1);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<decltype(nullptr)>(__int64 a1);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(__int64 a1, void ***a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<long &>(__int64 a1, _QWORD *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(__int64 a1, __int128 *a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<std::string&>(void **a1, __int128 *a2);
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(__int64 a1, void ***a2);
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<unsigned long &>(__int64 a1, _QWORD *a2);
__int64 __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::find<std::string>(__int64 a1, unsigned __int8 *a2);
__int64 __fastcall pudutech::getSteadyClockMill(pudutech *this); // idb
long double __fastcall protocol::DomainSockClient::DomainSockClient(protocol::DomainSockClient *this);
void __fastcall protocol::DomainSockClient::~DomainSockClient(protocol::DomainSockClient *this); // idb
__int64 __fastcall protocol::DomainSockClient::connect(__int64 a1, __int64 *a2);
__int64 __fastcall protocol::DomainSockClient::create(__int64 a1, __int64 a2);
void __fastcall protocol::DomainSockClient::run(protocol::DomainSockClient *this);
__int64 __fastcall protocol::DomainSockClient::isInited(protocol::DomainSockClient *this); // idb
__int64 __fastcall protocol::DomainSockClient::isConnected(protocol::DomainSockClient *this); // idb
__int64 __fastcall protocol::DomainSockClient::addPlugin(__int64 a1, __int128 *a2, __int64 a3);
__int64 __fastcall protocol::DomainSockClient::addPlugin(__int64 a1, __int128 *a2, __int64 a3);
__int64 __fastcall protocol::DomainSockClient::removePlugin(_QWORD *a1, unsigned __int8 *a2);
__int64 __fastcall protocol::DomainSockClient::send(__int64 a1, unsigned __int8 *a2, unsigned __int8 *a3);
__int64 __fastcall protocol::DomainSockClient::send(__int64 a1, unsigned __int8 *a2, __int64 a3);
__int64 __fastcall protocol::DomainSockClient::processLoop(__int64 a1, __int64 a2);
__int64 __fastcall protocol::DomainSockClient::triggerPluginProcess(__int64 a1, unsigned __int8 *a2, unsigned __int64 **a3);
_QWORD *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::erase(_QWORD *a1, __int64 a2);
_QWORD *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::erase(_QWORD *a1, __int64 a2);
std::__ndk1 *__fastcall sub_29FB8(pthread_t *a1, __int128 *a2);
__int64 __fastcall std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (protocol::DomainSockClient::*)(void),protocol::DomainSockClient*>>>(std::__ndk1 *a1);
__int64 __fastcall pudutech::Ashdmem::Ashdmem(__int64 this, char a2);
void __fastcall pudutech::Ashdmem::~Ashdmem(pudutech::Ashdmem *this); // idb
__int64 __fastcall pudutech::Ashdmem::releaseSharedMemory(pudutech::Ashdmem *this); // idb
__int64 __fastcall pudutech::Ashdmem::closeSharedMemory(pudutech::Ashdmem *this); // idb
// _QWORD *__usercall pudutech::Ashdmem::create@<X0>(_QWORD *a1@<X8>);
__int64 __fastcall pudutech::Ashdmem::createMemory(__int64 a1, __int64 a2, unsigned int a3);
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1);
__int64 __fastcall pudutech::Ashdmem::destroyMemory(pudutech::Ashdmem *this); // idb
// __int64 __usercall pudutech::Ashdmem::useMemory@<X0>(pudutech::Ashdmem *this@<X0>, unsigned __int64 *a2@<X8>);
__int64 __fastcall pudutech::Ashdmem::linkSharedMemory(pudutech::Ashdmem *this, int fd); // idb
__int64 __fastcall pudutech::Ashdmem::getMemory(pudutech::Ashdmem *this); // idb
void __fastcall std::__shared_ptr_pointer<pudutech::Ashdmem  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1);
void __fastcall std::__shared_ptr_pointer<pudutech::Ashdmem  *>::__on_zero_shared(__int64 a1);
__int64 __fastcall std::__shared_ptr_pointer<pudutech::Ashdmem  *>::__get_deleter(__int64 a1, __int64 a2);
// void __fastcall std::out_of_range::~out_of_range(std::out_of_range *__hidden this); idb
// void __fastcall std::length_error::~length_error(std::length_error *__hidden this); idb
// void __fastcall std::exception::~exception(std::exception *__hidden this); idb
// void __fastcall std::bad_weak_ptr::~bad_weak_ptr(std::bad_weak_ptr *__hidden this); idb

//-------------------------------------------------------------------------
// Data declarations

int dword_0 = 1179403647; // weak
__int128 xmmword_2C6A0 = 0xFFFFFFFFFFFFFFFF0000000000000001LL; // weak
__int128 xmmword_2CD70 = 0x80000000000000000000000000000000LL; // weak
__int128 xmmword_2CD80 = 0x230000000000000031LL; // weak
__int128 xmmword_2CD90 = 0x300000000000000041LL; // weak
_QWORD qword_2E048[3] = { 0LL, 256204778801521550LL, 1152921504606846975LL }; // weak
void *`typeinfo for'std::bad_function_call = &std::exception::~exception; // weak
void (__fastcall *off_43D98[2])(std::exception *__hidden this) = { &std::exception::~exception, &std::bad_function_call::~bad_function_call }; // weak
void (__fastcall *off_43DC0)(std::__shared_weak_count *__hidden this) = &std::__shared_weak_count::~__shared_weak_count; // weak
void (__fastcall *off_43E10)(std::__shared_weak_count *__hidden this) = &std::__shared_weak_count::~__shared_weak_count; // weak
__int64 (__fastcall *off_43E60)() = &std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::~__func; // weak
void *`typeinfo for'std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>> = &std::exception::~exception; // weak
__int64 (__fastcall *off_43F20)() = &std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::~__func; // weak
void *`typeinfo for'std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>> = &std::exception::~exception; // weak
__int64 (__fastcall *off_43FE0[3])() =
{
  &std::__shared_ptr_emplace<std::thread>::~__shared_ptr_emplace,
  &std::__shared_ptr_emplace<std::thread>::~__shared_ptr_emplace,
  &std::__shared_ptr_emplace<std::thread>::__on_zero_shared
}; // weak
void *`typeinfo for'nlohmann::detail::other_error = &std::exception::~exception; // weak
void (__fastcall *off_44060[2])(nlohmann::detail::exception *__hidden this) =
{
  &nlohmann::detail::exception::~exception,
  &nlohmann::detail::other_error::~other_error
}; // weak
void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this) =
{
  &nlohmann::detail::exception::~exception,
  &nlohmann::detail::exception::~exception
}; // weak
__int64 (__fastcall *off_440B0[3])() =
{
  &std::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter>::~__shared_ptr_emplace,
  &std::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter>::~__shared_ptr_emplace,
  &std::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter>::__on_zero_shared
}; // weak
__int64 (__fastcall *off_44100)(nlohmann::detail::input_buffer_adapter *__hidden this) = &nlohmann::detail::input_buffer_adapter::get_character; // weak
void *`typeinfo for'nlohmann::detail::out_of_range = &std::exception::~exception; // weak
void *`typeinfo for'nlohmann::detail::invalid_iterator = &std::exception::~exception; // weak
void (__fastcall *off_44180[2])(nlohmann::detail::exception *__hidden this) =
{
  &nlohmann::detail::exception::~exception,
  &nlohmann::detail::invalid_iterator::~invalid_iterator
}; // weak
void *`typeinfo for'nlohmann::detail::type_error = &std::exception::~exception; // weak
void (__fastcall *off_441C0[2])(nlohmann::detail::exception *__hidden this) =
{
  &nlohmann::detail::exception::~exception,
  &nlohmann::detail::type_error::~type_error
}; // weak
void (__fastcall *off_441E8[2])(nlohmann::detail::exception *__hidden this) =
{
  &nlohmann::detail::exception::~exception,
  &nlohmann::detail::out_of_range::~out_of_range
}; // weak
void (__fastcall *`typeinfo for'nlohmann::detail::parse_error)(std::exception *__hidden this) = &std::exception::~exception; // weak
void (__fastcall *off_44228[2])(nlohmann::detail::exception *__hidden this) =
{
  &nlohmann::detail::exception::~exception,
  &nlohmann::detail::parse_error::~parse_error
}; // weak
char *off_44240[36] =
{
  "<uninitialized>",
  "true literal",
  "false literal",
  "null literal",
  "string literal",
  "number literal",
  "number literal",
  "number literal",
  "'['",
  "'{'",
  "']'",
  "'}'",
  "':'",
  "','",
  "unknown token",
  "end of input",
  "'[', '{', or a literal",
  "true literal",
  "false literal",
  "null literal",
  "string literal",
  "number literal",
  "number literal",
  "number literal",
  "'['",
  "'{'",
  "']'",
  "'}'",
  "':'",
  "','",
  "<parse error>",
  "end of input",
  "'[', '{', or a literal",
  "null",
  "object",
  "array"
}; // weak
char *off_442C8[19] =
{
  "true literal",
  "false literal",
  "null literal",
  "string literal",
  "number literal",
  "number literal",
  "number literal",
  "'['",
  "'{'",
  "']'",
  "'}'",
  "':'",
  "','",
  "<parse error>",
  "end of input",
  "'[', '{', or a literal",
  "null",
  "object",
  "array"
}; // weak
char *off_44348[3] = { "null", "object", "array" }; // weak
void (__fastcall *off_444F0)(std::__shared_weak_count *__hidden this) = &std::__shared_weak_count::~__shared_weak_count; // weak
void *off_45000 = &off_45000; // weak
char *pudutech::ASHMEM_DEVICE = "/dev/ashmem"; // weak
char *pudutech::ASHTAG = "Ashdmem"; // weak
int dword_45030; // weak
__int16 word_45038; // weak
_UNKNOWN unk_4503A; // weak
_UNKNOWN unk_45042; // weak
__int64 qword_45048; // weak
int dword_45050; // weak
__int16 word_45058; // weak
_UNKNOWN unk_4505A; // weak
_UNKNOWN unk_45062; // weak
__int64 qword_45068; // weak
int dword_45070; // weak
__int16 word_45078; // weak
_UNKNOWN unk_4507A; // weak
_UNKNOWN unk_45082; // weak
__int64 qword_45088; // weak
int dword_45090; // weak
__int16 word_45098; // weak
_UNKNOWN unk_4509A; // weak
_UNKNOWN unk_450A2; // weak
__int64 qword_450A8; // weak
int dword_450B0; // weak
__int16 word_450B8; // weak
_UNKNOWN unk_450BA; // weak
_UNKNOWN unk_450C2; // weak
__int64 qword_450C8; // weak
int dword_450D0; // weak
__int16 word_450D8; // weak
_UNKNOWN unk_450DA; // weak
_UNKNOWN unk_450E2; // weak
__int64 qword_450E8; // weak
int dword_450F0; // weak
char byte_450F8; // weak
_UNKNOWN unk_450F9; // weak
_UNKNOWN unk_45101; // weak
__int64 qword_45108; // weak
int dword_45110; // weak
char byte_45118; // weak
_UNKNOWN unk_45119; // weak
_UNKNOWN unk_45121; // weak
_UNKNOWN unk_45125; // weak
_UNKNOWN unk_4512D; // weak
char byte_4512F; // weak
int dword_45130; // weak
char byte_45138; // weak
_BYTE algn_45139[7]; // weak
_UNKNOWN unk_45149; // weak
_UNKNOWN unk_4514D; // weak
char byte_4514F; // weak
__int64 qword_45150; // weak
_UNKNOWN unk_45158; // weak
__int64 qword_45160; // weak
__int64 qword_45168; // weak
_UNKNOWN unk_45170; // weak
__int64 qword_45178; // weak
int dword_45180; // weak
__int16 word_45188; // weak
_UNKNOWN unk_4518A; // weak
_UNKNOWN unk_45192; // weak
__int64 qword_45198; // weak
int dword_451A0; // weak
__int16 word_451A8; // weak
_UNKNOWN unk_451AA; // weak
_UNKNOWN unk_451B2; // weak
__int64 qword_451B8; // weak
int dword_451C0; // weak
__int16 word_451C8; // weak
_UNKNOWN unk_451CA; // weak
_UNKNOWN unk_451D2; // weak
__int64 qword_451D8; // weak
int dword_451E0; // weak
__int16 word_451E8; // weak
_UNKNOWN unk_451EA; // weak
_UNKNOWN unk_451F2; // weak
__int64 qword_451F8; // weak
int dword_45200; // weak
__int16 word_45208; // weak
_UNKNOWN unk_4520A; // weak
_UNKNOWN unk_45212; // weak
__int64 qword_45218; // weak
int dword_45220; // weak
__int16 word_45228; // weak
_UNKNOWN unk_4522A; // weak
_UNKNOWN unk_45232; // weak
__int64 qword_45238; // weak
int dword_45240; // weak
char byte_45248; // weak
_UNKNOWN unk_45249; // weak
_UNKNOWN unk_45251; // weak
__int64 qword_45258; // weak
int dword_45260; // weak
char byte_45268; // weak
_UNKNOWN unk_45269; // weak
_UNKNOWN unk_45271; // weak
_UNKNOWN unk_45275; // weak
_UNKNOWN unk_4527D; // weak
char byte_4527F; // weak
int dword_45280; // weak
char byte_45288; // weak
_BYTE algn_45289[7]; // weak
_UNKNOWN unk_45299; // weak
_UNKNOWN unk_4529D; // weak
char byte_4529F; // weak
__int64 qword_452A0; // weak
_UNKNOWN unk_452A8; // weak
__int64 qword_452B0; // weak
__int64 qword_452B8; // weak
_UNKNOWN unk_452C0; // weak
__int64 qword_452C8; // weak
int dword_452D0; // weak
__int16 word_452D8; // weak
_UNKNOWN unk_452DA; // weak
_UNKNOWN unk_452E2; // weak
__int64 qword_452E8; // weak
int dword_452F0; // weak
__int16 word_452F8; // weak
_UNKNOWN unk_452FA; // weak
_UNKNOWN unk_45302; // weak
__int64 qword_45308; // weak
int dword_45310; // weak
__int16 word_45318; // weak
_UNKNOWN unk_4531A; // weak
_UNKNOWN unk_45322; // weak
__int64 qword_45328; // weak
int dword_45330; // weak
__int16 word_45338; // weak
_UNKNOWN unk_4533A; // weak
_UNKNOWN unk_45342; // weak
__int64 qword_45348; // weak
int dword_45350; // weak
__int16 word_45358; // weak
_UNKNOWN unk_4535A; // weak
_UNKNOWN unk_45362; // weak
__int64 qword_45368; // weak
int dword_45370; // weak
__int16 word_45378; // weak
_UNKNOWN unk_4537A; // weak
_UNKNOWN unk_45382; // weak
__int64 qword_45388; // weak
int dword_45390; // weak
char byte_45398; // weak
_UNKNOWN unk_45399; // weak
_UNKNOWN unk_453A1; // weak
__int64 qword_453A8; // weak
int dword_453B0; // weak
char byte_453B8; // weak
_UNKNOWN unk_453B9; // weak
_UNKNOWN unk_453C1; // weak
_UNKNOWN unk_453C5; // weak
_UNKNOWN unk_453CD; // weak
char byte_453CF; // weak
int dword_453D0; // weak
char byte_453D8; // weak
_BYTE algn_453D9[7]; // weak
_UNKNOWN unk_453E9; // weak
_UNKNOWN unk_453ED; // weak
char byte_453EF; // weak
__int64 qword_453F0; // weak
_UNKNOWN unk_453F8; // weak
__int64 qword_45400; // weak
__int64 qword_45408; // weak
_UNKNOWN unk_45410; // weak
__int64 qword_45418; // weak
__int64 qword_45420; // weak
__int64 qword_45428; // weak
__int64 qword_45430; // weak
_UNKNOWN unk_45438; // weak
__int16 word_45440; // weak
char byte_45442; // weak
_UNKNOWN unk_45520; // weak
_UNKNOWN unk_45530; // weak
__int128 xmmword_45540; // weak
__int64 qword_45550; // weak
_UNKNOWN unk_45558; // weak
__int64 qword_45560; // weak
_UNKNOWN unk_45568; // weak
__int64 qword_45570; // weak
__int64 qword_45578; // weak
_UNKNOWN unk_45580; // weak
char byte_45588; // weak
__int64 qword_4558C; // weak
__int64 qword_45594; // weak
__int64 qword_4559C; // weak
int dword_455A4; // weak
__guard qword_455A8; // weak
int dword_455B0; // weak
__int16 word_455B8; // weak
_UNKNOWN unk_455BA; // weak
_UNKNOWN unk_455C2; // weak
__int64 qword_455C8; // weak
int dword_455D0; // weak
__int16 word_455D8; // weak
_UNKNOWN unk_455DA; // weak
_UNKNOWN unk_455E2; // weak
__int64 qword_455E8; // weak
int dword_455F0; // weak
__int16 word_455F8; // weak
_UNKNOWN unk_455FA; // weak
_UNKNOWN unk_45602; // weak
__int64 qword_45608; // weak
int dword_45610; // weak
__int16 word_45618; // weak
_UNKNOWN unk_4561A; // weak
_UNKNOWN unk_45622; // weak
__int64 qword_45628; // weak
int dword_45630; // weak
__int16 word_45638; // weak
_UNKNOWN unk_4563A; // weak
_UNKNOWN unk_45642; // weak
__int64 qword_45648; // weak
int dword_45650; // weak
__int16 word_45658; // weak
_UNKNOWN unk_4565A; // weak
_UNKNOWN unk_45662; // weak
__int64 qword_45668; // weak
int dword_45670; // weak
char byte_45678; // weak
_UNKNOWN unk_45679; // weak
_UNKNOWN unk_45681; // weak
__int64 qword_45688; // weak
int dword_45690; // weak
char byte_45698; // weak
_UNKNOWN unk_45699; // weak
_UNKNOWN unk_456A1; // weak
_UNKNOWN unk_456A5; // weak
_UNKNOWN unk_456AD; // weak
char byte_456AF; // weak
int dword_456B0; // weak
char byte_456B8; // weak
_BYTE algn_456B9[7]; // weak
_UNKNOWN unk_456C9; // weak
_UNKNOWN unk_456CD; // weak
char byte_456CF; // weak
__int64 qword_456D0; // weak
_UNKNOWN unk_456D8; // weak
__int64 qword_456E0; // weak
__int64 qword_456E8; // weak
_UNKNOWN unk_456F0; // weak
__int64 qword_456F8; // weak
__int64 qword_45700; // weak
__int64 qword_45708; // weak
__int64 qword_45710; // weak
int dword_45718; // weak
__int16 word_45720; // weak
_BYTE algn_45722[14]; // weak
__int64 qword_45730; // weak
int dword_45738; // weak
__int16 word_45740; // weak
_BYTE algn_45742[14]; // weak
__int64 qword_45750; // weak
int dword_45758; // weak
__int16 word_45760; // weak
_BYTE algn_45762[14]; // weak
__int64 qword_45770; // weak
int dword_45778; // weak
__int16 word_45780; // weak
_BYTE algn_45782[14]; // weak
__int64 qword_45790; // weak
int dword_45798; // weak
__int16 word_457A0; // weak
_BYTE algn_457A2[14]; // weak
__int64 qword_457B0; // weak
int dword_457B8; // weak
__int16 word_457C0; // weak
_BYTE algn_457C2[14]; // weak
__int64 qword_457D0; // weak
int dword_457D8; // weak
char byte_457E0; // weak
_BYTE algn_457E1[15]; // weak
__int64 qword_457F0; // weak
int dword_457F8; // weak
char byte_45800; // weak
_UNKNOWN unk_45801; // weak
_UNKNOWN unk_45809; // weak
_UNKNOWN unk_4580D; // weak
_UNKNOWN unk_45815; // weak
char byte_45817; // weak
int dword_45818; // weak
char byte_45820; // weak
_BYTE algn_45821[7]; // weak
_UNKNOWN unk_45831; // weak
_UNKNOWN unk_45835; // weak
char byte_45837; // weak
__int64 qword_45838; // weak
_UNKNOWN unk_45840; // weak
__int64 qword_45848; // weak
__int64 qword_45850; // weak
_UNKNOWN unk_45858; // weak
__int64 qword_45860; // weak
// extern _UNKNOWN std::ctype<char>::id; weak
// extern _UNKNOWN `typeinfo for'std::out_of_range; weak
// extern _UNKNOWN `typeinfo for'std::bad_weak_ptr; weak
// extern _UNKNOWN std::num_put<char,std::ostreambuf_iterator<char>>::id; weak
// extern _UNKNOWN `vtable for'std::bad_weak_ptr; weak
// extern _UNKNOWN `typeinfo for'std::length_error; weak
// extern _UNKNOWN `vtable for'std::length_error; weak
// extern _UNKNOWN `vtable for'std::out_of_range; weak


//----- (0000000000010410) ----------------------------------------------------
void sub_10410()
{
  JUMPOUT(0LL);
}
// 10420: control flows out of bounds to 0

//----- (0000000000010430) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::detail::type_error::create(unsigned __int8 *a2@<X1>, unsigned int a1@<W0>, __int64 a3@<X8>)
{
  _ZN8nlohmann6detail10type_error6createEiRKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(
    a1,
    a2,
    a3);
}

//----- (0000000000010440) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::detail::exception::name(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, __int64 a3@<X8>)
{
  _ZN8nlohmann6detail9exception4nameERKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEi(a1, a2, a3);
}

//----- (0000000000010470) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall pudutech::Ashdmem::releaseSharedMemory(pudutech::Ashdmem *this)
{
  return _ZN8pudutech7Ashdmem19releaseSharedMemoryEv(this);
}

//----- (0000000000010490) ----------------------------------------------------
// attributes: thunk
unsigned __int64 *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>(
        const char *a1)
{
  return _ZN8nlohmann10basic_jsonINSt6__ndk13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEblmdS7_NS_14adl_serializerEE6createIS9_JRA1_KcEEEPT_DpOT0_(a1);
}

//----- (00000000000104A0) ----------------------------------------------------
// attributes: thunk
char *__fastcall std::vector<unsigned char>::insert<char *>(__int64 a1, char *src, char *a3, char *a4)
{
  return _ZNSt6__ndk16vectorIhNS_9allocatorIhEEE6insertIPcEENS_9enable_ifIXaasr21__is_forward_iteratorIT_EE5valuesr16is_constructibleIhNS_15iterator_traitsIS7_E9referenceEEE5valueENS_11__wrap_iterIPhEEE4typeENSB_IPKhEES7_S7_(
           a1,
           src,
           a3,
           a4);
}

//----- (00000000000104B0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::erase(
        _QWORD *a1,
        __int64 a2)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS7_NS_10unique_ptrINS_6vectorIhNS5_IhEEEENS_14default_deleteISE_EEEEEEEEENS_19__map_value_compareIS7_SK_NS_4lessIS7_EELb1EEENS5_ISK_EEE5eraseENS_21__tree_const_iteratorISK_PNS_11__tree_nodeISK_PvEElEE(
           a1,
           a2);
}

//----- (00000000000104C0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
        void **a1,
        __int64 a2)
{
  _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEE21__push_back_slow_pathISB_EEvOT_(
    a1,
    a2);
}

//----- (00000000000104D0) ----------------------------------------------------
// attributes: thunk
__int64 *__usercall std::operator+<char>@<X0>(const char *a1@<X0>, unsigned __int8 *a2@<X1>, __int64 *a3@<X8>)
{
  return _ZNSt6__ndk1plIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_12basic_stringIT_T0_T1_EEPKS6_RKS9_(a1, a2, a3);
}

//----- (00000000000104E0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<double &>(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRdEEEvDpOT_(
    a1,
    a2);
}

//----- (00000000000104F0) ----------------------------------------------------
// attributes: thunk
char *__fastcall pudutech::ThreadTaskQueue::init(pudutech::ThreadTaskQueue *this)
{
  return _ZN8pudutech15ThreadTaskQueue4initEv(this);
}

//----- (0000000000010500) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(
        __int64 a1,
        char *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS7_NS_10unique_ptrINS_6vectorIhNS5_IhEEEENS_14default_deleteISE_EEEEEEEEENS_19__map_value_compareIS7_SK_NS_4lessIS7_EELb1EEENS5_ISK_EEE7destroyEPNS_11__tree_nodeISK_PvEE(
    a1,
    a2);
}

//----- (0000000000010510) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const nlohmann::detail::invalid_iterator *a4)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE(
           a1,
           a2,
           a3,
           a4);
}

//----- (0000000000010530) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(
        __int64 a1)
{
  return _ZN8nlohmann6detail5lexerINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE4scanEv(a1);
}

//----- (0000000000010540) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_array(
        _QWORD *a1,
        std::__ndk1 *a2)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE11start_arrayEm(
           a1,
           a2);
}

//----- (0000000000010550) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall pudutech::Ashdmem::linkSharedMemory(pudutech::Ashdmem *this, int fd)
{
  return _ZN8pudutech7Ashdmem16linkSharedMemoryEi(this, fd);
}

//----- (0000000000010580) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::invalid_iterator::invalid_iterator(
        nlohmann::detail::invalid_iterator *this,
        const nlohmann::detail::invalid_iterator *a2)
{
  return _ZN8nlohmann6detail16invalid_iteratorC2ERKS1_(this, a2);
}

//----- (0000000000010590) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS7_NS_10unique_ptrINS_6vectorIhNS5_IhEEEENS_14default_deleteISE_EEEEEEEEENS_19__map_value_compareIS7_SK_NS_4lessIS7_EELb1EEENS5_ISK_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISV_EERKT_(
           a1,
           a2,
           a3);
}

//----- (00000000000105C0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree_remove<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2)
{
  return _ZNSt6__ndk113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_(result, a2);
}

//----- (00000000000105D0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::operator[](
        __int64 a1,
        __int128 *a2)
{
  return _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS6_NS_10unique_ptrIN8nlohmann10basic_jsonIS0_NS_6vectorES6_blmdS4_NSB_14adl_serializerEEENS_14default_deleteISF_EEEEEEENS_4lessIS6_EENS4_INS_4pairIS8_SK_EEEEEixES9_(
           a1,
           a2);
}

//----- (00000000000105F0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::erase(
        _QWORD *a1,
        __int64 a2)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE5eraseENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_PvEElEE(
           a1,
           a2);
}

//----- (0000000000010610) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::erase(
        _QWORD *a1,
        __int64 a2)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS7_NS_10unique_ptrIN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NSC_14adl_serializerEEENS_14default_deleteISH_EEEEEEEEENS_19__map_value_compareIS7_SN_NS_4lessIS7_EELb1EEENS5_ISN_EEE5eraseENS_21__tree_const_iteratorISN_PNS_11__tree_nodeISN_PvEElEE(
           a1,
           a2);
}

//----- (0000000000010630) ----------------------------------------------------
// attributes: thunk
void __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::json_sax_dom_callback_parser(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        char a4)
{
  _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEEC2ERSD_NS3_8functionIFbiNS0_6parserISD_E13parse_event_tESF_EEEb(
    a1,
    a2,
    a3,
    a4);
}

//----- (0000000000010640) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front(
        const void **a1,
        _QWORD *a2)
{
  _ZNSt6__ndk114__split_bufferIPNS_8functionIFvvEEENS_9allocatorIS4_EEE10push_frontEOS4_(a1, a2);
}

//----- (0000000000010650) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall protocol::DomainSockClient::processLoop(__int64 a1, __int64 a2)
{
  return _ZN8protocol16DomainSockClient11processLoopERNSt6__ndk16vectorIhNS1_9allocatorIhEEEE(a1, a2);
}

//----- (0000000000010660) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__basic_string_common<true>::__throw_out_of_range()
{
  _ZNKSt6__ndk121__basic_string_commonILb1EE20__throw_out_of_rangeEv();
}

//----- (0000000000010680) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_number(
        __int64 a1)
{
  return _ZN8nlohmann6detail5lexerINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE11scan_numberEv(a1);
}

//----- (00000000000106A0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<unsigned long &>(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRmEEEvDpOT_(
    a1,
    a2);
}

//----- (00000000000106B0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_array(
        __int64 a1)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE9end_arrayEv(a1);
}

//----- (00000000000106D0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::find<std::string>(
        __int64 a1,
        unsigned __int8 *a2)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS7_NS_10unique_ptrINS_6vectorIhNS5_IhEEEENS_14default_deleteISE_EEEEEEEEENS_19__map_value_compareIS7_SK_NS_4lessIS7_EELb1EEENS5_ISK_EEE4findIS7_EENS_15__tree_iteratorISK_PNS_11__tree_nodeISK_PvEElEERKT_(
           a1,
           a2);
}

//----- (00000000000106E0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__deque_base<std::function<void ()(void)>>::clear(_QWORD *a1)
{
  _ZNSt6__ndk112__deque_baseINS_8functionIFvvEEENS_9allocatorIS3_EEE5clearEv(a1);
}

//----- (00000000000106F0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall pudutech::ThreadRunner::getMutex(pudutech::ThreadRunner *this)
{
  return _ZN8pudutech12ThreadRunner8getMutexEv(this);
}

//----- (0000000000010700) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev(result);
}

//----- (0000000000010710) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS7_NS_10unique_ptrIN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NSC_14adl_serializerEEENS_14default_deleteISH_EEEEEEEEENS_19__map_value_compareIS7_SN_NS_4lessIS7_EELb1EEENS5_ISN_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISY_EERKT_(
           a1,
           a2,
           a3);
}

//----- (0000000000010720) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::out_of_range::out_of_range(
        nlohmann::detail::out_of_range *this,
        const nlohmann::detail::out_of_range *a2)
{
  return _ZN8nlohmann6detail12out_of_rangeC2ERKS1_(this, a2);
}

//----- (0000000000010730) ----------------------------------------------------
// attributes: thunk
signed __int64 __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::vector(
        signed __int64 *a1,
        unsigned __int8 **a2)
{
  return _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEEC2ERKSD_(
           a1,
           a2);
}

//----- (0000000000010750) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(
        __int64 a1,
        void ***a2,
        char a3)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRmEENS3_4pairIbPSD_EEOT_b(
           a1,
           a2,
           a3);
}

//----- (0000000000010780) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<long &>(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRlEEEvDpOT_(
    a1,
    a2);
}

//----- (0000000000010790) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3)
{
  return _ZNSt6__ndk124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_m(a1, a2, a3);
}

//----- (00000000000107E0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(
        __int64 a1,
        __int128 *a2)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRSB_EEPSD_OT_(
           a1,
           a2);
}

//----- (0000000000010800) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::function<bool ()(void)>::~function(__int64 a1)
{
  return _ZNSt6__ndk18functionIFbvEED2Ev(a1);
}

//----- (0000000000010820) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEm(a1);
}

//----- (0000000000010840) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall protocol::DomainSockServer::processLoop(__int64 a1, __int64 a2)
{
  return _ZN8protocol16DomainSockServer11processLoopERNSt6__ndk16vectorIhNS1_9allocatorIhEEEE(a1, a2);
}

//----- (0000000000010850) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::vector<bool>::__construct_at_end<std::__bit_iterator<std::vector<bool>,false,0ul>>(
        _QWORD *result,
        __int64 a2,
        __int64 a3)
{
  return _ZNSt6__ndk16vectorIbNS_9allocatorIbEEE18__construct_at_endINS_14__bit_iteratorIS3_Lb0ELm0EEEEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeES8_S8_(
           result,
           a2,
           a3);
}

//----- (00000000000108A0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEElsEi(a1);
}

//----- (00000000000108B0) ----------------------------------------------------
// attributes: thunk
void __fastcall pudutech::ThreadRunner::init(__int64 a1, __int64 a2, char a3, char a4, __int64 a5)
{
  _ZN8pudutech12ThreadRunner4initERKNSt6__ndk18functionIFvvEEEbbRKNS2_IFbvEEE(a1, a2, a3, a4, a5);
}

//----- (00000000000108D0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::type_error::type_error(
        nlohmann::detail::type_error *this,
        const nlohmann::detail::type_error *a2)
{
  return _ZN8nlohmann6detail10type_errorC2ERKS1_(this, a2);
}

//----- (00000000000108E0) ----------------------------------------------------
// attributes: thunk
void __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::~json_sax_dom_callback_parser(
        __int64 a1)
{
  _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEED2Ev(a1);
}

//----- (0000000000010900) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_string(
        __int64 a1)
{
  return _ZN8nlohmann6detail5lexerINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE11scan_stringEv(a1);
}

//----- (0000000000010910) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
        unsigned __int8 *a3@<X2>,
        __int64 a1@<X0>,
        int a2@<W1>,
        __int64 a4@<X8>)
{
  _ZN8nlohmann6detail6parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE17exception_messageENS0_5lexerISD_E10token_typeERKSB_(
    a1,
    a2,
    a3,
    a4);
}

//----- (0000000000010920) ----------------------------------------------------
// attributes: thunk
signed __int64 *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(
        signed __int64 *result,
        unsigned __int8 *a2)
{
  return _ZN8nlohmann10basic_jsonINSt6__ndk13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEblmdS7_NS_14adl_serializerEEC2ERKSB_(
           result,
           a2);
}

//----- (0000000000010930) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(
        __int64 a1,
        __int64 a2)
{
  return _ZN8nlohmann6detail6parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE18sax_parse_internalINS0_19json_sax_dom_parserISD_EEEEbPT_(
           a1,
           a2);
}

//----- (0000000000010950) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::find<std::string>(
        __int64 a1,
        unsigned __int8 *a2)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS7_NS_10unique_ptrIN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NSC_14adl_serializerEEENS_14default_deleteISH_EEEEEEEEENS_19__map_value_compareIS7_SN_NS_4lessIS7_EELb1EEENS5_ISN_EEE4findIS7_EENS_15__tree_iteratorISN_PNS_11__tree_nodeISN_PvEElEERKT_(
           a1,
           a2);
}

//----- (0000000000010960) ----------------------------------------------------
// attributes: thunk
void __fastcall protocol::DomainSockServer::triggerPluginProcess(
        __int64 a1,
        unsigned __int8 *a2,
        unsigned __int64 **a3)
{
  _ZN8protocol16DomainSockServer20triggerPluginProcessERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrINS1_6vectorIhNS5_IhEEEENS1_14default_deleteISD_EEEE(
    a1,
    a2,
    a3);
}

//----- (0000000000010970) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEERPNS_15__tree_end_nodeISP_EERKT_(
           a1,
           a2,
           a3);
}

//----- (0000000000010980) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(
        __int64 a1,
        void ***a2,
        char a3)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRlEENS3_4pairIbPSD_EEOT_b(
           a1,
           a2,
           a3);
}

//----- (0000000000010990) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::detail::invalid_iterator::create(
        unsigned __int8 *a2@<X1>,
        unsigned int a1@<W0>,
        __int64 a3@<X8>)
{
  _ZN8nlohmann6detail16invalid_iterator6createEiRKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(
    a1,
    a2,
    a3);
}

//----- (00000000000109A0) ----------------------------------------------------
// attributes: thunk
void __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse(
        __int64 a1,
        char a2,
        __int64 a3)
{
  _ZN8nlohmann6detail6parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE5parseEbRSD_(
    a1,
    a2,
    a3);
}

//----- (00000000000109C0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<std::string&>(
        void **a1,
        __int128 *a2)
{
  _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRS9_EEEvDpOT_(
    a1,
    a2);
}

//----- (00000000000109D0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(
        __int64 a1,
        void ***a2)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRlEEPSD_OT_(
           a1,
           a2);
}

//----- (00000000000109E0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2)
{
  return _ZNSt6__ndk127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_(result, a2);
}

//----- (00000000000109F0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(
        __int64 a1,
        __int128 *a2)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE3keyERSB_(
           a1,
           a2);
}

//----- (0000000000010A00) ----------------------------------------------------
// attributes: thunk
unsigned __int64 __usercall std::__copy_unaligned<std::vector<bool>,false>@<X0>(
        unsigned __int64 result@<X0>,
        __int64 a2@<X1>,
        __int64 a3@<X2>,
        __int64 a4@<X8>)
{
  return _ZNSt6__ndk116__copy_unalignedINS_6vectorIbNS_9allocatorIbEEEELb0EEENS_14__bit_iteratorIT_Lb0EXLi0EEEENS5_IS6_XT0_EXLi0EEEES8_S7_(
           result,
           a2,
           a3,
           a4);
}

//----- (0000000000010A10) ----------------------------------------------------
// attributes: thunk
__int64 __usercall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::parse<std::__wrap_iter<unsigned char *>,0>@<X0>(
        unsigned __int64 a1@<X0>,
        __int64 a2@<X1>,
        __int64 a3@<X2>,
        char a4@<W3>,
        __int64 a5@<X8>)
{
  return _ZN8nlohmann10basic_jsonINSt6__ndk13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEblmdS7_NS_14adl_serializerEE5parseINS1_11__wrap_iterIPhEELi0EEESB_T_SG_NS1_8functionIFbiNS_6detail6parserISB_E13parse_event_tERSB_EEEb(
           a1,
           a2,
           a3,
           a4,
           a5);
}

//----- (0000000000010A20) ----------------------------------------------------
// attributes: thunk
std::__shared_weak_count *__fastcall std::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(
        _QWORD *a1,
        _QWORD *a2)
{
  return _ZNSt6__ndk110shared_ptrIN8pudutech15ThreadTaskQueueEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE(
           a1,
           a2);
}

//----- (0000000000010A30) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall protocol::DomainSockClient::triggerPluginProcess(
        __int64 a1,
        unsigned __int8 *a2,
        unsigned __int64 **a3)
{
  return _ZN8protocol16DomainSockClient20triggerPluginProcessERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrINS1_6vectorIhNS5_IhEEEENS1_14default_deleteISD_EEEE(
           a1,
           a2,
           a3);
}

//----- (0000000000010A50) ----------------------------------------------------
// attributes: thunk
void __fastcall std::deque<std::function<void ()(void)>>::push_back(_QWORD *a1, __int64 a2)
{
  _ZNSt6__ndk15dequeINS_8functionIFvvEEENS_9allocatorIS3_EEE9push_backEOS3_(a1, a2);
}

//----- (0000000000010A60) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISC_EEE21__push_back_slow_pathISC_EEvOT_(
    a1,
    a2);
}

//----- (0000000000010A70) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parser(
        __int64 a1,
        __int64 a2,
        _QWORD *a3,
        char a4)
{
  return _ZN8nlohmann6detail6parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEEC2EONS3_10shared_ptrINS0_22input_adapter_protocolEEENS3_8functionIFbiNSE_13parse_event_tERSD_EEEb(
           a1,
           a2,
           a3,
           a4);
}

//----- (0000000000010A80) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall protocol::DomainSockClient::send(__int64 a1, unsigned __int8 *a2, __int64 a3)
{
  return _ZN8protocol16DomainSockClient4sendERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrINS1_6vectorIhNS5_IhEEEENS1_14default_deleteISD_EEEE(
           a1,
           a2,
           a3);
}

//----- (0000000000010A90) ----------------------------------------------------
// attributes: thunk
void __fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::~map(
        __int64 a1)
{
  _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS6_NS_10unique_ptrIN8nlohmann10basic_jsonIS0_NS_6vectorES6_blmdS4_NSB_14adl_serializerEEENS_14default_deleteISF_EEEEEEENS_4lessIS6_EENS4_INS_4pairIS8_SK_EEEEED2Ev(a1);
}

//----- (0000000000010AA0) ----------------------------------------------------
// attributes: thunk
bool __fastcall nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator==(
        unsigned __int8 **a1,
        unsigned __int8 **a2)
{
  return _ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEEeqERKSE_(
           a1,
           a2);
}

//----- (0000000000010AB0) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::detail::parse_error::position_string(
        __int64 a1@<X0>,
        unsigned __int64 a2@<X1>,
        __int64 a3@<X8>)
{
  _ZN8nlohmann6detail11parse_error15position_stringERKNS0_10position_tE(a1, a2, a3);
}

//----- (0000000000010AC0) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__vector_base_common<true>::__throw_length_error()
{
  _ZNKSt6__ndk120__vector_base_commonILb1EE20__throw_length_errorEv();
}

//----- (0000000000010AD0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<nlohmann::detail::value_t>(
        void ****a1,
        unsigned __int8 *a2)
{
  _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJNS1_6detail7value_tEEEEvDpOT_(
    a1,
    a2);
}

//----- (0000000000010AE0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<bool &>(
        __int64 a1,
        unsigned __int8 *a2)
{
  _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJRbEEEvDpOT_(
    a1,
    a2);
}

//----- (0000000000010AF0) ----------------------------------------------------
// attributes: thunk
std::__shared_weak_count *__fastcall std::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(
        _QWORD *a1,
        _QWORD *a2)
{
  return _ZNSt6__ndk110shared_ptrIN8pudutech12ThreadRunnerEEC2IS2_EEPT_NS_9enable_ifIXsr14is_convertibleIS6_PS2_EE5valueENS3_5__natEE4typeE(
           a1,
           a2);
}

//----- (0000000000010B10) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::detail::parse_error::create(
        __int64 *a2@<X1>,
        unsigned __int8 *a3@<X2>,
        unsigned int a1@<W0>,
        __int64 a4@<X8>)
{
  _ZN8nlohmann6detail11parse_error6createEiRKNS0_10position_tERKNSt6__ndk112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEE(
    a1,
    a2,
    a3,
    a4);
}

//----- (0000000000010B20) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::detail::out_of_range::create(unsigned __int8 *a2@<X1>, unsigned int a1@<W0>, __int64 a3@<X8>)
{
  _ZN8nlohmann6detail12out_of_range6createEiRKNSt6__ndk112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEE(
    a1,
    a2,
    a3);
}

//----- (0000000000010B30) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall protocol::DomainSockClient::create(__int64 a1, __int64 a2)
{
  return _ZN8protocol16DomainSockClient6createERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(
           a1,
           a2);
}

//----- (0000000000010B40) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_object(
        __int64 a1)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE10end_objectEv(a1);
}

//----- (0000000000010B70) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front(
        const void **a1,
        _QWORD *a2)
{
  _ZNSt6__ndk114__split_bufferIPNS_8functionIFvvEEERNS_9allocatorIS4_EEE10push_frontERKS4_(a1, a2);
}

//----- (0000000000010B80) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(
        _QWORD **a1,
        __int64 *a2,
        unsigned __int8 *a3,
        __int128 *a4)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE30__emplace_hint_unique_key_argsIS7_JRKNS_4pairIKS7_SD_EEEEENS_15__tree_iteratorISE_PNS_11__tree_nodeISE_PvEElEENS_21__tree_const_iteratorISE_SV_lEERKT_DpOT0_(
           a1,
           a2,
           a3,
           a4);
}

//----- (0000000000010BB0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> * const&>(
        __int64 a1,
        _QWORD *a2)
{
  _ZNSt6__ndk16vectorIPN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISC_EEE21__push_back_slow_pathIRKSC_EEvOT_(
    a1,
    a2);
}

//----- (0000000000010BD0) ----------------------------------------------------
// attributes: thunk
unsigned __int8 *__fastcall nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator->(
        unsigned __int8 **a1)
{
  return _ZNK8nlohmann6detail9iter_implINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEEptEv(a1);
}

//----- (0000000000010BE0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::deque<std::function<void ()(void)>>::__add_back_capacity(__int64 a1)
{
  _ZNSt6__ndk15dequeINS_8functionIFvvEEENS_9allocatorIS3_EEE19__add_back_capacityEv(a1);
}

//----- (0000000000010C20) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::function<void ()(void)>::~function(__int64 a1)
{
  return _ZNSt6__ndk18functionIFvvEED2Ev(a1);
}

//----- (0000000000010C50) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(
        __int64 a1,
        __int128 *a2)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE3keyERSB_(
           a1,
           a2);
}

//----- (0000000000010C60) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const nlohmann::detail::invalid_iterator *a4)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE11parse_errorEmRKSB_RKNS0_9exceptionE(
           a1,
           a2,
           a3,
           a4);
}

//----- (0000000000010C70) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_codepoint(
        __int64 a1)
{
  return _ZN8nlohmann6detail5lexerINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE13get_codepointEv(a1);
}

//----- (0000000000010C90) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall pudutech::ThreadRunner::wakeup(__int64 this)
{
  return _ZN8pudutech12ThreadRunner6wakeupEv(this);
}

//----- (0000000000010CA0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
        _QWORD *a1,
        __int64 *a2,
        __int64 **a3,
        __int64 **a4,
        unsigned __int8 *a5)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE12__find_equalIS7_EERPNS_16__tree_node_baseIPvEENS_21__tree_const_iteratorISE_PNS_11__tree_nodeISE_SN_EElEERPNS_15__tree_end_nodeISP_EESQ_RKT_(
           a1,
           a2,
           a3,
           a4,
           a5);
}

//----- (0000000000010CB0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(
        __int64 a1)
{
  return _ZN8nlohmann6detail5lexerINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE3getEv(a1);
}

//----- (0000000000010CC0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(
        __int64 a1,
        unsigned __int8 *a2)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueINS0_7value_tEEEPSD_OT_(
           a1,
           a2);
}

//----- (0000000000010CF0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(
        __int64 a1)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIDnEEPSD_OT_(a1);
}

//----- (0000000000010D10) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(
        __int64 a1,
        unsigned __int8 *a2)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRbEEPSD_OT_(
           a1,
           a2);
}

//----- (0000000000010D40) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(
        __int64 a1,
        char *a2,
        char a3)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueINS0_7value_tEEENS3_4pairIbPSD_EEOT_b(
           a1,
           a2,
           a3);
}

//----- (0000000000010D50) ----------------------------------------------------
// attributes: thunk
void __fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::~map(
        __int64 a1)
{
  _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS6_NS_10unique_ptrINS_6vectorIhNS4_IhEEEENS_14default_deleteISD_EEEEEEENS_4lessIS6_EENS4_INS_4pairIS8_SI_EEEEED2Ev(a1);
}

//----- (0000000000010D70) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall protocol::DomainSockServer::create(__int64 a1, __int64 a2)
{
  return _ZN8protocol16DomainSockServer6createERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE(
           a1,
           a2);
}

//----- (0000000000010D90) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcm(a1, src, n);
}

//----- (0000000000010DA0) ----------------------------------------------------
// attributes: thunk
void __fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        void ***a1,
        char a2)
{
  _ZN8nlohmann10basic_jsonINSt6__ndk13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEblmdS7_NS_14adl_serializerEE10json_value7destroyENS_6detail7value_tE(
    a1,
    a2);
}

//----- (0000000000010DC0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<decltype(nullptr)>(
        __int64 a1)
{
  _ZNSt6__ndk16vectorIN8nlohmann10basic_jsonINS_3mapES0_NS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEblmdS7_NS1_14adl_serializerEEENS7_ISB_EEE24__emplace_back_slow_pathIJDnEEEvDpOT_(a1);
}

//----- (0000000000010DD0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall protocol::DomainSockServer::send(__int64 a1, unsigned __int8 *a2, __int64 a3)
{
  return _ZN8protocol16DomainSockServer4sendERKNSt6__ndk112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEENS1_10unique_ptrINS1_6vectorIhNS5_IhEEEENS1_14default_deleteISD_EEEE(
           a1,
           a2,
           a3);
}

//----- (0000000000010DF0) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcm(a1, src, n);
}

//----- (0000000000010E30) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
        __int64 *a2@<X8>,
        __int64 a1@<X0>)
{
  _ZNK8nlohmann6detail5lexerINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE16get_token_stringEv(
    a1,
    a2);
}

//----- (0000000000010E50) ----------------------------------------------------
// attributes: thunk
void __fastcall std::vector<bool>::reserve(__int64 *a1, unsigned __int64 a2)
{
  _ZNSt6__ndk16vectorIbNS_9allocatorIbEEE7reserveEm(a1, a2);
}

//----- (0000000000010E60) ----------------------------------------------------
// attributes: thunk
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n)
{
  return _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6insertEmPKcm(a1, a2, src, n);
}

//----- (0000000000010E90) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall pudutech::Ashdmem::closeSharedMemory(pudutech::Ashdmem *this)
{
  return _ZN8pudutech7Ashdmem17closeSharedMemoryEv(this);
}

//----- (0000000000010EB0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_object(
        _QWORD *a1,
        std::__ndk1 *a2)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12start_objectEm(
           a1,
           a2);
}

//----- (0000000000010ED0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(
        __int64 a1,
        void ***a2)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRmEEPSD_OT_(
           a1,
           a2);
}

//----- (0000000000010EE0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(
        __int64 a1,
        __int64 a2,
        char a3)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIDnEENS3_4pairIbPSD_EEOT_b(
           a1,
           a2,
           a3);
}

//----- (0000000000010F00) ----------------------------------------------------
// attributes: thunk
void __fastcall std::string::push_back(__int64 *a1, char a2)
{
  _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc(a1, a2);
}

//----- (0000000000010F20) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(
        __int64 a1,
        void ***a2)
{
  return _ZN8nlohmann6detail19json_sax_dom_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRdEEPSD_OT_(
           a1,
           a2);
}

//----- (0000000000010F30) ----------------------------------------------------
// attributes: thunk
void __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::reset(
        __int64 a1)
{
  _ZN8nlohmann6detail5lexerINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE5resetEv(a1);
}

//----- (0000000000010F40) ----------------------------------------------------
// attributes: thunk
_QWORD **__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(
        _QWORD *a1)
{
  return _ZN8nlohmann10basic_jsonINSt6__ndk13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEblmdS7_NS_14adl_serializerEE6createINS2_IS9_SB_NS1_4lessIvEENS7_INS1_4pairIKS9_SB_EEEEEEJRKSJ_EEEPT_DpOT0_(a1);
}

//----- (0000000000010F50) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(
        _BYTE **a1,
        _QWORD *a2)
{
  _ZNSt6__ndk114__split_bufferIPNS_8functionIFvvEEERNS_9allocatorIS4_EEE9push_backEOS4_(a1, a2);
}

//----- (0000000000010F60) ----------------------------------------------------
// attributes: thunk
size_t *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(
        __int128 *a1)
{
  return _ZN8nlohmann10basic_jsonINSt6__ndk13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEblmdS7_NS_14adl_serializerEE6createIS9_JRKS9_EEEPT_DpOT0_(a1);
}

//----- (0000000000010FB0) ----------------------------------------------------
// attributes: thunk
void __fastcall pudutech::ThreadRunner::exit(pudutech::ThreadRunner *this, char a2)
{
  _ZN8pudutech12ThreadRunner4exitEb(this, a2);
}

//----- (0000000000010FC0) ----------------------------------------------------
// attributes: thunk
void __fastcall pudutech::ThreadTaskQueue::~ThreadTaskQueue(void **this)
{
  _ZN8pudutech15ThreadTaskQueueD2Ev(this);
}

//----- (0000000000010FD0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::other_error::other_error(
        nlohmann::detail::other_error *this,
        const nlohmann::detail::other_error *a2)
{
  return _ZN8nlohmann6detail11other_errorC2ERKS1_(this, a2);
}

//----- (0000000000010FF0) ----------------------------------------------------
// attributes: thunk
void __usercall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,0>(
        unsigned __int8 *a1@<X0>,
        unsigned __int8 **a2@<X1>,
        unsigned __int8 **a3@<X8>)
{
  _ZN8nlohmann10basic_jsonINSt6__ndk13mapENS1_6vectorENS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEblmdS7_NS_14adl_serializerEE5eraseINS_6detail9iter_implISB_EELi0EEET_SG_(
    a1,
    a2,
    a3);
}

//----- (0000000000011010) ----------------------------------------------------
// attributes: thunk
void __fastcall pudutech::ThreadRunner::~ThreadRunner(pudutech::ThreadRunner *this)
{
  _ZN8pudutech12ThreadRunnerD2Ev(this);
}

//----- (0000000000011020) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::destroy(
        __int64 a1,
        char *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE7destroyEPNS_11__tree_nodeISE_PvEE(
    a1,
    a2);
}

//----- (0000000000011030) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall std::shared_ptr<std::thread>::~shared_ptr(__int64 result)
{
  return _ZNSt6__ndk110shared_ptrINS_6threadEED2Ev(result);
}

//----- (0000000000011040) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(
        __int64 a1,
        char *a2)
{
  _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS7_NS_10unique_ptrIN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NSC_14adl_serializerEEENS_14default_deleteISH_EEEEEEEEENS_19__map_value_compareIS7_SN_NS_4lessIS7_EELb1EEENS5_ISN_EEE7destroyEPNS_11__tree_nodeISN_PvEE(
    a1,
    a2);
}

//----- (0000000000011050) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(
        __int64 a1,
        unsigned __int8 *a2,
        char a3)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRbEENS3_4pairIbPSD_EEOT_b(
           a1,
           a2,
           a3);
}

//----- (0000000000011080) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(
        __int64 a1,
        __int128 *a2,
        char a3)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRSB_EENS3_4pairIbPSD_EEOT_b(
           a1,
           a2,
           a3);
}

//----- (0000000000011090) ----------------------------------------------------
// attributes: thunk
_QWORD *__usercall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(
        __int128 **a2@<X2>,
        __int64 a1@<X0>,
        __int64 a3@<X8>)
{
  return _ZNSt6__ndk16__treeINS_12__value_typeINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEN8nlohmann10basic_jsonINS_3mapENS_6vectorES7_blmdS5_NS8_14adl_serializerEEEEENS_19__map_value_compareIS7_SE_NS_4lessIvEELb1EEENS5_ISE_EEE16__construct_nodeIJRKNS_21piecewise_construct_tENS_5tupleIJRKS7_EEENSP_IJEEEEEENS_10unique_ptrINS_11__tree_nodeISE_PvEENS_22__tree_node_destructorINS5_ISX_EEEEEEDpOT_(
           a1,
           a2,
           a3);
}

//----- (00000000000110B0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::ostream::flush(_QWORD *a1)
{
  return _ZNSt6__ndk113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(a1);
}

//----- (00000000000110E0) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::parse_error::parse_error(__int64 this, __int64 a2)
{
  return _ZN8nlohmann6detail11parse_errorC2ERKS1_(this, a2);
}

//----- (0000000000011110) ----------------------------------------------------
// attributes: thunk
void __noreturn std::__basic_string_common<true>::__throw_length_error()
{
  _ZNKSt6__ndk121__basic_string_commonILb1EE20__throw_length_errorEv();
}

//----- (0000000000011130) ----------------------------------------------------
// attributes: thunk
void __usercall pudutech::ThreadRunner::create(
        unsigned __int8 *a3@<X2>,
        __int64 *a6@<X8>,
        __int64 a1@<X0>,
        char a2@<W1>,
        char a4@<W3>,
        __int64 a5@<X4>)
{
  _ZN8pudutech12ThreadRunner6createERKNSt6__ndk18functionIFvvEEEbRKNS1_12basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEbRKNS2_IFbvEEE(
    a1,
    a2,
    a3,
    a4,
    a5,
    a6);
}

//----- (0000000000011150) ----------------------------------------------------
// attributes: thunk
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(
        _BYTE **a1,
        _QWORD *a2)
{
  _ZNSt6__ndk114__split_bufferIPNS_8functionIFvvEEENS_9allocatorIS4_EEE9push_backEOS4_(a1, a2);
}

//----- (0000000000011160) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(
        __int64 a1,
        void ***a2,
        char a3)
{
  return _ZN8nlohmann6detail28json_sax_dom_callback_parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE12handle_valueIRdEENS3_4pairIbPSD_EEOT_b(
           a1,
           a2,
           a3);
}

//----- (0000000000011180) ----------------------------------------------------
// attributes: thunk
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(
        __int64 a1,
        _QWORD *a2)
{
  return _ZN8nlohmann6detail6parserINS_10basic_jsonINSt6__ndk13mapENS3_6vectorENS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEblmdS9_NS_14adl_serializerEEEE18sax_parse_internalINS0_28json_sax_dom_callback_parserISD_EEEEbPT_(
           a1,
           a2);
}

//----- (00000000000111A0) ----------------------------------------------------
// attributes: thunk
_QWORD *__fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::operator[](
        __int64 a1,
        __int128 *a2)
{
  return _ZNSt6__ndk13mapINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_8functionIFvRKS6_NS_10unique_ptrINS_6vectorIhNS4_IhEEEENS_14default_deleteISD_EEEEEEENS_4lessIS6_EENS4_INS_4pairIS8_SI_EEEEEixES9_(
           a1,
           a2);
}

//----- (00000000000111C0) ----------------------------------------------------
// attributes: thunk
void __fastcall std::string::~string(__int64 a1)
{
  _ZNSt6__ndk112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev(a1);
}

//----- (00000000000111D0) ----------------------------------------------------
__int64 start()
{
  dword_45030 = 100;
  word_45038 = 17410;
  unk_45042 = 0LL;
  unk_4503A = 0LL;
  qword_45048 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45030, &off_45000);
  dword_45050 = 50;
  word_45058 = 22018;
  unk_45062 = 0LL;
  unk_4505A = 0LL;
  qword_45068 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45050, &off_45000);
  dword_45070 = 300;
  word_45078 = 18690;
  unk_45082 = 0LL;
  unk_4507A = 0LL;
  qword_45088 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45070, &off_45000);
  dword_45090 = 500;
  word_45098 = 22274;
  unk_450A2 = 0LL;
  unk_4509A = 0LL;
  qword_450A8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45090, &off_45000);
  dword_450B0 = 800;
  word_450B8 = 17666;
  unk_450C2 = 0LL;
  unk_450BA = 0LL;
  qword_450C8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_450B0, &off_45000);
  dword_450D0 = 1000;
  word_450D8 = 17922;
  unk_450E2 = 0LL;
  unk_450DA = 0LL;
  qword_450E8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_450D0, &off_45000);
  dword_450F0 = 2000;
  byte_450F8 = 16;
  unk_450F9 = 0x54434152544E4F43LL;
  qword_45108 = 0LL;
  unk_45101 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_450F0, &off_45000);
  dword_45110 = 2001;
  byte_45118 = 24;
  unk_45121 = 1279348295;
  byte_4512F = 0;
  unk_4512D = 0;
  unk_45119 = *(_QWORD *)"FATAL_SIGNAL";
  unk_45125 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45110, &off_45000);
  dword_45130 = 2002;
  byte_45138 = 30;
  byte_4514F = 0;
  unk_4514D = 0;
  strcpy(algn_45139, "FATAL_EXCEPTION");
  unk_45149 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45130, &off_45000);
  unk_45158 = 0LL;
  qword_45160 = 0LL;
  qword_45150 = 16LL;
  *(__int64 *)((char *)&qword_45150 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_45150, &off_45000);
  unk_45170 = 0x3366252000LL;
  qword_45178 = 0LL;
  qword_45168 = 24LL;
  *(__int64 *)((char *)&qword_45168 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  return __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_45168, &off_45000);
}
// 45000: using guessed type void *off_45000;
// 45030: using guessed type int dword_45030;
// 45038: using guessed type __int16 word_45038;
// 45048: using guessed type __int64 qword_45048;
// 45050: using guessed type int dword_45050;
// 45058: using guessed type __int16 word_45058;
// 45068: using guessed type __int64 qword_45068;
// 45070: using guessed type int dword_45070;
// 45078: using guessed type __int16 word_45078;
// 45088: using guessed type __int64 qword_45088;
// 45090: using guessed type int dword_45090;
// 45098: using guessed type __int16 word_45098;
// 450A8: using guessed type __int64 qword_450A8;
// 450B0: using guessed type int dword_450B0;
// 450B8: using guessed type __int16 word_450B8;
// 450C8: using guessed type __int64 qword_450C8;
// 450D0: using guessed type int dword_450D0;
// 450D8: using guessed type __int16 word_450D8;
// 450E8: using guessed type __int64 qword_450E8;
// 450F0: using guessed type int dword_450F0;
// 450F8: using guessed type char byte_450F8;
// 45108: using guessed type __int64 qword_45108;
// 45110: using guessed type int dword_45110;
// 45118: using guessed type char byte_45118;
// 4512F: using guessed type char byte_4512F;
// 45130: using guessed type int dword_45130;
// 45138: using guessed type char byte_45138;
// 45139: using guessed type _BYTE algn_45139[7];
// 45140: using guessed type __int64 qword_45140;
// 45148: using guessed type char byte_45148;
// 4514F: using guessed type char byte_4514F;
// 45150: using guessed type __int64 qword_45150;
// 45160: using guessed type __int64 qword_45160;
// 45168: using guessed type __int64 qword_45168;
// 45178: using guessed type __int64 qword_45178;

//----- (0000000000011474) ----------------------------------------------------
__int64 sub_11474()
{
  dword_45180 = 100;
  word_45188 = 17410;
  unk_45192 = 0LL;
  unk_4518A = 0LL;
  qword_45198 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45180, &off_45000);
  dword_451A0 = 50;
  word_451A8 = 22018;
  unk_451B2 = 0LL;
  unk_451AA = 0LL;
  qword_451B8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_451A0, &off_45000);
  dword_451C0 = 300;
  word_451C8 = 18690;
  unk_451D2 = 0LL;
  unk_451CA = 0LL;
  qword_451D8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_451C0, &off_45000);
  dword_451E0 = 500;
  word_451E8 = 22274;
  unk_451F2 = 0LL;
  unk_451EA = 0LL;
  qword_451F8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_451E0, &off_45000);
  dword_45200 = 800;
  word_45208 = 17666;
  unk_45212 = 0LL;
  unk_4520A = 0LL;
  qword_45218 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45200, &off_45000);
  dword_45220 = 1000;
  word_45228 = 17922;
  unk_45232 = 0LL;
  unk_4522A = 0LL;
  qword_45238 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45220, &off_45000);
  dword_45240 = 2000;
  byte_45248 = 16;
  unk_45249 = 0x54434152544E4F43LL;
  qword_45258 = 0LL;
  unk_45251 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45240, &off_45000);
  dword_45260 = 2001;
  byte_45268 = 24;
  unk_45271 = 1279348295;
  byte_4527F = 0;
  unk_4527D = 0;
  unk_45269 = *(_QWORD *)"FATAL_SIGNAL";
  unk_45275 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45260, &off_45000);
  dword_45280 = 2002;
  byte_45288 = 30;
  byte_4529F = 0;
  unk_4529D = 0;
  strcpy(algn_45289, "FATAL_EXCEPTION");
  unk_45299 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45280, &off_45000);
  unk_452A8 = 0LL;
  qword_452B0 = 0LL;
  qword_452A0 = 16LL;
  *(__int64 *)((char *)&qword_452A0 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_452A0, &off_45000);
  unk_452C0 = 0x3366252000LL;
  qword_452C8 = 0LL;
  qword_452B8 = 24LL;
  *(__int64 *)((char *)&qword_452B8 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  return __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_452B8, &off_45000);
}
// 45000: using guessed type void *off_45000;
// 45180: using guessed type int dword_45180;
// 45188: using guessed type __int16 word_45188;
// 45198: using guessed type __int64 qword_45198;
// 451A0: using guessed type int dword_451A0;
// 451A8: using guessed type __int16 word_451A8;
// 451B8: using guessed type __int64 qword_451B8;
// 451C0: using guessed type int dword_451C0;
// 451C8: using guessed type __int16 word_451C8;
// 451D8: using guessed type __int64 qword_451D8;
// 451E0: using guessed type int dword_451E0;
// 451E8: using guessed type __int16 word_451E8;
// 451F8: using guessed type __int64 qword_451F8;
// 45200: using guessed type int dword_45200;
// 45208: using guessed type __int16 word_45208;
// 45218: using guessed type __int64 qword_45218;
// 45220: using guessed type int dword_45220;
// 45228: using guessed type __int16 word_45228;
// 45238: using guessed type __int64 qword_45238;
// 45240: using guessed type int dword_45240;
// 45248: using guessed type char byte_45248;
// 45258: using guessed type __int64 qword_45258;
// 45260: using guessed type int dword_45260;
// 45268: using guessed type char byte_45268;
// 4527F: using guessed type char byte_4527F;
// 45280: using guessed type int dword_45280;
// 45288: using guessed type char byte_45288;
// 45289: using guessed type _BYTE algn_45289[7];
// 45290: using guessed type __int64 qword_45290;
// 45298: using guessed type char byte_45298;
// 4529F: using guessed type char byte_4529F;
// 452A0: using guessed type __int64 qword_452A0;
// 452B0: using guessed type __int64 qword_452B0;
// 452B8: using guessed type __int64 qword_452B8;
// 452C8: using guessed type __int64 qword_452C8;

//----- (0000000000011718) ----------------------------------------------------
__int64 sub_11718()
{
  dword_452D0 = 100;
  word_452D8 = 17410;
  unk_452E2 = 0LL;
  unk_452DA = 0LL;
  qword_452E8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_452D0, &off_45000);
  dword_452F0 = 50;
  word_452F8 = 22018;
  unk_45302 = 0LL;
  unk_452FA = 0LL;
  qword_45308 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_452F0, &off_45000);
  dword_45310 = 300;
  word_45318 = 18690;
  unk_45322 = 0LL;
  unk_4531A = 0LL;
  qword_45328 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45310, &off_45000);
  dword_45330 = 500;
  word_45338 = 22274;
  unk_45342 = 0LL;
  unk_4533A = 0LL;
  qword_45348 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45330, &off_45000);
  dword_45350 = 800;
  word_45358 = 17666;
  unk_45362 = 0LL;
  unk_4535A = 0LL;
  qword_45368 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45350, &off_45000);
  dword_45370 = 1000;
  word_45378 = 17922;
  unk_45382 = 0LL;
  unk_4537A = 0LL;
  qword_45388 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45370, &off_45000);
  dword_45390 = 2000;
  byte_45398 = 16;
  unk_45399 = 0x54434152544E4F43LL;
  qword_453A8 = 0LL;
  unk_453A1 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45390, &off_45000);
  dword_453B0 = 2001;
  byte_453B8 = 24;
  unk_453C1 = 1279348295;
  byte_453CF = 0;
  unk_453CD = 0;
  unk_453B9 = *(_QWORD *)"FATAL_SIGNAL";
  unk_453C5 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_453B0, &off_45000);
  dword_453D0 = 2002;
  byte_453D8 = 30;
  byte_453EF = 0;
  unk_453ED = 0;
  strcpy(algn_453D9, "FATAL_EXCEPTION");
  unk_453E9 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_453D0, &off_45000);
  unk_453F8 = 0LL;
  qword_45400 = 0LL;
  qword_453F0 = 16LL;
  *(__int64 *)((char *)&qword_453F0 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_453F0, &off_45000);
  unk_45410 = 0x3366252000LL;
  qword_45418 = 0LL;
  qword_45408 = 24LL;
  *(__int64 *)((char *)&qword_45408 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_45408, &off_45000);
  qword_45420 = 42LL;
  BYTE1(qword_45430) = 0;
  WORD1(qword_45430) = 0;
  HIDWORD(qword_45430) = 0;
  strcpy((char *)&qword_45420 + 1, "/pudutech/domai");
  return __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_45420, &off_45000);
}
// 45000: using guessed type void *off_45000;
// 452D0: using guessed type int dword_452D0;
// 452D8: using guessed type __int16 word_452D8;
// 452E8: using guessed type __int64 qword_452E8;
// 452F0: using guessed type int dword_452F0;
// 452F8: using guessed type __int16 word_452F8;
// 45308: using guessed type __int64 qword_45308;
// 45310: using guessed type int dword_45310;
// 45318: using guessed type __int16 word_45318;
// 45328: using guessed type __int64 qword_45328;
// 45330: using guessed type int dword_45330;
// 45338: using guessed type __int16 word_45338;
// 45348: using guessed type __int64 qword_45348;
// 45350: using guessed type int dword_45350;
// 45358: using guessed type __int16 word_45358;
// 45368: using guessed type __int64 qword_45368;
// 45370: using guessed type int dword_45370;
// 45378: using guessed type __int16 word_45378;
// 45388: using guessed type __int64 qword_45388;
// 45390: using guessed type int dword_45390;
// 45398: using guessed type char byte_45398;
// 453A8: using guessed type __int64 qword_453A8;
// 453B0: using guessed type int dword_453B0;
// 453B8: using guessed type char byte_453B8;
// 453CF: using guessed type char byte_453CF;
// 453D0: using guessed type int dword_453D0;
// 453D8: using guessed type char byte_453D8;
// 453D9: using guessed type _BYTE algn_453D9[7];
// 453E0: using guessed type __int64 qword_453E0;
// 453E8: using guessed type char byte_453E8;
// 453EF: using guessed type char byte_453EF;
// 453F0: using guessed type __int64 qword_453F0;
// 45400: using guessed type __int64 qword_45400;
// 45408: using guessed type __int64 qword_45408;
// 45418: using guessed type __int64 qword_45418;
// 45420: using guessed type __int64 qword_45420;
// 45428: using guessed type __int64 qword_45428;
// 45430: using guessed type __int64 qword_45430;

//----- (00000000000119FC) ----------------------------------------------------
__int64 sub_119FC()
{
  dword_455B0 = 100;
  word_455B8 = 17410;
  unk_455C2 = 0LL;
  unk_455BA = 0LL;
  qword_455C8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_455B0, &off_45000);
  dword_455D0 = 50;
  word_455D8 = 22018;
  unk_455E2 = 0LL;
  unk_455DA = 0LL;
  qword_455E8 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_455D0, &off_45000);
  dword_455F0 = 300;
  word_455F8 = 18690;
  unk_45602 = 0LL;
  unk_455FA = 0LL;
  qword_45608 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_455F0, &off_45000);
  dword_45610 = 500;
  word_45618 = 22274;
  unk_45622 = 0LL;
  unk_4561A = 0LL;
  qword_45628 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45610, &off_45000);
  dword_45630 = 800;
  word_45638 = 17666;
  unk_45642 = 0LL;
  unk_4563A = 0LL;
  qword_45648 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45630, &off_45000);
  dword_45650 = 1000;
  word_45658 = 17922;
  unk_45662 = 0LL;
  unk_4565A = 0LL;
  qword_45668 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45650, &off_45000);
  dword_45670 = 2000;
  byte_45678 = 16;
  unk_45679 = 0x54434152544E4F43LL;
  qword_45688 = 0LL;
  unk_45681 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45670, &off_45000);
  dword_45690 = 2001;
  byte_45698 = 24;
  unk_456A1 = 1279348295;
  byte_456AF = 0;
  unk_456AD = 0;
  unk_45699 = *(_QWORD *)"FATAL_SIGNAL";
  unk_456A5 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45690, &off_45000);
  dword_456B0 = 2002;
  byte_456B8 = 30;
  byte_456CF = 0;
  unk_456CD = 0;
  strcpy(algn_456B9, "FATAL_EXCEPTION");
  unk_456C9 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_456B0, &off_45000);
  unk_456D8 = 0LL;
  qword_456E0 = 0LL;
  qword_456D0 = 16LL;
  *(__int64 *)((char *)&qword_456D0 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_456D0, &off_45000);
  unk_456F0 = 0x3366252000LL;
  qword_456F8 = 0LL;
  qword_456E8 = 24LL;
  *(__int64 *)((char *)&qword_456E8 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_456E8, &off_45000);
  qword_45700 = 42LL;
  BYTE1(qword_45710) = 0;
  WORD1(qword_45710) = 0;
  HIDWORD(qword_45710) = 0;
  strcpy((char *)&qword_45700 + 1, "/pudutech/domai");
  return __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_45700, &off_45000);
}
// 45000: using guessed type void *off_45000;
// 455B0: using guessed type int dword_455B0;
// 455B8: using guessed type __int16 word_455B8;
// 455C8: using guessed type __int64 qword_455C8;
// 455D0: using guessed type int dword_455D0;
// 455D8: using guessed type __int16 word_455D8;
// 455E8: using guessed type __int64 qword_455E8;
// 455F0: using guessed type int dword_455F0;
// 455F8: using guessed type __int16 word_455F8;
// 45608: using guessed type __int64 qword_45608;
// 45610: using guessed type int dword_45610;
// 45618: using guessed type __int16 word_45618;
// 45628: using guessed type __int64 qword_45628;
// 45630: using guessed type int dword_45630;
// 45638: using guessed type __int16 word_45638;
// 45648: using guessed type __int64 qword_45648;
// 45650: using guessed type int dword_45650;
// 45658: using guessed type __int16 word_45658;
// 45668: using guessed type __int64 qword_45668;
// 45670: using guessed type int dword_45670;
// 45678: using guessed type char byte_45678;
// 45688: using guessed type __int64 qword_45688;
// 45690: using guessed type int dword_45690;
// 45698: using guessed type char byte_45698;
// 456AF: using guessed type char byte_456AF;
// 456B0: using guessed type int dword_456B0;
// 456B8: using guessed type char byte_456B8;
// 456B9: using guessed type _BYTE algn_456B9[7];
// 456C0: using guessed type __int64 qword_456C0;
// 456C8: using guessed type char byte_456C8;
// 456CF: using guessed type char byte_456CF;
// 456D0: using guessed type __int64 qword_456D0;
// 456E0: using guessed type __int64 qword_456E0;
// 456E8: using guessed type __int64 qword_456E8;
// 456F8: using guessed type __int64 qword_456F8;
// 45700: using guessed type __int64 qword_45700;
// 45708: using guessed type __int64 qword_45708;
// 45710: using guessed type __int64 qword_45710;

//----- (0000000000011CE0) ----------------------------------------------------
__int64 sub_11CE0()
{
  dword_45718 = 100;
  word_45720 = 17410;
  *(_QWORD *)&algn_45722[8] = 0LL;
  *(_QWORD *)algn_45722 = 0LL;
  qword_45730 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45718, &off_45000);
  dword_45738 = 50;
  word_45740 = 22018;
  *(_QWORD *)&algn_45742[8] = 0LL;
  *(_QWORD *)algn_45742 = 0LL;
  qword_45750 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45738, &off_45000);
  dword_45758 = 300;
  word_45760 = 18690;
  *(_QWORD *)&algn_45762[8] = 0LL;
  *(_QWORD *)algn_45762 = 0LL;
  qword_45770 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45758, &off_45000);
  dword_45778 = 500;
  word_45780 = 22274;
  *(_QWORD *)&algn_45782[8] = 0LL;
  *(_QWORD *)algn_45782 = 0LL;
  qword_45790 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45778, &off_45000);
  dword_45798 = 800;
  word_457A0 = 17666;
  *(_QWORD *)&algn_457A2[8] = 0LL;
  *(_QWORD *)algn_457A2 = 0LL;
  qword_457B0 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45798, &off_45000);
  dword_457B8 = 1000;
  word_457C0 = 17922;
  *(_QWORD *)&algn_457C2[8] = 0LL;
  *(_QWORD *)algn_457C2 = 0LL;
  qword_457D0 = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_457B8, &off_45000);
  dword_457D8 = 2000;
  byte_457E0 = 16;
  *(_QWORD *)algn_457E1 = 0x54434152544E4F43LL;
  qword_457F0 = 0LL;
  *(_QWORD *)&algn_457E1[8] = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_457D8, &off_45000);
  dword_457F8 = 2001;
  byte_45800 = 24;
  unk_45809 = 1279348295;
  byte_45817 = 0;
  unk_45815 = 0;
  unk_45801 = *(_QWORD *)"FATAL_SIGNAL";
  unk_4580D = 0LL;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_457F8, &off_45000);
  dword_45818 = 2002;
  byte_45820 = 30;
  byte_45837 = 0;
  unk_45835 = 0;
  strcpy(algn_45821, "FATAL_EXCEPTION");
  unk_45831 = 0;
  __cxa_atexit((void (__fastcall *)(void *))LEVELS::~LEVELS, &dword_45818, &off_45000);
  unk_45840 = 0LL;
  qword_45848 = 0LL;
  qword_45838 = 16LL;
  *(__int64 *)((char *)&qword_45838 + 1) = 0x64252F6D252F5925LL;
  __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_45838, &off_45000);
  unk_45858 = 0x3366252000LL;
  qword_45860 = 0LL;
  qword_45850 = 24LL;
  *(__int64 *)((char *)&qword_45850 + 1) = *(_QWORD *)"%H:%M:%S %f3";
  return __cxa_atexit((void (__fastcall *)(void *))std::string::~string, &qword_45850, &off_45000);
}
// 45000: using guessed type void *off_45000;
// 45718: using guessed type int dword_45718;
// 45720: using guessed type __int16 word_45720;
// 45722: using guessed type _BYTE algn_45722[14];
// 45730: using guessed type __int64 qword_45730;
// 45738: using guessed type int dword_45738;
// 45740: using guessed type __int16 word_45740;
// 45742: using guessed type _BYTE algn_45742[14];
// 45750: using guessed type __int64 qword_45750;
// 45758: using guessed type int dword_45758;
// 45760: using guessed type __int16 word_45760;
// 45762: using guessed type _BYTE algn_45762[14];
// 45770: using guessed type __int64 qword_45770;
// 45778: using guessed type int dword_45778;
// 45780: using guessed type __int16 word_45780;
// 45782: using guessed type _BYTE algn_45782[14];
// 45790: using guessed type __int64 qword_45790;
// 45798: using guessed type int dword_45798;
// 457A0: using guessed type __int16 word_457A0;
// 457A2: using guessed type _BYTE algn_457A2[14];
// 457B0: using guessed type __int64 qword_457B0;
// 457B8: using guessed type int dword_457B8;
// 457C0: using guessed type __int16 word_457C0;
// 457C2: using guessed type _BYTE algn_457C2[14];
// 457D0: using guessed type __int64 qword_457D0;
// 457D8: using guessed type int dword_457D8;
// 457E0: using guessed type char byte_457E0;
// 457E1: using guessed type _BYTE algn_457E1[15];
// 457F0: using guessed type __int64 qword_457F0;
// 457F8: using guessed type int dword_457F8;
// 45800: using guessed type char byte_45800;
// 45817: using guessed type char byte_45817;
// 45818: using guessed type int dword_45818;
// 45820: using guessed type char byte_45820;
// 45821: using guessed type _BYTE algn_45821[7];
// 45828: using guessed type __int64 qword_45828;
// 45830: using guessed type char byte_45830;
// 45837: using guessed type char byte_45837;
// 45838: using guessed type __int64 qword_45838;
// 45848: using guessed type __int64 qword_45848;
// 45850: using guessed type __int64 qword_45850;
// 45860: using guessed type __int64 qword_45860;

//----- (0000000000011F84) ----------------------------------------------------
__int64 sub_11F84()
{
  return __cxa_finalize(&off_45000);
}
// 45000: using guessed type void *off_45000;

//----- (0000000000011F98) ----------------------------------------------------
__int64 (*__fastcall sub_11F98(__int64 (*result)(void)))(void)
{
  if ( result )
    return (__int64 (*)(void))result();
  return result;
}

//----- (0000000000011FA4) ----------------------------------------------------
__int64 __fastcall sub_11FA4(void *a1)
{
  return __cxa_atexit((void (__fastcall *)(void *))sub_11F98, a1, &off_45000);
}
// 45000: using guessed type void *off_45000;

//----- (0000000000011FC0) ----------------------------------------------------
void __fastcall std::string::~string(__int64 a1)
{
  if ( (*(_BYTE *)a1 & 1) != 0 )
    operator delete(*(void **)(a1 + 16));
}

//----- (0000000000011FD4) ----------------------------------------------------
void __fastcall LEVELS::~LEVELS(void **this)
{
  if ( ((_BYTE)this[1] & 1) != 0 )
    operator delete(this[3]);
}

//----- (0000000000011FE8) ----------------------------------------------------
void __usercall pudutech::ThreadRunner::create(
        __int64 a1@<X0>,
        char a2@<W1>,
        unsigned __int8 *a3@<X2>,
        char a4@<W3>,
        __int64 a5@<X4>,
        __int64 *a6@<X8>)
{
  __int64 v12; // x0
  __int64 v13; // x0
  unsigned __int64 v14; // x9
  void *v15; // x1
  size_t v16; // x2

  v12 = operator new(0x100uLL);
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  std::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(a6, (_QWORD *)v12);
  v13 = *a6;
  if ( (unsigned __int8 *)(*a6 + 224) != a3 )
  {
    v14 = *a3;
    if ( (v14 & 1) != 0 )
      v15 = (void *)*((_QWORD *)a3 + 2);
    else
      v15 = a3 + 1;
    if ( (v14 & 1) != 0 )
      v16 = *((_QWORD *)a3 + 1);
    else
      v16 = v14 >> 1;
    std::string::assign((__int64 *)(*a6 + 224), v15, v16);
    v13 = *a6;
  }
  pudutech::ThreadRunner::init(v13, a1, a2 & 1, a4 & 1, a5);
}

//----- (00000000000120F0) ----------------------------------------------------
std::__shared_weak_count *__fastcall std::shared_ptr<pudutech::ThreadRunner>::shared_ptr<pudutech::ThreadRunner>(
        _QWORD *a1,
        _QWORD *a2)
{
  std::__shared_weak_count *result; // x0
  std::__shared_weak_count *v5; // x19
  unsigned __int64 *v6; // x8
  unsigned __int64 v7; // x9
  unsigned __int64 *v8; // x8
  unsigned __int64 v9; // x9
  unsigned __int64 *v10; // x8
  unsigned __int64 v11; // x9

  *a1 = a2;
  result = (std::__shared_weak_count *)operator new(0x20uLL);
  v5 = result;
  *((_QWORD *)result + 2) = 0LL;
  *((_QWORD *)result + 3) = a2;
  *(_QWORD *)result = &off_43DC0;
  *((_QWORD *)result + 1) = 0LL;
  a1[1] = result;
  if ( a2 )
  {
    result = (std::__shared_weak_count *)a2[1];
    if ( !result || *((_QWORD *)result + 1) == -1LL )
    {
      v6 = (unsigned __int64 *)((char *)v5 + 8);
      do
        v7 = __ldxr(v6);
      while ( __stxr(v7 + 1, v6) );
      v8 = (unsigned __int64 *)((char *)v5 + 16);
      do
        v9 = __ldxr(v8);
      while ( __stxr(v9 + 1, v8) );
      *a2 = a2;
      a2[1] = v5;
      if ( result )
        result = (std::__shared_weak_count *)std::__shared_weak_count::__release_weak(result);
      v10 = (unsigned __int64 *)((char *)v5 + 8);
      do
        v11 = __ldaxr(v10);
      while ( __stlxr(v11 - 1, v10) );
      if ( !v11 )
      {
        (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v5 + 16LL))(v5);
        return (std::__shared_weak_count *)std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return result;
}
// 43DC0: using guessed type void (__fastcall *)(std::__shared_weak_count *__hidden this);

//----- (00000000000121E8) ----------------------------------------------------
void __fastcall pudutech::ThreadRunner::init(__int64 a1, __int64 a2, char a3, char a4, __int64 a5)
{
  __int64 v6; // x0
  void (*v10)(void); // x8
  __int64 v11; // x0
  void (*v12)(void); // x8
  std::__shared_weak_count *v13; // x0
  __int64 v14; // x21
  __int64 v15; // x0
  pthread_t *v16; // x21
  std::thread *v17; // x20
  std::__shared_weak_count *v18; // x19
  unsigned __int64 *v19; // x8
  unsigned __int64 v20; // x9
  __int128 v21; // [xsp+0h] [xbp-70h] BYREF
  __int64 v22; // [xsp+10h] [xbp-60h]
  unsigned __int64 *v23; // [xsp+18h] [xbp-58h]
  __int128 *v24; // [xsp+20h] [xbp-50h]
  __int64 v25; // [xsp+38h] [xbp-38h]

  v25 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  atomic_store(0, (unsigned __int8 *)(a1 + 24));
  atomic_store(0, (unsigned __int8 *)(a1 + 25));
  v6 = *(_QWORD *)(a5 + 32);
  if ( v6 )
  {
    if ( a5 == v6 )
    {
      v24 = &v21;
      (*(void (__fastcall **)(__int64, __int128 *))(*(_QWORD *)v6 + 24LL))(v6, &v21);
    }
    else
    {
      v24 = (__int128 *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v6 + 16LL))(v6);
    }
  }
  else
  {
    v24 = 0LL;
  }
  sub_13818(&v21, a1 + 176);
  if ( &v21 == v24 )
  {
    v10 = *(void (**)(void))(*(_QWORD *)v24 + 32LL);
  }
  else
  {
    if ( !v24 )
      goto LABEL_11;
    v10 = *(void (**)(void))(*(_QWORD *)v24 + 40LL);
  }
  v10();
LABEL_11:
  atomic_store(a4 & 1, (unsigned __int8 *)(a1 + 25));
  v11 = *(_QWORD *)(a2 + 32);
  if ( v11 )
  {
    if ( a2 == v11 )
    {
      v24 = &v21;
      (*(void (__fastcall **)(__int64, __int128 *))(*(_QWORD *)v11 + 24LL))(v11, &v21);
    }
    else
    {
      v24 = (__int128 *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v11 + 16LL))(v11);
    }
  }
  else
  {
    v24 = 0LL;
  }
  sub_13980(&v21, a1 + 128);
  if ( &v21 == v24 )
  {
    v12 = *(void (**)(void))(*(_QWORD *)v24 + 32LL);
  }
  else
  {
    if ( !v24 )
      goto LABEL_21;
    v12 = *(void (**)(void))(*(_QWORD *)v24 + 40LL);
  }
  v12();
LABEL_21:
  if ( (a3 & 1) != 0 )
  {
    v13 = *(std::__shared_weak_count **)(a1 + 8);
    if ( !v13 || (v14 = *(_QWORD *)a1, (v15 = std::__shared_weak_count::lock(v13)) == 0) )
      sub_13AE8();
    v22 = v14;
    v23 = (unsigned __int64 *)v15;
    v21 = (unsigned __int64)pudutech::ThreadRunner::threadRun;
    v16 = (pthread_t *)operator new(8uLL);
    sub_13B1C(v16, &v21);
    v17 = *(std::thread **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v16;
    if ( v17 )
    {
      std::thread::~thread(v17);
      operator delete(v17);
    }
    v18 = (std::__shared_weak_count *)v23;
    if ( v23 )
    {
      v19 = v23 + 1;
      do
        v20 = __ldaxr(v19);
      while ( __stlxr(v20 - 1, v19) );
      if ( !v20 )
      {
        (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v18 + 16LL))(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
}

//----- (0000000000012450) ----------------------------------------------------
void __fastcall pudutech::ThreadRunner::threadRun(pudutech::ThreadRunner *this)
{
  const char *v2; // x22
  size_t v3; // x0
  size_t v4; // x21
  char *v5; // x23
  unsigned __int64 v6; // x24
  char v7; // w21
  unsigned __int64 v8; // x21
  unsigned __int64 v9; // x22
  pthread_t v10; // x0
  __int64 *v11; // x8
  __int64 v12; // x9
  __int64 v13; // x8
  const char *v14; // x22
  size_t v15; // x0
  size_t v16; // x21
  char *v17; // x23
  const char *v18; // x1
  const char *v19; // x22
  size_t v20; // x0
  size_t v21; // x21
  char *v22; // x23
  unsigned __int64 v23; // x24
  char v24; // w21
  unsigned __int64 v25; // x24
  char v26; // w21
  _QWORD *v27; // x21
  const char *v28; // x22
  _QWORD *v29; // x0
  unsigned __int64 v30; // x8
  bool v31; // zf
  unsigned __int64 v32; // x8
  char *v33; // x23
  size_t v34; // x22
  _QWORD *v35; // x21
  __int64 v36; // x0
  const char *v37; // x22
  __int64 v38; // x0
  unsigned __int8 v39; // w8
  unsigned __int8 v40; // w8
  const char *v41; // x23
  size_t v42; // x0
  size_t v43; // x28
  char *v44; // x24
  char v45; // w23
  __int64 v46; // x9
  unsigned __int8 v47; // w8
  __int64 v48; // x0
  unsigned __int8 v49; // w8
  unsigned __int8 v50; // w23
  __int64 v51; // x0
  unsigned __int8 v52; // w8
  const char *v53; // x20
  size_t v54; // x0
  size_t v55; // x19
  char *v56; // x21
  unsigned __int64 v57; // x22
  char v58; // w19
  __int64 v59[2]; // [xsp+18h] [xbp-2D8h] BYREF
  void *v60; // [xsp+28h] [xbp-2C8h]
  int v61; // [xsp+30h] [xbp-2C0h] BYREF
  unsigned __int64 v62; // [xsp+38h] [xbp-2B8h] BYREF
  size_t v63; // [xsp+40h] [xbp-2B0h]
  void *v64; // [xsp+48h] [xbp-2A8h]
  __int64 v65[2]; // [xsp+50h] [xbp-2A0h] BYREF
  void *v66; // [xsp+60h] [xbp-290h]
  int v67; // [xsp+68h] [xbp-288h] BYREF
  unsigned __int64 v68; // [xsp+70h] [xbp-280h] BYREF
  size_t v69; // [xsp+78h] [xbp-278h]
  void *v70; // [xsp+80h] [xbp-270h]
  __int64 v71[2]; // [xsp+88h] [xbp-268h] BYREF
  void *v72; // [xsp+98h] [xbp-258h]
  int v73; // [xsp+A0h] [xbp-250h] BYREF
  unsigned __int64 v74; // [xsp+A8h] [xbp-248h] BYREF
  size_t v75; // [xsp+B0h] [xbp-240h]
  void *v76; // [xsp+B8h] [xbp-238h]
  __int64 v77[2]; // [xsp+C0h] [xbp-230h] BYREF
  void *v78; // [xsp+D0h] [xbp-220h]
  __int64 v79[2]; // [xsp+D8h] [xbp-218h] BYREF
  void *v80; // [xsp+E8h] [xbp-208h]
  int v81; // [xsp+F0h] [xbp-200h] BYREF
  unsigned __int64 v82; // [xsp+F8h] [xbp-1F8h] BYREF
  size_t v83; // [xsp+100h] [xbp-1F0h]
  void *v84; // [xsp+108h] [xbp-1E8h]
  __int64 v85[2]; // [xsp+110h] [xbp-1E0h] BYREF
  void *v86; // [xsp+120h] [xbp-1D0h]
  int v87; // [xsp+128h] [xbp-1C8h] BYREF
  unsigned __int64 v88; // [xsp+130h] [xbp-1C0h] BYREF
  size_t v89; // [xsp+138h] [xbp-1B8h]
  void *v90; // [xsp+140h] [xbp-1B0h]
  __int128 v91; // [xsp+148h] [xbp-1A8h] BYREF
  void *v92; // [xsp+158h] [xbp-198h]

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v87 = dword_45050;
  v89 = 0LL;
  v90 = 0LL;
  if ( (word_45058 & 1) != 0 )
    v2 = (const char *)qword_45068;
  else
    v2 = (char *)&word_45058 + 1;
  v88 = 0LL;
  v3 = strlen(v2);
  if ( v3 >= 0xFFFFFFFFFFFFFFF0LL )
    goto LABEL_145;
  v4 = v3;
  if ( v3 >= 0x17 )
  {
    v6 = (v3 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v5 = (char *)operator new(v6);
    v89 = v4;
    v90 = v5;
    v88 = v6 | 1;
    goto LABEL_9;
  }
  v5 = (char *)&v88 + 1;
  LOBYTE(v88) = 2 * v3;
  if ( v3 )
LABEL_9:
    memcpy(v5, v2, v4);
  v5[v4] = 0;
  if ( (g3::logLevel(&v87) & 1) != 0 )
  {
    v85[1] = 0LL;
    v86 = 0LL;
    v85[0] = 0x6573616208LL;
    v7 = g3::logTag(v85);
    if ( (v85[0] & 1) == 0 )
    {
      if ( (v88 & 1) == 0 )
        goto LABEL_13;
LABEL_16:
      operator delete(v90);
      if ( (v7 & 1) == 0 )
        goto LABEL_18;
      goto LABEL_17;
    }
    operator delete(v86);
    if ( (v88 & 1) != 0 )
      goto LABEL_16;
  }
  else
  {
    v7 = 0;
    if ( (v88 & 1) != 0 )
      goto LABEL_16;
  }
LABEL_13:
  if ( (v7 & 1) != 0 )
  {
LABEL_17:
    LogCapture::LogCapture((LogCapture *)&v91, "base", (const LEVELS *)&dword_45050, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(
      (_QWORD *)&v91 + 1,
      (__int64)"ThreadRunner::threadRun enter",
      29LL);
    LogCapture::~LogCapture((LogCapture *)&v91);
  }
LABEL_18:
  v8 = *((unsigned __int8 *)this + 224);
  if ( (v8 & 1) != 0 )
    v9 = *((_QWORD *)this + 29);
  else
    v9 = v8 >> 1;
  if ( v9 )
  {
    v10 = pthread_self();
    if ( v9 >= 0x10 )
    {
      v91 = 0uLL;
      v92 = 0LL;
      v11 = (__int64 *)*((_QWORD *)this + 30);
      LOBYTE(v91) = 30;
      if ( (v8 & 1) == 0 )
        v11 = (__int64 *)((char *)this + 225);
      v12 = *(__int64 *)((char *)v11 + 7);
      v13 = *v11;
      *((_QWORD *)&v91 + 1) = v12;
      *(_QWORD *)((char *)&v91 + 1) = v13;
      LOBYTE(v92) = 0;
      pthread_setname_np(v10, (const char *)&v91 + 1);
      if ( (v91 & 1) != 0 )
        operator delete(v92);
      if ( (word_45058 & 1) != 0 )
        v14 = (const char *)qword_45068;
      else
        v14 = (char *)&word_45058 + 1;
      v81 = dword_45050;
      v83 = 0LL;
      v84 = 0LL;
      v82 = 0LL;
      v15 = strlen(v14);
      if ( v15 < 0xFFFFFFFFFFFFFFF0LL )
      {
        v16 = v15;
        if ( v15 >= 0x17 )
        {
          v25 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v17 = (char *)operator new(v25);
          v83 = v16;
          v84 = v17;
          v82 = v25 | 1;
        }
        else
        {
          v17 = (char *)&v82 + 1;
          LOBYTE(v82) = 2 * v15;
          if ( !v15 )
          {
LABEL_55:
            v17[v16] = 0;
            if ( (g3::logLevel(&v81) & 1) != 0 )
            {
              v79[1] = 0LL;
              v79[0] = 0x6573616208LL;
              v80 = 0LL;
              v26 = g3::logTag(v79);
              if ( (v79[0] & 1) == 0 )
              {
                if ( (v82 & 1) == 0 )
                  goto LABEL_58;
LABEL_65:
                operator delete(v84);
                if ( (v26 & 1) == 0 )
                  goto LABEL_87;
LABEL_66:
                LogCapture::LogCapture((LogCapture *)&v91, "base", (const LEVELS *)&dword_45050, "", 6, 0LL);
                v29 = std::__put_character_sequence<char,std::char_traits<char>>(
                        (_QWORD *)&v91 + 1,
                        (__int64)"start thread: ",
                        14LL);
                v77[0] = 0LL;
                v77[1] = 0LL;
                v78 = 0LL;
                v30 = *((unsigned __int8 *)this + 224);
                v31 = (v30 & 1) == 0;
                v32 = v30 >> 1;
                if ( v31 )
                {
                  v33 = (char *)this + 225;
                }
                else
                {
                  v32 = *((_QWORD *)this + 29);
                  v33 = (char *)*((_QWORD *)this + 30);
                }
                if ( v32 >= 0xF )
                  v34 = 15LL;
                else
                  v34 = v32;
                v35 = v29;
                LOBYTE(v77[0]) = 2 * v34;
                if ( v34 )
                  memcpy((char *)v77 + 1, v33, v34);
                *((_BYTE *)v77 + v34 + 1) = 0;
                if ( (v77[0] & 1) != 0 )
                  v37 = (const char *)v78;
                else
                  v37 = (char *)v77 + 1;
                v38 = strlen(v37);
                std::__put_character_sequence<char,std::char_traits<char>>(v35, (__int64)v37, v38);
                if ( (v77[0] & 1) != 0 )
                  operator delete(v78);
                goto LABEL_86;
              }
              operator delete(v80);
              if ( (v82 & 1) != 0 )
                goto LABEL_65;
            }
            else
            {
              v26 = 0;
              if ( (v82 & 1) != 0 )
                goto LABEL_65;
            }
LABEL_58:
            if ( (v26 & 1) == 0 )
              goto LABEL_87;
            goto LABEL_66;
          }
        }
        memcpy(v17, v14, v16);
        goto LABEL_55;
      }
LABEL_145:
      std::__basic_string_common<true>::__throw_length_error();
    }
    if ( (v8 & 1) != 0 )
      v18 = (const char *)*((_QWORD *)this + 30);
    else
      v18 = (char *)this + 225;
    pthread_setname_np(v10, v18);
    if ( (word_45058 & 1) != 0 )
      v19 = (const char *)qword_45068;
    else
      v19 = (char *)&word_45058 + 1;
    v73 = dword_45050;
    v75 = 0LL;
    v76 = 0LL;
    v74 = 0LL;
    v20 = strlen(v19);
    if ( v20 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_145;
    v21 = v20;
    if ( v20 >= 0x17 )
    {
      v23 = (v20 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v22 = (char *)operator new(v23);
      v75 = v21;
      v76 = v22;
      v74 = v23 | 1;
    }
    else
    {
      v22 = (char *)&v74 + 1;
      LOBYTE(v74) = 2 * v20;
      if ( !v20 )
      {
LABEL_48:
        v22[v21] = 0;
        if ( (g3::logLevel(&v73) & 1) != 0 )
        {
          v71[1] = 0LL;
          v71[0] = 0x6573616208LL;
          v72 = 0LL;
          v24 = g3::logTag(v71);
          if ( (v71[0] & 1) == 0 )
          {
            if ( (v74 & 1) == 0 )
              goto LABEL_51;
LABEL_61:
            operator delete(v76);
            if ( (v24 & 1) == 0 )
              goto LABEL_87;
LABEL_62:
            LogCapture::LogCapture((LogCapture *)&v91, "base", (const LEVELS *)&dword_45050, "", 6, 0LL);
            v27 = std::__put_character_sequence<char,std::char_traits<char>>(
                    (_QWORD *)&v91 + 1,
                    (__int64)"start thread: ",
                    14LL);
            if ( (*((_BYTE *)this + 224) & 1) != 0 )
              v28 = (const char *)*((_QWORD *)this + 30);
            else
              v28 = (char *)this + 225;
            v36 = strlen(v28);
            std::__put_character_sequence<char,std::char_traits<char>>(v27, (__int64)v28, v36);
LABEL_86:
            LogCapture::~LogCapture((LogCapture *)&v91);
            goto LABEL_87;
          }
          operator delete(v72);
          if ( (v74 & 1) != 0 )
            goto LABEL_61;
        }
        else
        {
          v24 = 0;
          if ( (v74 & 1) != 0 )
            goto LABEL_61;
        }
LABEL_51:
        if ( (v24 & 1) == 0 )
          goto LABEL_87;
        goto LABEL_62;
      }
    }
    memcpy(v22, v19, v21);
    goto LABEL_48;
  }
LABEL_87:
  v39 = atomic_load((unsigned __int8 *)this + 24);
  if ( (v39 & 1) == 0 )
  {
    while ( 1 )
    {
      v40 = atomic_load((unsigned __int8 *)this + 25);
      if ( (v40 & 1) == 0 )
        goto LABEL_120;
      if ( (word_45058 & 1) != 0 )
        v41 = (const char *)qword_45068;
      else
        v41 = (char *)&word_45058 + 1;
      v67 = dword_45050;
      v68 = 0LL;
      v69 = 0LL;
      v70 = 0LL;
      v42 = strlen(v41);
      if ( v42 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v43 = v42;
      if ( v42 >= 0x17 )
        break;
      v44 = (char *)&v68 + 1;
      LOBYTE(v68) = 2 * v42;
      if ( v42 )
        goto LABEL_100;
LABEL_101:
      v44[v43] = 0;
      if ( (g3::logLevel(&v67) & 1) != 0 )
      {
        v65[1] = 0LL;
        v65[0] = 0x6573616208LL;
        v66 = 0LL;
        v45 = g3::logTag(v65);
        if ( (v65[0] & 1) != 0 )
        {
          operator delete(v66);
          if ( (v68 & 1) != 0 )
            goto LABEL_107;
        }
        else if ( (v68 & 1) != 0 )
        {
          goto LABEL_107;
        }
      }
      else
      {
        v45 = 0;
        if ( (v68 & 1) != 0 )
        {
LABEL_107:
          operator delete(v70);
          if ( (v45 & 1) == 0 )
            goto LABEL_109;
LABEL_108:
          LogCapture::LogCapture((LogCapture *)&v91, "base", (const LEVELS *)&dword_45050, "", 6, 0LL);
          std::__put_character_sequence<char,std::char_traits<char>>(
            (_QWORD *)&v91 + 1,
            (__int64)"ThreadRunner wait wakeup condition",
            34LL);
          LogCapture::~LogCapture((LogCapture *)&v91);
          goto LABEL_109;
        }
      }
      if ( (v45 & 1) != 0 )
        goto LABEL_108;
LABEL_109:
      *(_QWORD *)&v91 = (char *)this + 28;
      BYTE8(v91) = 1;
      std::mutex::lock((pudutech::ThreadRunner *)((char *)this + 28));
      v46 = *((_QWORD *)this + 26);
      v47 = atomic_load((unsigned __int8 *)this + 24);
      if ( v46 )
      {
        if ( (v47 & 1) == 0 )
        {
          do
          {
            v48 = *((_QWORD *)this + 26);
            if ( !v48 )
              sub_13744();
            if ( ((*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v48 + 48LL))(v48) & 1) != 0 )
              break;
            std::condition_variable::wait((char *)this + 68, &v91);
            v49 = atomic_load((unsigned __int8 *)this + 24);
          }
          while ( (v49 & 1) == 0 );
        }
      }
      else if ( (v47 & 1) == 0 )
      {
        std::condition_variable::wait((char *)this + 68, &v91);
      }
      v50 = atomic_load((unsigned __int8 *)this + 24);
      if ( BYTE8(v91) )
        std::mutex::unlock((std::mutex *)v91);
      if ( (v50 & 1) != 0 )
        goto LABEL_122;
LABEL_120:
      v51 = *((_QWORD *)this + 20);
      if ( !v51 )
        sub_13744();
      (*(void (__fastcall **)(__int64))(*(_QWORD *)v51 + 48LL))(v51);
      v52 = atomic_load((unsigned __int8 *)this + 24);
      if ( (v52 & 1) != 0 )
        goto LABEL_122;
    }
    v44 = (char *)operator new((v42 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    v69 = v43;
    v70 = v44;
    v68 = (v43 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
LABEL_100:
    memcpy(v44, v41, v43);
    goto LABEL_101;
  }
LABEL_122:
  if ( (word_45058 & 1) != 0 )
    v53 = (const char *)qword_45068;
  else
    v53 = (char *)&word_45058 + 1;
  v61 = dword_45050;
  v63 = 0LL;
  v64 = 0LL;
  v62 = 0LL;
  v54 = strlen(v53);
  if ( v54 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v55 = v54;
  if ( v54 >= 0x17 )
  {
    v57 = (v54 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v56 = (char *)operator new(v57);
    v63 = v55;
    v64 = v56;
    v62 = v57 | 1;
    goto LABEL_130;
  }
  v56 = (char *)&v62 + 1;
  LOBYTE(v62) = 2 * v54;
  if ( v54 )
LABEL_130:
    memcpy(v56, v53, v55);
  v56[v55] = 0;
  if ( (g3::logLevel(&v61) & 1) != 0 )
  {
    v59[1] = 0LL;
    v60 = 0LL;
    v59[0] = 0x6573616208LL;
    v58 = g3::logTag(v59);
    if ( (v59[0] & 1) == 0 )
    {
      if ( (v62 & 1) == 0 )
        goto LABEL_134;
LABEL_137:
      operator delete(v64);
      if ( (v58 & 1) == 0 )
        return;
      goto LABEL_138;
    }
    operator delete(v60);
    if ( (v62 & 1) != 0 )
      goto LABEL_137;
  }
  else
  {
    v58 = 0;
    if ( (v62 & 1) != 0 )
      goto LABEL_137;
  }
LABEL_134:
  if ( (v58 & 1) == 0 )
    return;
LABEL_138:
  LogCapture::LogCapture((LogCapture *)&v91, "base", (const LEVELS *)&dword_45050, "", 6, 0LL);
  std::__put_character_sequence<char,std::char_traits<char>>(
    (_QWORD *)&v91 + 1,
    (__int64)"ThreadRunner::threadRun exit",
    28LL);
  LogCapture::~LogCapture((LogCapture *)&v91);
}
// 12920: conditional instruction was optimized away because x22.8<10u
// 1292C: conditional instruction was optimized away because x22.8<10u
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 11060: using guessed type __int64 __fastcall std::condition_variable::wait(_QWORD, _QWORD);
// 45050: using guessed type int dword_45050;
// 45058: using guessed type __int16 word_45058;
// 45068: using guessed type __int64 qword_45068;

//----- (0000000000012F74) ----------------------------------------------------
void __fastcall sub_12F74(std::thread **a1)
{
  std::thread *v1; // x19

  v1 = *a1;
  *a1 = 0LL;
  if ( v1 )
  {
    std::thread::~thread(v1);
    operator delete(v1);
  }
}

//----- (0000000000012FB0) ----------------------------------------------------
void __fastcall pudutech::ThreadRunner::start(pudutech::ThreadRunner *this)
{
  std::__shared_weak_count *v2; // x0
  __int64 v3; // x21
  __int64 v4; // x0
  pthread_t *v5; // x21
  std::thread *v6; // x19
  std::__shared_weak_count *v7; // x19
  unsigned __int64 *v8; // x8
  unsigned __int64 v9; // x9
  __int128 v10; // [xsp+0h] [xbp-50h] BYREF
  __int64 v11; // [xsp+10h] [xbp-40h]
  unsigned __int64 *v12; // [xsp+18h] [xbp-38h]
  __int64 v13; // [xsp+28h] [xbp-28h]

  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  atomic_store(0, (unsigned __int8 *)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if ( !v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0) )
    sub_13AE8();
  v11 = v3;
  v12 = (unsigned __int64 *)v4;
  v10 = (unsigned __int64)pudutech::ThreadRunner::threadRun;
  v5 = (pthread_t *)operator new(8uLL);
  sub_13B1C(v5, &v10);
  v6 = (std::thread *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v5;
  if ( v6 )
  {
    std::thread::~thread(v6);
    operator delete(v6);
  }
  v7 = (std::__shared_weak_count *)v12;
  if ( v12 )
  {
    v8 = v12 + 1;
    do
      v9 = __ldaxr(v8);
    while ( __stlxr(v9 - 1, v8) );
    if ( !v9 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v7 + 16LL))(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

//----- (00000000000130F4) ----------------------------------------------------
void __fastcall pudutech::ThreadRunner::exit(pudutech::ThreadRunner *this, char a2)
{
  std::mutex *v2; // x21
  std::thread *v5; // x0
  std::thread *v6; // x20

  v2 = (pudutech::ThreadRunner *)((char *)this + 28);
  std::mutex::lock((pudutech::ThreadRunner *)((char *)this + 28));
  atomic_store(1u, (unsigned __int8 *)this + 24);
  std::mutex::unlock(v2);
  if ( *((_QWORD *)this + 26) )
    std::condition_variable::notify_one((pudutech::ThreadRunner *)((char *)this + 68));
  if ( (a2 & 1) != 0 )
  {
    v5 = (std::thread *)*((_QWORD *)this + 2);
    if ( v5 )
    {
      std::thread::join(v5);
      v6 = (std::thread *)*((_QWORD *)this + 2);
      *((_QWORD *)this + 2) = 0LL;
      if ( v6 )
      {
        std::thread::~thread(v6);
        operator delete(v6);
      }
    }
  }
}

//----- (0000000000013184) ----------------------------------------------------
__int64 __fastcall pudutech::ThreadRunner::wakeup(__int64 this)
{
  if ( *(_QWORD *)(this + 208) )
    return std::condition_variable::notify_one((std::condition_variable *)(this + 68));
  return this;
}

//----- (0000000000013198) ----------------------------------------------------
void __fastcall pudutech::ThreadRunner::~ThreadRunner(pudutech::ThreadRunner *this)
{
  std::mutex *v2; // x20
  std::thread *v3; // x0
  const char *v4; // x22
  size_t v5; // x0
  size_t v6; // x21
  char *v7; // x23
  unsigned __int64 v8; // x24
  char v9; // w21
  pudutech::ThreadRunner *v10; // x0
  void (*v11)(void); // x8
  pudutech::ThreadRunner *v12; // x0
  void (*v13)(void); // x8
  std::thread *v14; // x20
  std::__shared_weak_count *v15; // x0
  __int64 v16[2]; // [xsp+8h] [xbp-1C8h] BYREF
  void *v17; // [xsp+18h] [xbp-1B8h]
  int v18; // [xsp+20h] [xbp-1B0h] BYREF
  unsigned __int64 v19; // [xsp+28h] [xbp-1A8h] BYREF
  size_t v20; // [xsp+30h] [xbp-1A0h]
  void *v21; // [xsp+38h] [xbp-198h]
  char v22[8]; // [xsp+40h] [xbp-190h] BYREF
  _QWORD v23[41]; // [xsp+48h] [xbp-188h] BYREF

  v2 = (pudutech::ThreadRunner *)((char *)this + 28);
  v23[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  std::mutex::lock((pudutech::ThreadRunner *)((char *)this + 28));
  atomic_store(1u, (unsigned __int8 *)this + 24);
  std::mutex::unlock(v2);
  if ( *((_QWORD *)this + 26) )
    std::condition_variable::notify_one((pudutech::ThreadRunner *)((char *)this + 68));
  v3 = (std::thread *)*((_QWORD *)this + 2);
  if ( v3 )
    std::thread::detach(v3);
  if ( (word_45038 & 1) != 0 )
    v4 = (const char *)qword_45048;
  else
    v4 = (char *)&word_45038 + 1;
  v18 = dword_45030;
  v20 = 0LL;
  v21 = 0LL;
  v19 = 0LL;
  v5 = strlen(v4);
  if ( v5 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v6 = v5;
  if ( v5 >= 0x17 )
  {
    v8 = (v5 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v7 = (char *)operator new(v8);
    v20 = v6;
    v21 = v7;
    v19 = v8 | 1;
    goto LABEL_13;
  }
  v7 = (char *)&v19 + 1;
  LOBYTE(v19) = 2 * v5;
  if ( v5 )
LABEL_13:
    memcpy(v7, v4, v6);
  v7[v6] = 0;
  if ( (g3::logLevel(&v18) & 1) == 0 )
  {
    v9 = 0;
    if ( (v19 & 1) != 0 )
      goto LABEL_38;
LABEL_17:
    if ( (v9 & 1) == 0 )
      goto LABEL_18;
    goto LABEL_39;
  }
  v16[1] = 0LL;
  v17 = 0LL;
  v16[0] = 0x6573616208LL;
  v9 = g3::logTag(v16);
  if ( (v16[0] & 1) != 0 )
  {
    operator delete(v17);
    if ( (v19 & 1) != 0 )
      goto LABEL_38;
    goto LABEL_17;
  }
  if ( (v19 & 1) == 0 )
    goto LABEL_17;
LABEL_38:
  operator delete(v21);
  if ( (v9 & 1) == 0 )
  {
LABEL_18:
    if ( (*((_BYTE *)this + 224) & 1) == 0 )
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_39:
  LogCapture::LogCapture((LogCapture *)v22, "base", (const LEVELS *)&dword_45030, "", 6, 0LL);
  std::__put_character_sequence<char,std::char_traits<char>>(v23, (__int64)"ThreadRunner destruct", 21LL);
  LogCapture::~LogCapture((LogCapture *)v22);
  if ( (*((_BYTE *)this + 224) & 1) != 0 )
LABEL_19:
    operator delete(*((void **)this + 30));
LABEL_20:
  v10 = (pudutech::ThreadRunner *)*((_QWORD *)this + 26);
  if ( (pudutech::ThreadRunner *)((char *)this + 176) == v10 )
  {
    v11 = *(void (**)(void))(*(_QWORD *)v10 + 32LL);
  }
  else
  {
    if ( !v10 )
      goto LABEL_27;
    v11 = *(void (**)(void))(*(_QWORD *)v10 + 40LL);
  }
  v11();
LABEL_27:
  v12 = (pudutech::ThreadRunner *)*((_QWORD *)this + 20);
  if ( (pudutech::ThreadRunner *)((char *)this + 128) == v12 )
  {
    v13 = *(void (**)(void))(*(_QWORD *)v12 + 32LL);
  }
  else
  {
    if ( !v12 )
      goto LABEL_32;
    v13 = *(void (**)(void))(*(_QWORD *)v12 + 40LL);
  }
  v13();
LABEL_32:
  std::condition_variable::~condition_variable((pudutech::ThreadRunner *)((char *)this + 68));
  std::mutex::~mutex(v2);
  v14 = (std::thread *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0LL;
  if ( v14 )
  {
    std::thread::~thread(v14);
    operator delete(v14);
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if ( v15 )
    std::__shared_weak_count::__release_weak(v15);
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 45030: using guessed type int dword_45030;
// 45038: using guessed type __int16 word_45038;
// 45048: using guessed type __int64 qword_45048;
// 13198: using guessed type char var_190[8];

//----- (00000000000134CC) ----------------------------------------------------
__int64 __fastcall std::function<bool ()(void)>::~function(__int64 a1)
{
  __int64 result; // x0

  result = *(_QWORD *)(a1 + 32);
  if ( a1 == result )
    return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)result + 32LL))(result);
  if ( result )
    return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)result + 40LL))(result);
  return result;
}

//----- (00000000000134FC) ----------------------------------------------------
__int64 __fastcall std::function<void ()(void)>::~function(__int64 a1)
{
  __int64 result; // x0

  result = *(_QWORD *)(a1 + 32);
  if ( a1 == result )
    return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)result + 32LL))(result);
  if ( result )
    return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)result + 40LL))(result);
  return result;
}

//----- (000000000001352C) ----------------------------------------------------
std::__shared_weak_count *__fastcall sub_1352C(__int64 a1)
{
  std::__shared_weak_count *result; // x0

  result = *(std::__shared_weak_count **)(a1 + 8);
  if ( result )
    return (std::__shared_weak_count *)std::__shared_weak_count::__release_weak(result);
  return result;
}

//----- (000000000001353C) ----------------------------------------------------
void __fastcall __noreturn sub_1353C(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

//----- (0000000000013548) ----------------------------------------------------
__int64 __fastcall pudutech::ThreadRunner::isExit(pudutech::ThreadRunner *this)
{
  unsigned __int8 v1; // w8

  v1 = atomic_load((unsigned __int8 *)this + 24);
  return v1 & 1;
}

//----- (0000000000013558) ----------------------------------------------------
__int64 __fastcall pudutech::ThreadRunner::getMutex(pudutech::ThreadRunner *this)
{
  return (__int64)this + 28;
}

//----- (0000000000013560) ----------------------------------------------------
void __noreturn std::__basic_string_common<true>::__throw_length_error()
{
  sub_13574("basic_string");
}

//----- (0000000000013574) ----------------------------------------------------
void __fastcall __noreturn sub_13574(const char *a1)
{
  std::logic_error *exception; // x19

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_135C4(exception, a1);
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::length_error,
    (void (__fastcall *)(void *))&std::length_error::~length_error);
}

//----- (00000000000135C4) ----------------------------------------------------
__int64 __fastcall sub_135C4(std::logic_error *a1, const char *a2)
{
  __int64 result; // x0

  result = std::logic_error::logic_error(a1, a2);
  *(_QWORD *)a1 = (char *)&`vtable for'std::length_error + 16;
  return result;
}

//----- (00000000000135F4) ----------------------------------------------------
__int64 *__fastcall std::string::assign(__int64 *a1, void *src, size_t n)
{
  unsigned __int64 v6; // x25
  _BYTE *v7; // x22
  void *v8; // x22
  unsigned __int64 v9; // x8
  __int64 v10; // x23
  void *v11; // x24

  if ( (*(_BYTE *)a1 & 1) != 0 )
  {
    v6 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
    if ( v6 >= n )
    {
LABEL_3:
      if ( (*(_BYTE *)a1 & 1) != 0 )
      {
        v7 = (_BYTE *)a1[2];
        if ( !n )
          goto LABEL_12;
      }
      else
      {
        v7 = (char *)a1 + 1;
        if ( !n )
        {
LABEL_12:
          v7[n] = 0;
          if ( (*(_BYTE *)a1 & 1) != 0 )
            a1[1] = n;
          else
            *(_BYTE *)a1 = 2 * n;
          return a1;
        }
      }
      memmove(v7, src, n);
      goto LABEL_12;
    }
  }
  else
  {
    v6 = 22LL;
    if ( n <= 0x16 )
      goto LABEL_3;
  }
  if ( -18LL - v6 < n - v6 )
    std::__basic_string_common<true>::__throw_length_error();
  if ( (*(_BYTE *)a1 & 1) != 0 )
    v8 = (void *)a1[2];
  else
    v8 = (char *)a1 + 1;
  if ( v6 > 0x7FFFFFFFFFFFFFE6LL )
  {
    v10 = -17LL;
  }
  else
  {
    v9 = 2 * v6;
    if ( 2 * v6 <= n )
      v9 = n;
    if ( v9 >= 0x17 )
      v10 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    else
      v10 = 23LL;
  }
  v11 = (void *)operator new(v10);
  memcpy(v11, src, n);
  if ( v6 != 22 )
    operator delete(v8);
  a1[1] = n;
  a1[2] = (__int64)v11;
  *a1 = v10 | 1;
  *((_BYTE *)v11 + n) = 0;
  return a1;
}

//----- (0000000000013744) ----------------------------------------------------
void __noreturn sub_13744()
{
  _QWORD *exception; // x0

  exception = __cxa_allocate_exception(8uLL);
  *exception = off_43D98;
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::bad_function_call,
    (void (__fastcall *)(void *))&std::exception::~exception);
}
// 43D70: using guessed type void *`typeinfo for'std::bad_function_call;
// 43D98: using guessed type void (__fastcall *[2])(std::exception *__hidden this);

//----- (0000000000013778) ----------------------------------------------------
void __fastcall std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  operator delete(this);
}

//----- (000000000001379C) ----------------------------------------------------
void __fastcall std::__shared_ptr_pointer<pudutech::ThreadRunner  *>::~__shared_ptr_pointer(
        std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(a1);
}

//----- (00000000000137C0) ----------------------------------------------------
void __fastcall std::__shared_ptr_pointer<pudutech::ThreadRunner  *>::__on_zero_shared(__int64 a1)
{
  void *v1; // x19

  v1 = *(void **)(a1 + 24);
  if ( v1 )
  {
    pudutech::ThreadRunner::~ThreadRunner(*(pudutech::ThreadRunner **)(a1 + 24));
    operator delete(v1);
  }
}

//----- (00000000000137F8) ----------------------------------------------------
__int64 __fastcall std::__shared_ptr_pointer<pudutech::ThreadRunner  *>::__get_deleter(__int64 a1, __int64 a2)
{
  if ( *(char **)(a2 + 8) == "NSt6__ndk114default_deleteIN8pudutech12ThreadRunnerEEE" )
    return a1 + 24;
  else
    return 0LL;
}

//----- (0000000000013818) ----------------------------------------------------
_QWORD *__fastcall sub_13818(_QWORD *result, __int64 a2)
{
  _QWORD *v2; // x20
  __int64 v4; // x8
  __int64 v5[6]; // [xsp+0h] [xbp-50h] BYREF

  v5[5] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (_QWORD *)a2 != result )
  {
    v2 = result;
    result = (_QWORD *)result[4];
    if ( result == v2 )
    {
      if ( *(_QWORD *)(a2 + 32) == a2 )
      {
        (*(void (__fastcall **)(_QWORD *, __int64 *))(*result + 24LL))(result, v5);
        (*(void (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = 0LL;
        (*(void (__fastcall **)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 32) + 24LL))(*(_QWORD *)(a2 + 32), v2);
        (*(void (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = 0LL;
        v2[4] = v2;
        (*(void (__fastcall **)(__int64 *, __int64))(v5[0] + 24))(v5, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(__int64 *))(v5[0] + 32))(v5);
      }
      else
      {
        (*(void (__fastcall **)(_QWORD *, __int64))(*result + 24LL))(result, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = a2;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 32);
      if ( a2 == v4 )
      {
        (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 24LL))(*(_QWORD *)(a2 + 32), v2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = v2[4];
        v2[4] = v2;
      }
      else
      {
        v2[4] = v4;
        *(_QWORD *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

//----- (0000000000013980) ----------------------------------------------------
_QWORD *__fastcall sub_13980(_QWORD *result, __int64 a2)
{
  _QWORD *v2; // x20
  __int64 v4; // x8
  __int64 v5[6]; // [xsp+0h] [xbp-50h] BYREF

  v5[5] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (_QWORD *)a2 != result )
  {
    v2 = result;
    result = (_QWORD *)result[4];
    if ( result == v2 )
    {
      if ( *(_QWORD *)(a2 + 32) == a2 )
      {
        (*(void (__fastcall **)(_QWORD *, __int64 *))(*result + 24LL))(result, v5);
        (*(void (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = 0LL;
        (*(void (__fastcall **)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 32) + 24LL))(*(_QWORD *)(a2 + 32), v2);
        (*(void (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = 0LL;
        v2[4] = v2;
        (*(void (__fastcall **)(__int64 *, __int64))(v5[0] + 24))(v5, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(__int64 *))(v5[0] + 32))(v5);
      }
      else
      {
        (*(void (__fastcall **)(_QWORD *, __int64))(*result + 24LL))(result, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = a2;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 32);
      if ( a2 == v4 )
      {
        (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 24LL))(*(_QWORD *)(a2 + 32), v2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = v2[4];
        v2[4] = v2;
      }
      else
      {
        v2[4] = v4;
        *(_QWORD *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

//----- (0000000000013AE8) ----------------------------------------------------
void __noreturn sub_13AE8()
{
  _QWORD *exception; // x0

  exception = __cxa_allocate_exception(8uLL);
  *exception = (char *)&`vtable for'std::bad_weak_ptr + 16;
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::bad_weak_ptr,
    (void (__fastcall *)(void *))&std::bad_weak_ptr::~bad_weak_ptr);
}

//----- (0000000000013B1C) ----------------------------------------------------
std::__ndk1 *__fastcall sub_13B1C(pthread_t *a1, __int128 *a2)
{
  std::__thread_struct *v4; // x22
  char *v5; // x0
  __int128 v6; // q0
  __int64 v7; // x8
  __int64 v8; // x9
  std::__thread_struct **v9; // x19
  std::__ndk1 *result; // x0
  const char *v11; // x2
  struct _Unwind_Exception *v12; // x0
  std::__shared_weak_count *v13; // x21
  struct _Unwind_Exception *v14; // x20
  unsigned __int64 *v15; // x8
  unsigned __int64 v16; // x9
  std::__thread_struct *v17; // x21

  v4 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v4);
  v5 = (char *)operator new(0x28uLL);
  v6 = *a2;
  v7 = *((_QWORD *)a2 + 2);
  v8 = *((_QWORD *)a2 + 3);
  v9 = (std::__thread_struct **)v5;
  *((_QWORD *)a2 + 2) = 0LL;
  *((_QWORD *)a2 + 3) = 0LL;
  *(_QWORD *)v5 = v4;
  *(_OWORD *)(v5 + 8) = v6;
  *((_QWORD *)v5 + 3) = v7;
  *((_QWORD *)v5 + 4) = v8;
  result = (std::__ndk1 *)pthread_create(
                            a1,
                            0LL,
                            (void *(*)(void *))std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (pudutech::ThreadRunner::*)(void),std::shared_ptr<pudutech::ThreadRunner>>>>,
                            v5);
  if ( (_DWORD)result )
  {
    v12 = (struct _Unwind_Exception *)std::__throw_system_error(result, (int)"thread constructor failed", v11);
    v13 = v9[4];
    v14 = v12;
    if ( v13 )
    {
      v15 = (unsigned __int64 *)((char *)v13 + 8);
      do
        v16 = __ldaxr(v15);
      while ( __stlxr(v16 - 1, v15) );
      if ( !v16 )
      {
        (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v13 + 16LL))(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v17 = *v9;
    *v9 = 0LL;
    if ( v17 )
    {
      std::__thread_struct::~__thread_struct(v17);
      operator delete(v17);
    }
    operator delete(v9);
    _Unwind_Resume(v14);
  }
  return result;
}
// 13B9C: variable 'v11' is possibly undefined

//----- (0000000000013C24) ----------------------------------------------------
__int64 __fastcall std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (pudutech::ThreadRunner::*)(void),std::shared_ptr<pudutech::ThreadRunner>>>>(
        std::__ndk1 *a1)
{
  pthread_key_t *v2; // x0
  std::__thread_struct *v3; // x1
  __int64 v4; // x10
  void (__fastcall *v5)(_QWORD); // x8
  _QWORD *v6; // x0
  std::__shared_weak_count *v7; // x20
  unsigned __int64 *v8; // x8
  unsigned __int64 v9; // x9
  std::__thread_struct *v10; // x20

  v2 = (pthread_key_t *)std::__thread_local_data(a1);
  v3 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0LL;
  pthread_setspecific(*v2, v3);
  v4 = *((_QWORD *)a1 + 2);
  v5 = (void (__fastcall *)(_QWORD))*((_QWORD *)a1 + 1);
  v6 = (_QWORD *)(*((_QWORD *)a1 + 3) + (v4 >> 1));
  if ( (v4 & 1) != 0 )
    v5 = *(void (__fastcall **)(_QWORD))((char *)v5 + *v6);
  v5(v6);
  v7 = (std::__shared_weak_count *)*((_QWORD *)a1 + 4);
  if ( v7 )
  {
    v8 = (unsigned __int64 *)((char *)v7 + 8);
    do
      v9 = __ldaxr(v8);
    while ( __stlxr(v9 - 1, v8) );
    if ( !v9 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v7 + 16LL))(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0LL;
  if ( v10 )
  {
    std::__thread_struct::~__thread_struct(v10);
    operator delete(v10);
  }
  operator delete(a1);
  return 0LL;
}

//----- (0000000000013D4C) ----------------------------------------------------
_QWORD *__fastcall std::__put_character_sequence<char,std::char_traits<char>>(_QWORD *a1, __int64 a2, __int64 a3)
{
  _QWORD *v4; // x8
  char *v5; // x9
  _QWORD *v6; // x0
  __int64 v9; // x22
  int v10; // w5
  __int64 v11; // x23
  int v12; // w26
  __int64 v13; // x0
  unsigned __int8 v14; // w24
  __int64 v15; // x2
  char v17[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v18; // [xsp+8h] [xbp-58h]
  _QWORD v19[2]; // [xsp+10h] [xbp-50h] BYREF

  v19[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v17[0] = 0;
  v18 = a1;
  v4 = (_QWORD *)(*a1 - 24LL);
  v5 = (char *)a1 + *v4;
  if ( !*((_DWORD *)v5 + 8) )
  {
    v6 = (_QWORD *)*((_QWORD *)v5 + 17);
    if ( v6 )
    {
      std::ostream::flush(v6);
      v4 = (_QWORD *)(*a1 - 24LL);
    }
    v17[0] = 1;
    v9 = (__int64)a1 + *v4;
    v10 = *(_DWORD *)(v9 + 144);
    v11 = *(_QWORD *)(v9 + 40);
    v12 = *(_DWORD *)(v9 + 8);
    if ( v10 == -1 )
    {
      std::ios_base::getloc(v19, (std::ios_base *)v9);
      v13 = std::locale::use_facet(v19, &std::ctype<char>::id);
      v14 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v13 + 56LL))(v13, 32LL);
      std::locale::~locale((std::locale *)v19);
      v10 = v14;
      *(_DWORD *)(v9 + 144) = v14;
    }
    if ( (v12 & 0xB0) == 32 )
      v15 = a2 + a3;
    else
      v15 = a2;
    if ( !sub_13EF0(v11, a2, v15, a2 + a3, v9, v10) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v17);
  return a1;
}
// 110C0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 13D4C: using guessed type char var_60[8];

//----- (0000000000013EF0) ----------------------------------------------------
__int64 __fastcall sub_13EF0(__int64 a1, __int64 a2, __int64 a3, __int64 a4, __int64 a5, int c)
{
  __int64 v6; // x19
  __int64 v7; // x8
  __int64 v8; // x25
  bool v10; // cc
  signed __int64 v11; // x8
  signed __int64 v15; // x23
  char *v16; // x25
  void *v17; // x1
  __int64 v18; // x24
  __int64 v19; // x22
  unsigned __int64 v21; // [xsp+0h] [xbp-70h] BYREF
  __int64 v22; // [xsp+8h] [xbp-68h]
  void *v23; // [xsp+10h] [xbp-60h]
  __int64 v24; // [xsp+18h] [xbp-58h]

  v6 = a1;
  v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( a1 )
  {
    v7 = *(_QWORD *)(a5 + 24);
    v8 = a3 - a2;
    v10 = v7 <= a4 - a2;
    v11 = v7 - (a4 - a2);
    if ( v10 )
      v15 = 0LL;
    else
      v15 = v11;
    if ( v8 >= 1 && (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)a1 + 96LL))(a1) != v8 )
      return 0LL;
    if ( v15 >= 1 )
    {
      v21 = 0LL;
      v22 = 0LL;
      v23 = 0LL;
      if ( (unsigned __int64)v15 >= 0x17 )
      {
        v16 = (char *)operator new((v15 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        v22 = v15;
        v23 = v16;
        v21 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
      }
      else
      {
        v16 = (char *)&v21 + 1;
        LOBYTE(v21) = 2 * v15;
      }
      memset(v16, c, v15);
      v16[v15] = 0;
      v17 = (v21 & 1) != 0 ? v23 : (char *)&v21 + 1;
      v18 = (*(__int64 (__fastcall **)(__int64, void *, signed __int64))(*(_QWORD *)v6 + 96LL))(v6, v17, v15);
      if ( (v21 & 1) != 0 )
        operator delete(v23);
      if ( v18 != v15 )
        return 0LL;
    }
    v19 = a4 - a3;
    if ( v19 < 1 || (*(__int64 (__fastcall **)(__int64, __int64, __int64))(*(_QWORD *)v6 + 96LL))(v6, a3, v19) == v19 )
      *(_QWORD *)(a5 + 24) = 0LL;
    else
      return 0LL;
  }
  return v6;
}

//----- (00000000000140A4) ----------------------------------------------------
__int64 __fastcall std::ostream::sentry::~sentry(__int64 result)
{
  __int64 v1; // x8
  __int64 v2; // x19
  __int64 v3; // x0
  std::ios_base *v4; // x0

  v1 = *(_QWORD *)(result + 8) + *(_QWORD *)(**(_QWORD **)(result + 8) - 24LL);
  if ( *(_QWORD *)(v1 + 40) )
  {
    if ( !*(_DWORD *)(v1 + 32) && (*(_BYTE *)(v1 + 9) & 0x20) != 0 )
    {
      v2 = result;
      result = std::uncaught_exception();
      if ( (result & 1) == 0 )
      {
        v3 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + *(_QWORD *)(**(_QWORD **)(v2 + 8) - 24LL) + 40LL);
        result = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v3 + 48LL))(v3);
        if ( (_DWORD)result == -1 )
        {
          v4 = (std::ios_base *)(*(_QWORD *)(v2 + 8) + *(_QWORD *)(**(_QWORD **)(v2 + 8) - 24LL));
          return std::ios_base::clear(v4, *((_DWORD *)v4 + 8) | 1u);
        }
      }
    }
  }
  return result;
}

//----- (0000000000014144) ----------------------------------------------------
_QWORD *__fastcall std::ostream::flush(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  char v6[8]; // [xsp+8h] [xbp-38h] BYREF
  _QWORD *v7; // [xsp+10h] [xbp-30h]
  __int64 v8; // [xsp+18h] [xbp-28h]

  v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = (_QWORD *)(*a1 - 24LL);
  if ( *(_QWORD *)((char *)a1 + *v2 + 40) )
  {
    v6[0] = 0;
    v7 = a1;
    v3 = (char *)a1 + *v2;
    if ( !*((_DWORD *)v3 + 8) )
    {
      v4 = (_QWORD *)*((_QWORD *)v3 + 17);
      if ( v4 )
      {
        std::ostream::flush(v4);
        v2 = (_QWORD *)(*a1 - 24LL);
      }
      v6[0] = 1;
      if ( (*(unsigned int (__fastcall **)(_QWORD))(**(_QWORD **)((char *)a1 + *v2 + 40) + 48LL))(*(_QWORD *)((char *)a1 + *v2 + 40)) == -1 )
        std::ios_base::clear(
          (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
          *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 1);
    }
    std::ostream::sentry::~sentry((__int64)v6);
  }
  return a1;
}
// 14144: using guessed type char var_38[8];

//----- (0000000000014264) ----------------------------------------------------
char *__usercall pudutech::ThreadTaskQueue::create@<X0>(__int64 *a1@<X0>, pudutech::ThreadTaskQueue **a2@<X8>)
{
  __int64 v4; // x0
  pudutech::ThreadTaskQueue *v5; // x8
  __int64 *v6; // x0
  unsigned __int64 v7; // x8
  void *v8; // x1
  size_t v9; // x2

  v4 = operator new(0x68uLL);
  *(_QWORD *)(v4 + 96) = 0LL;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  std::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(a2, (_QWORD *)v4);
  v5 = *a2;
  v6 = (__int64 *)((char *)*a2 + 80);
  if ( v6 != a1 )
  {
    v7 = *(unsigned __int8 *)a1;
    if ( (v7 & 1) != 0 )
      v8 = (void *)a1[2];
    else
      v8 = (char *)a1 + 1;
    if ( (v7 & 1) != 0 )
      v9 = a1[1];
    else
      v9 = v7 >> 1;
    std::string::assign(v6, v8, v9);
    v5 = *a2;
  }
  return pudutech::ThreadTaskQueue::init(v5);
}

//----- (000000000001432C) ----------------------------------------------------
std::__shared_weak_count *__fastcall std::shared_ptr<pudutech::ThreadTaskQueue>::shared_ptr<pudutech::ThreadTaskQueue>(
        _QWORD *a1,
        _QWORD *a2)
{
  std::__shared_weak_count *result; // x0
  std::__shared_weak_count *v5; // x19
  unsigned __int64 *v6; // x8
  unsigned __int64 v7; // x9
  unsigned __int64 *v8; // x8
  unsigned __int64 v9; // x9
  unsigned __int64 *v10; // x8
  unsigned __int64 v11; // x9

  *a1 = a2;
  result = (std::__shared_weak_count *)operator new(0x20uLL);
  v5 = result;
  *((_QWORD *)result + 2) = 0LL;
  *((_QWORD *)result + 3) = a2;
  *(_QWORD *)result = &off_43E10;
  *((_QWORD *)result + 1) = 0LL;
  a1[1] = result;
  if ( a2 )
  {
    result = (std::__shared_weak_count *)a2[1];
    if ( !result || *((_QWORD *)result + 1) == -1LL )
    {
      v6 = (unsigned __int64 *)((char *)v5 + 8);
      do
        v7 = __ldxr(v6);
      while ( __stxr(v7 + 1, v6) );
      v8 = (unsigned __int64 *)((char *)v5 + 16);
      do
        v9 = __ldxr(v8);
      while ( __stxr(v9 + 1, v8) );
      *a2 = a2;
      a2[1] = v5;
      if ( result )
        result = (std::__shared_weak_count *)std::__shared_weak_count::__release_weak(result);
      v10 = (unsigned __int64 *)((char *)v5 + 8);
      do
        v11 = __ldaxr(v10);
      while ( __stlxr(v11 - 1, v10) );
      if ( !v11 )
      {
        (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v5 + 16LL))(v5);
        return (std::__shared_weak_count *)std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return result;
}
// 43E10: using guessed type void (__fastcall *)(std::__shared_weak_count *__hidden this);

//----- (0000000000014424) ----------------------------------------------------
char *__fastcall pudutech::ThreadTaskQueue::init(pudutech::ThreadTaskQueue *this)
{
  std::__shared_weak_count *v2; // x0
  __int64 v3; // x22
  __int64 v4; // x0
  __int64 v5; // x20
  char *v6; // x0
  std::__shared_weak_count *v7; // x0
  __int64 v8; // x22
  __int64 v9; // x0
  __int64 v10; // x20
  char *v11; // x0
  __int64 v12; // x8
  __int64 v13; // x9
  std::__shared_weak_count *v14; // x20
  unsigned __int64 *v15; // x8
  unsigned __int64 v16; // x9
  std::__shared_weak_count *v17; // x19
  unsigned __int64 *v18; // x8
  unsigned __int64 v19; // x9
  char *result; // x0
  __int64 v21; // [xsp+0h] [xbp-A0h] BYREF
  unsigned __int64 *v22; // [xsp+8h] [xbp-98h]
  char v23[32]; // [xsp+10h] [xbp-90h] BYREF
  char *v24; // [xsp+30h] [xbp-70h]
  char v25[32]; // [xsp+40h] [xbp-60h] BYREF
  char *v26; // [xsp+60h] [xbp-40h]
  __int64 v27; // [xsp+78h] [xbp-28h]

  v27 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if ( !v2 || (v3 = *(_QWORD *)this, (v4 = std::__shared_weak_count::lock(v2)) == 0) )
    sub_13AE8();
  v5 = v4;
  v6 = (char *)operator new(0x28uLL);
  *((_QWORD *)v6 + 3) = v3;
  *((_QWORD *)v6 + 4) = v5;
  *(_QWORD *)v6 = &off_43E60;
  *(_OWORD *)(v6 + 8) = (unsigned __int64)pudutech::ThreadTaskQueue::loop;
  v26 = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  if ( !v7 || (v8 = *(_QWORD *)this, (v9 = std::__shared_weak_count::lock(v7)) == 0) )
    sub_13AE8();
  v10 = v9;
  v11 = (char *)operator new(0x28uLL);
  *((_QWORD *)v11 + 3) = v8;
  *((_QWORD *)v11 + 4) = v10;
  *(_QWORD *)v11 = &off_43F20;
  *(_OWORD *)(v11 + 8) = (unsigned __int64)pudutech::ThreadTaskQueue::wakeupCondition;
  v24 = v11;
  pudutech::ThreadRunner::create((unsigned __int8 *)this + 80, &v21, (__int64)v25, 1, 1, (__int64)v23);
  v12 = v21;
  v13 = (__int64)v22;
  v21 = 0LL;
  v22 = 0LL;
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 8) = v12;
  *((_QWORD *)this + 9) = v13;
  if ( v14 )
  {
    v15 = (unsigned __int64 *)((char *)v14 + 8);
    do
      v16 = __ldaxr(v15);
    while ( __stlxr(v16 - 1, v15) );
    if ( !v16 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v14 + 16LL))(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (std::__shared_weak_count *)v22;
  if ( v22 )
  {
    v18 = v22 + 1;
    do
      v19 = __ldaxr(v18);
    while ( __stlxr(v19 - 1, v18) );
    if ( !v19 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v17 + 16LL))(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if ( v23 == v24 )
  {
    (*(void (__fastcall **)(char *))(*(_QWORD *)v24 + 32LL))(v24);
  }
  else if ( v24 )
  {
    (*(void (__fastcall **)(char *))(*(_QWORD *)v24 + 40LL))(v24);
  }
  result = v26;
  if ( v25 == v26 )
    return (char *)(*(__int64 (__fastcall **)(char *))(*(_QWORD *)v26 + 32LL))(v26);
  if ( v26 )
    return (char *)(*(__int64 (__fastcall **)(char *))(*(_QWORD *)v26 + 40LL))(v26);
  return result;
}
// 43E60: using guessed type __int64 (__fastcall *off_43E60)();
// 43F20: using guessed type __int64 (__fastcall *off_43F20)();

//----- (00000000000146F4) ----------------------------------------------------
_BYTE *__fastcall pudutech::ThreadTaskQueue::loop(pudutech::ThreadTaskQueue *this)
{
  std::mutex *Mutex; // x20
  unsigned __int64 v3; // x9
  __int64 v4; // x0
  __int64 v5; // x22
  unsigned __int64 v6; // x23
  bool v7; // zf
  __int64 v8; // x8
  _QWORD *v9; // x8
  __int64 v10; // x9
  __int64 v11; // t1
  unsigned __int64 v12; // x8
  __int64 v13; // x0
  void (*v14)(void); // x8
  int64x2_t v15; // q0
  __int64 v16; // x9
  _BYTE *result; // x0
  __int64 (*v18)(void); // x8
  _BYTE v19[32]; // [xsp+0h] [xbp-70h] BYREF
  _BYTE *v20; // [xsp+20h] [xbp-50h]
  __int64 v21; // [xsp+38h] [xbp-38h]

  v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v20 = 0LL;
  Mutex = (std::mutex *)pudutech::ThreadRunner::getMutex(*((pudutech::ThreadRunner **)this + 8));
  std::mutex::lock(Mutex);
  if ( !*((_QWORD *)this + 7) )
  {
    std::mutex::unlock(Mutex);
    goto LABEL_20;
  }
  v3 = *((_QWORD *)this + 6);
  v4 = (__int64)v20;
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * (v3 / 0x55));
  v6 = v3 % 0x55;
  v7 = v19 == v20;
  v20 = 0LL;
  if ( v7 )
    (*(void (**)(void))(*(_QWORD *)v4 + 32LL))();
  v8 = v5 + 48 * v6;
  v11 = *(_QWORD *)(v8 + 32);
  v9 = (_QWORD *)(v8 + 32);
  v10 = v11;
  if ( v11 )
  {
    if ( v5 + 48 * v6 == v10 )
    {
      v20 = v19;
      (*(void (__fastcall **)(_QWORD, _BYTE *))(*(_QWORD *)*v9 + 24LL))(*v9, v19);
    }
    else
    {
      v20 = (_BYTE *)v10;
      *v9 = 0LL;
    }
  }
  else
  {
    v20 = 0LL;
  }
  v12 = *(_QWORD *)(*((_QWORD *)this + 3) + 8 * (*((_QWORD *)this + 6) / 0x55uLL))
      + 48 * (*((_QWORD *)this + 6) % 0x55uLL);
  v13 = *(_QWORD *)(v12 + 32);
  if ( v12 == v13 )
  {
    v14 = *(void (**)(void))(*(_QWORD *)v13 + 32LL);
    goto LABEL_15;
  }
  if ( v13 )
  {
    v14 = *(void (**)(void))(*(_QWORD *)v13 + 40LL);
LABEL_15:
    v14();
  }
  v15 = vaddq_s64(*((int64x2_t *)this + 3), (int64x2_t)xmmword_2C6A0);
  *((int64x2_t *)this + 3) = v15;
  if ( v15.n128_u64[0] >= 0xAA )
  {
    operator delete(**((void ***)this + 3));
    v16 = *((_QWORD *)this + 6) - 85LL;
    *((_QWORD *)this + 3) += 8LL;
    *((_QWORD *)this + 6) = v16;
  }
  std::mutex::unlock(Mutex);
  if ( !v20 )
    sub_13744();
  (*(void (__fastcall **)(_BYTE *))(*(_QWORD *)v20 + 48LL))(v20);
LABEL_20:
  result = v20;
  if ( v19 == v20 )
  {
    v18 = *(__int64 (**)(void))(*(_QWORD *)v20 + 32LL);
  }
  else
  {
    if ( !v20 )
      return result;
    v18 = *(__int64 (**)(void))(*(_QWORD *)v20 + 40LL);
  }
  return (_BYTE *)v18();
}
// 14770: conditional instruction was optimized away because x0.8==0
// 2C6A0: using guessed type __int128 xmmword_2C6A0;

//----- (0000000000014938) ----------------------------------------------------
bool __fastcall pudutech::ThreadTaskQueue::wakeupCondition(pudutech::ThreadTaskQueue *this)
{
  return *((_QWORD *)this + 7) != 0LL;
}

//----- (0000000000014948) ----------------------------------------------------
void __fastcall pudutech::ThreadTaskQueue::~ThreadTaskQueue(void **this)
{
  std::__shared_weak_count *v2; // x20
  unsigned __int64 *v3; // x8
  unsigned __int64 v4; // x9
  void **v5; // x20
  void **v6; // x21
  void **v7; // x22
  void *v8; // t1
  char *v9; // x8
  char *v10; // x9
  std::__shared_weak_count *v11; // x0

  if ( ((_BYTE)this[10] & 1) != 0 )
    operator delete(this[12]);
  v2 = (std::__shared_weak_count *)this[9];
  if ( v2 )
  {
    v3 = (unsigned __int64 *)((char *)v2 + 8);
    do
      v4 = __ldaxr(v3);
    while ( __stlxr(v4 - 1, v3) );
    if ( !v4 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v2 + 16LL))(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = this + 2;
  std::__deque_base<std::function<void ()(void)>>::clear(this + 2);
  v6 = (void **)this[3];
  v7 = (void **)this[4];
  if ( v6 != v7 )
  {
    do
    {
      v8 = *v6++;
      operator delete(v8);
    }
    while ( v7 != v6 );
    v10 = (char *)this[3];
    v9 = (char *)this[4];
    if ( v9 != v10 )
      this[4] = &v9[~(v9 - 8 - v10) & 0xFFFFFFFFFFFFFFF8LL];
  }
  if ( *v5 )
    operator delete(*v5);
  v11 = (std::__shared_weak_count *)this[1];
  if ( v11 )
    std::__shared_weak_count::__release_weak(v11);
}

//----- (0000000000014A24) ----------------------------------------------------
void __fastcall pudutech::ThreadTaskQueue::exit(pudutech::ThreadTaskQueue *this)
{
  pudutech::ThreadRunner *v1; // x0

  v1 = (pudutech::ThreadRunner *)*((_QWORD *)this + 8);
  if ( v1 )
    pudutech::ThreadRunner::exit(v1, 0);
}

//----- (0000000000014A38) ----------------------------------------------------
__int64 __fastcall pudutech::ThreadTaskQueue::postTask(__int64 a1, __int64 a2)
{
  std::mutex *Mutex; // x19

  Mutex = (std::mutex *)pudutech::ThreadRunner::getMutex(*(pudutech::ThreadRunner **)(a1 + 64));
  std::mutex::lock(Mutex);
  std::deque<std::function<void ()(void)>>::push_back((_QWORD *)(a1 + 16), a2);
  pudutech::ThreadRunner::wakeup(*(_QWORD *)(a1 + 64));
  return std::mutex::unlock(Mutex);
}

//----- (0000000000014A9C) ----------------------------------------------------
pudutech::ThreadRunner *__fastcall pudutech::ThreadTaskQueue::size(pudutech::ThreadRunner **this)
{
  std::mutex *Mutex; // x20
  pudutech::ThreadRunner *v3; // x19

  Mutex = (std::mutex *)pudutech::ThreadRunner::getMutex(this[8]);
  std::mutex::lock(Mutex);
  v3 = this[7];
  std::mutex::unlock(Mutex);
  return v3;
}

//----- (0000000000014AD8) ----------------------------------------------------
void __fastcall std::__deque_base<std::function<void ()(void)>>::clear(_QWORD *a1)
{
  void **v1; // x8
  void **v2; // x9
  unsigned __int64 v4; // x11
  _QWORD *v5; // x20
  unsigned __int64 v6; // x22
  unsigned __int64 v7; // x21
  void **v8; // x23
  __int64 v9; // x0
  void (*v10)(void); // x8
  unsigned __int64 v11; // t1
  unsigned __int64 v12; // x9
  __int64 v13; // x8

  v1 = (void **)a1[1];
  v2 = (void **)a1[2];
  if ( v2 != v1 )
  {
    v4 = a1[4];
    v5 = a1 + 5;
    v6 = (unsigned __int64)v1[v4 / 0x55] + 48 * (v4 % 0x55);
    v7 = (unsigned __int64)v1[(a1[5] + v4) / 0x55] + 48 * ((a1[5] + v4) % 0x55);
    if ( v7 == v6 )
      goto LABEL_14;
    v8 = &v1[v4 / 0x55];
    while ( 1 )
    {
      v9 = *(_QWORD *)(v6 + 32);
      if ( v6 == v9 )
        break;
      if ( v9 )
      {
        v10 = *(void (**)(void))(*(_QWORD *)v9 + 40LL);
LABEL_8:
        v10();
      }
      v6 += 48LL;
      if ( v6 - (_QWORD)*v8 == 4080 )
      {
        v11 = (unsigned __int64)v8[1];
        ++v8;
        v6 = v11;
      }
      if ( v7 == v6 )
      {
        v1 = (void **)a1[1];
        v2 = (void **)a1[2];
        goto LABEL_14;
      }
    }
    v10 = *(void (**)(void))(*(_QWORD *)v9 + 32LL);
    goto LABEL_8;
  }
  v5 = a1 + 5;
LABEL_14:
  v12 = v2 - v1;
  *v5 = 0LL;
  if ( v12 >= 3 )
  {
    do
    {
      operator delete(*v1);
      v1 = (void **)(a1[1] + 8LL);
      v12 = (__int64)(a1[2] - (_QWORD)v1) >> 3;
      a1[1] = v1;
    }
    while ( v12 > 2 );
  }
  if ( v12 == 1 )
  {
    v13 = 42LL;
  }
  else
  {
    if ( v12 != 2 )
      return;
    v13 = 85LL;
  }
  a1[4] = v13;
}

//----- (0000000000014C14) ----------------------------------------------------
void __fastcall std::__shared_ptr_pointer<pudutech::ThreadTaskQueue  *>::~__shared_ptr_pointer(
        std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(a1);
}

//----- (0000000000014C38) ----------------------------------------------------
void __fastcall std::__shared_ptr_pointer<pudutech::ThreadTaskQueue  *>::__on_zero_shared(__int64 a1)
{
  void *v1; // x19

  v1 = *(void **)(a1 + 24);
  if ( v1 )
  {
    pudutech::ThreadTaskQueue::~ThreadTaskQueue(*(void ***)(a1 + 24));
    operator delete(v1);
  }
}

//----- (0000000000014C70) ----------------------------------------------------
__int64 __fastcall std::__shared_ptr_pointer<pudutech::ThreadTaskQueue  *>::__get_deleter(__int64 a1, __int64 a2)
{
  if ( *(char **)(a2 + 8) == "NSt6__ndk114default_deleteIN8pudutech15ThreadTaskQueueEEE" )
    return a1 + 24;
  else
    return 0LL;
}

//----- (0000000000014C90) ----------------------------------------------------
_QWORD *__fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::~__func(
        _QWORD *result)
{
  std::__shared_weak_count *v1; // x19
  unsigned __int64 *v2; // x8
  unsigned __int64 v3; // x9

  v1 = (std::__shared_weak_count *)result[4];
  *result = &off_43E60;
  if ( v1 )
  {
    v2 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v3 = __ldaxr(v2);
    while ( __stlxr(v3 - 1, v2) );
    if ( !v3 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      return (_QWORD *)std::__shared_weak_count::__release_weak(v1);
    }
  }
  return result;
}
// 43E60: using guessed type __int64 (__fastcall *)();

//----- (0000000000014CF8) ----------------------------------------------------
void __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::~__func(
        _QWORD *a1)
{
  std::__shared_weak_count *v1; // x20
  unsigned __int64 *v3; // x8
  unsigned __int64 v4; // x9

  v1 = (std::__shared_weak_count *)a1[4];
  *a1 = &off_43E60;
  if ( v1 )
  {
    v3 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v4 = __ldaxr(v3);
    while ( __stlxr(v4 - 1, v3) );
    if ( !v4 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  operator delete(a1);
}
// 43E60: using guessed type __int64 (__fastcall *off_43E60)();

//----- (0000000000014D60) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::__clone(
        __int64 a1)
{
  __int64 result; // x0
  __int64 v3; // x8
  unsigned __int64 *v4; // x8
  unsigned __int64 v5; // x9

  result = operator new(0x28uLL);
  *(_QWORD *)result = &off_43E60;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(result + 32) = v3;
  if ( v3 )
  {
    v4 = (unsigned __int64 *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while ( __stxr(v5 + 1, v4) );
  }
  return result;
}
// 43E60: using guessed type __int64 (__fastcall *off_43E60)();

//----- (0000000000014DC4) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::__clone(
        __int64 result,
        __int64 a2)
{
  __int64 v2; // x8
  unsigned __int64 *v3; // x8
  unsigned __int64 v4; // x9

  *(_QWORD *)a2 = &off_43E60;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 32) = v2;
  if ( v2 )
  {
    v3 = (unsigned __int64 *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while ( __stxr(v4 + 1, v3) );
  }
  return result;
}
// 43E60: using guessed type __int64 (__fastcall *off_43E60)();

//----- (0000000000014E08) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::destroy(
        __int64 result)
{
  std::__shared_weak_count *v1; // x19
  unsigned __int64 *v2; // x8
  unsigned __int64 v3; // x9

  v1 = *(std::__shared_weak_count **)(result + 32);
  if ( v1 )
  {
    v2 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v3 = __ldaxr(v2);
    while ( __stlxr(v3 - 1, v2) );
    if ( !v3 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      return std::__shared_weak_count::__release_weak(v1);
    }
  }
  return result;
}

//----- (0000000000014E60) ----------------------------------------------------
void __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::destroy_deallocate(
        _QWORD *a1)
{
  std::__shared_weak_count *v1; // x20
  unsigned __int64 *v3; // x8
  unsigned __int64 v4; // x9

  v1 = (std::__shared_weak_count *)a1[4];
  if ( v1 )
  {
    v3 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v4 = __ldaxr(v3);
    while ( __stlxr(v4 - 1, v3) );
    if ( !v4 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  operator delete(a1);
}

//----- (0000000000014EB8) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::operator()(
        _QWORD *a1)
{
  __int64 v1; // x9
  __int64 (__fastcall *v2)(_QWORD); // x1
  _QWORD *v3; // x0

  v1 = a1[2];
  v2 = (__int64 (__fastcall *)(_QWORD))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ( (v1 & 1) != 0 )
    v2 = *(__int64 (__fastcall **)(_QWORD))((char *)v2 + *v3);
  return v2(v3);
}

//----- (0000000000014ED4) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::target(
        __int64 a1,
        __int64 a2)
{
  if ( *(char **)(a2 + 8) == "NSt6__ndk16__bindIMN8pudutech15ThreadTaskQueueEFvvEJNS_10shared_ptrIS2_EEEEE" )
    return a1 + 8;
  else
    return 0LL;
}

//----- (0000000000014EF0) ----------------------------------------------------
void **std::__function::__func<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,void ()(void)>::target_type()
{
  return &`typeinfo for'std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>;
}
// 43EF8: using guessed type void *`typeinfo for'std::__bind<void (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>;

//----- (0000000000014EFC) ----------------------------------------------------
_QWORD *__fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::~__func(
        _QWORD *result)
{
  std::__shared_weak_count *v1; // x19
  unsigned __int64 *v2; // x8
  unsigned __int64 v3; // x9

  v1 = (std::__shared_weak_count *)result[4];
  *result = &off_43F20;
  if ( v1 )
  {
    v2 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v3 = __ldaxr(v2);
    while ( __stlxr(v3 - 1, v2) );
    if ( !v3 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      return (_QWORD *)std::__shared_weak_count::__release_weak(v1);
    }
  }
  return result;
}
// 43F20: using guessed type __int64 (__fastcall *)();

//----- (0000000000014F64) ----------------------------------------------------
void __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::~__func(
        _QWORD *a1)
{
  std::__shared_weak_count *v1; // x20
  unsigned __int64 *v3; // x8
  unsigned __int64 v4; // x9

  v1 = (std::__shared_weak_count *)a1[4];
  *a1 = &off_43F20;
  if ( v1 )
  {
    v3 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v4 = __ldaxr(v3);
    while ( __stlxr(v4 - 1, v3) );
    if ( !v4 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  operator delete(a1);
}
// 43F20: using guessed type __int64 (__fastcall *off_43F20)();

//----- (0000000000014FCC) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::__clone(
        __int64 a1)
{
  __int64 result; // x0
  __int64 v3; // x8
  unsigned __int64 *v4; // x8
  unsigned __int64 v5; // x9

  result = operator new(0x28uLL);
  *(_QWORD *)result = &off_43F20;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(result + 24) = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(result + 32) = v3;
  if ( v3 )
  {
    v4 = (unsigned __int64 *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while ( __stxr(v5 + 1, v4) );
  }
  return result;
}
// 43F20: using guessed type __int64 (__fastcall *off_43F20)();

//----- (0000000000015030) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::__clone(
        __int64 result,
        __int64 a2)
{
  __int64 v2; // x8
  unsigned __int64 *v3; // x8
  unsigned __int64 v4; // x9

  *(_QWORD *)a2 = &off_43F20;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 24);
  v2 = *(_QWORD *)(result + 32);
  *(_QWORD *)(a2 + 32) = v2;
  if ( v2 )
  {
    v3 = (unsigned __int64 *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while ( __stxr(v4 + 1, v3) );
  }
  return result;
}
// 43F20: using guessed type __int64 (__fastcall *off_43F20)();

//----- (0000000000015074) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::destroy(
        __int64 result)
{
  std::__shared_weak_count *v1; // x19
  unsigned __int64 *v2; // x8
  unsigned __int64 v3; // x9

  v1 = *(std::__shared_weak_count **)(result + 32);
  if ( v1 )
  {
    v2 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v3 = __ldaxr(v2);
    while ( __stlxr(v3 - 1, v2) );
    if ( !v3 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      return std::__shared_weak_count::__release_weak(v1);
    }
  }
  return result;
}

//----- (00000000000150CC) ----------------------------------------------------
void __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::destroy_deallocate(
        _QWORD *a1)
{
  std::__shared_weak_count *v1; // x20
  unsigned __int64 *v3; // x8
  unsigned __int64 v4; // x9

  v1 = (std::__shared_weak_count *)a1[4];
  if ( v1 )
  {
    v3 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v4 = __ldaxr(v3);
    while ( __stlxr(v4 - 1, v3) );
    if ( !v4 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  operator delete(a1);
}

//----- (0000000000015124) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::operator()(
        _QWORD *a1)
{
  __int64 v1; // x9
  __int64 (__fastcall *v2)(_QWORD); // x1
  _QWORD *v3; // x0

  v1 = a1[2];
  v2 = (__int64 (__fastcall *)(_QWORD))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ( (v1 & 1) != 0 )
    v2 = *(__int64 (__fastcall **)(_QWORD))((char *)v2 + *v3);
  return v2(v3);
}

//----- (0000000000015140) ----------------------------------------------------
__int64 __fastcall std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::target(
        __int64 a1,
        __int64 a2)
{
  if ( *(char **)(a2 + 8) == "NSt6__ndk16__bindIMN8pudutech15ThreadTaskQueueEFbvEJNS_10shared_ptrIS2_EEEEE" )
    return a1 + 8;
  else
    return 0LL;
}

//----- (000000000001515C) ----------------------------------------------------
void **std::__function::__func<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>,std::allocator<std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>>,bool ()(void)>::target_type()
{
  return &`typeinfo for'std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>;
}
// 43FB8: using guessed type void *`typeinfo for'std::__bind<bool (pudutech::ThreadTaskQueue::*)(void),std::shared_ptr<pudutech::ThreadTaskQueue>>;

//----- (0000000000015168) ----------------------------------------------------
void __fastcall std::deque<std::function<void ()(void)>>::push_back(_QWORD *a1, __int64 a2)
{
  __int64 v2; // x9
  __int64 v3; // x10
  __int64 v4; // x8
  __int64 v5; // x12
  __int64 v7; // x13
  unsigned __int64 v8; // x11
  unsigned __int64 v10; // x1
  __int64 v11; // x9

  v2 = a1[1];
  v3 = a1[2];
  v5 = a1[4];
  v4 = a1[5];
  if ( v3 == v2 )
    v7 = 0LL;
  else
    v7 = 85 * ((v3 - v2) >> 3) - 1;
  v8 = v4 + v5;
  if ( v7 == v4 + v5 )
  {
    std::deque<std::function<void ()(void)>>::__add_back_capacity((__int64)a1);
    v4 = a1[5];
    v2 = a1[1];
    v3 = a1[2];
    v8 = a1[4] + v4;
  }
  if ( v3 != v2 )
  {
    v10 = *(_QWORD *)(v2 + 8 * (v8 / 0x55)) + 48 * (v8 % 0x55);
    v11 = *(_QWORD *)(a2 + 32);
    if ( v11 )
      goto LABEL_8;
LABEL_11:
    *(_QWORD *)(v10 + 32) = 0LL;
    goto LABEL_13;
  }
  v10 = 0LL;
  v11 = *(_QWORD *)(a2 + 32);
  if ( !v11 )
    goto LABEL_11;
LABEL_8:
  if ( a2 == v11 )
  {
    *(_QWORD *)(v10 + 32) = v10;
    (*(void (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 24LL))(*(_QWORD *)(a2 + 32));
    v4 = a1[5];
  }
  else
  {
    *(_QWORD *)(v10 + 32) = v11;
    *(_QWORD *)(a2 + 32) = 0LL;
  }
LABEL_13:
  a1[5] = v4 + 1;
}

//----- (0000000000015248) ----------------------------------------------------
void __fastcall std::deque<std::function<void ()(void)>>::__add_back_capacity(__int64 a1)
{
  unsigned __int64 v2; // x8
  bool v3; // cf
  unsigned __int64 v4; // x8
  char *v5; // x24
  _QWORD *v6; // x25
  char *v7; // x20
  __int64 v8; // x23
  char *v9; // x8
  _BYTE *v10; // x21
  __int64 v11; // x9
  __int64 v12; // x8
  __int64 v13; // x8
  bool v14; // zf
  size_t v15; // x2
  __int64 v16; // x8
  char *v17; // x21
  __int64 v18; // x24
  __int64 v19; // x25
  __int64 v20; // x8
  __int64 v21; // x8
  __int64 v22; // x9
  unsigned __int64 v23; // x20
  __int64 v24; // x10
  _QWORD *v25; // x25
  char *v26; // x8
  __int64 v27; // x8
  __int64 v28; // x8
  unsigned __int64 v29; // x26
  __int64 v30; // x0
  unsigned __int64 v31; // x21
  char *v32; // x0
  __int64 v33; // x8
  __int64 v34; // x8
  unsigned __int64 v35; // x26
  _QWORD *i; // x20
  _QWORD *v37; // x8
  _BYTE *v38; // x0
  __int128 v39; // q0
  __int128 v40; // q1
  unsigned __int64 v41; // x10
  unsigned __int64 v42; // x9
  __int64 v43; // x8
  unsigned __int64 v44; // x12
  unsigned __int64 v45; // x13
  unsigned __int64 v46; // x11
  _QWORD *v47; // x12
  __int64 v48; // x17
  __int128 *v49; // x15
  _OWORD *v50; // x16
  __int64 v51; // x17
  __int128 v52; // q0
  __int128 v53; // q1
  __int64 v54; // t1
  unsigned __int64 v55; // x12
  unsigned __int64 v56; // x13
  _QWORD *v57; // x12
  __int64 v58; // x17
  __int128 *v59; // x15
  _OWORD *v60; // x16
  __int64 v61; // x17
  __int128 v62; // q0
  __int128 v63; // q1
  __int64 v64; // t1
  __int64 v65; // [xsp+8h] [xbp-78h] BYREF
  void *v66[2]; // [xsp+10h] [xbp-70h] BYREF
  __int128 v67; // [xsp+20h] [xbp-60h]
  __int64 v68; // [xsp+30h] [xbp-50h]
  __int64 v69; // [xsp+38h] [xbp-48h]

  v69 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if ( v3 )
  {
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 32) = v4;
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    v9 = *(char **)(a1 + 24);
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if ( v5 != v9 )
    {
LABEL_62:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8LL;
      return;
    }
    v10 = *(_BYTE **)a1;
    v11 = (__int64)&v7[-*(_QWORD *)a1];
    if ( (unsigned __int64)v7 <= *(_QWORD *)a1 )
    {
      v33 = v9 - v10;
      v14 = v33 == 0;
      v34 = v33 >> 2;
      if ( v14 )
        v35 = 1LL;
      else
        v35 = v34;
      if ( v35 )
      {
        if ( v35 >> 61 )
          goto LABEL_72;
        v30 = operator new(8 * v35);
      }
      else
      {
        v30 = 0LL;
      }
      v41 = v35 >> 2;
      v42 = v30 + 8 * (v35 >> 2);
      v43 = v30 + 8 * v35;
      if ( v7 != v5 )
      {
        v44 = (unsigned __int64)(v5 - 16 - (char *)v6) >> 3;
        v45 = v44 + 1;
        v46 = ((unsigned __int64)(v5 - 8 - v7) >> 3) + 1;
        if ( v44 + 1 >= 4 )
        {
          if ( v42 >= (unsigned __int64)&v6[v44 + 2]
            || (v3 = (unsigned __int64)v7 >= v30 + 8 * (v41 + v44) + 8, v47 = (_QWORD *)(v30 + 8 * (v35 >> 2)), v3) )
          {
            v48 = 8 * (v45 & 0x3FFFFFFFFFFFFFFCLL);
            v49 = (__int128 *)(v6 + 3);
            v47 = (_QWORD *)(v42 + v48);
            v7 += v48;
            v50 = (_OWORD *)(v30 + 8 * v41 + 16);
            v51 = v45 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v52 = *(v49 - 1);
              v53 = *v49;
              v49 += 2;
              v51 -= 4LL;
              *(v50 - 1) = v52;
              *v50 = v53;
              v50 += 2;
            }
            while ( v51 );
            if ( v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL) )
              goto LABEL_54;
          }
        }
        else
        {
          v47 = (_QWORD *)(v30 + 8 * (v35 >> 2));
        }
        do
        {
          v54 = *(_QWORD *)v7;
          v7 += 8;
          *v47++ = v54;
        }
        while ( v5 != v7 );
        goto LABEL_54;
      }
LABEL_59:
      v5 = (char *)v42;
LABEL_60:
      *(_QWORD *)a1 = v30;
      *(_QWORD *)(a1 + 8) = v42;
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v43;
      if ( v10 )
      {
        operator delete(v10);
        v5 = *(char **)(a1 + 16);
      }
      goto LABEL_62;
    }
LABEL_5:
    v12 = v11 >> 3;
    if ( (v11 >> 3) + 1 >= 0 )
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v15 = v5 - v7;
    v14 = v5 == v7;
    v16 = v13 >> 1;
    v17 = &v7[-8 * v16];
    v18 = (v5 - v7) >> 3;
    if ( v14 )
    {
      v20 = (__int64)&v7[-8 * v16];
    }
    else
    {
      v19 = -v16;
      memmove(&v7[-8 * v16], v7, v15);
      v20 = *(_QWORD *)(a1 + 8) + 8 * v19;
    }
    v5 = &v17[8 * v18];
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 16) = v5;
    goto LABEL_62;
  }
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 24);
  v23 = (v21 - *(_QWORD *)(a1 + 8)) >> 3;
  v24 = v22 - *(_QWORD *)a1;
  if ( v23 < v24 >> 3 )
  {
    if ( v22 != v21 )
    {
      v66[0] = (void *)operator new(0xFF0uLL);
      std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(
        (_BYTE **)a1,
        v66);
      return;
    }
    v66[0] = (void *)operator new(0xFF0uLL);
    std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front(
      (const void **)a1,
      v66);
    v25 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v25 + 1);
    v8 = *v25;
    v26 = *(char **)(a1 + 24);
    *(_QWORD *)(a1 + 8) = v25 + 1;
    if ( v5 != v26 )
      goto LABEL_62;
    v10 = *(_BYTE **)a1;
    v11 = (__int64)&v7[-*(_QWORD *)a1];
    if ( (unsigned __int64)v7 <= *(_QWORD *)a1 )
    {
      v27 = v26 - v10;
      v14 = v27 == 0;
      v28 = v27 >> 2;
      if ( v14 )
        v29 = 1LL;
      else
        v29 = v28;
      if ( !v29 )
      {
        v30 = 0LL;
LABEL_56:
        v41 = v29 >> 2;
        v42 = v30 + 8 * (v29 >> 2);
        v43 = v30 + 8 * v29;
        if ( v7 != v5 )
        {
          v55 = (unsigned __int64)(v5 - 16 - (char *)v25) >> 3;
          v56 = v55 + 1;
          v46 = ((unsigned __int64)(v5 - 8 - v7) >> 3) + 1;
          if ( v55 + 1 >= 4 )
          {
            if ( v42 >= (unsigned __int64)&v25[v55 + 2]
              || (v3 = (unsigned __int64)v7 >= v30 + 8 * (v41 + v55) + 8, v57 = (_QWORD *)(v30 + 8 * (v29 >> 2)), v3) )
            {
              v58 = 8 * (v56 & 0x3FFFFFFFFFFFFFFCLL);
              v59 = (__int128 *)(v25 + 3);
              v57 = (_QWORD *)(v42 + v58);
              v7 += v58;
              v60 = (_OWORD *)(v30 + 8 * v41 + 16);
              v61 = v56 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v62 = *(v59 - 1);
                v63 = *v59;
                v59 += 2;
                v61 -= 4LL;
                *(v60 - 1) = v62;
                *v60 = v63;
                v60 += 2;
              }
              while ( v61 );
              if ( v56 == (v56 & 0x3FFFFFFFFFFFFFFCLL) )
                goto LABEL_54;
            }
          }
          else
          {
            v57 = (_QWORD *)(v30 + 8 * (v29 >> 2));
          }
          do
          {
            v64 = *(_QWORD *)v7;
            v7 += 8;
            *v57++ = v64;
          }
          while ( v5 != v7 );
LABEL_54:
          v10 = *(_BYTE **)a1;
          v5 = (char *)(v30 + 8 * (v46 + v41));
          goto LABEL_60;
        }
        goto LABEL_59;
      }
      if ( !(v29 >> 61) )
      {
        v30 = operator new(8 * v29);
        goto LABEL_56;
      }
LABEL_72:
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    }
    goto LABEL_5;
  }
  if ( v24 )
    v31 = v24 >> 2;
  else
    v31 = 1LL;
  *((_QWORD *)&v67 + 1) = 0LL;
  v68 = a1 + 24;
  if ( v31 )
  {
    if ( v31 >> 61 )
      goto LABEL_72;
    v32 = (char *)operator new(8 * v31);
  }
  else
  {
    v32 = 0LL;
  }
  *(_QWORD *)&v67 = &v32[8 * v23];
  *((_QWORD *)&v67 + 1) = &v32[8 * v31];
  v66[0] = v32;
  v66[1] = (void *)v67;
  v65 = operator new(0xFF0uLL);
  std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(
    (_BYTE **)v66,
    &v65);
  for ( i = *(_QWORD **)(a1 + 16);
        ;
        std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front(
          (const void **)v66,
          i) )
  {
    v37 = *(_QWORD **)(a1 + 8);
    if ( i == v37 )
      break;
    --i;
  }
  v38 = *(_BYTE **)a1;
  v39 = *(_OWORD *)v66;
  v66[0] = *(void **)a1;
  v66[1] = v37;
  v40 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = v39;
  *(_OWORD *)(a1 + 16) = v67;
  v67 = v40;
  if ( (_QWORD *)v40 != i )
    *(_QWORD *)&v67 = v40 + (~(v40 - 8 - (_QWORD)v37) & 0xFFFFFFFFFFFFFFF8LL);
  if ( v38 )
    operator delete(v38);
}

//----- (00000000000156F4) ----------------------------------------------------
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_back(
        _BYTE **a1,
        _QWORD *a2)
{
  char *v2; // x8
  char *v3; // x23
  char *v6; // x21
  _BYTE *v7; // x22
  __int64 v8; // x9
  __int64 v9; // x8
  __int64 v10; // x8
  bool v11; // zf
  size_t v12; // x2
  __int64 v13; // x8
  char *v14; // x22
  __int64 v15; // x23
  __int64 v16; // x24
  __int64 v17; // x8
  __int64 v18; // x8
  __int64 v19; // x8
  unsigned __int64 v20; // x24
  _BYTE *v21; // x0
  unsigned __int64 v22; // x13
  unsigned __int64 v23; // x9
  unsigned __int64 v24; // x14
  unsigned __int64 v25; // x12
  __int64 v26; // x10
  _QWORD *v27; // x11
  __int64 v28; // x16
  __int128 *v29; // x15
  _OWORD *v30; // x13
  __int64 v31; // x16
  __int128 v32; // q0
  __int128 v33; // q1
  __int64 v34; // t1

  v3 = a1[2];
  v2 = a1[3];
  if ( v3 != v2 )
    goto LABEL_30;
  v7 = *a1;
  v6 = a1[1];
  v8 = v6 - *a1;
  if ( v6 > *a1 )
  {
    v9 = v8 >> 3;
    if ( (v8 >> 3) + 1 >= 0 )
      v10 = v9 + 1;
    else
      v10 = v9 + 2;
    v12 = v3 - v6;
    v11 = v3 == v6;
    v13 = v10 >> 1;
    v14 = &v6[-8 * v13];
    v15 = (v3 - v6) >> 3;
    if ( v11 )
    {
      v17 = (__int64)&v6[-8 * v13];
    }
    else
    {
      v16 = -v13;
      memmove(&v6[-8 * v13], a1[1], v12);
      v17 = (__int64)&a1[1][8 * v16];
    }
    v3 = &v14[8 * v15];
    a1[1] = (_BYTE *)v17;
    a1[2] = v3;
    goto LABEL_30;
  }
  v18 = v2 - v7;
  v11 = v18 == 0;
  v19 = v18 >> 2;
  if ( v11 )
    v20 = 1LL;
  else
    v20 = v19;
  if ( v20 )
  {
    if ( v20 >> 61 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    v21 = (_BYTE *)operator new(8 * v20);
  }
  else
  {
    v21 = 0LL;
  }
  v22 = v20 >> 2;
  v23 = (unsigned __int64)&v21[8 * (v20 >> 2)];
  if ( v6 == v3 )
  {
    v3 = &v21[8 * (v20 >> 2)];
    goto LABEL_28;
  }
  v24 = (unsigned __int64)(v3 - 8 - v6) >> 3;
  v25 = v24 + 1;
  v26 = v22 + v24 + 1;
  if ( v24 + 1 >= 4 )
  {
    if ( v23 >= (unsigned __int64)&v6[8 * v24 + 8] || (v27 = &v21[8 * (v20 >> 2)], v6 >= &v21[8 * v22 + 8 + 8 * v24]) )
    {
      v28 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = (__int128 *)(v6 + 16);
      v27 = (_QWORD *)(v23 + v28);
      v6 += v28;
      v30 = &v21[8 * v22 + 16];
      v31 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *(v29 - 1);
        v33 = *v29;
        v29 += 2;
        v31 -= 4LL;
        *(v30 - 1) = v32;
        *v30 = v33;
        v30 += 2;
      }
      while ( v31 );
      if ( v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL) )
        goto LABEL_27;
    }
  }
  else
  {
    v27 = &v21[8 * (v20 >> 2)];
  }
  do
  {
    v34 = *(_QWORD *)v6;
    v6 += 8;
    *v27++ = v34;
  }
  while ( v3 != v6 );
LABEL_27:
  v7 = *a1;
  v3 = &v21[8 * v26];
LABEL_28:
  *a1 = v21;
  a1[1] = (_BYTE *)v23;
  a1[2] = v3;
  a1[3] = &v21[8 * v20];
  if ( v7 )
  {
    operator delete(v7);
    v3 = a1[2];
  }
LABEL_30:
  *(_QWORD *)v3 = *a2;
  a1[2] += 8;
}

//----- (00000000000158B0) ----------------------------------------------------
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *>>::push_front(
        const void **a1,
        _QWORD *a2)
{
  char *v2; // x24
  char *v5; // x21
  unsigned __int64 v6; // x22
  char *v7; // x9
  char *v8; // x23
  __int64 v9; // x8
  __int64 v10; // x8
  __int64 v11; // x25
  size_t v12; // x2
  __int64 v13; // x8
  unsigned __int64 v14; // x25
  char *v15; // x0
  unsigned __int64 v16; // x13
  unsigned __int64 v17; // x12
  unsigned __int64 v18; // x11
  __int64 v19; // x9
  char *v20; // x10
  char *v21; // x9
  __int64 v22; // x15
  __int128 *v23; // x14
  char *v24; // x13
  __int64 v25; // x15
  __int128 v26; // q0
  __int128 v27; // q1
  __int64 v28; // t1

  v2 = (char *)a1[1];
  v5 = v2;
  if ( v2 != *a1 )
  {
    v6 = (unsigned __int64)a1[1];
    goto LABEL_31;
  }
  v8 = (char *)a1[2];
  v7 = (char *)a1[3];
  if ( v8 < v7 )
  {
    v9 = (v7 - v8) >> 3;
    if ( v9 + 1 >= 0 )
      v10 = v9 + 1;
    else
      v10 = v9 + 2;
    v11 = v10 >> 1;
    v12 = v8 - v2;
    v13 = (__int64)&v8[8 * (v10 >> 1)];
    if ( v8 == v2 )
    {
      v6 = v13;
    }
    else
    {
      v6 = v13 - v12;
      memmove((void *)(v13 - v12), v2, v12);
      v13 = (__int64)a1[2] + 8 * v11;
    }
    a1[1] = (const void *)v6;
    a1[2] = (const void *)v13;
    goto LABEL_31;
  }
  if ( v7 == *a1 )
    v14 = 1LL;
  else
    v14 = (v7 - (_BYTE *)*a1) >> 2;
  if ( v14 )
  {
    if ( v14 >> 61 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    v15 = (char *)operator new(8 * v14);
  }
  else
  {
    v15 = 0LL;
  }
  v16 = (v14 + 3) >> 2;
  v6 = (unsigned __int64)&v15[8 * v16];
  if ( v2 == v8 )
  {
    v21 = &v15[8 * v16];
    goto LABEL_29;
  }
  v17 = (unsigned __int64)(v8 - 8 - v2) >> 3;
  v18 = v17 + 1;
  v19 = v17 + v16 + 1;
  if ( v17 + 1 >= 4 )
  {
    if ( v6 >= (unsigned __int64)&v2[8 * v17 + 8] || (v20 = &v15[8 * v16], v2 >= &v15[8 * v17 + 8 + 8 * v16]) )
    {
      v22 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = (__int128 *)(v2 + 16);
      v20 = (char *)(v6 + v22);
      v5 = &v2[v22];
      v24 = &v15[8 * v16 + 16];
      v25 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(v23 - 1);
        v27 = *v23;
        v23 += 2;
        v25 -= 4LL;
        *((_OWORD *)v24 - 1) = v26;
        *(_OWORD *)v24 = v27;
        v24 += 32;
      }
      while ( v25 );
      if ( v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL) )
        goto LABEL_28;
    }
  }
  else
  {
    v20 = &v15[8 * v16];
  }
  do
  {
    v28 = *(_QWORD *)v5;
    v5 += 8;
    *(_QWORD *)v20 = v28;
    v20 += 8;
  }
  while ( v8 != v5 );
LABEL_28:
  v5 = (char *)*a1;
  v21 = &v15[8 * v19];
LABEL_29:
  *a1 = v15;
  a1[1] = (const void *)v6;
  a1[2] = v21;
  a1[3] = &v15[8 * v14];
  if ( v5 )
  {
    operator delete(v5);
    v6 = (unsigned __int64)a1[1];
  }
LABEL_31:
  *(_QWORD *)(v6 - 8) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

//----- (0000000000015A80) ----------------------------------------------------
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_back(
        _BYTE **a1,
        _QWORD *a2)
{
  char *v2; // x8
  char *v3; // x23
  char *v6; // x21
  _BYTE *v7; // x22
  __int64 v8; // x9
  __int64 v9; // x8
  __int64 v10; // x8
  bool v11; // zf
  size_t v12; // x2
  __int64 v13; // x8
  char *v14; // x22
  __int64 v15; // x23
  __int64 v16; // x24
  __int64 v17; // x8
  __int64 v18; // x8
  __int64 v19; // x8
  unsigned __int64 v20; // x24
  _BYTE *v21; // x0
  unsigned __int64 v22; // x13
  unsigned __int64 v23; // x9
  unsigned __int64 v24; // x14
  unsigned __int64 v25; // x12
  __int64 v26; // x10
  _QWORD *v27; // x11
  __int64 v28; // x16
  __int128 *v29; // x15
  _OWORD *v30; // x13
  __int64 v31; // x16
  __int128 v32; // q0
  __int128 v33; // q1
  __int64 v34; // t1

  v3 = a1[2];
  v2 = a1[3];
  if ( v3 != v2 )
    goto LABEL_30;
  v7 = *a1;
  v6 = a1[1];
  v8 = v6 - *a1;
  if ( v6 > *a1 )
  {
    v9 = v8 >> 3;
    if ( (v8 >> 3) + 1 >= 0 )
      v10 = v9 + 1;
    else
      v10 = v9 + 2;
    v12 = v3 - v6;
    v11 = v3 == v6;
    v13 = v10 >> 1;
    v14 = &v6[-8 * v13];
    v15 = (v3 - v6) >> 3;
    if ( v11 )
    {
      v17 = (__int64)&v6[-8 * v13];
    }
    else
    {
      v16 = -v13;
      memmove(&v6[-8 * v13], a1[1], v12);
      v17 = (__int64)&a1[1][8 * v16];
    }
    v3 = &v14[8 * v15];
    a1[1] = (_BYTE *)v17;
    a1[2] = v3;
    goto LABEL_30;
  }
  v18 = v2 - v7;
  v11 = v18 == 0;
  v19 = v18 >> 2;
  if ( v11 )
    v20 = 1LL;
  else
    v20 = v19;
  if ( v20 )
  {
    if ( v20 >> 61 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    v21 = (_BYTE *)operator new(8 * v20);
  }
  else
  {
    v21 = 0LL;
  }
  v22 = v20 >> 2;
  v23 = (unsigned __int64)&v21[8 * (v20 >> 2)];
  if ( v6 == v3 )
  {
    v3 = &v21[8 * (v20 >> 2)];
    goto LABEL_28;
  }
  v24 = (unsigned __int64)(v3 - 8 - v6) >> 3;
  v25 = v24 + 1;
  v26 = v22 + v24 + 1;
  if ( v24 + 1 >= 4 )
  {
    if ( v23 >= (unsigned __int64)&v6[8 * v24 + 8] || (v27 = &v21[8 * (v20 >> 2)], v6 >= &v21[8 * v22 + 8 + 8 * v24]) )
    {
      v28 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
      v29 = (__int128 *)(v6 + 16);
      v27 = (_QWORD *)(v23 + v28);
      v6 += v28;
      v30 = &v21[8 * v22 + 16];
      v31 = v25 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *(v29 - 1);
        v33 = *v29;
        v29 += 2;
        v31 -= 4LL;
        *(v30 - 1) = v32;
        *v30 = v33;
        v30 += 2;
      }
      while ( v31 );
      if ( v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL) )
        goto LABEL_27;
    }
  }
  else
  {
    v27 = &v21[8 * (v20 >> 2)];
  }
  do
  {
    v34 = *(_QWORD *)v6;
    v6 += 8;
    *v27++ = v34;
  }
  while ( v3 != v6 );
LABEL_27:
  v7 = *a1;
  v3 = &v21[8 * v26];
LABEL_28:
  *a1 = v21;
  a1[1] = (_BYTE *)v23;
  a1[2] = v3;
  a1[3] = &v21[8 * v20];
  if ( v7 )
  {
    operator delete(v7);
    v3 = a1[2];
  }
LABEL_30:
  *(_QWORD *)v3 = *a2;
  a1[2] += 8;
}

//----- (0000000000015C3C) ----------------------------------------------------
void __fastcall std::__split_buffer<std::function<void ()(void)> *,std::allocator<std::function<void ()(void)> *> &>::push_front(
        const void **a1,
        _QWORD *a2)
{
  char *v2; // x24
  char *v5; // x21
  unsigned __int64 v6; // x22
  char *v7; // x9
  char *v8; // x23
  __int64 v9; // x8
  __int64 v10; // x8
  __int64 v11; // x25
  size_t v12; // x2
  __int64 v13; // x8
  unsigned __int64 v14; // x25
  char *v15; // x0
  unsigned __int64 v16; // x13
  unsigned __int64 v17; // x12
  unsigned __int64 v18; // x11
  __int64 v19; // x9
  char *v20; // x10
  char *v21; // x9
  __int64 v22; // x15
  __int128 *v23; // x14
  char *v24; // x13
  __int64 v25; // x15
  __int128 v26; // q0
  __int128 v27; // q1
  __int64 v28; // t1

  v2 = (char *)a1[1];
  v5 = v2;
  if ( v2 != *a1 )
  {
    v6 = (unsigned __int64)a1[1];
    goto LABEL_31;
  }
  v8 = (char *)a1[2];
  v7 = (char *)a1[3];
  if ( v8 < v7 )
  {
    v9 = (v7 - v8) >> 3;
    if ( v9 + 1 >= 0 )
      v10 = v9 + 1;
    else
      v10 = v9 + 2;
    v11 = v10 >> 1;
    v12 = v8 - v2;
    v13 = (__int64)&v8[8 * (v10 >> 1)];
    if ( v8 == v2 )
    {
      v6 = v13;
    }
    else
    {
      v6 = v13 - v12;
      memmove((void *)(v13 - v12), v2, v12);
      v13 = (__int64)a1[2] + 8 * v11;
    }
    a1[1] = (const void *)v6;
    a1[2] = (const void *)v13;
    goto LABEL_31;
  }
  if ( v7 == *a1 )
    v14 = 1LL;
  else
    v14 = (v7 - (_BYTE *)*a1) >> 2;
  if ( v14 )
  {
    if ( v14 >> 61 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    v15 = (char *)operator new(8 * v14);
  }
  else
  {
    v15 = 0LL;
  }
  v16 = (v14 + 3) >> 2;
  v6 = (unsigned __int64)&v15[8 * v16];
  if ( v2 == v8 )
  {
    v21 = &v15[8 * v16];
    goto LABEL_29;
  }
  v17 = (unsigned __int64)(v8 - 8 - v2) >> 3;
  v18 = v17 + 1;
  v19 = v17 + v16 + 1;
  if ( v17 + 1 >= 4 )
  {
    if ( v6 >= (unsigned __int64)&v2[8 * v17 + 8] || (v20 = &v15[8 * v16], v2 >= &v15[8 * v17 + 8 + 8 * v16]) )
    {
      v22 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      v23 = (__int128 *)(v2 + 16);
      v20 = (char *)(v6 + v22);
      v5 = &v2[v22];
      v24 = &v15[8 * v16 + 16];
      v25 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(v23 - 1);
        v27 = *v23;
        v23 += 2;
        v25 -= 4LL;
        *((_OWORD *)v24 - 1) = v26;
        *(_OWORD *)v24 = v27;
        v24 += 32;
      }
      while ( v25 );
      if ( v18 == (v18 & 0x3FFFFFFFFFFFFFFCLL) )
        goto LABEL_28;
    }
  }
  else
  {
    v20 = &v15[8 * v16];
  }
  do
  {
    v28 = *(_QWORD *)v5;
    v5 += 8;
    *(_QWORD *)v20 = v28;
    v20 += 8;
  }
  while ( v8 != v5 );
LABEL_28:
  v5 = (char *)*a1;
  v21 = &v15[8 * v19];
LABEL_29:
  *a1 = v15;
  a1[1] = (const void *)v6;
  a1[2] = v21;
  a1[3] = &v15[8 * v14];
  if ( v5 )
  {
    operator delete(v5);
    v6 = (unsigned __int64)a1[1];
  }
LABEL_31:
  *(_QWORD *)(v6 - 8) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

//----- (0000000000015E0C) ----------------------------------------------------
void *__fastcall protocol::DomainSockServer::instance(protocol::DomainSockServer *this)
{
  unsigned __int8 v1; // w8

  v1 = atomic_load((unsigned __int8 *)&qword_455A8);
  if ( (v1 & 1) == 0 && __cxa_guard_acquire(&qword_455A8) )
  {
    word_45440 = 0;
    byte_45442 = 0;
    qword_45560 = 0LL;
    unk_45568 = 0LL;
    qword_45550 = 0LL;
    unk_45558 = &qword_45560;
    xmmword_45540 = 0u;
    unk_45530 = 0u;
    unk_45520 = 0u;
    byte_45588 = 1;
    qword_45578 = 0LL;
    unk_45580 = 0LL;
    qword_45570 = (__int64)&qword_45578;
    qword_4559C = 0LL;
    dword_455A4 = 0;
    qword_45594 = 0LL;
    qword_4558C = 0LL;
    __cxa_atexit((void (__fastcall *)(void *))protocol::DomainSockServer::~DomainSockServer, &unk_45438, &off_45000);
    __cxa_guard_release(&qword_455A8);
  }
  return &unk_45438;
}
// 45000: using guessed type void *off_45000;
// 45440: using guessed type __int16 word_45440;
// 45442: using guessed type char byte_45442;
// 45540: using guessed type __int128 xmmword_45540;
// 45550: using guessed type __int64 qword_45550;
// 45560: using guessed type __int64 qword_45560;
// 45570: using guessed type __int64 qword_45570;
// 45578: using guessed type __int64 qword_45578;
// 45588: using guessed type char byte_45588;
// 4558C: using guessed type __int64 qword_4558C;
// 45594: using guessed type __int64 qword_45594;
// 4559C: using guessed type __int64 qword_4559C;
// 455A4: using guessed type int dword_455A4;
// 455A8: using guessed type __guard qword_455A8;

//----- (0000000000015EC8) ----------------------------------------------------
long double __fastcall protocol::DomainSockServer::DomainSockServer(protocol::DomainSockServer *this)
{
  long double result; // q0

  *(_OWORD *)&result = 0uLL;
  *((_WORD *)this + 4) = 0;
  *((_BYTE *)this + 10) = 0;
  *((_QWORD *)this + 37) = 0LL;
  *((_QWORD *)this + 38) = 0LL;
  *((_QWORD *)this + 35) = 0LL;
  *((_QWORD *)this + 36) = (char *)this + 296;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_BYTE *)this + 336) = 1;
  *((_QWORD *)this + 39) = (char *)this + 320;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 40) = 0LL;
  *((_QWORD *)this + 41) = 0LL;
  *((_DWORD *)this + 91) = 0;
  *(_QWORD *)((char *)this + 356) = 0LL;
  *(_QWORD *)((char *)this + 348) = 0LL;
  *(_QWORD *)((char *)this + 340) = 0LL;
  return result;
}

//----- (0000000000015F24) ----------------------------------------------------
void __fastcall protocol::DomainSockServer::~DomainSockServer(protocol::DomainSockServer *this)
{
  std::thread *v2; // x0
  char *v3; // x20
  std::__shared_weak_count *v4; // x19
  unsigned __int64 *v5; // x8
  unsigned __int64 v6; // x9

  v3 = (char *)this + 232;
  v2 = (std::thread *)*((_QWORD *)this + 29);
  *(v3 - 224) = 0;
  if ( v2 )
    std::thread::join(v2);
  if ( (*((_BYTE *)this + 344) & 1) != 0 )
    operator delete(*((void **)this + 45));
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(
    (__int64)this + 312,
    *((char **)this + 40));
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(
    (__int64)this + 288,
    *((char **)this + 37));
  std::mutex::~mutex((protocol::DomainSockServer *)((char *)this + 248));
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 30);
  if ( v4 )
  {
    v5 = (unsigned __int64 *)((char *)v4 + 8);
    do
      v6 = __ldaxr(v5);
    while ( __stlxr(v6 - 1, v5) );
    if ( !v6 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v4 + 16LL))(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

//----- (0000000000016004) ----------------------------------------------------
void __fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::~map(
        __int64 a1)
{
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(
    a1,
    *(char **)(a1 + 8));
}

//----- (000000000001600C) ----------------------------------------------------
void __fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::~map(
        __int64 a1)
{
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(
    a1,
    *(char **)(a1 + 8));
}

//----- (0000000000016014) ----------------------------------------------------
__int64 __fastcall std::shared_ptr<std::thread>::~shared_ptr(__int64 result)
{
  std::__shared_weak_count *v1; // x19
  unsigned __int64 *v2; // x8
  unsigned __int64 v3; // x9

  v1 = *(std::__shared_weak_count **)(result + 8);
  if ( v1 )
  {
    v2 = (unsigned __int64 *)((char *)v1 + 8);
    do
      v3 = __ldaxr(v2);
    while ( __stlxr(v3 - 1, v2) );
    if ( !v3 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v1 + 16LL))(v1);
      return std::__shared_weak_count::__release_weak(v1);
    }
  }
  return result;
}

//----- (000000000001606C) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::init(__int64 a1, __int64 *a2)
{
  unsigned __int64 v4; // x8
  __int64 v5; // x9
  char *v7; // x1
  unsigned __int64 v8; // x2
  unsigned __int64 v9; // x8
  char *v10; // x1
  size_t v11; // x2
  _QWORD *v12; // x0
  _QWORD *v13; // x20
  _QWORD *v14; // x22
  std::__shared_weak_count *v15; // x21
  unsigned __int64 *v16; // x8
  unsigned __int64 v17; // x9
  const char *v18; // x21
  size_t v19; // x0
  size_t v20; // x20
  char *v21; // x22
  const char *v22; // x20
  size_t v23; // x0
  size_t v24; // x19
  char *v25; // x21
  unsigned __int64 v26; // x22
  char v27; // w19
  unsigned __int64 v28; // x23
  char v29; // w20
  __int64 result; // x0
  _DWORD v31[4]; // [xsp+0h] [xbp-200h] BYREF
  void *v32; // [xsp+10h] [xbp-1F0h]
  int v33; // [xsp+18h] [xbp-1E8h] BYREF
  unsigned __int64 v34; // [xsp+20h] [xbp-1E0h] BYREF
  size_t v35; // [xsp+28h] [xbp-1D8h]
  void *v36; // [xsp+30h] [xbp-1D0h]
  _DWORD v37[4]; // [xsp+38h] [xbp-1C8h] BYREF
  void *v38; // [xsp+48h] [xbp-1B8h]
  int v39; // [xsp+50h] [xbp-1B0h] BYREF
  unsigned __int64 v40; // [xsp+58h] [xbp-1A8h] BYREF
  size_t v41; // [xsp+60h] [xbp-1A0h]
  void *v42; // [xsp+68h] [xbp-198h]
  __int128 v43; // [xsp+70h] [xbp-190h] BYREF
  __int64 v44; // [xsp+80h] [xbp-180h]
  __int64 v45; // [xsp+1B8h] [xbp-48h]

  v45 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = *(unsigned __int8 *)a2;
  if ( (v4 & 1) != 0 )
    v5 = a2[1];
  else
    v5 = v4 >> 1;
  if ( a2 != &qword_45420 && !v5 )
  {
    if ( (qword_45420 & 1) != 0 )
      v7 = (char *)qword_45430;
    else
      v7 = (char *)&qword_45420 + 1;
    if ( (qword_45420 & 1) != 0 )
      v8 = qword_45428;
    else
      v8 = (unsigned __int64)(unsigned __int8)qword_45420 >> 1;
    std::string::assign(a2, v7, v8);
  }
  if ( (__int64 *)(a1 + 344) != a2 )
  {
    v9 = *(unsigned __int8 *)a2;
    if ( (v9 & 1) != 0 )
      v10 = (char *)a2[2];
    else
      v10 = (char *)a2 + 1;
    if ( (v9 & 1) != 0 )
      v11 = a2[1];
    else
      v11 = v9 >> 1;
    std::string::assign((__int64 *)(a1 + 344), v10, v11);
  }
  if ( (protocol::DomainSockServer::create(a1, (__int64)a2) & 1) == 0 )
  {
    if ( (word_45358 & 1) != 0 )
      v22 = (const char *)qword_45368;
    else
      v22 = (char *)&word_45358 + 1;
    v33 = dword_45350;
    v35 = 0LL;
    v36 = 0LL;
    v34 = 0LL;
    v23 = strlen(v22);
    if ( v23 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v24 = v23;
    if ( v23 >= 0x17 )
    {
      v26 = (v23 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v25 = (char *)operator new(v26);
      v35 = v24;
      v36 = v25;
      v34 = v26 | 1;
    }
    else
    {
      v25 = (char *)&v34 + 1;
      LOBYTE(v34) = 2 * v23;
      if ( !v23 )
      {
LABEL_43:
        v25[v24] = 0;
        if ( (g3::logLevel(&v33) & 1) != 0 )
        {
          v31[3] = 0;
          v32 = 0LL;
          LOBYTE(v31[0]) = 20;
          strcpy((char *)v31 + 1, "DomainSock");
          v27 = g3::logTag(v31);
          if ( (v31[0] & 1) == 0 )
          {
            if ( (v34 & 1) == 0 )
              goto LABEL_46;
LABEL_60:
            operator delete(v36);
            if ( (v27 & 1) == 0 )
              return 0LL;
LABEL_61:
            LogCapture::LogCapture((LogCapture *)&v43, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
            std::__put_character_sequence<char,std::char_traits<char>>(
              (_QWORD *)&v43 + 1,
              (__int64)"local socket server init fail!",
              30LL);
            LogCapture::~LogCapture((LogCapture *)&v43);
            return 0LL;
          }
          operator delete(v32);
          if ( (v34 & 1) != 0 )
            goto LABEL_60;
        }
        else
        {
          v27 = 0;
          if ( (v34 & 1) != 0 )
            goto LABEL_60;
        }
LABEL_46:
        if ( (v27 & 1) == 0 )
          return 0LL;
        goto LABEL_61;
      }
    }
    memcpy(v25, v22, v24);
    goto LABEL_43;
  }
  *(_BYTE *)(a1 + 8) = 1;
  v43 = (unsigned __int64)protocol::DomainSockServer::run;
  v44 = a1;
  v12 = (_QWORD *)operator new(0x20uLL);
  v12[2] = 0LL;
  v13 = v12;
  v14 = v12 + 3;
  *v12 = off_43FE0;
  v12[1] = 0LL;
  sub_1B6F8(v12 + 3, &v43);
  v15 = *(std::__shared_weak_count **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v14;
  *(_QWORD *)(a1 + 240) = v13;
  if ( v15 )
  {
    v16 = (unsigned __int64 *)((char *)v15 + 8);
    do
      v17 = __ldaxr(v16);
    while ( __stlxr(v17 - 1, v16) );
    if ( !v17 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v15 + 16LL))(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ( (word_45318 & 1) != 0 )
    v18 = (const char *)qword_45328;
  else
    v18 = (char *)&word_45318 + 1;
  v39 = dword_45310;
  v41 = 0LL;
  v42 = 0LL;
  v40 = 0LL;
  v19 = strlen(v18);
  if ( v19 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v20 = v19;
  if ( v19 >= 0x17 )
  {
    v28 = (v19 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v21 = (char *)operator new(v28);
    v41 = v20;
    v42 = v21;
    v40 = v28 | 1;
    goto LABEL_49;
  }
  v21 = (char *)&v40 + 1;
  LOBYTE(v40) = 2 * v19;
  if ( v19 )
LABEL_49:
    memcpy(v21, v18, v20);
  v21[v20] = 0;
  if ( (g3::logLevel(&v39) & 1) == 0 )
  {
    v29 = 0;
    if ( (v40 & 1) != 0 )
      goto LABEL_64;
LABEL_53:
    if ( (v29 & 1) == 0 )
      goto LABEL_66;
    goto LABEL_65;
  }
  v37[3] = 0;
  v38 = 0LL;
  LOBYTE(v37[0]) = 20;
  strcpy((char *)v37 + 1, "DomainSock");
  v29 = g3::logTag(v37);
  if ( (v37[0] & 1) != 0 )
  {
    operator delete(v38);
    if ( (v40 & 1) != 0 )
      goto LABEL_64;
    goto LABEL_53;
  }
  if ( (v40 & 1) == 0 )
    goto LABEL_53;
LABEL_64:
  operator delete(v42);
  if ( (v29 & 1) != 0 )
  {
LABEL_65:
    LogCapture::LogCapture((LogCapture *)&v43, "DomainSock", (const LEVELS *)&dword_45310, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(
      (_QWORD *)&v43 + 1,
      (__int64)"local socket server init success!",
      33LL);
    LogCapture::~LogCapture((LogCapture *)&v43);
  }
LABEL_66:
  result = 1LL;
  *(_BYTE *)(a1 + 9) = 1;
  return result;
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 43FE0: using guessed type __int64 (__fastcall *off_43FE0[3])();
// 45310: using guessed type int dword_45310;
// 45318: using guessed type __int16 word_45318;
// 45328: using guessed type __int64 qword_45328;
// 45350: using guessed type int dword_45350;
// 45358: using guessed type __int16 word_45358;
// 45368: using guessed type __int64 qword_45368;
// 45420: using guessed type __int64 qword_45420;
// 45428: using guessed type __int64 qword_45428;
// 45430: using guessed type __int64 qword_45430;

//----- (0000000000016564) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::create(__int64 a1, __int64 a2)
{
  int v4; // w0
  const char *v5; // x1
  char *v6; // x0
  int v7; // w0
  __int64 result; // x0
  const char *v9; // x20
  size_t v10; // x0
  size_t v11; // x19
  char *v12; // x21
  const char *v13; // x21
  size_t v14; // x0
  size_t v15; // x20
  char *v16; // x22
  unsigned __int64 v17; // x22
  char v18; // w19
  _QWORD *v19; // x19
  __int64 v20; // x1
  int *v21; // x0
  char *v22; // x20
  __int64 v23; // x0
  const char *v24; // x21
  size_t v25; // x0
  size_t v26; // x20
  char *v27; // x22
  unsigned __int64 v28; // x23
  char v29; // w20
  const char *v30; // x21
  size_t v31; // x0
  size_t v32; // x20
  char *v33; // x22
  unsigned __int64 v34; // x23
  char v35; // w20
  const char *v36; // x21
  size_t v37; // x0
  size_t v38; // x20
  char *v39; // x22
  unsigned __int64 v40; // x23
  char v41; // w20
  const char *v42; // x21
  size_t v43; // x0
  size_t v44; // x20
  char *v45; // x22
  unsigned __int64 v46; // x23
  char v47; // w20
  _QWORD *v48; // x20
  __int64 v49; // x1
  int *v50; // x0
  char *v51; // x21
  __int64 v52; // x0
  unsigned __int64 v53; // x23
  char v54; // w20
  _QWORD *v55; // x20
  __int64 v56; // x1
  int *v57; // x0
  char *v58; // x21
  __int64 v59; // x0
  _QWORD *v60; // x20
  __int64 v61; // x1
  int *v62; // x0
  char *v63; // x21
  __int64 v64; // x0
  _DWORD v65[4]; // [xsp+10h] [xbp-2F0h] BYREF
  void *v66; // [xsp+20h] [xbp-2E0h]
  int v67; // [xsp+28h] [xbp-2D8h] BYREF
  unsigned __int64 v68; // [xsp+30h] [xbp-2D0h] BYREF
  size_t v69; // [xsp+38h] [xbp-2C8h]
  void *v70; // [xsp+40h] [xbp-2C0h]
  _DWORD v71[4]; // [xsp+48h] [xbp-2B8h] BYREF
  void *v72; // [xsp+58h] [xbp-2A8h]
  int v73; // [xsp+60h] [xbp-2A0h] BYREF
  unsigned __int64 v74; // [xsp+68h] [xbp-298h] BYREF
  size_t v75; // [xsp+70h] [xbp-290h]
  void *v76; // [xsp+78h] [xbp-288h]
  _DWORD v77[4]; // [xsp+80h] [xbp-280h] BYREF
  void *v78; // [xsp+90h] [xbp-270h]
  int v79; // [xsp+98h] [xbp-268h] BYREF
  unsigned __int64 v80; // [xsp+A0h] [xbp-260h] BYREF
  size_t v81; // [xsp+A8h] [xbp-258h]
  void *v82; // [xsp+B0h] [xbp-250h]
  int v83; // [xsp+BCh] [xbp-244h] BYREF
  char v84; // [xsp+C0h] [xbp-240h] BYREF
  _BYTE v85[15]; // [xsp+C1h] [xbp-23Fh]
  void *v86; // [xsp+D0h] [xbp-230h]
  int v87; // [xsp+D8h] [xbp-228h] BYREF
  unsigned __int64 v88; // [xsp+E0h] [xbp-220h] BYREF
  size_t v89; // [xsp+E8h] [xbp-218h]
  void *v90; // [xsp+F0h] [xbp-210h]
  char v91; // [xsp+F8h] [xbp-208h] BYREF
  _BYTE v92[15]; // [xsp+F9h] [xbp-207h]
  void *v93; // [xsp+108h] [xbp-1F8h]
  int v94; // [xsp+110h] [xbp-1F0h] BYREF
  unsigned __int64 v95; // [xsp+118h] [xbp-1E8h] BYREF
  size_t v96; // [xsp+120h] [xbp-1E0h]
  void *v97; // [xsp+128h] [xbp-1D8h]
  char v98; // [xsp+130h] [xbp-1D0h] BYREF
  _BYTE v99[15]; // [xsp+131h] [xbp-1CFh]
  void *v100; // [xsp+140h] [xbp-1C0h]
  int v101; // [xsp+148h] [xbp-1B8h] BYREF
  unsigned __int64 v102; // [xsp+150h] [xbp-1B0h] BYREF
  size_t v103; // [xsp+158h] [xbp-1A8h]
  void *v104; // [xsp+160h] [xbp-1A0h]
  int optval; // [xsp+16Ch] [xbp-194h] BYREF
  char v106[8]; // [xsp+170h] [xbp-190h] BYREF
  _QWORD v107[41]; // [xsp+178h] [xbp-188h] BYREF

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v4 = socket(1, 1, 0);
  *(_DWORD *)a1 = v4;
  if ( v4 == -1 )
  {
    if ( (word_45358 & 1) != 0 )
      v9 = (const char *)qword_45368;
    else
      v9 = (char *)&word_45358 + 1;
    v101 = dword_45350;
    v103 = 0LL;
    v104 = 0LL;
    v102 = 0LL;
    v10 = strlen(v9);
    if ( v10 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v11 = v10;
    if ( v10 >= 0x17 )
    {
      v17 = (v10 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v12 = (char *)operator new(v17);
      v103 = v11;
      v104 = v12;
      v102 = v17 | 1;
    }
    else
    {
      v12 = (char *)&v102 + 1;
      LOBYTE(v102) = 2 * v10;
      if ( !v10 )
      {
LABEL_27:
        v12[v11] = 0;
        if ( (g3::logLevel(&v101) & 1) != 0 )
        {
          *(_QWORD *)&v99[7] = 7037696LL;
          v100 = 0LL;
          v98 = 20;
          *(_QWORD *)v99 = *(_QWORD *)"DomainSock";
          v18 = g3::logTag(&v98);
          if ( (v98 & 1) == 0 )
          {
            if ( (v102 & 1) == 0 )
              goto LABEL_30;
LABEL_51:
            operator delete(v104);
            if ( (v18 & 1) != 0 )
              goto LABEL_31;
            return 0LL;
          }
          operator delete(v100);
          if ( (v102 & 1) != 0 )
            goto LABEL_51;
        }
        else
        {
          v18 = 0;
          if ( (v102 & 1) != 0 )
            goto LABEL_51;
        }
LABEL_30:
        if ( (v18 & 1) != 0 )
        {
LABEL_31:
          LogCapture::LogCapture((LogCapture *)v106, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
          v19 = std::__put_character_sequence<char,std::char_traits<char>>(
                  v107,
                  (__int64)"create socket failed!, error is ",
                  32LL);
          v21 = (int *)__errno(v19, v20);
          v22 = strerror(*v21);
          v23 = strlen(v22);
          std::__put_character_sequence<char,std::char_traits<char>>(v19, (__int64)v22, v23);
          LogCapture::~LogCapture((LogCapture *)v106);
          return 0LL;
        }
        return 0LL;
      }
    }
    memcpy(v12, v9, v11);
    goto LABEL_27;
  }
  optval = 10485760;
  if ( setsockopt(v4, 1, 7, &optval, 4u) == -1 )
  {
    if ( (word_45358 & 1) != 0 )
      v13 = (const char *)qword_45368;
    else
      v13 = (char *)&word_45358 + 1;
    v94 = dword_45350;
    v96 = 0LL;
    v97 = 0LL;
    v95 = 0LL;
    v14 = strlen(v13);
    if ( v14 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_127;
    v15 = v14;
    if ( v14 >= 0x17 )
    {
      v28 = (v14 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v16 = (char *)operator new(v28);
      v96 = v15;
      v97 = v16;
      v95 = v28 | 1;
    }
    else
    {
      v16 = (char *)&v95 + 1;
      LOBYTE(v95) = 2 * v14;
      if ( !v14 )
      {
LABEL_43:
        v16[v15] = 0;
        if ( (g3::logLevel(&v94) & 1) != 0 )
        {
          *(_QWORD *)&v92[7] = 7037696LL;
          v93 = 0LL;
          v91 = 20;
          *(_QWORD *)v92 = *(_QWORD *)"DomainSock";
          v29 = g3::logTag(&v91);
          if ( (v91 & 1) == 0 )
          {
            if ( (v95 & 1) == 0 )
              goto LABEL_46;
LABEL_70:
            operator delete(v97);
            if ( (v29 & 1) == 0 )
              goto LABEL_126;
            goto LABEL_71;
          }
          operator delete(v93);
          if ( (v95 & 1) != 0 )
            goto LABEL_70;
        }
        else
        {
          v29 = 0;
          if ( (v95 & 1) != 0 )
            goto LABEL_70;
        }
LABEL_46:
        if ( (v29 & 1) == 0 )
          goto LABEL_126;
LABEL_71:
        LogCapture::LogCapture((LogCapture *)v106, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
        std::__put_character_sequence<char,std::char_traits<char>>(v107, (__int64)"set send buf size error", 23LL);
LABEL_125:
        LogCapture::~LogCapture((LogCapture *)v106);
        goto LABEL_126;
      }
    }
    memcpy(v16, v13, v15);
    goto LABEL_43;
  }
  optval = 10485760;
  if ( setsockopt(*(_DWORD *)a1, 1, 8, &optval, 4u) == -1 )
  {
    if ( (word_45358 & 1) != 0 )
      v24 = (const char *)qword_45368;
    else
      v24 = (char *)&word_45358 + 1;
    v87 = dword_45350;
    v89 = 0LL;
    v90 = 0LL;
    v88 = 0LL;
    v25 = strlen(v24);
    if ( v25 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_127;
    v26 = v25;
    if ( v25 >= 0x17 )
    {
      v34 = (v25 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v27 = (char *)operator new(v34);
      v89 = v26;
      v90 = v27;
      v88 = v34 | 1;
    }
    else
    {
      v27 = (char *)&v88 + 1;
      LOBYTE(v88) = 2 * v25;
      if ( !v25 )
      {
LABEL_62:
        v27[v26] = 0;
        if ( (g3::logLevel(&v87) & 1) != 0 )
        {
          *(_QWORD *)&v85[7] = 0x7265767200LL;
          v86 = 0LL;
          v84 = 24;
          *(_QWORD *)v85 = *(_QWORD *)"DomainServer";
          v35 = g3::logTag(&v84);
          if ( (v84 & 1) == 0 )
          {
            if ( (v88 & 1) == 0 )
              goto LABEL_65;
LABEL_89:
            operator delete(v90);
            if ( (v35 & 1) == 0 )
              goto LABEL_126;
            goto LABEL_90;
          }
          operator delete(v86);
          if ( (v88 & 1) != 0 )
            goto LABEL_89;
        }
        else
        {
          v35 = 0;
          if ( (v88 & 1) != 0 )
            goto LABEL_89;
        }
LABEL_65:
        if ( (v35 & 1) == 0 )
          goto LABEL_126;
LABEL_90:
        LogCapture::LogCapture((LogCapture *)v106, "DomainServer", (const LEVELS *)&dword_45350, "", 6, 0LL);
        std::__put_character_sequence<char,std::char_traits<char>>(v107, (__int64)"set recv buf size error", 23LL);
        goto LABEL_125;
      }
    }
    memcpy(v27, v24, v26);
    goto LABEL_62;
  }
  v83 = 1;
  if ( setsockopt(*(_DWORD *)a1, 1, 2, &v83, 4u) == -1 )
  {
    if ( (word_45358 & 1) != 0 )
      v30 = (const char *)qword_45368;
    else
      v30 = (char *)&word_45358 + 1;
    v79 = dword_45350;
    v81 = 0LL;
    v82 = 0LL;
    v80 = 0LL;
    v31 = strlen(v30);
    if ( v31 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_127;
    v32 = v31;
    if ( v31 >= 0x17 )
    {
      v40 = (v31 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v33 = (char *)operator new(v40);
      v81 = v32;
      v82 = v33;
      v80 = v40 | 1;
    }
    else
    {
      v33 = (char *)&v80 + 1;
      LOBYTE(v80) = 2 * v31;
      if ( !v31 )
      {
LABEL_81:
        v33[v32] = 0;
        if ( (g3::logLevel(&v79) & 1) != 0 )
        {
          v77[3] = 0;
          v78 = 0LL;
          LOBYTE(v77[0]) = 20;
          strcpy((char *)v77 + 1, "DomainSock");
          v41 = g3::logTag(v77);
          if ( (v77[0] & 1) == 0 )
          {
            if ( (v80 & 1) == 0 )
              goto LABEL_84;
LABEL_108:
            operator delete(v82);
            if ( (v41 & 1) == 0 )
              goto LABEL_126;
            goto LABEL_109;
          }
          operator delete(v78);
          if ( (v80 & 1) != 0 )
            goto LABEL_108;
        }
        else
        {
          v41 = 0;
          if ( (v80 & 1) != 0 )
            goto LABEL_108;
        }
LABEL_84:
        if ( (v41 & 1) == 0 )
          goto LABEL_126;
LABEL_109:
        LogCapture::LogCapture((LogCapture *)v106, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
        v48 = std::__put_character_sequence<char,std::char_traits<char>>(
                v107,
                (__int64)"setsockopt SO_REUSEADDR failed! error is ",
                41LL);
        v50 = (int *)__errno(v48, v49);
        v51 = strerror(*v50);
        v52 = strlen(v51);
        std::__put_character_sequence<char,std::char_traits<char>>(v48, (__int64)v51, v52);
        goto LABEL_125;
      }
    }
    memcpy(v33, v30, v32);
    goto LABEL_81;
  }
  *(_OWORD *)(a1 + 12) = 0u;
  *(_OWORD *)(a1 + 106) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 76) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_WORD *)(a1 + 12) = 1;
  *(_BYTE *)(a1 + 14) = 0;
  if ( (*(_BYTE *)a2 & 1) != 0 )
    v5 = *(const char **)(a2 + 16);
  else
    v5 = (const char *)(a2 + 1);
  v6 = strcpy((char *)(a1 + 15), v5);
  v7 = strlen(v6);
  if ( bind(*(_DWORD *)a1, (const struct sockaddr *)(a1 + 12), v7 + 3) == -1 )
  {
    if ( (word_45358 & 1) != 0 )
      v36 = (const char *)qword_45368;
    else
      v36 = (char *)&word_45358 + 1;
    v73 = dword_45350;
    v75 = 0LL;
    v76 = 0LL;
    v74 = 0LL;
    v37 = strlen(v36);
    if ( v37 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_127;
    v38 = v37;
    if ( v37 >= 0x17 )
    {
      v46 = (v37 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v39 = (char *)operator new(v46);
      v75 = v38;
      v76 = v39;
      v74 = v46 | 1;
    }
    else
    {
      v39 = (char *)&v74 + 1;
      LOBYTE(v74) = 2 * v37;
      if ( !v37 )
      {
LABEL_100:
        v39[v38] = 0;
        if ( (g3::logLevel(&v73) & 1) != 0 )
        {
          v71[3] = 0;
          v72 = 0LL;
          LOBYTE(v71[0]) = 20;
          strcpy((char *)v71 + 1, "DomainSock");
          v47 = g3::logTag(v71);
          if ( (v71[0] & 1) == 0 )
          {
            if ( (v74 & 1) == 0 )
              goto LABEL_103;
LABEL_120:
            operator delete(v76);
            if ( (v47 & 1) == 0 )
              goto LABEL_126;
            goto LABEL_121;
          }
          operator delete(v72);
          if ( (v74 & 1) != 0 )
            goto LABEL_120;
        }
        else
        {
          v47 = 0;
          if ( (v74 & 1) != 0 )
            goto LABEL_120;
        }
LABEL_103:
        if ( (v47 & 1) == 0 )
          goto LABEL_126;
LABEL_121:
        LogCapture::LogCapture((LogCapture *)v106, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
        v55 = std::__put_character_sequence<char,std::char_traits<char>>(
                v107,
                (__int64)"bind socket failed! error is ",
                29LL);
        v57 = (int *)__errno(v55, v56);
        v58 = strerror(*v57);
        v59 = strlen(v58);
        std::__put_character_sequence<char,std::char_traits<char>>(v55, (__int64)v58, v59);
        goto LABEL_125;
      }
    }
    memcpy(v39, v36, v38);
    goto LABEL_100;
  }
  if ( listen(*(_DWORD *)a1, 10) != -1 )
    return 1LL;
  if ( (word_45358 & 1) != 0 )
    v42 = (const char *)qword_45368;
  else
    v42 = (char *)&word_45358 + 1;
  v67 = dword_45350;
  v69 = 0LL;
  v70 = 0LL;
  v68 = 0LL;
  v43 = strlen(v42);
  if ( v43 >= 0xFFFFFFFFFFFFFFF0LL )
LABEL_127:
    std::__basic_string_common<true>::__throw_length_error();
  v44 = v43;
  if ( v43 >= 0x17 )
  {
    v53 = (v43 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v45 = (char *)operator new(v53);
    v69 = v44;
    v70 = v45;
    v68 = v53 | 1;
    goto LABEL_111;
  }
  v45 = (char *)&v68 + 1;
  LOBYTE(v68) = 2 * v43;
  if ( v43 )
LABEL_111:
    memcpy(v45, v42, v44);
  v45[v44] = 0;
  if ( (g3::logLevel(&v67) & 1) == 0 )
  {
    v54 = 0;
    if ( (v68 & 1) != 0 )
      goto LABEL_123;
LABEL_115:
    if ( (v54 & 1) == 0 )
      goto LABEL_126;
    goto LABEL_124;
  }
  v65[3] = 0;
  v66 = 0LL;
  LOBYTE(v65[0]) = 20;
  strcpy((char *)v65 + 1, "DomainSock");
  v54 = g3::logTag(v65);
  if ( (v65[0] & 1) == 0 )
  {
    if ( (v68 & 1) == 0 )
      goto LABEL_115;
    goto LABEL_123;
  }
  operator delete(v66);
  if ( (v68 & 1) == 0 )
    goto LABEL_115;
LABEL_123:
  operator delete(v70);
  if ( (v54 & 1) != 0 )
  {
LABEL_124:
    LogCapture::LogCapture((LogCapture *)v106, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
    v60 = std::__put_character_sequence<char,std::char_traits<char>>(
            v107,
            (__int64)"listen socket failed! error is ",
            31LL);
    v62 = (int *)__errno(v60, v61);
    v63 = strerror(*v62);
    v64 = strlen(v63);
    std::__put_character_sequence<char,std::char_traits<char>>(v60, (__int64)v63, v64);
    goto LABEL_125;
  }
LABEL_126:
  close(*(_DWORD *)a1);
  result = 0LL;
  *(_DWORD *)a1 = -1;
  return result;
}
// 16840: variable 'v20' is possibly undefined
// 16DDC: variable 'v49' is possibly undefined
// 16F04: variable 'v56' is possibly undefined
// 16F8C: variable 'v61' is possibly undefined
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);
// 45350: using guessed type int dword_45350;
// 45358: using guessed type __int16 word_45358;
// 45368: using guessed type __int64 qword_45368;
// 16564: using guessed type char var_190[8];

//----- (0000000000017174) ----------------------------------------------------
void __fastcall protocol::DomainSockServer::run(protocol::DomainSockServer *this)
{
  unsigned __int64 v2; // x21
  unsigned __int64 v3; // x20
  pthread_t v4; // x0
  bool v5; // cf
  pthread_t v6; // x20
  unsigned __int64 v7; // x8
  char *v8; // x22
  size_t v9; // x21
  const char *v10; // x1
  const char *v11; // x1
  struct sockaddr *v12; // x26
  int v13; // w0
  const char *v14; // x23
  size_t v15; // x0
  size_t v16; // x22
  char *v17; // x24
  const char *v18; // x23
  size_t v19; // x0
  size_t v20; // x22
  char *v21; // x24
  char v22; // w22
  char v23; // w22
  int v24; // w0
  const char *v25; // x22
  size_t v26; // x0
  size_t v27; // x23
  struct sockaddr *v28; // x25
  char *v29; // x26
  unsigned __int64 v30; // x21
  char v31; // w22
  _QWORD *v32; // x22
  __int64 v33; // x1
  int *v34; // x0
  char *v35; // x23
  __int64 v36; // x0
  _QWORD *v37; // x0
  char v38; // [xsp+60h] [xbp-670h] BYREF
  _BYTE v39[15]; // [xsp+61h] [xbp-66Fh]
  void *v40; // [xsp+70h] [xbp-660h]
  int v41; // [xsp+78h] [xbp-658h] BYREF
  unsigned __int64 v42; // [xsp+80h] [xbp-650h] BYREF
  size_t v43; // [xsp+88h] [xbp-648h]
  void *v44; // [xsp+90h] [xbp-640h]
  void *v45; // [xsp+98h] [xbp-638h] BYREF
  void *src; // [xsp+A0h] [xbp-630h]
  __int64 v47; // [xsp+A8h] [xbp-628h]
  char v48; // [xsp+B0h] [xbp-620h] BYREF
  _BYTE v49[15]; // [xsp+B1h] [xbp-61Fh]
  void *v50; // [xsp+C0h] [xbp-610h]
  int v51; // [xsp+C8h] [xbp-608h] BYREF
  unsigned __int64 v52; // [xsp+D0h] [xbp-600h] BYREF
  size_t v53; // [xsp+D8h] [xbp-5F8h]
  void *v54; // [xsp+E0h] [xbp-5F0h]
  char v55; // [xsp+E8h] [xbp-5E8h] BYREF
  _BYTE v56[15]; // [xsp+E9h] [xbp-5E7h]
  void *v57; // [xsp+F8h] [xbp-5D8h]
  int v58; // [xsp+100h] [xbp-5D0h] BYREF
  unsigned __int64 v59; // [xsp+108h] [xbp-5C8h] BYREF
  size_t v60; // [xsp+110h] [xbp-5C0h]
  void *v61; // [xsp+118h] [xbp-5B8h]
  socklen_t addr_len; // [xsp+124h] [xbp-5ACh] BYREF
  char v63[8]; // [xsp+128h] [xbp-5A8h] BYREF
  __int64 v64[40]; // [xsp+130h] [xbp-5A0h] BYREF
  __int64 buf; // [xsp+270h] [xbp-460h] BYREF
  __int64 v66; // [xsp+278h] [xbp-458h] BYREF
  void *v67; // [xsp+280h] [xbp-450h]
  __int64 v68; // [xsp+670h] [xbp-60h]

  v68 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *((unsigned __int8 *)this + 344);
  if ( (v2 & 1) != 0 )
    v3 = *((_QWORD *)this + 44);
  else
    v3 = v2 >> 1;
  v4 = pthread_self();
  v5 = v3 >= 0x10;
  v6 = v4;
  if ( !v5 )
  {
    if ( (v2 & 1) != 0 )
      v10 = (const char *)*((_QWORD *)this + 45);
    else
      v10 = (char *)this + 345;
    pthread_setname_np(v4, v10);
    if ( !*((_BYTE *)this + 8) )
      return;
    goto LABEL_26;
  }
  v66 = 0LL;
  buf = 0LL;
  v67 = 0LL;
  v7 = *((_QWORD *)this + 44);
  if ( (v2 & 1) != 0 )
  {
    v8 = (char *)*((_QWORD *)this + 45);
  }
  else
  {
    v7 = (unsigned int)v2 >> 1;
    v8 = (char *)this + 345;
  }
  if ( v7 >= 0xF )
    v9 = 15LL;
  else
    v9 = v7;
  LOBYTE(buf) = 2 * v9;
  if ( v9 )
    memcpy((char *)&buf + 1, v8, v9);
  *((_BYTE *)&buf + v9 + 1) = 0;
  if ( (buf & 1) != 0 )
    v11 = (const char *)v67;
  else
    v11 = (char *)&buf + 1;
  pthread_setname_np(v6, v11);
  if ( (buf & 1) != 0 )
    operator delete(v67);
  if ( *((_BYTE *)this + 8) )
  {
LABEL_26:
    v12 = (struct sockaddr *)((char *)this + 122);
    while ( 1 )
    {
      addr_len = 0;
      v13 = accept(*(_DWORD *)this, v12, &addr_len);
      *((_DWORD *)this + 1) = v13;
      if ( v13 != -1 )
      {
        *((_BYTE *)this + 10) = 1;
        if ( (word_45318 & 1) != 0 )
          v14 = (const char *)qword_45328;
        else
          v14 = (char *)&word_45318 + 1;
        v51 = dword_45310;
        v52 = 0LL;
        v53 = 0LL;
        v54 = 0LL;
        v15 = strlen(v14);
        if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v16 = v15;
        if ( v15 >= 0x17 )
        {
          v17 = (char *)operator new((v15 + 16) & 0xFFFFFFFFFFFFFFF0LL);
          v53 = v16;
          v54 = v17;
          v52 = (v16 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
        }
        else
        {
          v17 = (char *)&v52 + 1;
          LOBYTE(v52) = 2 * v15;
          if ( !v15 )
          {
LABEL_44:
            v17[v16] = 0;
            if ( (g3::logLevel(&v51) & 1) != 0 )
            {
              *(_QWORD *)&v49[7] = 7037696LL;
              v50 = 0LL;
              v48 = 20;
              *(_QWORD *)v49 = *(_QWORD *)"DomainSock";
              v22 = g3::logTag(&v48);
              if ( (v48 & 1) == 0 )
              {
                if ( (v52 & 1) == 0 )
                  goto LABEL_47;
LABEL_61:
                operator delete(v54);
                if ( (v22 & 1) != 0 )
                {
LABEL_62:
                  LogCapture::LogCapture((LogCapture *)&buf, "DomainSock", (const LEVELS *)&dword_45310, "", 6, 0LL);
                  std::__put_character_sequence<char,std::char_traits<char>>(
                    &v66,
                    (__int64)"accept client success",
                    21LL);
                  LogCapture::~LogCapture((LogCapture *)&buf);
                }
LABEL_63:
                v45 = 0LL;
                src = 0LL;
                v47 = 0LL;
                while ( *((_BYTE *)this + 8) )
                {
                  v24 = recv(*((_DWORD *)this + 1), &buf, 0x400uLL, 0);
                  if ( v24 <= 0 )
                  {
                    v41 = dword_45350;
                    if ( (word_45358 & 1) != 0 )
                      v25 = (const char *)qword_45368;
                    else
                      v25 = (char *)&word_45358 + 1;
                    v42 = 0LL;
                    v43 = 0LL;
                    v44 = 0LL;
                    v26 = strlen(v25);
                    if ( v26 >= 0xFFFFFFFFFFFFFFF0LL )
                      std::__basic_string_common<true>::__throw_length_error();
                    v27 = v26;
                    v28 = v12;
                    if ( v26 >= 0x17 )
                    {
                      v30 = (v26 + 16) & 0xFFFFFFFFFFFFFFF0LL;
                      v29 = (char *)operator new(v30);
                      v43 = v27;
                      v44 = v29;
                      v42 = v30 | 1;
                    }
                    else
                    {
                      v29 = (char *)&v42 + 1;
                      LOBYTE(v42) = 2 * v26;
                      if ( !v26 )
                      {
LABEL_77:
                        v29[v27] = 0;
                        v12 = v28;
                        if ( (g3::logLevel(&v41) & 1) != 0 )
                        {
                          *(_QWORD *)&v39[7] = 7037696LL;
                          v40 = 0LL;
                          v38 = 20;
                          *(_QWORD *)v39 = *(_QWORD *)"DomainSock";
                          v31 = g3::logTag(&v38);
                          if ( (v38 & 1) != 0 )
                          {
                            operator delete(v40);
                            if ( (v42 & 1) == 0 )
                              goto LABEL_80;
                          }
                          else if ( (v42 & 1) == 0 )
                          {
LABEL_80:
                            if ( (v31 & 1) == 0 )
                              break;
LABEL_90:
                            LogCapture::LogCapture(
                              (LogCapture *)v63,
                              "DomainSock",
                              (const LEVELS *)&dword_45350,
                              "",
                              6,
                              0LL);
                            v37 = std::__put_character_sequence<char,std::char_traits<char>>(
                                    v64,
                                    (__int64)"recv error:",
                                    11LL);
                            std::ostream::operator<<(v37);
                            LogCapture::~LogCapture((LogCapture *)v63);
                            break;
                          }
                        }
                        else
                        {
                          v31 = 0;
                          if ( (v42 & 1) == 0 )
                            goto LABEL_80;
                        }
                        operator delete(v44);
                        if ( (v31 & 1) == 0 )
                          break;
                        goto LABEL_90;
                      }
                    }
                    memcpy(v29, v25, v27);
                    goto LABEL_77;
                  }
                  std::vector<unsigned char>::insert<char *>(
                    (__int64)&v45,
                    (char *)src,
                    (char *)&buf,
                    (char *)&buf + v24);
                  while ( (protocol::DomainSockServer::processLoop((__int64)this, (__int64)&v45) & 1) != 0 )
                    ;
                }
                close(*((_DWORD *)this + 1));
                *((_BYTE *)this + 10) = 0;
                if ( v45 )
                {
                  src = v45;
                  operator delete(v45);
                }
                goto LABEL_93;
              }
              operator delete(v50);
              if ( (v52 & 1) != 0 )
                goto LABEL_61;
            }
            else
            {
              v22 = 0;
              if ( (v52 & 1) != 0 )
                goto LABEL_61;
            }
LABEL_47:
            if ( (v22 & 1) != 0 )
              goto LABEL_62;
            goto LABEL_63;
          }
        }
        memcpy(v17, v14, v16);
        goto LABEL_44;
      }
      v58 = dword_45330;
      if ( (word_45338 & 1) != 0 )
        v18 = (const char *)qword_45348;
      else
        v18 = (char *)&word_45338 + 1;
      v59 = 0LL;
      v60 = 0LL;
      v61 = 0LL;
      v19 = strlen(v18);
      if ( v19 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v20 = v19;
      if ( v19 >= 0x17 )
      {
        v21 = (char *)operator new((v19 + 16) & 0xFFFFFFFFFFFFFFF0LL);
        v60 = v20;
        v61 = v21;
        v59 = (v20 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
      }
      else
      {
        v21 = (char *)&v59 + 1;
        LOBYTE(v59) = 2 * v19;
        if ( !v19 )
          goto LABEL_53;
      }
      memcpy(v21, v18, v20);
LABEL_53:
      v21[v20] = 0;
      if ( (g3::logLevel(&v58) & 1) != 0 )
      {
        *(_QWORD *)&v56[7] = 7037696LL;
        v57 = 0LL;
        v55 = 20;
        *(_QWORD *)v56 = *(_QWORD *)"DomainSock";
        v23 = g3::logTag(&v55);
        if ( (v55 & 1) != 0 )
        {
          operator delete(v57);
          if ( (v59 & 1) != 0 )
            goto LABEL_85;
          goto LABEL_56;
        }
        if ( (v59 & 1) == 0 )
          goto LABEL_56;
LABEL_85:
        operator delete(v61);
        if ( (v23 & 1) != 0 )
          goto LABEL_86;
LABEL_93:
        if ( !*((_BYTE *)this + 8) )
          return;
      }
      else
      {
        v23 = 0;
        if ( (v59 & 1) != 0 )
          goto LABEL_85;
LABEL_56:
        if ( (v23 & 1) == 0 )
          goto LABEL_93;
LABEL_86:
        LogCapture::LogCapture((LogCapture *)&buf, "DomainSock", (const LEVELS *)&dword_45330, "", 6, 0LL);
        v32 = std::__put_character_sequence<char,std::char_traits<char>>(
                &v66,
                (__int64)"accept client failed! error is ",
                31LL);
        v34 = (int *)__errno(v32, v33);
        v35 = strerror(*v34);
        v36 = strlen(v35);
        std::__put_character_sequence<char,std::char_traits<char>>(v32, (__int64)v35, v36);
        LogCapture::~LogCapture((LogCapture *)&buf);
        if ( !*((_BYTE *)this + 8) )
          return;
      }
    }
  }
}
// 17200: conditional instruction was optimized away because x21.8<10u
// 17208: conditional instruction was optimized away because x21.8<10u
// 17778: variable 'v33' is possibly undefined
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);
// 45310: using guessed type int dword_45310;
// 45318: using guessed type __int16 word_45318;
// 45328: using guessed type __int64 qword_45328;
// 45330: using guessed type int dword_45330;
// 45338: using guessed type __int16 word_45338;
// 45348: using guessed type __int64 qword_45348;
// 45350: using guessed type int dword_45350;
// 45358: using guessed type __int16 word_45358;
// 45368: using guessed type __int64 qword_45368;
// 17174: using guessed type char var_5A8[8];
// 17174: using guessed type __int64 anonymous_0[40];

//----- (00000000000179C4) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::isInited(protocol::DomainSockServer *this)
{
  return *((unsigned __int8 *)this + 9);
}

//----- (00000000000179CC) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::isConnected(protocol::DomainSockServer *this)
{
  return *((unsigned __int8 *)this + 10);
}

//----- (00000000000179D4) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::addPlugin(__int64 a1, __int128 *a2, _QWORD *a3)
{
  _QWORD *v4; // x0
  _QWORD *v5; // x8
  __int64 v6; // x19
  __int64 result; // x0
  __int64 (*v8)(void); // x8
  _QWORD v9[4]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v10; // [xsp+20h] [xbp-40h]
  __int64 v11; // [xsp+38h] [xbp-28h]

  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::operator[](
         a1 + 288,
         a2);
  v5 = (_QWORD *)a3[4];
  v6 = (__int64)v4;
  if ( v5 )
  {
    if ( a3 == v5 )
    {
      v10 = v9;
      (*(void (__fastcall **)(_QWORD *, _QWORD *, _QWORD *))(*v5 + 24LL))(v5, v5, v9);
    }
    else
    {
      v10 = (*(_QWORD *(__fastcall **)(_QWORD *, _QWORD))(*v5 + 16LL))(v5, a3[4]);
    }
  }
  else
  {
    v10 = 0LL;
  }
  sub_1BB50(v9, v6);
  result = (__int64)v10;
  if ( v9 == v10 )
  {
    v8 = *(__int64 (**)(void))(*v10 + 32LL);
  }
  else
  {
    if ( !v10 )
      return result;
    v8 = *(__int64 (**)(void))(*v10 + 40LL);
  }
  return v8();
}

//----- (0000000000017AB0) ----------------------------------------------------
_QWORD *__fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::operator[](
        __int64 a1,
        __int128 *a2)
{
  __int64 *v4; // x0
  _QWORD *v5; // x19
  __int64 *v6; // x21
  __int128 v7; // q0
  size_t v8; // x22
  const void *v9; // x23
  void *v10; // x24
  __int64 v11; // x8
  __int64 v12; // x8
  __int64 *v13; // x1
  __int64 v15[2]; // [xsp+0h] [xbp-50h] BYREF

  v15[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::__find_equal<std::string>(
         a1,
         v15,
         (unsigned __int8 *)a2);
  v5 = (_QWORD *)*v4;
  if ( *v4 )
    return v5 + 8;
  v6 = v4;
  v5 = (_QWORD *)operator new(0x70uLL);
  v5[4] = 0LL;
  v5[5] = 0LL;
  v5[6] = 0LL;
  if ( (*(_BYTE *)a2 & 1) != 0 )
  {
    v8 = *((_QWORD *)a2 + 1);
    if ( v8 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v9 = (const void *)*((_QWORD *)a2 + 2);
    if ( v8 >= 0x17 )
    {
      v10 = (void *)operator new((v8 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v5[5] = v8;
      v5[6] = v10;
      v5[4] = (v8 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v10 = (char *)v5 + 33;
      *((_BYTE *)v5 + 32) = 2 * v8;
      if ( !v8 )
        goto LABEL_10;
    }
    memcpy(v10, v9, v8);
LABEL_10:
    *((_BYTE *)v10 + v8) = 0;
    goto LABEL_11;
  }
  v7 = *a2;
  v5[6] = *((_QWORD *)a2 + 2);
  *((_OWORD *)v5 + 2) = v7;
LABEL_11:
  v11 = v15[0];
  v5[12] = 0LL;
  *v5 = 0LL;
  v5[1] = 0LL;
  v5[2] = v11;
  *v6 = (__int64)v5;
  v12 = **(_QWORD **)a1;
  if ( v12 )
  {
    *(_QWORD *)a1 = v12;
    v13 = (__int64 *)*v6;
  }
  else
  {
    v13 = v5;
  }
  std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(*(__int64 **)(a1 + 8), v13);
  ++*(_QWORD *)(a1 + 16);
  return v5 + 8;
}

//----- (0000000000017C18) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::addPlugin(__int64 a1, __int128 *a2, _QWORD *a3)
{
  _QWORD *v4; // x0
  _QWORD *v5; // x8
  __int64 v6; // x19
  __int64 result; // x0
  __int64 (*v8)(void); // x8
  _QWORD v9[4]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v10; // [xsp+20h] [xbp-40h]
  __int64 v11; // [xsp+38h] [xbp-28h]

  v11 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::operator[](
         a1 + 312,
         a2);
  v5 = (_QWORD *)a3[4];
  v6 = (__int64)v4;
  if ( v5 )
  {
    if ( a3 == v5 )
    {
      v10 = v9;
      (*(void (__fastcall **)(_QWORD *, _QWORD *, _QWORD *))(*v5 + 24LL))(v5, v5, v9);
    }
    else
    {
      v10 = (*(_QWORD *(__fastcall **)(_QWORD *, _QWORD))(*v5 + 16LL))(v5, a3[4]);
    }
  }
  else
  {
    v10 = 0LL;
  }
  sub_1BDE4(v9, v6);
  result = (__int64)v10;
  if ( v9 == v10 )
  {
    v8 = *(__int64 (**)(void))(*v10 + 32LL);
  }
  else
  {
    if ( !v10 )
      return result;
    v8 = *(__int64 (**)(void))(*v10 + 40LL);
  }
  return v8();
}

//----- (0000000000017CF4) ----------------------------------------------------
_QWORD *__fastcall std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::operator[](
        __int64 a1,
        __int128 *a2)
{
  __int64 *v4; // x0
  _QWORD *v5; // x19
  __int64 *v6; // x21
  __int128 v7; // q0
  size_t v8; // x22
  const void *v9; // x23
  void *v10; // x24
  __int64 v11; // x8
  __int64 v12; // x8
  __int64 *v13; // x1
  __int64 v15[2]; // [xsp+0h] [xbp-50h] BYREF

  v15[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::__find_equal<std::string>(
         a1,
         v15,
         (unsigned __int8 *)a2);
  v5 = (_QWORD *)*v4;
  if ( *v4 )
    return v5 + 8;
  v6 = v4;
  v5 = (_QWORD *)operator new(0x70uLL);
  v5[4] = 0LL;
  v5[5] = 0LL;
  v5[6] = 0LL;
  if ( (*(_BYTE *)a2 & 1) != 0 )
  {
    v8 = *((_QWORD *)a2 + 1);
    if ( v8 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v9 = (const void *)*((_QWORD *)a2 + 2);
    if ( v8 >= 0x17 )
    {
      v10 = (void *)operator new((v8 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v5[5] = v8;
      v5[6] = v10;
      v5[4] = (v8 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v10 = (char *)v5 + 33;
      *((_BYTE *)v5 + 32) = 2 * v8;
      if ( !v8 )
        goto LABEL_10;
    }
    memcpy(v10, v9, v8);
LABEL_10:
    *((_BYTE *)v10 + v8) = 0;
    goto LABEL_11;
  }
  v7 = *a2;
  v5[6] = *((_QWORD *)a2 + 2);
  *((_OWORD *)v5 + 2) = v7;
LABEL_11:
  v11 = v15[0];
  v5[12] = 0LL;
  *v5 = 0LL;
  v5[1] = 0LL;
  v5[2] = v11;
  *v6 = (__int64)v5;
  v12 = **(_QWORD **)a1;
  if ( v12 )
  {
    *(_QWORD *)a1 = v12;
    v13 = (__int64 *)*v6;
  }
  else
  {
    v13 = v5;
  }
  std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(*(__int64 **)(a1 + 8), v13);
  ++*(_QWORD *)(a1 + 16);
  return v5 + 8;
}

//----- (0000000000017E5C) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::send(__int64 a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int64 v6; // x8
  unsigned __int64 v7; // x8
  const char *v8; // x23
  size_t v9; // x0
  size_t v10; // x22
  char *v11; // x24
  const char *v12; // x23
  size_t v13; // x0
  size_t v14; // x22
  char *v15; // x24
  unsigned __int64 v16; // x25
  char v17; // w22
  unsigned __int64 v18; // x25
  char v19; // w22
  _QWORD *v20; // x0
  unsigned __int64 v21; // x8
  __int64 v22; // x1
  __int64 v23; // x2
  _QWORD *v24; // x0
  _QWORD *v25; // x0
  unsigned __int64 v26; // x8
  __int64 v27; // x1
  __int64 v28; // x2
  _QWORD *v29; // x0
  unsigned __int64 v30; // x8
  __int64 v31; // x1
  __int64 v32; // x2
  unsigned __int64 v33; // x8
  char *v34; // x23
  unsigned __int64 v35; // x22
  void **v36; // x21
  _BYTE *v37; // x8
  char v38; // t1
  char v39; // w19
  void *v40; // x0
  void **v42; // [xsp+8h] [xbp-218h] BYREF
  _DWORD v43[4]; // [xsp+10h] [xbp-210h] BYREF
  void *v44; // [xsp+20h] [xbp-200h]
  int v45; // [xsp+28h] [xbp-1F8h] BYREF
  unsigned __int64 v46; // [xsp+30h] [xbp-1F0h] BYREF
  size_t v47; // [xsp+38h] [xbp-1E8h]
  void *v48; // [xsp+40h] [xbp-1E0h]
  _DWORD v49[4]; // [xsp+48h] [xbp-1D8h] BYREF
  void *v50; // [xsp+58h] [xbp-1C8h]
  int v51; // [xsp+60h] [xbp-1C0h] BYREF
  unsigned __int64 v52; // [xsp+68h] [xbp-1B8h] BYREF
  size_t v53; // [xsp+70h] [xbp-1B0h]
  void *v54; // [xsp+78h] [xbp-1A8h]
  char v55[8]; // [xsp+80h] [xbp-1A0h] BYREF
  _QWORD v56[41]; // [xsp+88h] [xbp-198h] BYREF

  v56[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v6 = *a3;
  if ( (v6 & 1) != 0 )
    v7 = *((_QWORD *)a3 + 1);
  else
    v7 = v6 >> 1;
  if ( v7 <= 0x63 )
  {
    if ( (word_452D8 & 1) != 0 )
      v8 = (const char *)qword_452E8;
    else
      v8 = (char *)&word_452D8 + 1;
    v51 = dword_452D0;
    v53 = 0LL;
    v54 = 0LL;
    v52 = 0LL;
    v9 = strlen(v8);
    if ( v9 < 0xFFFFFFFFFFFFFFF0LL )
    {
      v10 = v9;
      if ( v9 >= 0x17 )
      {
        v16 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v11 = (char *)operator new(v16);
        v53 = v10;
        v54 = v11;
        v52 = v16 | 1;
      }
      else
      {
        v11 = (char *)&v52 + 1;
        LOBYTE(v52) = 2 * v9;
        if ( !v9 )
        {
LABEL_21:
          v11[v10] = 0;
          if ( (g3::logLevel(&v51) & 1) != 0 )
          {
            v49[3] = 0;
            v50 = 0LL;
            LOBYTE(v49[0]) = 20;
            strcpy((char *)v49 + 1, "DomainSock");
            v17 = g3::logTag(v49);
            if ( (v49[0] & 1) == 0 )
            {
              if ( (v52 & 1) == 0 )
                goto LABEL_24;
LABEL_38:
              operator delete(v54);
              if ( (v17 & 1) == 0 )
                goto LABEL_62;
LABEL_39:
              LogCapture::LogCapture((LogCapture *)v55, "DomainSock", (const LEVELS *)&dword_452D0, "", 6, 0LL);
              v20 = std::__put_character_sequence<char,std::char_traits<char>>(v56, (__int64)"sending msg_id:", 15LL);
              v21 = *a2;
              if ( (v21 & 1) != 0 )
                v22 = *((_QWORD *)a2 + 2);
              else
                v22 = (__int64)(a2 + 1);
              if ( (v21 & 1) != 0 )
                v23 = *((_QWORD *)a2 + 1);
              else
                v23 = v21 >> 1;
              v24 = std::__put_character_sequence<char,std::char_traits<char>>(v20, v22, v23);
              v25 = std::__put_character_sequence<char,std::char_traits<char>>(v24, (__int64)" data:", 6LL);
              v26 = *a3;
              if ( (v26 & 1) != 0 )
                v27 = *((_QWORD *)a3 + 2);
              else
                v27 = (__int64)(a3 + 1);
              if ( (v26 & 1) != 0 )
                v28 = *((_QWORD *)a3 + 1);
              else
                v28 = v26 >> 1;
              std::__put_character_sequence<char,std::char_traits<char>>(v25, v27, v28);
LABEL_61:
              LogCapture::~LogCapture((LogCapture *)v55);
              goto LABEL_62;
            }
            operator delete(v50);
            if ( (v52 & 1) != 0 )
              goto LABEL_38;
          }
          else
          {
            v17 = 0;
            if ( (v52 & 1) != 0 )
              goto LABEL_38;
          }
LABEL_24:
          if ( (v17 & 1) == 0 )
            goto LABEL_62;
          goto LABEL_39;
        }
      }
      memcpy(v11, v8, v10);
      goto LABEL_21;
    }
LABEL_75:
    std::__basic_string_common<true>::__throw_length_error();
  }
  if ( (word_452D8 & 1) != 0 )
    v12 = (const char *)qword_452E8;
  else
    v12 = (char *)&word_452D8 + 1;
  v45 = dword_452D0;
  v47 = 0LL;
  v48 = 0LL;
  v46 = 0LL;
  v13 = strlen(v12);
  if ( v13 >= 0xFFFFFFFFFFFFFFF0LL )
    goto LABEL_75;
  v14 = v13;
  if ( v13 >= 0x17 )
  {
    v18 = (v13 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v15 = (char *)operator new(v18);
    v47 = v14;
    v48 = v15;
    v46 = v18 | 1;
    goto LABEL_27;
  }
  v15 = (char *)&v46 + 1;
  LOBYTE(v46) = 2 * v13;
  if ( v13 )
LABEL_27:
    memcpy(v15, v12, v14);
  v15[v14] = 0;
  if ( (g3::logLevel(&v45) & 1) != 0 )
  {
    v43[3] = 0;
    v44 = 0LL;
    LOBYTE(v43[0]) = 20;
    strcpy((char *)v43 + 1, "DomainSock");
    v19 = g3::logTag(v43);
    if ( (v43[0] & 1) == 0 )
    {
      if ( (v46 & 1) == 0 )
        goto LABEL_31;
LABEL_53:
      operator delete(v48);
      if ( (v19 & 1) == 0 )
        goto LABEL_62;
      goto LABEL_54;
    }
    operator delete(v44);
    if ( (v46 & 1) != 0 )
      goto LABEL_53;
  }
  else
  {
    v19 = 0;
    if ( (v46 & 1) != 0 )
      goto LABEL_53;
  }
LABEL_31:
  if ( (v19 & 1) != 0 )
  {
LABEL_54:
    LogCapture::LogCapture((LogCapture *)v55, "DomainSock", (const LEVELS *)&dword_452D0, "", 6, 0LL);
    v29 = std::__put_character_sequence<char,std::char_traits<char>>(v56, (__int64)"sending msg_id:", 15LL);
    v30 = *a2;
    if ( (v30 & 1) != 0 )
      v31 = *((_QWORD *)a2 + 2);
    else
      v31 = (__int64)(a2 + 1);
    if ( (v30 & 1) != 0 )
      v32 = *((_QWORD *)a2 + 1);
    else
      v32 = v30 >> 1;
    std::__put_character_sequence<char,std::char_traits<char>>(v29, v31, v32);
    goto LABEL_61;
  }
LABEL_62:
  v33 = *a3;
  if ( (v33 & 1) != 0 )
    v34 = (char *)*((_QWORD *)a3 + 2);
  else
    v34 = (char *)(a3 + 1);
  if ( (v33 & 1) != 0 )
    v35 = *((_QWORD *)a3 + 1);
  else
    v35 = v33 >> 1;
  v36 = (void **)operator new(0x18uLL);
  v36[1] = 0LL;
  v36[2] = 0LL;
  *v36 = 0LL;
  if ( v35 )
  {
    if ( (v35 & 0x8000000000000000LL) != 0 )
      std::__vector_base_common<true>::__throw_length_error();
    v37 = (_BYTE *)operator new(v35);
    *v36 = v37;
    v36[1] = v37;
    v36[2] = &v37[v35];
    do
    {
      v38 = *v34++;
      --v35;
      *v37 = v38;
      v37 = (char *)v36[1] + 1;
      v36[1] = v37;
    }
    while ( v35 );
  }
  v42 = v36;
  v39 = protocol::DomainSockServer::send(a1, a2, (__int64)&v42);
  v40 = *v36;
  v42 = 0LL;
  if ( v40 )
  {
    v36[1] = v40;
    operator delete(v40);
  }
  operator delete(v36);
  return v39 & 1;
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 452D0: using guessed type int dword_452D0;
// 452D8: using guessed type __int16 word_452D8;
// 452E8: using guessed type __int64 qword_452E8;
// 17E5C: using guessed type char var_1A0[8];

//----- (000000000001837C) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::send(__int64 a1, unsigned __int8 *a2, __int64 a3)
{
  unsigned __int64 v4; // x8
  unsigned __int64 v5; // x8
  std::mutex *v6; // x19
  unsigned __int64 v9; // x9
  _DWORD *v10; // x8
  int v11; // w9
  int v12; // w27
  unsigned int v13; // w21
  const char *v14; // x21
  size_t v15; // x0
  size_t v16; // x19
  char *v17; // x22
  const char *v18; // x20
  size_t v19; // x0
  size_t v20; // x19
  char *v21; // x21
  unsigned __int64 v22; // x23
  char v23; // w19
  _QWORD *v24; // x0
  unsigned __int64 v25; // x8
  __int64 v26; // x1
  __int64 v27; // x2
  _QWORD *v28; // x0
  const void *v29; // x1
  _DWORD *v30; // x8
  _BYTE *v31; // x1
  _BYTE *v32; // x8
  const char *v33; // x23
  size_t v34; // x0
  size_t v35; // x22
  char *v36; // x24
  const char *v37; // x21
  size_t v38; // x0
  size_t v39; // x20
  char *v40; // x23
  unsigned __int64 v41; // x22
  char v42; // w19
  unsigned int v43; // w20
  unsigned __int64 v44; // x24
  char v45; // w20
  const char *v46; // x21
  size_t v47; // x0
  size_t v48; // x20
  char *v49; // x23
  _QWORD *v50; // x0
  _QWORD *v51; // x0
  _QWORD *v52; // x20
  __int64 v53; // x1
  int *v54; // x0
  char *v55; // x21
  __int64 v56; // x0
  unsigned __int64 v57; // x24
  char v58; // w20
  _QWORD *v59; // x0
  _QWORD *v60; // x0
  _QWORD *v61; // x20
  __int64 v62; // x1
  int *v63; // x0
  char *v64; // x21
  __int64 v65; // x0
  unsigned __int64 v66; // x25
  char v67; // w22
  _QWORD *v68; // x0
  unsigned __int64 v69; // x8
  __int64 v70; // x1
  __int64 v71; // x2
  _QWORD *v72; // x0
  _QWORD *v73; // x0
  const char *v75; // x21
  size_t v76; // x0
  size_t v77; // x20
  char *v78; // x23
  unsigned __int64 v79; // x24
  char v80; // w20
  _QWORD *v81; // x0
  _QWORD *v82; // x0
  _QWORD *v83; // x20
  __int64 v84; // x1
  int *v85; // x0
  char *v86; // x21
  __int64 v87; // x0
  _DWORD v88[4]; // [xsp+10h] [xbp-300h] BYREF
  void *v89; // [xsp+20h] [xbp-2F0h]
  int v90; // [xsp+28h] [xbp-2E8h] BYREF
  unsigned __int64 v91; // [xsp+30h] [xbp-2E0h] BYREF
  size_t v92; // [xsp+38h] [xbp-2D8h]
  void *v93; // [xsp+40h] [xbp-2D0h]
  _DWORD v94[4]; // [xsp+48h] [xbp-2C8h] BYREF
  void *v95; // [xsp+58h] [xbp-2B8h]
  int v96; // [xsp+60h] [xbp-2B0h] BYREF
  unsigned __int64 v97; // [xsp+68h] [xbp-2A8h] BYREF
  size_t v98; // [xsp+70h] [xbp-2A0h]
  void *v99; // [xsp+78h] [xbp-298h]
  _DWORD v100[4]; // [xsp+80h] [xbp-290h] BYREF
  void *v101; // [xsp+90h] [xbp-280h]
  int v102; // [xsp+98h] [xbp-278h] BYREF
  unsigned __int64 v103; // [xsp+A0h] [xbp-270h] BYREF
  size_t v104; // [xsp+A8h] [xbp-268h]
  void *v105; // [xsp+B0h] [xbp-260h]
  char v106; // [xsp+B8h] [xbp-258h] BYREF
  _BYTE v107[15]; // [xsp+B9h] [xbp-257h]
  void *v108; // [xsp+C8h] [xbp-248h]
  int v109; // [xsp+D0h] [xbp-240h] BYREF
  unsigned __int64 v110; // [xsp+D8h] [xbp-238h] BYREF
  size_t v111; // [xsp+E0h] [xbp-230h]
  void *v112; // [xsp+E8h] [xbp-228h]
  unsigned int buf; // [xsp+F4h] [xbp-21Ch] BYREF
  char v114; // [xsp+F8h] [xbp-218h] BYREF
  _BYTE v115[15]; // [xsp+F9h] [xbp-217h]
  void *v116; // [xsp+108h] [xbp-208h]
  int v117; // [xsp+110h] [xbp-200h] BYREF
  unsigned __int64 v118; // [xsp+118h] [xbp-1F8h] BYREF
  size_t v119; // [xsp+120h] [xbp-1F0h]
  void *v120; // [xsp+128h] [xbp-1E8h]
  char v121; // [xsp+130h] [xbp-1E0h] BYREF
  _BYTE v122[15]; // [xsp+131h] [xbp-1DFh]
  void *v123; // [xsp+140h] [xbp-1D0h]
  int v124; // [xsp+148h] [xbp-1C8h] BYREF
  unsigned __int64 v125; // [xsp+150h] [xbp-1C0h] BYREF
  size_t v126; // [xsp+158h] [xbp-1B8h]
  void *v127; // [xsp+160h] [xbp-1B0h]
  char v128[8]; // [xsp+168h] [xbp-1A8h] BYREF
  _QWORD v129[42]; // [xsp+170h] [xbp-1A0h] BYREF

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  if ( !*(_BYTE *)(a1 + 10) )
  {
    if ( (word_45338 & 1) != 0 )
      v14 = (const char *)qword_45348;
    else
      v14 = (char *)&word_45338 + 1;
    v124 = dword_45330;
    v126 = 0LL;
    v127 = 0LL;
    v125 = 0LL;
    v15 = strlen(v14);
    if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v16 = v15;
    if ( v15 >= 0x17 )
    {
      v22 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v17 = (char *)operator new(v22);
      v126 = v16;
      v127 = v17;
      v125 = v22 | 1;
    }
    else
    {
      v17 = (char *)&v125 + 1;
      LOBYTE(v125) = 2 * v15;
      if ( !v15 )
      {
LABEL_27:
        v17[v16] = 0;
        if ( (g3::logLevel(&v124) & 1) != 0 )
        {
          *(_QWORD *)&v122[7] = 7037696LL;
          v123 = 0LL;
          v121 = 20;
          *(_QWORD *)v122 = *(_QWORD *)"DomainSock";
          v23 = g3::logTag(&v121);
          if ( (v121 & 1) == 0 )
          {
            if ( (v125 & 1) == 0 )
              goto LABEL_30;
LABEL_33:
            operator delete(v127);
            if ( (v23 & 1) == 0 )
              return 0;
            goto LABEL_34;
          }
          operator delete(v123);
          if ( (v125 & 1) != 0 )
            goto LABEL_33;
        }
        else
        {
          v23 = 0;
          if ( (v125 & 1) != 0 )
            goto LABEL_33;
        }
LABEL_30:
        if ( (v23 & 1) == 0 )
          return 0;
LABEL_34:
        LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45330, "", 6, 0LL);
        v24 = std::__put_character_sequence<char,std::char_traits<char>>(v129, (__int64)"send msg_id:", 12LL);
        v25 = *a2;
        if ( (v25 & 1) != 0 )
          v26 = *((_QWORD *)a2 + 2);
        else
          v26 = (__int64)(a2 + 1);
        if ( (v25 & 1) != 0 )
          v27 = *((_QWORD *)a2 + 1);
        else
          v27 = v25 >> 1;
        v28 = std::__put_character_sequence<char,std::char_traits<char>>(v24, v26, v27);
        std::__put_character_sequence<char,std::char_traits<char>>(v28, (__int64)"client not connect", 18LL);
        goto LABEL_71;
      }
    }
    memcpy(v17, v14, v16);
    goto LABEL_27;
  }
  v4 = *a2;
  if ( (v4 & 1) != 0 )
    v5 = *((_QWORD *)a2 + 1);
  else
    v5 = v4 >> 1;
  if ( v5 )
  {
    v6 = (std::mutex *)(a1 + 248);
    std::mutex::lock((std::mutex *)(a1 + 248));
    v9 = *a2;
    v10 = *(_DWORD **)a3;
    if ( (v9 & 1) != 0 )
      v11 = *((_DWORD *)a2 + 2);
    else
      v11 = v9 >> 1;
    v12 = v11 + 1;
    if ( v10 )
      v13 = v12 + v10[2] - *v10;
    else
      v13 = v11 + 1;
    buf = bswap32(v13);
    if ( (unsigned int)send(*(_DWORD *)(a1 + 4), &buf, 4uLL, 0) == 4 )
    {
      if ( (*a2 & 1) != 0 )
        v29 = (const void *)*((_QWORD *)a2 + 2);
      else
        v29 = a2 + 1;
      if ( v12 == (unsigned int)send(*(_DWORD *)(a1 + 4), v29, v12, 0) )
      {
        v30 = *(_DWORD **)a3;
        if ( !*(_QWORD *)a3
          || (v31 = *(_BYTE **)v30, v32 = (_BYTE *)*((_QWORD *)v30 + 1), v32 == v31)
          || *(_QWORD *)(*(_QWORD *)a3 + 8LL) - **(_QWORD **)a3 == (int)send(*(_DWORD *)(a1 + 4), v31, v32 - v31, 0) )
        {
          if ( (word_452D8 & 1) != 0 )
            v33 = (const char *)qword_452E8;
          else
            v33 = (char *)&word_452D8 + 1;
          v90 = dword_452D0;
          v92 = 0LL;
          v93 = 0LL;
          v91 = 0LL;
          v34 = strlen(v33);
          if ( v34 >= 0xFFFFFFFFFFFFFFF0LL )
            std::__basic_string_common<true>::__throw_length_error();
          v35 = v34;
          if ( v34 >= 0x17 )
          {
            v66 = (v34 + 16) & 0xFFFFFFFFFFFFFFF0LL;
            v36 = (char *)operator new(v66);
            v92 = v35;
            v93 = v36;
            v91 = v66 | 1;
          }
          else
          {
            v36 = (char *)&v91 + 1;
            LOBYTE(v91) = 2 * v34;
            if ( !v34 )
            {
LABEL_112:
              v36[v35] = 0;
              if ( (g3::logLevel(&v90) & 1) != 0 )
              {
                v88[3] = 0;
                v89 = 0LL;
                LOBYTE(v88[0]) = 20;
                strcpy((char *)v88 + 1, "DomainSock");
                v67 = g3::logTag(v88);
                if ( (v88[0] & 1) == 0 )
                {
                  if ( (v91 & 1) == 0 )
                    goto LABEL_115;
LABEL_118:
                  operator delete(v93);
                  if ( (v67 & 1) == 0 )
                  {
LABEL_126:
                    v43 = 1;
                    goto LABEL_127;
                  }
LABEL_119:
                  LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_452D0, "", 6, 0LL);
                  v68 = std::__put_character_sequence<char,std::char_traits<char>>(
                          v129,
                          (__int64)"send finish id:",
                          15LL);
                  v69 = *a2;
                  if ( (v69 & 1) != 0 )
                    v70 = *((_QWORD *)a2 + 2);
                  else
                    v70 = (__int64)(a2 + 1);
                  if ( (v69 & 1) != 0 )
                    v71 = *((_QWORD *)a2 + 1);
                  else
                    v71 = v69 >> 1;
                  v72 = std::__put_character_sequence<char,std::char_traits<char>>(v68, v70, v71);
                  v73 = std::__put_character_sequence<char,std::char_traits<char>>(v72, (__int64)" data:", 6LL);
                  std::ostream::operator<<(v73);
                  LogCapture::~LogCapture((LogCapture *)v128);
                  goto LABEL_126;
                }
                operator delete(v89);
                if ( (v91 & 1) != 0 )
                  goto LABEL_118;
              }
              else
              {
                v67 = 0;
                if ( (v91 & 1) != 0 )
                  goto LABEL_118;
              }
LABEL_115:
              if ( (v67 & 1) == 0 )
                goto LABEL_126;
              goto LABEL_119;
            }
          }
          memcpy(v36, v33, v35);
          goto LABEL_112;
        }
        if ( (word_45358 & 1) != 0 )
          v75 = (const char *)qword_45368;
        else
          v75 = (char *)&word_45358 + 1;
        v96 = dword_45350;
        v98 = 0LL;
        v99 = 0LL;
        v97 = 0LL;
        v76 = strlen(v75);
        if ( v76 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v77 = v76;
        if ( v76 >= 0x17 )
        {
          v79 = (v76 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v78 = (char *)operator new(v79);
          v98 = v77;
          v99 = v78;
          v97 = v79 | 1;
        }
        else
        {
          v78 = (char *)&v97 + 1;
          LOBYTE(v97) = 2 * v76;
          if ( !v76 )
          {
LABEL_142:
            v78[v77] = 0;
            if ( (g3::logLevel(&v96) & 1) != 0 )
            {
              v94[3] = 0;
              v95 = 0LL;
              LOBYTE(v94[0]) = 20;
              strcpy((char *)v94 + 1, "DomainSock");
              v80 = g3::logTag(v94);
              if ( (v94[0] & 1) == 0 )
              {
                if ( (v97 & 1) == 0 )
                  goto LABEL_145;
LABEL_148:
                operator delete(v99);
                if ( (v80 & 1) == 0 )
                  goto LABEL_109;
LABEL_149:
                LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
                v81 = std::__put_character_sequence<char,std::char_traits<char>>(v129, (__int64)"send data fail:", 15LL);
                v82 = std::ostream::operator<<(v81);
                v83 = std::__put_character_sequence<char,std::char_traits<char>>(v82, (__int64)" error is ", 10LL);
                v85 = (int *)__errno(v83, v84);
                v86 = strerror(*v85);
                v87 = strlen(v86);
                std::__put_character_sequence<char,std::char_traits<char>>(v83, (__int64)v86, v87);
                goto LABEL_108;
              }
              operator delete(v95);
              if ( (v97 & 1) != 0 )
                goto LABEL_148;
            }
            else
            {
              v80 = 0;
              if ( (v97 & 1) != 0 )
                goto LABEL_148;
            }
LABEL_145:
            if ( (v80 & 1) == 0 )
              goto LABEL_109;
            goto LABEL_149;
          }
        }
        memcpy(v78, v75, v77);
        goto LABEL_142;
      }
      if ( (word_45358 & 1) != 0 )
        v46 = (const char *)qword_45368;
      else
        v46 = (char *)&word_45358 + 1;
      v102 = dword_45350;
      v104 = 0LL;
      v105 = 0LL;
      v103 = 0LL;
      v47 = strlen(v46);
      if ( v47 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v48 = v47;
      if ( v47 >= 0x17 )
      {
        v57 = (v47 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v49 = (char *)operator new(v57);
        v104 = v48;
        v105 = v49;
        v103 = v57 | 1;
      }
      else
      {
        v49 = (char *)&v103 + 1;
        LOBYTE(v103) = 2 * v47;
        if ( !v47 )
        {
LABEL_98:
          v49[v48] = 0;
          if ( (g3::logLevel(&v102) & 1) != 0 )
          {
            v100[3] = 0;
            v101 = 0LL;
            LOBYTE(v100[0]) = 20;
            strcpy((char *)v100 + 1, "DomainSock");
            v58 = g3::logTag(v100);
            if ( (v100[0] & 1) == 0 )
            {
              if ( (v103 & 1) == 0 )
                goto LABEL_101;
              goto LABEL_106;
            }
            operator delete(v101);
            if ( (v103 & 1) != 0 )
            {
LABEL_106:
              operator delete(v105);
              if ( (v58 & 1) != 0 )
              {
LABEL_107:
                LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
                v59 = std::__put_character_sequence<char,std::char_traits<char>>(
                        v129,
                        (__int64)"send msg_id fail:",
                        17LL);
                v60 = std::ostream::operator<<(v59);
                v61 = std::__put_character_sequence<char,std::char_traits<char>>(v60, (__int64)" error is ", 10LL);
                v63 = (int *)__errno(v61, v62);
                v64 = strerror(*v63);
                v65 = strlen(v64);
                std::__put_character_sequence<char,std::char_traits<char>>(v61, (__int64)v64, v65);
                goto LABEL_108;
              }
LABEL_109:
              v43 = 0;
LABEL_127:
              std::mutex::unlock(v6);
              return v43;
            }
          }
          else
          {
            v58 = 0;
            if ( (v103 & 1) != 0 )
              goto LABEL_106;
          }
LABEL_101:
          if ( (v58 & 1) == 0 )
            goto LABEL_109;
          goto LABEL_107;
        }
      }
      memcpy(v49, v46, v48);
      goto LABEL_98;
    }
    if ( (word_45358 & 1) != 0 )
      v37 = (const char *)qword_45368;
    else
      v37 = (char *)&word_45358 + 1;
    v109 = dword_45350;
    v111 = 0LL;
    v112 = 0LL;
    v110 = 0LL;
    v38 = strlen(v37);
    if ( v38 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v39 = v38;
    if ( v38 >= 0x17 )
    {
      v44 = (v38 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v40 = (char *)operator new(v44);
      v111 = v39;
      v112 = v40;
      v110 = v44 | 1;
    }
    else
    {
      v40 = (char *)&v110 + 1;
      LOBYTE(v110) = 2 * v38;
      if ( !v38 )
      {
LABEL_77:
        v40[v39] = 0;
        if ( (g3::logLevel(&v109) & 1) != 0 )
        {
          *(_QWORD *)&v107[7] = 7037696LL;
          v108 = 0LL;
          v106 = 20;
          *(_QWORD *)v107 = *(_QWORD *)"DomainSock";
          v45 = g3::logTag(&v106);
          if ( (v106 & 1) == 0 )
          {
            if ( (v110 & 1) == 0 )
              goto LABEL_80;
LABEL_90:
            operator delete(v112);
            if ( (v45 & 1) == 0 )
              goto LABEL_109;
LABEL_91:
            LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
            v50 = std::__put_character_sequence<char,std::char_traits<char>>(v129, (__int64)"send msg_len fail:", 18LL);
            v51 = std::ostream::operator<<(v50);
            v52 = std::__put_character_sequence<char,std::char_traits<char>>(v51, (__int64)" error is ", 10LL);
            v54 = (int *)__errno(v52, v53);
            v55 = strerror(*v54);
            v56 = strlen(v55);
            std::__put_character_sequence<char,std::char_traits<char>>(v52, (__int64)v55, v56);
LABEL_108:
            LogCapture::~LogCapture((LogCapture *)v128);
            goto LABEL_109;
          }
          operator delete(v108);
          if ( (v110 & 1) != 0 )
            goto LABEL_90;
        }
        else
        {
          v45 = 0;
          if ( (v110 & 1) != 0 )
            goto LABEL_90;
        }
LABEL_80:
        if ( (v45 & 1) == 0 )
          goto LABEL_109;
        goto LABEL_91;
      }
    }
    memcpy(v40, v37, v39);
    goto LABEL_77;
  }
  if ( (word_45338 & 1) != 0 )
    v18 = (const char *)qword_45348;
  else
    v18 = (char *)&word_45338 + 1;
  v117 = dword_45330;
  v119 = 0LL;
  v120 = 0LL;
  v118 = 0LL;
  v19 = strlen(v18);
  if ( v19 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v20 = v19;
  if ( v19 >= 0x17 )
  {
    v41 = (v19 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v21 = (char *)operator new(v41);
    v119 = v20;
    v120 = v21;
    v118 = v41 | 1;
    goto LABEL_65;
  }
  v21 = (char *)&v118 + 1;
  LOBYTE(v118) = 2 * v19;
  if ( v19 )
LABEL_65:
    memcpy(v21, v18, v20);
  v21[v20] = 0;
  if ( (g3::logLevel(&v117) & 1) != 0 )
  {
    *(_QWORD *)&v115[7] = 7037696LL;
    v116 = 0LL;
    v114 = 20;
    *(_QWORD *)v115 = *(_QWORD *)"DomainSock";
    v42 = g3::logTag(&v114);
    if ( (v114 & 1) == 0 )
    {
      if ( (v118 & 1) == 0 )
        goto LABEL_69;
      goto LABEL_73;
    }
    operator delete(v116);
    if ( (v118 & 1) != 0 )
    {
LABEL_73:
      operator delete(v120);
      if ( (v42 & 1) != 0 )
        goto LABEL_70;
      return 0;
    }
  }
  else
  {
    v42 = 0;
    if ( (v118 & 1) != 0 )
      goto LABEL_73;
  }
LABEL_69:
  if ( (v42 & 1) == 0 )
    return 0;
LABEL_70:
  LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45330, "", 6, 0LL);
  std::__put_character_sequence<char,std::char_traits<char>>(v129, (__int64)"msg_id cannot be empty", 22LL);
LABEL_71:
  LogCapture::~LogCapture((LogCapture *)v128);
  return 0;
}
// 189B4: variable 'v53' is possibly undefined
// 18B1C: variable 'v62' is possibly undefined
// 18E48: variable 'v84' is possibly undefined
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);
// 452D0: using guessed type int dword_452D0;
// 452D8: using guessed type __int16 word_452D8;
// 452E8: using guessed type __int64 qword_452E8;
// 45330: using guessed type int dword_45330;
// 45338: using guessed type __int16 word_45338;
// 45348: using guessed type __int64 qword_45348;
// 45350: using guessed type int dword_45350;
// 45358: using guessed type __int16 word_45358;
// 45368: using guessed type __int64 qword_45368;
// 1837C: using guessed type char var_1A8[8];

//----- (0000000000019068) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 32LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// 110C0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 19068: using guessed type char var_60[8];

//----- (0000000000019254) ----------------------------------------------------
char *__fastcall std::vector<unsigned char>::insert<char *>(__int64 a1, char *src, char *a3, char *a4)
{
  signed __int64 v4; // x27
  unsigned __int64 v6; // x9
  __int64 v7; // x10
  char *v9; // x21
  _BYTE *v11; // x25
  __int64 v12; // x8
  unsigned __int64 v13; // x24
  __int64 v14; // x26
  __int64 v15; // x10
  unsigned __int64 v16; // x23
  _BYTE *v17; // x8
  char *v18; // x11
  char v19; // t1
  size_t v20; // x2
  __int64 v21; // x9
  char *v22; // x10
  _BYTE *v23; // x11
  char v24; // t1
  unsigned __int64 v25; // x9
  char *v26; // x8
  char v27; // t1
  char *v28; // x23
  char *v29; // x8
  char *v30; // x9
  char *v31; // x21
  __int128 *v32; // x11
  _OWORD *v33; // x12
  unsigned __int64 v34; // x13
  __int128 v35; // q0
  __int128 v36; // q1
  char v37; // t1
  __int64 v38; // x8
  __int64 v39; // x24
  __int64 v40; // x27
  __int128 *v42; // x11
  _OWORD *v43; // x12
  unsigned __int64 v44; // x13
  __int128 v45; // q0
  __int128 v46; // q1

  v4 = a4 - a3;
  if ( a4 - a3 < 1 )
    return src;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = a3;
  if ( v4 <= (__int64)(v7 - v6) )
  {
    v15 = v6 - (_QWORD)src;
    if ( v4 <= (__int64)(v6 - (_QWORD)src) )
    {
      v17 = *(_BYTE **)(a1 + 8);
      v16 = (unsigned __int64)a4;
    }
    else
    {
      v16 = (unsigned __int64)&a3[v15];
      v17 = *(_BYTE **)(a1 + 8);
      if ( &a3[v15] != a4 )
      {
        v18 = &a3[v15];
        do
        {
          v19 = *v18++;
          *v17 = v19;
          v17 = (_BYTE *)(*(_QWORD *)(a1 + 8) + 1LL);
          *(_QWORD *)(a1 + 8) = v17;
        }
        while ( a4 != v18 );
      }
      if ( v15 < 1 )
        return src;
    }
    v20 = v17 - &src[v4];
    if ( (unsigned __int64)&v17[-v4] < v6 )
    {
      v21 = v6 + v4 - (_QWORD)v17;
      v22 = &v17[-v4];
      v23 = v17;
      do
      {
        v24 = *v22++;
        --v21;
        *v23 = v24;
        v23 = (_BYTE *)(*(_QWORD *)(a1 + 8) + 1LL);
        *(_QWORD *)(a1 + 8) = v23;
      }
      while ( v21 );
    }
    if ( v20 )
      memmove(&src[v4], src, v20);
    v25 = v16 - (_QWORD)v9;
    if ( (char *)v16 != v9 )
    {
      if ( v25 >= 0x20 && ((unsigned __int64)src >= v16 || v16 + src - v9 <= (unsigned __int64)v9) )
      {
        v42 = (__int128 *)(v9 + 16);
        v26 = &src[v25 & 0xFFFFFFFFFFFFFFE0LL];
        v9 += v25 & 0xFFFFFFFFFFFFFFE0LL;
        v43 = src + 16;
        v44 = v25 & 0xFFFFFFFFFFFFFFE0LL;
        do
        {
          v45 = *(v42 - 1);
          v46 = *v42;
          v42 += 2;
          v44 -= 32LL;
          *(v43 - 1) = v45;
          *v43 = v46;
          v43 += 2;
        }
        while ( v44 );
        if ( (v25 & 0xFFFFFFFFFFFFFFE0LL) == v25 )
          return src;
      }
      else
      {
        v26 = src;
      }
      do
      {
        v27 = *v9++;
        *v26++ = v27;
      }
      while ( (char *)v16 != v9 );
    }
    return src;
  }
  v11 = *(_BYTE **)a1;
  v12 = v6 - *(_QWORD *)a1 + v4;
  if ( v12 < 0 )
    std::__vector_base_common<true>::__throw_length_error();
  if ( (unsigned __int64)(v7 - (_QWORD)v11) >= 0x3FFFFFFFFFFFFFFFLL )
  {
    v13 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    if ( 2 * (v7 - (__int64)v11) >= (unsigned __int64)v12 )
      v13 = 2 * (v7 - (_QWORD)v11);
    else
      v13 = v6 - *(_QWORD *)a1 + v4;
    if ( !v13 )
    {
      v14 = 0LL;
      goto LABEL_31;
    }
  }
  v14 = operator new(v13);
LABEL_31:
  v28 = (char *)(v14 + src - v11);
  if ( v9 != a4 )
  {
    v29 = &a4[src - v9 - (_QWORD)v11];
    if ( (unsigned __int64)v4 >= 0x20 )
    {
      if ( v28 >= a4 || &v29[v14] <= v9 )
      {
        v32 = (__int128 *)(v9 + 16);
        v30 = &v28[v4 & 0xFFFFFFFFFFFFFFE0LL];
        v9 += v4 & 0xFFFFFFFFFFFFFFE0LL;
        v33 = (_OWORD *)(v14 + src + 16 - v11);
        v34 = v4 & 0xFFFFFFFFFFFFFFE0LL;
        do
        {
          v35 = *(v32 - 1);
          v36 = *v32;
          v32 += 2;
          v34 -= 32LL;
          *(v33 - 1) = v35;
          *v33 = v36;
          v33 += 2;
        }
        while ( v34 );
        if ( v4 == (v4 & 0xFFFFFFFFFFFFFFE0LL) )
          goto LABEL_42;
      }
      else
      {
        v30 = (char *)(v14 + src - v11);
      }
    }
    else
    {
      v30 = (char *)(v14 + src - v11);
    }
    do
    {
      v37 = *v9++;
      *v30++ = v37;
    }
    while ( a4 != v9 );
LABEL_42:
    v11 = *(_BYTE **)a1;
    v31 = &v29[v14];
    goto LABEL_43;
  }
  v31 = (char *)(v14 + src - v11);
LABEL_43:
  if ( src - v11 >= 1 )
    memcpy(&v28[-(src - v11)], v11, src - v11);
  v38 = *(_QWORD *)(a1 + 8);
  v39 = v14 + v13;
  v40 = v38 - (_QWORD)src;
  if ( v38 - (__int64)src >= 1 )
  {
    memcpy(v31, src, v38 - (_QWORD)src);
    v31 += v40;
  }
  *(_QWORD *)a1 = &v28[-(src - v11)];
  *(_QWORD *)(a1 + 8) = v31;
  *(_QWORD *)(a1 + 16) = v39;
  if ( v11 )
    operator delete(v11);
  return v28;
}

//----- (0000000000019534) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockServer::processLoop(__int64 a1, __int64 a2)
{
  const char *v4; // x22
  size_t v5; // x0
  size_t v6; // x21
  char *v7; // x23
  int v8; // w8
  const char *v9; // x22
  size_t v10; // x0
  size_t v11; // x21
  char *v12; // x23
  unsigned __int64 v13; // x24
  char v14; // w21
  _QWORD *v15; // x0
  _BYTE *v16; // x8
  unsigned int *v17; // x21
  _BYTE *v18; // x1
  signed __int64 v19; // x22
  __int64 result; // x0
  const char *v21; // x20
  size_t v22; // x0
  size_t v23; // x19
  char *v24; // x21
  unsigned __int64 v25; // x24
  char v26; // w21
  _QWORD *v27; // x0
  _QWORD *v28; // x0
  const char *v29; // x22
  size_t v30; // x0
  size_t v31; // x21
  char *v32; // x23
  unsigned __int64 v33; // x24
  char v34; // w21
  unsigned int *v35; // x22
  __int64 v36; // x9
  unsigned int *v37; // x8
  __int64 v38; // x9
  unsigned int *v39; // x10
  int v40; // w11
  unsigned int *v41; // x28
  unsigned __int64 v42; // x23
  unsigned int *v43; // x0
  unsigned __int64 v44; // x10
  unsigned __int64 v45; // x22
  char v46; // w19
  unsigned int *v47; // x9
  unsigned int *v48; // x11
  __int128 *v49; // x13
  _OWORD *v50; // x14
  unsigned __int64 v51; // x15
  __int128 v52; // q0
  __int128 v53; // q1
  char v54; // t1
  int v55; // w8
  const char *v56; // x22
  size_t v57; // x0
  size_t v58; // x21
  char *v59; // x23
  unsigned __int64 v60; // x24
  char v61; // w21
  _QWORD *v62; // x0
  char *v63; // x1
  __int64 v64; // x2
  unsigned int *v65; // x24
  __int64 v66; // x26
  const char *v67; // x22
  size_t v68; // x0
  size_t v69; // x21
  char *v70; // x23
  unsigned int *v71; // x27
  unsigned __int64 v72; // x24
  char v73; // w21
  char *v74; // x23
  __int64 v75; // x22
  _QWORD *v76; // x0
  _QWORD *v77; // x21
  _BYTE *v78; // x8
  __int64 v79; // x9
  char v80; // t1
  const char *v81; // x21
  size_t v82; // x0
  size_t v83; // x20
  char *v84; // x22
  __int64 v85; // x8
  _BYTE *v86; // x9
  unsigned int *v87; // x22
  _BYTE *v88; // x1
  signed __int64 v89; // x23
  void **v90; // x19
  void *v91; // x0
  unsigned __int64 v92; // x23
  char v93; // w20
  void *v94; // [xsp+10h] [xbp-350h] BYREF
  _DWORD v95[4]; // [xsp+18h] [xbp-348h] BYREF
  void *v96; // [xsp+28h] [xbp-338h]
  int v97; // [xsp+30h] [xbp-330h] BYREF
  unsigned __int64 v98; // [xsp+38h] [xbp-328h] BYREF
  size_t v99; // [xsp+40h] [xbp-320h]
  void *v100; // [xsp+48h] [xbp-318h]
  _DWORD v101[4]; // [xsp+50h] [xbp-310h] BYREF
  void *v102; // [xsp+60h] [xbp-300h]
  int v103; // [xsp+68h] [xbp-2F8h] BYREF
  unsigned __int64 v104; // [xsp+70h] [xbp-2F0h] BYREF
  size_t v105; // [xsp+78h] [xbp-2E8h]
  void *v106; // [xsp+80h] [xbp-2E0h]
  unsigned __int64 v107; // [xsp+88h] [xbp-2D8h] BYREF
  __int64 v108; // [xsp+90h] [xbp-2D0h]
  void *v109; // [xsp+98h] [xbp-2C8h]
  char v110; // [xsp+A0h] [xbp-2C0h] BYREF
  _BYTE v111[15]; // [xsp+A1h] [xbp-2BFh]
  void *v112; // [xsp+B0h] [xbp-2B0h]
  int v113; // [xsp+B8h] [xbp-2A8h] BYREF
  unsigned __int64 v114; // [xsp+C0h] [xbp-2A0h] BYREF
  size_t v115; // [xsp+C8h] [xbp-298h]
  void *v116; // [xsp+D0h] [xbp-290h]
  char v117; // [xsp+D8h] [xbp-288h] BYREF
  _BYTE v118[15]; // [xsp+D9h] [xbp-287h]
  void *v119; // [xsp+E8h] [xbp-278h]
  int v120; // [xsp+F0h] [xbp-270h] BYREF
  unsigned __int64 v121; // [xsp+F8h] [xbp-268h] BYREF
  size_t v122; // [xsp+100h] [xbp-260h]
  void *v123; // [xsp+108h] [xbp-258h]
  char v124; // [xsp+110h] [xbp-250h] BYREF
  _BYTE v125[15]; // [xsp+111h] [xbp-24Fh]
  void *v126; // [xsp+120h] [xbp-240h]
  int v127; // [xsp+128h] [xbp-238h] BYREF
  unsigned __int64 v128; // [xsp+130h] [xbp-230h] BYREF
  size_t v129; // [xsp+138h] [xbp-228h]
  void *v130; // [xsp+140h] [xbp-220h]
  char v131; // [xsp+148h] [xbp-218h] BYREF
  _BYTE v132[15]; // [xsp+149h] [xbp-217h]
  void *v133; // [xsp+158h] [xbp-208h]
  int v134; // [xsp+160h] [xbp-200h] BYREF
  unsigned __int64 v135; // [xsp+168h] [xbp-1F8h] BYREF
  size_t v136; // [xsp+170h] [xbp-1F0h]
  void *v137; // [xsp+178h] [xbp-1E8h]
  char v138; // [xsp+180h] [xbp-1E0h] BYREF
  _BYTE v139[15]; // [xsp+181h] [xbp-1DFh]
  void *v140; // [xsp+190h] [xbp-1D0h]
  int v141; // [xsp+198h] [xbp-1C8h] BYREF
  unsigned __int64 v142; // [xsp+1A0h] [xbp-1C0h] BYREF
  size_t v143; // [xsp+1A8h] [xbp-1B8h]
  void *v144; // [xsp+1B0h] [xbp-1B0h]
  char v145[8]; // [xsp+1B8h] [xbp-1A8h] BYREF
  _QWORD v146[42]; // [xsp+1C0h] [xbp-1A0h] BYREF

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  if ( *(_BYTE *)(a1 + 336) )
  {
    if ( *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 >= 4uLL )
    {
      *(_DWORD *)(a1 + 340) = bswap32(**(_DWORD **)a2);
      v143 = 0LL;
      v144 = 0LL;
      v141 = dword_452D0;
      v142 = 0LL;
      if ( (word_452D8 & 1) != 0 )
        v4 = (const char *)qword_452E8;
      else
        v4 = (char *)&word_452D8 + 1;
      v5 = strlen(v4);
      if ( v5 < 0xFFFFFFFFFFFFFFF0LL )
      {
        v6 = v5;
        if ( v5 >= 0x17 )
        {
          v13 = (v5 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v7 = (char *)operator new(v13);
          v143 = v6;
          v144 = v7;
          v142 = v13 | 1;
        }
        else
        {
          v7 = (char *)&v142 + 1;
          LOBYTE(v142) = 2 * v5;
          if ( !v5 )
          {
LABEL_20:
            v7[v6] = 0;
            if ( (g3::logLevel(&v141) & 1) != 0 )
            {
              *(_QWORD *)&v139[7] = 7037696LL;
              v140 = 0LL;
              v138 = 20;
              *(_QWORD *)v139 = *(_QWORD *)"DomainSock";
              v14 = g3::logTag(&v138);
              if ( (v138 & 1) == 0 )
              {
                if ( (v142 & 1) == 0 )
                  goto LABEL_23;
LABEL_26:
                operator delete(v144);
                if ( (v14 & 1) == 0 )
                  goto LABEL_28;
                goto LABEL_27;
              }
              operator delete(v140);
              if ( (v142 & 1) != 0 )
                goto LABEL_26;
            }
            else
            {
              v14 = 0;
              if ( (v142 & 1) != 0 )
                goto LABEL_26;
            }
LABEL_23:
            if ( (v14 & 1) == 0 )
            {
LABEL_28:
              v17 = *(unsigned int **)a2;
              v16 = *(_BYTE **)(a2 + 8);
              v18 = (_BYTE *)(*(_QWORD *)a2 + 4LL);
              v19 = v16 - v18;
              if ( v16 != v18 )
                memmove(*(void **)a2, v18, v16 - v18);
              *(_QWORD *)(a2 + 8) = (char *)v17 + v19;
              if ( *(int *)(a1 + 340) >= 1 )
              {
                *(_BYTE *)(a1 + 336) = 0;
                return 1LL;
              }
              if ( (word_45358 & 1) != 0 )
                v21 = (const char *)qword_45368;
              else
                v21 = (char *)&word_45358 + 1;
              v134 = dword_45350;
              v136 = 0LL;
              v137 = 0LL;
              v135 = 0LL;
              v22 = strlen(v21);
              if ( v22 >= 0xFFFFFFFFFFFFFFF0LL )
                std::__basic_string_common<true>::__throw_length_error();
              v23 = v22;
              if ( v22 >= 0x17 )
              {
                v45 = (v22 + 16) & 0xFFFFFFFFFFFFFFF0LL;
                v24 = (char *)operator new(v45);
                v136 = v23;
                v137 = v24;
                v135 = v45 | 1;
              }
              else
              {
                v24 = (char *)&v135 + 1;
                LOBYTE(v135) = 2 * v22;
                if ( !v22 )
                {
LABEL_85:
                  v24[v23] = 0;
                  if ( (g3::logLevel(&v134) & 1) != 0 )
                  {
                    *(_QWORD *)&v132[7] = 7037696LL;
                    v133 = 0LL;
                    v131 = 20;
                    *(_QWORD *)v132 = *(_QWORD *)"DomainSock";
                    v46 = g3::logTag(&v131);
                    if ( (v131 & 1) == 0 )
                    {
                      if ( (v135 & 1) == 0 )
                        goto LABEL_88;
LABEL_114:
                      operator delete(v137);
                      if ( (v46 & 1) == 0 )
                        return 1LL;
LABEL_115:
                      LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
                      std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"msg len is 0", 12LL);
                      LogCapture::~LogCapture((LogCapture *)v145);
                      return 1LL;
                    }
                    operator delete(v133);
                    if ( (v135 & 1) != 0 )
                      goto LABEL_114;
                  }
                  else
                  {
                    v46 = 0;
                    if ( (v135 & 1) != 0 )
                      goto LABEL_114;
                  }
LABEL_88:
                  if ( (v46 & 1) == 0 )
                    return 1LL;
                  goto LABEL_115;
                }
              }
              memcpy(v24, v21, v23);
              goto LABEL_85;
            }
LABEL_27:
            LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_452D0, "", 6, 0LL);
            v15 = std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"parsing msg len:", 16LL);
            std::ostream::operator<<(v15);
            LogCapture::~LogCapture((LogCapture *)v145);
            goto LABEL_28;
          }
        }
        memcpy(v7, v4, v6);
        goto LABEL_20;
      }
LABEL_190:
      std::__basic_string_common<true>::__throw_length_error();
    }
    return 0LL;
  }
  v8 = *(_DWORD *)(a1 + 340);
  if ( v8 <= 0 )
  {
    if ( (word_45358 & 1) != 0 )
      v9 = (const char *)qword_45368;
    else
      v9 = (char *)&word_45358 + 1;
    v127 = dword_45350;
    v129 = 0LL;
    v130 = 0LL;
    v128 = 0LL;
    v10 = strlen(v9);
    if ( v10 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_190;
    v11 = v10;
    if ( v10 >= 0x17 )
    {
      v25 = (v10 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v12 = (char *)operator new(v25);
      v129 = v11;
      v130 = v12;
      v128 = v25 | 1;
    }
    else
    {
      v12 = (char *)&v128 + 1;
      LOBYTE(v128) = 2 * v10;
      if ( !v10 )
      {
LABEL_43:
        v12[v11] = 0;
        if ( (g3::logLevel(&v127) & 1) != 0 )
        {
          *(_QWORD *)&v125[7] = 7037696LL;
          v126 = 0LL;
          v124 = 20;
          *(_QWORD *)v125 = *(_QWORD *)"DomainSock";
          v26 = g3::logTag(&v124);
          if ( (v124 & 1) == 0 )
          {
            if ( (v128 & 1) == 0 )
              goto LABEL_46;
LABEL_49:
            operator delete(v130);
            if ( (v26 & 1) == 0 )
            {
LABEL_51:
              v8 = *(_DWORD *)(a1 + 340);
              *(_BYTE *)(a1 + 336) = 1;
              goto LABEL_52;
            }
LABEL_50:
            LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
            v27 = std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"processing_msg_len:", 19LL);
            v28 = std::ostream::operator<<(v27);
            std::__put_character_sequence<char,std::char_traits<char>>(v28, (__int64)" must > 0", 9LL);
            LogCapture::~LogCapture((LogCapture *)v145);
            goto LABEL_51;
          }
          operator delete(v126);
          if ( (v128 & 1) != 0 )
            goto LABEL_49;
        }
        else
        {
          v26 = 0;
          if ( (v128 & 1) != 0 )
            goto LABEL_49;
        }
LABEL_46:
        if ( (v26 & 1) == 0 )
          goto LABEL_51;
        goto LABEL_50;
      }
    }
    memcpy(v12, v9, v11);
    goto LABEL_43;
  }
LABEL_52:
  if ( *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 < (unsigned __int64)v8 )
    return 0LL;
  if ( (word_452D8 & 1) != 0 )
    v29 = (const char *)qword_452E8;
  else
    v29 = (char *)&word_452D8 + 1;
  v120 = dword_452D0;
  v122 = 0LL;
  v123 = 0LL;
  v121 = 0LL;
  v30 = strlen(v29);
  if ( v30 >= 0xFFFFFFFFFFFFFFF0LL )
    goto LABEL_190;
  v31 = v30;
  if ( v30 >= 0x17 )
  {
    v33 = (v30 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v32 = (char *)operator new(v33);
    v122 = v31;
    v123 = v32;
    v121 = v33 | 1;
    goto LABEL_62;
  }
  v32 = (char *)&v121 + 1;
  LOBYTE(v121) = 2 * v30;
  if ( v30 )
LABEL_62:
    memcpy(v32, v29, v31);
  v32[v31] = 0;
  if ( (g3::logLevel(&v120) & 1) != 0 )
  {
    *(_QWORD *)&v118[7] = 7037696LL;
    v119 = 0LL;
    v117 = 20;
    *(_QWORD *)v118 = *(_QWORD *)"DomainSock";
    v34 = g3::logTag(&v117);
    if ( (v117 & 1) == 0 )
    {
      if ( (v121 & 1) == 0 )
        goto LABEL_66;
LABEL_69:
      operator delete(v123);
      if ( (v34 & 1) == 0 )
        goto LABEL_71;
      goto LABEL_70;
    }
    operator delete(v119);
    if ( (v121 & 1) != 0 )
      goto LABEL_69;
  }
  else
  {
    v34 = 0;
    if ( (v121 & 1) != 0 )
      goto LABEL_69;
  }
LABEL_66:
  if ( (v34 & 1) != 0 )
  {
LABEL_70:
    LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_452D0, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"parsing msg id", 14LL);
    LogCapture::~LogCapture((LogCapture *)v145);
  }
LABEL_71:
  v35 = *(unsigned int **)a2;
  v36 = *(int *)(a1 + 340);
  v37 = (unsigned int *)(*(_QWORD *)a2 + v36);
  if ( (_DWORD)v36 )
  {
    if ( *(_BYTE *)v35 )
    {
      v38 = v36 - 1;
      v39 = *(unsigned int **)a2;
      while ( v38 )
      {
        v40 = *((unsigned __int8 *)v39 + 1);
        v41 = (unsigned int *)((char *)v39 + 1);
        --v38;
        v39 = (unsigned int *)((char *)v39 + 1);
        if ( !v40 )
          goto LABEL_78;
      }
      goto LABEL_151;
    }
    v41 = *(unsigned int **)a2;
    if ( v37 == v35 )
      goto LABEL_151;
  }
  else
  {
    v41 = *(unsigned int **)a2;
LABEL_78:
    if ( v37 == v41 )
    {
LABEL_151:
      if ( (word_45358 & 1) != 0 )
        v81 = (const char *)qword_45368;
      else
        v81 = (char *)&word_45358 + 1;
      v113 = dword_45350;
      v115 = 0LL;
      v116 = 0LL;
      v114 = 0LL;
      v82 = strlen(v81);
      if ( v82 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v83 = v82;
      if ( v82 >= 0x17 )
      {
        v92 = (v82 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v84 = (char *)operator new(v92);
        v115 = v83;
        v116 = v84;
        v114 = v92 | 1;
      }
      else
      {
        v84 = (char *)&v114 + 1;
        LOBYTE(v114) = 2 * v82;
        if ( !v82 )
        {
LABEL_175:
          v84[v83] = 0;
          if ( (g3::logLevel(&v113) & 1) != 0 )
          {
            *(_QWORD *)&v111[7] = 7037696LL;
            v112 = 0LL;
            v110 = 20;
            *(_QWORD *)v111 = *(_QWORD *)"DomainSock";
            v93 = g3::logTag(&v110);
            if ( (v110 & 1) == 0 )
            {
              if ( (v114 & 1) == 0 )
                goto LABEL_178;
LABEL_181:
              operator delete(v116);
              if ( (v93 & 1) == 0 )
              {
LABEL_183:
                result = 0LL;
                *(_BYTE *)(a1 + 336) = 1;
                return result;
              }
LABEL_182:
              LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_45350, "", 6, 0LL);
              std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"cannot find msg_id end", 22LL);
              LogCapture::~LogCapture((LogCapture *)v145);
              goto LABEL_183;
            }
            operator delete(v112);
            if ( (v114 & 1) != 0 )
              goto LABEL_181;
          }
          else
          {
            v93 = 0;
            if ( (v114 & 1) != 0 )
              goto LABEL_181;
          }
LABEL_178:
          if ( (v93 & 1) == 0 )
            goto LABEL_183;
          goto LABEL_182;
        }
      }
      memcpy(v84, v81, v83);
      goto LABEL_175;
    }
  }
  v42 = (char *)v41 - (char *)v35;
  v107 = 0LL;
  v108 = 0LL;
  v109 = 0LL;
  if ( (unsigned __int64)((char *)v41 - (char *)v35) >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  if ( v42 > 0x16 )
  {
    v43 = (unsigned int *)operator new((v42 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    v108 = (char *)v41 - (char *)v35;
    v109 = v43;
    v107 = (v42 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    v44 = (char *)v41 - (char *)v35;
    if ( v41 == v35 )
      goto LABEL_99;
  }
  else
  {
    LOBYTE(v107) = 2 * v42;
    v43 = (unsigned int *)((char *)&v107 + 1);
    v44 = (char *)v41 - (char *)v35;
    if ( v41 == v35 )
      goto LABEL_99;
  }
  v47 = v43;
  v48 = v35;
  if ( v44 < 0x20 )
    goto LABEL_199;
  if ( v43 < v41 )
  {
    v47 = v43;
    v48 = v35;
    if ( (unsigned int *)((char *)v41 + (char *)v43 - (char *)v35) > v35 )
      goto LABEL_199;
  }
  v49 = (__int128 *)(v35 + 4);
  v47 = (unsigned int *)((char *)v43 + (v44 & 0xFFFFFFFFFFFFFFE0LL));
  v48 = (unsigned int *)((char *)v35 + (v44 & 0xFFFFFFFFFFFFFFE0LL));
  v50 = v43 + 4;
  v51 = v44 & 0xFFFFFFFFFFFFFFE0LL;
  do
  {
    v52 = *(v49 - 1);
    v53 = *v49;
    v49 += 2;
    v51 -= 32LL;
    *(v50 - 1) = v52;
    *v50 = v53;
    v50 += 2;
  }
  while ( v51 );
  if ( (v44 & 0xFFFFFFFFFFFFFFE0LL) != v44 )
  {
LABEL_199:
    do
    {
      v54 = *(_BYTE *)v48;
      v48 = (unsigned int *)((char *)v48 + 1);
      *(_BYTE *)v47 = v54;
      v47 = (unsigned int *)((char *)v47 + 1);
    }
    while ( v41 != v48 );
  }
  v43 = (unsigned int *)((char *)v43 + (char *)v41 - (char *)v35);
LABEL_99:
  v55 = dword_452D0;
  if ( (word_452D8 & 1) != 0 )
    v56 = (const char *)qword_452E8;
  else
    v56 = (char *)&word_452D8 + 1;
  *(_BYTE *)v43 = 0;
  v103 = v55;
  v105 = 0LL;
  v106 = 0LL;
  v104 = 0LL;
  v57 = strlen(v56);
  if ( v57 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v58 = v57;
  if ( v57 >= 0x17 )
  {
    v60 = (v57 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v59 = (char *)operator new(v60);
    v105 = v58;
    v106 = v59;
    v104 = v60 | 1;
    goto LABEL_107;
  }
  v59 = (char *)&v104 + 1;
  LOBYTE(v104) = 2 * v57;
  if ( v57 )
LABEL_107:
    memcpy(v59, v56, v58);
  v59[v58] = 0;
  if ( (g3::logLevel(&v103) & 1) == 0 )
  {
    v61 = 0;
    if ( (v104 & 1) != 0 )
      goto LABEL_117;
    goto LABEL_111;
  }
  v101[3] = 0;
  v102 = 0LL;
  LOBYTE(v101[0]) = 20;
  strcpy((char *)v101 + 1, "DomainSock");
  v61 = g3::logTag(v101);
  if ( (v101[0] & 1) != 0 )
  {
    operator delete(v102);
    if ( (v104 & 1) != 0 )
      goto LABEL_117;
LABEL_111:
    if ( (v61 & 1) == 0 )
      goto LABEL_125;
    goto LABEL_118;
  }
  if ( (v104 & 1) == 0 )
    goto LABEL_111;
LABEL_117:
  operator delete(v106);
  if ( (v61 & 1) == 0 )
    goto LABEL_125;
LABEL_118:
  LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_452D0, "", 6, 0LL);
  v62 = std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"get msg_id:", 11LL);
  if ( (v107 & 1) != 0 )
    v63 = (char *)v109;
  else
    v63 = (char *)&v107 + 1;
  if ( (v107 & 1) != 0 )
    v64 = v108;
  else
    v64 = (unsigned __int64)(unsigned __int8)v107 >> 1;
  std::__put_character_sequence<char,std::char_traits<char>>(v62, (__int64)v63, v64);
  LogCapture::~LogCapture((LogCapture *)v145);
LABEL_125:
  v65 = *(unsigned int **)a2;
  v66 = *(int *)(a1 + 340);
  if ( (word_452D8 & 1) != 0 )
    v67 = (const char *)qword_452E8;
  else
    v67 = (char *)&word_452D8 + 1;
  v97 = dword_452D0;
  v99 = 0LL;
  v100 = 0LL;
  v98 = 0LL;
  v68 = strlen(v67);
  if ( v68 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v69 = v68;
  if ( v68 >= 0x17 )
  {
    v71 = v65;
    v72 = (v68 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v70 = (char *)operator new(v72);
    v99 = v69;
    v100 = v70;
    v98 = v72 | 1;
    v65 = v71;
  }
  else
  {
    v70 = (char *)&v98 + 1;
    LOBYTE(v98) = 2 * v68;
    if ( !v68 )
      goto LABEL_134;
  }
  memcpy(v70, v67, v69);
LABEL_134:
  v70[v69] = 0;
  if ( (g3::logLevel(&v97) & 1) != 0 )
  {
    v95[3] = 0;
    v96 = 0LL;
    LOBYTE(v95[0]) = 20;
    strcpy((char *)v95 + 1, "DomainSock");
    v73 = g3::logTag(v95);
    if ( (v95[0] & 1) != 0 )
      operator delete(v96);
  }
  else
  {
    v73 = 0;
  }
  v74 = (char *)v41 + 1;
  v75 = (char *)v65 + v66 - ((char *)v41 + 1);
  if ( (v98 & 1) != 0 )
    operator delete(v100);
  if ( (v73 & 1) != 0 )
  {
    LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_452D0, "", 6, 0LL);
    v76 = std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"get data size:", 14LL);
    std::ostream::operator<<(v76);
    LogCapture::~LogCapture((LogCapture *)v145);
  }
  if ( (int)v75 < 1 )
  {
    v77 = 0LL;
  }
  else
  {
    v77 = (_QWORD *)operator new(0x18uLL);
    *v77 = 0LL;
    v77[1] = 0LL;
    v77[2] = 0LL;
    if ( v75 << 32 )
    {
      if ( v75 << 32 < 0 )
        std::__vector_base_common<true>::__throw_length_error();
      v78 = (_BYTE *)operator new((int)v75);
      v79 = (int)v75;
      *v77 = v78;
      v77[1] = v78;
      v77[2] = &v78[(int)v75];
      do
      {
        v80 = *v74++;
        --v79;
        *v78 = v80;
        v78 = (_BYTE *)(v77[1] + 1LL);
        v77[1] = v78;
      }
      while ( v79 );
    }
  }
  v85 = *(int *)(a1 + 340);
  *(_BYTE *)(a1 + 336) = 1;
  if ( (_DWORD)v85 )
  {
    v87 = *(unsigned int **)a2;
    v86 = *(_BYTE **)(a2 + 8);
    v88 = (_BYTE *)(*(_QWORD *)a2 + v85);
    v89 = v86 - v88;
    if ( v86 != v88 )
      memmove(*(void **)a2, v88, v86 - v88);
    *(_QWORD *)(a2 + 8) = (char *)v87 + v89;
  }
  v94 = v77;
  protocol::DomainSockServer::triggerPluginProcess(a1, (unsigned __int8 *)&v107, (unsigned __int64 **)&v94);
  v90 = (void **)v94;
  v94 = 0LL;
  if ( v90 )
  {
    v91 = *v90;
    if ( *v90 )
    {
      v90[1] = v91;
      operator delete(v91);
    }
    operator delete(v90);
  }
  if ( (v107 & 1) == 0 )
    return 1LL;
  operator delete(v109);
  return 1LL;
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 452D0: using guessed type int dword_452D0;
// 452D8: using guessed type __int16 word_452D8;
// 452E8: using guessed type __int64 qword_452E8;
// 45350: using guessed type int dword_45350;
// 45358: using guessed type __int16 word_45358;
// 45368: using guessed type __int64 qword_45368;
// 19534: using guessed type char var_1A8[8];

//----- (000000000001A500) ----------------------------------------------------
void __fastcall protocol::DomainSockServer::triggerPluginProcess(
        __int64 a1,
        unsigned __int8 *a2,
        unsigned __int64 **a3)
{
  __int64 v6; // x0
  __int64 v7; // x21
  const char *v8; // x23
  size_t v9; // x0
  size_t v10; // x22
  char *v11; // x24
  __int64 v12; // x0
  const char *v13; // x23
  __int64 v14; // x21
  size_t v15; // x0
  size_t v16; // x22
  char *v17; // x24
  _QWORD *v18; // x21
  unsigned __int64 v19; // x25
  char v20; // w22
  _QWORD *v21; // x0
  char *v22; // x25
  unsigned __int64 v23; // x28
  unsigned __int64 v24; // x27
  _QWORD *v25; // x22
  char *v26; // x0
  const char *v27; // x21
  size_t v28; // x0
  size_t v29; // x20
  char *v30; // x22
  unsigned __int64 v31; // x25
  char v32; // w22
  _QWORD *v33; // x0
  unsigned __int64 v34; // x8
  __int64 v35; // x1
  __int64 v36; // x2
  unsigned __int64 *v37; // x8
  __int64 v38; // x0
  void ***v39; // x19
  void **v40; // x0
  char *v41; // x9
  char *v42; // x10
  __int128 *v43; // x12
  _OWORD *v44; // x13
  unsigned __int64 v45; // x14
  __int128 v46; // q0
  __int128 v47; // q1
  char v48; // t1
  char *v49; // x1
  __int64 v50; // x2
  unsigned __int64 v51; // x0
  __int64 v52; // x1
  __int64 v53; // x0
  char v54; // w8
  void **v55; // x10
  __int64 v56; // x20
  void (*v57)(void); // x8
  __int64 v58; // x0
  __int64 v59; // t1
  __int64 v60; // x20
  unsigned __int64 v61; // x23
  char v62; // w20
  _QWORD *v63; // x0
  unsigned __int64 v64; // x8
  __int64 v65; // x1
  __int64 v66; // x2
  _DWORD v67[4]; // [xsp+8h] [xbp-2F8h] BYREF
  void *v68; // [xsp+18h] [xbp-2E8h]
  int v69; // [xsp+20h] [xbp-2E0h] BYREF
  unsigned __int64 v70; // [xsp+28h] [xbp-2D8h] BYREF
  size_t v71; // [xsp+30h] [xbp-2D0h]
  void *v72; // [xsp+38h] [xbp-2C8h]
  void *v73; // [xsp+40h] [xbp-2C0h] BYREF
  _DWORD v74[4]; // [xsp+48h] [xbp-2B8h] BYREF
  void *v75; // [xsp+58h] [xbp-2A8h]
  int v76; // [xsp+60h] [xbp-2A0h] BYREF
  unsigned __int64 v77; // [xsp+68h] [xbp-298h] BYREF
  size_t v78; // [xsp+70h] [xbp-290h]
  void *v79; // [xsp+78h] [xbp-288h]
  void ***v80; // [xsp+80h] [xbp-280h] BYREF
  __int64 v81; // [xsp+88h] [xbp-278h] BYREF
  unsigned __int64 v82; // [xsp+C8h] [xbp-238h] BYREF
  char *v83; // [xsp+D0h] [xbp-230h]
  void *v84; // [xsp+D8h] [xbp-228h]
  char v85; // [xsp+E0h] [xbp-220h] BYREF
  _BYTE v86[15]; // [xsp+E1h] [xbp-21Fh]
  void *v87; // [xsp+F0h] [xbp-210h]
  int v88; // [xsp+F8h] [xbp-208h] BYREF
  unsigned __int64 v89; // [xsp+100h] [xbp-200h] BYREF
  size_t v90; // [xsp+108h] [xbp-1F8h]
  void *v91; // [xsp+110h] [xbp-1F0h]
  char v92[8]; // [xsp+118h] [xbp-1E8h] BYREF
  void **v93[40]; // [xsp+120h] [xbp-1E0h] BYREF
  char v94[32]; // [xsp+260h] [xbp-A0h] BYREF
  char *v95; // [xsp+280h] [xbp-80h]

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v6 = std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::find<std::string>(
         a1 + 312,
         a2);
  if ( a1 + 320 != v6 )
  {
    v7 = v6;
    if ( !*a3 )
    {
      v18 = (_QWORD *)(v6 + 96);
      goto LABEL_87;
    }
    if ( (word_452D8 & 1) != 0 )
      v8 = (const char *)qword_452E8;
    else
      v8 = (char *)&word_452D8 + 1;
    v88 = dword_452D0;
    v90 = 0LL;
    v91 = 0LL;
    v89 = 0LL;
    v9 = strlen(v8);
    if ( v9 < 0xFFFFFFFFFFFFFFF0LL )
    {
      v10 = v9;
      if ( v9 >= 0x17 )
      {
        v19 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v11 = (char *)operator new(v19);
        v90 = v10;
        v91 = v11;
        v89 = v19 | 1;
      }
      else
      {
        v11 = (char *)&v89 + 1;
        LOBYTE(v89) = 2 * v9;
        if ( !v9 )
        {
LABEL_21:
          v11[v10] = 0;
          if ( (g3::logLevel(&v88) & 1) != 0 )
          {
            *(_QWORD *)&v86[7] = 7037696LL;
            v87 = 0LL;
            v85 = 20;
            *(_QWORD *)v86 = *(_QWORD *)"DomainSock";
            v20 = g3::logTag(&v85);
            if ( (v85 & 1) == 0 )
            {
              if ( (v89 & 1) == 0 )
                goto LABEL_24;
LABEL_27:
              operator delete(v91);
              if ( (v20 & 1) == 0 )
                goto LABEL_79;
              goto LABEL_28;
            }
            operator delete(v87);
            if ( (v89 & 1) != 0 )
              goto LABEL_27;
          }
          else
          {
            v20 = 0;
            if ( (v89 & 1) != 0 )
              goto LABEL_27;
          }
LABEL_24:
          if ( (v20 & 1) == 0 )
            goto LABEL_79;
LABEL_28:
          LogCapture::LogCapture((LogCapture *)v92, "DomainSock", (const LEVELS *)&dword_452D0, "", 6, 0LL);
          v21 = std::__put_character_sequence<char,std::char_traits<char>>(v93, (__int64)"parsing josn data:", 18LL);
          v23 = **a3;
          v22 = (char *)(*a3)[1];
          v82 = 0LL;
          v83 = 0LL;
          v84 = 0LL;
          v24 = (unsigned __int64)&v22[-v23];
          if ( (unsigned __int64)&v22[-v23] >= 0xFFFFFFFFFFFFFFF0LL )
            std::__basic_string_common<true>::__throw_length_error();
          v25 = v21;
          if ( v24 > 0x16 )
          {
            v26 = (char *)operator new((v24 + 16) & 0xFFFFFFFFFFFFFFF0LL);
            v83 = &v22[-v23];
            v84 = v26;
            v82 = (v24 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
            if ( (char *)v23 == v22 )
            {
LABEL_70:
              *v26 = 0;
              if ( (v82 & 1) != 0 )
                v49 = (char *)v84;
              else
                v49 = (char *)&v82 + 1;
              if ( (v82 & 1) != 0 )
                v50 = (__int64)v83;
              else
                v50 = (unsigned __int64)(unsigned __int8)v82 >> 1;
              std::__put_character_sequence<char,std::char_traits<char>>(v25, (__int64)v49, v50);
              if ( (v82 & 1) != 0 )
                operator delete(v84);
              LogCapture::~LogCapture((LogCapture *)v92);
LABEL_79:
              v51 = **a3;
              v52 = (*a3)[1];
              v95 = 0LL;
              nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::parse<std::__wrap_iter<unsigned char *>,0>(
                v51,
                v52,
                (__int64)v94,
                1,
                (__int64)v92);
              v53 = operator new(0x10uLL);
              v54 = v92[0];
              v55 = v93[0];
              v56 = v53;
              v92[0] = 0;
              *(_BYTE *)v53 = v54;
              *(_QWORD *)(v53 + 8) = v55;
              v93[0] = 0LL;
              nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
                v93,
                0);
              if ( v94 == v95 )
              {
                v57 = *(void (**)(void))(*(_QWORD *)v95 + 32LL);
              }
              else
              {
                if ( !v95 )
                {
LABEL_84:
                  v81 = v56;
                  v59 = *(_QWORD *)(v7 + 96);
                  v18 = (_QWORD *)(v7 + 96);
                  v58 = v59;
                  if ( !v59 )
                    sub_13744();
                  (*(void (__fastcall **)(__int64, unsigned __int8 *, __int64 *))(*(_QWORD *)v58 + 48LL))(v58, a2, &v81);
                  v60 = v81;
                  v81 = 0LL;
                  if ( v60 )
                  {
                    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
                      (void ***)(v60 + 8),
                      *(_BYTE *)v60);
                    operator delete((void *)v60);
                  }
LABEL_87:
                  v80 = 0LL;
                  if ( !*v18 )
                    sub_13744();
                  (*(void (__fastcall **)(_QWORD, unsigned __int8 *, void ****))(*(_QWORD *)*v18 + 48LL))(
                    *v18,
                    a2,
                    &v80);
                  v39 = v80;
                  v80 = 0LL;
                  if ( v39 )
                  {
                    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
                      v39 + 1,
                      *(_BYTE *)v39);
LABEL_90:
                    operator delete(v39);
                    return;
                  }
                  return;
                }
                v57 = *(void (**)(void))(*(_QWORD *)v95 + 40LL);
              }
              v57();
              goto LABEL_84;
            }
          }
          else
          {
            LOBYTE(v82) = 2 * v24;
            v26 = (char *)&v82 + 1;
            if ( (char *)v23 == v22 )
              goto LABEL_70;
          }
          v41 = v26;
          v42 = (char *)v23;
          if ( v24 < 0x20 )
            goto LABEL_120;
          if ( v26 < v22 )
          {
            v41 = v26;
            v42 = (char *)v23;
            if ( (unsigned __int64)&v26[v24] > v23 )
              goto LABEL_120;
          }
          v43 = (__int128 *)(v23 + 16);
          v41 = &v26[v24 & 0xFFFFFFFFFFFFFFE0LL];
          v42 = (char *)(v23 + (v24 & 0xFFFFFFFFFFFFFFE0LL));
          v44 = v26 + 16;
          v45 = v24 & 0xFFFFFFFFFFFFFFE0LL;
          do
          {
            v46 = *(v43 - 1);
            v47 = *v43;
            v43 += 2;
            v45 -= 32LL;
            *(v44 - 1) = v46;
            *v44 = v47;
            v44 += 2;
          }
          while ( v45 );
          if ( (v24 & 0xFFFFFFFFFFFFFFE0LL) != v24 )
          {
LABEL_120:
            do
            {
              v48 = *v42++;
              *v41++ = v48;
            }
            while ( v22 != v42 );
          }
          v26 = &v22[(_QWORD)v26 - v23];
          goto LABEL_70;
        }
      }
      memcpy(v11, v8, v10);
      goto LABEL_21;
    }
LABEL_112:
    std::__basic_string_common<true>::__throw_length_error();
  }
  v12 = std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::find<std::string>(
          a1 + 288,
          a2);
  if ( a1 + 296 == v12 )
  {
    if ( (word_45338 & 1) != 0 )
      v27 = (const char *)qword_45348;
    else
      v27 = (char *)&word_45338 + 1;
    v69 = dword_45330;
    v71 = 0LL;
    v72 = 0LL;
    v70 = 0LL;
    v28 = strlen(v27);
    if ( v28 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v29 = v28;
    if ( v28 >= 0x17 )
    {
      v61 = (v28 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v30 = (char *)operator new(v61);
      v71 = v29;
      v72 = v30;
      v70 = v61 | 1;
    }
    else
    {
      v30 = (char *)&v70 + 1;
      LOBYTE(v70) = 2 * v28;
      if ( !v28 )
      {
LABEL_94:
        v30[v29] = 0;
        if ( (g3::logLevel(&v69) & 1) != 0 )
        {
          v67[3] = 0;
          v68 = 0LL;
          LOBYTE(v67[0]) = 20;
          strcpy((char *)v67 + 1, "DomainSock");
          v62 = g3::logTag(v67);
          if ( (v67[0] & 1) == 0 )
          {
            if ( (v70 & 1) == 0 )
              goto LABEL_97;
LABEL_100:
            operator delete(v72);
            if ( (v62 & 1) == 0 )
              return;
            goto LABEL_101;
          }
          operator delete(v68);
          if ( (v70 & 1) != 0 )
            goto LABEL_100;
        }
        else
        {
          v62 = 0;
          if ( (v70 & 1) != 0 )
            goto LABEL_100;
        }
LABEL_97:
        if ( (v62 & 1) == 0 )
          return;
LABEL_101:
        LogCapture::LogCapture((LogCapture *)v92, "DomainSock", (const LEVELS *)&dword_45330, "", 6, 0LL);
        v63 = std::__put_character_sequence<char,std::char_traits<char>>(v93, (__int64)"unkown msg id:", 14LL);
        v64 = *a2;
        if ( (v64 & 1) != 0 )
          v65 = *((_QWORD *)a2 + 2);
        else
          v65 = (__int64)(a2 + 1);
        if ( (v64 & 1) != 0 )
          v66 = *((_QWORD *)a2 + 1);
        else
          v66 = v64 >> 1;
        std::__put_character_sequence<char,std::char_traits<char>>(v63, v65, v66);
        LogCapture::~LogCapture((LogCapture *)v92);
        return;
      }
    }
    memcpy(v30, v27, v29);
    goto LABEL_94;
  }
  if ( (word_45338 & 1) != 0 )
    v13 = (const char *)qword_45348;
  else
    v13 = (char *)&word_45338 + 1;
  v14 = v12;
  v76 = dword_45330;
  v78 = 0LL;
  v79 = 0LL;
  v77 = 0LL;
  v15 = strlen(v13);
  if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
    goto LABEL_112;
  v16 = v15;
  if ( v15 >= 0x17 )
  {
    v31 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v17 = (char *)operator new(v31);
    v78 = v16;
    v79 = v17;
    v77 = v31 | 1;
    goto LABEL_40;
  }
  v17 = (char *)&v77 + 1;
  LOBYTE(v77) = 2 * v15;
  if ( v15 )
LABEL_40:
    memcpy(v17, v13, v16);
  v17[v16] = 0;
  if ( (g3::logLevel(&v76) & 1) == 0 )
  {
    v32 = 0;
    if ( (v77 & 1) != 0 )
      goto LABEL_47;
    goto LABEL_44;
  }
  v74[3] = 0;
  v75 = 0LL;
  LOBYTE(v74[0]) = 20;
  strcpy((char *)v74 + 1, "DomainSock");
  v32 = g3::logTag(v74);
  if ( (v74[0] & 1) != 0 )
  {
    operator delete(v75);
    if ( (v77 & 1) != 0 )
      goto LABEL_47;
LABEL_44:
    if ( (v32 & 1) == 0 )
      goto LABEL_55;
    goto LABEL_48;
  }
  if ( (v77 & 1) == 0 )
    goto LABEL_44;
LABEL_47:
  operator delete(v79);
  if ( (v32 & 1) == 0 )
    goto LABEL_55;
LABEL_48:
  LogCapture::LogCapture((LogCapture *)v92, "DomainSock", (const LEVELS *)&dword_45330, "", 6, 0LL);
  v33 = std::__put_character_sequence<char,std::char_traits<char>>(v93, (__int64)"protocol process:", 17LL);
  v34 = *a2;
  if ( (v34 & 1) != 0 )
    v35 = *((_QWORD *)a2 + 2);
  else
    v35 = (__int64)(a2 + 1);
  if ( (v34 & 1) != 0 )
    v36 = *((_QWORD *)a2 + 1);
  else
    v36 = v34 >> 1;
  std::__put_character_sequence<char,std::char_traits<char>>(v33, v35, v36);
  LogCapture::~LogCapture((LogCapture *)v92);
LABEL_55:
  v37 = *a3;
  *a3 = 0LL;
  v73 = v37;
  v38 = *(_QWORD *)(v14 + 96);
  if ( !v38 )
    sub_13744();
  (*(void (__fastcall **)(__int64, unsigned __int8 *, void **))(*(_QWORD *)v38 + 48LL))(v38, a2, &v73);
  v39 = (void ***)v73;
  v73 = 0LL;
  if ( v39 )
  {
    v40 = *v39;
    if ( *v39 )
    {
      v39[1] = v40;
      operator delete(v40);
    }
    goto LABEL_90;
  }
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 452D0: using guessed type int dword_452D0;
// 452D8: using guessed type __int16 word_452D8;
// 452E8: using guessed type __int64 qword_452E8;
// 45330: using guessed type int dword_45330;
// 45338: using guessed type __int16 word_45338;
// 45348: using guessed type __int64 qword_45348;
// 45350: using guessed type int dword_45350;
// 45358: using guessed type __int16 word_45358;
// 45368: using guessed type __int64 qword_45368;
// 1A500: using guessed type char var_1E8[8];

//----- (000000000001B07C) ----------------------------------------------------
__int64 __usercall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::parse<std::__wrap_iter<unsigned char *>,0>@<X0>(
        unsigned __int64 a1@<X0>,
        __int64 a2@<X1>,
        __int64 a3@<X2>,
        char a4@<W3>,
        __int64 a5@<X8>)
{
  __int64 v8; // x26
  unsigned __int64 *v10; // x0
  std::__shared_weak_count *v11; // x19
  unsigned __int64 *v12; // x24
  __int64 v13; // x8
  unsigned __int64 v14; // x8
  __int64 v15; // x0
  std::__shared_weak_count *v16; // x20
  unsigned __int64 *v17; // x8
  unsigned __int64 v18; // x9
  __int64 result; // x0
  std::__shared_weak_count *v20; // x20
  unsigned __int64 *v21; // x8
  unsigned __int64 v22; // x9
  unsigned __int64 v23; // x8
  unsigned __int64 *v24; // x0
  __int64 v25; // [xsp+0h] [xbp-170h] BYREF
  unsigned __int64 *v26; // [xsp+8h] [xbp-168h]
  _QWORD v27[4]; // [xsp+10h] [xbp-160h] BYREF
  _QWORD *v28; // [xsp+30h] [xbp-140h]
  char v29[32]; // [xsp+40h] [xbp-130h] BYREF
  char *v30; // [xsp+60h] [xbp-110h]
  unsigned __int64 *v31; // [xsp+80h] [xbp-F0h]
  void *v32; // [xsp+A8h] [xbp-C8h]
  void *v33; // [xsp+B0h] [xbp-C0h]
  char v34; // [xsp+C0h] [xbp-B0h]
  void *v35; // [xsp+D0h] [xbp-A0h]
  __int64 v36; // [xsp+118h] [xbp-58h]

  v8 = a2 - a1;
  v36 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  *(_BYTE *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0LL;
  if ( a2 == a1 )
  {
    v24 = (unsigned __int64 *)operator new(0x30uLL);
    v24[2] = 0LL;
    v11 = (std::__shared_weak_count *)v24;
    v24[1] = 0LL;
    v12 = v24 + 1;
    *v24 = (unsigned __int64)off_440B0;
    v24[3] = (unsigned __int64)&off_44100;
    v13 = (__int64)(v24 + 3);
    v24[4] = 0LL;
    v24[5] = 0LL;
  }
  else
  {
    v10 = (unsigned __int64 *)operator new(0x30uLL);
    v10[2] = 0LL;
    v11 = (std::__shared_weak_count *)v10;
    v10[1] = 0LL;
    v12 = v10 + 1;
    *v10 = (unsigned __int64)off_440B0;
    v10[3] = (unsigned __int64)&off_44100;
    v13 = (__int64)(v10 + 3);
    v10[4] = a1;
    v10[5] = a1 + v8;
  }
  v25 = v13;
  v26 = (unsigned __int64 *)v11;
  do
    v14 = __ldxr(v12);
  while ( __stxr(v14 + 1, v12) );
  v15 = *(_QWORD *)(a3 + 32);
  if ( v15 )
  {
    if ( a3 == v15 )
    {
      v28 = v27;
      (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v15 + 24LL))(v15, v27);
    }
    else
    {
      v28 = (_QWORD *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v15 + 16LL))(v15);
    }
  }
  else
  {
    v28 = 0LL;
  }
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parser(
    (__int64)v29,
    (__int64)&v25,
    v27,
    a4 & 1);
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse(
    (__int64)v29,
    1,
    a5);
  if ( (v34 & 1) != 0 )
    operator delete(v35);
  if ( v32 )
  {
    v33 = v32;
    operator delete(v32);
  }
  v16 = (std::__shared_weak_count *)v31;
  if ( v31 )
  {
    v17 = v31 + 1;
    do
      v18 = __ldaxr(v17);
    while ( __stlxr(v18 - 1, v17) );
    if ( !v18 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v16 + 16LL))(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if ( v29 == v30 )
  {
    (*(void (__fastcall **)(char *))(*(_QWORD *)v30 + 32LL))(v30);
  }
  else if ( v30 )
  {
    (*(void (__fastcall **)(char *))(*(_QWORD *)v30 + 40LL))(v30);
  }
  result = (__int64)v28;
  if ( v27 == v28 )
  {
    result = (*(__int64 (__fastcall **)(_QWORD *))(*v28 + 32LL))(v28);
  }
  else if ( v28 )
  {
    result = (*(__int64 (__fastcall **)(_QWORD *))(*v28 + 40LL))(v28);
  }
  v20 = (std::__shared_weak_count *)v26;
  if ( v26 )
  {
    v21 = v26 + 1;
    do
      v22 = __ldaxr(v21);
    while ( __stlxr(v22 - 1, v21) );
    if ( !v22 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v20 + 16LL))(v20);
      result = std::__shared_weak_count::__release_weak(v20);
    }
  }
  do
    v23 = __ldaxr(v12);
  while ( __stlxr(v23 - 1, v12) );
  if ( !v23 )
  {
    (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v11 + 16LL))(v11);
    return std::__shared_weak_count::__release_weak(v11);
  }
  return result;
}
// 440B0: using guessed type __int64 (__fastcall *[3])();
// 44100: using guessed type __int64 (__fastcall *)(nlohmann::detail::input_buffer_adapter *__hidden this);
// 1B07C: using guessed type _QWORD var_160[4];

//----- (000000000001B468) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(
        __int64 a1,
        char *a2)
{
  char *v4; // x0
  void (*v5)(void); // x8

  if ( !a2 )
    return;
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(
    a1,
    *(char **)a2);
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(
    a1,
    *((char **)a2 + 1));
  v4 = (char *)*((_QWORD *)a2 + 12);
  if ( a2 + 64 == v4 )
  {
    v5 = *(void (**)(void))(*(_QWORD *)v4 + 32LL);
    goto LABEL_7;
  }
  if ( v4 )
  {
    v5 = *(void (**)(void))(*(_QWORD *)v4 + 40LL);
LABEL_7:
    v5();
  }
  if ( (a2[32] & 1) != 0 )
    operator delete(*((void **)a2 + 6));
  operator delete(a2);
}

//----- (000000000001B4E4) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(
        __int64 a1,
        char *a2)
{
  char *v4; // x0
  void (*v5)(void); // x8

  if ( !a2 )
    return;
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(
    a1,
    *(char **)a2);
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(
    a1,
    *((char **)a2 + 1));
  v4 = (char *)*((_QWORD *)a2 + 12);
  if ( a2 + 64 == v4 )
  {
    v5 = *(void (**)(void))(*(_QWORD *)v4 + 32LL);
    goto LABEL_7;
  }
  if ( v4 )
  {
    v5 = *(void (**)(void))(*(_QWORD *)v4 + 40LL);
LABEL_7:
    v5();
  }
  if ( (a2[32] & 1) != 0 )
    operator delete(*((void **)a2 + 6));
  operator delete(a2);
}

//----- (000000000001B560) ----------------------------------------------------
void __fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        void ***a1,
        char a2)
{
  void **v3; // x0
  void **v4; // x20
  void ***v5; // x21
  void ***v6; // x22
  void *v7; // x0
  char v8; // t1

  switch ( a2 )
  {
    case 3:
      v3 = *a1;
      if ( (*(_BYTE *)*a1 & 1) != 0 )
      {
        operator delete(v3[2]);
LABEL_7:
        operator delete(*a1);
        return;
      }
      break;
    case 2:
      v4 = *a1;
      v5 = (void ***)**a1;
      if ( v5 )
      {
        v6 = (void ***)v4[1];
        v7 = **a1;
        if ( v6 != v5 )
        {
          do
          {
            v8 = *((_BYTE *)v6 - 16);
            v6 -= 2;
            nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
              v6 + 1,
              v8);
          }
          while ( v5 != v6 );
          v7 = *v4;
        }
        v4[1] = v5;
        operator delete(v7);
        v4 = *a1;
      }
      v3 = v4;
      break;
    case 1:
      std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::destroy(
        (__int64)*a1,
        (char *)(*a1)[1]);
      goto LABEL_7;
    default:
      return;
  }
  operator delete(v3);
}

//----- (000000000001B620) ----------------------------------------------------
void __fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::destroy(
        __int64 a1,
        char *a2)
{
  if ( a2 )
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::destroy(
      a1,
      *(char **)a2);
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::destroy(
      a1,
      *((char **)a2 + 1));
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      (void ***)a2 + 8,
      a2[56]);
    if ( (a2[32] & 1) != 0 )
      operator delete(*((void **)a2 + 6));
    operator delete(a2);
  }
}

//----- (000000000001B67C) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<std::thread>::~__shared_ptr_emplace(__int64 a1)
{
  *(_QWORD *)a1 = off_43FE0;
  std::thread::~thread((std::thread *)(a1 + 24));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);
}
// 43FE0: using guessed type __int64 (__fastcall *[3])();

//----- (000000000001B6B0) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<std::thread>::~__shared_ptr_emplace(__int64 a1)
{
  *(_QWORD *)a1 = off_43FE0;
  std::thread::~thread((std::thread *)(a1 + 24));
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)a1);
  operator delete((void *)a1);
}
// 43FE0: using guessed type __int64 (__fastcall *off_43FE0[3])();

//----- (000000000001B6EC) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<std::thread>::__on_zero_shared(__int64 a1)
{
  std::thread::~thread((std::thread *)(a1 + 24));
}

//----- (000000000001B6F8) ----------------------------------------------------
std::__ndk1 *__fastcall sub_1B6F8(pthread_t *a1, __int128 *a2)
{
  std::__thread_struct *v4; // x21
  char *v5; // x0
  __int128 v6; // q0
  std::__thread_struct **v7; // x19
  std::__ndk1 *result; // x0
  const char *v9; // x2
  struct _Unwind_Exception *v10; // x0
  std::__thread_struct *v11; // x21
  struct _Unwind_Exception *v12; // x20

  v4 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v4);
  v5 = (char *)operator new(0x20uLL);
  *(_QWORD *)v5 = v4;
  v6 = *a2;
  v7 = (std::__thread_struct **)v5;
  *((_QWORD *)v5 + 3) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v5 + 8) = v6;
  result = (std::__ndk1 *)pthread_create(
                            a1,
                            0LL,
                            (void *(*)(void *))std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (protocol::DomainSockServer::*)(void),protocol::DomainSockServer*>>>,
                            v5);
  if ( (_DWORD)result )
  {
    v10 = (struct _Unwind_Exception *)std::__throw_system_error(result, (int)"thread constructor failed", v9);
    v11 = *v7;
    v12 = v10;
    *v7 = 0LL;
    if ( v11 )
    {
      std::__thread_struct::~__thread_struct(v11);
      operator delete(v11);
    }
    operator delete(v7);
    _Unwind_Resume(v12);
  }
  return result;
}
// 1B774: variable 'v9' is possibly undefined

//----- (000000000001B7C4) ----------------------------------------------------
__int64 __fastcall std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (protocol::DomainSockServer::*)(void),protocol::DomainSockServer*>>>(
        std::__ndk1 *a1)
{
  pthread_key_t *v2; // x0
  std::__thread_struct *v3; // x1
  __int64 v4; // x10
  void (__fastcall *v5)(_QWORD); // x8
  _QWORD *v6; // x0
  std::__thread_struct *v7; // x20

  v2 = (pthread_key_t *)std::__thread_local_data(a1);
  v3 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0LL;
  pthread_setspecific(*v2, v3);
  v4 = *((_QWORD *)a1 + 2);
  v5 = (void (__fastcall *)(_QWORD))*((_QWORD *)a1 + 1);
  v6 = (_QWORD *)(*((_QWORD *)a1 + 3) + (v4 >> 1));
  if ( (v4 & 1) != 0 )
    v5 = *(void (__fastcall **)(_QWORD))((char *)v5 + *v6);
  v5(v6);
  v7 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0LL;
  if ( v7 )
  {
    std::__thread_struct::~__thread_struct(v7);
    operator delete(v7);
  }
  operator delete(a1);
  return 0LL;
}

//----- (000000000001B87C) ----------------------------------------------------
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  __int64 *v3; // x20
  __int64 *v4; // x24
  unsigned __int64 v6; // x8
  size_t v7; // x25
  const void *v8; // x21
  unsigned __int64 v9; // x28
  size_t v10; // x26
  size_t v11; // x22
  char *v12; // x23
  int v13; // w0
  __int64 *v14; // x8
  int v15; // w0

  v3 = (__int64 *)(a1 + 8);
  v4 = *(__int64 **)(a1 + 8);
  if ( v4 )
  {
    v6 = *a3;
    v3 = (__int64 *)(a1 + 8);
    if ( (v6 & 1) != 0 )
      v7 = *((_QWORD *)a3 + 1);
    else
      v7 = v6 >> 1;
    if ( (v6 & 1) != 0 )
      v8 = (const void *)*((_QWORD *)a3 + 2);
    else
      v8 = a3 + 1;
    while ( 1 )
    {
      v9 = *((unsigned __int8 *)v4 + 32);
      if ( (v9 & 1) != 0 )
        v10 = v4[5];
      else
        v10 = v9 >> 1;
      if ( v10 >= v7 )
        v11 = v7;
      else
        v11 = v10;
      if ( v11 && ((v9 & 1) == 0 ? (v12 = (char *)v4 + 33) : (v12 = (char *)v4[6]), (v13 = memcmp(v8, v12, v11)) != 0) )
      {
        if ( (v13 & 0x80000000) == 0 )
          goto LABEL_29;
      }
      else if ( v7 >= v10 )
      {
        if ( !v11 )
          goto LABEL_32;
        v12 = (v9 & 1) != 0 ? (char *)v4[6] : (char *)v4 + 33;
LABEL_29:
        v15 = memcmp(v12, v8, v11);
        if ( v15 )
        {
          if ( (v15 & 0x80000000) == 0 )
            goto LABEL_34;
        }
        else
        {
LABEL_32:
          if ( v10 >= v7 )
            goto LABEL_34;
        }
        v3 = v4 + 1;
        v14 = (__int64 *)v4[1];
        if ( !v14 )
        {
LABEL_34:
          *a2 = v4;
          return v3;
        }
        goto LABEL_8;
      }
      v14 = (__int64 *)*v4;
      if ( !*v4 )
      {
        *a2 = v4;
        return v4;
      }
      v3 = v4;
LABEL_8:
      v4 = v14;
    }
  }
  *a2 = v3;
  return v3;
}

//----- (000000000001B9A8) ----------------------------------------------------
__int64 *__fastcall std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2)
{
  __int64 v2; // x9
  _BYTE *v3; // x10
  __int64 *v4; // x8
  __int64 v5; // x12
  _BYTE *v6; // x12
  int v7; // t1
  __int64 v8; // x12
  int v9; // t1
  __int64 v10; // x10
  _QWORD *v11; // x8
  __int64 v12; // x10
  __int64 *v13; // x9
  __int64 v14; // x10
  __int64 **v15; // x10
  __int64 v16; // x11
  _QWORD *v17; // x10
  __int64 v18; // x11
  _QWORD *v19; // x8
  __int64 v20; // x11
  __int64 *v21; // x9
  __int64 v22; // x10
  __int64 **v23; // x10
  __int64 v24; // x11

  *((_BYTE *)a2 + 24) = a2 == result;
  if ( a2 != result )
  {
    do
    {
      v2 = a2[2];
      v3 = (_BYTE *)(v2 + 24);
      if ( *(_BYTE *)(v2 + 24) )
        break;
      v4 = *(__int64 **)(v2 + 16);
      v5 = *v4;
      if ( *v4 == v2 )
      {
        v8 = v4[1];
        if ( !v8 || (v9 = *(unsigned __int8 *)(v8 + 24), v6 = (_BYTE *)(v8 + 24), v9) )
        {
          if ( *(__int64 **)v2 != a2 )
          {
            v17 = *(_QWORD **)(v2 + 8);
            v18 = *v17;
            *(_QWORD *)(v2 + 8) = *v17;
            if ( v18 )
            {
              *(_QWORD *)(v18 + 16) = v2;
              v4 = *(__int64 **)(v2 + 16);
            }
            v17[2] = v4;
            v19 = *(_QWORD **)(v2 + 16);
            v20 = *v19 != v2;
            v19[v20] = v17;
            *v17 = v2;
            *(_QWORD *)(v2 + 16) = v17;
            v4 = (__int64 *)v17[2];
            v3 = v17 + 3;
          }
          *v3 = 1;
          v21 = (__int64 *)*v4;
          *((_BYTE *)v4 + 24) = 0;
          v22 = v21[1];
          *v4 = v22;
          if ( v22 )
            *(_QWORD *)(v22 + 16) = v4;
          v21[2] = v4[2];
          v23 = (__int64 **)v4[2];
          v24 = *v23 != v4;
          v23[v24] = v21;
          v21[1] = (__int64)v4;
          v4[2] = (__int64)v21;
          return result;
        }
      }
      else if ( !v5 || (v7 = *(unsigned __int8 *)(v5 + 24), v6 = (_BYTE *)(v5 + 24), v7) )
      {
        if ( *(__int64 **)v2 == a2 )
        {
          v10 = a2[1];
          *(_QWORD *)v2 = v10;
          if ( v10 )
          {
            *(_QWORD *)(v10 + 16) = v2;
            v4 = *(__int64 **)(v2 + 16);
          }
          a2[2] = (__int64)v4;
          v11 = *(_QWORD **)(v2 + 16);
          v12 = *v11 != v2;
          v11[v12] = a2;
          a2[1] = v2;
          *(_QWORD *)(v2 + 16) = a2;
          v4 = (__int64 *)a2[2];
          v3 = a2 + 3;
        }
        *v3 = 1;
        v13 = (__int64 *)v4[1];
        *((_BYTE *)v4 + 24) = 0;
        v14 = *v13;
        v4[1] = *v13;
        if ( v14 )
          *(_QWORD *)(v14 + 16) = v4;
        v13[2] = v4[2];
        v15 = (__int64 **)v4[2];
        v16 = *v15 != v4;
        v15[v16] = v13;
        *v13 = (__int64)v4;
        v4[2] = (__int64)v13;
        return result;
      }
      a2 = *(__int64 **)(v2 + 16);
      *v3 = 1;
      *((_BYTE *)v4 + 24) = v4 == result;
      *v6 = 1;
    }
    while ( v4 != result );
  }
  return result;
}

//----- (000000000001BB50) ----------------------------------------------------
_QWORD *__fastcall sub_1BB50(_QWORD *result, __int64 a2)
{
  _QWORD *v2; // x20
  __int64 v4; // x8
  __int64 v5[6]; // [xsp+0h] [xbp-50h] BYREF

  v5[5] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (_QWORD *)a2 != result )
  {
    v2 = result;
    result = (_QWORD *)result[4];
    if ( result == v2 )
    {
      if ( *(_QWORD *)(a2 + 32) == a2 )
      {
        (*(void (__fastcall **)(_QWORD *, __int64 *))(*result + 24LL))(result, v5);
        (*(void (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = 0LL;
        (*(void (__fastcall **)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 32) + 24LL))(*(_QWORD *)(a2 + 32), v2);
        (*(void (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = 0LL;
        v2[4] = v2;
        (*(void (__fastcall **)(__int64 *, __int64))(v5[0] + 24))(v5, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(__int64 *))(v5[0] + 32))(v5);
      }
      else
      {
        (*(void (__fastcall **)(_QWORD *, __int64))(*result + 24LL))(result, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = a2;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 32);
      if ( a2 == v4 )
      {
        (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 24LL))(*(_QWORD *)(a2 + 32), v2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = v2[4];
        v2[4] = v2;
      }
      else
      {
        v2[4] = v4;
        *(_QWORD *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

//----- (000000000001BCB8) ----------------------------------------------------
__int64 *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  __int64 *v3; // x20
  __int64 *v4; // x24
  unsigned __int64 v6; // x8
  size_t v7; // x25
  const void *v8; // x21
  unsigned __int64 v9; // x28
  size_t v10; // x26
  size_t v11; // x22
  char *v12; // x23
  int v13; // w0
  __int64 *v14; // x8
  int v15; // w0

  v3 = (__int64 *)(a1 + 8);
  v4 = *(__int64 **)(a1 + 8);
  if ( v4 )
  {
    v6 = *a3;
    v3 = (__int64 *)(a1 + 8);
    if ( (v6 & 1) != 0 )
      v7 = *((_QWORD *)a3 + 1);
    else
      v7 = v6 >> 1;
    if ( (v6 & 1) != 0 )
      v8 = (const void *)*((_QWORD *)a3 + 2);
    else
      v8 = a3 + 1;
    while ( 1 )
    {
      v9 = *((unsigned __int8 *)v4 + 32);
      if ( (v9 & 1) != 0 )
        v10 = v4[5];
      else
        v10 = v9 >> 1;
      if ( v10 >= v7 )
        v11 = v7;
      else
        v11 = v10;
      if ( v11 && ((v9 & 1) == 0 ? (v12 = (char *)v4 + 33) : (v12 = (char *)v4[6]), (v13 = memcmp(v8, v12, v11)) != 0) )
      {
        if ( (v13 & 0x80000000) == 0 )
          goto LABEL_29;
      }
      else if ( v7 >= v10 )
      {
        if ( !v11 )
          goto LABEL_32;
        v12 = (v9 & 1) != 0 ? (char *)v4[6] : (char *)v4 + 33;
LABEL_29:
        v15 = memcmp(v12, v8, v11);
        if ( v15 )
        {
          if ( (v15 & 0x80000000) == 0 )
            goto LABEL_34;
        }
        else
        {
LABEL_32:
          if ( v10 >= v7 )
            goto LABEL_34;
        }
        v3 = v4 + 1;
        v14 = (__int64 *)v4[1];
        if ( !v14 )
        {
LABEL_34:
          *a2 = v4;
          return v3;
        }
        goto LABEL_8;
      }
      v14 = (__int64 *)*v4;
      if ( !*v4 )
      {
        *a2 = v4;
        return v4;
      }
      v3 = v4;
LABEL_8:
      v4 = v14;
    }
  }
  *a2 = v3;
  return v3;
}

//----- (000000000001BDE4) ----------------------------------------------------
_QWORD *__fastcall sub_1BDE4(_QWORD *result, __int64 a2)
{
  _QWORD *v2; // x20
  __int64 v4; // x8
  __int64 v5[6]; // [xsp+0h] [xbp-50h] BYREF

  v5[5] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( (_QWORD *)a2 != result )
  {
    v2 = result;
    result = (_QWORD *)result[4];
    if ( result == v2 )
    {
      if ( *(_QWORD *)(a2 + 32) == a2 )
      {
        (*(void (__fastcall **)(_QWORD *, __int64 *))(*result + 24LL))(result, v5);
        (*(void (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = 0LL;
        (*(void (__fastcall **)(_QWORD, _QWORD *))(**(_QWORD **)(a2 + 32) + 24LL))(*(_QWORD *)(a2 + 32), v2);
        (*(void (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = 0LL;
        v2[4] = v2;
        (*(void (__fastcall **)(__int64 *, __int64))(v5[0] + 24))(v5, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(__int64 *))(v5[0] + 32))(v5);
      }
      else
      {
        (*(void (__fastcall **)(_QWORD *, __int64))(*result + 24LL))(result, a2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(*(_QWORD *)v2[4] + 32LL))(v2[4]);
        v2[4] = *(_QWORD *)(a2 + 32);
      }
      *(_QWORD *)(a2 + 32) = a2;
    }
    else
    {
      v4 = *(_QWORD *)(a2 + 32);
      if ( a2 == v4 )
      {
        (*(void (__fastcall **)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 24LL))(*(_QWORD *)(a2 + 32), v2);
        result = (_QWORD *)(*(__int64 (__fastcall **)(_QWORD))(**(_QWORD **)(a2 + 32) + 32LL))(*(_QWORD *)(a2 + 32));
        *(_QWORD *)(a2 + 32) = v2[4];
        v2[4] = v2;
      }
      else
      {
        v2[4] = v4;
        *(_QWORD *)(a2 + 32) = result;
      }
    }
  }
  return result;
}

//----- (000000000001BF4C) ----------------------------------------------------
void __noreturn std::__vector_base_common<true>::__throw_length_error()
{
  sub_13574("vector");
}

//----- (000000000001BF60) ----------------------------------------------------
void __noreturn std::__basic_string_common<true>::__throw_out_of_range()
{
  sub_1BF74("basic_string");
}

//----- (000000000001BF74) ----------------------------------------------------
void __fastcall __noreturn sub_1BF74(const char *a1)
{
  std::logic_error *exception; // x19

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1BFC4(exception, a1);
  __cxa_throw(
    exception,
    (struct type_info *)&`typeinfo for'std::out_of_range,
    (void (__fastcall *)(void *))&std::out_of_range::~out_of_range);
}

//----- (000000000001BFC4) ----------------------------------------------------
__int64 __fastcall sub_1BFC4(std::logic_error *a1, const char *a2)
{
  __int64 result; // x0

  result = std::logic_error::logic_error(a1, a2);
  *(_QWORD *)a1 = (char *)&`vtable for'std::out_of_range + 16;
  return result;
}

//----- (000000000001BFF4) ----------------------------------------------------
__int64 __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::find<std::string>(
        __int64 a1,
        unsigned __int8 *a2)
{
  __int64 v2; // x19
  __int64 v3; // x23
  unsigned __int64 v4; // x8
  __int64 v5; // x20
  size_t v6; // x22
  unsigned __int8 *v7; // x21
  unsigned __int64 v8; // x9
  size_t v9; // x24
  size_t v10; // x2
  const void *v11; // x0
  int v12; // w0
  unsigned __int64 v13; // x9
  size_t v14; // x23
  size_t v15; // x2
  const void *v16; // x1
  int v17; // w0

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if ( !v3 )
    return v2;
  v4 = *a2;
  v5 = a1 + 8;
  v6 = (v4 & 1) != 0 ? *((_QWORD *)a2 + 1) : v4 >> 1;
  v7 = (v4 & 1) != 0 ? (unsigned __int8 *)*((_QWORD *)a2 + 2) : a2 + 1;
  do
  {
    v8 = *(unsigned __int8 *)(v3 + 32);
    if ( (v8 & 1) != 0 )
      v9 = *(_QWORD *)(v3 + 40);
    else
      v9 = v8 >> 1;
    if ( v6 >= v9 )
      v10 = v9;
    else
      v10 = v6;
    if ( !v10
      || ((v8 & 1) == 0 ? (v11 = (const void *)(v3 + 33)) : (v11 = *(const void **)(v3 + 48)),
          (v12 = memcmp(v11, v7, v10)) == 0) )
    {
      if ( v9 < v6 )
        v12 = -1;
      else
        v12 = v6 < v9;
    }
    if ( v12 >= 0 )
      v5 = v3;
    v3 = *(_QWORD *)(v3 + 8LL * (v12 < 0));
  }
  while ( v3 );
  if ( v5 == v2 )
    return v2;
  v13 = *(unsigned __int8 *)(v5 + 32);
  if ( (v13 & 1) != 0 )
    v14 = *(_QWORD *)(v5 + 40);
  else
    v14 = v13 >> 1;
  if ( v14 >= v6 )
    v15 = v6;
  else
    v15 = v14;
  if ( v15 )
  {
    v16 = (v13 & 1) != 0 ? *(const void **)(v5 + 48) : (const void *)(v5 + 33);
    v17 = memcmp(v7, v16, v15);
    if ( v17 )
    {
      if ( (v17 & 0x80000000) == 0 )
        return v5;
      return v2;
    }
  }
  if ( v6 < v14 )
    return v2;
  return v5;
}

//----- (000000000001C100) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parser(
        __int64 a1,
        __int64 a2,
        _QWORD *a3,
        char a4)
{
  _QWORD *v4; // x8
  char *decimal_point; // x9
  char v9; // w9
  __int64 result; // x0

  v4 = (_QWORD *)a3[4];
  if ( v4 )
  {
    if ( a3 == v4 )
    {
      *(_QWORD *)(a1 + 32) = a1;
      (*(void (__fastcall **)(_QWORD, __int64))(*(_QWORD *)a3[4] + 24LL))(a3[4], a1);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = (*(_QWORD *(__fastcall **)(_QWORD *, _QWORD))(*v4 + 16LL))(v4, a3[4]);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0LL;
  }
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0LL;
  *(_QWORD *)(a2 + 8) = 0LL;
  *(_DWORD *)(a1 + 72) = -1;
  *(_BYTE *)(a1 + 76) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 144) = 0LL;
  *(_QWORD *)(a1 + 152) = "";
  *(_QWORD *)(a1 + 168) = 0LL;
  *(_QWORD *)(a1 + 176) = 0LL;
  *(_QWORD *)(a1 + 160) = 0LL;
  decimal_point = localeconv()->decimal_point;
  if ( decimal_point )
    v9 = *decimal_point;
  else
    v9 = 46;
  *(_BYTE *)(a1 + 184) = v9;
  *(_BYTE *)(a1 + 192) = a4 & 1;
  result = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(a1 + 56);
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

//----- (000000000001C270) ----------------------------------------------------
void __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse(
        __int64 a1,
        char a2,
        __int64 a3)
{
  __int64 v6; // x0
  char v7; // w9
  int v8; // w0
  __int64 v9; // x21
  __int128 v10; // q0
  __int64 v11; // x8
  char v12; // w1
  void **v13; // x8
  void (*v14)(void); // x8
  int v15; // w0
  __int64 v16; // x21
  __int128 v17; // q0
  __int64 v18; // x8
  char v19; // w1
  __int64 v20; // x8
  __int64 *v21; // x0
  __int64 v22; // x8
  void **v23; // [xsp+18h] [xbp-1D8h] BYREF
  char v24; // [xsp+20h] [xbp-1D0h]
  __int64 v25; // [xsp+28h] [xbp-1C8h] BYREF
  char v26; // [xsp+30h] [xbp-1C0h]
  __int64 v27; // [xsp+38h] [xbp-1B8h] BYREF
  __int64 v28; // [xsp+40h] [xbp-1B0h] BYREF
  __int64 v29; // [xsp+48h] [xbp-1A8h]
  void *v30; // [xsp+50h] [xbp-1A0h]
  unsigned __int8 v31[16]; // [xsp+58h] [xbp-198h] BYREF
  void *v32; // [xsp+68h] [xbp-188h]
  __int128 v33; // [xsp+70h] [xbp-180h] BYREF
  __int64 v34; // [xsp+80h] [xbp-170h]
  __int64 v35[2]; // [xsp+90h] [xbp-160h] BYREF
  _BYTE v36[24]; // [xsp+A0h] [xbp-150h] BYREF
  __int64 v37[2]; // [xsp+B8h] [xbp-138h] BYREF
  void *v38; // [xsp+C8h] [xbp-128h]
  char v39[32]; // [xsp+D0h] [xbp-120h] BYREF
  char *v40; // [xsp+F0h] [xbp-100h]
  __int64 v41; // [xsp+100h] [xbp-F0h] BYREF
  __int128 v42; // [xsp+108h] [xbp-E8h]
  __int128 v43; // [xsp+118h] [xbp-D8h]
  char v44; // [xsp+128h] [xbp-C8h]
  char v45; // [xsp+129h] [xbp-C7h]
  char v46; // [xsp+158h] [xbp-98h]

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  v6 = *(_QWORD *)(a1 + 32);
  if ( v6 )
  {
    if ( a1 == v6 )
    {
      v40 = v39;
      (*(void (__fastcall **)(__int64, char *))(*(_QWORD *)v6 + 24LL))(v6, v39);
    }
    else
    {
      v40 = (char *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v6 + 16LL))(v6);
    }
    nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::json_sax_dom_callback_parser(
      (__int64)&v41,
      a3,
      (__int64)v39,
      *(_BYTE *)(a1 + 192));
    if ( v39 == v40 )
    {
      v14 = *(void (**)(void))(*(_QWORD *)v40 + 32LL);
    }
    else
    {
      if ( !v40 )
      {
LABEL_20:
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(
          a1,
          &v41);
        if ( (a2 & 1) != 0 )
        {
          v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(a1 + 56);
          *(_DWORD *)(a1 + 48) = v15;
          if ( v15 != 15 )
          {
            v16 = *(_QWORD *)(a1 + 80);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
              v37,
              a1 + 56);
            v17 = *(_OWORD *)(a1 + 80);
            v18 = *(_QWORD *)(a1 + 96);
            v29 = 0LL;
            v30 = 0LL;
            v28 = 0x65756C61760ALL;
            v34 = v18;
            v33 = v17;
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
              (unsigned __int8 *)&v28,
              a1,
              15,
              (__int64)v31);
            nlohmann::detail::parse_error::create((__int64 *)&v33, v31, 0x65u, (__int64)v35);
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
              (__int64)&v41,
              v16,
              (__int64)v37,
              (const nlohmann::detail::invalid_iterator *)v35);
            v35[0] = (__int64)off_44088;
            std::runtime_error::~runtime_error((std::runtime_error *)v36);
            std::exception::~exception((std::exception *)v35);
            if ( (v31[0] & 1) != 0 )
            {
              operator delete(v32);
              if ( (v28 & 1) == 0 )
              {
LABEL_24:
                if ( (v37[0] & 1) == 0 )
                  goto LABEL_26;
                goto LABEL_25;
              }
            }
            else if ( (v28 & 1) == 0 )
            {
              goto LABEL_24;
            }
            operator delete(v30);
            if ( (v37[0] & 1) != 0 )
LABEL_25:
              operator delete(v38);
          }
        }
LABEL_26:
        if ( v46 )
        {
          v19 = *(_BYTE *)a3;
          *(_BYTE *)a3 = 8;
          v26 = v19;
          v20 = *(_QWORD *)(a3 + 8);
          v21 = &v27;
          *(_QWORD *)(a3 + 8) = 0LL;
          v27 = v20;
        }
        else
        {
          if ( *(_BYTE *)a3 != 8 )
          {
LABEL_31:
            nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::~json_sax_dom_callback_parser((__int64)&v41);
            return;
          }
          *(_BYTE *)a3 = 0;
          v24 = 8;
          v22 = *(_QWORD *)(a3 + 8);
          v21 = &v25;
          v19 = 8;
          *(_QWORD *)(a3 + 8) = 0LL;
          v25 = v22;
        }
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          (void ***)v21,
          v19);
        goto LABEL_31;
      }
      v14 = *(void (**)(void))(*(_QWORD *)v40 + 40LL);
    }
    v14();
    goto LABEL_20;
  }
  v7 = *(_BYTE *)(a1 + 192);
  v41 = a3;
  v44 = 0;
  v43 = 0u;
  v42 = 0u;
  v45 = v7;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(
    a1,
    (__int64)&v41);
  if ( (a2 & 1) == 0 )
    goto LABEL_10;
  v8 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(a1 + 56);
  *(_DWORD *)(a1 + 48) = v8;
  if ( v8 == 15 )
    goto LABEL_10;
  v9 = *(_QWORD *)(a1 + 80);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
    v37,
    a1 + 56);
  v10 = *(_OWORD *)(a1 + 80);
  v11 = *(_QWORD *)(a1 + 96);
  v29 = 0LL;
  v30 = 0LL;
  v28 = 0x65756C61760ALL;
  v34 = v11;
  v33 = v10;
  nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
    (unsigned __int8 *)&v28,
    a1,
    15,
    (__int64)v31);
  nlohmann::detail::parse_error::create((__int64 *)&v33, v31, 0x65u, (__int64)v35);
  nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
    (__int64)&v41,
    v9,
    (__int64)v37,
    (const nlohmann::detail::invalid_iterator *)v35);
  v35[0] = (__int64)off_44088;
  std::runtime_error::~runtime_error((std::runtime_error *)v36);
  std::exception::~exception((std::exception *)v35);
  if ( (v31[0] & 1) == 0 )
  {
    if ( (v28 & 1) == 0 )
      goto LABEL_8;
LABEL_37:
    operator delete(v30);
    if ( (v37[0] & 1) == 0 )
      goto LABEL_10;
    goto LABEL_9;
  }
  operator delete(v32);
  if ( (v28 & 1) != 0 )
    goto LABEL_37;
LABEL_8:
  if ( (v37[0] & 1) != 0 )
LABEL_9:
    operator delete(v38);
LABEL_10:
  if ( v44 )
  {
    v12 = *(_BYTE *)a3;
    *(_BYTE *)a3 = 8;
    v13 = *(void ***)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0LL;
    v23 = v13;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      &v23,
      v12);
  }
  if ( (_QWORD)v42 )
  {
    *((_QWORD *)&v42 + 1) = v42;
    operator delete((void *)v42);
  }
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (000000000001C7C4) ----------------------------------------------------
unsigned __int64 *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>(
        const char *a1)
{
  unsigned __int64 *v2; // x19
  size_t v3; // x0
  size_t v4; // x21
  void *v5; // x22
  unsigned __int64 v6; // x23

  v2 = (unsigned __int64 *)operator new(0x18uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  *v2 = 0LL;
  v3 = strlen(a1);
  if ( v3 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v4 = v3;
  if ( v3 >= 0x17 )
  {
    v6 = (v3 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v5 = (void *)operator new(v6);
    v2[1] = v4;
    v2[2] = (unsigned __int64)v5;
    *v2 = v6 | 1;
  }
  else
  {
    *(_BYTE *)v2 = 2 * v3;
    v5 = (char *)v2 + 1;
    if ( !v3 )
      goto LABEL_7;
  }
  memcpy(v5, a1, v4);
LABEL_7:
  *((_BYTE *)v5 + v4) = 0;
  return v2;
}

//----- (000000000001C888) ----------------------------------------------------
void __usercall nlohmann::detail::exception::name(unsigned __int8 *a1@<X0>, unsigned int a2@<W1>, __int64 a3@<X8>)
{
  __int64 *v5; // x0
  __int128 v6; // q0
  int v7; // w1
  char *v8; // x1
  void *v9; // x2
  __int64 *v10; // x0
  __int128 v11; // q0
  __int64 *v12; // x0
  __int128 v13; // q0
  void *v14[2]; // [xsp+0h] [xbp-90h] BYREF
  void *v15; // [xsp+10h] [xbp-80h]
  __int64 v16[3]; // [xsp+18h] [xbp-78h] BYREF
  __int128 v17; // [xsp+30h] [xbp-60h] BYREF
  void *v18; // [xsp+40h] [xbp-50h]
  __int128 v19; // [xsp+50h] [xbp-40h] BYREF
  void *v20; // [xsp+60h] [xbp-30h]
  __int64 v21; // [xsp+68h] [xbp-28h]

  v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  std::operator+<char>("[json.exception.", a1, v16);
  v5 = std::string::append(v16, ".", 1uLL);
  v6 = *(_OWORD *)v5;
  v18 = (void *)v5[2];
  v17 = v6;
  v5[1] = 0LL;
  v5[2] = 0LL;
  *v5 = 0LL;
  std::to_string(v14, (std::__ndk1 *)a2, v7);
  if ( ((__int64)v14[0] & 1) != 0 )
    v8 = (char *)v15;
  else
    v8 = (char *)v14 + 1;
  if ( ((__int64)v14[0] & 1) != 0 )
    v9 = v14[1];
  else
    v9 = (void *)((unsigned __int64)LOBYTE(v14[0]) >> 1);
  v10 = std::string::append((__int64 *)&v17, v8, (size_t)v9);
  v11 = *(_OWORD *)v10;
  v20 = (void *)v10[2];
  v19 = v11;
  v10[1] = 0LL;
  v10[2] = 0LL;
  *v10 = 0LL;
  v12 = std::string::append((__int64 *)&v19, "] ", 2uLL);
  v13 = *(_OWORD *)v12;
  *(_QWORD *)(a3 + 16) = v12[2];
  *(_OWORD *)a3 = v13;
  v12[1] = 0LL;
  v12[2] = 0LL;
  *v12 = 0LL;
  if ( (v19 & 1) != 0 )
  {
    operator delete(v20);
    if ( ((__int64)v14[0] & 1) == 0 )
    {
LABEL_9:
      if ( (v17 & 1) == 0 )
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  else if ( ((__int64)v14[0] & 1) == 0 )
  {
    goto LABEL_9;
  }
  operator delete(v15);
  if ( (v17 & 1) == 0 )
  {
LABEL_10:
    if ( (v16[0] & 1) == 0 )
      return;
    goto LABEL_11;
  }
LABEL_15:
  operator delete(v18);
  if ( (v16[0] & 1) == 0 )
    return;
LABEL_11:
  operator delete((void *)v16[2]);
}
// 1C8FC: variable 'v7' is possibly undefined

//----- (000000000001CA88) ----------------------------------------------------
__int64 *__fastcall std::string::append(__int64 *a1, void *src, size_t n)
{
  unsigned __int64 v3; // x8
  size_t v7; // x22
  unsigned __int64 v8; // x26
  unsigned __int64 v9; // x27
  void *v10; // x23
  char *v11; // x23
  unsigned __int64 v12; // x8
  __int64 v13; // x24
  __int64 v14; // x8
  char *v15; // x8
  char *v16; // x0
  char *v17; // x25

  v3 = *(unsigned __int8 *)a1;
  if ( (v3 & 1) != 0 )
  {
    v7 = a1[1];
    v8 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
  }
  else
  {
    v7 = v3 >> 1;
    v8 = 22LL;
  }
  if ( v8 - v7 < n )
  {
    v9 = v7 + n;
    if ( -18LL - v8 < v7 + n - v8 )
      std::__basic_string_common<true>::__throw_length_error();
    if ( (v3 & 1) != 0 )
      v10 = (void *)a1[2];
    else
      v10 = (char *)a1 + 1;
    if ( v8 > 0x7FFFFFFFFFFFFFE6LL )
    {
      v13 = -17LL;
    }
    else
    {
      v12 = 2 * v8;
      if ( v9 >= 2 * v8 )
        v12 = v7 + n;
      if ( v12 >= 0x17 )
        v13 = (v12 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      else
        v13 = 23LL;
    }
    v16 = (char *)operator new(v13);
    v17 = v16;
    if ( v7 )
      memcpy(v16, v10, v7);
    memcpy(&v17[v7], src, n);
    if ( v8 != 22 )
      operator delete(v10);
    *a1 = v13 | 1;
    v15 = &v17[v9];
    a1[1] = v9;
    a1[2] = (__int64)v17;
    goto LABEL_29;
  }
  if ( n )
  {
    if ( (v3 & 1) != 0 )
      v11 = (char *)a1[2];
    else
      v11 = (char *)a1 + 1;
    memcpy(&v11[v7], src, n);
    v14 = v7 + n;
    if ( (*(_BYTE *)a1 & 1) != 0 )
      a1[1] = v14;
    else
      *(_BYTE *)a1 = 2 * v14;
    v15 = &v11[v14];
LABEL_29:
    *v15 = 0;
  }
  return a1;
}

//----- (000000000001CC08) ----------------------------------------------------
__int64 *__usercall std::operator+<char>@<X0>(const char *a1@<X0>, unsigned __int8 *a2@<X1>, __int64 *a3@<X8>)
{
  size_t v6; // x0
  unsigned __int64 v7; // x26
  size_t v8; // x22
  unsigned __int64 v9; // x8
  size_t v10; // x23
  void *v11; // x24
  void *v12; // x1
  unsigned __int64 v14; // x25

  *a3 = 0LL;
  a3[1] = 0LL;
  a3[2] = 0LL;
  v6 = strlen(a1);
  v7 = *a2;
  if ( (v7 & 1) != 0 )
    v8 = *((_QWORD *)a2 + 1);
  else
    v8 = v7 >> 1;
  v9 = v8 + v6;
  if ( v8 + v6 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v10 = v6;
  if ( v9 <= 0x16 )
  {
    *(_BYTE *)a3 = 2 * v6;
    v11 = (char *)a3 + 1;
    if ( !v6 )
      goto LABEL_8;
    goto LABEL_7;
  }
  v14 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
  v11 = (void *)operator new(v14);
  a3[1] = v10;
  a3[2] = (__int64)v11;
  *a3 = v14 | 1;
  if ( v10 )
LABEL_7:
    memcpy(v11, a1, v10);
LABEL_8:
  *((_BYTE *)v11 + v10) = 0;
  if ( (v7 & 1) != 0 )
    v12 = (void *)*((_QWORD *)a2 + 2);
  else
    v12 = a2 + 1;
  return std::string::append(a3, v12, v8);
}

//----- (000000000001CD04) ----------------------------------------------------
void __fastcall nlohmann::detail::other_error::~other_error(nlohmann::detail::other_error *this)
{
  *(_QWORD *)this = off_44088;
  std::runtime_error::~runtime_error((nlohmann::detail::other_error *)((char *)this + 16));
  std::exception::~exception(this);
  operator delete(this);
}
// 44088: using guessed type void (__fastcall *[2])(nlohmann::detail::exception *__hidden this);

//----- (000000000001CD40) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::exception::what(nlohmann::detail::exception *this)
{
  return std::runtime_error::what((nlohmann::detail::exception *)((char *)this + 16));
}

//----- (000000000001CD48) ----------------------------------------------------
void __fastcall nlohmann::detail::exception::~exception(nlohmann::detail::exception *this)
{
  *(_QWORD *)this = off_44088;
  std::runtime_error::~runtime_error((nlohmann::detail::exception *)((char *)this + 16));
  std::exception::~exception(this);
  operator delete(this);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (000000000001CD88) ----------------------------------------------------
void __fastcall std::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter>::~__shared_ptr_emplace(
        std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(a1);
}

//----- (000000000001CDAC) ----------------------------------------------------
__int64 __fastcall std::__shared_ptr_emplace<nlohmann::detail::input_buffer_adapter>::__on_zero_shared(__int64 a1)
{
  return (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)(a1 + 24) + 8LL))(a1 + 24);
}

//----- (000000000001CDBC) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::input_buffer_adapter::get_character(nlohmann::detail::input_buffer_adapter *this)
{
  unsigned __int8 *v1; // x8

  v1 = (unsigned __int8 *)*((_QWORD *)this + 1);
  if ( (unsigned __int64)v1 >= *((_QWORD *)this + 2) )
    return 0xFFFFFFFFLL;
  *((_QWORD *)this + 1) = v1 + 1;
  return *v1;
}

//----- (000000000001CDE8) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(
        __int64 a1)
{
  const char *v2; // x8
  _QWORD *v3; // x8
  __int64 v4; // x9
  __int64 v5; // x10

  if ( *(_QWORD *)(a1 + 24) )
    goto LABEL_11;
  if ( (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 239 )
  {
    v3 = (_QWORD *)(a1 + 32);
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(_QWORD *)(a1 + 24);
    *(_BYTE *)(a1 + 20) = 1;
    *(_QWORD *)(a1 + 24) = v5 - 1;
    if ( v4 || (v3 = (_QWORD *)(a1 + 40), (v4 = *(_QWORD *)(a1 + 40)) != 0) )
      *v3 = v4 - 1;
    if ( *(_DWORD *)(a1 + 16) != -1 )
      --*(_QWORD *)(a1 + 56);
LABEL_11:
    while ( 2 )
    {
      nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
      switch ( *(_DWORD *)(a1 + 16) )
      {
        case 0xFFFFFFFF:
        case 0:
          return 15LL;
        case 9:
        case 0xA:
        case 0xD:
        case 0x20:
          continue;
        case 0x22:
          return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_string(a1);
        case 0x2C:
          return 13LL;
        case 0x2D:
        case 0x30:
        case 0x31:
        case 0x32:
        case 0x33:
        case 0x34:
        case 0x35:
        case 0x36:
        case 0x37:
        case 0x38:
        case 0x39:
          return nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_number(a1);
        case 0x3A:
          return 12LL;
        case 0x5B:
          return 8LL;
        case 0x5D:
          return 10LL;
        case 0x66:
          if ( (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 97
            || (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 108
            || (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 115
            || (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 101 )
          {
            goto LABEL_34;
          }
          return 2LL;
        case 0x6E:
          if ( (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 117
            || (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 108
            || (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 108 )
          {
            goto LABEL_34;
          }
          return 3LL;
        case 0x74:
          if ( (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 114
            || (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 117
            || (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 101 )
          {
            goto LABEL_34;
          }
          return 1LL;
        case 0x7B:
          return 9LL;
        case 0x7D:
          return 11LL;
        default:
LABEL_34:
          v2 = "invalid literal";
          goto LABEL_35;
      }
    }
  }
  if ( (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) == 187
    && (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) == 191 )
  {
    goto LABEL_11;
  }
  v2 = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
LABEL_35:
  *(_QWORD *)(a1 + 96) = v2;
  return 14LL;
}

//----- (000000000001CFE4) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(
        __int64 a1)
{
  int v1; // w8
  char v3; // w20
  _DWORD *v4; // x25
  int v5; // t1
  unsigned __int64 v6; // x8
  _BYTE *v7; // x9
  _BYTE *v8; // x21
  signed __int64 v9; // x22
  __int64 v10; // x9
  unsigned __int64 v11; // x8
  unsigned __int64 v12; // x8
  unsigned __int64 v13; // x24
  _BYTE *v14; // x23
  int v15; // w0
  __int64 result; // x0
  char *v17; // x24
  __int64 v18; // x8

  v1 = *(unsigned __int8 *)(a1 + 20);
  *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), vdupq_n_s64(1uLL));
  if ( v1 )
  {
    v5 = *(_DWORD *)(a1 + 16);
    v4 = (_DWORD *)(a1 + 16);
    v3 = v5;
    *(_BYTE *)(a1 + 20) = 0;
    if ( v5 != -1 )
      goto LABEL_3;
    return 0xFFFFFFFFLL;
  }
  v4 = (_DWORD *)(a1 + 16);
  v15 = (***(__int64 (__fastcall ****)(_QWORD))a1)(*(_QWORD *)a1);
  v3 = v15;
  *v4 = v15;
  if ( v15 == -1 )
    return 0xFFFFFFFFLL;
LABEL_3:
  v7 = *(_BYTE **)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 64);
  if ( (unsigned __int64)v7 >= v6 )
  {
    v8 = *(_BYTE **)(a1 + 48);
    v9 = v7 - v8;
    v10 = v7 - v8 + 1;
    if ( v10 < 0 )
      std::__vector_base_common<true>::__throw_length_error();
    v11 = v6 - (_QWORD)v8;
    if ( v11 > 0x3FFFFFFFFFFFFFFELL )
    {
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v12 = 2 * v11;
      if ( v12 >= v10 )
        v13 = v12;
      else
        v13 = v10;
      if ( !v13 )
      {
        v14 = 0LL;
LABEL_16:
        v17 = &v14[v13];
        v14[v9] = v3;
        if ( v9 >= 1 )
          memcpy(v14, v8, v9);
        *(_QWORD *)(a1 + 48) = v14;
        *(_QWORD *)(a1 + 56) = &v14[v9 + 1];
        *(_QWORD *)(a1 + 64) = v17;
        if ( v8 )
          operator delete(v8);
        goto LABEL_20;
      }
    }
    v14 = (_BYTE *)operator new(v13);
    goto LABEL_16;
  }
  *v7 = v3;
  ++*(_QWORD *)(a1 + 56);
LABEL_20:
  result = (unsigned int)*v4;
  if ( (_DWORD)result == 10 )
  {
    v18 = *(_QWORD *)(a1 + 40) + 1LL;
    *(_QWORD *)(a1 + 32) = 0LL;
    *(_QWORD *)(a1 + 40) = v18;
  }
  return result;
}

//----- (000000000001D130) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_string(
        __int64 a1)
{
  const char *v2; // x8
  int v3; // kr00_4
  int v4; // w1
  int v5; // w1
  int v6; // w1
  int v7; // w9
  int codepoint; // w0
  int v9; // w21
  unsigned int v10; // w0

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::reset(a1);
  while ( 2 )
  {
    v3 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1)
       + 1;
    v2 = "invalid string: missing closing quote";
    switch ( v3 )
    {
      case 0:
        goto LABEL_78;
      case 1:
        v2 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
        goto LABEL_78;
      case 2:
        v2 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
        goto LABEL_78;
      case 3:
        v2 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
        goto LABEL_78;
      case 4:
        v2 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
        goto LABEL_78;
      case 5:
        v2 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
        goto LABEL_78;
      case 6:
        v2 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
        goto LABEL_78;
      case 7:
        v2 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
        goto LABEL_78;
      case 8:
        v2 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
        goto LABEL_78;
      case 9:
        v2 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
        goto LABEL_78;
      case 10:
        v2 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
        goto LABEL_78;
      case 11:
        v2 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
        goto LABEL_78;
      case 12:
        v2 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
        goto LABEL_78;
      case 13:
        v2 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
        goto LABEL_78;
      case 14:
        v2 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
        goto LABEL_78;
      case 15:
        v2 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
        goto LABEL_78;
      case 16:
        v2 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
        goto LABEL_78;
      case 17:
        v2 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
        goto LABEL_78;
      case 18:
        v2 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
        goto LABEL_78;
      case 19:
        v2 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
        goto LABEL_78;
      case 20:
        v2 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
        goto LABEL_78;
      case 21:
        v2 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
        goto LABEL_78;
      case 22:
        v2 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
        goto LABEL_78;
      case 23:
        v2 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
        goto LABEL_78;
      case 24:
        v2 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
        goto LABEL_78;
      case 25:
        v2 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
        goto LABEL_78;
      case 26:
        v2 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
        goto LABEL_78;
      case 27:
        v2 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
        goto LABEL_78;
      case 28:
        v2 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
        goto LABEL_78;
      case 29:
        v2 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
        goto LABEL_78;
      case 30:
        v2 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
        goto LABEL_78;
      case 31:
        v2 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
        goto LABEL_78;
      case 32:
        v2 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
        goto LABEL_78;
      case 33:
      case 34:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
        v4 = *(_DWORD *)(a1 + 16);
        goto LABEL_2;
      case 35:
        return 4LL;
      case 93:
        v7 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1)
           - 34;
        v2 = "invalid string: forbidden character after backslash";
        switch ( v7 )
        {
          case 0:
            LOBYTE(v4) = 34;
            goto LABEL_2;
          case 13:
            LOBYTE(v4) = 47;
            goto LABEL_2;
          case 58:
            LOBYTE(v4) = 92;
            goto LABEL_2;
          case 64:
            LOBYTE(v4) = 8;
            goto LABEL_2;
          case 68:
            LOBYTE(v4) = 12;
            goto LABEL_2;
          case 76:
            LOBYTE(v4) = 10;
            goto LABEL_2;
          case 80:
            LOBYTE(v4) = 13;
            goto LABEL_2;
          case 82:
            LOBYTE(v4) = 9;
            goto LABEL_2;
          case 83:
            codepoint = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_codepoint(a1);
            if ( codepoint == -1 )
              goto LABEL_81;
            v9 = codepoint;
            if ( (codepoint & 0xFFFFFC00) != 55296 )
            {
              if ( (codepoint & 0xFFFFFC00) == 56320 )
              {
                v2 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
                goto LABEL_78;
              }
              if ( codepoint <= 127 )
                goto LABEL_40;
LABEL_36:
              if ( v9 > 2047 )
              {
                if ( v9 >= 0x10000 )
                {
                  std::string::push_back((__int64 *)(a1 + 72), ((unsigned int)v9 >> 18) | 0xF0);
                  std::string::push_back((__int64 *)(a1 + 72), ((unsigned int)v9 >> 12) & 0x3F | 0x80);
                }
                else
                {
                  std::string::push_back((__int64 *)(a1 + 72), ((unsigned int)v9 >> 12) | 0xE0);
                }
                std::string::push_back((__int64 *)(a1 + 72), ((unsigned int)v9 >> 6) & 0x3F | 0x80);
                std::string::push_back((__int64 *)(a1 + 72), v9 & 0x3F | 0x80);
              }
              else
              {
                std::string::push_back((__int64 *)(a1 + 72), ((unsigned int)v9 >> 6) | 0xC0);
                LOBYTE(v4) = v9 & 0x3F | 0x80;
LABEL_2:
                std::string::push_back((__int64 *)(a1 + 72), v4);
              }
              continue;
            }
            if ( (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 92
              || (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1) != 117 )
            {
LABEL_82:
              v2 = "invalid string: surrogate U+DC00..U+DFFF must be followed by U+DC00..U+DFFF";
              goto LABEL_78;
            }
            v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_codepoint(a1);
            if ( v10 != -1 )
            {
              if ( v10 >> 10 != 55 )
                goto LABEL_82;
              v9 = v10 + (v9 << 10) - 56613888;
              if ( v9 > 127 )
                goto LABEL_36;
LABEL_40:
              std::string::push_back((__int64 *)(a1 + 72), v9);
              continue;
            }
LABEL_81:
            v2 = "invalid string: '\\u' must be followed by 4 hex digits";
LABEL_78:
            *(_QWORD *)(a1 + 96) = v2;
            return 14LL;
          default:
            goto LABEL_78;
        }
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
        v5 = *(_DWORD *)(a1 + 16);
        goto LABEL_8;
      case 225:
        std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
        v5 = *(_DWORD *)(a1 + 16);
        if ( (v5 & 0xFFFFFFE0) != 160 )
          goto LABEL_45;
        goto LABEL_8;
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 239:
      case 240:
        v6 = *(_DWORD *)(a1 + 16);
        goto LABEL_7;
      case 238:
        std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
        v5 = *(_DWORD *)(a1 + 16);
        if ( (v5 & 0xFFFFFFE0) != 128 )
          goto LABEL_45;
        goto LABEL_8;
      case 241:
        std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
        v6 = *(_DWORD *)(a1 + 16);
        if ( (unsigned int)(v6 - 144) > 0x2F )
          goto LABEL_45;
        goto LABEL_7;
      case 242:
      case 243:
      case 244:
        std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
        v6 = *(_DWORD *)(a1 + 16);
        if ( (v6 & 0xFFFFFFC0) != 128 )
          goto LABEL_45;
        goto LABEL_7;
      case 245:
        std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
        v6 = *(_DWORD *)(a1 + 16);
        if ( (v6 & 0xFFFFFFF0) != 128 )
          goto LABEL_45;
LABEL_7:
        std::string::push_back((__int64 *)(a1 + 72), v6);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
        v5 = *(_DWORD *)(a1 + 16);
        if ( (v5 & 0xFFFFFFC0) != 128 )
          goto LABEL_45;
LABEL_8:
        std::string::push_back((__int64 *)(a1 + 72), v5);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
        v4 = *(_DWORD *)(a1 + 16);
        if ( (v4 & 0xFFFFFFC0) == 128 )
          goto LABEL_2;
LABEL_45:
        v2 = "invalid string: ill-formed UTF-8 byte";
        goto LABEL_78;
      default:
        goto LABEL_45;
    }
  }
}

//----- (000000000001D620) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan_number(
        __int64 a1)
{
  int v2; // w1
  __int64 *v3; // x20
  int v4; // w22
  int v5; // w0
  __int64 v6; // x0
  __int64 v7; // x1
  int v8; // w1
  __int64 *v9; // x0
  int v10; // w0
  int v11; // w1
  __int64 *v12; // x0
  _QWORD *v13; // x8
  __int64 v14; // x9
  __int64 v15; // x10
  _DWORD *v16; // x20
  __int64 v17; // x22
  const char *v18; // x0
  const char *v19; // x0
  char v20; // w1
  __int64 *v21; // x0
  int v22; // w1
  __int64 v23; // x0
  __int64 result; // x0
  unsigned __int64 v25; // x0
  const char *v26; // x0
  double v27; // d0
  const char *v28; // x8
  char *v29[2]; // [xsp+0h] [xbp-30h] BYREF

  v29[1] = *(char **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::reset(a1);
  v2 = *(_DWORD *)(a1 + 16);
  if ( (unsigned int)(v2 - 49) < 9 )
  {
    v3 = (__int64 *)(a1 + 72);
    std::string::push_back((__int64 *)(a1 + 72), v2);
    v4 = 5;
LABEL_9:
    while ( 1 )
    {
      v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
      if ( (unsigned int)(v6 - 48) >= 0xA )
        break;
      std::string::push_back(v3, *(_DWORD *)(a1 + 16));
    }
    if ( (_DWORD)v6 != 46 )
    {
      if ( (_DWORD)v6 != 69 && (_DWORD)v6 != 101 )
        goto LABEL_19;
LABEL_13:
      v8 = *(_DWORD *)(a1 + 16);
      v9 = v3;
LABEL_14:
      std::string::push_back(v9, v8);
      v10 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
      if ( (unsigned int)(v10 - 48) < 0xA )
      {
        v11 = *(_DWORD *)(a1 + 16);
        v12 = (__int64 *)(a1 + 72);
        goto LABEL_16;
      }
      if ( v10 == 45 || v10 == 43 )
      {
        std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
        if ( (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1)
           - 48 < 0xA )
        {
          v11 = *(_DWORD *)(a1 + 16);
          v12 = (__int64 *)(a1 + 72);
LABEL_16:
          std::string::push_back(v12, v11);
          v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
          if ( (unsigned int)(v6 - 48) <= 9 )
          {
            do
            {
              std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
              v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
            }
            while ( (unsigned int)(v6 - 48) < 0xA );
          }
          goto LABEL_18;
        }
        v28 = "invalid number; expected digit after exponent sign";
      }
      else
      {
        v28 = "invalid number; expected '+', '-', or digit after exponent";
      }
LABEL_66:
      *(_QWORD *)(a1 + 96) = v28;
      return 14LL;
    }
    v20 = *(_BYTE *)(a1 + 128);
    v21 = v3;
LABEL_33:
    std::string::push_back(v21, v20);
    if ( (unsigned int)nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1)
       - 48 > 9 )
    {
      v28 = "invalid number; expected digit after '.'";
      goto LABEL_66;
    }
    v22 = *(_DWORD *)(a1 + 16);
    v3 = (__int64 *)(a1 + 72);
    while ( 1 )
    {
      std::string::push_back((__int64 *)(a1 + 72), v22);
      v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
      if ( (unsigned int)(v6 - 48) >= 0xA )
        break;
      v22 = *(_DWORD *)(a1 + 16);
    }
    if ( (_DWORD)v6 != 69 && (_DWORD)v6 != 101 )
    {
LABEL_18:
      v4 = 7;
      goto LABEL_19;
    }
    goto LABEL_13;
  }
  if ( v2 == 48 )
  {
    std::string::push_back((__int64 *)(a1 + 72), 48);
    v4 = 5;
  }
  else
  {
    if ( v2 == 45 )
      std::string::push_back((__int64 *)(a1 + 72), 45);
    v5 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
    if ( (unsigned int)(v5 - 49) < 9 )
    {
      v3 = (__int64 *)(a1 + 72);
      std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
      v4 = 6;
      goto LABEL_9;
    }
    if ( v5 != 48 )
    {
      v28 = "invalid number; expected digit after '-'";
      goto LABEL_66;
    }
    std::string::push_back((__int64 *)(a1 + 72), *(_DWORD *)(a1 + 16));
    v4 = 6;
  }
  v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
  if ( (_DWORD)v6 == 101 || (_DWORD)v6 == 69 )
  {
    v8 = *(_DWORD *)(a1 + 16);
    v9 = (__int64 *)(a1 + 72);
    goto LABEL_14;
  }
  if ( (_DWORD)v6 == 46 )
  {
    v20 = *(_BYTE *)(a1 + 128);
    v21 = (__int64 *)(a1 + 72);
    goto LABEL_33;
  }
LABEL_19:
  v13 = (_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 24) = v15 - 1;
  if ( v14 || (v13 = (_QWORD *)(a1 + 40), (v14 = *(_QWORD *)(a1 + 40)) != 0) )
    *v13 = v14 - 1;
  if ( *(_DWORD *)(a1 + 16) != -1 )
    --*(_QWORD *)(a1 + 56);
  v29[0] = 0LL;
  v16 = (_DWORD *)__errno(v6, v7);
  *v16 = 0;
  if ( v4 != 5 )
  {
    if ( v4 != 6 )
    {
      v17 = a1 + 72;
      if ( (*(_BYTE *)(a1 + 72) & 1) == 0 )
      {
LABEL_50:
        v26 = (const char *)(v17 + 1);
LABEL_52:
        v27 = strtod(v26, v29);
        result = 7LL;
        *(double *)(a1 + 120) = v27;
        return result;
      }
LABEL_51:
      v26 = *(const char **)(a1 + 88);
      goto LABEL_52;
    }
    v17 = a1 + 72;
    if ( (*(_BYTE *)(a1 + 72) & 1) != 0 )
      v18 = *(const char **)(a1 + 88);
    else
      v18 = (const char *)(a1 + 73);
    v23 = strtoll(v18, v29, 10);
    if ( !*v16 )
    {
      *(_QWORD *)(a1 + 104) = v23;
      return 6LL;
    }
LABEL_49:
    if ( (*(_BYTE *)(a1 + 72) & 1) == 0 )
      goto LABEL_50;
    goto LABEL_51;
  }
  v17 = a1 + 72;
  if ( (*(_BYTE *)(a1 + 72) & 1) != 0 )
    v19 = *(const char **)(a1 + 88);
  else
    v19 = (const char *)(a1 + 73);
  v25 = strtoull(v19, v29, 10);
  if ( *v16 )
    goto LABEL_49;
  *(_QWORD *)(a1 + 112) = v25;
  return 5LL;
}
// 1D7A0: variable 'v7' is possibly undefined
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);

//----- (000000000001D9C0) ----------------------------------------------------
void __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::reset(
        __int64 a1)
{
  _BYTE *v2; // x20
  unsigned __int64 v3; // x8
  int v4; // w22
  bool v5; // cc
  unsigned __int64 v6; // x8
  __int64 v7; // x8
  unsigned __int64 v8; // x21
  _BYTE *v9; // x0

  if ( (*(_BYTE *)(a1 + 72) & 1) != 0 )
  {
    **(_BYTE **)(a1 + 88) = 0;
    *(_QWORD *)(a1 + 80) = 0LL;
  }
  else
  {
    *(_WORD *)(a1 + 72) = 0;
  }
  v2 = *(_BYTE **)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 56) = v2;
  v5 = v3 > (unsigned __int64)v2;
  v6 = v3 - (_QWORD)v2;
  if ( v5 )
  {
    *v2 = v4;
    ++*(_QWORD *)(a1 + 56);
  }
  else
  {
    if ( v6 > 0x3FFFFFFFFFFFFFFELL )
    {
      v8 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v7 = 2 * v6;
      if ( v7 )
        v8 = v7;
      else
        v8 = 1LL;
    }
    v9 = (_BYTE *)operator new(v8);
    *v9 = v4;
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v9 + 1;
    *(_QWORD *)(a1 + 64) = &v9[v8];
    if ( v2 )
      operator delete(v2);
  }
}

//----- (000000000001DA84) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_codepoint(
        __int64 a1)
{
  int v2; // w8
  int v3; // w20
  int v4; // w8
  int v5; // w21
  int v6; // w8
  int v7; // w22
  int v8; // w8
  int v9; // w9

  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
  v2 = *(_DWORD *)(a1 + 16);
  v3 = v2 - 48;
  if ( (unsigned int)(v2 - 48) >= 0xA )
  {
    if ( (unsigned int)(v2 - 65) > 5 )
    {
      if ( (unsigned int)(v2 - 97) > 5 )
        return 0xFFFFFFFFLL;
      v3 = v2 - 87;
    }
    else
    {
      v3 = v2 - 55;
    }
  }
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = v4 - 48;
  if ( (unsigned int)(v4 - 48) >= 0xA )
  {
    if ( (unsigned int)(v4 - 65) >= 6 )
    {
      if ( (unsigned int)(v4 - 97) > 5 )
        return 0xFFFFFFFFLL;
      v5 = v4 - 87;
    }
    else
    {
      v5 = v4 - 55;
    }
  }
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
  v6 = *(_DWORD *)(a1 + 16);
  v7 = v6 - 48;
  if ( (unsigned int)(v6 - 48) >= 0xA )
  {
    if ( (unsigned int)(v6 - 65) >= 6 )
    {
      if ( (unsigned int)(v6 - 97) > 5 )
        return 0xFFFFFFFFLL;
      v7 = v6 - 87;
    }
    else
    {
      v7 = v6 - 55;
    }
  }
  nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get(a1);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = v8 - 48;
  if ( (unsigned int)(v8 - 48) < 0xA )
    return (unsigned int)(v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  if ( (unsigned int)(v8 - 65) < 6 )
  {
    v9 = v8 - 55;
    return (unsigned int)(v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
  if ( (unsigned int)(v8 - 97) <= 5 )
  {
    v9 = v8 - 87;
    return (unsigned int)(v9 + (v3 << 12) + (v5 << 8) + 16 * v7);
  }
  return 0xFFFFFFFFLL;
}

//----- (000000000001DBAC) ----------------------------------------------------
void __fastcall std::string::push_back(__int64 *a1, char a2)
{
  unsigned __int64 v2; // x8
  __int64 v5; // x25
  size_t v6; // x21
  char *v7; // x23
  void *v8; // x22
  unsigned __int64 v9; // x8
  __int64 v10; // x24
  char *v11; // x8

  v2 = *(unsigned __int8 *)a1;
  if ( (v2 & 1) != 0 )
  {
    v5 = a1[1];
    v6 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
    if ( v5 != v6 )
      goto LABEL_3;
LABEL_6:
    if ( v6 == -17LL )
      std::__basic_string_common<true>::__throw_length_error();
    if ( (v2 & 1) != 0 )
      v8 = (void *)a1[2];
    else
      v8 = (char *)a1 + 1;
    if ( v6 > 0x7FFFFFFFFFFFFFE6LL )
    {
      v10 = -17LL;
    }
    else
    {
      if ( v6 + 1 >= 2 * v6 )
        v9 = v6 + 1;
      else
        v9 = 2 * v6;
      if ( v9 >= 0x17 )
        v10 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      else
        v10 = 23LL;
    }
    v7 = (char *)operator new(v10);
    memcpy(v7, v8, v6);
    if ( v6 != 22 )
      operator delete(v8);
    a1[2] = (__int64)v7;
    *a1 = v10 | 1;
    goto LABEL_22;
  }
  v5 = v2 >> 1;
  v6 = 22LL;
  if ( v2 >> 1 == 22 )
    goto LABEL_6;
LABEL_3:
  if ( (v2 & 1) != 0 )
  {
    v7 = (char *)a1[2];
LABEL_22:
    a1[1] = v5 + 1;
    goto LABEL_23;
  }
  *(_BYTE *)a1 = 2 * v5 + 2;
  v7 = (char *)a1 + 1;
LABEL_23:
  v11 = &v7[v5];
  *v11 = a2;
  v11[1] = 0;
}

//----- (000000000001DCD8) ----------------------------------------------------
void __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::json_sax_dom_callback_parser(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        char a4)
{
  __int64 v5; // x0
  unsigned __int64 v7; // x8
  __int64 v8; // x9
  unsigned __int64 v9; // x9
  unsigned __int64 v10; // x8
  unsigned __int64 v11; // x1
  __int64 v12; // x10

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  v5 = *(_QWORD *)(a3 + 32);
  if ( v5 )
  {
    if ( a3 == v5 )
    {
      *(_QWORD *)(a1 + 128) = a1 + 96;
      (*(void (__fastcall **)(_QWORD, __int64))(**(_QWORD **)(a3 + 32) + 24LL))(*(_QWORD *)(a3 + 32), a1 + 96);
    }
    else
    {
      *(_QWORD *)(a1 + 128) = (*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v5 + 16LL))(v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 128) = 0LL;
  }
  *(_QWORD *)(a1 + 160) = 0LL;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  *(_BYTE *)(a1 + 144) = a4 & 1;
  *(_BYTE *)(a1 + 152) = 8;
  if ( v7 == v8 << 6 )
  {
    if ( (__int64)(v7 + 1) < 0 )
      std::__vector_base_common<true>::__throw_length_error();
    if ( v7 > 0x3FFFFFFFFFFFFFFELL )
    {
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v9 = v8 << 7;
      v10 = (v7 + 64) & 0xFFFFFFFFFFFFFFC0LL;
      if ( v9 >= v10 )
        v11 = v9;
      else
        v11 = v10;
    }
    std::vector<bool>::reserve((__int64 *)(a1 + 32), v11);
    v7 = *(_QWORD *)(a1 + 40);
  }
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  *(_QWORD *)(v12 + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v7;
}

//----- (000000000001DEA0) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(
        __int64 a1,
        _QWORD *a2)
{
  __int128 *v4; // x22
  __int64 v5; // x21
  int v6; // w0
  char v7; // w0
  double v8; // d1
  int v9; // w0
  __int64 v10; // x8
  int v11; // w0
  char v12; // w0
  int v13; // w0
  int v14; // w0
  int v15; // w0
  int v16; // w0
  unsigned __int64 v17; // x8
  __int64 v18; // x1
  unsigned __int64 v19; // x8
  __int64 v20; // x1
  void *v21; // x0
  __int64 v22; // x22
  __int128 v23; // q0
  void *v24; // x8
  char v25; // w0
  __int64 v26; // x22
  __int128 v27; // q0
  void *v28; // x8
  __int64 v30; // x22
  __int128 v31; // q0
  void *v32; // x8
  __int64 v33; // x22
  __int128 v34; // q0
  void *v35; // x8
  __int64 v36; // x22
  __int128 v37; // q0
  void *v38; // x8
  __int64 v39; // x22
  __int128 v40; // q0
  void *v41; // x8
  __int64 v42; // x20
  __int64 *v43; // x0
  __int128 v44; // q0
  __int64 *v45; // x0
  __int128 v46; // q0
  char v47; // w19
  char v48[24]; // [xsp+8h] [xbp-108h] BYREF
  __int128 v49; // [xsp+20h] [xbp-F0h] BYREF
  void *v50; // [xsp+30h] [xbp-E0h]
  __int128 v51; // [xsp+40h] [xbp-D0h] BYREF
  void *v52; // [xsp+50h] [xbp-C0h]
  void **v53[2]; // [xsp+60h] [xbp-B0h] BYREF
  _BYTE v54[24]; // [xsp+70h] [xbp-A0h] BYREF
  __int64 v55[3]; // [xsp+88h] [xbp-88h] BYREF
  char *v56; // [xsp+A0h] [xbp-70h] BYREF
  unsigned __int64 v57; // [xsp+A8h] [xbp-68h]
  __int64 v58; // [xsp+B0h] [xbp-60h]
  __int64 v59; // [xsp+B8h] [xbp-58h]

  v4 = (__int128 *)(a1 + 128);
  v5 = a1 + 56;
  v59 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v56 = 0LL;
  v57 = 0LL;
  v58 = 0LL;
  while ( 2 )
  {
    switch ( *(_DWORD *)(a1 + 48) )
    {
      case 1:
        LOBYTE(v53[0]) = 1;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(
          (__int64)a2,
          (unsigned __int8 *)v53,
          0);
        goto LABEL_21;
      case 2:
        LOBYTE(v53[0]) = 0;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(
          (__int64)a2,
          (unsigned __int8 *)v53,
          0);
        goto LABEL_21;
      case 3:
        v53[0] = 0LL;
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(
          (__int64)a2,
          (__int64)v53,
          0);
        goto LABEL_21;
      case 4:
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(
          (__int64)a2,
          v4,
          0);
        goto LABEL_21;
      case 5:
        v53[0] = *(void ***)(a1 + 168);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(
          (__int64)a2,
          v53,
          0);
        goto LABEL_21;
      case 6:
        v53[0] = *(void ***)(a1 + 160);
        nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(
          (__int64)a2,
          v53,
          0);
        goto LABEL_21;
      case 7:
        v8 = fabs(*(double *)(a1 + 176));
        if ( v8 < INFINITY || v8 > INFINITY )
        {
          v53[0] = *(void ***)(a1 + 176);
          nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(
            (__int64)a2,
            v53,
            0);
          goto LABEL_21;
        }
        v42 = *(_QWORD *)(a1 + 80);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
          v55,
          v5);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
          (__int64 *)v48,
          v5);
        v43 = std::string::insert((__int64 *)v48, 0LL, "number overflow parsing '", 0x19uLL);
        v44 = *(_OWORD *)v43;
        v50 = (void *)v43[2];
        v49 = v44;
        v43[1] = 0LL;
        v43[2] = 0LL;
        *v43 = 0LL;
        v45 = std::string::append((__int64 *)&v49, "'", 1uLL);
        v46 = *(_OWORD *)v45;
        v52 = (void *)v45[2];
        v51 = v46;
        v45[1] = 0LL;
        v45[2] = 0LL;
        *v45 = 0LL;
        nlohmann::detail::out_of_range::create((unsigned __int8 *)&v51, 0x196u, (__int64)v53);
        v47 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                (__int64)a2,
                v42,
                (__int64)v55,
                (const nlohmann::detail::invalid_iterator *)v53);
        v53[0] = (void **)off_44088;
        std::runtime_error::~runtime_error((std::runtime_error *)v54);
        std::exception::~exception((std::exception *)v53);
        if ( (v51 & 1) == 0 )
          goto LABEL_62;
        operator delete(v52);
        if ( (v49 & 1) != 0 )
          goto LABEL_76;
        goto LABEL_63;
      case 8:
        if ( (nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_array(
                a2,
                (std::__ndk1 *)0xFFFFFFFFFFFFFFFFLL) & 1) == 0 )
          goto LABEL_68;
        v9 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v9;
        if ( v9 != 10 )
        {
          v19 = v57;
          if ( v57 == v58 << 6 )
          {
            if ( (__int64)(v57 + 1) < 0 )
              std::__vector_base_common<true>::__throw_length_error();
            if ( v57 > 0x3FFFFFFFFFFFFFFELL )
            {
              v20 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if ( v58 << 7 >= ((v57 + 64) & 0xFFFFFFFFFFFFFFC0LL) )
            {
              v20 = v58 << 7;
            }
            else
            {
              v20 = (v57 + 64) & 0xFFFFFFFFFFFFFFC0LL;
            }
            std::vector<bool>::reserve((__int64 *)&v56, v20);
            v19 = v57;
          }
          v57 = v19 + 1;
          *(_QWORD *)&v56[(v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v19;
          continue;
        }
        v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_array((__int64)a2);
LABEL_20:
        if ( (v7 & 1) == 0 )
          goto LABEL_68;
LABEL_21:
        v10 = v57;
        if ( !v57 )
        {
LABEL_57:
          v47 = 1;
          v21 = v56;
          if ( v56 )
            goto LABEL_66;
          return v47 & 1;
        }
        while ( 2 )
        {
          if ( (*(_QWORD *)&v56[((unsigned __int64)(v10 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL] & (1LL << ((unsigned __int8)v10 - 1))) != 0 )
          {
            v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
            *(_DWORD *)(a1 + 48) = v11;
            if ( v11 == 13 )
              goto LABEL_2;
            if ( v11 != 10 )
            {
              v30 = *(_QWORD *)(a1 + 80);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
                v55,
                v5);
              v31 = *(_OWORD *)(a1 + 80);
              v32 = *(void **)(a1 + 96);
              *(_QWORD *)&v48[16] = 0LL;
              *(_OWORD *)v48 = 0x79617272610AuLL;
              v52 = v32;
              v51 = v31;
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
                (unsigned __int8 *)v48,
                a1,
                10,
                (__int64)&v49);
              nlohmann::detail::parse_error::create((__int64 *)&v51, (unsigned __int8 *)&v49, 0x65u, (__int64)v53);
              v25 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                      (__int64)a2,
                      v30,
                      (__int64)v55,
                      (const nlohmann::detail::invalid_iterator *)v53);
              goto LABEL_61;
            }
            v12 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_array((__int64)a2);
LABEL_26:
            if ( (v12 & 1) == 0 )
              goto LABEL_68;
            v10 = v57 - 1;
            v57 = v10;
            if ( !v10 )
              goto LABEL_57;
            continue;
          }
          break;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v13;
        if ( v13 != 13 )
        {
          if ( v13 != 11 )
          {
            v33 = *(_QWORD *)(a1 + 80);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
              v55,
              v5);
            v34 = *(_OWORD *)(a1 + 80);
            v35 = *(void **)(a1 + 96);
            *(_QWORD *)&v48[8] = 0LL;
            *(_QWORD *)&v48[16] = 0LL;
            v48[0] = 12;
            strcpy(&v48[1], "object");
            v52 = v35;
            v51 = v34;
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
              (unsigned __int8 *)v48,
              a1,
              11,
              (__int64)&v49);
            nlohmann::detail::parse_error::create((__int64 *)&v51, (unsigned __int8 *)&v49, 0x65u, (__int64)v53);
            v25 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                    (__int64)a2,
                    v33,
                    (__int64)v55,
                    (const nlohmann::detail::invalid_iterator *)v53);
            goto LABEL_61;
          }
          v12 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_object((__int64)a2);
          goto LABEL_26;
        }
        v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v14;
        if ( v14 != 4 )
        {
LABEL_72:
          v36 = *(_QWORD *)(a1 + 80);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
            v55,
            v5);
          v37 = *(_OWORD *)(a1 + 80);
          v38 = *(void **)(a1 + 96);
          strcpy(&v48[9], "ey");
          *(_DWORD *)&v48[12] = 0;
          v48[0] = 20;
          *(_QWORD *)&v48[16] = 0LL;
          v52 = v38;
          v51 = v37;
          strcpy(&v48[1], "object ");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
            (unsigned __int8 *)v48,
            a1,
            4,
            (__int64)&v49);
          nlohmann::detail::parse_error::create((__int64 *)&v51, (unsigned __int8 *)&v49, 0x65u, (__int64)v53);
          v25 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                  (__int64)a2,
                  v36,
                  (__int64)v55,
                  (const nlohmann::detail::invalid_iterator *)v53);
          goto LABEL_61;
        }
        if ( (nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(
                (__int64)a2,
                v4) & 1) == 0 )
        {
LABEL_68:
          v47 = 0;
          v21 = v56;
          if ( v56 )
            goto LABEL_66;
          return v47 & 1;
        }
        v15 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v15;
        if ( v15 == 12 )
        {
LABEL_2:
          *(_DWORD *)(a1 + 48) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
          continue;
        }
LABEL_73:
        v39 = *(_QWORD *)(a1 + 80);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
          v55,
          v5);
        v40 = *(_OWORD *)(a1 + 80);
        v41 = *(void **)(a1 + 96);
        v48[17] = 0;
        *(_WORD *)&v48[18] = 0;
        *(_DWORD *)&v48[20] = 0;
        strcpy(v48, " object separato");
        v52 = v41;
        v51 = v40;
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
          (unsigned __int8 *)v48,
          a1,
          12,
          (__int64)&v49);
        nlohmann::detail::parse_error::create((__int64 *)&v51, (unsigned __int8 *)&v49, 0x65u, (__int64)v53);
        v25 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                (__int64)a2,
                v39,
                (__int64)v55,
                (const nlohmann::detail::invalid_iterator *)v53);
LABEL_61:
        v47 = v25;
        v53[0] = (void **)off_44088;
        std::runtime_error::~runtime_error((std::runtime_error *)v54);
        std::exception::~exception((std::exception *)v53);
LABEL_62:
        if ( (v49 & 1) != 0 )
        {
LABEL_76:
          operator delete(v50);
          if ( (v48[0] & 1) != 0 )
            goto LABEL_77;
LABEL_64:
          if ( (v55[0] & 1) == 0 )
            goto LABEL_65;
LABEL_78:
          operator delete((void *)v55[2]);
          v21 = v56;
          if ( v56 )
LABEL_66:
            operator delete(v21);
        }
        else
        {
LABEL_63:
          if ( (v48[0] & 1) == 0 )
            goto LABEL_64;
LABEL_77:
          operator delete(*(void **)&v48[16]);
          if ( (v55[0] & 1) != 0 )
            goto LABEL_78;
LABEL_65:
          v21 = v56;
          if ( v56 )
            goto LABEL_66;
        }
        return v47 & 1;
      case 9:
        if ( (nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_object(
                a2,
                (std::__ndk1 *)0xFFFFFFFFFFFFFFFFLL) & 1) == 0 )
          goto LABEL_68;
        v6 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v6;
        if ( v6 == 11 )
        {
          v7 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_object((__int64)a2);
          goto LABEL_20;
        }
        if ( v6 != 4 )
          goto LABEL_72;
        if ( (nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(
                (__int64)a2,
                v4) & 1) == 0 )
          goto LABEL_68;
        v16 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v16;
        if ( v16 != 12 )
          goto LABEL_73;
        v17 = v57;
        if ( v57 == v58 << 6 )
        {
          if ( (__int64)(v57 + 1) < 0 )
            std::__vector_base_common<true>::__throw_length_error();
          if ( v57 > 0x3FFFFFFFFFFFFFFELL )
          {
            v18 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else if ( v58 << 7 >= ((v57 + 64) & 0xFFFFFFFFFFFFFFC0LL) )
          {
            v18 = v58 << 7;
          }
          else
          {
            v18 = (v57 + 64) & 0xFFFFFFFFFFFFFFC0LL;
          }
          std::vector<bool>::reserve((__int64 *)&v56, v18);
          v17 = v57;
        }
        v57 = v17 + 1;
        *(_QWORD *)&v56[(v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL] &= ~(1LL << v17);
        *(_DWORD *)(a1 + 48) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        continue;
      case 0xE:
        v26 = *(_QWORD *)(a1 + 80);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
          v55,
          v5);
        v27 = *(_OWORD *)(a1 + 80);
        v28 = *(void **)(a1 + 96);
        *(_QWORD *)&v48[16] = 0LL;
        *(_OWORD *)v48 = 0x65756C61760AuLL;
        v52 = v28;
        v51 = v27;
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
          (unsigned __int8 *)v48,
          a1,
          0,
          (__int64)&v49);
        nlohmann::detail::parse_error::create((__int64 *)&v51, (unsigned __int8 *)&v49, 0x65u, (__int64)v53);
        v25 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                (__int64)a2,
                v26,
                (__int64)v55,
                (const nlohmann::detail::invalid_iterator *)v53);
        goto LABEL_61;
      default:
        v22 = *(_QWORD *)(a1 + 80);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
          v55,
          v5);
        v23 = *(_OWORD *)(a1 + 80);
        v24 = *(void **)(a1 + 96);
        *(_QWORD *)&v48[16] = 0LL;
        *(_OWORD *)v48 = 0x65756C61760AuLL;
        v52 = v24;
        v51 = v23;
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
          (unsigned __int8 *)v48,
          a1,
          16,
          (__int64)&v49);
        nlohmann::detail::parse_error::create((__int64 *)&v51, (unsigned __int8 *)&v49, 0x65u, (__int64)v53);
        v25 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                (__int64)a2,
                v22,
                (__int64)v55,
                (const nlohmann::detail::invalid_iterator *)v53);
        goto LABEL_61;
    }
  }
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (000000000001EA08) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const nlohmann::detail::invalid_iterator *a4)
{
  int v4; // w8
  nlohmann::detail::invalid_iterator *exception; // x19
  void **v7; // x1

  v4 = *(unsigned __int8 *)(a1 + 144);
  *(_BYTE *)(a1 + 88) = 1;
  if ( v4 )
  {
    switch ( *((_DWORD *)a4 + 2) / 100 % 100 )
    {
      case 1:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x28uLL);
        nlohmann::detail::parse_error::parse_error((__int64)exception, (__int64)a4);
        v7 = (void **)&`typeinfo for'nlohmann::detail::parse_error;
        goto LABEL_9;
      case 2:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        nlohmann::detail::invalid_iterator::invalid_iterator(exception, a4);
        v7 = &`typeinfo for'nlohmann::detail::invalid_iterator;
        goto LABEL_9;
      case 3:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        nlohmann::detail::type_error::type_error(exception, a4);
        v7 = &`typeinfo for'nlohmann::detail::type_error;
        goto LABEL_9;
      case 4:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        nlohmann::detail::out_of_range::out_of_range(exception, a4);
        v7 = &`typeinfo for'nlohmann::detail::out_of_range;
        goto LABEL_9;
      case 5:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        nlohmann::detail::other_error::other_error(exception, a4);
        v7 = &`typeinfo for'nlohmann::detail::other_error;
LABEL_9:
        __cxa_throw(
          exception,
          (struct type_info *)v7,
          (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
      default:
        return 0LL;
    }
  }
  return 0LL;
}
// 44038: using guessed type void *`typeinfo for'nlohmann::detail::other_error;
// 44140: using guessed type void *`typeinfo for'nlohmann::detail::out_of_range;
// 44158: using guessed type void *`typeinfo for'nlohmann::detail::invalid_iterator;
// 44198: using guessed type void *`typeinfo for'nlohmann::detail::type_error;
// 44200: using guessed type void (__fastcall *`typeinfo for'nlohmann::detail::parse_error)(std::exception *__hidden this);

//----- (000000000001EB3C) ----------------------------------------------------
void __usercall nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
        __int64 a1@<X0>,
        __int64 *a2@<X8>)
{
  char *v3; // x22
  char *i; // x23
  __int64 v5; // x3
  size_t v6; // x0
  char s[8]; // [xsp+8h] [xbp-48h] BYREF
  char v8; // [xsp+10h] [xbp-40h]
  __int64 v9; // [xsp+18h] [xbp-38h]

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  a2[1] = 0LL;
  a2[2] = 0LL;
  *a2 = 0LL;
  v3 = *(char **)(a1 + 48);
  for ( i = *(char **)(a1 + 56); i != v3; ++v3 )
  {
    v5 = (unsigned __int8)*v3;
    if ( (unsigned int)v5 > 0x1F )
    {
      std::string::push_back(a2, *v3);
    }
    else
    {
      v8 = 0;
      *(_QWORD *)s = 0LL;
      snprintf(s, 9uLL, "<U+%.4X>", v5);
      v6 = strlen(s);
      std::string::append(a2, s, v6);
    }
  }
}

//----- (000000000001EC24) ----------------------------------------------------
void __usercall nlohmann::detail::parse_error::create(
        unsigned int a1@<W0>,
        __int64 *a2@<X1>,
        unsigned __int8 *a3@<X2>,
        __int64 a4@<X8>)
{
  __int64 *v8; // x0
  __int128 v9; // q0
  unsigned __int64 v10; // x1
  _BYTE *v11; // x1
  unsigned __int64 v12; // x2
  __int64 *v13; // x0
  __int128 v14; // q0
  __int64 *v15; // x0
  __int128 v16; // q0
  unsigned __int64 v17; // x8
  void *v18; // x1
  size_t v19; // x2
  __int64 *v20; // x0
  __int128 v21; // q0
  __int64 v22; // x21
  const char *v23; // x1
  char v24; // w8
  unsigned __int8 v25; // [xsp+8h] [xbp-108h] BYREF
  _BYTE v26[15]; // [xsp+9h] [xbp-107h] BYREF
  void *v27; // [xsp+18h] [xbp-F8h]
  unsigned __int8 v28; // [xsp+20h] [xbp-F0h] BYREF
  _BYTE v29[15]; // [xsp+21h] [xbp-EFh]
  void *v30; // [xsp+30h] [xbp-E0h]
  __int64 v31[3]; // [xsp+38h] [xbp-D8h] BYREF
  __int128 v32; // [xsp+50h] [xbp-C0h] BYREF
  void *v33; // [xsp+60h] [xbp-B0h]
  __int128 v34; // [xsp+70h] [xbp-A0h] BYREF
  void *v35; // [xsp+80h] [xbp-90h]
  __int128 v36; // [xsp+90h] [xbp-80h] BYREF
  void *v37; // [xsp+A0h] [xbp-70h]
  __int128 v38; // [xsp+B0h] [xbp-60h] BYREF
  char *v39; // [xsp+C0h] [xbp-50h]

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  *(_QWORD *)&v29[7] = 1919906304LL;
  v28 = 22;
  v30 = 0LL;
  *(_QWORD *)v29 = *(_QWORD *)"parse_error";
  nlohmann::detail::exception::name(&v28, a1, (__int64)v31);
  v8 = std::string::append(v31, "parse error", 0xBuLL);
  v9 = *(_OWORD *)v8;
  v33 = (void *)v8[2];
  v32 = v9;
  v8[1] = 0LL;
  v8[2] = 0LL;
  *v8 = 0LL;
  nlohmann::detail::parse_error::position_string((__int64)a2, v10, (__int64)&v25);
  if ( (v25 & 1) != 0 )
    v11 = v27;
  else
    v11 = v26;
  if ( (v25 & 1) != 0 )
    v12 = *(_QWORD *)&v26[7];
  else
    v12 = (unsigned __int64)v25 >> 1;
  v13 = std::string::append((__int64 *)&v32, v11, v12);
  v14 = *(_OWORD *)v13;
  v35 = (void *)v13[2];
  v34 = v14;
  v13[1] = 0LL;
  v13[2] = 0LL;
  *v13 = 0LL;
  v15 = std::string::append((__int64 *)&v34, ": ", 2uLL);
  v16 = *(_OWORD *)v15;
  v37 = (void *)v15[2];
  v36 = v16;
  v15[1] = 0LL;
  v15[2] = 0LL;
  *v15 = 0LL;
  v17 = *a3;
  if ( (v17 & 1) != 0 )
    v18 = (void *)*((_QWORD *)a3 + 2);
  else
    v18 = a3 + 1;
  if ( (v17 & 1) != 0 )
    v19 = *((_QWORD *)a3 + 1);
  else
    v19 = v17 >> 1;
  v20 = std::string::append((__int64 *)&v36, v18, v19);
  v21 = *(_OWORD *)v20;
  v39 = (char *)v20[2];
  v38 = v21;
  v20[1] = 0LL;
  v20[2] = 0LL;
  *v20 = 0LL;
  if ( (v36 & 1) != 0 )
  {
    operator delete(v37);
    if ( (v34 & 1) == 0 )
    {
LABEL_15:
      if ( (v25 & 1) == 0 )
        goto LABEL_16;
      goto LABEL_28;
    }
  }
  else if ( (v34 & 1) == 0 )
  {
    goto LABEL_15;
  }
  operator delete(v35);
  if ( (v25 & 1) == 0 )
  {
LABEL_16:
    if ( (v32 & 1) == 0 )
      goto LABEL_17;
    goto LABEL_29;
  }
LABEL_28:
  operator delete(v27);
  if ( (v32 & 1) == 0 )
  {
LABEL_17:
    if ( (v31[0] & 1) == 0 )
      goto LABEL_18;
    goto LABEL_30;
  }
LABEL_29:
  operator delete(v33);
  if ( (v31[0] & 1) == 0 )
  {
LABEL_18:
    if ( (v28 & 1) == 0 )
      goto LABEL_20;
    goto LABEL_19;
  }
LABEL_30:
  operator delete((void *)v31[2]);
  if ( (v28 & 1) != 0 )
LABEL_19:
    operator delete(v30);
LABEL_20:
  v22 = *a2;
  if ( (v38 & 1) != 0 )
    v23 = v39;
  else
    v23 = (char *)&v38 + 1;
  *(_DWORD *)(a4 + 8) = a1;
  *(_QWORD *)a4 = off_44088;
  std::runtime_error::runtime_error((std::runtime_error *)(a4 + 16), v23);
  v24 = v38;
  *(_QWORD *)(a4 + 32) = v22;
  *(_QWORD *)a4 = off_44228;
  if ( (v24 & 1) != 0 )
    operator delete(v39);
}
// 1ECD0: variable 'v10' is possibly undefined
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);
// 44228: using guessed type void (__fastcall *off_44228[2])(nlohmann::detail::exception *__hidden this);

//----- (000000000001EF94) ----------------------------------------------------
void __usercall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
        __int64 a1@<X0>,
        int a2@<W1>,
        unsigned __int8 *a3@<X2>,
        __int64 a4@<X8>)
{
  unsigned __int64 v5; // x8
  unsigned __int64 v8; // x8
  __int64 *v9; // x0
  __int128 v10; // q0
  char *v11; // x1
  unsigned __int64 v12; // x2
  __int64 v13; // x8
  const char *v14; // x22
  size_t v15; // x0
  size_t v16; // x23
  char *v17; // x24
  const char *v18; // x21
  size_t v19; // x0
  size_t v20; // x22
  char *v21; // x23
  unsigned __int64 v22; // x25
  __int64 *v23; // x0
  __int128 v24; // q0
  char *v25; // x1
  unsigned __int64 v26; // x2
  __int64 *v27; // x0
  __int128 v28; // q0
  __int64 *v29; // x0
  __int128 v30; // q0
  char *v31; // x1
  unsigned __int64 v32; // x2
  unsigned __int64 v33; // x24
  __int64 *v34; // x0
  __int128 v35; // q0
  char *v36; // x1
  unsigned __int64 v37; // x2
  void *v38; // x0
  const char *v39; // x20
  size_t v40; // x0
  size_t v41; // x21
  char *v42; // x22
  unsigned __int64 v43; // x23
  __int64 *v44; // x0
  __int128 v45; // q0
  char *v46; // x1
  unsigned __int64 v47; // x2
  __int64 v48[2]; // [xsp+0h] [xbp-D0h] BYREF
  void *v49; // [xsp+10h] [xbp-C0h]
  unsigned __int64 v50; // [xsp+18h] [xbp-B8h] BYREF
  size_t v51; // [xsp+20h] [xbp-B0h]
  void *v52; // [xsp+28h] [xbp-A8h]
  __int128 v53; // [xsp+30h] [xbp-A0h] BYREF
  void *v54; // [xsp+40h] [xbp-90h]
  __int128 v55; // [xsp+50h] [xbp-80h] BYREF
  void *v56; // [xsp+60h] [xbp-70h]
  __int128 v57; // [xsp+70h] [xbp-60h] BYREF
  char *v58; // [xsp+80h] [xbp-50h]
  __int64 v59; // [xsp+88h] [xbp-48h]

  v59 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  *(_QWORD *)a4 = 0LL;
  *(_QWORD *)(a4 + 8) = 0LL;
  *(_QWORD *)(a4 + 16) = 0LL;
  *(_BYTE *)a4 = 26;
  strcpy((char *)(a4 + 1), "syntax error ");
  v5 = *a3;
  if ( (v5 & 1) != 0 )
    v8 = *((_QWORD *)a3 + 1);
  else
    v8 = v5 >> 1;
  if ( v8 )
  {
    std::operator+<char>("while parsing ", a3, (__int64 *)&v55);
    v9 = std::string::append((__int64 *)&v55, " ", 1uLL);
    v10 = *(_OWORD *)v9;
    v58 = (char *)v9[2];
    v57 = v10;
    v9[1] = 0LL;
    v9[2] = 0LL;
    *v9 = 0LL;
    if ( (v57 & 1) != 0 )
      v11 = v58;
    else
      v11 = (char *)&v57 + 1;
    if ( (v57 & 1) != 0 )
      v12 = *((_QWORD *)&v57 + 1);
    else
      v12 = (unsigned __int64)(unsigned __int8)v57 >> 1;
    std::string::append((__int64 *)a4, v11, v12);
    if ( (v57 & 1) != 0 )
      operator delete(v58);
    if ( (v55 & 1) != 0 )
      operator delete(v56);
  }
  std::string::append((__int64 *)a4, "- ", 2uLL);
  v13 = *(int *)(a1 + 48);
  if ( (_DWORD)v13 == 14 )
  {
    v14 = *(const char **)(a1 + 152);
    v50 = 0LL;
    v51 = 0LL;
    v52 = 0LL;
    v15 = strlen(v14);
    if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v16 = v15;
    if ( v15 >= 0x17 )
    {
      v22 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v17 = (char *)operator new(v22);
      v51 = v16;
      v52 = v17;
      v50 = v22 | 1;
    }
    else
    {
      v17 = (char *)&v50 + 1;
      LOBYTE(v50) = 2 * v15;
      if ( !v15 )
      {
LABEL_29:
        v17[v16] = 0;
        v23 = std::string::append((__int64 *)&v50, "; last read: '", 0xEuLL);
        v24 = *(_OWORD *)v23;
        v54 = (void *)v23[2];
        v53 = v24;
        v23[1] = 0LL;
        v23[2] = 0LL;
        *v23 = 0LL;
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
          v48,
          a1 + 56);
        if ( (v48[0] & 1) != 0 )
          v25 = (char *)v49;
        else
          v25 = (char *)v48 + 1;
        if ( (v48[0] & 1) != 0 )
          v26 = v48[1];
        else
          v26 = (unsigned __int64)LOBYTE(v48[0]) >> 1;
        v27 = std::string::append((__int64 *)&v53, v25, v26);
        v28 = *(_OWORD *)v27;
        v56 = (void *)v27[2];
        v55 = v28;
        v27[1] = 0LL;
        v27[2] = 0LL;
        *v27 = 0LL;
        v29 = std::string::append((__int64 *)&v55, "'", 1uLL);
        v30 = *(_OWORD *)v29;
        v58 = (char *)v29[2];
        v57 = v30;
        v29[1] = 0LL;
        v29[2] = 0LL;
        *v29 = 0LL;
        if ( (v57 & 1) != 0 )
          v31 = v58;
        else
          v31 = (char *)&v57 + 1;
        if ( (v57 & 1) != 0 )
          v32 = *((_QWORD *)&v57 + 1);
        else
          v32 = (unsigned __int64)(unsigned __int8)v57 >> 1;
        std::string::append((__int64 *)a4, v31, v32);
        if ( (v57 & 1) != 0 )
        {
          operator delete(v58);
          if ( (v55 & 1) == 0 )
          {
LABEL_43:
            if ( (v48[0] & 1) == 0 )
              goto LABEL_44;
            goto LABEL_61;
          }
        }
        else if ( (v55 & 1) == 0 )
        {
          goto LABEL_43;
        }
        operator delete(v56);
        if ( (v48[0] & 1) == 0 )
        {
LABEL_44:
          if ( (v53 & 1) == 0 )
            goto LABEL_45;
          goto LABEL_62;
        }
LABEL_61:
        operator delete(v49);
        if ( (v53 & 1) == 0 )
        {
LABEL_45:
          if ( (v50 & 1) == 0 )
            goto LABEL_65;
          goto LABEL_63;
        }
LABEL_62:
        operator delete(v54);
        if ( (v50 & 1) == 0 )
          goto LABEL_65;
LABEL_63:
        v38 = v52;
        goto LABEL_64;
      }
    }
    memcpy(v17, v14, v16);
    goto LABEL_29;
  }
  if ( (unsigned int)v13 > 0x10 )
    v18 = "unknown token";
  else
    v18 = off_44240[v13];
  v55 = 0uLL;
  v56 = 0LL;
  v19 = strlen(v18);
  if ( v19 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v20 = v19;
  if ( v19 >= 0x17 )
  {
    v33 = (v19 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v21 = (char *)operator new(v33);
    *((_QWORD *)&v55 + 1) = v20;
    v56 = v21;
    *(_QWORD *)&v55 = v33 | 1;
    goto LABEL_48;
  }
  v21 = (char *)&v55 + 1;
  LOBYTE(v55) = 2 * v19;
  if ( v19 )
LABEL_48:
    memcpy(v21, v18, v20);
  v21[v20] = 0;
  v34 = std::string::insert((__int64 *)&v55, 0LL, "unexpected ", 0xBuLL);
  v35 = *(_OWORD *)v34;
  v58 = (char *)v34[2];
  v57 = v35;
  v34[1] = 0LL;
  v34[2] = 0LL;
  *v34 = 0LL;
  if ( (v57 & 1) != 0 )
    v36 = v58;
  else
    v36 = (char *)&v57 + 1;
  if ( (v57 & 1) != 0 )
    v37 = *((_QWORD *)&v57 + 1);
  else
    v37 = (unsigned __int64)(unsigned __int8)v57 >> 1;
  std::string::append((__int64 *)a4, v36, v37);
  if ( (v57 & 1) != 0 )
    operator delete(v58);
  if ( (v55 & 1) != 0 )
  {
    v38 = v56;
LABEL_64:
    operator delete(v38);
  }
LABEL_65:
  if ( !a2 )
    return;
  if ( (unsigned int)(a2 - 1) > 0xF )
    v39 = "unknown token";
  else
    v39 = off_442C8[a2 - 1];
  v55 = 0uLL;
  v56 = 0LL;
  v40 = strlen(v39);
  if ( v40 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v41 = v40;
  if ( v40 >= 0x17 )
  {
    v43 = (v40 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v42 = (char *)operator new(v43);
    *((_QWORD *)&v55 + 1) = v41;
    v56 = v42;
    *(_QWORD *)&v55 = v43 | 1;
  }
  else
  {
    v42 = (char *)&v55 + 1;
    LOBYTE(v55) = 2 * v40;
    if ( !v40 )
      goto LABEL_75;
  }
  memcpy(v42, v39, v41);
LABEL_75:
  v42[v41] = 0;
  v44 = std::string::insert((__int64 *)&v55, 0LL, "; expected ", 0xBuLL);
  v45 = *(_OWORD *)v44;
  v58 = (char *)v44[2];
  v57 = v45;
  v44[1] = 0LL;
  v44[2] = 0LL;
  *v44 = 0LL;
  if ( (v57 & 1) != 0 )
    v46 = v58;
  else
    v46 = (char *)&v57 + 1;
  if ( (v57 & 1) != 0 )
    v47 = *((_QWORD *)&v57 + 1);
  else
    v47 = (unsigned __int64)(unsigned __int8)v57 >> 1;
  std::string::append((__int64 *)a4, v46, v47);
  if ( (v57 & 1) != 0 )
    operator delete(v58);
  if ( (v55 & 1) != 0 )
    operator delete(v56);
}
// 44240: using guessed type char *off_44240[36];
// 442C8: using guessed type char *off_442C8[19];

//----- (000000000001F60C) ----------------------------------------------------
void __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::~json_sax_dom_callback_parser(
        __int64 a1)
{
  __int64 v2; // x0
  void (*v3)(void); // x8
  void *v4; // x0
  void *v5; // x0
  void *v6; // x0

  nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
    (void ***)(a1 + 160),
    *(_BYTE *)(a1 + 152));
  v2 = *(_QWORD *)(a1 + 128);
  if ( a1 + 96 == v2 )
  {
    v3 = *(void (**)(void))(*(_QWORD *)v2 + 32LL);
  }
  else
  {
    if ( !v2 )
      goto LABEL_6;
    v3 = *(void (**)(void))(*(_QWORD *)v2 + 40LL);
  }
  v3();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if ( v4 )
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if ( v5 )
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if ( v6 )
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
}

//----- (000000000001F690) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::sax_parse_internal<nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>(
        __int64 a1,
        __int64 a2)
{
  __int128 *v4; // x22
  __int64 v5; // x21
  __int64 v6; // x23
  void **v7; // x0
  void ***v8; // x8
  double v9; // d1
  __int64 v10; // x8
  int v11; // w0
  int v12; // w0
  int v13; // w0
  int v14; // w0
  void **v15; // x0
  void ***v16; // x8
  int v17; // w0
  int v18; // w0
  unsigned __int64 v19; // x8
  __int64 v20; // x1
  int v21; // w0
  unsigned __int64 v22; // x8
  __int64 v23; // x1
  void *v24; // x0
  __int64 v25; // x22
  __int128 v26; // q0
  void *v27; // x8
  __int64 v28; // x22
  __int128 v29; // q0
  void *v30; // x8
  __int64 v32; // x22
  __int128 v33; // q0
  void *v34; // x8
  char v35; // w0
  __int64 v36; // x22
  __int128 v37; // q0
  void *v38; // x8
  __int64 v39; // x22
  __int128 v40; // q0
  void *v41; // x8
  __int64 v42; // x22
  __int128 v43; // q0
  void *v44; // x8
  __int64 v45; // x20
  __int64 *v46; // x0
  __int128 v47; // q0
  __int64 *v48; // x0
  __int128 v49; // q0
  char v50; // w19
  char v51[24]; // [xsp+8h] [xbp-118h] BYREF
  __int128 v52; // [xsp+20h] [xbp-100h] BYREF
  void *v53; // [xsp+30h] [xbp-F0h]
  __int128 v54; // [xsp+40h] [xbp-E0h] BYREF
  void *v55; // [xsp+50h] [xbp-D0h]
  void **v56[2]; // [xsp+58h] [xbp-C8h] BYREF
  _BYTE v57[24]; // [xsp+68h] [xbp-B8h] BYREF
  __int64 v58[3]; // [xsp+80h] [xbp-A0h] BYREF
  void *v59; // [xsp+98h] [xbp-88h] BYREF
  unsigned __int64 v60; // [xsp+A0h] [xbp-80h]
  __int64 v61; // [xsp+A8h] [xbp-78h]
  __int64 v62; // [xsp+B0h] [xbp-70h]

  v4 = (__int128 *)(a1 + 128);
  v5 = a1 + 56;
  v6 = a2 + 8;
  v62 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v59 = 0LL;
  v60 = 0LL;
  v61 = 0LL;
  while ( 2 )
  {
    switch ( *(_DWORD *)(a1 + 48) )
    {
      case 1:
        LOBYTE(v56[0]) = 1;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(
          a2,
          (unsigned __int8 *)v56);
        goto LABEL_16;
      case 2:
        LOBYTE(v56[0]) = 0;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(
          a2,
          (unsigned __int8 *)v56);
        goto LABEL_16;
      case 3:
        v56[0] = 0LL;
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(a2);
        goto LABEL_16;
      case 4:
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(
          a2,
          v4);
        goto LABEL_16;
      case 5:
        v56[0] = *(void ***)(a1 + 168);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(
          a2,
          v56);
        goto LABEL_16;
      case 6:
        v56[0] = *(void ***)(a1 + 160);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(
          a2,
          v56);
        goto LABEL_16;
      case 7:
        v9 = fabs(*(double *)(a1 + 176));
        if ( v9 >= INFINITY && v9 <= INFINITY )
        {
          v45 = *(_QWORD *)(a1 + 80);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
            v58,
            v5);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
            (__int64 *)v51,
            v5);
          v46 = std::string::insert((__int64 *)v51, 0LL, "number overflow parsing '", 0x19uLL);
          v47 = *(_OWORD *)v46;
          v53 = (void *)v46[2];
          v52 = v47;
          v46[1] = 0LL;
          v46[2] = 0LL;
          *v46 = 0LL;
          v48 = std::string::append((__int64 *)&v52, "'", 1uLL);
          v49 = *(_OWORD *)v48;
          v55 = (void *)v48[2];
          v54 = v49;
          v48[1] = 0LL;
          v48[2] = 0LL;
          *v48 = 0LL;
          nlohmann::detail::out_of_range::create((unsigned __int8 *)&v54, 0x196u, (__int64)v56);
          v50 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                  a2,
                  v45,
                  (__int64)v58,
                  (const nlohmann::detail::invalid_iterator *)v56);
          v56[0] = (void **)off_44088;
          std::runtime_error::~runtime_error((std::runtime_error *)v57);
          std::exception::~exception((std::exception *)v56);
          if ( (v54 & 1) == 0 )
            goto LABEL_63;
          operator delete(v55);
          if ( (v52 & 1) == 0 )
            goto LABEL_64;
          goto LABEL_76;
        }
        v56[0] = *(void ***)(a1 + 176);
        nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(
          a2,
          v56);
LABEL_16:
        v10 = v60;
        if ( !v60 )
          goto LABEL_58;
LABEL_17:
        while ( 2 )
        {
          if ( (*(_QWORD *)((_BYTE *)v59 + (((unsigned __int64)(v10 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) & (1LL << ((unsigned __int8)v10 - 1))) != 0 )
          {
            v11 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
            *(_DWORD *)(a1 + 48) = v11;
            if ( v11 == 13 )
              goto LABEL_2;
            if ( v11 != 10 )
            {
              v32 = *(_QWORD *)(a1 + 80);
              nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
                v58,
                v5);
              v33 = *(_OWORD *)(a1 + 80);
              v34 = *(void **)(a1 + 96);
              *(_QWORD *)&v51[16] = 0LL;
              *(_OWORD *)v51 = 0x79617272610AuLL;
              v55 = v34;
              v54 = v33;
              nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
                (unsigned __int8 *)v51,
                a1,
                10,
                (__int64)&v52);
              nlohmann::detail::parse_error::create((__int64 *)&v54, (unsigned __int8 *)&v52, 0x65u, (__int64)v56);
              v35 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                      a2,
                      v32,
                      (__int64)v58,
                      (const nlohmann::detail::invalid_iterator *)v56);
              goto LABEL_62;
            }
LABEL_23:
            *(_QWORD *)(a2 + 16) -= 8LL;
            v10 = v60 - 1;
            v60 = v10;
            if ( !v10 )
              goto LABEL_58;
            continue;
          }
          break;
        }
        v12 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v12;
        if ( v12 != 13 )
        {
          if ( v12 != 11 )
          {
            v36 = *(_QWORD *)(a1 + 80);
            nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
              v58,
              v5);
            v37 = *(_OWORD *)(a1 + 80);
            v38 = *(void **)(a1 + 96);
            *(_QWORD *)&v51[8] = 0LL;
            *(_QWORD *)&v51[16] = 0LL;
            v51[0] = 12;
            strcpy(&v51[1], "object");
            v55 = v38;
            v54 = v37;
            nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
              (unsigned __int8 *)v51,
              a1,
              11,
              (__int64)&v52);
            nlohmann::detail::parse_error::create((__int64 *)&v54, (unsigned __int8 *)&v52, 0x65u, (__int64)v56);
            v35 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                    a2,
                    v36,
                    (__int64)v58,
                    (const nlohmann::detail::invalid_iterator *)v56);
            goto LABEL_62;
          }
          goto LABEL_23;
        }
        v13 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v13;
        if ( v13 != 4 )
          goto LABEL_72;
        if ( (nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(
                a2,
                v4) & 1) != 0 )
        {
          v14 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
          *(_DWORD *)(a1 + 48) = v14;
          if ( v14 == 12 )
          {
LABEL_2:
            *(_DWORD *)(a1 + 48) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
            continue;
          }
          goto LABEL_73;
        }
LABEL_69:
        v50 = 0;
        v24 = v59;
        if ( v59 )
          goto LABEL_67;
        return v50 & 1;
      case 8:
        LOBYTE(v58[0]) = 2;
        v15 = (void **)nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(
                         a2,
                         (unsigned __int8 *)v58);
        v56[0] = v15;
        v16 = *(void ****)(a2 + 16);
        if ( (unsigned __int64)v16 >= *(_QWORD *)(a2 + 24) )
        {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>(
            v6,
            v56);
        }
        else
        {
          *v16 = v15;
          *(_QWORD *)(a2 + 16) += 8LL;
        }
        v21 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v21;
        if ( v21 == 10 )
          goto LABEL_44;
        v22 = v60;
        if ( v60 == v61 << 6 )
        {
          if ( (__int64)(v60 + 1) < 0 )
            std::__vector_base_common<true>::__throw_length_error();
          if ( v60 > 0x3FFFFFFFFFFFFFFELL )
          {
            v23 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else if ( v61 << 7 >= ((v60 + 64) & 0xFFFFFFFFFFFFFFC0LL) )
          {
            v23 = v61 << 7;
          }
          else
          {
            v23 = (v60 + 64) & 0xFFFFFFFFFFFFFFC0LL;
          }
          std::vector<bool>::reserve((__int64 *)&v59, v23);
          v22 = v60;
        }
        v60 = v22 + 1;
        *(_QWORD *)((char *)v59 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
        continue;
      case 9:
        LOBYTE(v58[0]) = 1;
        v7 = (void **)nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(
                        a2,
                        (unsigned __int8 *)v58);
        v56[0] = v7;
        v8 = *(void ****)(a2 + 16);
        if ( (unsigned __int64)v8 >= *(_QWORD *)(a2 + 24) )
        {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>(
            v6,
            v56);
        }
        else
        {
          *v8 = v7;
          *(_QWORD *)(a2 + 16) += 8LL;
        }
        v17 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v17;
        if ( v17 == 11 )
        {
LABEL_44:
          *(_QWORD *)(a2 + 16) -= 8LL;
          v10 = v60;
          if ( v60 )
            goto LABEL_17;
LABEL_58:
          v50 = 1;
          v24 = v59;
          if ( !v59 )
            return v50 & 1;
LABEL_67:
          operator delete(v24);
          return v50 & 1;
        }
        if ( v17 != 4 )
        {
LABEL_72:
          v39 = *(_QWORD *)(a1 + 80);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
            v58,
            v5);
          v40 = *(_OWORD *)(a1 + 80);
          v41 = *(void **)(a1 + 96);
          strcpy(&v51[9], "ey");
          *(_DWORD *)&v51[12] = 0;
          v51[0] = 20;
          *(_QWORD *)&v51[16] = 0LL;
          v55 = v41;
          v54 = v40;
          strcpy(&v51[1], "object ");
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
            (unsigned __int8 *)v51,
            a1,
            4,
            (__int64)&v52);
          nlohmann::detail::parse_error::create((__int64 *)&v54, (unsigned __int8 *)&v52, 0x65u, (__int64)v56);
          v35 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                  a2,
                  v39,
                  (__int64)v58,
                  (const nlohmann::detail::invalid_iterator *)v56);
LABEL_62:
          v50 = v35;
          v56[0] = (void **)off_44088;
          std::runtime_error::~runtime_error((std::runtime_error *)v57);
          std::exception::~exception((std::exception *)v56);
LABEL_63:
          if ( (v52 & 1) != 0 )
          {
LABEL_76:
            operator delete(v53);
            if ( (v51[0] & 1) != 0 )
              goto LABEL_77;
LABEL_65:
            if ( (v58[0] & 1) != 0 )
            {
LABEL_78:
              operator delete((void *)v58[2]);
              v24 = v59;
              if ( !v59 )
                return v50 & 1;
              goto LABEL_67;
            }
          }
          else
          {
LABEL_64:
            if ( (v51[0] & 1) == 0 )
              goto LABEL_65;
LABEL_77:
            operator delete(*(void **)&v51[16]);
            if ( (v58[0] & 1) != 0 )
              goto LABEL_78;
          }
          v24 = v59;
          if ( !v59 )
            return v50 & 1;
          goto LABEL_67;
        }
        if ( (nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(
                a2,
                v4) & 1) == 0 )
          goto LABEL_69;
        v18 = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        *(_DWORD *)(a1 + 48) = v18;
        if ( v18 != 12 )
        {
LABEL_73:
          v42 = *(_QWORD *)(a1 + 80);
          nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
            v58,
            v5);
          v43 = *(_OWORD *)(a1 + 80);
          v44 = *(void **)(a1 + 96);
          v51[17] = 0;
          *(_WORD *)&v51[18] = 0;
          *(_DWORD *)&v51[20] = 0;
          strcpy(v51, " object separato");
          v55 = v44;
          v54 = v43;
          nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
            (unsigned __int8 *)v51,
            a1,
            12,
            (__int64)&v52);
          nlohmann::detail::parse_error::create((__int64 *)&v54, (unsigned __int8 *)&v52, 0x65u, (__int64)v56);
          v35 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                  a2,
                  v42,
                  (__int64)v58,
                  (const nlohmann::detail::invalid_iterator *)v56);
          goto LABEL_62;
        }
        v19 = v60;
        if ( v60 == v61 << 6 )
        {
          if ( (__int64)(v60 + 1) < 0 )
            std::__vector_base_common<true>::__throw_length_error();
          if ( v60 > 0x3FFFFFFFFFFFFFFELL )
          {
            v20 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else if ( v61 << 7 >= ((v60 + 64) & 0xFFFFFFFFFFFFFFC0LL) )
          {
            v20 = v61 << 7;
          }
          else
          {
            v20 = (v60 + 64) & 0xFFFFFFFFFFFFFFC0LL;
          }
          std::vector<bool>::reserve((__int64 *)&v59, v20);
          v19 = v60;
        }
        v60 = v19 + 1;
        *(_QWORD *)((char *)v59 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= ~(1LL << v19);
        *(_DWORD *)(a1 + 48) = nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::scan(v5);
        continue;
      case 0xE:
        v28 = *(_QWORD *)(a1 + 80);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
          v58,
          v5);
        v29 = *(_OWORD *)(a1 + 80);
        v30 = *(void **)(a1 + 96);
        *(_QWORD *)&v51[16] = 0LL;
        *(_OWORD *)v51 = 0x65756C61760AuLL;
        v55 = v30;
        v54 = v29;
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
          (unsigned __int8 *)v51,
          a1,
          0,
          (__int64)&v52);
        nlohmann::detail::parse_error::create((__int64 *)&v54, (unsigned __int8 *)&v52, 0x65u, (__int64)v56);
        v35 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                a2,
                v28,
                (__int64)v58,
                (const nlohmann::detail::invalid_iterator *)v56);
        goto LABEL_62;
      default:
        v25 = *(_QWORD *)(a1 + 80);
        nlohmann::detail::lexer<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::get_token_string(
          v58,
          v5);
        v26 = *(_OWORD *)(a1 + 80);
        v27 = *(void **)(a1 + 96);
        *(_QWORD *)&v51[16] = 0LL;
        *(_OWORD *)v51 = 0x65756C61760AuLL;
        v55 = v27;
        v54 = v26;
        nlohmann::detail::parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::exception_message(
          (unsigned __int8 *)v51,
          a1,
          16,
          (__int64)&v52);
        nlohmann::detail::parse_error::create((__int64 *)&v54, (unsigned __int8 *)&v52, 0x65u, (__int64)v56);
        v35 = nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
                a2,
                v25,
                (__int64)v58,
                (const nlohmann::detail::invalid_iterator *)v56);
        goto LABEL_62;
    }
  }
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000020238) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::parse_error(
        __int64 a1,
        __int64 a2,
        __int64 a3,
        const nlohmann::detail::invalid_iterator *a4)
{
  int v4; // w8
  nlohmann::detail::invalid_iterator *exception; // x19
  void **v7; // x1

  v4 = *(unsigned __int8 *)(a1 + 41);
  *(_BYTE *)(a1 + 40) = 1;
  if ( v4 )
  {
    switch ( *((_DWORD *)a4 + 2) / 100 % 100 )
    {
      case 1:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x28uLL);
        nlohmann::detail::parse_error::parse_error((__int64)exception, (__int64)a4);
        v7 = (void **)&`typeinfo for'nlohmann::detail::parse_error;
        goto LABEL_9;
      case 2:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        nlohmann::detail::invalid_iterator::invalid_iterator(exception, a4);
        v7 = &`typeinfo for'nlohmann::detail::invalid_iterator;
        goto LABEL_9;
      case 3:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        nlohmann::detail::type_error::type_error(exception, a4);
        v7 = &`typeinfo for'nlohmann::detail::type_error;
        goto LABEL_9;
      case 4:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        nlohmann::detail::out_of_range::out_of_range(exception, a4);
        v7 = &`typeinfo for'nlohmann::detail::out_of_range;
        goto LABEL_9;
      case 5:
        exception = (nlohmann::detail::invalid_iterator *)__cxa_allocate_exception(0x20uLL);
        nlohmann::detail::other_error::other_error(exception, a4);
        v7 = &`typeinfo for'nlohmann::detail::other_error;
LABEL_9:
        __cxa_throw(
          exception,
          (struct type_info *)v7,
          (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
      default:
        return 0LL;
    }
  }
  return 0LL;
}
// 44038: using guessed type void *`typeinfo for'nlohmann::detail::other_error;
// 44140: using guessed type void *`typeinfo for'nlohmann::detail::out_of_range;
// 44158: using guessed type void *`typeinfo for'nlohmann::detail::invalid_iterator;
// 44198: using guessed type void *`typeinfo for'nlohmann::detail::type_error;
// 44200: using guessed type void (__fastcall *`typeinfo for'nlohmann::detail::parse_error)(std::exception *__hidden this);

//----- (000000000002036C) ----------------------------------------------------
void __fastcall std::vector<bool>::reserve(__int64 *a1, unsigned __int64 a2)
{
  unsigned __int64 v2; // x21
  __int64 v4; // x8
  unsigned __int64 v5; // x9
  __int128 v6; // q1
  __int64 v7; // x9
  void *v8[2]; // [xsp+0h] [xbp-60h] BYREF
  unsigned __int64 v9; // [xsp+10h] [xbp-50h]
  unsigned __int64 v10; // [xsp+18h] [xbp-48h] BYREF
  int v11; // [xsp+20h] [xbp-40h]
  __int64 v12; // [xsp+28h] [xbp-38h] BYREF
  int v13; // [xsp+30h] [xbp-30h]
  __int64 v14; // [xsp+38h] [xbp-28h]

  v14 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( a2 > a1[2] << 6 )
  {
    v8[0] = 0LL;
    v8[1] = 0LL;
    v9 = 0LL;
    if ( (a2 & 0x8000000000000000LL) != 0 )
      std::__vector_base_common<true>::__throw_length_error();
    v2 = ((a2 - 1) >> 6) + 1;
    v8[0] = (void *)operator new(8 * v2);
    v8[1] = 0LL;
    v4 = *a1;
    v5 = a1[1];
    v13 = 0;
    v12 = v4;
    v9 = v2;
    v10 = v4 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8LL);
    v11 = v5 & 0x3F;
    std::vector<bool>::__construct_at_end<std::__bit_iterator<std::vector<bool>,false,0ul>>(
      v8,
      (__int64)&v12,
      (__int64)&v10);
    v6 = *(_OWORD *)a1;
    *(_OWORD *)a1 = *(_OWORD *)v8;
    *(_OWORD *)v8 = v6;
    v7 = a1[2];
    a1[2] = v9;
    v9 = v7;
    if ( (_QWORD)v6 )
      operator delete((void *)v6);
  }
}

//----- (000000000002046C) ----------------------------------------------------
_QWORD *__fastcall std::vector<bool>::__construct_at_end<std::__bit_iterator<std::vector<bool>,false,0ul>>(
        _QWORD *result,
        __int64 a2,
        __int64 a3)
{
  __int64 *v3; // x19
  __int64 v4; // x23
  __int64 v5; // x8
  __int64 v6; // x9
  unsigned __int64 v7; // x10
  __int64 v8; // x24
  unsigned __int64 v9; // x12
  _QWORD *v10; // x11
  unsigned __int64 v11; // x12
  int v12; // w10
  unsigned __int64 *v13; // x20
  __int64 v14; // x11
  __int64 v15; // t1
  unsigned __int64 v16; // x8
  __int64 v17; // x11
  __int64 v18; // x26
  unsigned __int64 *v19; // [xsp+8h] [xbp-88h] BYREF
  int v20; // [xsp+10h] [xbp-80h]
  __int64 v21; // [xsp+18h] [xbp-78h] BYREF
  int v22; // [xsp+20h] [xbp-70h]
  __int64 v23; // [xsp+28h] [xbp-68h] BYREF
  int v24; // [xsp+30h] [xbp-60h]
  __int64 *v25; // [xsp+38h] [xbp-58h] BYREF
  int v26; // [xsp+40h] [xbp-50h]
  __int64 v27; // [xsp+48h] [xbp-48h]

  v27 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *(__int64 **)a2;
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(_QWORD *)a3;
  v6 = *(unsigned int *)(a3 + 8);
  v7 = result[1];
  v8 = v6 - v4 + 8LL * (*(_QWORD *)a3 - *(_QWORD *)a2);
  v9 = v8 + v7;
  result[1] = v8 + v7;
  if ( v7 && ((v9 - 1) ^ (v7 - 1)) <= 0x3F )
  {
    v10 = (_QWORD *)*result;
  }
  else
  {
    v10 = (_QWORD *)*result;
    if ( v9 > 0x40 )
      *(_QWORD *)((char *)v10 + (((v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8LL)) = 0LL;
    else
      *v10 = 0LL;
  }
  v11 = v7 >> 3;
  v12 = v7 & 0x3F;
  v13 = (_QWORD *)((char *)v10 + (v11 & 0x1FFFFFFFFFFFFFF8LL));
  if ( (_DWORD)v4 == v12 )
  {
    if ( v8 >= 1 )
    {
      if ( (_DWORD)v4 )
      {
        if ( v8 >= (unsigned int)(64 - v4) )
          v14 = (unsigned int)(64 - v4);
        else
          v14 = v8;
        v15 = *v3++;
        v16 = 0xFFFFFFFFFFFFFFFFLL >> (64 - (unsigned __int8)v4 - (unsigned __int8)v14);
        v8 -= v14;
        v17 = v14 + v4;
        *v13 = *v13 & ~(v16 & (-1LL << v4)) | v15 & v16 & (-1LL << v4);
        v13 += v17 / 64;
        LODWORD(v4) = v17 % 64;
      }
      if ( v8 >= 0 )
        v18 = v8;
      else
        v18 = v8 + 63;
      result = memmove(v13, v3, 8 * (v18 >> 6));
      v13 += v18 >> 6;
      if ( (__int64)(v8 - (v18 & 0xFFFFFFFFFFFFFFC0LL)) >= 1 )
      {
        LODWORD(v4) = v8 - (v18 & 0xFFFFFFC0);
        *v13 = *v13 & ~(0xFFFFFFFFFFFFFFFFLL >> (((unsigned __int8)v18 & 0xC0u) - (unsigned __int8)v8)) | v3[v18 >> 6] & (0xFFFFFFFFFFFFFFFFLL >> (((unsigned __int8)v18 & 0xC0u) - (unsigned __int8)v8));
      }
    }
    v19 = v13;
    v20 = v4;
  }
  else
  {
    v23 = v5;
    v25 = v3;
    v26 = v4;
    v24 = v6;
    v21 = (__int64)v10 + (v11 & 0x1FFFFFFFFFFFFFF8LL);
    v22 = v12;
    return (_QWORD *)std::__copy_unaligned<std::vector<bool>,false>(
                       (unsigned __int64)&v25,
                       (__int64)&v23,
                       (__int64)&v21,
                       (__int64)&v19);
  }
  return result;
}

//----- (0000000000020648) ----------------------------------------------------
unsigned __int64 __usercall std::__copy_unaligned<std::vector<bool>,false>@<X0>(
        unsigned __int64 result@<X0>,
        __int64 a2@<X1>,
        __int64 a3@<X2>,
        __int64 a4@<X8>)
{
  unsigned __int64 *v4; // x12
  __int64 v5; // x11
  __int64 v6; // x9
  unsigned __int64 v7; // x12
  unsigned int *v8; // x10
  __int64 v9; // x17
  unsigned __int64 v10; // x3
  unsigned __int64 *v11; // x1
  char v12; // w15
  unsigned __int64 v13; // x12
  unsigned __int64 v14; // x14
  bool v15; // cf
  bool v16; // cc
  int v17; // w11
  unsigned __int64 v18; // x15
  unsigned __int64 v19; // x11
  unsigned __int64 v20; // x6
  unsigned int v21; // w11
  unsigned __int64 *v22; // x16
  __int64 v23; // x13
  unsigned int v24; // w15
  __int64 v25; // x14
  __int64 v26; // x1
  __int64 *v27; // x3
  unsigned __int64 v28; // x12
  unsigned __int64 *v29; // x3
  unsigned __int64 v30; // x0
  char v31; // w1
  __int64 v32; // x12
  unsigned __int64 v33; // x15
  __int64 v34; // x9
  unsigned __int64 *v35; // x13
  unsigned __int64 *v36; // x9

  v4 = *(unsigned __int64 **)result;
  v5 = *(unsigned int *)(result + 8);
  v6 = *(unsigned int *)(a2 + 8) + 8LL * (*(_QWORD *)a2 - *(_QWORD *)result) - v5;
  if ( v6 <= 0 )
  {
    v21 = *(_DWORD *)(a3 + 8);
  }
  else
  {
    if ( (_DWORD)v5 )
    {
      v7 = *v4;
      v8 = (unsigned int *)(a3 + 8);
      v9 = *(unsigned int *)(a3 + 8);
      if ( v6 >= (unsigned int)(64 - v5) )
        v10 = (unsigned int)(64 - v5);
      else
        v10 = *(unsigned int *)(a2 + 8) + 8LL * (*(_QWORD *)a2 - *(_QWORD *)result) - v5;
      v11 = *(unsigned __int64 **)a3;
      v12 = v5 - v9;
      v13 = (0xFFFFFFFFFFFFFFFFLL >> (64 - (unsigned __int8)v5 - (unsigned __int8)v10)) & (-1LL << v5) & v7;
      if ( v10 <= (unsigned int)(64 - v9) )
        v14 = v10;
      else
        v14 = (unsigned int)(64 - v9);
      v15 = (unsigned int)v9 >= (unsigned int)v5;
      v17 = v9 - v5;
      v16 = v17 != 0 && v15;
      v18 = v13 >> v12;
      v19 = v13 << v17;
      if ( v16 )
        v20 = v19;
      else
        v20 = v18;
      v21 = ((_BYTE)v9 + (_BYTE)v14) & 0x3F;
      v6 -= v10;
      v22 = (unsigned __int64 *)((char *)v11 + (((v14 + v9) >> 3) & 0x1FFFFFFFFFFFFFF8LL));
      *v11 = *v11 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - (unsigned __int8)v9 - (unsigned __int8)v14)) & (-1LL << v9)) | v20;
      *(_QWORD *)a3 = v22;
      *v8 = v21;
      if ( (__int64)(v10 - v14) >= 1 )
      {
        *v22 = (v13 >> ((unsigned __int8)v14 + (unsigned __int8)*(_DWORD *)(result + 8))) | *v22 & ~(0xFFFFFFFFFFFFFFFFLL >> ((unsigned __int8)v14 - (unsigned __int8)v10));
        v21 = v10 - v14;
        *v8 = v10 - v14;
      }
      v4 = (unsigned __int64 *)(*(_QWORD *)result + 8LL);
      *(_QWORD *)result = v4;
    }
    else
    {
      v8 = (unsigned int *)(a3 + 8);
      v21 = *(_DWORD *)(a3 + 8);
    }
    v23 = v21;
    v24 = 64 - v21;
    v25 = -1LL << v21;
    if ( v6 >= 64 )
    {
      v26 = v6;
      do
      {
        v27 = *(__int64 **)a3;
        v28 = *v4;
        v26 -= 64LL;
        *v27++ = **(_QWORD **)a3 & ~v25 | (v28 << v21);
        *(_QWORD *)a3 = v27;
        *v27 = *v27 & v25 | (v28 >> v24);
        v4 = (unsigned __int64 *)(*(_QWORD *)result + 8LL);
        *(_QWORD *)result = v4;
      }
      while ( v26 > 63 );
      v6 &= 0x3Fu;
    }
    if ( v6 >= 1 )
    {
      v29 = *(unsigned __int64 **)a3;
      v30 = *v4;
      v31 = 64 - v21;
      if ( v6 <= v24 )
        v32 = v6;
      else
        v32 = v24;
      v33 = v30 & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      v34 = v6 - v32;
      result = v33 << v21;
      v21 = (v21 + v32) & 0x3F;
      v35 = (unsigned __int64 *)((char *)v29 + (((unsigned __int64)(v32 + v23) >> 3) & 0x1FFFFFFFFFFFFFF8LL));
      *v29 = *v29 & ~((0xFFFFFFFFFFFFFFFFLL >> (v31 - (unsigned __int8)v32)) & v25) | result;
      *(_QWORD *)a3 = v35;
      *(_DWORD *)(a3 + 8) = v21;
      if ( v34 >= 1 )
      {
        *v35 = *v35 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v34) | (v33 >> v32);
        v21 = v34;
        *v8 = v34;
      }
    }
  }
  v36 = *(unsigned __int64 **)a3;
  *(_DWORD *)(a4 + 8) = v21;
  *(_QWORD *)a4 = v36;
  return result;
}

//----- (0000000000020888) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_object(
        _QWORD *a1,
        std::__ndk1 *a2)
{
  __int64 v3; // x8
  __int64 v4; // x21
  __int64 v5; // x9
  __int64 v6; // x0
  char v8; // w0
  unsigned __int64 v9; // x8
  __int64 v10; // x9
  char v11; // w22
  unsigned __int64 v12; // x9
  unsigned __int64 v13; // x8
  unsigned __int64 v14; // x1
  __int64 v15; // x9
  unsigned __int64 v16; // x10
  __int64 v17; // x8
  __int64 v18; // x8
  __int64 v19; // x1
  __int64 *v20; // x8
  __int64 v21; // x8
  char *v22; // x8
  unsigned __int64 v23; // x8
  void *exception; // x20
  unsigned __int64 v26; // x1
  __int64 *v27; // x0
  __int128 v28; // q0
  __int64 v29[2]; // [xsp+8h] [xbp-78h] BYREF
  __int128 v30; // [xsp+20h] [xbp-60h] BYREF
  void *v31; // [xsp+30h] [xbp-50h]
  __int64 v32; // [xsp+38h] [xbp-48h]
  __int64 v33[2]; // [xsp+40h] [xbp-40h] BYREF

  v33[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = (__int64)(a1 + 1);
  v3 = a1[1];
  v5 = a1[2];
  LOBYTE(v29[0]) = 0;
  LODWORD(v30) = (unsigned __int64)(v5 - v3) >> 3;
  v6 = a1[16];
  if ( !v6 )
    sub_13744();
  v8 = (*(__int64 (__fastcall **)(__int64, __int128 *, __int64 *, _QWORD *))(*(_QWORD *)v6 + 48LL))(
         v6,
         &v30,
         v29,
         a1 + 19);
  v9 = a1[5];
  v10 = a1[6];
  v11 = v8;
  if ( v9 == v10 << 6 )
  {
    if ( (__int64)(v9 + 1) < 0 )
      std::__vector_base_common<true>::__throw_length_error();
    if ( v9 > 0x3FFFFFFFFFFFFFFELL )
    {
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v12 = v10 << 7;
      v13 = (v9 + 64) & 0xFFFFFFFFFFFFFFC0LL;
      if ( v12 >= v13 )
        v14 = v12;
      else
        v14 = v13;
    }
    std::vector<bool>::reserve(a1 + 4, v14);
    v9 = a1[5];
  }
  v15 = a1[4];
  a1[5] = v9 + 1;
  v16 = v9 >> 6;
  v17 = 1LL << v9;
  if ( (v11 & 1) != 0 )
    v18 = *(_QWORD *)(v15 + 8 * v16) | v17;
  else
    v18 = *(_QWORD *)(v15 + 8 * v16) & ~v17;
  *(_QWORD *)(v15 + 8 * v16) = v18;
  LOBYTE(v30) = 1;
  v32 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(
          (__int64)a1,
          (char *)&v30,
          1);
  v33[0] = v19;
  v20 = (__int64 *)a1[2];
  if ( v20 == (__int64 *)a1[3] )
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> * const&>(
      v4,
      v33);
    v21 = a1[2];
    if ( a2 == (std::__ndk1 *)-1LL )
      return 1LL;
  }
  else
  {
    *v20 = v19;
    v21 = a1[2] + 8LL;
    a1[2] = v21;
    if ( a2 == (std::__ndk1 *)-1LL )
      return 1LL;
  }
  v22 = *(char **)(v21 - 8);
  if ( v22 )
  {
    v23 = *v22;
    if ( v23 > 2 )
    {
      if ( (unsigned __int64)a2 > 1 )
        goto LABEL_25;
    }
    else if ( qword_2E048[v23] < (unsigned __int64)a2 )
    {
LABEL_25:
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(v29, a2, v26);
      v27 = std::string::insert(v29, 0LL, "excessive object size: ", 0x17uLL);
      v28 = *(_OWORD *)v27;
      v31 = (void *)v27[2];
      v30 = v28;
      v27[1] = 0LL;
      v27[2] = 0LL;
      *v27 = 0LL;
      nlohmann::detail::out_of_range::create((unsigned __int8 *)&v30, 0x198u, (__int64)exception);
      __cxa_throw(
        exception,
        (struct type_info *)&`typeinfo for'nlohmann::detail::out_of_range,
        (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
    }
  }
  return 1LL;
}
// 20988: variable 'v19' is possibly undefined
// 20A54: variable 'v26' is possibly undefined
// 2E048: using guessed type _QWORD qword_2E048[3];
// 44140: using guessed type void *`typeinfo for'nlohmann::detail::out_of_range;

//----- (0000000000020B14) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_object(
        __int64 a1)
{
  __int64 v2; // x8
  __int64 v3; // x9
  __int64 v4; // x0
  __int64 v5; // x8
  char v6; // w1
  void **v7; // x10
  __int64 v8; // x9
  __int64 v9; // x11
  __int64 v10; // x8
  __int64 v11; // x10
  __int64 v12; // x9
  unsigned __int8 *v13; // x8
  int v14; // w9
  int v15; // w8
  __int64 v16; // x10
  _QWORD *v17; // x9
  _QWORD *v18; // x8
  unsigned __int8 *v19; // x0
  unsigned __int8 *v21; // [xsp+8h] [xbp-A8h] BYREF
  __int128 v22; // [xsp+10h] [xbp-A0h]
  __int64 v23; // [xsp+20h] [xbp-90h]
  unsigned __int8 *v24; // [xsp+28h] [xbp-88h] BYREF
  __int64 v25; // [xsp+30h] [xbp-80h]
  __int64 v26; // [xsp+38h] [xbp-78h]
  __int64 v27; // [xsp+40h] [xbp-70h]
  unsigned __int8 *v28; // [xsp+48h] [xbp-68h] BYREF
  _BYTE v29[24]; // [xsp+50h] [xbp-60h]
  signed __int64 v30; // [xsp+68h] [xbp-48h] BYREF
  void **v31[2]; // [xsp+70h] [xbp-40h] BYREF

  v31[1] = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *(_QWORD *)(a1 + 16);
  if ( *(_QWORD *)(v2 - 8) )
  {
    v3 = *(_QWORD *)(a1 + 8);
    LOBYTE(v24) = 1;
    LODWORD(v28) = ((unsigned __int64)(v2 - v3) >> 3) - 1;
    v4 = *(_QWORD *)(a1 + 128);
    if ( !v4 )
      sub_13744();
    if ( ((*(__int64 (__fastcall **)(__int64, unsigned __int8 **, unsigned __int8 **))(*(_QWORD *)v4 + 48LL))(
            v4,
            &v28,
            &v24) & 1) == 0 )
    {
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(
        &v30,
        (unsigned __int8 *)(a1 + 152));
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL);
      v6 = *(_BYTE *)v5;
      *(_BYTE *)v5 = v30;
      LOBYTE(v30) = v6;
      v7 = *(void ***)(v5 + 8);
      *(void ***)(v5 + 8) = v31[0];
      v31[0] = v7;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        v31,
        v6);
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v10 = v8 - 8;
  v11 = *(_QWORD *)(a1 + 40) - 1LL;
  *(_QWORD *)(a1 + 16) = v8 - 8;
  *(_QWORD *)(a1 + 40) = v11;
  if ( v9 != v8 - 8 )
  {
    v12 = *(_QWORD *)(v8 - 16);
    if ( v12 )
    {
      if ( *(_BYTE *)v12 == 1 )
      {
        v28 = (unsigned __int8 *)v12;
        *(_OWORD *)&v29[8] = xmmword_2CD70;
        *(_QWORD *)v29 = **(_QWORD **)(v12 + 8);
        while ( 1 )
        {
          v13 = *(unsigned __int8 **)(v10 - 8);
          v24 = v13;
          v25 = 0LL;
          v26 = 0LL;
          v27 = 0x8000000000000000LL;
          v14 = *v13;
          if ( v14 == 2 )
          {
            v26 = *(_QWORD *)(*((_QWORD *)v13 + 1) + 8LL);
          }
          else if ( v14 == 1 )
          {
            v25 = *((_QWORD *)v13 + 1) + 8LL;
          }
          else
          {
            v27 = 1LL;
          }
          if ( nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator==(
                 &v28,
                 &v24) )
          {
            break;
          }
          if ( *nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator->(&v28) == 8 )
          {
            v19 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8LL);
            v21 = v28;
            v23 = *(_QWORD *)&v29[16];
            v22 = *(_OWORD *)v29;
            nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,0>(
              v19,
              &v21,
              &v24);
            return 1LL;
          }
          v15 = *v28;
          if ( v15 == 2 )
          {
            *(_QWORD *)&v29[8] += 16LL;
            v10 = *(_QWORD *)(a1 + 16);
          }
          else if ( v15 == 1 )
          {
            v16 = *(_QWORD *)v29;
            v17 = *(_QWORD **)(*(_QWORD *)v29 + 8LL);
            if ( v17 )
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while ( v17 );
            }
            else
            {
              while ( 1 )
              {
                v18 = *(_QWORD **)(v16 + 16);
                if ( *v18 == v16 )
                  break;
                v16 = *(_QWORD *)(v16 + 16);
              }
            }
            *(_QWORD *)v29 = v18;
            v10 = *(_QWORD *)(a1 + 16);
          }
          else
          {
            ++*(_QWORD *)&v29[16];
            v10 = *(_QWORD *)(a1 + 16);
          }
        }
      }
    }
  }
  return 1LL;
}
// 2CD70: using guessed type __int128 xmmword_2CD70;

//----- (0000000000020D7C) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(
        __int64 a1,
        __int128 *a2)
{
  __int64 v4; // x8
  __int64 v5; // x9
  __int64 v6; // x0
  char v7; // w0
  unsigned __int64 v8; // x8
  __int64 v9; // x9
  char v10; // w22
  unsigned __int64 v11; // x9
  unsigned __int64 v12; // x8
  unsigned __int64 v13; // x1
  __int64 v14; // x9
  unsigned __int64 v15; // x10
  __int64 v16; // x8
  __int64 v17; // x10
  __int64 v18; // x22
  __int64 *v19; // x0
  __int64 v20; // x8
  __int64 **v21; // x21
  __int64 *v22; // x1
  __int64 v23; // x8
  __int64 v24; // x8
  __int64 v25; // x8
  char v26; // t1
  void **v27; // x10
  signed __int64 v29; // [xsp+8h] [xbp-88h] BYREF
  void **v30; // [xsp+10h] [xbp-80h] BYREF
  char v31[8]; // [xsp+18h] [xbp-78h] BYREF
  size_t *v32; // [xsp+20h] [xbp-70h] BYREF
  __int128 *v33; // [xsp+30h] [xbp-60h] BYREF
  __int64 v34; // [xsp+38h] [xbp-58h] BYREF
  __int64 v35[4]; // [xsp+40h] [xbp-50h] BYREF

  v35[3] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v31[0] = 3;
  v32 = nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(a2);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  LOBYTE(v34) = 4;
  LODWORD(v35[0]) = (unsigned __int64)(v5 - v4) >> 3;
  v6 = *(_QWORD *)(a1 + 128);
  if ( !v6 )
    sub_13744();
  v7 = (*(__int64 (__fastcall **)(__int64, __int64 *, __int64 *, char *))(*(_QWORD *)v6 + 48LL))(v6, v35, &v34, v31);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  v10 = v7;
  if ( v8 == v9 << 6 )
  {
    if ( (__int64)(v8 + 1) < 0 )
      std::__vector_base_common<true>::__throw_length_error();
    if ( v8 > 0x3FFFFFFFFFFFFFFELL )
    {
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v11 = v9 << 7;
      v12 = (v8 + 64) & 0xFFFFFFFFFFFFFFC0LL;
      if ( v11 >= v12 )
        v13 = v11;
      else
        v13 = v12;
    }
    std::vector<bool>::reserve((__int64 *)(a1 + 56), v13);
    v8 = *(_QWORD *)(a1 + 64);
  }
  v14 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 64) = v8 + 1;
  v15 = v8 >> 6;
  v16 = 1LL << v8;
  v17 = 8 * v15;
  if ( (v10 & 1) != 0 )
  {
    *(_QWORD *)(v14 + v17) |= v16;
    if ( *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) )
    {
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(
        &v29,
        (unsigned __int8 *)(a1 + 152));
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL);
      v33 = a2;
      v19 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
              v18,
              &v34,
              (unsigned __int8 *)a2);
      v20 = *v19;
      v21 = (__int64 **)v19;
      if ( !*v19 )
      {
        std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
          &v33,
          v18,
          (__int64)v35);
        v23 = v34;
        v22 = (__int64 *)v35[0];
        *(_QWORD *)v35[0] = 0LL;
        v22[1] = 0LL;
        v22[2] = v23;
        *v21 = v22;
        v24 = **(_QWORD **)v18;
        if ( v24 )
        {
          *(_QWORD *)v18 = v24;
          v22 = *v21;
        }
        std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(*(__int64 **)(v18 + 8), v22);
        ++*(_QWORD *)(v18 + 16);
        v20 = v35[0];
      }
      v26 = *(_BYTE *)(v20 + 56);
      v25 = v20 + 56;
      *(_BYTE *)v25 = v29;
      LOBYTE(v29) = v26;
      v27 = *(void ***)(v25 + 8);
      *(_QWORD *)(v25 + 8) = v30;
      v30 = v27;
      *(_QWORD *)(a1 + 80) = v25;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v30,
        v26);
    }
  }
  else
  {
    *(_QWORD *)(v14 + v17) &= ~v16;
  }
  nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
    (void ***)&v32,
    v31[0]);
  return 1LL;
}
// 20D7C: using guessed type char var_78[8];

//----- (0000000000020FC4) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::start_array(
        _QWORD *a1,
        std::__ndk1 *a2)
{
  __int64 v3; // x8
  __int64 v4; // x21
  __int64 v5; // x9
  __int64 v6; // x0
  char v8; // w0
  unsigned __int64 v9; // x8
  __int64 v10; // x9
  char v11; // w22
  unsigned __int64 v12; // x9
  unsigned __int64 v13; // x8
  unsigned __int64 v14; // x1
  __int64 v15; // x9
  unsigned __int64 v16; // x10
  __int64 v17; // x8
  __int64 v18; // x8
  __int64 v19; // x1
  __int64 *v20; // x8
  __int64 v21; // x8
  char *v22; // x8
  unsigned __int64 v23; // x8
  void *exception; // x20
  unsigned __int64 v26; // x1
  __int64 *v27; // x0
  __int128 v28; // q0
  __int64 v29[2]; // [xsp+8h] [xbp-78h] BYREF
  __int128 v30; // [xsp+20h] [xbp-60h] BYREF
  void *v31; // [xsp+30h] [xbp-50h]
  __int64 v32; // [xsp+38h] [xbp-48h]
  __int64 v33[2]; // [xsp+40h] [xbp-40h] BYREF

  v33[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = (__int64)(a1 + 1);
  v3 = a1[1];
  v5 = a1[2];
  LOBYTE(v29[0]) = 2;
  LODWORD(v30) = (unsigned __int64)(v5 - v3) >> 3;
  v6 = a1[16];
  if ( !v6 )
    sub_13744();
  v8 = (*(__int64 (__fastcall **)(__int64, __int128 *, __int64 *, _QWORD *))(*(_QWORD *)v6 + 48LL))(
         v6,
         &v30,
         v29,
         a1 + 19);
  v9 = a1[5];
  v10 = a1[6];
  v11 = v8;
  if ( v9 == v10 << 6 )
  {
    if ( (__int64)(v9 + 1) < 0 )
      std::__vector_base_common<true>::__throw_length_error();
    if ( v9 > 0x3FFFFFFFFFFFFFFELL )
    {
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v12 = v10 << 7;
      v13 = (v9 + 64) & 0xFFFFFFFFFFFFFFC0LL;
      if ( v12 >= v13 )
        v14 = v12;
      else
        v14 = v13;
    }
    std::vector<bool>::reserve(a1 + 4, v14);
    v9 = a1[5];
  }
  v15 = a1[4];
  a1[5] = v9 + 1;
  v16 = v9 >> 6;
  v17 = 1LL << v9;
  if ( (v11 & 1) != 0 )
    v18 = *(_QWORD *)(v15 + 8 * v16) | v17;
  else
    v18 = *(_QWORD *)(v15 + 8 * v16) & ~v17;
  *(_QWORD *)(v15 + 8 * v16) = v18;
  LOBYTE(v30) = 2;
  v32 = nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(
          (__int64)a1,
          (char *)&v30,
          1);
  v33[0] = v19;
  v20 = (__int64 *)a1[2];
  if ( v20 == (__int64 *)a1[3] )
  {
    std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> * const&>(
      v4,
      v33);
    v21 = a1[2];
    if ( a2 == (std::__ndk1 *)-1LL )
      return 1LL;
  }
  else
  {
    *v20 = v19;
    v21 = a1[2] + 8LL;
    a1[2] = v21;
    if ( a2 == (std::__ndk1 *)-1LL )
      return 1LL;
  }
  v22 = *(char **)(v21 - 8);
  if ( v22 )
  {
    v23 = *v22;
    if ( v23 > 2 )
    {
      if ( (unsigned __int64)a2 > 1 )
        goto LABEL_25;
    }
    else if ( qword_2E048[v23] < (unsigned __int64)a2 )
    {
LABEL_25:
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(v29, a2, v26);
      v27 = std::string::insert(v29, 0LL, "excessive array size: ", 0x16uLL);
      v28 = *(_OWORD *)v27;
      v31 = (void *)v27[2];
      v30 = v28;
      v27[1] = 0LL;
      v27[2] = 0LL;
      *v27 = 0LL;
      nlohmann::detail::out_of_range::create((unsigned __int8 *)&v30, 0x198u, (__int64)exception);
      __cxa_throw(
        exception,
        (struct type_info *)&`typeinfo for'nlohmann::detail::out_of_range,
        (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
    }
  }
  return 1LL;
}
// 210C8: variable 'v19' is possibly undefined
// 21194: variable 'v26' is possibly undefined
// 2E048: using guessed type _QWORD qword_2E048[3];
// 44140: using guessed type void *`typeinfo for'nlohmann::detail::out_of_range;

//----- (0000000000021254) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::end_array(
        __int64 a1)
{
  __int64 v2; // x8
  __int64 v3; // x9
  __int64 v4; // x9
  __int64 v5; // x0
  __int64 v6; // x9
  __int64 v7; // x8
  __int64 v8; // x8
  char v9; // w1
  void **v10; // x10
  __int64 v11; // x8
  __int64 v12; // x10
  __int64 v13; // x9
  __int64 v14; // x8
  __int64 v15; // x19
  __int64 v16; // x21
  char v17; // t1
  signed __int64 v19; // [xsp+0h] [xbp-40h] BYREF
  void **v20; // [xsp+8h] [xbp-38h] BYREF
  char v21[4]; // [xsp+10h] [xbp-30h] BYREF
  int v22; // [xsp+14h] [xbp-2Ch] BYREF
  __int64 v23; // [xsp+18h] [xbp-28h]

  v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *(_QWORD *)(a1 + 16);
  v3 = v2 - 8;
  if ( *(_QWORD *)(v2 - 8) )
  {
    v4 = *(_QWORD *)(a1 + 8);
    v21[0] = 3;
    v22 = ((unsigned __int64)(v2 - v4) >> 3) - 1;
    v5 = *(_QWORD *)(a1 + 128);
    if ( !v5 )
      sub_13744();
    if ( ((*(__int64 (__fastcall **)(__int64, int *, char *))(*(_QWORD *)v5 + 48LL))(v5, &v22, v21) & 1) != 0 )
    {
      v6 = *(_QWORD *)(a1 + 40) - 1LL;
      *(_QWORD *)(a1 + 16) -= 8LL;
      *(_QWORD *)(a1 + 40) = v6;
    }
    else
    {
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(
        &v19,
        (unsigned __int8 *)(a1 + 152));
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL);
      v9 = *(_BYTE *)v8;
      *(_BYTE *)v8 = v19;
      LOBYTE(v19) = v9;
      v10 = *(void ***)(v8 + 8);
      *(_QWORD *)(v8 + 8) = v20;
      v20 = v10;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v20,
        v9);
      v12 = *(_QWORD *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 40) - 1LL;
      *(_QWORD *)(a1 + 16) = v11 - 8;
      *(_QWORD *)(a1 + 40) = v13;
      if ( v12 != v11 - 8 )
      {
        v14 = *(_QWORD *)(v11 - 16);
        if ( *(_BYTE *)v14 == 2 )
        {
          v15 = *(_QWORD *)(v14 + 8);
          v16 = *(_QWORD *)(v15 + 8);
          v17 = *(_BYTE *)(v16 - 16);
          v16 -= 16LL;
          nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
            (void ***)(v16 + 8),
            v17);
          *(_QWORD *)(v15 + 8) = v16;
        }
      }
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 16) = v3;
    *(_QWORD *)(a1 + 40) = v7 - 1;
  }
  return 1LL;
}
// 21254: using guessed type char var_30[4];

//----- (00000000000213AC) ----------------------------------------------------
void __usercall nlohmann::detail::out_of_range::create(unsigned int a1@<W0>, unsigned __int8 *a2@<X1>, __int64 a3@<X8>)
{
  unsigned __int64 v6; // x8
  void *v7; // x1
  size_t v8; // x2
  __int64 *v9; // x0
  __int128 v10; // q0
  const char *v11; // x1
  char v12; // w8
  unsigned __int8 v13; // [xsp+0h] [xbp-70h] BYREF
  _BYTE v14[15]; // [xsp+1h] [xbp-6Fh]
  void *v15; // [xsp+10h] [xbp-60h]
  __int64 v16[3]; // [xsp+18h] [xbp-58h] BYREF
  __int128 v17; // [xsp+30h] [xbp-40h] BYREF
  void *v18; // [xsp+40h] [xbp-30h]
  __int64 v19; // [xsp+48h] [xbp-28h]

  v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  *(_QWORD *)&v14[7] = 0x65676E6100LL;
  v13 = 24;
  v15 = 0LL;
  *(_QWORD *)v14 = *(_QWORD *)"out_of_range";
  nlohmann::detail::exception::name(&v13, a1, (__int64)v16);
  v6 = *a2;
  if ( (v6 & 1) != 0 )
    v7 = (void *)*((_QWORD *)a2 + 2);
  else
    v7 = a2 + 1;
  if ( (v6 & 1) != 0 )
    v8 = *((_QWORD *)a2 + 1);
  else
    v8 = v6 >> 1;
  v9 = std::string::append(v16, v7, v8);
  v10 = *(_OWORD *)v9;
  v18 = (void *)v9[2];
  v17 = v10;
  v9[1] = 0LL;
  v9[2] = 0LL;
  *v9 = 0LL;
  if ( (v16[0] & 1) != 0 )
    operator delete((void *)v16[2]);
  if ( (v13 & 1) != 0 )
    operator delete(v15);
  if ( (v17 & 1) != 0 )
    v11 = (const char *)v18;
  else
    v11 = (char *)&v17 + 1;
  *(_DWORD *)(a3 + 8) = a1;
  *(_QWORD *)a3 = off_44088;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), v11);
  v12 = v17;
  *(_QWORD *)a3 = off_441E8;
  if ( (v12 & 1) != 0 )
    operator delete(v18);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);
// 441E8: using guessed type void (__fastcall *off_441E8[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000021544) ----------------------------------------------------
void __fastcall nlohmann::detail::exception::~exception(nlohmann::detail::exception *this)
{
  *(_QWORD *)this = off_44088;
  std::runtime_error::~runtime_error((nlohmann::detail::exception *)((char *)this + 16));
  std::exception::~exception(this);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000021578) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(
        __int64 a1,
        char *a2,
        char a3)
{
  __int64 v5; // x20
  __int64 v6; // x0
  __int64 v7; // x8
  __int64 v8; // x9
  __int64 v9; // x0
  __int64 v10; // x8
  __int64 v11; // x8
  __int64 v12; // x0
  unsigned __int64 v13; // x8
  char v14; // w8
  void **v15; // x9
  char *v16; // x9
  char v17; // w1
  void **v18; // x10
  unsigned __int64 v19; // x8
  __int64 v20; // x9
  char v21; // w8
  void **v22; // x9
  __int64 v23; // x9
  char v24; // w1
  void **v25; // x10
  __int64 v26; // x0
  void **v28; // [xsp+8h] [xbp-58h] BYREF
  char v29; // [xsp+10h] [xbp-50h]
  void **v30; // [xsp+18h] [xbp-48h] BYREF
  char v31[8]; // [xsp+20h] [xbp-40h] BYREF
  void **v32; // [xsp+28h] [xbp-38h] BYREF
  char v33[4]; // [xsp+30h] [xbp-30h] BYREF
  int v34; // [xsp+34h] [xbp-2Ch] BYREF
  __int64 v35; // [xsp+38h] [xbp-28h]

  v35 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( ((1LL << (*(_BYTE *)(a1 + 40) - 1)) & *(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                       + (((unsigned __int64)(*(_QWORD *)(a1 + 40) - 1LL) >> 3) & 0x1FFFFFFFFFFFFFF8LL))) == 0 )
    return 0LL;
  v31[0] = *a2;
  switch ( v31[0] )
  {
    case 1:
      v6 = operator new(0x18uLL);
      *(_QWORD *)(v6 + 8) = 0LL;
      *(_QWORD *)(v6 + 16) = 0LL;
      *(_QWORD *)v6 = v6 + 8;
      v32 = (void **)v6;
      if ( (a3 & 1) != 0 )
        goto LABEL_9;
      goto LABEL_7;
    case 2:
      v26 = operator new(0x18uLL);
      *(_QWORD *)(v26 + 8) = 0LL;
      *(_QWORD *)(v26 + 16) = 0LL;
      *(_QWORD *)v26 = 0LL;
      v32 = (void **)v26;
      if ( (a3 & 1) == 0 )
        goto LABEL_7;
      goto LABEL_9;
    case 3:
      v32 = (void **)nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>("");
      if ( (a3 & 1) == 0 )
        goto LABEL_7;
      goto LABEL_9;
    case 4:
      LOBYTE(v32) = 0;
      if ( (a3 & 1) == 0 )
        goto LABEL_7;
      goto LABEL_9;
    default:
      v32 = 0LL;
      if ( (a3 & 1) != 0 )
        goto LABEL_9;
LABEL_7:
      v7 = *(_QWORD *)(a1 + 16);
      v8 = *(_QWORD *)(a1 + 8);
      v33[0] = 5;
      v34 = (unsigned __int64)(v7 - v8) >> 3;
      v9 = *(_QWORD *)(a1 + 128);
      if ( !v9 )
        sub_13744();
      if ( ((*(__int64 (__fastcall **)(__int64, int *, char *, char *))(*(_QWORD *)v9 + 48LL))(v9, &v34, v33, v31) & 1) == 0 )
        goto LABEL_17;
LABEL_9:
      v10 = *(_QWORD *)(a1 + 16);
      if ( *(_QWORD *)(a1 + 8) == v10 )
      {
        v14 = v31[0];
        v15 = v32;
        v31[0] = 0;
        v32 = 0LL;
        v29 = v14;
        v30 = v15;
        v16 = *(char **)a1;
        v17 = **(_BYTE **)a1;
        *v16 = v14;
        v29 = v17;
        v18 = (void **)*((_QWORD *)v16 + 1);
        *((_QWORD *)v16 + 1) = v30;
        v30 = v18;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          &v30,
          v17);
        goto LABEL_25;
      }
      v11 = *(_QWORD *)(v10 - 8);
      if ( !v11 )
        goto LABEL_17;
      if ( *(_BYTE *)v11 == 2 )
      {
        v12 = *(_QWORD *)(v11 + 8);
        v13 = *(_QWORD *)(v12 + 8);
        if ( v13 >= *(_QWORD *)(v12 + 16) )
        {
          std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
            (void **)v12,
            (__int64)v31);
        }
        else
        {
          *(_BYTE *)v13 = v31[0];
          *(_QWORD *)(v13 + 8) = v32;
          v31[0] = 0;
          v32 = 0LL;
          *(_QWORD *)(v12 + 8) += 16LL;
        }
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 64) - 1LL;
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
        *(_QWORD *)(a1 + 64) = v19;
        if ( ((1LL << v19) & v20) == 0 )
        {
LABEL_17:
          v5 = 0LL;
          goto LABEL_26;
        }
        v21 = v31[0];
        v22 = v32;
        v31[0] = 0;
        v32 = 0LL;
        v28 = v22;
        v23 = *(_QWORD *)(a1 + 80);
        v24 = *(_BYTE *)v23;
        *(_BYTE *)v23 = v21;
        v25 = *(void ***)(v23 + 8);
        *(_QWORD *)(v23 + 8) = v28;
        v28 = v25;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          &v28,
          v24);
      }
LABEL_25:
      v5 = 1LL;
LABEL_26:
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v32,
        v31[0]);
      return v5;
  }
}
// 21578: using guessed type char var_40[8];
// 21578: using guessed type char var_30[4];

//----- (0000000000021850) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
        void **a1,
        __int64 a2)
{
  __int64 v3; // x21
  __int64 v5; // x9
  unsigned __int64 v6; // x9
  unsigned __int64 v7; // x22
  __int64 v8; // x0
  _QWORD *v9; // x12
  void *v10; // x9
  void ***v11; // x10
  void ***v12; // x20
  void *v13; // x8
  unsigned __int64 v14; // x11
  _QWORD *v15; // x12
  char v16; // t1
  void ***v17; // x21
  char v18; // t1

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  if ( (unsigned __int64)(v3 + 1) >> 60 )
    std::__vector_base_common<true>::__throw_length_error();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if ( (unsigned __int64)(v5 >> 4) > 0x7FFFFFFFFFFFFFELL )
  {
    v7 = 0xFFFFFFFFFFFFFFFLL;
LABEL_10:
    v8 = operator new(16 * v7);
    goto LABEL_11;
  }
  v6 = v5 >> 3;
  if ( v6 >= v3 + 1 )
    v7 = v6;
  else
    v7 = v3 + 1;
  if ( v7 )
  {
    if ( v7 >> 60 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v8 = 0LL;
LABEL_11:
  v9 = (_QWORD *)(v8 + 16 * v3);
  v10 = v9 + 2;
  *(_BYTE *)v9 = *(_BYTE *)a2;
  v9[1] = *(_QWORD *)(a2 + 8);
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0LL;
  v12 = (void ***)*a1;
  v11 = (void ***)a1[1];
  v13 = (void *)(v8 + 16 * v7);
  if ( v11 == *a1 )
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v13;
    if ( v12 )
LABEL_17:
      operator delete(v12);
  }
  else
  {
    v14 = v3 + ~((unsigned __int64)((char *)(v11 - 2) - (char *)v12) >> 4);
    v15 = v9 - 1;
    do
    {
      v16 = *((_BYTE *)v11 - 16);
      v11 -= 2;
      *((_BYTE *)v15 - 8) = v16;
      *v15 = v11[1];
      v15 -= 2;
      *(_BYTE *)v11 = 0;
      v11[1] = 0LL;
    }
    while ( v12 != v11 );
    v12 = (void ***)*a1;
    v17 = (void ***)a1[1];
    *a1 = (void *)(v8 + 16 * v14);
    a1[1] = v10;
    a1[2] = v13;
    while ( v12 != v17 )
    {
      v18 = *((_BYTE *)v17 - 16);
      v17 -= 2;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        v17 + 1,
        v18);
    }
    if ( v12 )
      goto LABEL_17;
  }
}

//----- (000000000002199C) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> * const&>(
        __int64 a1,
        _QWORD *a2)
{
  void *v2; // x20
  signed __int64 v4; // x21
  unsigned __int64 v5; // x8
  __int64 v7; // x9
  unsigned __int64 v8; // x9
  unsigned __int64 v9; // x25
  char *v10; // x23
  char *v11; // x24
  _QWORD *v12; // x24

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v5 = (v4 >> 3) + 1;
  if ( v5 >> 61 )
    std::__vector_base_common<true>::__throw_length_error();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if ( (unsigned __int64)(v7 >> 3) > 0xFFFFFFFFFFFFFFELL )
  {
    v9 = 0x1FFFFFFFFFFFFFFFLL;
LABEL_10:
    v10 = (char *)operator new(8 * v9);
    goto LABEL_11;
  }
  v8 = v7 >> 2;
  if ( v8 >= v5 )
    v9 = v8;
  else
    v9 = (v4 >> 3) + 1;
  if ( v9 )
  {
    if ( v9 >> 61 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v10 = 0LL;
LABEL_11:
  v11 = &v10[8 * (v4 >> 3)];
  *(_QWORD *)v11 = *a2;
  v12 = v11 + 8;
  if ( v4 >= 1 )
    memcpy(v10, v2, v4);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = &v10[8 * v9];
  if ( v2 )
    operator delete(v2);
}

//----- (0000000000021A94) ----------------------------------------------------
signed __int64 *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(
        signed __int64 *result,
        unsigned __int8 *a2)
{
  int v2; // w9
  signed __int64 v3; // x19
  signed __int64 *v4; // x20
  unsigned __int8 **v5; // x21

  v2 = *a2;
  result[1] = 0LL;
  *(_BYTE *)result = v2;
  v3 = (signed __int64)result;
  switch ( v2 )
  {
    case 1:
      result = (signed __int64 *)nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(*((_QWORD **)a2 + 1));
      v4 = result;
      goto LABEL_7;
    case 2:
      v5 = (unsigned __int8 **)*((_QWORD *)a2 + 1);
      v4 = (signed __int64 *)operator new(0x18uLL);
      result = (signed __int64 *)std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::vector(
                                   v4,
                                   v5);
      goto LABEL_7;
    case 3:
      result = (signed __int64 *)nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(*((__int128 **)a2 + 1));
      v4 = result;
      goto LABEL_7;
    case 4:
      v4 = (signed __int64 *)a2[8];
      goto LABEL_7;
    case 5:
    case 6:
    case 7:
      v4 = (signed __int64 *)*((_QWORD *)a2 + 1);
LABEL_7:
      *(_QWORD *)(v3 + 8) = v4;
      break;
    default:
      return result;
  }
  return result;
}

//----- (0000000000021B48) ----------------------------------------------------
unsigned __int8 *__fastcall nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator->(
        unsigned __int8 **a1)
{
  unsigned __int8 *result; // x0
  int v3; // w10
  void *exception; // x19
  _DWORD v5[6]; // [xsp+0h] [xbp-40h] BYREF
  __int64 v6; // [xsp+18h] [xbp-28h]

  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  result = *a1;
  v3 = *result;
  if ( v3 == 2 )
    return a1[2];
  if ( v3 == 1 )
    return a1[1] + 56;
  if ( a1[3] )
  {
    exception = __cxa_allocate_exception(0x20uLL);
    BYTE1(v5[4]) = 0;
    HIWORD(v5[4]) = 0;
    v5[5] = 0;
    strcpy((char *)v5, " cannot get valu");
    nlohmann::detail::invalid_iterator::create((unsigned __int8 *)v5, 0xD6u, (__int64)exception);
    __cxa_throw(
      exception,
      (struct type_info *)&`typeinfo for'nlohmann::detail::invalid_iterator,
      (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
  }
  return result;
}
// 44158: using guessed type void *`typeinfo for'nlohmann::detail::invalid_iterator;

//----- (0000000000021C5C) ----------------------------------------------------
void __usercall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::erase<nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,0>(
        unsigned __int8 *a1@<X0>,
        unsigned __int8 **a2@<X1>,
        unsigned __int8 **a3@<X8>)
{
  int v4; // w8
  _QWORD *v6; // x0
  __int64 v7; // x22
  unsigned __int8 *v8; // x8
  unsigned __int8 *v9; // x23
  unsigned __int8 *v10; // x20
  unsigned __int8 *v11; // x25
  unsigned __int8 *v12; // x24
  unsigned __int8 *v13; // x8
  unsigned __int8 v14; // t1
  __int64 v15; // x10
  char v16; // w1
  __int64 v17; // x9
  void **v18; // x0
  char v19; // t1
  void *exception; // x19
  void *v21; // x0
  unsigned __int64 v22; // x8
  void *v23; // x19
  const char *v24; // x20
  void *v25; // x19
  size_t v26; // x0
  size_t v27; // x21
  char *v28; // x22
  unsigned __int64 v29; // x23
  __int64 *v30; // x0
  __int128 v31; // q0
  unsigned __int64 v32; // [xsp+8h] [xbp-78h] BYREF
  size_t v33; // [xsp+10h] [xbp-70h]
  void *v34; // [xsp+18h] [xbp-68h]
  char v35[24]; // [xsp+20h] [xbp-60h] BYREF
  __int64 v36; // [xsp+38h] [xbp-48h]

  v36 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( *a2 != a1 )
  {
    exception = __cxa_allocate_exception(0x20uLL);
    *(_OWORD *)v35 = xmmword_2CD80;
    *(_QWORD *)&v35[16] = operator new(0x30uLL);
    strcpy(*(char **)&v35[16], "iterator does not fit current value");
    nlohmann::detail::invalid_iterator::create((unsigned __int8 *)v35, 0xCAu, (__int64)exception);
    __cxa_throw(
      exception,
      (struct type_info *)&`typeinfo for'nlohmann::detail::invalid_iterator,
      (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
  }
  *a3 = a1;
  a3[1] = 0LL;
  a3[2] = 0LL;
  a3[3] = (unsigned __int8 *)0x8000000000000000LL;
  v4 = *a1;
  if ( v4 == 2 )
  {
    v7 = *((_QWORD *)a1 + 1);
    v8 = *(unsigned __int8 **)(v7 + 8);
    a3[2] = v8;
    v9 = a2[2];
    v10 = v9 + 16;
    if ( v9 + 16 == v8 )
    {
      v12 = a2[2];
    }
    else
    {
      v11 = v8 - 16;
      v12 = a2[2];
      do
      {
        v13 = v12;
        v14 = v12[16];
        v12 += 16;
        v15 = *((_QWORD *)v13 + 3);
        *v12 = 0;
        v16 = *v13;
        *((_QWORD *)v13 + 3) = 0LL;
        *v13 = v14;
        v35[0] = v16;
        v17 = *((_QWORD *)v13 + 1);
        *((_QWORD *)v13 + 1) = v15;
        *(_QWORD *)&v35[8] = v17;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          (void ***)&v35[8],
          v16);
      }
      while ( v11 != v12 );
      v10 = *(unsigned __int8 **)(v7 + 8);
      if ( v10 == v12 )
        goto LABEL_19;
    }
    do
    {
      v19 = *(v10 - 16);
      v10 -= 16;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        (void ***)v10 + 1,
        v19);
    }
    while ( v12 != v10 );
LABEL_19:
    *(_QWORD *)(v7 + 8) = v12;
    a3[2] = v9;
    return;
  }
  if ( v4 == 1 )
  {
    v6 = (_QWORD *)*((_QWORD *)a1 + 1);
    a3[1] = (unsigned __int8 *)(v6 + 1);
    a3[1] = (unsigned __int8 *)std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::erase(
                                 v6,
                                 (__int64)a2[1]);
    return;
  }
  a3[3] = (_BYTE *)(&dword_0 + 1);
  if ( (unsigned int)(v4 - 3) > 4 )
  {
    v21 = __cxa_allocate_exception(0x20uLL);
    v22 = (char)*a1;
    v23 = v21;
    if ( v22 > 8 )
      v24 = "number";
    else
      v24 = off_44348[v22];
    v32 = 0LL;
    v33 = 0LL;
    v34 = 0LL;
    v26 = strlen(v24);
    if ( v26 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v27 = v26;
    if ( v26 >= 0x17 )
    {
      v29 = (v26 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v28 = (char *)operator new(v29);
      v33 = v27;
      v34 = v28;
      v32 = v29 | 1;
    }
    else
    {
      v28 = (char *)&v32 + 1;
      LOBYTE(v32) = 2 * v26;
      if ( !v26 )
      {
LABEL_32:
        v28[v27] = 0;
        v30 = std::string::insert((__int64 *)&v32, 0LL, "cannot use erase() with ", 0x18uLL);
        v31 = *(_OWORD *)v30;
        *(_QWORD *)&v35[16] = v30[2];
        *(_OWORD *)v35 = v31;
        v30[1] = 0LL;
        v30[2] = 0LL;
        *v30 = 0LL;
        nlohmann::detail::type_error::create((unsigned __int8 *)v35, 0x133u, (__int64)v23);
        __cxa_throw(
          v23,
          (struct type_info *)&`typeinfo for'nlohmann::detail::type_error,
          (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
      }
    }
    memcpy(v28, v24, v27);
    goto LABEL_32;
  }
  if ( a2[3] )
  {
    v25 = __cxa_allocate_exception(0x20uLL);
    strcpy(v35, "*iterator out of range");
    v35[23] = 0;
    nlohmann::detail::invalid_iterator::create((unsigned __int8 *)v35, 0xCDu, (__int64)v25);
    __cxa_throw(
      v25,
      (struct type_info *)&`typeinfo for'nlohmann::detail::invalid_iterator,
      (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
  }
  if ( v4 == 3 )
  {
    v18 = (void **)*((_QWORD *)a1 + 1);
    if ( (*(_BYTE *)v18 & 1) != 0 )
    {
      operator delete(v18[2]);
      v18 = (void **)*((_QWORD *)a1 + 1);
    }
    operator delete(v18);
    *((_QWORD *)a1 + 1) = 0LL;
  }
  *a1 = 0;
}
// 0: using guessed type int dword_0;
// 2CD80: using guessed type __int128 xmmword_2CD80;
// 44158: using guessed type void *`typeinfo for'nlohmann::detail::invalid_iterator;
// 44198: using guessed type void *`typeinfo for'nlohmann::detail::type_error;
// 44348: using guessed type char *off_44348[3];

//----- (0000000000022064) ----------------------------------------------------
_QWORD **__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::map<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(
        _QWORD *a1)
{
  _QWORD *v2; // x0
  __int64 *v3; // x21
  unsigned __int8 *v4; // x20
  unsigned __int8 *v5; // x22
  unsigned __int8 *v6; // t1
  _QWORD **v7; // x19
  unsigned __int8 *v8; // x8
  __int64 v9; // x8
  __int64 v10; // x9
  unsigned __int8 *v11; // t1

  v2 = (_QWORD *)operator new(0x18uLL);
  v2[1] = 0LL;
  v3 = v2 + 1;
  v2[2] = 0LL;
  *v2 = v2 + 1;
  v6 = (unsigned __int8 *)*a1;
  v4 = (unsigned __int8 *)(a1 + 1);
  v5 = v6;
  v7 = (_QWORD **)v2;
  while ( v5 != v4 )
  {
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(
      v7,
      v3,
      v5 + 32,
      (__int128 *)v5 + 2);
    v8 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    if ( v8 )
    {
      do
      {
        v5 = v8;
        v8 = *(unsigned __int8 **)v8;
      }
      while ( v8 );
    }
    else
    {
      v9 = (__int64)(v5 + 16);
      if ( **((unsigned __int8 ***)v5 + 2) == v5 )
      {
        v5 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
      }
      else
      {
        do
        {
          v10 = *(_QWORD *)v9;
          v11 = *(unsigned __int8 **)(*(_QWORD *)v9 + 16LL);
          v9 = *(_QWORD *)v9 + 16LL;
          v5 = v11;
        }
        while ( *(_QWORD *)v11 != v10 );
      }
    }
  }
  return v7;
}

//----- (0000000000022138) ----------------------------------------------------
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>> const&>(
        _QWORD **a1,
        __int64 *a2,
        unsigned __int8 *a3,
        __int128 *a4)
{
  __int64 *v6; // x0
  __int64 *v7; // x19
  __int64 *v8; // x21
  __int64 *v9; // x0
  __int128 v10; // q0
  size_t v11; // x24
  const void *v12; // x25
  void *v13; // x26
  __int64 *v14; // x8
  _QWORD *v15; // x8
  __int64 *v16; // x1
  __int64 *v18; // [xsp+8h] [xbp-68h] BYREF
  __int64 *v19[2]; // [xsp+10h] [xbp-60h] BYREF

  v19[1] = *(__int64 **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v6 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
         a1,
         a2,
         v19,
         &v18,
         a3);
  v7 = (__int64 *)*v6;
  if ( *v6 )
    return v7;
  v8 = v6;
  v9 = (__int64 *)operator new(0x48uLL);
  v9[4] = 0LL;
  v9[5] = 0LL;
  v9[6] = 0LL;
  v7 = v9;
  if ( (*(_BYTE *)a4 & 1) != 0 )
  {
    v11 = *((_QWORD *)a4 + 1);
    if ( v11 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v12 = (const void *)*((_QWORD *)a4 + 2);
    if ( v11 >= 0x17 )
    {
      v13 = (void *)operator new((v11 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v7[5] = v11;
      v7[6] = (__int64)v13;
      v7[4] = (v11 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v13 = (char *)v9 + 33;
      *((_BYTE *)v9 + 32) = 2 * v11;
      if ( !v11 )
        goto LABEL_10;
    }
    memcpy(v13, v12, v11);
LABEL_10:
    *((_BYTE *)v13 + v11) = 0;
    goto LABEL_11;
  }
  v10 = *a4;
  v9[6] = *((_QWORD *)a4 + 2);
  *((_OWORD *)v9 + 2) = v10;
LABEL_11:
  nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(
    v7 + 7,
    (unsigned __int8 *)a4 + 24);
  v14 = v19[0];
  *v7 = 0LL;
  v7[1] = 0LL;
  v7[2] = (__int64)v14;
  *v8 = (__int64)v7;
  v15 = (_QWORD *)**a1;
  if ( v15 )
  {
    *a1 = v15;
    v16 = (__int64 *)*v8;
  }
  else
  {
    v16 = v7;
  }
  std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (_QWORD *)((char *)a1[2] + 1);
  return v7;
}

//----- (00000000000222D4) ----------------------------------------------------
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
        _QWORD *a1,
        __int64 *a2,
        __int64 **a3,
        __int64 **a4,
        unsigned __int8 *a5)
{
  unsigned __int64 v7; // x19
  unsigned __int64 v8; // x23
  size_t v9; // x22
  size_t v10; // x27
  size_t v11; // x24
  unsigned __int8 *v12; // x26
  char *v13; // x25
  int v14; // w0
  __int64 *v15; // x19
  __int64 *v16; // x23
  __int64 *v17; // x8
  int v18; // w0
  __int64 *v19; // x20
  __int64 *v20; // x8
  unsigned __int64 v21; // x9
  unsigned __int64 v22; // x10
  size_t v23; // x20
  size_t v24; // x22
  size_t v25; // x2
  const void *v26; // x0
  const void *v27; // x1
  int v28; // w0
  __int64 v29; // x0
  __int64 **v31; // x8
  __int64 *v32; // x8
  __int64 *v33; // x24
  __int64 v34; // x8
  __int64 v35; // x9
  __int64 *v36; // t1
  unsigned __int64 v37; // x9
  size_t v38; // x19
  size_t v39; // x2
  const void *v40; // x0
  const void *v41; // x1
  int v42; // w0
  __int64 *v43; // [xsp+0h] [xbp-70h]

  v43 = a1 + 1;
  if ( a1 + 1 == a2 )
    goto LABEL_22;
  v7 = *((unsigned __int8 *)a2 + 32);
  v8 = *a5;
  if ( (v7 & 1) != 0 )
    v9 = a2[5];
  else
    v9 = v7 >> 1;
  if ( (v8 & 1) != 0 )
    v10 = *((_QWORD *)a5 + 1);
  else
    v10 = v8 >> 1;
  if ( v9 >= v10 )
    v11 = v10;
  else
    v11 = v9;
  if ( v11 )
  {
    v12 = (v8 & 1) != 0 ? (unsigned __int8 *)*((_QWORD *)a5 + 2) : a5 + 1;
    v13 = (v7 & 1) != 0 ? (char *)a2[6] : (char *)a2 + 33;
    v14 = memcmp(v12, v13, v11);
    if ( v14 )
    {
      if ( (v14 & 0x80000000) == 0 )
        goto LABEL_34;
LABEL_22:
      v15 = (__int64 *)*a2;
      v16 = a2;
      if ( (__int64 *)*a1 != a2 )
      {
        if ( v15 )
        {
          v17 = (__int64 *)*a2;
          do
          {
            v16 = v17;
            v17 = (__int64 *)v17[1];
          }
          while ( v17 );
        }
        else
        {
          v16 = a2;
          do
          {
            v20 = v16;
            v16 = (__int64 *)v16[2];
          }
          while ( (__int64 *)*v16 == v20 );
        }
        v21 = *((unsigned __int8 *)v16 + 32);
        v22 = *a5;
        if ( (v22 & 1) != 0 )
          v23 = *((_QWORD *)a5 + 1);
        else
          v23 = v22 >> 1;
        if ( (v21 & 1) != 0 )
          v24 = v16[5];
        else
          v24 = v21 >> 1;
        if ( v23 >= v24 )
          v25 = v24;
        else
          v25 = v23;
        if ( v25
          && ((v21 & 1) == 0 ? (v26 = (char *)v16 + 33) : (v26 = (const void *)v16[6]),
              (v22 & 1) == 0 ? (v27 = a5 + 1) : (v27 = (const void *)*((_QWORD *)a5 + 2)),
              (v28 = memcmp(v26, v27, v25)) != 0) )
        {
          if ( (v28 & 0x80000000) == 0 )
          {
LABEL_57:
            v29 = (__int64)a1;
            return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
                     v29,
                     a3,
                     a5);
          }
        }
        else if ( v24 >= v23 )
        {
          goto LABEL_57;
        }
      }
      if ( v15 )
      {
        v19 = v16 + 1;
        *a3 = v16;
        return v19;
      }
      v31 = a3;
      v19 = a2;
      goto LABEL_63;
    }
  }
  if ( v10 < v9 )
    goto LABEL_22;
  if ( !v11 )
    goto LABEL_64;
  if ( (v7 & 1) != 0 )
    v13 = (char *)a2[6];
  else
    v13 = (char *)a2 + 33;
  if ( (v8 & 1) != 0 )
    v12 = (unsigned __int8 *)*((_QWORD *)a5 + 2);
  else
    v12 = a5 + 1;
LABEL_34:
  v18 = memcmp(v13, v12, v11);
  if ( !v18 )
  {
LABEL_64:
    if ( v9 >= v10 )
      goto LABEL_36;
    goto LABEL_65;
  }
  if ( v18 < 0 )
  {
LABEL_65:
    v19 = a2 + 1;
    v32 = (__int64 *)a2[1];
    if ( v32 )
    {
      do
      {
        v33 = v32;
        v32 = (__int64 *)*v32;
      }
      while ( v32 );
    }
    else
    {
      v34 = (__int64)(a2 + 2);
      v33 = (__int64 *)a2[2];
      if ( (__int64 *)*v33 != a2 )
      {
        do
        {
          v35 = *(_QWORD *)v34;
          v36 = *(__int64 **)(*(_QWORD *)v34 + 16LL);
          v34 = *(_QWORD *)v34 + 16LL;
          v33 = v36;
        }
        while ( *v36 != v35 );
      }
    }
    if ( v33 != v43 )
    {
      v37 = *((unsigned __int8 *)v33 + 32);
      if ( (v37 & 1) != 0 )
        v38 = v33[5];
      else
        v38 = v37 >> 1;
      if ( v38 >= v10 )
        v39 = v10;
      else
        v39 = v38;
      if ( v39
        && ((v8 & 1) == 0 ? (v40 = a5 + 1) : (v40 = (const void *)*((_QWORD *)a5 + 2)),
            (v37 & 1) == 0 ? (v41 = (char *)v33 + 33) : (v41 = (const void *)v33[6]),
            (v42 = memcmp(v40, v41, v39)) != 0) )
      {
        if ( (v42 & 0x80000000) == 0 )
        {
LABEL_86:
          v29 = (__int64)a1;
          return std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
                   v29,
                   a3,
                   a5);
        }
      }
      else if ( v10 >= v38 )
      {
        goto LABEL_86;
      }
    }
    if ( a2[1] )
    {
      v19 = v33;
      *a3 = v33;
      return v19;
    }
    v31 = a3;
LABEL_63:
    *v31 = a2;
    return v19;
  }
LABEL_36:
  v19 = (__int64 *)a4;
  *a3 = a2;
  *a4 = a2;
  return v19;
}

//----- (00000000000225C0) ----------------------------------------------------
__int64 *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
        __int64 a1,
        _QWORD *a2,
        unsigned __int8 *a3)
{
  __int64 *v3; // x20
  __int64 *v4; // x24
  unsigned __int64 v6; // x8
  size_t v7; // x25
  const void *v8; // x21
  unsigned __int64 v9; // x28
  size_t v10; // x26
  size_t v11; // x22
  char *v12; // x23
  int v13; // w0
  __int64 *v14; // x8
  int v15; // w0

  v3 = (__int64 *)(a1 + 8);
  v4 = *(__int64 **)(a1 + 8);
  if ( v4 )
  {
    v6 = *a3;
    v3 = (__int64 *)(a1 + 8);
    if ( (v6 & 1) != 0 )
      v7 = *((_QWORD *)a3 + 1);
    else
      v7 = v6 >> 1;
    if ( (v6 & 1) != 0 )
      v8 = (const void *)*((_QWORD *)a3 + 2);
    else
      v8 = a3 + 1;
    while ( 1 )
    {
      v9 = *((unsigned __int8 *)v4 + 32);
      if ( (v9 & 1) != 0 )
        v10 = v4[5];
      else
        v10 = v9 >> 1;
      if ( v10 >= v7 )
        v11 = v7;
      else
        v11 = v10;
      if ( v11 && ((v9 & 1) == 0 ? (v12 = (char *)v4 + 33) : (v12 = (char *)v4[6]), (v13 = memcmp(v8, v12, v11)) != 0) )
      {
        if ( (v13 & 0x80000000) == 0 )
          goto LABEL_29;
      }
      else if ( v7 >= v10 )
      {
        if ( !v11 )
          goto LABEL_32;
        v12 = (v9 & 1) != 0 ? (char *)v4[6] : (char *)v4 + 33;
LABEL_29:
        v15 = memcmp(v12, v8, v11);
        if ( v15 )
        {
          if ( (v15 & 0x80000000) == 0 )
            goto LABEL_34;
        }
        else
        {
LABEL_32:
          if ( v10 >= v7 )
            goto LABEL_34;
        }
        v3 = v4 + 1;
        v14 = (__int64 *)v4[1];
        if ( !v14 )
        {
LABEL_34:
          *a2 = v4;
          return v3;
        }
        goto LABEL_8;
      }
      v14 = (__int64 *)*v4;
      if ( !*v4 )
      {
        *a2 = v4;
        return v4;
      }
      v3 = v4;
LABEL_8:
      v4 = v14;
    }
  }
  *a2 = v3;
  return v3;
}

//----- (00000000000226EC) ----------------------------------------------------
signed __int64 __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::vector(
        signed __int64 *a1,
        unsigned __int8 **a2)
{
  unsigned __int8 *v2; // x9
  signed __int64 result; // x0
  signed __int64 v5; // x21
  unsigned __int8 *i; // x20
  unsigned __int8 *v8; // x21

  a1[1] = 0LL;
  a1[2] = 0LL;
  *a1 = 0LL;
  v2 = a2[1];
  result = v2 - *a2;
  if ( v2 != *a2 )
  {
    v5 = result >> 4;
    if ( (unsigned __int64)(result >> 4) >> 60 )
      std::__vector_base_common<true>::__throw_length_error();
    result = operator new(result);
    *a1 = result;
    a1[1] = result;
    a1[2] = result + 16 * v5;
    v8 = *a2;
    for ( i = a2[1]; i != v8; a1[1] = result )
    {
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::basic_json(
        (signed __int64 *)result,
        v8);
      v8 += 16;
      result = a1[1] + 16;
    }
  }
  return result;
}

//----- (00000000000227C0) ----------------------------------------------------
size_t *__fastcall nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(
        __int128 *a1)
{
  size_t *v2; // x0
  size_t *v3; // x19
  __int128 v4; // q0
  size_t v5; // x20
  const void *v6; // x21
  void *v7; // x22

  v2 = (size_t *)operator new(0x18uLL);
  v2[1] = 0LL;
  v2[2] = 0LL;
  *v2 = 0LL;
  v3 = v2;
  if ( (*(_BYTE *)a1 & 1) != 0 )
  {
    v5 = *((_QWORD *)a1 + 1);
    if ( v5 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v6 = (const void *)*((_QWORD *)a1 + 2);
    if ( v5 >= 0x17 )
    {
      v7 = (void *)operator new((v5 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      v3[1] = v5;
      v3[2] = (size_t)v7;
      *v3 = (v5 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      *(_BYTE *)v2 = 2 * v5;
      v7 = (char *)v2 + 1;
      if ( !v5 )
        goto LABEL_9;
    }
    memcpy(v7, v6, v5);
LABEL_9:
    *((_BYTE *)v7 + v5) = 0;
    return v3;
  }
  v4 = *a1;
  v2[2] = *((_QWORD *)a1 + 2);
  *(_OWORD *)v2 = v4;
  return v3;
}

//----- (000000000002289C) ----------------------------------------------------
bool __fastcall nlohmann::detail::iter_impl<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::operator==(
        unsigned __int8 **a1,
        unsigned __int8 **a2)
{
  int v2; // w9
  unsigned __int8 *v3; // x9
  unsigned __int8 *v4; // x10
  void *exception; // x19
  __int128 v7; // [xsp+0h] [xbp-40h] BYREF
  void *v8; // [xsp+10h] [xbp-30h]
  __int64 v9; // [xsp+18h] [xbp-28h]

  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( *a1 != *a2 )
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v8 = (void *)operator new(0x40uLL);
    v7 = xmmword_2CD90;
    strcpy((char *)v8, "cannot compare iterators of different containers");
    nlohmann::detail::invalid_iterator::create((unsigned __int8 *)&v7, 0xD4u, (__int64)exception);
    __cxa_throw(
      exception,
      (struct type_info *)&`typeinfo for'nlohmann::detail::invalid_iterator,
      (void (__fastcall *)(void *))nlohmann::detail::exception::~exception);
  }
  v2 = **a1;
  if ( v2 == 2 )
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if ( v2 == 1 )
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}
// 2CD90: using guessed type __int128 xmmword_2CD90;
// 44158: using guessed type void *`typeinfo for'nlohmann::detail::invalid_iterator;

//----- (00000000000229E4) ----------------------------------------------------
void __usercall nlohmann::detail::invalid_iterator::create(
        unsigned int a1@<W0>,
        unsigned __int8 *a2@<X1>,
        __int64 a3@<X8>)
{
  unsigned __int64 v6; // x8
  void *v7; // x1
  size_t v8; // x2
  __int64 *v9; // x0
  __int128 v10; // q0
  const char *v11; // x1
  char v12; // w8
  void *v13[3]; // [xsp+0h] [xbp-70h] BYREF
  __int64 v14[3]; // [xsp+18h] [xbp-58h] BYREF
  __int128 v15; // [xsp+30h] [xbp-40h] BYREF
  void *v16; // [xsp+40h] [xbp-30h]
  __int64 v17; // [xsp+48h] [xbp-28h]

  v17 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  BYTE1(v13[2]) = 0;
  WORD1(v13[2]) = 0;
  HIDWORD(v13[2]) = 0;
  strcpy((char *)v13, " invalid_iterato");
  nlohmann::detail::exception::name((unsigned __int8 *)v13, a1, (__int64)v14);
  v6 = *a2;
  if ( (v6 & 1) != 0 )
    v7 = (void *)*((_QWORD *)a2 + 2);
  else
    v7 = a2 + 1;
  if ( (v6 & 1) != 0 )
    v8 = *((_QWORD *)a2 + 1);
  else
    v8 = v6 >> 1;
  v9 = std::string::append(v14, v7, v8);
  v10 = *(_OWORD *)v9;
  v16 = (void *)v9[2];
  v15 = v10;
  v9[1] = 0LL;
  v9[2] = 0LL;
  *v9 = 0LL;
  if ( (v14[0] & 1) != 0 )
    operator delete((void *)v14[2]);
  if ( ((__int64)v13[0] & 1) != 0 )
    operator delete(v13[2]);
  if ( (v15 & 1) != 0 )
    v11 = (const char *)v16;
  else
    v11 = (char *)&v15 + 1;
  *(_DWORD *)(a3 + 8) = a1;
  *(_QWORD *)a3 = off_44088;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), v11);
  v12 = v15;
  *(_QWORD *)a3 = off_44180;
  if ( (v12 & 1) != 0 )
    operator delete(v16);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);
// 44180: using guessed type void (__fastcall *off_44180[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000022B70) ----------------------------------------------------
void __fastcall nlohmann::detail::invalid_iterator::~invalid_iterator(nlohmann::detail::invalid_iterator *this)
{
  *(_QWORD *)this = off_44088;
  std::runtime_error::~runtime_error((nlohmann::detail::invalid_iterator *)((char *)this + 16));
  std::exception::~exception(this);
  operator delete(this);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000022BAC) ----------------------------------------------------
void __usercall nlohmann::detail::type_error::create(unsigned int a1@<W0>, unsigned __int8 *a2@<X1>, __int64 a3@<X8>)
{
  unsigned __int64 v6; // x8
  void *v7; // x1
  size_t v8; // x2
  __int64 *v9; // x0
  __int128 v10; // q0
  const char *v11; // x1
  char v12; // w8
  unsigned __int8 v13; // [xsp+0h] [xbp-70h] BYREF
  _BYTE v14[15]; // [xsp+1h] [xbp-6Fh]
  void *v15; // [xsp+10h] [xbp-60h]
  __int64 v16[3]; // [xsp+18h] [xbp-58h] BYREF
  __int128 v17; // [xsp+30h] [xbp-40h] BYREF
  void *v18; // [xsp+40h] [xbp-30h]
  __int64 v19; // [xsp+48h] [xbp-28h]

  v19 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  *(_QWORD *)&v14[7] = 7499520LL;
  v13 = 20;
  v15 = 0LL;
  *(_QWORD *)v14 = *(_QWORD *)"type_error";
  nlohmann::detail::exception::name(&v13, a1, (__int64)v16);
  v6 = *a2;
  if ( (v6 & 1) != 0 )
    v7 = (void *)*((_QWORD *)a2 + 2);
  else
    v7 = a2 + 1;
  if ( (v6 & 1) != 0 )
    v8 = *((_QWORD *)a2 + 1);
  else
    v8 = v6 >> 1;
  v9 = std::string::append(v16, v7, v8);
  v10 = *(_OWORD *)v9;
  v18 = (void *)v9[2];
  v17 = v10;
  v9[1] = 0LL;
  v9[2] = 0LL;
  *v9 = 0LL;
  if ( (v16[0] & 1) != 0 )
    operator delete((void *)v16[2]);
  if ( (v13 & 1) != 0 )
    operator delete(v15);
  if ( (v17 & 1) != 0 )
    v11 = (const char *)v18;
  else
    v11 = (char *)&v17 + 1;
  *(_DWORD *)(a3 + 8) = a1;
  *(_QWORD *)a3 = off_44088;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), v11);
  v12 = v17;
  *(_QWORD *)a3 = off_441C0;
  if ( (v12 & 1) != 0 )
    operator delete(v18);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);
// 441C0: using guessed type void (__fastcall *off_441C0[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000022D40) ----------------------------------------------------
_QWORD *__fastcall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::erase(
        _QWORD *a1,
        __int64 a2)
{
  _QWORD *v2; // x8
  _QWORD *v4; // x20
  __int64 v5; // x8
  __int64 v6; // x9
  _QWORD *v7; // t1
  __int64 *v8; // x8

  v2 = *(_QWORD **)(a2 + 8);
  if ( v2 )
  {
    do
    {
      v4 = v2;
      v2 = (_QWORD *)*v2;
    }
    while ( v2 );
  }
  else
  {
    v5 = a2 + 16;
    v4 = *(_QWORD **)(a2 + 16);
    if ( *v4 != a2 )
    {
      do
      {
        v6 = *(_QWORD *)v5;
        v7 = *(_QWORD **)(*(_QWORD *)v5 + 16LL);
        v5 = *(_QWORD *)v5 + 16LL;
        v4 = v7;
      }
      while ( *v7 != v6 );
    }
  }
  if ( *a1 == a2 )
    *a1 = v4;
  v8 = (__int64 *)a1[1];
  --a1[2];
  std::__tree_remove<std::__tree_node_base<void *> *>(v8, (__int64 *)a2);
  nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
    (void ***)(a2 + 64),
    *(_BYTE *)(a2 + 56));
  if ( (*(_BYTE *)(a2 + 32) & 1) != 0 )
    operator delete(*(void **)(a2 + 48));
  operator delete((void *)a2);
  return v4;
}

//----- (0000000000022DF0) ----------------------------------------------------
__int64 *__fastcall std::__tree_remove<std::__tree_node_base<void *> *>(__int64 *result, __int64 *a2)
{
  __int64 v2; // x9
  __int64 *v3; // x8
  __int64 *v4; // x10
  char v5; // w11
  _QWORD *v6; // x12
  __int64 **v7; // x13
  __int64 *v8; // x8
  int v9; // w13
  __int64 v10; // x14
  __int64 v11; // x12
  __int64 v12; // x12
  __int64 v13; // x12
  __int64 v14; // x11
  __int64 v15; // x12
  __int64 v16; // x11
  __int64 *v17; // x11
  __int64 v18; // x11
  __int64 **v19; // x12
  __int64 *v20; // x12
  __int64 v21; // x13
  _QWORD *v22; // x13
  __int64 v23; // x14
  __int64 *v24; // x12
  __int64 **v25; // x13
  _BYTE *v26; // x11
  int v27; // t1
  _BYTE *v28; // x9
  __int64 v29; // x10
  _QWORD *v30; // x10
  __int64 **v31; // x13
  __int64 v32; // x14
  _BYTE *v33; // x11
  __int64 **v34; // x10
  _BYTE *v35; // x9
  int v36; // t1
  __int64 *v37; // x10
  __int64 **v38; // x13
  __int64 v39; // x14
  __int64 *v40; // x8
  __int64 *v41; // x9
  __int64 v42; // x10
  __int64 **v43; // x10
  __int64 v44; // x11
  __int64 v45; // x8
  __int64 *v46; // x9
  __int64 v47; // x10
  _QWORD *v48; // x10
  __int64 v49; // x11

  v2 = *a2;
  if ( *a2 )
  {
    v3 = (__int64 *)a2[1];
    if ( v3 )
    {
      do
      {
        v4 = v3;
        v3 = (__int64 *)*v3;
      }
      while ( v3 );
      v2 = v4[1];
      if ( !v2 )
        goto LABEL_7;
    }
    else
    {
      v4 = a2;
    }
LABEL_9:
    v6 = v4 + 2;
    v5 = 1;
    *(_QWORD *)(v2 + 16) = v4[2];
    goto LABEL_10;
  }
  v4 = a2;
  v2 = a2[1];
  if ( v2 )
    goto LABEL_9;
LABEL_7:
  v5 = 0;
  v6 = v4 + 2;
LABEL_10:
  v7 = (__int64 **)v4[2];
  v8 = *v7;
  if ( *v7 == v4 )
  {
    *v7 = (__int64 *)v2;
    if ( v4 == result )
    {
      v8 = 0LL;
      result = (__int64 *)v2;
    }
    else
    {
      v8 = v7[1];
    }
  }
  else
  {
    v7[1] = (__int64 *)v2;
  }
  v9 = *((unsigned __int8 *)v4 + 24);
  if ( v4 != a2 )
  {
    v10 = a2[2];
    *v6 = v10;
    if ( *(__int64 **)a2[2] == a2 )
      v11 = 0LL;
    else
      v11 = 8LL;
    *(_QWORD *)(v10 + v11) = v4;
    v12 = *a2;
    *v4 = *a2;
    *(_QWORD *)(v12 + 16) = v4;
    v13 = a2[1];
    v4[1] = v13;
    if ( v13 )
      *(_QWORD *)(v13 + 16) = v4;
    if ( result == a2 )
      result = v4;
    *((_BYTE *)v4 + 24) = *((_BYTE *)a2 + 24);
  }
  if ( !v9 || !result )
    return result;
  if ( (v5 & 1) != 0 )
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while ( 1 )
  {
    v14 = v8[2];
    if ( *(__int64 **)v14 == v8 )
      break;
    if ( *((_BYTE *)v8 + 24) )
    {
      v15 = *v8;
      if ( !*v8 )
        goto LABEL_35;
    }
    else
    {
      *((_BYTE *)v8 + 24) = 1;
      v20 = *(__int64 **)(v14 + 8);
      *(_BYTE *)(v14 + 24) = 0;
      v21 = *v20;
      *(_QWORD *)(v14 + 8) = *v20;
      if ( v21 )
        *(_QWORD *)(v21 + 16) = v14;
      v20[2] = *(_QWORD *)(v14 + 16);
      v22 = *(_QWORD **)(v14 + 16);
      v23 = *v22 != v14;
      v22[v23] = v20;
      *v20 = v14;
      *(_QWORD *)(v14 + 16) = v20;
      if ( result == (__int64 *)*v8 )
        result = v8;
      v8 = *(__int64 **)(*v8 + 8);
      v15 = *v8;
      if ( !*v8 )
        goto LABEL_35;
    }
    if ( !*(_BYTE *)(v15 + 24) )
    {
      v16 = v8[1];
      if ( !v16 )
        goto LABEL_68;
LABEL_67:
      v27 = *(unsigned __int8 *)(v16 + 24);
      v26 = (_BYTE *)(v16 + 24);
      if ( v27 )
      {
LABEL_68:
        *(_BYTE *)(v15 + 24) = 1;
        v28 = (_BYTE *)(v15 + 24);
        *((_BYTE *)v8 + 24) = 0;
        v26 = v8 + 3;
        v29 = *(_QWORD *)(v15 + 8);
        *v8 = v29;
        if ( v29 )
          *(_QWORD *)(v29 + 16) = v8;
        *(_QWORD *)(v15 + 16) = v8[2];
        v30 = (_QWORD *)(v15 + 16);
        v31 = (__int64 **)v8[2];
        v32 = *v31 != v8;
        v31[v32] = (__int64 *)v15;
        *(_QWORD *)(v15 + 8) = v8;
        v8[2] = v15;
      }
      else
      {
        v30 = v8 + 2;
        v28 = v8 + 3;
      }
      v45 = *v30;
      *v28 = *(_BYTE *)(*v30 + 24LL);
      *(_BYTE *)(v45 + 24) = 1;
      *v26 = 1;
      v46 = *(__int64 **)(v45 + 8);
      v47 = *v46;
      *(_QWORD *)(v45 + 8) = *v46;
      if ( v47 )
        *(_QWORD *)(v47 + 16) = v45;
      v46[2] = *(_QWORD *)(v45 + 16);
      v48 = *(_QWORD **)(v45 + 16);
      v49 = *v48 != v45;
      v48[v49] = v46;
      *v46 = v45;
      *(_QWORD *)(v45 + 16) = v46;
      return result;
    }
LABEL_35:
    v16 = v8[1];
    if ( v16 && !*(_BYTE *)(v16 + 24) )
      goto LABEL_67;
    v17 = (__int64 *)v8[2];
    *((_BYTE *)v8 + 24) = 0;
    if ( v17 == result )
    {
      v17 = result;
LABEL_65:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
LABEL_45:
    if ( !*((_BYTE *)v17 + 24) )
      goto LABEL_65;
    v8 = *(__int64 **)(v17[2] + 8LL * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if ( !*((_BYTE *)v8 + 24) )
  {
    *((_BYTE *)v8 + 24) = 1;
    *(_BYTE *)(v14 + 24) = 0;
    v24 = (__int64 *)v8[1];
    *(_QWORD *)v14 = v24;
    if ( v24 )
      v24[2] = v14;
    v8[2] = *(_QWORD *)(v14 + 16);
    v25 = *(__int64 ***)(v14 + 16);
    if ( *v25 == (__int64 *)v14 )
    {
      *v25 = v8;
      v24 = *(__int64 **)v14;
    }
    else
    {
      v25[1] = v8;
    }
    v8[1] = v14;
    *(_QWORD *)(v14 + 16) = v8;
    if ( result == (__int64 *)v14 )
      result = v8;
    v8 = v24;
    v18 = *v24;
    if ( !*v24 )
      goto LABEL_42;
LABEL_41:
    if ( *(_BYTE *)(v18 + 24) )
      goto LABEL_42;
    v33 = (_BYTE *)(v18 + 24);
LABEL_75:
    v34 = (__int64 **)(v8 + 2);
    v35 = v8 + 3;
    goto LABEL_85;
  }
  v18 = *v8;
  if ( *v8 )
    goto LABEL_41;
LABEL_42:
  v19 = (__int64 **)v8[1];
  if ( !v19 || *((_BYTE *)v19 + 24) )
  {
    v17 = (__int64 *)v8[2];
    *((_BYTE *)v8 + 24) = 0;
    if ( v17 == result )
      goto LABEL_65;
    goto LABEL_45;
  }
  if ( !v18 )
    goto LABEL_79;
  v36 = *(unsigned __int8 *)(v18 + 24);
  v33 = (_BYTE *)(v18 + 24);
  if ( !v36 )
    goto LABEL_75;
  v19 = (__int64 **)v8[1];
LABEL_79:
  *((_BYTE *)v19 + 24) = 1;
  v35 = v19 + 3;
  *((_BYTE *)v8 + 24) = 0;
  v33 = v8 + 3;
  v37 = *v19;
  v8[1] = (__int64)*v19;
  if ( v37 )
    v37[2] = (__int64)v8;
  v19[2] = (__int64 *)v8[2];
  v34 = v19 + 2;
  v38 = (__int64 **)v8[2];
  v39 = *v38 != v8;
  v38[v39] = (__int64 *)v19;
  *v19 = v8;
  v8[2] = (__int64)v19;
LABEL_85:
  v40 = *v34;
  *v35 = *((_BYTE *)*v34 + 24);
  *((_BYTE *)v40 + 24) = 1;
  *v33 = 1;
  v41 = (__int64 *)*v40;
  v42 = *(_QWORD *)(*v40 + 8);
  *v40 = v42;
  if ( v42 )
    *(_QWORD *)(v42 + 16) = v40;
  v41[2] = v40[2];
  v43 = (__int64 **)v40[2];
  v44 = *v43 != v40;
  v43[v44] = v41;
  v41[1] = (__int64)v40;
  v40[2] = (__int64)v41;
  return result;
}

//----- (00000000000231EC) ----------------------------------------------------
void __fastcall nlohmann::detail::type_error::~type_error(nlohmann::detail::type_error *this)
{
  *(_QWORD *)this = off_44088;
  std::runtime_error::~runtime_error((nlohmann::detail::type_error *)((char *)this + 16));
  std::exception::~exception(this);
  operator delete(this);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000023228) ----------------------------------------------------
_QWORD *__usercall std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(
        __int64 a1@<X0>,
        __int128 **a2@<X2>,
        __int64 a3@<X8>)
{
  __int64 v3; // x22
  __int64 v6; // x0
  __int128 *v7; // x8
  __int64 v8; // x20
  _QWORD *result; // x0
  __int128 v10; // q0
  size_t v11; // x21
  const void *v12; // x22
  void *v13; // x23

  v3 = a1 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v3;
  *(_BYTE *)(a3 + 16) = 0;
  v7 = *a2;
  v8 = v6;
  *(_QWORD *)(v6 + 32) = 0LL;
  result = (_QWORD *)(v6 + 32);
  *(_QWORD *)(v8 + 40) = 0LL;
  *(_QWORD *)(v8 + 48) = 0LL;
  if ( (*(_BYTE *)v7 & 1) != 0 )
  {
    v11 = *((_QWORD *)v7 + 1);
    if ( v11 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v12 = (const void *)*((_QWORD *)v7 + 2);
    if ( v11 >= 0x17 )
    {
      v13 = (void *)operator new((v11 + 16) & 0xFFFFFFFFFFFFFFF0LL);
      *(_QWORD *)(v8 + 40) = v11;
      *(_QWORD *)(v8 + 48) = v13;
      *(_QWORD *)(v8 + 32) = (v11 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    }
    else
    {
      v13 = (void *)(v8 + 33);
      *(_BYTE *)(v8 + 32) = 2 * v11;
      if ( !v11 )
        goto LABEL_9;
    }
    result = memcpy(v13, v12, v11);
LABEL_9:
    *((_BYTE *)v13 + v11) = 0;
    goto LABEL_10;
  }
  v10 = *v7;
  result[2] = *((_QWORD *)v7 + 2);
  *(_OWORD *)result = v10;
LABEL_10:
  *(_BYTE *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0LL;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

//----- (0000000000023324) ----------------------------------------------------
void __fastcall nlohmann::detail::out_of_range::~out_of_range(nlohmann::detail::out_of_range *this)
{
  *(_QWORD *)this = off_44088;
  std::runtime_error::~runtime_error((nlohmann::detail::out_of_range *)((char *)this + 16));
  std::exception::~exception(this);
  operator delete(this);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000023360) ----------------------------------------------------
__int64 *__fastcall std::string::insert(__int64 *a1, size_t a2, char *src, size_t n)
{
  unsigned __int64 v4; // x8
  char *v6; // x21
  size_t v9; // x27
  unsigned __int64 v10; // x28
  unsigned __int64 v11; // x23
  char *v12; // x8
  char *v13; // x23
  unsigned __int64 v14; // x8
  __int64 v15; // x24
  char *v16; // x22
  __int64 v18; // x8
  char *v19; // x8
  char *v20; // x0
  char *v21; // x25
  char *srca; // [xsp+8h] [xbp-58h]

  v4 = *(unsigned __int8 *)a1;
  v6 = src;
  if ( (v4 & 1) != 0 )
  {
    v9 = a1[1];
    if ( v9 < a2 )
      goto LABEL_44;
  }
  else
  {
    v9 = v4 >> 1;
    if ( v4 >> 1 < a2 )
LABEL_44:
      std::__basic_string_common<true>::__throw_out_of_range();
  }
  if ( (v4 & 1) != 0 )
    v10 = (*a1 & 0xFFFFFFFFFFFFFFFELL) - 1;
  else
    v10 = 22LL;
  if ( v10 - v9 < n )
  {
    v11 = v9 + n;
    if ( -18LL - v10 < v9 + n - v10 )
      std::__basic_string_common<true>::__throw_length_error();
    if ( (v4 & 1) != 0 )
      v12 = (char *)a1[2];
    else
      v12 = (char *)a1 + 1;
    srca = v12;
    if ( v10 > 0x7FFFFFFFFFFFFFE6LL )
    {
      v15 = -17LL;
    }
    else
    {
      v14 = 2 * v10;
      if ( v11 >= 2 * v10 )
        v14 = v9 + n;
      if ( v14 >= 0x17 )
        v15 = (v14 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      else
        v15 = 23LL;
    }
    v20 = (char *)operator new(v15);
    v21 = v20;
    if ( a2 )
      memcpy(v20, srca, a2);
    memcpy(&v21[a2], v6, n);
    if ( v9 != a2 )
      memcpy(&v21[a2 + n], &srca[a2], v9 - a2);
    if ( v10 != 22 )
      operator delete(srca);
    *a1 = v15 | 1;
    v19 = &v21[v11];
    a1[1] = v11;
    a1[2] = (__int64)v21;
LABEL_42:
    *v19 = 0;
    return a1;
  }
  if ( n )
  {
    if ( (v4 & 1) != 0 )
      v13 = (char *)a1[2];
    else
      v13 = (char *)a1 + 1;
    v16 = &v13[a2];
    if ( v9 != a2 )
    {
      if ( &v13[v9] > src && v16 <= src )
        v6 = &src[n];
      memmove(&v16[n], v16, v9 - a2);
    }
    memmove(v16, v6, n);
    v18 = v9 + n;
    if ( (*(_BYTE *)a1 & 1) != 0 )
      a1[1] = v18;
    else
      *(_BYTE *)a1 = 2 * v18;
    v19 = &v13[v18];
    goto LABEL_42;
  }
  return a1;
}

//----- (000000000002355C) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(
        __int64 a1,
        void ***a2,
        char a3)
{
  void **v3; // x9
  __int64 v5; // x20
  __int64 v6; // x8
  __int64 v7; // x9
  __int64 v8; // x0
  __int64 v9; // x8
  __int64 v10; // x8
  __int64 v11; // x0
  unsigned __int64 v12; // x8
  char v13; // w8
  void **v14; // x9
  char *v15; // x9
  char v16; // w1
  void **v17; // x10
  unsigned __int64 v18; // x8
  __int64 v19; // x9
  char v20; // w8
  void **v21; // x9
  __int64 v22; // x9
  char v23; // w1
  void **v24; // x10
  void **v26; // [xsp+8h] [xbp-58h] BYREF
  char v27; // [xsp+10h] [xbp-50h]
  void **v28; // [xsp+18h] [xbp-48h] BYREF
  char v29[8]; // [xsp+20h] [xbp-40h] BYREF
  void **v30; // [xsp+28h] [xbp-38h] BYREF
  char v31[4]; // [xsp+30h] [xbp-30h] BYREF
  int v32; // [xsp+34h] [xbp-2Ch] BYREF
  __int64 v33; // [xsp+38h] [xbp-28h]

  v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( ((1LL << (*(_BYTE *)(a1 + 40) - 1)) & *(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                       + (((unsigned __int64)(*(_QWORD *)(a1 + 40) - 1LL) >> 3) & 0x1FFFFFFFFFFFFFF8LL))) != 0 )
  {
    v3 = *a2;
    v29[0] = 7;
    v30 = v3;
    if ( (a3 & 1) != 0 )
      goto LABEL_7;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    v31[0] = 5;
    v32 = (unsigned __int64)(v6 - v7) >> 3;
    v8 = *(_QWORD *)(a1 + 128);
    if ( !v8 )
      sub_13744();
    if ( ((*(__int64 (__fastcall **)(__int64, int *, char *, char *))(*(_QWORD *)v8 + 48LL))(v8, &v32, v31, v29) & 1) != 0 )
    {
LABEL_7:
      v9 = *(_QWORD *)(a1 + 16);
      if ( *(_QWORD *)(a1 + 8) == v9 )
      {
        v13 = v29[0];
        v14 = v30;
        v29[0] = 0;
        v30 = 0LL;
        v27 = v13;
        v28 = v14;
        v15 = *(char **)a1;
        v16 = **(_BYTE **)a1;
        *v15 = v13;
        v27 = v16;
        v17 = (void **)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = v28;
        v28 = v17;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          &v28,
          v16);
LABEL_17:
        v5 = 1LL;
        goto LABEL_18;
      }
      v10 = *(_QWORD *)(v9 - 8);
      if ( v10 )
      {
        if ( *(_BYTE *)v10 == 2 )
        {
          v11 = *(_QWORD *)(v10 + 8);
          v12 = *(_QWORD *)(v11 + 8);
          if ( v12 >= *(_QWORD *)(v11 + 16) )
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
              (void **)v11,
              (__int64)v29);
          }
          else
          {
            *(_BYTE *)v12 = v29[0];
            *(_QWORD *)(v12 + 8) = v30;
            v29[0] = 0;
            v30 = 0LL;
            *(_QWORD *)(v11 + 8) += 16LL;
          }
          goto LABEL_17;
        }
        v18 = *(_QWORD *)(a1 + 64) - 1LL;
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
        *(_QWORD *)(a1 + 64) = v18;
        if ( ((1LL << v18) & v19) != 0 )
        {
          v20 = v29[0];
          v21 = v30;
          v29[0] = 0;
          v30 = 0LL;
          v26 = v21;
          v22 = *(_QWORD *)(a1 + 80);
          v23 = *(_BYTE *)v22;
          *(_BYTE *)v22 = v20;
          v24 = *(void ***)(v22 + 8);
          *(_QWORD *)(v22 + 8) = v26;
          v26 = v24;
          nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
            &v26,
            v23);
          goto LABEL_17;
        }
      }
    }
    v5 = 0LL;
LABEL_18:
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      &v30,
      v29[0]);
    return v5;
  }
  return 0LL;
}
// 2355C: using guessed type char var_40[8];
// 2355C: using guessed type char var_30[4];

//----- (00000000000237B4) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(
        __int64 a1,
        unsigned __int8 *a2,
        char a3)
{
  void **v3; // x9
  __int64 v5; // x20
  __int64 v6; // x8
  __int64 v7; // x9
  __int64 v8; // x0
  __int64 v9; // x8
  __int64 v10; // x8
  __int64 v11; // x0
  unsigned __int64 v12; // x8
  char v13; // w8
  void **v14; // x9
  char *v15; // x9
  char v16; // w1
  void **v17; // x10
  unsigned __int64 v18; // x8
  __int64 v19; // x9
  char v20; // w8
  void **v21; // x9
  __int64 v22; // x9
  char v23; // w1
  void **v24; // x10
  void **v26; // [xsp+8h] [xbp-58h] BYREF
  char v27; // [xsp+10h] [xbp-50h]
  void **v28; // [xsp+18h] [xbp-48h] BYREF
  char v29[8]; // [xsp+20h] [xbp-40h] BYREF
  void **v30; // [xsp+28h] [xbp-38h] BYREF
  char v31[4]; // [xsp+30h] [xbp-30h] BYREF
  int v32; // [xsp+34h] [xbp-2Ch] BYREF
  __int64 v33; // [xsp+38h] [xbp-28h]

  v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( ((1LL << (*(_BYTE *)(a1 + 40) - 1)) & *(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                       + (((unsigned __int64)(*(_QWORD *)(a1 + 40) - 1LL) >> 3) & 0x1FFFFFFFFFFFFFF8LL))) != 0 )
  {
    v3 = (void **)*a2;
    v29[0] = 4;
    v30 = v3;
    if ( (a3 & 1) != 0 )
      goto LABEL_7;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    v31[0] = 5;
    v32 = (unsigned __int64)(v6 - v7) >> 3;
    v8 = *(_QWORD *)(a1 + 128);
    if ( !v8 )
      sub_13744();
    if ( ((*(__int64 (__fastcall **)(__int64, int *, char *, char *))(*(_QWORD *)v8 + 48LL))(v8, &v32, v31, v29) & 1) != 0 )
    {
LABEL_7:
      v9 = *(_QWORD *)(a1 + 16);
      if ( *(_QWORD *)(a1 + 8) == v9 )
      {
        v13 = v29[0];
        v14 = v30;
        v29[0] = 0;
        v30 = 0LL;
        v27 = v13;
        v28 = v14;
        v15 = *(char **)a1;
        v16 = **(_BYTE **)a1;
        *v15 = v13;
        v27 = v16;
        v17 = (void **)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = v28;
        v28 = v17;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          &v28,
          v16);
LABEL_17:
        v5 = 1LL;
        goto LABEL_18;
      }
      v10 = *(_QWORD *)(v9 - 8);
      if ( v10 )
      {
        if ( *(_BYTE *)v10 == 2 )
        {
          v11 = *(_QWORD *)(v10 + 8);
          v12 = *(_QWORD *)(v11 + 8);
          if ( v12 >= *(_QWORD *)(v11 + 16) )
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
              (void **)v11,
              (__int64)v29);
          }
          else
          {
            *(_BYTE *)v12 = v29[0];
            *(_QWORD *)(v12 + 8) = v30;
            v29[0] = 0;
            v30 = 0LL;
            *(_QWORD *)(v11 + 8) += 16LL;
          }
          goto LABEL_17;
        }
        v18 = *(_QWORD *)(a1 + 64) - 1LL;
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
        *(_QWORD *)(a1 + 64) = v18;
        if ( ((1LL << v18) & v19) != 0 )
        {
          v20 = v29[0];
          v21 = v30;
          v29[0] = 0;
          v30 = 0LL;
          v26 = v21;
          v22 = *(_QWORD *)(a1 + 80);
          v23 = *(_BYTE *)v22;
          *(_BYTE *)v22 = v20;
          v24 = *(void ***)(v22 + 8);
          *(_QWORD *)(v22 + 8) = v26;
          v26 = v24;
          nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
            &v26,
            v23);
          goto LABEL_17;
        }
      }
    }
    v5 = 0LL;
LABEL_18:
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      &v30,
      v29[0]);
    return v5;
  }
  return 0LL;
}
// 237B4: using guessed type char var_40[8];
// 237B4: using guessed type char var_30[4];

//----- (0000000000023A0C) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(
        __int64 a1,
        __int64 a2,
        char a3)
{
  __int64 v4; // x19
  __int64 v5; // x8
  __int64 v6; // x9
  __int64 v7; // x0
  __int64 v8; // x8
  __int64 v9; // x8
  __int64 v10; // x0
  unsigned __int64 v11; // x8
  char v12; // w8
  void **v13; // x9
  char *v14; // x9
  char v15; // w1
  void **v16; // x10
  unsigned __int64 v17; // x8
  __int64 v18; // x9
  char v19; // w8
  void **v20; // x9
  __int64 v21; // x9
  char v22; // w1
  void **v23; // x10
  void **v25; // [xsp+8h] [xbp-58h] BYREF
  char v26; // [xsp+10h] [xbp-50h]
  void **v27; // [xsp+18h] [xbp-48h] BYREF
  char v28[8]; // [xsp+20h] [xbp-40h] BYREF
  void **v29; // [xsp+28h] [xbp-38h] BYREF
  char v30[4]; // [xsp+30h] [xbp-30h] BYREF
  int v31; // [xsp+34h] [xbp-2Ch] BYREF
  __int64 v32; // [xsp+38h] [xbp-28h]

  v32 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( ((1LL << (*(_BYTE *)(a1 + 40) - 1)) & *(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                       + (((unsigned __int64)(*(_QWORD *)(a1 + 40) - 1LL) >> 3) & 0x1FFFFFFFFFFFFFF8LL))) != 0 )
  {
    v28[0] = 0;
    v29 = 0LL;
    if ( (a3 & 1) != 0 )
      goto LABEL_7;
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 8);
    v30[0] = 5;
    v31 = (unsigned __int64)(v5 - v6) >> 3;
    v7 = *(_QWORD *)(a1 + 128);
    if ( !v7 )
      sub_13744();
    if ( ((*(__int64 (__fastcall **)(__int64, int *, char *, char *))(*(_QWORD *)v7 + 48LL))(v7, &v31, v30, v28) & 1) != 0 )
    {
LABEL_7:
      v8 = *(_QWORD *)(a1 + 16);
      if ( *(_QWORD *)(a1 + 8) == v8 )
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0LL;
        v26 = v12;
        v27 = v13;
        v14 = *(char **)a1;
        v15 = **(_BYTE **)a1;
        *v14 = v12;
        v26 = v15;
        v16 = (void **)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = v27;
        v27 = v16;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          &v27,
          v15);
LABEL_17:
        v4 = 1LL;
        goto LABEL_18;
      }
      v9 = *(_QWORD *)(v8 - 8);
      if ( v9 )
      {
        if ( *(_BYTE *)v9 == 2 )
        {
          v10 = *(_QWORD *)(v9 + 8);
          v11 = *(_QWORD *)(v10 + 8);
          if ( v11 >= *(_QWORD *)(v10 + 16) )
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
              (void **)v10,
              (__int64)v28);
          }
          else
          {
            *(_BYTE *)v11 = v28[0];
            *(_QWORD *)(v11 + 8) = v29;
            v28[0] = 0;
            v29 = 0LL;
            *(_QWORD *)(v10 + 8) += 16LL;
          }
          goto LABEL_17;
        }
        v17 = *(_QWORD *)(a1 + 64) - 1LL;
        v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
        *(_QWORD *)(a1 + 64) = v17;
        if ( ((1LL << v17) & v18) != 0 )
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0LL;
          v25 = v20;
          v21 = *(_QWORD *)(a1 + 80);
          v22 = *(_BYTE *)v21;
          *(_BYTE *)v21 = v19;
          v23 = *(void ***)(v21 + 8);
          *(_QWORD *)(v21 + 8) = v25;
          v25 = v23;
          nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
            &v25,
            v22);
          goto LABEL_17;
        }
      }
    }
    v4 = 0LL;
LABEL_18:
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      &v29,
      v28[0]);
    return v4;
  }
  return 0LL;
}
// 23A0C: using guessed type char var_40[8];
// 23A0C: using guessed type char var_30[4];

//----- (0000000000023C5C) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(
        __int64 a1,
        void ***a2,
        char a3)
{
  void **v3; // x9
  __int64 v5; // x20
  __int64 v6; // x9
  __int64 v7; // x10
  __int64 v8; // x0
  __int64 v9; // x8
  __int64 v10; // x8
  __int64 v11; // x0
  unsigned __int64 v12; // x8
  char v13; // w8
  void **v14; // x9
  char *v15; // x9
  char v16; // w1
  void **v17; // x10
  unsigned __int64 v18; // x8
  __int64 v19; // x9
  char v20; // w8
  void **v21; // x9
  __int64 v22; // x9
  char v23; // w1
  void **v24; // x10
  void **v26; // [xsp+8h] [xbp-58h] BYREF
  char v27; // [xsp+10h] [xbp-50h]
  void **v28; // [xsp+18h] [xbp-48h] BYREF
  char v29[8]; // [xsp+20h] [xbp-40h] BYREF
  void **v30; // [xsp+28h] [xbp-38h] BYREF
  char v31[4]; // [xsp+30h] [xbp-30h] BYREF
  int v32; // [xsp+34h] [xbp-2Ch] BYREF
  __int64 v33; // [xsp+38h] [xbp-28h]

  v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( ((1LL << (*(_BYTE *)(a1 + 40) - 1)) & *(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                       + (((unsigned __int64)(*(_QWORD *)(a1 + 40) - 1LL) >> 3) & 0x1FFFFFFFFFFFFFF8LL))) != 0 )
  {
    v3 = *a2;
    v29[0] = 5;
    v30 = v3;
    if ( (a3 & 1) != 0 )
      goto LABEL_7;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    v31[0] = 5;
    v32 = (unsigned __int64)(v6 - v7) >> 3;
    v8 = *(_QWORD *)(a1 + 128);
    if ( !v8 )
      sub_13744();
    if ( ((*(__int64 (__fastcall **)(__int64, int *, char *, char *))(*(_QWORD *)v8 + 48LL))(v8, &v32, v31, v29) & 1) != 0 )
    {
LABEL_7:
      v9 = *(_QWORD *)(a1 + 16);
      if ( *(_QWORD *)(a1 + 8) == v9 )
      {
        v13 = v29[0];
        v14 = v30;
        v29[0] = 0;
        v30 = 0LL;
        v27 = v13;
        v28 = v14;
        v15 = *(char **)a1;
        v16 = **(_BYTE **)a1;
        *v15 = v13;
        v27 = v16;
        v17 = (void **)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = v28;
        v28 = v17;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          &v28,
          v16);
LABEL_17:
        v5 = 1LL;
        goto LABEL_18;
      }
      v10 = *(_QWORD *)(v9 - 8);
      if ( v10 )
      {
        if ( *(_BYTE *)v10 == 2 )
        {
          v11 = *(_QWORD *)(v10 + 8);
          v12 = *(_QWORD *)(v11 + 8);
          if ( v12 >= *(_QWORD *)(v11 + 16) )
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
              (void **)v11,
              (__int64)v29);
          }
          else
          {
            *(_BYTE *)v12 = v29[0];
            *(_QWORD *)(v12 + 8) = v30;
            v29[0] = 0;
            v30 = 0LL;
            *(_QWORD *)(v11 + 8) += 16LL;
          }
          goto LABEL_17;
        }
        v18 = *(_QWORD *)(a1 + 64) - 1LL;
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
        *(_QWORD *)(a1 + 64) = v18;
        if ( ((1LL << v18) & v19) != 0 )
        {
          v20 = v29[0];
          v21 = v30;
          v29[0] = 0;
          v30 = 0LL;
          v26 = v21;
          v22 = *(_QWORD *)(a1 + 80);
          v23 = *(_BYTE *)v22;
          *(_BYTE *)v22 = v20;
          v24 = *(void ***)(v22 + 8);
          *(_QWORD *)(v22 + 8) = v26;
          v26 = v24;
          nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
            &v26,
            v23);
          goto LABEL_17;
        }
      }
    }
    v5 = 0LL;
LABEL_18:
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      &v30,
      v29[0]);
    return v5;
  }
  return 0LL;
}
// 23C5C: using guessed type char var_40[8];
// 23C5C: using guessed type char var_30[4];

//----- (0000000000023EB0) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(
        __int64 a1,
        __int128 *a2,
        char a3)
{
  __int64 v5; // x20
  __int64 v6; // x8
  __int64 v7; // x9
  __int64 v8; // x0
  __int64 v9; // x8
  __int64 v10; // x8
  __int64 v11; // x0
  unsigned __int64 v12; // x8
  char v13; // w8
  void **v14; // x9
  char *v15; // x9
  char v16; // w1
  void **v17; // x10
  unsigned __int64 v18; // x8
  __int64 v19; // x9
  char v20; // w8
  void **v21; // x9
  __int64 v22; // x9
  char v23; // w1
  void **v24; // x10
  void **v26; // [xsp+8h] [xbp-58h] BYREF
  char v27; // [xsp+10h] [xbp-50h]
  void **v28; // [xsp+18h] [xbp-48h] BYREF
  char v29[8]; // [xsp+20h] [xbp-40h] BYREF
  size_t *v30; // [xsp+28h] [xbp-38h] BYREF
  char v31[4]; // [xsp+30h] [xbp-30h] BYREF
  int v32; // [xsp+34h] [xbp-2Ch] BYREF
  __int64 v33; // [xsp+38h] [xbp-28h]

  v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( ((1LL << (*(_BYTE *)(a1 + 40) - 1)) & *(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                       + (((unsigned __int64)(*(_QWORD *)(a1 + 40) - 1LL) >> 3) & 0x1FFFFFFFFFFFFFF8LL))) != 0 )
  {
    v29[0] = 3;
    v30 = nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(a2);
    if ( (a3 & 1) != 0 )
      goto LABEL_7;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    v31[0] = 5;
    v32 = (unsigned __int64)(v6 - v7) >> 3;
    v8 = *(_QWORD *)(a1 + 128);
    if ( !v8 )
      sub_13744();
    if ( ((*(__int64 (__fastcall **)(__int64, int *, char *, char *))(*(_QWORD *)v8 + 48LL))(v8, &v32, v31, v29) & 1) != 0 )
    {
LABEL_7:
      v9 = *(_QWORD *)(a1 + 16);
      if ( *(_QWORD *)(a1 + 8) == v9 )
      {
        v13 = v29[0];
        v14 = (void **)v30;
        v29[0] = 0;
        v30 = 0LL;
        v27 = v13;
        v28 = v14;
        v15 = *(char **)a1;
        v16 = **(_BYTE **)a1;
        *v15 = v13;
        v27 = v16;
        v17 = (void **)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = v28;
        v28 = v17;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          &v28,
          v16);
LABEL_17:
        v5 = 1LL;
        goto LABEL_18;
      }
      v10 = *(_QWORD *)(v9 - 8);
      if ( v10 )
      {
        if ( *(_BYTE *)v10 == 2 )
        {
          v11 = *(_QWORD *)(v10 + 8);
          v12 = *(_QWORD *)(v11 + 8);
          if ( v12 >= *(_QWORD *)(v11 + 16) )
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
              (void **)v11,
              (__int64)v29);
          }
          else
          {
            *(_BYTE *)v12 = v29[0];
            *(_QWORD *)(v12 + 8) = v30;
            v29[0] = 0;
            v30 = 0LL;
            *(_QWORD *)(v11 + 8) += 16LL;
          }
          goto LABEL_17;
        }
        v18 = *(_QWORD *)(a1 + 64) - 1LL;
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
        *(_QWORD *)(a1 + 64) = v18;
        if ( ((1LL << v18) & v19) != 0 )
        {
          v20 = v29[0];
          v21 = (void **)v30;
          v29[0] = 0;
          v30 = 0LL;
          v26 = v21;
          v22 = *(_QWORD *)(a1 + 80);
          v23 = *(_BYTE *)v22;
          *(_BYTE *)v22 = v20;
          v24 = *(void ***)(v22 + 8);
          *(_QWORD *)(v22 + 8) = v26;
          v26 = v24;
          nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
            &v26,
            v23);
          goto LABEL_17;
        }
      }
    }
    v5 = 0LL;
LABEL_18:
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      (void ***)&v30,
      v29[0]);
    return v5;
  }
  return 0LL;
}
// 23EB0: using guessed type char var_40[8];
// 23EB0: using guessed type char var_30[4];

//----- (0000000000024110) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_callback_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(
        __int64 a1,
        void ***a2,
        char a3)
{
  void **v3; // x9
  __int64 v5; // x20
  __int64 v6; // x8
  __int64 v7; // x9
  __int64 v8; // x0
  __int64 v9; // x8
  __int64 v10; // x8
  __int64 v11; // x0
  unsigned __int64 v12; // x8
  char v13; // w8
  void **v14; // x9
  char *v15; // x9
  char v16; // w1
  void **v17; // x10
  unsigned __int64 v18; // x8
  __int64 v19; // x9
  char v20; // w8
  void **v21; // x9
  __int64 v22; // x9
  char v23; // w1
  void **v24; // x10
  void **v26; // [xsp+8h] [xbp-58h] BYREF
  char v27; // [xsp+10h] [xbp-50h]
  void **v28; // [xsp+18h] [xbp-48h] BYREF
  char v29[8]; // [xsp+20h] [xbp-40h] BYREF
  void **v30; // [xsp+28h] [xbp-38h] BYREF
  char v31[4]; // [xsp+30h] [xbp-30h] BYREF
  int v32; // [xsp+34h] [xbp-2Ch] BYREF
  __int64 v33; // [xsp+38h] [xbp-28h]

  v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  if ( ((1LL << (*(_BYTE *)(a1 + 40) - 1)) & *(_QWORD *)(*(_QWORD *)(a1 + 32)
                                                       + (((unsigned __int64)(*(_QWORD *)(a1 + 40) - 1LL) >> 3) & 0x1FFFFFFFFFFFFFF8LL))) != 0 )
  {
    v3 = *a2;
    v29[0] = 6;
    v30 = v3;
    if ( (a3 & 1) != 0 )
      goto LABEL_7;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_QWORD *)(a1 + 8);
    v31[0] = 5;
    v32 = (unsigned __int64)(v6 - v7) >> 3;
    v8 = *(_QWORD *)(a1 + 128);
    if ( !v8 )
      sub_13744();
    if ( ((*(__int64 (__fastcall **)(__int64, int *, char *, char *))(*(_QWORD *)v8 + 48LL))(v8, &v32, v31, v29) & 1) != 0 )
    {
LABEL_7:
      v9 = *(_QWORD *)(a1 + 16);
      if ( *(_QWORD *)(a1 + 8) == v9 )
      {
        v13 = v29[0];
        v14 = v30;
        v29[0] = 0;
        v30 = 0LL;
        v27 = v13;
        v28 = v14;
        v15 = *(char **)a1;
        v16 = **(_BYTE **)a1;
        *v15 = v13;
        v27 = v16;
        v17 = (void **)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = v28;
        v28 = v17;
        nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
          &v28,
          v16);
LABEL_17:
        v5 = 1LL;
        goto LABEL_18;
      }
      v10 = *(_QWORD *)(v9 - 8);
      if ( v10 )
      {
        if ( *(_BYTE *)v10 == 2 )
        {
          v11 = *(_QWORD *)(v10 + 8);
          v12 = *(_QWORD *)(v11 + 8);
          if ( v12 >= *(_QWORD *)(v11 + 16) )
          {
            std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>(
              (void **)v11,
              (__int64)v29);
          }
          else
          {
            *(_BYTE *)v12 = v29[0];
            *(_QWORD *)(v12 + 8) = v30;
            v29[0] = 0;
            v30 = 0LL;
            *(_QWORD *)(v11 + 8) += 16LL;
          }
          goto LABEL_17;
        }
        v18 = *(_QWORD *)(a1 + 64) - 1LL;
        v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL));
        *(_QWORD *)(a1 + 64) = v18;
        if ( ((1LL << v18) & v19) != 0 )
        {
          v20 = v29[0];
          v21 = v30;
          v29[0] = 0;
          v30 = 0LL;
          v26 = v21;
          v22 = *(_QWORD *)(a1 + 80);
          v23 = *(_BYTE *)v22;
          *(_BYTE *)v22 = v20;
          v24 = *(void ***)(v22 + 8);
          *(_QWORD *)(v22 + 8) = v26;
          v26 = v24;
          nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
            &v26,
            v23);
          goto LABEL_17;
        }
      }
    }
    v5 = 0LL;
LABEL_18:
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      &v30,
      v29[0]);
    return v5;
  }
  return 0LL;
}
// 24110: using guessed type char var_40[8];
// 24110: using guessed type char var_30[4];

//----- (0000000000024368) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::parse_error::parse_error(__int64 a1, __int64 a2)
{
  __int64 result; // x0

  *(_QWORD *)a1 = off_44088;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  result = std::runtime_error::runtime_error((std::runtime_error *)(a1 + 16), (const std::runtime_error *)(a2 + 16));
  *(_QWORD *)a1 = off_44228;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return result;
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);
// 44228: using guessed type void (__fastcall *[2])(nlohmann::detail::exception *__hidden this);

//----- (00000000000243C0) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::out_of_range::out_of_range(
        nlohmann::detail::out_of_range *this,
        const nlohmann::detail::out_of_range *a2)
{
  __int64 result; // x0

  *(_QWORD *)this = off_44088;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  result = std::runtime_error::runtime_error(
             (nlohmann::detail::out_of_range *)((char *)this + 16),
             (const nlohmann::detail::out_of_range *)((char *)a2 + 16));
  *(_QWORD *)this = off_441E8;
  return result;
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);
// 441E8: using guessed type void (__fastcall *[2])(nlohmann::detail::exception *__hidden this);

//----- (000000000002440C) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::invalid_iterator::invalid_iterator(
        nlohmann::detail::invalid_iterator *this,
        const nlohmann::detail::invalid_iterator *a2)
{
  __int64 result; // x0

  *(_QWORD *)this = off_44088;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  result = std::runtime_error::runtime_error(
             (nlohmann::detail::invalid_iterator *)((char *)this + 16),
             (const nlohmann::detail::invalid_iterator *)((char *)a2 + 16));
  *(_QWORD *)this = off_44180;
  return result;
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);
// 44180: using guessed type void (__fastcall *[2])(nlohmann::detail::exception *__hidden this);

//----- (0000000000024458) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::type_error::type_error(
        nlohmann::detail::type_error *this,
        const nlohmann::detail::type_error *a2)
{
  __int64 result; // x0

  *(_QWORD *)this = off_44088;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  result = std::runtime_error::runtime_error(
             (nlohmann::detail::type_error *)((char *)this + 16),
             (const nlohmann::detail::type_error *)((char *)a2 + 16));
  *(_QWORD *)this = off_441C0;
  return result;
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);
// 441C0: using guessed type void (__fastcall *[2])(nlohmann::detail::exception *__hidden this);

//----- (00000000000244A4) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::other_error::other_error(
        nlohmann::detail::other_error *this,
        const nlohmann::detail::other_error *a2)
{
  __int64 result; // x0

  *(_QWORD *)this = off_44088;
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  result = std::runtime_error::runtime_error(
             (nlohmann::detail::other_error *)((char *)this + 16),
             (const nlohmann::detail::other_error *)((char *)a2 + 16));
  *(_QWORD *)this = off_44060;
  return result;
}
// 44060: using guessed type void (__fastcall *[2])(nlohmann::detail::exception *__hidden this);
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (00000000000244F0) ----------------------------------------------------
void __fastcall nlohmann::detail::parse_error::~parse_error(nlohmann::detail::parse_error *this)
{
  *(_QWORD *)this = off_44088;
  std::runtime_error::~runtime_error((nlohmann::detail::parse_error *)((char *)this + 16));
  std::exception::~exception(this);
  operator delete(this);
}
// 44088: using guessed type void (__fastcall *off_44088[2])(nlohmann::detail::exception *__hidden this);

//----- (000000000002452C) ----------------------------------------------------
void __usercall nlohmann::detail::parse_error::position_string(
        __int64 a1@<X0>,
        unsigned __int64 a2@<X1>,
        __int64 a3@<X8>)
{
  __int64 *v5; // x0
  __int128 v6; // q0
  __int64 *v7; // x0
  __int128 v8; // q0
  unsigned __int64 v9; // x1
  char *v10; // x1
  void *v11; // x2
  __int64 *v12; // x0
  __int128 v13; // q0
  void *v14[2]; // [xsp+0h] [xbp-90h] BYREF
  void *v15; // [xsp+10h] [xbp-80h]
  __int64 v16[3]; // [xsp+18h] [xbp-78h] BYREF
  __int128 v17; // [xsp+30h] [xbp-60h] BYREF
  void *v18; // [xsp+40h] [xbp-50h]
  __int128 v19; // [xsp+50h] [xbp-40h] BYREF
  void *v20; // [xsp+60h] [xbp-30h]
  __int64 v21; // [xsp+68h] [xbp-28h]

  v21 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  std::to_string(v16, (std::__ndk1 *)(*(_QWORD *)(a1 + 16) + 1LL), a2);
  v5 = std::string::insert(v16, 0LL, " at line ", 9uLL);
  v6 = *(_OWORD *)v5;
  v18 = (void *)v5[2];
  v17 = v6;
  v5[1] = 0LL;
  v5[2] = 0LL;
  *v5 = 0LL;
  v7 = std::string::append((__int64 *)&v17, ", column ", 9uLL);
  v8 = *(_OWORD *)v7;
  v20 = (void *)v7[2];
  v19 = v8;
  v7[1] = 0LL;
  v7[2] = 0LL;
  *v7 = 0LL;
  std::to_string(v14, *(std::__ndk1 **)(a1 + 8), v9);
  if ( ((__int64)v14[0] & 1) != 0 )
    v10 = (char *)v15;
  else
    v10 = (char *)v14 + 1;
  if ( ((__int64)v14[0] & 1) != 0 )
    v11 = v14[1];
  else
    v11 = (void *)((unsigned __int64)LOBYTE(v14[0]) >> 1);
  v12 = std::string::append((__int64 *)&v19, v10, (size_t)v11);
  v13 = *(_OWORD *)v12;
  *(_QWORD *)(a3 + 16) = v12[2];
  *(_OWORD *)a3 = v13;
  v12[1] = 0LL;
  v12[2] = 0LL;
  *v12 = 0LL;
  if ( ((__int64)v14[0] & 1) != 0 )
  {
    operator delete(v15);
    if ( (v19 & 1) == 0 )
    {
LABEL_9:
      if ( (v17 & 1) == 0 )
        goto LABEL_10;
      goto LABEL_15;
    }
  }
  else if ( (v19 & 1) == 0 )
  {
    goto LABEL_9;
  }
  operator delete(v20);
  if ( (v17 & 1) == 0 )
  {
LABEL_10:
    if ( (v16[0] & 1) == 0 )
      return;
    goto LABEL_11;
  }
LABEL_15:
  operator delete(v18);
  if ( (v16[0] & 1) == 0 )
    return;
LABEL_11:
  operator delete((void *)v16[2]);
}
// 245CC: variable 'v9' is possibly undefined

//----- (000000000002472C) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::key(
        __int64 a1,
        __int128 *a2)
{
  __int64 v3; // x20
  __int64 *v4; // x0
  __int64 v5; // x8
  __int64 **v6; // x21
  __int64 *v7; // x1
  __int64 v8; // x8
  __int64 v9; // x8
  __int128 *v11; // [xsp+10h] [xbp-50h] BYREF
  __int64 v12; // [xsp+18h] [xbp-48h] BYREF
  __int64 v13[4]; // [xsp+20h] [xbp-40h] BYREF

  v13[3] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL);
  v11 = a2;
  v4 = std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__find_equal<std::string>(
         v3,
         &v12,
         (unsigned __int8 *)a2);
  v5 = *v4;
  if ( !*v4 )
  {
    v6 = (__int64 **)v4;
    std::__tree<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::__map_value_compare<std::string,std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>,std::less<void>,true>,std::allocator<std::__value_type<std::string,nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(
      &v11,
      v3,
      (__int64)v13);
    v8 = v12;
    v7 = (__int64 *)v13[0];
    *(_QWORD *)v13[0] = 0LL;
    v7[1] = 0LL;
    v7[2] = v8;
    *v6 = v7;
    v9 = **(_QWORD **)v3;
    if ( v9 )
    {
      *(_QWORD *)v3 = v9;
      v7 = *v6;
    }
    std::__tree_balance_after_insert<std::__tree_node_base<void *> *>(*(__int64 **)(v3 + 8), v7);
    ++*(_QWORD *)(v3 + 16);
    v5 = v13[0];
  }
  *(_QWORD *)(a1 + 32) = v5 + 56;
  return 1LL;
}

//----- (0000000000024808) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<nlohmann::detail::value_t>(
        __int64 a1,
        unsigned __int8 *a2)
{
  __int64 v3; // x8
  __int64 v4; // x8
  __int64 v5; // x20
  unsigned __int64 v6; // x22
  int v7; // w8
  char v8; // w22
  char *v9; // x8
  char v10; // w1
  void **v11; // x10
  unsigned __int8 v13; // w22
  __int64 v14; // x8
  char v15; // w1
  void **v16; // x10
  __int64 v17; // x0
  __int64 v18; // x0
  __int64 v19; // x0
  __int64 v20; // x0
  _QWORD *v21; // x0
  _QWORD *v22; // x0
  void **v23; // [xsp+10h] [xbp-40h] BYREF
  unsigned __int8 v24; // [xsp+18h] [xbp-38h]
  void **v25[2]; // [xsp+20h] [xbp-30h] BYREF

  v25[1] = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *(_QWORD *)(a1 + 16);
  if ( *(_QWORD *)(a1 + 8) == v3 )
  {
    v24 = *a2;
    v8 = v24;
    switch ( v24 )
    {
      case 1u:
        v17 = operator new(0x18uLL);
        *(_QWORD *)(v17 + 8) = 0LL;
        *(_QWORD *)(v17 + 16) = 0LL;
        *(_QWORD *)v17 = v17 + 8;
        v25[0] = (void **)v17;
        break;
      case 2u:
        v18 = operator new(0x18uLL);
        *(_QWORD *)(v18 + 8) = 0LL;
        *(_QWORD *)(v18 + 16) = 0LL;
        *(_QWORD *)v18 = 0LL;
        v25[0] = (void **)v18;
        break;
      case 3u:
        v25[0] = (void **)nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>("");
        break;
      case 4u:
        LOBYTE(v25[0]) = 0;
        break;
      default:
        v25[0] = 0LL;
        break;
    }
    v9 = *(char **)a1;
    v10 = **(_BYTE **)a1;
    *v9 = v8;
    v24 = v10;
    v11 = (void **)*((_QWORD *)v9 + 1);
    *((void ***)v9 + 1) = v25[0];
    v25[0] = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      v25,
      v10);
    return *(_QWORD *)a1;
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 8);
    if ( *(_BYTE *)v4 == 2 )
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if ( v6 >= *(_QWORD *)(v5 + 16) )
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<nlohmann::detail::value_t>(
          (void ****)v5,
          a2);
      }
      else
      {
        v7 = *a2;
        *(_BYTE *)v6 = v7;
        switch ( v7 )
        {
          case 1:
            v21 = (_QWORD *)operator new(0x18uLL);
            v21[1] = 0LL;
            v21[2] = 0LL;
            *v21 = v21 + 1;
            *(_QWORD *)(v6 + 8) = v21;
            break;
          case 2:
            v22 = (_QWORD *)operator new(0x18uLL);
            v22[1] = 0LL;
            v22[2] = 0LL;
            *v22 = 0LL;
            *(_QWORD *)(v6 + 8) = v22;
            break;
          case 3:
            *(_QWORD *)(v6 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>("");
            break;
          case 4:
            *(_BYTE *)(v6 + 8) = 0;
            break;
          default:
            *(_QWORD *)(v6 + 8) = 0LL;
            break;
        }
        *(_QWORD *)(v5 + 8) += 16LL;
      }
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL) + 8LL) - 16LL;
    }
    else
    {
      v13 = *a2;
      switch ( *a2 )
      {
        case 1u:
          v19 = operator new(0x18uLL);
          *(_QWORD *)(v19 + 8) = 0LL;
          *(_QWORD *)(v19 + 16) = 0LL;
          *(_QWORD *)v19 = v19 + 8;
          v23 = (void **)v19;
          break;
        case 2u:
          v20 = operator new(0x18uLL);
          *(_QWORD *)(v20 + 8) = 0LL;
          *(_QWORD *)(v20 + 16) = 0LL;
          *(_QWORD *)v20 = 0LL;
          v23 = (void **)v20;
          break;
        case 3u:
          v23 = (void **)nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>("");
          break;
        case 4u:
          LOBYTE(v23) = 0;
          break;
        default:
          v23 = 0LL;
          break;
      }
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_BYTE *)v14;
      *(_BYTE *)v14 = v13;
      v16 = *(void ***)(v14 + 8);
      *(_QWORD *)(v14 + 8) = v23;
      v23 = v16;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v23,
        v15);
      return *(_QWORD *)(a1 + 32);
    }
  }
}

//----- (0000000000024A9C) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *,std::allocator<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>>::__push_back_slow_path<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer> *>(
        __int64 a1,
        _QWORD *a2)
{
  void *v2; // x20
  signed __int64 v4; // x21
  unsigned __int64 v5; // x8
  __int64 v7; // x9
  unsigned __int64 v8; // x9
  unsigned __int64 v9; // x25
  char *v10; // x23
  char *v11; // x24
  _QWORD *v12; // x24

  v2 = *(void **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  v5 = (v4 >> 3) + 1;
  if ( v5 >> 61 )
    std::__vector_base_common<true>::__throw_length_error();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if ( (unsigned __int64)(v7 >> 3) > 0xFFFFFFFFFFFFFFELL )
  {
    v9 = 0x1FFFFFFFFFFFFFFFLL;
LABEL_10:
    v10 = (char *)operator new(8 * v9);
    goto LABEL_11;
  }
  v8 = v7 >> 2;
  if ( v8 >= v5 )
    v9 = v8;
  else
    v9 = (v4 >> 3) + 1;
  if ( v9 )
  {
    if ( v9 >> 61 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v10 = 0LL;
LABEL_11:
  v11 = &v10[8 * (v4 >> 3)];
  *(_QWORD *)v11 = *a2;
  v12 = v11 + 8;
  if ( v4 >= 1 )
    memcpy(v10, v2, v4);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v12;
  *(_QWORD *)(a1 + 16) = &v10[8 * v9];
  if ( v2 )
    operator delete(v2);
}

//----- (0000000000024B94) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<nlohmann::detail::value_t>(
        void ****a1,
        unsigned __int8 *a2)
{
  void ***v2; // x22
  void ***v3; // x23
  __int64 v5; // x24
  __int64 v7; // x9
  unsigned __int64 v8; // x9
  unsigned __int64 v9; // x25
  __int64 v10; // x20
  int v11; // w8
  _BYTE *v12; // x26
  unsigned __int64 **v13; // x21
  void ***v14; // x9
  unsigned __int64 v15; // x10
  _QWORD *v16; // x11
  char v17; // t1
  void ***v18; // x21
  char v19; // t1
  unsigned __int64 *v20; // x0
  unsigned __int64 *v21; // x0

  v3 = *a1;
  v2 = a1[1];
  v5 = ((char *)v2 - (char *)*a1) >> 4;
  if ( (unsigned __int64)(v5 + 1) >> 60 )
    std::__vector_base_common<true>::__throw_length_error();
  v7 = (char *)a1[2] - (char *)v3;
  if ( (unsigned __int64)(v7 >> 4) > 0x7FFFFFFFFFFFFFELL )
  {
    v9 = 0xFFFFFFFFFFFFFFFLL;
LABEL_10:
    v10 = operator new(16 * v9);
    goto LABEL_11;
  }
  v8 = v7 >> 3;
  if ( v8 >= v5 + 1 )
    v9 = v8;
  else
    v9 = v5 + 1;
  if ( v9 )
  {
    if ( v9 >> 60 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v10 = 0LL;
LABEL_11:
  v11 = *a2;
  v12 = (_BYTE *)(v10 + 16 * v5);
  *v12 = v11;
  v13 = (unsigned __int64 **)(v12 + 8);
  switch ( v11 )
  {
    case 1:
      v20 = (unsigned __int64 *)operator new(0x18uLL);
      v20[1] = 0LL;
      v20[2] = 0LL;
      *v20 = (unsigned __int64)(v20 + 1);
      *v13 = v20;
      break;
    case 2:
      v21 = (unsigned __int64 *)operator new(0x18uLL);
      v21[1] = 0LL;
      v21[2] = 0LL;
      *v21 = 0LL;
      *v13 = v21;
      break;
    case 3:
      *v13 = nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,char const(&)[1]>("");
      v3 = *a1;
      v2 = a1[1];
      break;
    case 4:
      *(_BYTE *)v13 = 0;
      break;
    default:
      *v13 = 0LL;
      break;
  }
  v14 = (void ***)(v12 + 16);
  if ( v2 == v3 )
  {
    v18 = v2;
  }
  else
  {
    v15 = v5 + ~((unsigned __int64)((char *)(v2 - 2) - (char *)v3) >> 4);
    v16 = (_QWORD *)(v10 + 16 * v5 - 8);
    do
    {
      v17 = *((_BYTE *)v2 - 16);
      v2 -= 2;
      *((_BYTE *)v16 - 8) = v17;
      *v16 = v2[1];
      v16 -= 2;
      *(_BYTE *)v2 = 0;
      v2[1] = 0LL;
    }
    while ( v3 != v2 );
    v18 = *a1;
    v2 = a1[1];
    v12 = (_BYTE *)(v10 + 16 * v15);
  }
  *a1 = (void ***)v12;
  a1[1] = v14;
  a1[2] = (void ***)(v10 + 16 * v9);
  while ( v18 != v2 )
  {
    v19 = *((_BYTE *)v2 - 16);
    v2 -= 2;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      v2 + 1,
      v19);
  }
  if ( v18 )
    operator delete(v18);
}

//----- (0000000000024D80) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<double &>(
        __int64 a1,
        void ***a2)
{
  __int64 v3; // x8
  __int64 v4; // x8
  __int64 v5; // x0
  unsigned __int64 v6; // x8
  void **v7; // x9
  void **v8; // x8
  char *v9; // x8
  char v10; // w1
  void **v11; // x10
  __int64 v13; // x8
  char v14; // w1
  void **v15; // x10
  void **v16; // [xsp+10h] [xbp-30h] BYREF
  char v17; // [xsp+18h] [xbp-28h]
  void **v18[2]; // [xsp+20h] [xbp-20h] BYREF

  v18[1] = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *(_QWORD *)(a1 + 16);
  if ( *(_QWORD *)(a1 + 8) == v3 )
  {
    v8 = *a2;
    v17 = 7;
    v18[0] = v8;
    v9 = *(char **)a1;
    v10 = **(_BYTE **)a1;
    *v9 = 7;
    v17 = v10;
    v11 = (void **)*((_QWORD *)v9 + 1);
    *((void ***)v9 + 1) = v18[0];
    v18[0] = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      v18,
      v10);
    return *(_QWORD *)a1;
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 8);
    if ( *(_BYTE *)v4 == 2 )
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if ( v6 >= *(_QWORD *)(v5 + 16) )
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<double &>(
          v5,
          a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0LL;
        v7 = *a2;
        *(_BYTE *)v6 = 7;
        *(_QWORD *)(v6 + 8) = v7;
        *(_QWORD *)(v5 + 8) += 16LL;
      }
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL) + 8LL) - 16LL;
    }
    else
    {
      v16 = *a2;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_BYTE *)v13;
      *(_BYTE *)v13 = 7;
      v15 = *(void ***)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v16;
      v16 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v16,
        v14);
      return *(_QWORD *)(a1 + 32);
    }
  }
}

//----- (0000000000024EB4) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<double &>(
        __int64 a1,
        _QWORD *a2)
{
  void ***v2; // x19
  void ***v3; // x22
  __int64 v5; // x23
  __int64 v7; // x9
  unsigned __int64 v8; // x9
  unsigned __int64 v9; // x24
  __int64 v10; // x0
  __int64 v11; // x11
  __int64 v12; // x8
  __int64 v13; // x9
  unsigned __int64 v14; // x10
  _QWORD *v15; // x11
  char v16; // t1
  void ***v17; // x21
  char v18; // t1

  v2 = *(void ****)a1;
  v3 = *(void ****)(a1 + 8);
  v5 = ((__int64)v3 - *(_QWORD *)a1) >> 4;
  if ( (unsigned __int64)(v5 + 1) >> 60 )
    std::__vector_base_common<true>::__throw_length_error();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if ( (unsigned __int64)(v7 >> 4) > 0x7FFFFFFFFFFFFFELL )
  {
    v9 = 0xFFFFFFFFFFFFFFFLL;
LABEL_10:
    v10 = operator new(16 * v9);
    goto LABEL_11;
  }
  v8 = v7 >> 3;
  if ( v8 >= v5 + 1 )
    v9 = v8;
  else
    v9 = v5 + 1;
  if ( v9 )
  {
    if ( v9 >> 60 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v10 = 0LL;
LABEL_11:
  v11 = v10 + 16 * v5;
  v12 = v10 + 16 * v9;
  *(_QWORD *)(v11 + 8) = *a2;
  v13 = v11 + 16;
  *(_BYTE *)v11 = 7;
  if ( v3 == v2 )
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    if ( v2 )
LABEL_17:
      operator delete(v2);
  }
  else
  {
    v14 = v5 + ~((unsigned __int64)((char *)v3 - (char *)v2 - 16) >> 4);
    v15 = (_QWORD *)(v11 - 8);
    do
    {
      v16 = *((_BYTE *)v3 - 16);
      v3 -= 2;
      *((_BYTE *)v15 - 8) = v16;
      *v15 = v3[1];
      v15 -= 2;
      *(_BYTE *)v3 = 0;
      v3[1] = 0LL;
    }
    while ( v2 != v3 );
    v2 = *(void ****)a1;
    v17 = *(void ****)(a1 + 8);
    *(_QWORD *)a1 = v10 + 16 * v14;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    while ( v2 != v17 )
    {
      v18 = *((_BYTE *)v17 - 16);
      v17 -= 2;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        v17 + 1,
        v18);
    }
    if ( v2 )
      goto LABEL_17;
  }
}

//----- (0000000000024FFC) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<bool &>(
        __int64 a1,
        unsigned __int8 *a2)
{
  __int64 v3; // x8
  __int64 v4; // x8
  __int64 v5; // x0
  unsigned __int64 v6; // x8
  __int64 v7; // x9
  void **v8; // x8
  char *v9; // x8
  char v10; // w1
  void **v11; // x10
  __int64 v13; // x8
  char v14; // w1
  void **v15; // x10
  void **v16; // [xsp+10h] [xbp-30h] BYREF
  char v17; // [xsp+18h] [xbp-28h]
  void **v18[2]; // [xsp+20h] [xbp-20h] BYREF

  v18[1] = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *(_QWORD *)(a1 + 16);
  if ( *(_QWORD *)(a1 + 8) == v3 )
  {
    v8 = (void **)*a2;
    v17 = 4;
    v18[0] = v8;
    v9 = *(char **)a1;
    v10 = **(_BYTE **)a1;
    *v9 = 4;
    v17 = v10;
    v11 = (void **)*((_QWORD *)v9 + 1);
    *((void ***)v9 + 1) = v18[0];
    v18[0] = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      v18,
      v10);
    return *(_QWORD *)a1;
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 8);
    if ( *(_BYTE *)v4 == 2 )
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if ( v6 >= *(_QWORD *)(v5 + 16) )
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<bool &>(
          v5,
          a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0LL;
        v7 = *a2;
        *(_BYTE *)v6 = 4;
        *(_QWORD *)(v6 + 8) = v7;
        *(_QWORD *)(v5 + 8) += 16LL;
      }
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL) + 8LL) - 16LL;
    }
    else
    {
      v16 = (void **)*a2;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_BYTE *)v13;
      *(_BYTE *)v13 = 4;
      v15 = *(void ***)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v16;
      v16 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v16,
        v14);
      return *(_QWORD *)(a1 + 32);
    }
  }
}

//----- (0000000000025130) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<bool &>(
        __int64 a1,
        unsigned __int8 *a2)
{
  void ***v2; // x19
  void ***v3; // x22
  __int64 v5; // x23
  __int64 v7; // x9
  unsigned __int64 v8; // x9
  unsigned __int64 v9; // x24
  __int64 v10; // x0
  __int64 v11; // x11
  __int64 v12; // x8
  __int64 v13; // x9
  unsigned __int64 v14; // x10
  _QWORD *v15; // x11
  char v16; // t1
  void ***v17; // x21
  char v18; // t1

  v2 = *(void ****)a1;
  v3 = *(void ****)(a1 + 8);
  v5 = ((__int64)v3 - *(_QWORD *)a1) >> 4;
  if ( (unsigned __int64)(v5 + 1) >> 60 )
    std::__vector_base_common<true>::__throw_length_error();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if ( (unsigned __int64)(v7 >> 4) > 0x7FFFFFFFFFFFFFELL )
  {
    v9 = 0xFFFFFFFFFFFFFFFLL;
LABEL_10:
    v10 = operator new(16 * v9);
    goto LABEL_11;
  }
  v8 = v7 >> 3;
  if ( v8 >= v5 + 1 )
    v9 = v8;
  else
    v9 = v5 + 1;
  if ( v9 )
  {
    if ( v9 >> 60 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v10 = 0LL;
LABEL_11:
  v11 = v10 + 16 * v5;
  v12 = v10 + 16 * v9;
  *(_QWORD *)(v11 + 8) = *a2;
  v13 = v11 + 16;
  *(_BYTE *)v11 = 4;
  if ( v3 == v2 )
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    if ( v2 )
LABEL_17:
      operator delete(v2);
  }
  else
  {
    v14 = v5 + ~((unsigned __int64)((char *)v3 - (char *)v2 - 16) >> 4);
    v15 = (_QWORD *)(v11 - 8);
    do
    {
      v16 = *((_BYTE *)v3 - 16);
      v3 -= 2;
      *((_BYTE *)v15 - 8) = v16;
      *v15 = v3[1];
      v15 -= 2;
      *(_BYTE *)v3 = 0;
      v3[1] = 0LL;
    }
    while ( v2 != v3 );
    v2 = *(void ****)a1;
    v17 = *(void ****)(a1 + 8);
    *(_QWORD *)a1 = v10 + 16 * v14;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    while ( v2 != v17 )
    {
      v18 = *((_BYTE *)v17 - 16);
      v17 -= 2;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        v17 + 1,
        v18);
    }
    if ( v2 )
      goto LABEL_17;
  }
}

//----- (0000000000025278) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<decltype(nullptr)>(
        __int64 a1)
{
  __int64 v2; // x8
  __int64 v3; // x8
  __int64 v4; // x0
  unsigned __int64 v5; // x8
  char *v6; // x8
  char v7; // w1
  void **v8; // x10
  __int64 v10; // x8
  char v11; // w1
  void **v12; // x10
  void **v13; // [xsp+10h] [xbp-30h] BYREF
  char v14; // [xsp+18h] [xbp-28h]
  void **v15[2]; // [xsp+20h] [xbp-20h] BYREF

  v15[1] = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *(_QWORD *)(a1 + 16);
  if ( *(_QWORD *)(a1 + 8) == v2 )
  {
    v14 = 0;
    v15[0] = 0LL;
    v6 = *(char **)a1;
    v7 = **(_BYTE **)a1;
    *v6 = 0;
    v14 = v7;
    v8 = (void **)*((_QWORD *)v6 + 1);
    *((void ***)v6 + 1) = v15[0];
    v15[0] = v8;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      v15,
      v7);
    return *(_QWORD *)a1;
  }
  else
  {
    v3 = *(_QWORD *)(v2 - 8);
    if ( *(_BYTE *)v3 == 2 )
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(_QWORD *)(v4 + 8);
      if ( v5 >= *(_QWORD *)(v4 + 16) )
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<decltype(nullptr)>(v4);
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0LL;
        *(_QWORD *)(v4 + 8) += 16LL;
      }
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL) + 8LL) - 16LL;
    }
    else
    {
      v13 = 0LL;
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_BYTE *)v10;
      *(_BYTE *)v10 = 0;
      v12 = *(void ***)(v10 + 8);
      *(_QWORD *)(v10 + 8) = v13;
      v13 = v12;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v13,
        v11);
      return *(_QWORD *)(a1 + 32);
    }
  }
}

//----- (0000000000025390) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<decltype(nullptr)>(
        __int64 a1)
{
  void ***v1; // x19
  void ***v2; // x21
  __int64 v4; // x22
  __int64 v5; // x9
  unsigned __int64 v6; // x9
  unsigned __int64 v7; // x23
  __int64 v8; // x0
  __int64 v9; // x11
  __int64 v10; // x8
  __int64 v11; // x9
  unsigned __int64 v12; // x10
  _QWORD *v13; // x11
  char v14; // t1
  void ***v15; // x21
  char v16; // t1

  v1 = *(void ****)a1;
  v2 = *(void ****)(a1 + 8);
  v4 = ((__int64)v2 - *(_QWORD *)a1) >> 4;
  if ( (unsigned __int64)(v4 + 1) >> 60 )
    std::__vector_base_common<true>::__throw_length_error();
  v5 = *(_QWORD *)(a1 + 16) - (_QWORD)v1;
  if ( (unsigned __int64)(v5 >> 4) > 0x7FFFFFFFFFFFFFELL )
  {
    v7 = 0xFFFFFFFFFFFFFFFLL;
LABEL_10:
    v8 = operator new(16 * v7);
    goto LABEL_11;
  }
  v6 = v5 >> 3;
  if ( v6 >= v4 + 1 )
    v7 = v6;
  else
    v7 = v4 + 1;
  if ( v7 )
  {
    if ( v7 >> 60 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v8 = 0LL;
LABEL_11:
  v9 = v8 + 16 * v4;
  v10 = v8 + 16 * v7;
  v11 = v9 + 16;
  *(_BYTE *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0LL;
  if ( v2 == v1 )
  {
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v10;
    if ( v1 )
LABEL_17:
      operator delete(v1);
  }
  else
  {
    v12 = v4 + ~((unsigned __int64)((char *)v2 - (char *)v1 - 16) >> 4);
    v13 = (_QWORD *)(v9 - 8);
    do
    {
      v14 = *((_BYTE *)v2 - 16);
      v2 -= 2;
      *((_BYTE *)v13 - 8) = v14;
      *v13 = v2[1];
      v13 -= 2;
      *(_BYTE *)v2 = 0;
      v2[1] = 0LL;
    }
    while ( v1 != v2 );
    v1 = *(void ****)a1;
    v15 = *(void ****)(a1 + 8);
    *(_QWORD *)a1 = v8 + 16 * v12;
    *(_QWORD *)(a1 + 8) = v11;
    *(_QWORD *)(a1 + 16) = v10;
    while ( v1 != v15 )
    {
      v16 = *((_BYTE *)v15 - 16);
      v15 -= 2;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        v15 + 1,
        v16);
    }
    if ( v1 )
      goto LABEL_17;
  }
}

//----- (00000000000254CC) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<long &>(
        __int64 a1,
        void ***a2)
{
  __int64 v3; // x8
  __int64 v4; // x8
  __int64 v5; // x0
  unsigned __int64 v6; // x8
  void **v7; // x9
  void **v8; // x8
  char *v9; // x8
  char v10; // w1
  void **v11; // x10
  __int64 v13; // x8
  char v14; // w1
  void **v15; // x10
  void **v16; // [xsp+10h] [xbp-30h] BYREF
  char v17; // [xsp+18h] [xbp-28h]
  void **v18[2]; // [xsp+20h] [xbp-20h] BYREF

  v18[1] = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *(_QWORD *)(a1 + 16);
  if ( *(_QWORD *)(a1 + 8) == v3 )
  {
    v8 = *a2;
    v17 = 5;
    v18[0] = v8;
    v9 = *(char **)a1;
    v10 = **(_BYTE **)a1;
    *v9 = 5;
    v17 = v10;
    v11 = (void **)*((_QWORD *)v9 + 1);
    *((void ***)v9 + 1) = v18[0];
    v18[0] = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      v18,
      v10);
    return *(_QWORD *)a1;
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 8);
    if ( *(_BYTE *)v4 == 2 )
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if ( v6 >= *(_QWORD *)(v5 + 16) )
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<long &>(
          v5,
          a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0LL;
        v7 = *a2;
        *(_BYTE *)v6 = 5;
        *(_QWORD *)(v6 + 8) = v7;
        *(_QWORD *)(v5 + 8) += 16LL;
      }
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL) + 8LL) - 16LL;
    }
    else
    {
      v16 = *a2;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_BYTE *)v13;
      *(_BYTE *)v13 = 5;
      v15 = *(void ***)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v16;
      v16 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v16,
        v14);
      return *(_QWORD *)(a1 + 32);
    }
  }
}

//----- (0000000000025600) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<long &>(
        __int64 a1,
        _QWORD *a2)
{
  void ***v2; // x19
  void ***v3; // x22
  __int64 v5; // x23
  __int64 v7; // x9
  unsigned __int64 v8; // x9
  unsigned __int64 v9; // x24
  __int64 v10; // x0
  __int64 v11; // x11
  __int64 v12; // x8
  __int64 v13; // x9
  unsigned __int64 v14; // x10
  _QWORD *v15; // x11
  char v16; // t1
  void ***v17; // x21
  char v18; // t1

  v2 = *(void ****)a1;
  v3 = *(void ****)(a1 + 8);
  v5 = ((__int64)v3 - *(_QWORD *)a1) >> 4;
  if ( (unsigned __int64)(v5 + 1) >> 60 )
    std::__vector_base_common<true>::__throw_length_error();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if ( (unsigned __int64)(v7 >> 4) > 0x7FFFFFFFFFFFFFELL )
  {
    v9 = 0xFFFFFFFFFFFFFFFLL;
LABEL_10:
    v10 = operator new(16 * v9);
    goto LABEL_11;
  }
  v8 = v7 >> 3;
  if ( v8 >= v5 + 1 )
    v9 = v8;
  else
    v9 = v5 + 1;
  if ( v9 )
  {
    if ( v9 >> 60 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v10 = 0LL;
LABEL_11:
  v11 = v10 + 16 * v5;
  v12 = v10 + 16 * v9;
  *(_QWORD *)(v11 + 8) = *a2;
  v13 = v11 + 16;
  *(_BYTE *)v11 = 5;
  if ( v3 == v2 )
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    if ( v2 )
LABEL_17:
      operator delete(v2);
  }
  else
  {
    v14 = v5 + ~((unsigned __int64)((char *)v3 - (char *)v2 - 16) >> 4);
    v15 = (_QWORD *)(v11 - 8);
    do
    {
      v16 = *((_BYTE *)v3 - 16);
      v3 -= 2;
      *((_BYTE *)v15 - 8) = v16;
      *v15 = v3[1];
      v15 -= 2;
      *(_BYTE *)v3 = 0;
      v3[1] = 0LL;
    }
    while ( v2 != v3 );
    v2 = *(void ****)a1;
    v17 = *(void ****)(a1 + 8);
    *(_QWORD *)a1 = v10 + 16 * v14;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    while ( v2 != v17 )
    {
      v18 = *((_BYTE *)v17 - 16);
      v17 -= 2;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        v17 + 1,
        v18);
    }
    if ( v2 )
      goto LABEL_17;
  }
}

//----- (0000000000025748) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<std::string&>(
        __int64 a1,
        __int128 *a2)
{
  __int64 v3; // x8
  __int64 v4; // x8
  __int64 v5; // x20
  unsigned __int64 v6; // x22
  char *v7; // x8
  char v8; // w1
  void **v9; // x10
  __int64 v11; // x8
  char v12; // w1
  void **v13; // x10
  size_t *v14; // [xsp+10h] [xbp-40h] BYREF
  char v15; // [xsp+18h] [xbp-38h]
  void **v16[2]; // [xsp+20h] [xbp-30h] BYREF

  v16[1] = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *(_QWORD *)(a1 + 16);
  if ( *(_QWORD *)(a1 + 8) == v3 )
  {
    v15 = 3;
    v16[0] = (void **)nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(a2);
    v7 = *(char **)a1;
    v8 = **(_BYTE **)a1;
    *v7 = 3;
    v15 = v8;
    v9 = (void **)*((_QWORD *)v7 + 1);
    *((void ***)v7 + 1) = v16[0];
    v16[0] = v9;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      v16,
      v8);
    return *(_QWORD *)a1;
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 8);
    if ( *(_BYTE *)v4 == 2 )
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if ( v6 >= *(_QWORD *)(v5 + 16) )
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<std::string&>(
          (void **)v5,
          a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0LL;
        *(_BYTE *)v6 = 3;
        *(_QWORD *)(v6 + 8) = nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(a2);
        *(_QWORD *)(v5 + 8) += 16LL;
      }
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL) + 8LL) - 16LL;
    }
    else
    {
      v14 = nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(a2);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_BYTE *)v11;
      *(_BYTE *)v11 = 3;
      v13 = *(void ***)(v11 + 8);
      *(_QWORD *)(v11 + 8) = v14;
      v14 = (size_t *)v13;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        (void ***)&v14,
        v12);
      return *(_QWORD *)(a1 + 32);
    }
  }
}

//----- (000000000002589C) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<std::string&>(
        void **a1,
        __int128 *a2)
{
  __int64 v3; // x22
  __int64 v5; // x9
  unsigned __int64 v6; // x9
  unsigned __int64 v7; // x23
  __int64 v8; // x21
  _QWORD *v9; // x24
  void ***v10; // x10
  void ***v11; // x20
  void *v12; // x8
  void *v13; // x9
  unsigned __int64 v14; // x11
  _QWORD *v15; // x12
  char v16; // t1
  void ***v17; // x22
  char v18; // t1

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  if ( (unsigned __int64)(v3 + 1) >> 60 )
    std::__vector_base_common<true>::__throw_length_error();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if ( (unsigned __int64)(v5 >> 4) > 0x7FFFFFFFFFFFFFELL )
  {
    v7 = 0xFFFFFFFFFFFFFFFLL;
LABEL_10:
    v8 = operator new(16 * v7);
    goto LABEL_11;
  }
  v6 = v5 >> 3;
  if ( v6 >= v3 + 1 )
    v7 = v6;
  else
    v7 = v3 + 1;
  if ( v7 )
  {
    if ( v7 >> 60 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v8 = 0LL;
LABEL_11:
  v9 = (_QWORD *)(v8 + 16 * v3);
  v9[1] = 0LL;
  *(_BYTE *)v9 = 3;
  v9[1] = nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::create<std::string,std::string const&>(a2);
  v11 = (void ***)*a1;
  v10 = (void ***)a1[1];
  v12 = (void *)(v8 + 16 * v7);
  v13 = v9 + 2;
  if ( v10 == *a1 )
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v12;
    if ( v11 )
LABEL_17:
      operator delete(v11);
  }
  else
  {
    v14 = v3 + ~((unsigned __int64)((char *)(v10 - 2) - (char *)v11) >> 4);
    v15 = (_QWORD *)(v8 + 16 * v3 - 8);
    do
    {
      v16 = *((_BYTE *)v10 - 16);
      v10 -= 2;
      *((_BYTE *)v15 - 8) = v16;
      *v15 = v10[1];
      v15 -= 2;
      *(_BYTE *)v10 = 0;
      v10[1] = 0LL;
    }
    while ( v11 != v10 );
    v11 = (void ***)*a1;
    v17 = (void ***)a1[1];
    *a1 = (void *)(v8 + 16 * v14);
    a1[1] = v13;
    a1[2] = v12;
    while ( v11 != v17 )
    {
      v18 = *((_BYTE *)v17 - 16);
      v17 -= 2;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        v17 + 1,
        v18);
    }
    if ( v11 )
      goto LABEL_17;
  }
}

//----- (0000000000025A24) ----------------------------------------------------
__int64 __fastcall nlohmann::detail::json_sax_dom_parser<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::handle_value<unsigned long &>(
        __int64 a1,
        void ***a2)
{
  __int64 v3; // x8
  __int64 v4; // x8
  __int64 v5; // x0
  unsigned __int64 v6; // x8
  void **v7; // x9
  void **v8; // x8
  char *v9; // x8
  char v10; // w1
  void **v11; // x10
  __int64 v13; // x8
  char v14; // w1
  void **v15; // x10
  void **v16; // [xsp+10h] [xbp-30h] BYREF
  char v17; // [xsp+18h] [xbp-28h]
  void **v18[2]; // [xsp+20h] [xbp-20h] BYREF

  v18[1] = *(void ***)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v3 = *(_QWORD *)(a1 + 16);
  if ( *(_QWORD *)(a1 + 8) == v3 )
  {
    v8 = *a2;
    v17 = 6;
    v18[0] = v8;
    v9 = *(char **)a1;
    v10 = **(_BYTE **)a1;
    *v9 = 6;
    v17 = v10;
    v11 = (void **)*((_QWORD *)v9 + 1);
    *((void ***)v9 + 1) = v18[0];
    v18[0] = v11;
    nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
      v18,
      v10);
    return *(_QWORD *)a1;
  }
  else
  {
    v4 = *(_QWORD *)(v3 - 8);
    if ( *(_BYTE *)v4 == 2 )
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if ( v6 >= *(_QWORD *)(v5 + 16) )
      {
        std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<unsigned long &>(
          v5,
          a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0LL;
        v7 = *a2;
        *(_BYTE *)v6 = 6;
        *(_QWORD *)(v6 + 8) = v7;
        *(_QWORD *)(v5 + 8) += 16LL;
      }
      return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8LL) + 8LL) + 8LL) - 16LL;
    }
    else
    {
      v16 = *a2;
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(_BYTE *)v13;
      *(_BYTE *)v13 = 6;
      v15 = *(void ***)(v13 + 8);
      *(_QWORD *)(v13 + 8) = v16;
      v16 = v15;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        &v16,
        v14);
      return *(_QWORD *)(a1 + 32);
    }
  }
}

//----- (0000000000025B58) ----------------------------------------------------
void __fastcall std::vector<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>::__emplace_back_slow_path<unsigned long &>(
        __int64 a1,
        _QWORD *a2)
{
  void ***v2; // x19
  void ***v3; // x22
  __int64 v5; // x23
  __int64 v7; // x9
  unsigned __int64 v8; // x9
  unsigned __int64 v9; // x24
  __int64 v10; // x0
  __int64 v11; // x11
  __int64 v12; // x8
  __int64 v13; // x9
  unsigned __int64 v14; // x10
  _QWORD *v15; // x11
  char v16; // t1
  void ***v17; // x21
  char v18; // t1

  v2 = *(void ****)a1;
  v3 = *(void ****)(a1 + 8);
  v5 = ((__int64)v3 - *(_QWORD *)a1) >> 4;
  if ( (unsigned __int64)(v5 + 1) >> 60 )
    std::__vector_base_common<true>::__throw_length_error();
  v7 = *(_QWORD *)(a1 + 16) - (_QWORD)v2;
  if ( (unsigned __int64)(v7 >> 4) > 0x7FFFFFFFFFFFFFELL )
  {
    v9 = 0xFFFFFFFFFFFFFFFLL;
LABEL_10:
    v10 = operator new(16 * v9);
    goto LABEL_11;
  }
  v8 = v7 >> 3;
  if ( v8 >= v5 + 1 )
    v9 = v8;
  else
    v9 = v5 + 1;
  if ( v9 )
  {
    if ( v9 >> 60 )
      sub_13574("allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size");
    goto LABEL_10;
  }
  v10 = 0LL;
LABEL_11:
  v11 = v10 + 16 * v5;
  v12 = v10 + 16 * v9;
  *(_QWORD *)(v11 + 8) = *a2;
  v13 = v11 + 16;
  *(_BYTE *)v11 = 6;
  if ( v3 == v2 )
  {
    *(_QWORD *)a1 = v11;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    if ( v2 )
LABEL_17:
      operator delete(v2);
  }
  else
  {
    v14 = v5 + ~((unsigned __int64)((char *)v3 - (char *)v2 - 16) >> 4);
    v15 = (_QWORD *)(v11 - 8);
    do
    {
      v16 = *((_BYTE *)v3 - 16);
      v3 -= 2;
      *((_BYTE *)v15 - 8) = v16;
      *v15 = v3[1];
      v15 -= 2;
      *(_BYTE *)v3 = 0;
      v3[1] = 0LL;
    }
    while ( v2 != v3 );
    v2 = *(void ****)a1;
    v17 = *(void ****)(a1 + 8);
    *(_QWORD *)a1 = v10 + 16 * v14;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = v12;
    while ( v2 != v17 )
    {
      v18 = *((_BYTE *)v17 - 16);
      v17 -= 2;
      nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
        v17 + 1,
        v18);
    }
    if ( v2 )
      goto LABEL_17;
  }
}

//----- (0000000000025CA0) ----------------------------------------------------
__int64 __fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::find<std::string>(
        __int64 a1,
        unsigned __int8 *a2)
{
  __int64 v2; // x19
  __int64 v3; // x23
  unsigned __int64 v4; // x8
  __int64 v5; // x20
  size_t v6; // x22
  unsigned __int8 *v7; // x21
  unsigned __int64 v8; // x9
  size_t v9; // x24
  size_t v10; // x2
  const void *v11; // x0
  int v12; // w0
  unsigned __int64 v13; // x9
  size_t v14; // x23
  size_t v15; // x2
  const void *v16; // x1
  int v17; // w0

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if ( !v3 )
    return v2;
  v4 = *a2;
  v5 = a1 + 8;
  v6 = (v4 & 1) != 0 ? *((_QWORD *)a2 + 1) : v4 >> 1;
  v7 = (v4 & 1) != 0 ? (unsigned __int8 *)*((_QWORD *)a2 + 2) : a2 + 1;
  do
  {
    v8 = *(unsigned __int8 *)(v3 + 32);
    if ( (v8 & 1) != 0 )
      v9 = *(_QWORD *)(v3 + 40);
    else
      v9 = v8 >> 1;
    if ( v6 >= v9 )
      v10 = v9;
    else
      v10 = v6;
    if ( !v10
      || ((v8 & 1) == 0 ? (v11 = (const void *)(v3 + 33)) : (v11 = *(const void **)(v3 + 48)),
          (v12 = memcmp(v11, v7, v10)) == 0) )
    {
      if ( v9 < v6 )
        v12 = -1;
      else
        v12 = v6 < v9;
    }
    if ( v12 >= 0 )
      v5 = v3;
    v3 = *(_QWORD *)(v3 + 8LL * (v12 < 0));
  }
  while ( v3 );
  if ( v5 == v2 )
    return v2;
  v13 = *(unsigned __int8 *)(v5 + 32);
  if ( (v13 & 1) != 0 )
    v14 = *(_QWORD *)(v5 + 40);
  else
    v14 = v13 >> 1;
  if ( v14 >= v6 )
    v15 = v6;
  else
    v15 = v14;
  if ( v15 )
  {
    v16 = (v13 & 1) != 0 ? *(const void **)(v5 + 48) : (const void *)(v5 + 33);
    v17 = memcmp(v7, v16, v15);
    if ( v17 )
    {
      if ( (v17 & 0x80000000) == 0 )
        return v5;
      return v2;
    }
  }
  if ( v6 < v14 )
    return v2;
  return v5;
}

//----- (0000000000025DAC) ----------------------------------------------------
__int64 __fastcall pudutech::getSteadyClockMill(pudutech *this)
{
  return std::chrono::steady_clock::now(this) / 1000000LL;
}

//----- (0000000000025DDC) ----------------------------------------------------
long double __fastcall protocol::DomainSockClient::DomainSockClient(protocol::DomainSockClient *this)
{
  char *v1; // x0
  long double result; // q0

  *((_QWORD *)this + 31) = 0LL;
  v1 = (char *)this + 248;
  *((_WORD *)v1 - 122) = 0;
  *(v1 - 242) = 0;
  *((_QWORD *)v1 - 3) = 0LL;
  *(_OWORD *)&result = 0uLL;
  v1[16] = 1;
  *((_QWORD *)v1 - 2) = 0LL;
  *((_QWORD *)v1 - 1) = v1;
  *((_OWORD *)v1 - 4) = 0u;
  *((_OWORD *)v1 - 3) = 0u;
  *((_OWORD *)v1 - 6) = 0u;
  *((_OWORD *)v1 - 5) = 0u;
  *((_OWORD *)v1 - 8) = 0u;
  *((_OWORD *)v1 - 7) = 0u;
  *((_QWORD *)v1 + 1) = 0LL;
  *((_DWORD *)v1 + 11) = 0;
  *(_QWORD *)(v1 + 36) = 0LL;
  *(_QWORD *)(v1 + 20) = 0LL;
  *((_QWORD *)v1 - 4) = v1 - 24;
  *(_QWORD *)(v1 + 28) = 0LL;
  return result;
}

//----- (0000000000025E28) ----------------------------------------------------
void __fastcall protocol::DomainSockClient::~DomainSockClient(protocol::DomainSockClient *this)
{
  std::mutex *v2; // x20
  protocol::DomainSockClient *i; // x1
  protocol::DomainSockClient *j; // x1
  std::thread *v5; // x0
  const char *v6; // x24
  size_t v7; // x0
  size_t v8; // x23
  char *v9; // x25
  unsigned __int64 v10; // x26
  char v11; // w23
  std::__shared_weak_count *v12; // x19
  unsigned __int64 *v13; // x8
  unsigned __int64 v14; // x9
  _DWORD v15[4]; // [xsp+0h] [xbp-1E0h] BYREF
  void *v16; // [xsp+10h] [xbp-1D0h]
  int v17; // [xsp+18h] [xbp-1C8h] BYREF
  unsigned __int64 v18; // [xsp+20h] [xbp-1C0h] BYREF
  size_t v19; // [xsp+28h] [xbp-1B8h]
  void *v20; // [xsp+30h] [xbp-1B0h]
  char v21[8]; // [xsp+38h] [xbp-1A8h] BYREF
  _QWORD v22[42]; // [xsp+40h] [xbp-1A0h] BYREF

  v2 = (protocol::DomainSockClient *)((char *)this + 176);
  v22[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  std::mutex::lock((protocol::DomainSockClient *)((char *)this + 176));
  for ( i = (protocol::DomainSockClient *)*((_QWORD *)this + 27);
        (protocol::DomainSockClient *)((char *)this + 224) != i;
        i = (protocol::DomainSockClient *)std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::erase(
                                            (_QWORD *)this + 27,
                                            (__int64)i) )
  {
    ;
  }
  for ( j = (protocol::DomainSockClient *)*((_QWORD *)this + 30);
        (protocol::DomainSockClient *)((char *)this + 248) != j;
        j = (protocol::DomainSockClient *)std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::erase(
                                            (_QWORD *)this + 30,
                                            (__int64)j) )
  {
    ;
  }
  v5 = (std::thread *)*((_QWORD *)this + 15);
  *((_BYTE *)this + 4) = 0;
  if ( v5 )
    std::thread::detach(v5);
  if ( (word_455B8 & 1) != 0 )
    v6 = (const char *)qword_455C8;
  else
    v6 = (char *)&word_455B8 + 1;
  v17 = dword_455B0;
  v19 = 0LL;
  v20 = 0LL;
  v18 = 0LL;
  v7 = strlen(v6);
  if ( v7 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v8 = v7;
  if ( v7 >= 0x17 )
  {
    v10 = (v7 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v9 = (char *)operator new(v10);
    v19 = v8;
    v20 = v9;
    v18 = v10 | 1;
    goto LABEL_17;
  }
  v9 = (char *)&v18 + 1;
  LOBYTE(v18) = 2 * v7;
  if ( v7 )
LABEL_17:
    memcpy(v9, v6, v8);
  v9[v8] = 0;
  if ( (g3::logLevel(&v17) & 1) != 0 )
  {
    v15[3] = 0;
    v16 = 0LL;
    LOBYTE(v15[0]) = 20;
    strcpy((char *)v15 + 1, "DomainSock");
    v11 = g3::logTag(v15);
    if ( (v15[0] & 1) == 0 )
    {
      if ( (v18 & 1) == 0 )
        goto LABEL_21;
LABEL_26:
      operator delete(v20);
      if ( (v11 & 1) == 0 )
        goto LABEL_28;
      goto LABEL_27;
    }
    operator delete(v16);
    if ( (v18 & 1) != 0 )
      goto LABEL_26;
  }
  else
  {
    v11 = 0;
    if ( (v18 & 1) != 0 )
      goto LABEL_26;
  }
LABEL_21:
  if ( (v11 & 1) != 0 )
  {
LABEL_27:
    LogCapture::LogCapture((LogCapture *)v21, "DomainSock", (const LEVELS *)&dword_455B0, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(v22, (__int64)"Domain Sock Client destruct", 27LL);
    LogCapture::~LogCapture((LogCapture *)v21);
  }
LABEL_28:
  std::mutex::unlock(v2);
  if ( (*((_BYTE *)this + 272) & 1) != 0 )
    operator delete(*((void **)this + 36));
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::destroy(
    (__int64)this + 240,
    *((char **)this + 31));
  std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::destroy(
    (__int64)this + 216,
    *((char **)this + 28));
  std::mutex::~mutex(v2);
  std::mutex::~mutex((protocol::DomainSockClient *)((char *)this + 136));
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if ( v12 )
  {
    v13 = (unsigned __int64 *)((char *)v12 + 8);
    do
      v14 = __ldaxr(v13);
    while ( __stlxr(v14 - 1, v13) );
    if ( !v14 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v12 + 16LL))(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 455B0: using guessed type int dword_455B0;
// 455B8: using guessed type __int16 word_455B8;
// 455C8: using guessed type __int64 qword_455C8;
// 25E28: using guessed type char var_1A8[8];

//----- (000000000002617C) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::connect(__int64 a1, __int64 *a2)
{
  unsigned __int64 v4; // x8
  __int64 v5; // x9
  char *v7; // x1
  unsigned __int64 v8; // x2
  unsigned __int64 v9; // x8
  char *v10; // x1
  size_t v11; // x2
  _QWORD *v12; // x0
  _QWORD *v13; // x20
  _QWORD *v14; // x22
  std::__shared_weak_count *v15; // x21
  unsigned __int64 *v16; // x8
  unsigned __int64 v17; // x9
  const char *v18; // x21
  size_t v19; // x0
  size_t v20; // x20
  char *v21; // x22
  const char *v22; // x20
  size_t v23; // x0
  size_t v24; // x19
  char *v25; // x21
  unsigned __int64 v26; // x22
  char v27; // w19
  unsigned __int64 v28; // x23
  char v29; // w20
  __int64 result; // x0
  _DWORD v31[4]; // [xsp+0h] [xbp-200h] BYREF
  void *v32; // [xsp+10h] [xbp-1F0h]
  int v33; // [xsp+18h] [xbp-1E8h] BYREF
  unsigned __int64 v34; // [xsp+20h] [xbp-1E0h] BYREF
  size_t v35; // [xsp+28h] [xbp-1D8h]
  void *v36; // [xsp+30h] [xbp-1D0h]
  _DWORD v37[4]; // [xsp+38h] [xbp-1C8h] BYREF
  void *v38; // [xsp+48h] [xbp-1B8h]
  int v39; // [xsp+50h] [xbp-1B0h] BYREF
  unsigned __int64 v40; // [xsp+58h] [xbp-1A8h] BYREF
  size_t v41; // [xsp+60h] [xbp-1A0h]
  void *v42; // [xsp+68h] [xbp-198h]
  __int128 v43; // [xsp+70h] [xbp-190h] BYREF
  __int64 v44; // [xsp+80h] [xbp-180h]
  __int64 v45; // [xsp+1B8h] [xbp-48h]

  v45 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = *(unsigned __int8 *)a2;
  if ( (v4 & 1) != 0 )
    v5 = a2[1];
  else
    v5 = v4 >> 1;
  if ( a2 != &qword_45700 && !v5 )
  {
    if ( (qword_45700 & 1) != 0 )
      v7 = (char *)qword_45710;
    else
      v7 = (char *)&qword_45700 + 1;
    if ( (qword_45700 & 1) != 0 )
      v8 = qword_45708;
    else
      v8 = (unsigned __int64)(unsigned __int8)qword_45700 >> 1;
    std::string::assign(a2, v7, v8);
  }
  if ( (__int64 *)(a1 + 272) != a2 )
  {
    v9 = *(unsigned __int8 *)a2;
    if ( (v9 & 1) != 0 )
      v10 = (char *)a2[2];
    else
      v10 = (char *)a2 + 1;
    if ( (v9 & 1) != 0 )
      v11 = a2[1];
    else
      v11 = v9 >> 1;
    std::string::assign((__int64 *)(a1 + 272), v10, v11);
  }
  if ( (protocol::DomainSockClient::create(a1, (__int64)a2) & 1) == 0 )
  {
    if ( (word_45638 & 1) != 0 )
      v22 = (const char *)qword_45648;
    else
      v22 = (char *)&word_45638 + 1;
    v33 = dword_45630;
    v35 = 0LL;
    v36 = 0LL;
    v34 = 0LL;
    v23 = strlen(v22);
    if ( v23 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v24 = v23;
    if ( v23 >= 0x17 )
    {
      v26 = (v23 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v25 = (char *)operator new(v26);
      v35 = v24;
      v36 = v25;
      v34 = v26 | 1;
    }
    else
    {
      v25 = (char *)&v34 + 1;
      LOBYTE(v34) = 2 * v23;
      if ( !v23 )
      {
LABEL_43:
        v25[v24] = 0;
        if ( (g3::logLevel(&v33) & 1) != 0 )
        {
          v31[3] = 0;
          v32 = 0LL;
          LOBYTE(v31[0]) = 20;
          strcpy((char *)v31 + 1, "DomainSock");
          v27 = g3::logTag(v31);
          if ( (v31[0] & 1) == 0 )
          {
            if ( (v34 & 1) == 0 )
              goto LABEL_46;
LABEL_60:
            operator delete(v36);
            if ( (v27 & 1) == 0 )
              return 0LL;
LABEL_61:
            LogCapture::LogCapture((LogCapture *)&v43, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
            std::__put_character_sequence<char,std::char_traits<char>>(
              (_QWORD *)&v43 + 1,
              (__int64)"local socket server init fail!",
              30LL);
            LogCapture::~LogCapture((LogCapture *)&v43);
            return 0LL;
          }
          operator delete(v32);
          if ( (v34 & 1) != 0 )
            goto LABEL_60;
        }
        else
        {
          v27 = 0;
          if ( (v34 & 1) != 0 )
            goto LABEL_60;
        }
LABEL_46:
        if ( (v27 & 1) == 0 )
          return 0LL;
        goto LABEL_61;
      }
    }
    memcpy(v25, v22, v24);
    goto LABEL_43;
  }
  *(_BYTE *)(a1 + 4) = 1;
  v43 = (unsigned __int64)protocol::DomainSockClient::run;
  v44 = a1;
  v12 = (_QWORD *)operator new(0x20uLL);
  v12[2] = 0LL;
  v13 = v12;
  v14 = v12 + 3;
  *v12 = off_43FE0;
  v12[1] = 0LL;
  sub_29FB8(v12 + 3, &v43);
  v15 = *(std::__shared_weak_count **)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v14;
  *(_QWORD *)(a1 + 128) = v13;
  if ( v15 )
  {
    v16 = (unsigned __int64 *)((char *)v15 + 8);
    do
      v17 = __ldaxr(v16);
    while ( __stlxr(v17 - 1, v16) );
    if ( !v17 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v15 + 16LL))(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if ( (word_455F8 & 1) != 0 )
    v18 = (const char *)qword_45608;
  else
    v18 = (char *)&word_455F8 + 1;
  v39 = dword_455F0;
  v41 = 0LL;
  v42 = 0LL;
  v40 = 0LL;
  v19 = strlen(v18);
  if ( v19 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v20 = v19;
  if ( v19 >= 0x17 )
  {
    v28 = (v19 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v21 = (char *)operator new(v28);
    v41 = v20;
    v42 = v21;
    v40 = v28 | 1;
    goto LABEL_49;
  }
  v21 = (char *)&v40 + 1;
  LOBYTE(v40) = 2 * v19;
  if ( v19 )
LABEL_49:
    memcpy(v21, v18, v20);
  v21[v20] = 0;
  if ( (g3::logLevel(&v39) & 1) == 0 )
  {
    v29 = 0;
    if ( (v40 & 1) != 0 )
      goto LABEL_64;
LABEL_53:
    if ( (v29 & 1) == 0 )
      goto LABEL_66;
    goto LABEL_65;
  }
  v37[3] = 0;
  v38 = 0LL;
  LOBYTE(v37[0]) = 20;
  strcpy((char *)v37 + 1, "DomainSock");
  v29 = g3::logTag(v37);
  if ( (v37[0] & 1) != 0 )
  {
    operator delete(v38);
    if ( (v40 & 1) != 0 )
      goto LABEL_64;
    goto LABEL_53;
  }
  if ( (v40 & 1) == 0 )
    goto LABEL_53;
LABEL_64:
  operator delete(v42);
  if ( (v29 & 1) != 0 )
  {
LABEL_65:
    LogCapture::LogCapture((LogCapture *)&v43, "DomainSock", (const LEVELS *)&dword_455F0, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(
      (_QWORD *)&v43 + 1,
      (__int64)"local socket server init success!",
      33LL);
    LogCapture::~LogCapture((LogCapture *)&v43);
  }
LABEL_66:
  result = 1LL;
  *(_BYTE *)(a1 + 5) = 1;
  return result;
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 43FE0: using guessed type __int64 (__fastcall *off_43FE0[3])();
// 455F0: using guessed type int dword_455F0;
// 455F8: using guessed type __int16 word_455F8;
// 45608: using guessed type __int64 qword_45608;
// 45630: using guessed type int dword_45630;
// 45638: using guessed type __int16 word_45638;
// 45648: using guessed type __int64 qword_45648;
// 45700: using guessed type __int64 qword_45700;
// 45708: using guessed type __int64 qword_45708;
// 45710: using guessed type __int64 qword_45710;

//----- (0000000000026674) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::create(__int64 a1, __int64 a2)
{
  int v4; // w0
  unsigned int v5; // w20
  const char *v6; // x1
  char *v7; // x0
  int v8; // w0
  const char *v9; // x20
  size_t v10; // x0
  size_t v11; // x19
  char *v12; // x21
  const char *v13; // x21
  size_t v14; // x0
  size_t v15; // x20
  char *v16; // x22
  unsigned __int64 v17; // x22
  char v18; // w19
  _QWORD *v19; // x19
  __int64 v20; // x1
  int *v21; // x0
  char *v22; // x20
  __int64 v23; // x0
  const char *v24; // x21
  size_t v25; // x0
  size_t v26; // x20
  char *v27; // x22
  unsigned __int64 v28; // x23
  char v29; // w20
  unsigned __int64 v30; // x23
  char v31; // w20
  _QWORD *v32; // x20
  __int64 v33; // x1
  int *v34; // x0
  char *v35; // x21
  __int64 v36; // x0
  _QWORD *v37; // x20
  __int64 v38; // x1
  int *v39; // x0
  char *v40; // x21
  __int64 v41; // x0
  _DWORD v43[4]; // [xsp+0h] [xbp-240h] BYREF
  void *v44; // [xsp+10h] [xbp-230h]
  int v45; // [xsp+18h] [xbp-228h] BYREF
  unsigned __int64 v46; // [xsp+20h] [xbp-220h] BYREF
  size_t v47; // [xsp+28h] [xbp-218h]
  void *v48; // [xsp+30h] [xbp-210h]
  _DWORD v49[4]; // [xsp+38h] [xbp-208h] BYREF
  void *v50; // [xsp+48h] [xbp-1F8h]
  int v51; // [xsp+50h] [xbp-1F0h] BYREF
  unsigned __int64 v52; // [xsp+58h] [xbp-1E8h] BYREF
  size_t v53; // [xsp+60h] [xbp-1E0h]
  void *v54; // [xsp+68h] [xbp-1D8h]
  int optval; // [xsp+74h] [xbp-1CCh] BYREF
  _DWORD v56[4]; // [xsp+78h] [xbp-1C8h] BYREF
  void *v57; // [xsp+88h] [xbp-1B8h]
  int v58; // [xsp+90h] [xbp-1B0h] BYREF
  unsigned __int64 v59; // [xsp+98h] [xbp-1A8h] BYREF
  size_t v60; // [xsp+A0h] [xbp-1A0h]
  void *v61; // [xsp+A8h] [xbp-198h]
  char v62[8]; // [xsp+B0h] [xbp-190h] BYREF
  _QWORD v63[41]; // [xsp+B8h] [xbp-188h] BYREF

  v63[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v4 = socket(1, 1, 0);
  *(_DWORD *)a1 = v4;
  if ( v4 == -1 )
  {
    if ( (word_45638 & 1) != 0 )
      v9 = (const char *)qword_45648;
    else
      v9 = (char *)&word_45638 + 1;
    v58 = dword_45630;
    v60 = 0LL;
    v61 = 0LL;
    v59 = 0LL;
    v10 = strlen(v9);
    if ( v10 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v11 = v10;
    if ( v10 >= 0x17 )
    {
      v17 = (v10 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v12 = (char *)operator new(v17);
      v60 = v11;
      v61 = v12;
      v59 = v17 | 1;
    }
    else
    {
      v12 = (char *)&v59 + 1;
      LOBYTE(v59) = 2 * v10;
      if ( !v10 )
      {
LABEL_24:
        v12[v11] = 0;
        if ( (g3::logLevel(&v58) & 1) != 0 )
        {
          v56[3] = 0;
          v57 = 0LL;
          LOBYTE(v56[0]) = 20;
          strcpy((char *)v56 + 1, "DomainSock");
          v18 = g3::logTag(v56);
          if ( (v56[0] & 1) == 0 )
          {
            if ( (v59 & 1) == 0 )
              goto LABEL_27;
LABEL_48:
            operator delete(v61);
            if ( (v18 & 1) != 0 )
              goto LABEL_28;
            return 0;
          }
          operator delete(v57);
          if ( (v59 & 1) != 0 )
            goto LABEL_48;
        }
        else
        {
          v18 = 0;
          if ( (v59 & 1) != 0 )
            goto LABEL_48;
        }
LABEL_27:
        if ( (v18 & 1) != 0 )
        {
LABEL_28:
          LogCapture::LogCapture((LogCapture *)v62, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
          v19 = std::__put_character_sequence<char,std::char_traits<char>>(
                  v63,
                  (__int64)"create socket failed!, error is ",
                  32LL);
          v21 = (int *)__errno(v19, v20);
          v22 = strerror(*v21);
          v23 = strlen(v22);
          std::__put_character_sequence<char,std::char_traits<char>>(v19, (__int64)v22, v23);
          LogCapture::~LogCapture((LogCapture *)v62);
          return 0;
        }
        return 0;
      }
    }
    memcpy(v12, v9, v11);
    goto LABEL_24;
  }
  optval = 1;
  if ( setsockopt(v4, 1, 2, &optval, 4u) == -1 )
  {
    if ( (word_45638 & 1) != 0 )
      v13 = (const char *)qword_45648;
    else
      v13 = (char *)&word_45638 + 1;
    v51 = dword_45630;
    v53 = 0LL;
    v54 = 0LL;
    v52 = 0LL;
    v14 = strlen(v13);
    if ( v14 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_69;
    v15 = v14;
    if ( v14 >= 0x17 )
    {
      v28 = (v14 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v16 = (char *)operator new(v28);
      v53 = v15;
      v54 = v16;
      v52 = v28 | 1;
    }
    else
    {
      v16 = (char *)&v52 + 1;
      LOBYTE(v52) = 2 * v14;
      if ( !v14 )
      {
LABEL_40:
        v16[v15] = 0;
        if ( (g3::logLevel(&v51) & 1) != 0 )
        {
          v49[3] = 0;
          v50 = 0LL;
          LOBYTE(v49[0]) = 20;
          strcpy((char *)v49 + 1, "DomainSock");
          v29 = g3::logTag(v49);
          if ( (v49[0] & 1) == 0 )
          {
            if ( (v52 & 1) == 0 )
              goto LABEL_43;
LABEL_60:
            operator delete(v54);
            if ( (v29 & 1) == 0 )
              goto LABEL_66;
LABEL_61:
            LogCapture::LogCapture((LogCapture *)v62, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
            v32 = std::__put_character_sequence<char,std::char_traits<char>>(
                    v63,
                    (__int64)"setsockopt SO_REUSEADDR failed! error is ",
                    41LL);
            v34 = (int *)__errno(v32, v33);
            v35 = strerror(*v34);
            v36 = strlen(v35);
            std::__put_character_sequence<char,std::char_traits<char>>(v32, (__int64)v35, v36);
LABEL_65:
            LogCapture::~LogCapture((LogCapture *)v62);
            goto LABEL_66;
          }
          operator delete(v50);
          if ( (v52 & 1) != 0 )
            goto LABEL_60;
        }
        else
        {
          v29 = 0;
          if ( (v52 & 1) != 0 )
            goto LABEL_60;
        }
LABEL_43:
        if ( (v29 & 1) == 0 )
          goto LABEL_66;
        goto LABEL_61;
      }
    }
    memcpy(v16, v13, v15);
    goto LABEL_40;
  }
  v5 = 1;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 102) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_WORD *)(a1 + 8) = 1;
  *(_BYTE *)(a1 + 10) = 0;
  if ( (*(_BYTE *)a2 & 1) != 0 )
    v6 = *(const char **)(a2 + 16);
  else
    v6 = (const char *)(a2 + 1);
  v7 = strcpy((char *)(a1 + 11), v6);
  v8 = strlen(v7);
  if ( connect(*(_DWORD *)a1, (const struct sockaddr *)(a1 + 8), v8 + 3) == -1 )
  {
    if ( (word_45638 & 1) != 0 )
      v24 = (const char *)qword_45648;
    else
      v24 = (char *)&word_45638 + 1;
    v45 = dword_45630;
    v47 = 0LL;
    v48 = 0LL;
    v46 = 0LL;
    v25 = strlen(v24);
    if ( v25 < 0xFFFFFFFFFFFFFFF0LL )
    {
      v26 = v25;
      if ( v25 >= 0x17 )
      {
        v30 = (v25 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v27 = (char *)operator new(v30);
        v47 = v26;
        v48 = v27;
        v46 = v30 | 1;
      }
      else
      {
        v27 = (char *)&v46 + 1;
        LOBYTE(v46) = 2 * v25;
        if ( !v25 )
        {
LABEL_52:
          v27[v26] = 0;
          if ( (g3::logLevel(&v45) & 1) != 0 )
          {
            v43[3] = 0;
            v44 = 0LL;
            LOBYTE(v43[0]) = 20;
            strcpy((char *)v43 + 1, "DomainSock");
            v31 = g3::logTag(v43);
            if ( (v43[0] & 1) == 0 )
            {
              if ( (v46 & 1) == 0 )
                goto LABEL_55;
              goto LABEL_63;
            }
            operator delete(v44);
            if ( (v46 & 1) != 0 )
            {
LABEL_63:
              operator delete(v48);
              if ( (v31 & 1) != 0 )
              {
LABEL_64:
                LogCapture::LogCapture((LogCapture *)v62, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
                v37 = std::__put_character_sequence<char,std::char_traits<char>>(
                        v63,
                        (__int64)"connect failed! error is ",
                        25LL);
                v39 = (int *)__errno(v37, v38);
                v40 = strerror(*v39);
                v41 = strlen(v40);
                std::__put_character_sequence<char,std::char_traits<char>>(v37, (__int64)v40, v41);
                goto LABEL_65;
              }
LABEL_66:
              close(*(_DWORD *)a1);
              v5 = 0;
              *(_DWORD *)a1 = -1;
              return v5;
            }
          }
          else
          {
            v31 = 0;
            if ( (v46 & 1) != 0 )
              goto LABEL_63;
          }
LABEL_55:
          if ( (v31 & 1) == 0 )
            goto LABEL_66;
          goto LABEL_64;
        }
      }
      memcpy(v27, v24, v26);
      goto LABEL_52;
    }
LABEL_69:
    std::__basic_string_common<true>::__throw_length_error();
  }
  *(_BYTE *)(a1 + 6) = 1;
  return v5;
}
// 268EC: variable 'v20' is possibly undefined
// 26B58: variable 'v33' is possibly undefined
// 26BE0: variable 'v38' is possibly undefined
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);
// 45630: using guessed type int dword_45630;
// 45638: using guessed type __int16 word_45638;
// 45648: using guessed type __int64 qword_45648;
// 26674: using guessed type char var_190[8];

//----- (0000000000026D34) ----------------------------------------------------
void __fastcall protocol::DomainSockClient::run(protocol::DomainSockClient *this)
{
  unsigned __int64 v2; // x21
  unsigned __int64 v3; // x20
  pthread_t v4; // x0
  bool v5; // cf
  pthread_t v6; // x20
  unsigned __int64 v7; // x8
  char *v8; // x22
  size_t v9; // x21
  const char *v10; // x1
  const char *v11; // x1
  int v12; // w0
  const char *v13; // x22
  size_t v14; // x0
  size_t v15; // x21
  char *v16; // x23
  unsigned __int64 v17; // x24
  char v18; // w21
  _QWORD *v19; // x0
  _DWORD v20[4]; // [xsp+0h] [xbp-5E0h] BYREF
  void *v21; // [xsp+10h] [xbp-5D0h]
  int v22; // [xsp+18h] [xbp-5C8h] BYREF
  unsigned __int64 v23; // [xsp+20h] [xbp-5C0h] BYREF
  size_t v24; // [xsp+28h] [xbp-5B8h]
  void *v25; // [xsp+30h] [xbp-5B0h]
  void *v26; // [xsp+38h] [xbp-5A8h] BYREF
  void *src; // [xsp+40h] [xbp-5A0h]
  __int64 v28; // [xsp+48h] [xbp-598h]
  __int64 v29; // [xsp+50h] [xbp-590h] BYREF
  __int64 v30; // [xsp+58h] [xbp-588h] BYREF
  void *v31; // [xsp+60h] [xbp-580h]
  char buf[1024]; // [xsp+198h] [xbp-448h] BYREF
  __int64 v33; // [xsp+598h] [xbp-48h]

  v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v26 = 0LL;
  src = 0LL;
  v28 = 0LL;
  v2 = *((unsigned __int8 *)this + 272);
  if ( (v2 & 1) != 0 )
    v3 = *((_QWORD *)this + 35);
  else
    v3 = v2 >> 1;
  v4 = pthread_self();
  v5 = v3 >= 0x10;
  v6 = v4;
  if ( v5 )
  {
    v29 = 0LL;
    v30 = 0LL;
    v31 = 0LL;
    v7 = *((_QWORD *)this + 35);
    if ( (v2 & 1) != 0 )
    {
      v8 = (char *)*((_QWORD *)this + 36);
    }
    else
    {
      v7 = (unsigned int)v2 >> 1;
      v8 = (char *)this + 273;
    }
    if ( v7 >= 0xF )
      v9 = 15LL;
    else
      v9 = v7;
    LOBYTE(v29) = 2 * v9;
    if ( v9 )
      memcpy((char *)&v29 + 1, v8, v9);
    *((_BYTE *)&v29 + v9 + 1) = 0;
    if ( (v29 & 1) != 0 )
      v11 = (const char *)v31;
    else
      v11 = (char *)&v29 + 1;
    pthread_setname_np(v6, v11);
    if ( (v29 & 1) != 0 )
      operator delete(v31);
  }
  else
  {
    if ( (v2 & 1) != 0 )
      v10 = (const char *)*((_QWORD *)this + 36);
    else
      v10 = (char *)this + 273;
    pthread_setname_np(v4, v10);
  }
  if ( *((_BYTE *)this + 4) )
  {
    while ( 1 )
    {
      v12 = recv(*(_DWORD *)this, buf, 0x400uLL, 0);
      if ( v12 <= 0 )
        break;
      std::vector<unsigned char>::insert<char *>((__int64)&v26, (char *)src, buf, &buf[v12]);
      while ( (protocol::DomainSockClient::processLoop((__int64)this, (__int64)&v26) & 1) != 0 )
        ;
      if ( !*((_BYTE *)this + 4) )
        goto LABEL_47;
    }
    if ( (word_45638 & 1) != 0 )
      v13 = (const char *)qword_45648;
    else
      v13 = (char *)&word_45638 + 1;
    v22 = dword_45630;
    v24 = 0LL;
    v25 = 0LL;
    v23 = 0LL;
    v14 = strlen(v13);
    if ( v14 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v15 = v14;
    if ( v14 >= 0x17 )
    {
      v17 = (v14 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v16 = (char *)operator new(v17);
      v24 = v15;
      v25 = v16;
      v23 = v17 | 1;
    }
    else
    {
      v16 = (char *)&v23 + 1;
      LOBYTE(v23) = 2 * v14;
      if ( !v14 )
      {
LABEL_39:
        v16[v15] = 0;
        if ( (g3::logLevel(&v22) & 1) != 0 )
        {
          v20[3] = 0;
          v21 = 0LL;
          LOBYTE(v20[0]) = 20;
          strcpy((char *)v20 + 1, "DomainSock");
          v18 = g3::logTag(v20);
          if ( (v20[0] & 1) == 0 )
          {
            if ( (v23 & 1) == 0 )
              goto LABEL_42;
LABEL_45:
            operator delete(v25);
            if ( (v18 & 1) == 0 )
              goto LABEL_47;
            goto LABEL_46;
          }
          operator delete(v21);
          if ( (v23 & 1) != 0 )
            goto LABEL_45;
        }
        else
        {
          v18 = 0;
          if ( (v23 & 1) != 0 )
            goto LABEL_45;
        }
LABEL_42:
        if ( (v18 & 1) == 0 )
          goto LABEL_47;
LABEL_46:
        LogCapture::LogCapture((LogCapture *)&v29, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
        v19 = std::__put_character_sequence<char,std::char_traits<char>>(&v30, (__int64)"recv error:", 11LL);
        std::ostream::operator<<(v19);
        LogCapture::~LogCapture((LogCapture *)&v29);
        goto LABEL_47;
      }
    }
    memcpy(v16, v13, v15);
    goto LABEL_39;
  }
LABEL_47:
  *((_BYTE *)this + 6) = 0;
  if ( v26 )
  {
    src = v26;
    operator delete(v26);
  }
}
// 26DBC: conditional instruction was optimized away because x21.8<10u
// 26DC4: conditional instruction was optimized away because x21.8<10u
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 45630: using guessed type int dword_45630;
// 45638: using guessed type __int16 word_45638;
// 45648: using guessed type __int64 qword_45648;
// 26D34: using guessed type char buf[1024];

//----- (000000000002711C) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::isInited(protocol::DomainSockClient *this)
{
  return *((unsigned __int8 *)this + 5);
}

//----- (0000000000027124) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::isConnected(protocol::DomainSockClient *this)
{
  return *((unsigned __int8 *)this + 6);
}

//----- (000000000002712C) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::addPlugin(__int64 a1, __int128 *a2, __int64 a3)
{
  std::mutex *v3; // x19
  _QWORD *v7; // x20
  __int64 v8; // x0
  void (*v9)(void); // x8
  _QWORD v11[4]; // [xsp+0h] [xbp-70h] BYREF
  _QWORD *v12; // [xsp+20h] [xbp-50h]
  __int64 v13; // [xsp+38h] [xbp-38h]

  v3 = (std::mutex *)(a1 + 176);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  std::mutex::lock((std::mutex *)(a1 + 176));
  v7 = std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>::operator[](
         a1 + 216,
         a2);
  v8 = *(_QWORD *)(a3 + 32);
  if ( v8 )
  {
    if ( a3 == v8 )
    {
      v12 = v11;
      (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v8 + 24LL))(v8, v11);
    }
    else
    {
      v12 = (_QWORD *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v8 + 16LL))(v8);
    }
  }
  else
  {
    v12 = 0LL;
  }
  sub_1BB50(v11, (__int64)v7);
  if ( v11 == v12 )
  {
    v9 = *(void (**)(void))(*v12 + 32LL);
    goto LABEL_10;
  }
  if ( v12 )
  {
    v9 = *(void (**)(void))(*v12 + 40LL);
LABEL_10:
    v9();
  }
  return std::mutex::unlock(v3);
}

//----- (000000000002723C) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::addPlugin(__int64 a1, __int128 *a2, __int64 a3)
{
  std::mutex *v3; // x19
  _QWORD *v7; // x20
  __int64 v8; // x0
  void (*v9)(void); // x8
  _QWORD v11[4]; // [xsp+0h] [xbp-70h] BYREF
  _QWORD *v12; // [xsp+20h] [xbp-50h]
  __int64 v13; // [xsp+38h] [xbp-38h]

  v3 = (std::mutex *)(a1 + 176);
  v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  std::mutex::lock((std::mutex *)(a1 + 176));
  v7 = std::map<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>::operator[](
         a1 + 240,
         a2);
  v8 = *(_QWORD *)(a3 + 32);
  if ( v8 )
  {
    if ( a3 == v8 )
    {
      v12 = v11;
      (*(void (__fastcall **)(__int64, _QWORD *))(*(_QWORD *)v8 + 24LL))(v8, v11);
    }
    else
    {
      v12 = (_QWORD *)(*(__int64 (__fastcall **)(__int64))(*(_QWORD *)v8 + 16LL))(v8);
    }
  }
  else
  {
    v12 = 0LL;
  }
  sub_1BDE4(v11, (__int64)v7);
  if ( v11 == v12 )
  {
    v9 = *(void (**)(void))(*v12 + 32LL);
    goto LABEL_10;
  }
  if ( v12 )
  {
    v9 = *(void (**)(void))(*v12 + 40LL);
LABEL_10:
    v9();
  }
  return std::mutex::unlock(v3);
}

//----- (000000000002734C) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::removePlugin(_QWORD *a1, unsigned __int8 *a2)
{
  std::mutex *v2; // x19
  __int64 v5; // x1
  __int64 v6; // x1

  v2 = (std::mutex *)(a1 + 22);
  std::mutex::lock((std::mutex *)(a1 + 22));
  v5 = std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::find<std::string>(
         (__int64)(a1 + 27),
         a2);
  if ( a1 + 28 != (_QWORD *)v5 )
    std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::erase(
      a1 + 27,
      v5);
  v6 = std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::find<std::string>(
         (__int64)(a1 + 30),
         a2);
  if ( a1 + 31 != (_QWORD *)v6 )
    std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::erase(
      a1 + 30,
      v6);
  return std::mutex::unlock(v2);
}

//----- (00000000000273EC) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::send(__int64 a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  const char *v6; // x23
  size_t v7; // x0
  size_t v8; // x22
  char *v9; // x24
  unsigned __int64 v10; // x25
  char v11; // w22
  _QWORD *v12; // x0
  unsigned __int64 v13; // x8
  __int64 v14; // x1
  __int64 v15; // x2
  _QWORD *v16; // x0
  _QWORD *v17; // x0
  unsigned __int64 v18; // x8
  __int64 v19; // x1
  __int64 v20; // x2
  unsigned __int8 *v21; // x22
  unsigned __int64 v22; // x8
  unsigned __int8 *v23; // x23
  unsigned __int64 v24; // x22
  void **v25; // x21
  _BYTE *v26; // x8
  char v27; // t1
  char v28; // w19
  void *v29; // x0
  void **v31; // [xsp+0h] [xbp-1E0h] BYREF
  _DWORD v32[4]; // [xsp+8h] [xbp-1D8h] BYREF
  void *v33; // [xsp+18h] [xbp-1C8h]
  int v34; // [xsp+20h] [xbp-1C0h] BYREF
  unsigned __int64 v35; // [xsp+28h] [xbp-1B8h] BYREF
  size_t v36; // [xsp+30h] [xbp-1B0h]
  void *v37; // [xsp+38h] [xbp-1A8h]
  char v38[8]; // [xsp+40h] [xbp-1A0h] BYREF
  _QWORD v39[41]; // [xsp+48h] [xbp-198h] BYREF

  v39[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v34 = dword_455B0;
  if ( (word_455B8 & 1) != 0 )
    v6 = (const char *)qword_455C8;
  else
    v6 = (char *)&word_455B8 + 1;
  v36 = 0LL;
  v37 = 0LL;
  v35 = 0LL;
  v7 = strlen(v6);
  if ( v7 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v8 = v7;
  if ( v7 >= 0x17 )
  {
    v10 = (v7 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v9 = (char *)operator new(v10);
    v36 = v8;
    v37 = v9;
    v35 = v10 | 1;
    goto LABEL_9;
  }
  v9 = (char *)&v35 + 1;
  LOBYTE(v35) = 2 * v7;
  if ( v7 )
LABEL_9:
    memcpy(v9, v6, v8);
  v9[v8] = 0;
  if ( (g3::logLevel(&v34) & 1) != 0 )
  {
    v32[3] = 0;
    v33 = 0LL;
    LOBYTE(v32[0]) = 20;
    strcpy((char *)v32 + 1, "DomainSock");
    v11 = g3::logTag(v32);
    if ( (v32[0] & 1) == 0 )
    {
      if ( (v35 & 1) == 0 )
        goto LABEL_13;
LABEL_30:
      operator delete(v37);
      if ( (v11 & 1) != 0 )
        goto LABEL_14;
LABEL_31:
      v21 = a3 + 1;
      goto LABEL_32;
    }
    operator delete(v33);
    if ( (v35 & 1) != 0 )
      goto LABEL_30;
  }
  else
  {
    v11 = 0;
    if ( (v35 & 1) != 0 )
      goto LABEL_30;
  }
LABEL_13:
  if ( (v11 & 1) == 0 )
    goto LABEL_31;
LABEL_14:
  LogCapture::LogCapture((LogCapture *)v38, "DomainSock", (const LEVELS *)&dword_455B0, "", 6, 0LL);
  v12 = std::__put_character_sequence<char,std::char_traits<char>>(v39, (__int64)"sending msg_id:", 15LL);
  v13 = *a2;
  if ( (v13 & 1) != 0 )
    v14 = *((_QWORD *)a2 + 2);
  else
    v14 = (__int64)(a2 + 1);
  if ( (v13 & 1) != 0 )
    v15 = *((_QWORD *)a2 + 1);
  else
    v15 = v13 >> 1;
  v16 = std::__put_character_sequence<char,std::char_traits<char>>(v12, v14, v15);
  v17 = std::__put_character_sequence<char,std::char_traits<char>>(v16, (__int64)" data:", 6LL);
  v18 = *a3;
  if ( (v18 & 1) != 0 )
    v19 = *((_QWORD *)a3 + 2);
  else
    v19 = (__int64)(a3 + 1);
  if ( (v18 & 1) != 0 )
    v20 = *((_QWORD *)a3 + 1);
  else
    v20 = v18 >> 1;
  std::__put_character_sequence<char,std::char_traits<char>>(v17, v19, v20);
  v21 = a3 + 1;
  LogCapture::~LogCapture((LogCapture *)v38);
LABEL_32:
  v22 = *a3;
  if ( (v22 & 1) != 0 )
    v23 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
  else
    v23 = v21;
  if ( (v22 & 1) != 0 )
    v24 = *((_QWORD *)a3 + 1);
  else
    v24 = v22 >> 1;
  v25 = (void **)operator new(0x18uLL);
  v25[1] = 0LL;
  v25[2] = 0LL;
  *v25 = 0LL;
  if ( v24 )
  {
    if ( (v24 & 0x8000000000000000LL) != 0 )
      std::__vector_base_common<true>::__throw_length_error();
    v26 = (_BYTE *)operator new(v24);
    *v25 = v26;
    v25[1] = v26;
    v25[2] = &v26[v24];
    do
    {
      v27 = *v23++;
      --v24;
      *v26 = v27;
      v26 = (char *)v25[1] + 1;
      v25[1] = v26;
    }
    while ( v24 );
  }
  v31 = v25;
  v28 = protocol::DomainSockClient::send(a1, a2, (__int64)&v31);
  v29 = *v25;
  v31 = 0LL;
  if ( v29 )
  {
    v25[1] = v29;
    operator delete(v29);
  }
  operator delete(v25);
  return v28 & 1;
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 455B0: using guessed type int dword_455B0;
// 455B8: using guessed type __int16 word_455B8;
// 455C8: using guessed type __int64 qword_455C8;
// 273EC: using guessed type char var_1A0[8];

//----- (0000000000027758) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::send(__int64 a1, unsigned __int8 *a2, __int64 a3)
{
  unsigned __int64 v4; // x8
  unsigned __int64 v5; // x8
  std::mutex *v6; // x19
  unsigned __int64 v9; // x9
  _DWORD *v10; // x8
  int v11; // w9
  int v12; // w27
  unsigned int v13; // w21
  const char *v14; // x21
  size_t v15; // x0
  size_t v16; // x19
  char *v17; // x22
  const char *v18; // x20
  size_t v19; // x0
  size_t v20; // x19
  char *v21; // x21
  unsigned __int64 v22; // x23
  char v23; // w19
  _QWORD *v24; // x0
  unsigned __int64 v25; // x8
  __int64 v26; // x1
  __int64 v27; // x2
  _QWORD *v28; // x0
  const void *v29; // x1
  _DWORD *v30; // x8
  _BYTE *v31; // x1
  _BYTE *v32; // x8
  const char *v33; // x23
  size_t v34; // x0
  size_t v35; // x22
  char *v36; // x24
  const char *v37; // x21
  size_t v38; // x0
  size_t v39; // x20
  char *v40; // x23
  unsigned __int64 v41; // x22
  char v42; // w19
  unsigned int v43; // w20
  unsigned __int64 v44; // x24
  char v45; // w20
  const char *v46; // x21
  size_t v47; // x0
  size_t v48; // x20
  char *v49; // x23
  _QWORD *v50; // x0
  _QWORD *v51; // x0
  _QWORD *v52; // x20
  __int64 v53; // x1
  int *v54; // x0
  char *v55; // x21
  __int64 v56; // x0
  unsigned __int64 v57; // x24
  char v58; // w20
  _QWORD *v59; // x0
  _QWORD *v60; // x0
  _QWORD *v61; // x20
  __int64 v62; // x1
  int *v63; // x0
  char *v64; // x21
  __int64 v65; // x0
  unsigned __int64 v66; // x25
  char v67; // w22
  _QWORD *v68; // x0
  unsigned __int64 v69; // x8
  __int64 v70; // x1
  __int64 v71; // x2
  _QWORD *v72; // x0
  _QWORD *v73; // x0
  const char *v75; // x21
  size_t v76; // x0
  size_t v77; // x20
  char *v78; // x23
  unsigned __int64 v79; // x24
  char v80; // w20
  _QWORD *v81; // x0
  _QWORD *v82; // x0
  _QWORD *v83; // x20
  __int64 v84; // x1
  int *v85; // x0
  char *v86; // x21
  __int64 v87; // x0
  _DWORD v88[4]; // [xsp+10h] [xbp-300h] BYREF
  void *v89; // [xsp+20h] [xbp-2F0h]
  int v90; // [xsp+28h] [xbp-2E8h] BYREF
  unsigned __int64 v91; // [xsp+30h] [xbp-2E0h] BYREF
  size_t v92; // [xsp+38h] [xbp-2D8h]
  void *v93; // [xsp+40h] [xbp-2D0h]
  _DWORD v94[4]; // [xsp+48h] [xbp-2C8h] BYREF
  void *v95; // [xsp+58h] [xbp-2B8h]
  int v96; // [xsp+60h] [xbp-2B0h] BYREF
  unsigned __int64 v97; // [xsp+68h] [xbp-2A8h] BYREF
  size_t v98; // [xsp+70h] [xbp-2A0h]
  void *v99; // [xsp+78h] [xbp-298h]
  _DWORD v100[4]; // [xsp+80h] [xbp-290h] BYREF
  void *v101; // [xsp+90h] [xbp-280h]
  int v102; // [xsp+98h] [xbp-278h] BYREF
  unsigned __int64 v103; // [xsp+A0h] [xbp-270h] BYREF
  size_t v104; // [xsp+A8h] [xbp-268h]
  void *v105; // [xsp+B0h] [xbp-260h]
  char v106; // [xsp+B8h] [xbp-258h] BYREF
  _BYTE v107[15]; // [xsp+B9h] [xbp-257h]
  void *v108; // [xsp+C8h] [xbp-248h]
  int v109; // [xsp+D0h] [xbp-240h] BYREF
  unsigned __int64 v110; // [xsp+D8h] [xbp-238h] BYREF
  size_t v111; // [xsp+E0h] [xbp-230h]
  void *v112; // [xsp+E8h] [xbp-228h]
  unsigned int buf; // [xsp+F4h] [xbp-21Ch] BYREF
  char v114; // [xsp+F8h] [xbp-218h] BYREF
  _BYTE v115[15]; // [xsp+F9h] [xbp-217h]
  void *v116; // [xsp+108h] [xbp-208h]
  int v117; // [xsp+110h] [xbp-200h] BYREF
  unsigned __int64 v118; // [xsp+118h] [xbp-1F8h] BYREF
  size_t v119; // [xsp+120h] [xbp-1F0h]
  void *v120; // [xsp+128h] [xbp-1E8h]
  char v121; // [xsp+130h] [xbp-1E0h] BYREF
  _BYTE v122[15]; // [xsp+131h] [xbp-1DFh]
  void *v123; // [xsp+140h] [xbp-1D0h]
  int v124; // [xsp+148h] [xbp-1C8h] BYREF
  unsigned __int64 v125; // [xsp+150h] [xbp-1C0h] BYREF
  size_t v126; // [xsp+158h] [xbp-1B8h]
  void *v127; // [xsp+160h] [xbp-1B0h]
  char v128[8]; // [xsp+168h] [xbp-1A8h] BYREF
  _QWORD v129[42]; // [xsp+170h] [xbp-1A0h] BYREF

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  if ( !*(_BYTE *)(a1 + 6) )
  {
    if ( (word_45618 & 1) != 0 )
      v14 = (const char *)qword_45628;
    else
      v14 = (char *)&word_45618 + 1;
    v124 = dword_45610;
    v126 = 0LL;
    v127 = 0LL;
    v125 = 0LL;
    v15 = strlen(v14);
    if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v16 = v15;
    if ( v15 >= 0x17 )
    {
      v22 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v17 = (char *)operator new(v22);
      v126 = v16;
      v127 = v17;
      v125 = v22 | 1;
    }
    else
    {
      v17 = (char *)&v125 + 1;
      LOBYTE(v125) = 2 * v15;
      if ( !v15 )
      {
LABEL_27:
        v17[v16] = 0;
        if ( (g3::logLevel(&v124) & 1) != 0 )
        {
          *(_QWORD *)&v122[7] = 7037696LL;
          v123 = 0LL;
          v121 = 20;
          *(_QWORD *)v122 = *(_QWORD *)"DomainSock";
          v23 = g3::logTag(&v121);
          if ( (v121 & 1) == 0 )
          {
            if ( (v125 & 1) == 0 )
              goto LABEL_30;
LABEL_33:
            operator delete(v127);
            if ( (v23 & 1) == 0 )
              return 0;
            goto LABEL_34;
          }
          operator delete(v123);
          if ( (v125 & 1) != 0 )
            goto LABEL_33;
        }
        else
        {
          v23 = 0;
          if ( (v125 & 1) != 0 )
            goto LABEL_33;
        }
LABEL_30:
        if ( (v23 & 1) == 0 )
          return 0;
LABEL_34:
        LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45610, "", 6, 0LL);
        v24 = std::__put_character_sequence<char,std::char_traits<char>>(v129, (__int64)"send msg_id:", 12LL);
        v25 = *a2;
        if ( (v25 & 1) != 0 )
          v26 = *((_QWORD *)a2 + 2);
        else
          v26 = (__int64)(a2 + 1);
        if ( (v25 & 1) != 0 )
          v27 = *((_QWORD *)a2 + 1);
        else
          v27 = v25 >> 1;
        v28 = std::__put_character_sequence<char,std::char_traits<char>>(v24, v26, v27);
        std::__put_character_sequence<char,std::char_traits<char>>(v28, (__int64)"client not connect", 18LL);
        goto LABEL_71;
      }
    }
    memcpy(v17, v14, v16);
    goto LABEL_27;
  }
  v4 = *a2;
  if ( (v4 & 1) != 0 )
    v5 = *((_QWORD *)a2 + 1);
  else
    v5 = v4 >> 1;
  if ( v5 )
  {
    v6 = (std::mutex *)(a1 + 136);
    std::mutex::lock((std::mutex *)(a1 + 136));
    v9 = *a2;
    v10 = *(_DWORD **)a3;
    if ( (v9 & 1) != 0 )
      v11 = *((_DWORD *)a2 + 2);
    else
      v11 = v9 >> 1;
    v12 = v11 + 1;
    if ( v10 )
      v13 = v12 + v10[2] - *v10;
    else
      v13 = v11 + 1;
    buf = bswap32(v13);
    if ( (unsigned int)send(*(_DWORD *)a1, &buf, 4uLL, 0) == 4 )
    {
      if ( (*a2 & 1) != 0 )
        v29 = (const void *)*((_QWORD *)a2 + 2);
      else
        v29 = a2 + 1;
      if ( v12 == (unsigned int)send(*(_DWORD *)a1, v29, v12, 0) )
      {
        v30 = *(_DWORD **)a3;
        if ( !*(_QWORD *)a3
          || (v31 = *(_BYTE **)v30, v32 = (_BYTE *)*((_QWORD *)v30 + 1), v32 == v31)
          || *(_QWORD *)(*(_QWORD *)a3 + 8LL) - **(_QWORD **)a3 == (int)send(*(_DWORD *)a1, v31, v32 - v31, 0) )
        {
          if ( (word_455B8 & 1) != 0 )
            v33 = (const char *)qword_455C8;
          else
            v33 = (char *)&word_455B8 + 1;
          v90 = dword_455B0;
          v92 = 0LL;
          v93 = 0LL;
          v91 = 0LL;
          v34 = strlen(v33);
          if ( v34 >= 0xFFFFFFFFFFFFFFF0LL )
            std::__basic_string_common<true>::__throw_length_error();
          v35 = v34;
          if ( v34 >= 0x17 )
          {
            v66 = (v34 + 16) & 0xFFFFFFFFFFFFFFF0LL;
            v36 = (char *)operator new(v66);
            v92 = v35;
            v93 = v36;
            v91 = v66 | 1;
          }
          else
          {
            v36 = (char *)&v91 + 1;
            LOBYTE(v91) = 2 * v34;
            if ( !v34 )
            {
LABEL_112:
              v36[v35] = 0;
              if ( (g3::logLevel(&v90) & 1) != 0 )
              {
                v88[3] = 0;
                v89 = 0LL;
                LOBYTE(v88[0]) = 20;
                strcpy((char *)v88 + 1, "DomainSock");
                v67 = g3::logTag(v88);
                if ( (v88[0] & 1) == 0 )
                {
                  if ( (v91 & 1) == 0 )
                    goto LABEL_115;
LABEL_118:
                  operator delete(v93);
                  if ( (v67 & 1) == 0 )
                  {
LABEL_126:
                    v43 = 1;
                    goto LABEL_127;
                  }
LABEL_119:
                  LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_455B0, "", 6, 0LL);
                  v68 = std::__put_character_sequence<char,std::char_traits<char>>(
                          v129,
                          (__int64)"send finish id:",
                          15LL);
                  v69 = *a2;
                  if ( (v69 & 1) != 0 )
                    v70 = *((_QWORD *)a2 + 2);
                  else
                    v70 = (__int64)(a2 + 1);
                  if ( (v69 & 1) != 0 )
                    v71 = *((_QWORD *)a2 + 1);
                  else
                    v71 = v69 >> 1;
                  v72 = std::__put_character_sequence<char,std::char_traits<char>>(v68, v70, v71);
                  v73 = std::__put_character_sequence<char,std::char_traits<char>>(v72, (__int64)" data:", 6LL);
                  std::ostream::operator<<(v73);
                  LogCapture::~LogCapture((LogCapture *)v128);
                  goto LABEL_126;
                }
                operator delete(v89);
                if ( (v91 & 1) != 0 )
                  goto LABEL_118;
              }
              else
              {
                v67 = 0;
                if ( (v91 & 1) != 0 )
                  goto LABEL_118;
              }
LABEL_115:
              if ( (v67 & 1) == 0 )
                goto LABEL_126;
              goto LABEL_119;
            }
          }
          memcpy(v36, v33, v35);
          goto LABEL_112;
        }
        if ( (word_45638 & 1) != 0 )
          v75 = (const char *)qword_45648;
        else
          v75 = (char *)&word_45638 + 1;
        v96 = dword_45630;
        v98 = 0LL;
        v99 = 0LL;
        v97 = 0LL;
        v76 = strlen(v75);
        if ( v76 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v77 = v76;
        if ( v76 >= 0x17 )
        {
          v79 = (v76 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v78 = (char *)operator new(v79);
          v98 = v77;
          v99 = v78;
          v97 = v79 | 1;
        }
        else
        {
          v78 = (char *)&v97 + 1;
          LOBYTE(v97) = 2 * v76;
          if ( !v76 )
          {
LABEL_142:
            v78[v77] = 0;
            if ( (g3::logLevel(&v96) & 1) != 0 )
            {
              v94[3] = 0;
              v95 = 0LL;
              LOBYTE(v94[0]) = 20;
              strcpy((char *)v94 + 1, "DomainSock");
              v80 = g3::logTag(v94);
              if ( (v94[0] & 1) == 0 )
              {
                if ( (v97 & 1) == 0 )
                  goto LABEL_145;
LABEL_148:
                operator delete(v99);
                if ( (v80 & 1) == 0 )
                  goto LABEL_109;
LABEL_149:
                LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
                v81 = std::__put_character_sequence<char,std::char_traits<char>>(v129, (__int64)"send data fail:", 15LL);
                v82 = std::ostream::operator<<(v81);
                v83 = std::__put_character_sequence<char,std::char_traits<char>>(v82, (__int64)" error is ", 10LL);
                v85 = (int *)__errno(v83, v84);
                v86 = strerror(*v85);
                v87 = strlen(v86);
                std::__put_character_sequence<char,std::char_traits<char>>(v83, (__int64)v86, v87);
                goto LABEL_108;
              }
              operator delete(v95);
              if ( (v97 & 1) != 0 )
                goto LABEL_148;
            }
            else
            {
              v80 = 0;
              if ( (v97 & 1) != 0 )
                goto LABEL_148;
            }
LABEL_145:
            if ( (v80 & 1) == 0 )
              goto LABEL_109;
            goto LABEL_149;
          }
        }
        memcpy(v78, v75, v77);
        goto LABEL_142;
      }
      if ( (word_45638 & 1) != 0 )
        v46 = (const char *)qword_45648;
      else
        v46 = (char *)&word_45638 + 1;
      v102 = dword_45630;
      v104 = 0LL;
      v105 = 0LL;
      v103 = 0LL;
      v47 = strlen(v46);
      if ( v47 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v48 = v47;
      if ( v47 >= 0x17 )
      {
        v57 = (v47 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v49 = (char *)operator new(v57);
        v104 = v48;
        v105 = v49;
        v103 = v57 | 1;
      }
      else
      {
        v49 = (char *)&v103 + 1;
        LOBYTE(v103) = 2 * v47;
        if ( !v47 )
        {
LABEL_98:
          v49[v48] = 0;
          if ( (g3::logLevel(&v102) & 1) != 0 )
          {
            v100[3] = 0;
            v101 = 0LL;
            LOBYTE(v100[0]) = 20;
            strcpy((char *)v100 + 1, "DomainSock");
            v58 = g3::logTag(v100);
            if ( (v100[0] & 1) == 0 )
            {
              if ( (v103 & 1) == 0 )
                goto LABEL_101;
              goto LABEL_106;
            }
            operator delete(v101);
            if ( (v103 & 1) != 0 )
            {
LABEL_106:
              operator delete(v105);
              if ( (v58 & 1) != 0 )
              {
LABEL_107:
                LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
                v59 = std::__put_character_sequence<char,std::char_traits<char>>(
                        v129,
                        (__int64)"send msg_id fail:",
                        17LL);
                v60 = std::ostream::operator<<(v59);
                v61 = std::__put_character_sequence<char,std::char_traits<char>>(v60, (__int64)" error is ", 10LL);
                v63 = (int *)__errno(v61, v62);
                v64 = strerror(*v63);
                v65 = strlen(v64);
                std::__put_character_sequence<char,std::char_traits<char>>(v61, (__int64)v64, v65);
                goto LABEL_108;
              }
LABEL_109:
              v43 = 0;
LABEL_127:
              std::mutex::unlock(v6);
              return v43;
            }
          }
          else
          {
            v58 = 0;
            if ( (v103 & 1) != 0 )
              goto LABEL_106;
          }
LABEL_101:
          if ( (v58 & 1) == 0 )
            goto LABEL_109;
          goto LABEL_107;
        }
      }
      memcpy(v49, v46, v48);
      goto LABEL_98;
    }
    if ( (word_45638 & 1) != 0 )
      v37 = (const char *)qword_45648;
    else
      v37 = (char *)&word_45638 + 1;
    v109 = dword_45630;
    v111 = 0LL;
    v112 = 0LL;
    v110 = 0LL;
    v38 = strlen(v37);
    if ( v38 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v39 = v38;
    if ( v38 >= 0x17 )
    {
      v44 = (v38 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v40 = (char *)operator new(v44);
      v111 = v39;
      v112 = v40;
      v110 = v44 | 1;
    }
    else
    {
      v40 = (char *)&v110 + 1;
      LOBYTE(v110) = 2 * v38;
      if ( !v38 )
      {
LABEL_77:
        v40[v39] = 0;
        if ( (g3::logLevel(&v109) & 1) != 0 )
        {
          *(_QWORD *)&v107[7] = 7037696LL;
          v108 = 0LL;
          v106 = 20;
          *(_QWORD *)v107 = *(_QWORD *)"DomainSock";
          v45 = g3::logTag(&v106);
          if ( (v106 & 1) == 0 )
          {
            if ( (v110 & 1) == 0 )
              goto LABEL_80;
LABEL_90:
            operator delete(v112);
            if ( (v45 & 1) == 0 )
              goto LABEL_109;
LABEL_91:
            LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
            v50 = std::__put_character_sequence<char,std::char_traits<char>>(v129, (__int64)"send msg_len fail:", 18LL);
            v51 = std::ostream::operator<<(v50);
            v52 = std::__put_character_sequence<char,std::char_traits<char>>(v51, (__int64)" error is ", 10LL);
            v54 = (int *)__errno(v52, v53);
            v55 = strerror(*v54);
            v56 = strlen(v55);
            std::__put_character_sequence<char,std::char_traits<char>>(v52, (__int64)v55, v56);
LABEL_108:
            LogCapture::~LogCapture((LogCapture *)v128);
            goto LABEL_109;
          }
          operator delete(v108);
          if ( (v110 & 1) != 0 )
            goto LABEL_90;
        }
        else
        {
          v45 = 0;
          if ( (v110 & 1) != 0 )
            goto LABEL_90;
        }
LABEL_80:
        if ( (v45 & 1) == 0 )
          goto LABEL_109;
        goto LABEL_91;
      }
    }
    memcpy(v40, v37, v39);
    goto LABEL_77;
  }
  if ( (word_45618 & 1) != 0 )
    v18 = (const char *)qword_45628;
  else
    v18 = (char *)&word_45618 + 1;
  v117 = dword_45610;
  v119 = 0LL;
  v120 = 0LL;
  v118 = 0LL;
  v19 = strlen(v18);
  if ( v19 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v20 = v19;
  if ( v19 >= 0x17 )
  {
    v41 = (v19 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v21 = (char *)operator new(v41);
    v119 = v20;
    v120 = v21;
    v118 = v41 | 1;
    goto LABEL_65;
  }
  v21 = (char *)&v118 + 1;
  LOBYTE(v118) = 2 * v19;
  if ( v19 )
LABEL_65:
    memcpy(v21, v18, v20);
  v21[v20] = 0;
  if ( (g3::logLevel(&v117) & 1) != 0 )
  {
    *(_QWORD *)&v115[7] = 7037696LL;
    v116 = 0LL;
    v114 = 20;
    *(_QWORD *)v115 = *(_QWORD *)"DomainSock";
    v42 = g3::logTag(&v114);
    if ( (v114 & 1) == 0 )
    {
      if ( (v118 & 1) == 0 )
        goto LABEL_69;
      goto LABEL_73;
    }
    operator delete(v116);
    if ( (v118 & 1) != 0 )
    {
LABEL_73:
      operator delete(v120);
      if ( (v42 & 1) != 0 )
        goto LABEL_70;
      return 0;
    }
  }
  else
  {
    v42 = 0;
    if ( (v118 & 1) != 0 )
      goto LABEL_73;
  }
LABEL_69:
  if ( (v42 & 1) == 0 )
    return 0;
LABEL_70:
  LogCapture::LogCapture((LogCapture *)v128, "DomainSock", (const LEVELS *)&dword_45610, "", 6, 0LL);
  std::__put_character_sequence<char,std::char_traits<char>>(v129, (__int64)"msg_id cannot be empty", 22LL);
LABEL_71:
  LogCapture::~LogCapture((LogCapture *)v128);
  return 0;
}
// 27D90: variable 'v53' is possibly undefined
// 27EF8: variable 'v62' is possibly undefined
// 28224: variable 'v84' is possibly undefined
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);
// 455B0: using guessed type int dword_455B0;
// 455B8: using guessed type __int16 word_455B8;
// 455C8: using guessed type __int64 qword_455C8;
// 45610: using guessed type int dword_45610;
// 45618: using guessed type __int16 word_45618;
// 45628: using guessed type __int64 qword_45628;
// 45630: using guessed type int dword_45630;
// 45638: using guessed type __int16 word_45638;
// 45648: using guessed type __int64 qword_45648;
// 27758: using guessed type char var_1A8[8];

//----- (0000000000028444) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::processLoop(__int64 a1, __int64 a2)
{
  const char *v4; // x22
  size_t v5; // x0
  size_t v6; // x21
  char *v7; // x23
  int v8; // w8
  const char *v9; // x22
  size_t v10; // x0
  size_t v11; // x21
  char *v12; // x23
  unsigned __int64 v13; // x24
  char v14; // w21
  _QWORD *v15; // x0
  _BYTE *v16; // x8
  unsigned int *v17; // x21
  _BYTE *v18; // x1
  signed __int64 v19; // x22
  __int64 result; // x0
  const char *v21; // x20
  size_t v22; // x0
  size_t v23; // x19
  char *v24; // x21
  unsigned __int64 v25; // x24
  char v26; // w21
  _QWORD *v27; // x0
  _QWORD *v28; // x0
  const char *v29; // x22
  size_t v30; // x0
  size_t v31; // x21
  char *v32; // x23
  unsigned __int64 v33; // x24
  char v34; // w21
  unsigned int *v35; // x22
  __int64 v36; // x9
  unsigned int *v37; // x8
  __int64 v38; // x9
  unsigned int *v39; // x10
  int v40; // w11
  unsigned int *v41; // x28
  unsigned __int64 v42; // x23
  unsigned int *v43; // x0
  unsigned __int64 v44; // x10
  unsigned __int64 v45; // x22
  char v46; // w19
  unsigned int *v47; // x9
  unsigned int *v48; // x11
  __int128 *v49; // x13
  _OWORD *v50; // x14
  unsigned __int64 v51; // x15
  __int128 v52; // q0
  __int128 v53; // q1
  char v54; // t1
  int v55; // w8
  const char *v56; // x22
  size_t v57; // x0
  size_t v58; // x21
  char *v59; // x23
  unsigned __int64 v60; // x24
  char v61; // w21
  _QWORD *v62; // x0
  char *v63; // x1
  __int64 v64; // x2
  unsigned int *v65; // x24
  __int64 v66; // x26
  const char *v67; // x22
  size_t v68; // x0
  size_t v69; // x21
  char *v70; // x23
  unsigned int *v71; // x27
  unsigned __int64 v72; // x24
  char v73; // w21
  char *v74; // x23
  __int64 v75; // x22
  _QWORD *v76; // x0
  _QWORD *v77; // x21
  _BYTE *v78; // x8
  __int64 v79; // x9
  char v80; // t1
  const char *v81; // x21
  size_t v82; // x0
  size_t v83; // x20
  char *v84; // x22
  __int64 v85; // x8
  _BYTE *v86; // x9
  unsigned int *v87; // x22
  _BYTE *v88; // x1
  signed __int64 v89; // x23
  void **v90; // x19
  void *v91; // x0
  unsigned __int64 v92; // x23
  char v93; // w20
  void *v94; // [xsp+10h] [xbp-350h] BYREF
  _DWORD v95[4]; // [xsp+18h] [xbp-348h] BYREF
  void *v96; // [xsp+28h] [xbp-338h]
  int v97; // [xsp+30h] [xbp-330h] BYREF
  unsigned __int64 v98; // [xsp+38h] [xbp-328h] BYREF
  size_t v99; // [xsp+40h] [xbp-320h]
  void *v100; // [xsp+48h] [xbp-318h]
  _DWORD v101[4]; // [xsp+50h] [xbp-310h] BYREF
  void *v102; // [xsp+60h] [xbp-300h]
  int v103; // [xsp+68h] [xbp-2F8h] BYREF
  unsigned __int64 v104; // [xsp+70h] [xbp-2F0h] BYREF
  size_t v105; // [xsp+78h] [xbp-2E8h]
  void *v106; // [xsp+80h] [xbp-2E0h]
  unsigned __int64 v107; // [xsp+88h] [xbp-2D8h] BYREF
  __int64 v108; // [xsp+90h] [xbp-2D0h]
  void *v109; // [xsp+98h] [xbp-2C8h]
  char v110; // [xsp+A0h] [xbp-2C0h] BYREF
  _BYTE v111[15]; // [xsp+A1h] [xbp-2BFh]
  void *v112; // [xsp+B0h] [xbp-2B0h]
  int v113; // [xsp+B8h] [xbp-2A8h] BYREF
  unsigned __int64 v114; // [xsp+C0h] [xbp-2A0h] BYREF
  size_t v115; // [xsp+C8h] [xbp-298h]
  void *v116; // [xsp+D0h] [xbp-290h]
  char v117; // [xsp+D8h] [xbp-288h] BYREF
  _BYTE v118[15]; // [xsp+D9h] [xbp-287h]
  void *v119; // [xsp+E8h] [xbp-278h]
  int v120; // [xsp+F0h] [xbp-270h] BYREF
  unsigned __int64 v121; // [xsp+F8h] [xbp-268h] BYREF
  size_t v122; // [xsp+100h] [xbp-260h]
  void *v123; // [xsp+108h] [xbp-258h]
  char v124; // [xsp+110h] [xbp-250h] BYREF
  _BYTE v125[15]; // [xsp+111h] [xbp-24Fh]
  void *v126; // [xsp+120h] [xbp-240h]
  int v127; // [xsp+128h] [xbp-238h] BYREF
  unsigned __int64 v128; // [xsp+130h] [xbp-230h] BYREF
  size_t v129; // [xsp+138h] [xbp-228h]
  void *v130; // [xsp+140h] [xbp-220h]
  char v131; // [xsp+148h] [xbp-218h] BYREF
  _BYTE v132[15]; // [xsp+149h] [xbp-217h]
  void *v133; // [xsp+158h] [xbp-208h]
  int v134; // [xsp+160h] [xbp-200h] BYREF
  unsigned __int64 v135; // [xsp+168h] [xbp-1F8h] BYREF
  size_t v136; // [xsp+170h] [xbp-1F0h]
  void *v137; // [xsp+178h] [xbp-1E8h]
  char v138; // [xsp+180h] [xbp-1E0h] BYREF
  _BYTE v139[15]; // [xsp+181h] [xbp-1DFh]
  void *v140; // [xsp+190h] [xbp-1D0h]
  int v141; // [xsp+198h] [xbp-1C8h] BYREF
  unsigned __int64 v142; // [xsp+1A0h] [xbp-1C0h] BYREF
  size_t v143; // [xsp+1A8h] [xbp-1B8h]
  void *v144; // [xsp+1B0h] [xbp-1B0h]
  char v145[8]; // [xsp+1B8h] [xbp-1A8h] BYREF
  _QWORD v146[42]; // [xsp+1C0h] [xbp-1A0h] BYREF

  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  if ( *(_BYTE *)(a1 + 264) )
  {
    if ( *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 >= 4uLL )
    {
      *(_DWORD *)(a1 + 268) = bswap32(**(_DWORD **)a2);
      v143 = 0LL;
      v144 = 0LL;
      v141 = dword_455B0;
      v142 = 0LL;
      if ( (word_455B8 & 1) != 0 )
        v4 = (const char *)qword_455C8;
      else
        v4 = (char *)&word_455B8 + 1;
      v5 = strlen(v4);
      if ( v5 < 0xFFFFFFFFFFFFFFF0LL )
      {
        v6 = v5;
        if ( v5 >= 0x17 )
        {
          v13 = (v5 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v7 = (char *)operator new(v13);
          v143 = v6;
          v144 = v7;
          v142 = v13 | 1;
        }
        else
        {
          v7 = (char *)&v142 + 1;
          LOBYTE(v142) = 2 * v5;
          if ( !v5 )
          {
LABEL_20:
            v7[v6] = 0;
            if ( (g3::logLevel(&v141) & 1) != 0 )
            {
              *(_QWORD *)&v139[7] = 7037696LL;
              v140 = 0LL;
              v138 = 20;
              *(_QWORD *)v139 = *(_QWORD *)"DomainSock";
              v14 = g3::logTag(&v138);
              if ( (v138 & 1) == 0 )
              {
                if ( (v142 & 1) == 0 )
                  goto LABEL_23;
LABEL_26:
                operator delete(v144);
                if ( (v14 & 1) == 0 )
                  goto LABEL_28;
                goto LABEL_27;
              }
              operator delete(v140);
              if ( (v142 & 1) != 0 )
                goto LABEL_26;
            }
            else
            {
              v14 = 0;
              if ( (v142 & 1) != 0 )
                goto LABEL_26;
            }
LABEL_23:
            if ( (v14 & 1) == 0 )
            {
LABEL_28:
              v17 = *(unsigned int **)a2;
              v16 = *(_BYTE **)(a2 + 8);
              v18 = (_BYTE *)(*(_QWORD *)a2 + 4LL);
              v19 = v16 - v18;
              if ( v16 != v18 )
                memmove(*(void **)a2, v18, v16 - v18);
              *(_QWORD *)(a2 + 8) = (char *)v17 + v19;
              if ( *(int *)(a1 + 268) >= 1 )
              {
                *(_BYTE *)(a1 + 264) = 0;
                return 1LL;
              }
              if ( (word_45638 & 1) != 0 )
                v21 = (const char *)qword_45648;
              else
                v21 = (char *)&word_45638 + 1;
              v134 = dword_45630;
              v136 = 0LL;
              v137 = 0LL;
              v135 = 0LL;
              v22 = strlen(v21);
              if ( v22 >= 0xFFFFFFFFFFFFFFF0LL )
                std::__basic_string_common<true>::__throw_length_error();
              v23 = v22;
              if ( v22 >= 0x17 )
              {
                v45 = (v22 + 16) & 0xFFFFFFFFFFFFFFF0LL;
                v24 = (char *)operator new(v45);
                v136 = v23;
                v137 = v24;
                v135 = v45 | 1;
              }
              else
              {
                v24 = (char *)&v135 + 1;
                LOBYTE(v135) = 2 * v22;
                if ( !v22 )
                {
LABEL_85:
                  v24[v23] = 0;
                  if ( (g3::logLevel(&v134) & 1) != 0 )
                  {
                    *(_QWORD *)&v132[7] = 7037696LL;
                    v133 = 0LL;
                    v131 = 20;
                    *(_QWORD *)v132 = *(_QWORD *)"DomainSock";
                    v46 = g3::logTag(&v131);
                    if ( (v131 & 1) == 0 )
                    {
                      if ( (v135 & 1) == 0 )
                        goto LABEL_88;
LABEL_114:
                      operator delete(v137);
                      if ( (v46 & 1) == 0 )
                        return 1LL;
LABEL_115:
                      LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
                      std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"msg len is 0", 12LL);
                      LogCapture::~LogCapture((LogCapture *)v145);
                      return 1LL;
                    }
                    operator delete(v133);
                    if ( (v135 & 1) != 0 )
                      goto LABEL_114;
                  }
                  else
                  {
                    v46 = 0;
                    if ( (v135 & 1) != 0 )
                      goto LABEL_114;
                  }
LABEL_88:
                  if ( (v46 & 1) == 0 )
                    return 1LL;
                  goto LABEL_115;
                }
              }
              memcpy(v24, v21, v23);
              goto LABEL_85;
            }
LABEL_27:
            LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_455B0, "", 6, 0LL);
            v15 = std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"parsing msg len:", 16LL);
            std::ostream::operator<<(v15);
            LogCapture::~LogCapture((LogCapture *)v145);
            goto LABEL_28;
          }
        }
        memcpy(v7, v4, v6);
        goto LABEL_20;
      }
LABEL_190:
      std::__basic_string_common<true>::__throw_length_error();
    }
    return 0LL;
  }
  v8 = *(_DWORD *)(a1 + 268);
  if ( v8 <= 0 )
  {
    if ( (word_45638 & 1) != 0 )
      v9 = (const char *)qword_45648;
    else
      v9 = (char *)&word_45638 + 1;
    v127 = dword_45630;
    v129 = 0LL;
    v130 = 0LL;
    v128 = 0LL;
    v10 = strlen(v9);
    if ( v10 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_190;
    v11 = v10;
    if ( v10 >= 0x17 )
    {
      v25 = (v10 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v12 = (char *)operator new(v25);
      v129 = v11;
      v130 = v12;
      v128 = v25 | 1;
    }
    else
    {
      v12 = (char *)&v128 + 1;
      LOBYTE(v128) = 2 * v10;
      if ( !v10 )
      {
LABEL_43:
        v12[v11] = 0;
        if ( (g3::logLevel(&v127) & 1) != 0 )
        {
          *(_QWORD *)&v125[7] = 7037696LL;
          v126 = 0LL;
          v124 = 20;
          *(_QWORD *)v125 = *(_QWORD *)"DomainSock";
          v26 = g3::logTag(&v124);
          if ( (v124 & 1) == 0 )
          {
            if ( (v128 & 1) == 0 )
              goto LABEL_46;
LABEL_49:
            operator delete(v130);
            if ( (v26 & 1) == 0 )
            {
LABEL_51:
              v8 = *(_DWORD *)(a1 + 268);
              *(_BYTE *)(a1 + 264) = 1;
              goto LABEL_52;
            }
LABEL_50:
            LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
            v27 = std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"processing_msg_len:", 19LL);
            v28 = std::ostream::operator<<(v27);
            std::__put_character_sequence<char,std::char_traits<char>>(v28, (__int64)" must > 0", 9LL);
            LogCapture::~LogCapture((LogCapture *)v145);
            goto LABEL_51;
          }
          operator delete(v126);
          if ( (v128 & 1) != 0 )
            goto LABEL_49;
        }
        else
        {
          v26 = 0;
          if ( (v128 & 1) != 0 )
            goto LABEL_49;
        }
LABEL_46:
        if ( (v26 & 1) == 0 )
          goto LABEL_51;
        goto LABEL_50;
      }
    }
    memcpy(v12, v9, v11);
    goto LABEL_43;
  }
LABEL_52:
  if ( *(_QWORD *)(a2 + 8) - *(_QWORD *)a2 < (unsigned __int64)v8 )
    return 0LL;
  if ( (word_455B8 & 1) != 0 )
    v29 = (const char *)qword_455C8;
  else
    v29 = (char *)&word_455B8 + 1;
  v120 = dword_455B0;
  v122 = 0LL;
  v123 = 0LL;
  v121 = 0LL;
  v30 = strlen(v29);
  if ( v30 >= 0xFFFFFFFFFFFFFFF0LL )
    goto LABEL_190;
  v31 = v30;
  if ( v30 >= 0x17 )
  {
    v33 = (v30 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v32 = (char *)operator new(v33);
    v122 = v31;
    v123 = v32;
    v121 = v33 | 1;
    goto LABEL_62;
  }
  v32 = (char *)&v121 + 1;
  LOBYTE(v121) = 2 * v30;
  if ( v30 )
LABEL_62:
    memcpy(v32, v29, v31);
  v32[v31] = 0;
  if ( (g3::logLevel(&v120) & 1) != 0 )
  {
    *(_QWORD *)&v118[7] = 7037696LL;
    v119 = 0LL;
    v117 = 20;
    *(_QWORD *)v118 = *(_QWORD *)"DomainSock";
    v34 = g3::logTag(&v117);
    if ( (v117 & 1) == 0 )
    {
      if ( (v121 & 1) == 0 )
        goto LABEL_66;
LABEL_69:
      operator delete(v123);
      if ( (v34 & 1) == 0 )
        goto LABEL_71;
      goto LABEL_70;
    }
    operator delete(v119);
    if ( (v121 & 1) != 0 )
      goto LABEL_69;
  }
  else
  {
    v34 = 0;
    if ( (v121 & 1) != 0 )
      goto LABEL_69;
  }
LABEL_66:
  if ( (v34 & 1) != 0 )
  {
LABEL_70:
    LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_455B0, "", 6, 0LL);
    std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"parsing body", 12LL);
    LogCapture::~LogCapture((LogCapture *)v145);
  }
LABEL_71:
  v35 = *(unsigned int **)a2;
  v36 = *(int *)(a1 + 268);
  v37 = (unsigned int *)(*(_QWORD *)a2 + v36);
  if ( (_DWORD)v36 )
  {
    if ( *(_BYTE *)v35 )
    {
      v38 = v36 - 1;
      v39 = *(unsigned int **)a2;
      while ( v38 )
      {
        v40 = *((unsigned __int8 *)v39 + 1);
        v41 = (unsigned int *)((char *)v39 + 1);
        --v38;
        v39 = (unsigned int *)((char *)v39 + 1);
        if ( !v40 )
          goto LABEL_78;
      }
      goto LABEL_151;
    }
    v41 = *(unsigned int **)a2;
    if ( v37 == v35 )
      goto LABEL_151;
  }
  else
  {
    v41 = *(unsigned int **)a2;
LABEL_78:
    if ( v37 == v41 )
    {
LABEL_151:
      if ( (word_45638 & 1) != 0 )
        v81 = (const char *)qword_45648;
      else
        v81 = (char *)&word_45638 + 1;
      v113 = dword_45630;
      v115 = 0LL;
      v116 = 0LL;
      v114 = 0LL;
      v82 = strlen(v81);
      if ( v82 >= 0xFFFFFFFFFFFFFFF0LL )
        std::__basic_string_common<true>::__throw_length_error();
      v83 = v82;
      if ( v82 >= 0x17 )
      {
        v92 = (v82 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v84 = (char *)operator new(v92);
        v115 = v83;
        v116 = v84;
        v114 = v92 | 1;
      }
      else
      {
        v84 = (char *)&v114 + 1;
        LOBYTE(v114) = 2 * v82;
        if ( !v82 )
        {
LABEL_175:
          v84[v83] = 0;
          if ( (g3::logLevel(&v113) & 1) != 0 )
          {
            *(_QWORD *)&v111[7] = 7037696LL;
            v112 = 0LL;
            v110 = 20;
            *(_QWORD *)v111 = *(_QWORD *)"DomainSock";
            v93 = g3::logTag(&v110);
            if ( (v110 & 1) == 0 )
            {
              if ( (v114 & 1) == 0 )
                goto LABEL_178;
LABEL_181:
              operator delete(v116);
              if ( (v93 & 1) == 0 )
              {
LABEL_183:
                result = 0LL;
                *(_BYTE *)(a1 + 264) = 1;
                return result;
              }
LABEL_182:
              LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_45630, "", 6, 0LL);
              std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"cannot find msg_id end", 22LL);
              LogCapture::~LogCapture((LogCapture *)v145);
              goto LABEL_183;
            }
            operator delete(v112);
            if ( (v114 & 1) != 0 )
              goto LABEL_181;
          }
          else
          {
            v93 = 0;
            if ( (v114 & 1) != 0 )
              goto LABEL_181;
          }
LABEL_178:
          if ( (v93 & 1) == 0 )
            goto LABEL_183;
          goto LABEL_182;
        }
      }
      memcpy(v84, v81, v83);
      goto LABEL_175;
    }
  }
  v42 = (char *)v41 - (char *)v35;
  v107 = 0LL;
  v108 = 0LL;
  v109 = 0LL;
  if ( (unsigned __int64)((char *)v41 - (char *)v35) >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  if ( v42 > 0x16 )
  {
    v43 = (unsigned int *)operator new((v42 + 16) & 0xFFFFFFFFFFFFFFF0LL);
    v108 = (char *)v41 - (char *)v35;
    v109 = v43;
    v107 = (v42 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
    v44 = (char *)v41 - (char *)v35;
    if ( v41 == v35 )
      goto LABEL_99;
  }
  else
  {
    LOBYTE(v107) = 2 * v42;
    v43 = (unsigned int *)((char *)&v107 + 1);
    v44 = (char *)v41 - (char *)v35;
    if ( v41 == v35 )
      goto LABEL_99;
  }
  v47 = v43;
  v48 = v35;
  if ( v44 < 0x20 )
    goto LABEL_199;
  if ( v43 < v41 )
  {
    v47 = v43;
    v48 = v35;
    if ( (unsigned int *)((char *)v41 + (char *)v43 - (char *)v35) > v35 )
      goto LABEL_199;
  }
  v49 = (__int128 *)(v35 + 4);
  v47 = (unsigned int *)((char *)v43 + (v44 & 0xFFFFFFFFFFFFFFE0LL));
  v48 = (unsigned int *)((char *)v35 + (v44 & 0xFFFFFFFFFFFFFFE0LL));
  v50 = v43 + 4;
  v51 = v44 & 0xFFFFFFFFFFFFFFE0LL;
  do
  {
    v52 = *(v49 - 1);
    v53 = *v49;
    v49 += 2;
    v51 -= 32LL;
    *(v50 - 1) = v52;
    *v50 = v53;
    v50 += 2;
  }
  while ( v51 );
  if ( (v44 & 0xFFFFFFFFFFFFFFE0LL) != v44 )
  {
LABEL_199:
    do
    {
      v54 = *(_BYTE *)v48;
      v48 = (unsigned int *)((char *)v48 + 1);
      *(_BYTE *)v47 = v54;
      v47 = (unsigned int *)((char *)v47 + 1);
    }
    while ( v41 != v48 );
  }
  v43 = (unsigned int *)((char *)v43 + (char *)v41 - (char *)v35);
LABEL_99:
  v55 = dword_455B0;
  if ( (word_455B8 & 1) != 0 )
    v56 = (const char *)qword_455C8;
  else
    v56 = (char *)&word_455B8 + 1;
  *(_BYTE *)v43 = 0;
  v103 = v55;
  v105 = 0LL;
  v106 = 0LL;
  v104 = 0LL;
  v57 = strlen(v56);
  if ( v57 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v58 = v57;
  if ( v57 >= 0x17 )
  {
    v60 = (v57 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v59 = (char *)operator new(v60);
    v105 = v58;
    v106 = v59;
    v104 = v60 | 1;
    goto LABEL_107;
  }
  v59 = (char *)&v104 + 1;
  LOBYTE(v104) = 2 * v57;
  if ( v57 )
LABEL_107:
    memcpy(v59, v56, v58);
  v59[v58] = 0;
  if ( (g3::logLevel(&v103) & 1) == 0 )
  {
    v61 = 0;
    if ( (v104 & 1) != 0 )
      goto LABEL_117;
    goto LABEL_111;
  }
  v101[3] = 0;
  v102 = 0LL;
  LOBYTE(v101[0]) = 20;
  strcpy((char *)v101 + 1, "DomainSock");
  v61 = g3::logTag(v101);
  if ( (v101[0] & 1) != 0 )
  {
    operator delete(v102);
    if ( (v104 & 1) != 0 )
      goto LABEL_117;
LABEL_111:
    if ( (v61 & 1) == 0 )
      goto LABEL_125;
    goto LABEL_118;
  }
  if ( (v104 & 1) == 0 )
    goto LABEL_111;
LABEL_117:
  operator delete(v106);
  if ( (v61 & 1) == 0 )
    goto LABEL_125;
LABEL_118:
  LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_455B0, "", 6, 0LL);
  v62 = std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"parsing msg_id:", 15LL);
  if ( (v107 & 1) != 0 )
    v63 = (char *)v109;
  else
    v63 = (char *)&v107 + 1;
  if ( (v107 & 1) != 0 )
    v64 = v108;
  else
    v64 = (unsigned __int64)(unsigned __int8)v107 >> 1;
  std::__put_character_sequence<char,std::char_traits<char>>(v62, (__int64)v63, v64);
  LogCapture::~LogCapture((LogCapture *)v145);
LABEL_125:
  v65 = *(unsigned int **)a2;
  v66 = *(int *)(a1 + 268);
  if ( (word_455B8 & 1) != 0 )
    v67 = (const char *)qword_455C8;
  else
    v67 = (char *)&word_455B8 + 1;
  v97 = dword_455B0;
  v99 = 0LL;
  v100 = 0LL;
  v98 = 0LL;
  v68 = strlen(v67);
  if ( v68 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v69 = v68;
  if ( v68 >= 0x17 )
  {
    v71 = v65;
    v72 = (v68 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v70 = (char *)operator new(v72);
    v99 = v69;
    v100 = v70;
    v98 = v72 | 1;
    v65 = v71;
  }
  else
  {
    v70 = (char *)&v98 + 1;
    LOBYTE(v98) = 2 * v68;
    if ( !v68 )
      goto LABEL_134;
  }
  memcpy(v70, v67, v69);
LABEL_134:
  v70[v69] = 0;
  if ( (g3::logLevel(&v97) & 1) != 0 )
  {
    v95[3] = 0;
    v96 = 0LL;
    LOBYTE(v95[0]) = 20;
    strcpy((char *)v95 + 1, "DomainSock");
    v73 = g3::logTag(v95);
    if ( (v95[0] & 1) != 0 )
      operator delete(v96);
  }
  else
  {
    v73 = 0;
  }
  v74 = (char *)v41 + 1;
  v75 = (char *)v65 + v66 - ((char *)v41 + 1);
  if ( (v98 & 1) != 0 )
    operator delete(v100);
  if ( (v73 & 1) != 0 )
  {
    LogCapture::LogCapture((LogCapture *)v145, "DomainSock", (const LEVELS *)&dword_455B0, "", 6, 0LL);
    v76 = std::__put_character_sequence<char,std::char_traits<char>>(v146, (__int64)"get data size:", 14LL);
    std::ostream::operator<<(v76);
    LogCapture::~LogCapture((LogCapture *)v145);
  }
  if ( (int)v75 < 1 )
  {
    v77 = 0LL;
  }
  else
  {
    v77 = (_QWORD *)operator new(0x18uLL);
    *v77 = 0LL;
    v77[1] = 0LL;
    v77[2] = 0LL;
    if ( v75 << 32 )
    {
      if ( v75 << 32 < 0 )
        std::__vector_base_common<true>::__throw_length_error();
      v78 = (_BYTE *)operator new((int)v75);
      v79 = (int)v75;
      *v77 = v78;
      v77[1] = v78;
      v77[2] = &v78[(int)v75];
      do
      {
        v80 = *v74++;
        --v79;
        *v78 = v80;
        v78 = (_BYTE *)(v77[1] + 1LL);
        v77[1] = v78;
      }
      while ( v79 );
    }
  }
  v85 = *(int *)(a1 + 268);
  *(_BYTE *)(a1 + 264) = 1;
  if ( (_DWORD)v85 )
  {
    v87 = *(unsigned int **)a2;
    v86 = *(_BYTE **)(a2 + 8);
    v88 = (_BYTE *)(*(_QWORD *)a2 + v85);
    v89 = v86 - v88;
    if ( v86 != v88 )
      memmove(*(void **)a2, v88, v86 - v88);
    *(_QWORD *)(a2 + 8) = (char *)v87 + v89;
  }
  v94 = v77;
  protocol::DomainSockClient::triggerPluginProcess(a1, (unsigned __int8 *)&v107, (unsigned __int64 **)&v94);
  v90 = (void **)v94;
  v94 = 0LL;
  if ( v90 )
  {
    v91 = *v90;
    if ( *v90 )
    {
      v90[1] = v91;
      operator delete(v91);
    }
    operator delete(v90);
  }
  if ( (v107 & 1) == 0 )
    return 1LL;
  operator delete(v109);
  return 1LL;
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 455B0: using guessed type int dword_455B0;
// 455B8: using guessed type __int16 word_455B8;
// 455C8: using guessed type __int64 qword_455C8;
// 45630: using guessed type int dword_45630;
// 45638: using guessed type __int16 word_45638;
// 45648: using guessed type __int64 qword_45648;
// 28444: using guessed type char var_1A8[8];

//----- (0000000000029410) ----------------------------------------------------
__int64 __fastcall protocol::DomainSockClient::triggerPluginProcess(
        __int64 a1,
        unsigned __int8 *a2,
        unsigned __int64 **a3)
{
  std::mutex *v3; // x19
  __int64 v7; // x22
  const char *v8; // x24
  size_t v9; // x0
  size_t v10; // x23
  char *v11; // x25
  __int64 v12; // x0
  unsigned __int64 *v13; // x8
  __int64 v14; // x0
  void ***v15; // x20
  void **v16; // x0
  unsigned __int64 v17; // x26
  char v18; // w23
  _QWORD *v19; // x0
  char *v20; // x25
  unsigned __int64 v21; // x28
  unsigned __int64 v22; // x26
  _QWORD *v23; // x23
  char *v24; // x0
  char *v25; // x9
  char *v26; // x10
  __int128 *v27; // x12
  _OWORD *v28; // x13
  unsigned __int64 v29; // x14
  __int128 v30; // q0
  __int128 v31; // q1
  char v32; // t1
  char *v33; // x1
  __int64 v34; // x2
  unsigned __int64 v35; // x0
  __int64 v36; // x1
  __int64 v37; // x0
  void **v38; // x10
  char *v39; // x23
  void ***v40; // x24
  void (*v41)(void); // x8
  __int64 v42; // x0
  __int64 v43; // x0
  __int64 v44; // x20
  const char *v45; // x22
  size_t v46; // x0
  size_t v47; // x21
  char *v48; // x23
  unsigned __int64 v49; // x24
  char v50; // w21
  _QWORD *v51; // x0
  unsigned __int64 v52; // x8
  __int64 v53; // x1
  __int64 v54; // x2
  _DWORD v56[4]; // [xsp+10h] [xbp-2C0h] BYREF
  void *v57; // [xsp+20h] [xbp-2B0h]
  int v58; // [xsp+28h] [xbp-2A8h] BYREF
  unsigned __int64 v59; // [xsp+30h] [xbp-2A0h] BYREF
  size_t v60; // [xsp+38h] [xbp-298h]
  void *v61; // [xsp+40h] [xbp-290h]
  void *v62; // [xsp+48h] [xbp-288h] BYREF
  __int64 v63; // [xsp+50h] [xbp-280h] BYREF
  char *v64; // [xsp+58h] [xbp-278h] BYREF
  unsigned __int64 v65; // [xsp+98h] [xbp-238h] BYREF
  char *v66; // [xsp+A0h] [xbp-230h]
  void *v67; // [xsp+A8h] [xbp-228h]
  char v68; // [xsp+B0h] [xbp-220h] BYREF
  _BYTE v69[15]; // [xsp+B1h] [xbp-21Fh]
  void *v70; // [xsp+C0h] [xbp-210h]
  int v71; // [xsp+C8h] [xbp-208h] BYREF
  unsigned __int64 v72; // [xsp+D0h] [xbp-200h] BYREF
  size_t v73; // [xsp+D8h] [xbp-1F8h]
  void *v74; // [xsp+E0h] [xbp-1F0h]
  char v75[8]; // [xsp+E8h] [xbp-1E8h] BYREF
  void **v76[40]; // [xsp+F0h] [xbp-1E0h] BYREF
  char v77[32]; // [xsp+230h] [xbp-A0h] BYREF
  char *v78; // [xsp+250h] [xbp-80h]

  v3 = (std::mutex *)(a1 + 176);
  _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2));
  std::mutex::lock((std::mutex *)(a1 + 176));
  v7 = std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::find<std::string>(
         a1 + 240,
         a2);
  if ( a1 + 248 != v7 )
  {
    if ( (word_455B8 & 1) != 0 )
      v8 = (const char *)qword_455C8;
    else
      v8 = (char *)&word_455B8 + 1;
    v71 = dword_455B0;
    v73 = 0LL;
    v74 = 0LL;
    v72 = 0LL;
    v9 = strlen(v8);
    if ( v9 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v10 = v9;
    if ( v9 >= 0x17 )
    {
      v17 = (v9 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v11 = (char *)operator new(v17);
      v73 = v10;
      v74 = v11;
      v72 = v17 | 1;
    }
    else
    {
      v11 = (char *)&v72 + 1;
      LOBYTE(v72) = 2 * v9;
      if ( !v9 )
      {
LABEL_16:
        v11[v10] = 0;
        if ( (g3::logLevel(&v71) & 1) != 0 )
        {
          *(_QWORD *)&v69[7] = 7037696LL;
          v70 = 0LL;
          v68 = 20;
          *(_QWORD *)v69 = *(_QWORD *)"DomainSock";
          v18 = g3::logTag(&v68);
          if ( (v68 & 1) == 0 )
          {
            if ( (v72 & 1) == 0 )
              goto LABEL_19;
LABEL_22:
            operator delete(v74);
            if ( (v18 & 1) == 0 )
              goto LABEL_47;
            goto LABEL_23;
          }
          operator delete(v70);
          if ( (v72 & 1) != 0 )
            goto LABEL_22;
        }
        else
        {
          v18 = 0;
          if ( (v72 & 1) != 0 )
            goto LABEL_22;
        }
LABEL_19:
        if ( (v18 & 1) == 0 )
          goto LABEL_47;
LABEL_23:
        LogCapture::LogCapture((LogCapture *)v75, "DomainSock", (const LEVELS *)&dword_455B0, "", 6, 0LL);
        v19 = std::__put_character_sequence<char,std::char_traits<char>>(v76, (__int64)"parsing josn data:", 18LL);
        v21 = **a3;
        v20 = (char *)(*a3)[1];
        v65 = 0LL;
        v66 = 0LL;
        v67 = 0LL;
        v22 = (unsigned __int64)&v20[-v21];
        if ( (unsigned __int64)&v20[-v21] >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v23 = v19;
        if ( v22 > 0x16 )
        {
          v24 = (char *)operator new((v22 + 16) & 0xFFFFFFFFFFFFFFF0LL);
          v66 = &v20[-v21];
          v67 = v24;
          v65 = (v22 + 16) & 0xFFFFFFFFFFFFFFF0LL | 1;
          if ( (char *)v21 == v20 )
          {
LABEL_38:
            *v24 = 0;
            if ( (v65 & 1) != 0 )
              v33 = (char *)v67;
            else
              v33 = (char *)&v65 + 1;
            if ( (v65 & 1) != 0 )
              v34 = (__int64)v66;
            else
              v34 = (unsigned __int64)(unsigned __int8)v65 >> 1;
            std::__put_character_sequence<char,std::char_traits<char>>(v23, (__int64)v33, v34);
            if ( (v65 & 1) != 0 )
              operator delete(v67);
            LogCapture::~LogCapture((LogCapture *)v75);
LABEL_47:
            v35 = **a3;
            v36 = (*a3)[1];
            v78 = 0LL;
            nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::parse<std::__wrap_iter<unsigned char *>,0>(
              v35,
              v36,
              (__int64)v77,
              1,
              (__int64)v75);
            v37 = operator new(0x10uLL);
            v38 = v76[0];
            v39 = (char *)v37;
            *(_BYTE *)v37 = v75[0];
            v40 = (void ***)(v37 + 8);
            v75[0] = 0;
            *(_QWORD *)(v37 + 8) = v38;
            v76[0] = 0LL;
            nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
              v76,
              0);
            if ( v77 == v78 )
            {
              v41 = *(void (**)(void))(*(_QWORD *)v78 + 32LL);
            }
            else
            {
              if ( !v78 )
                goto LABEL_52;
              v41 = *(void (**)(void))(*(_QWORD *)v78 + 40LL);
            }
            v41();
LABEL_52:
            if ( *a3 )
            {
              v64 = v39;
              v42 = *(_QWORD *)(v7 + 96);
              if ( !v42 )
                sub_13744();
              (*(void (__fastcall **)(__int64, unsigned __int8 *, char **))(*(_QWORD *)v42 + 48LL))(v42, a2, &v64);
              v15 = (void ***)v64;
              v64 = 0LL;
              if ( v15 )
              {
                nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
                  v15 + 1,
                  *(_BYTE *)v15);
LABEL_56:
                operator delete(v15);
                return std::mutex::unlock(v3);
              }
            }
            else
            {
              v63 = 0LL;
              v43 = *(_QWORD *)(v7 + 96);
              if ( !v43 )
                sub_13744();
              (*(void (__fastcall **)(__int64, unsigned __int8 *, __int64 *))(*(_QWORD *)v43 + 48LL))(v43, a2, &v63);
              v44 = v63;
              v63 = 0LL;
              if ( v44 )
              {
                nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
                  (void ***)(v44 + 8),
                  *(_BYTE *)v44);
                operator delete((void *)v44);
              }
              nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>::json_value::destroy(
                v40,
                *v39);
              operator delete(v39);
            }
            return std::mutex::unlock(v3);
          }
        }
        else
        {
          LOBYTE(v65) = 2 * v22;
          v24 = (char *)&v65 + 1;
          if ( (char *)v21 == v20 )
            goto LABEL_38;
        }
        v25 = v24;
        v26 = (char *)v21;
        if ( v22 < 0x20 )
          goto LABEL_95;
        if ( v24 < v20 )
        {
          v25 = v24;
          v26 = (char *)v21;
          if ( (unsigned __int64)&v24[v22] > v21 )
            goto LABEL_95;
        }
        v27 = (__int128 *)(v21 + 16);
        v25 = &v24[v22 & 0xFFFFFFFFFFFFFFE0LL];
        v26 = (char *)(v21 + (v22 & 0xFFFFFFFFFFFFFFE0LL));
        v28 = v24 + 16;
        v29 = v22 & 0xFFFFFFFFFFFFFFE0LL;
        do
        {
          v30 = *(v27 - 1);
          v31 = *v27;
          v27 += 2;
          v29 -= 32LL;
          *(v28 - 1) = v30;
          *v28 = v31;
          v28 += 2;
        }
        while ( v29 );
        if ( (v22 & 0xFFFFFFFFFFFFFFE0LL) != v22 )
        {
LABEL_95:
          do
          {
            v32 = *v26++;
            *v25++ = v32;
          }
          while ( v20 != v26 );
        }
        v24 = &v20[(_QWORD)v24 - v21];
        goto LABEL_38;
      }
    }
    memcpy(v11, v8, v10);
    goto LABEL_16;
  }
  v12 = std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::find<std::string>(
          a1 + 216,
          a2);
  if ( a1 + 224 == v12 )
  {
    if ( (word_45618 & 1) != 0 )
      v45 = (const char *)qword_45628;
    else
      v45 = (char *)&word_45618 + 1;
    v58 = dword_45610;
    v60 = 0LL;
    v61 = 0LL;
    v59 = 0LL;
    v46 = strlen(v45);
    if ( v46 >= 0xFFFFFFFFFFFFFFF0LL )
      std::__basic_string_common<true>::__throw_length_error();
    v47 = v46;
    if ( v46 >= 0x17 )
    {
      v49 = (v46 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v48 = (char *)operator new(v49);
      v60 = v47;
      v61 = v48;
      v59 = v49 | 1;
    }
    else
    {
      v48 = (char *)&v59 + 1;
      LOBYTE(v59) = 2 * v46;
      if ( !v46 )
      {
LABEL_70:
        v48[v47] = 0;
        if ( (g3::logLevel(&v58) & 1) != 0 )
        {
          v56[3] = 0;
          v57 = 0LL;
          LOBYTE(v56[0]) = 20;
          strcpy((char *)v56 + 1, "DomainSock");
          v50 = g3::logTag(v56);
          if ( (v56[0] & 1) == 0 )
          {
            if ( (v59 & 1) == 0 )
              goto LABEL_73;
LABEL_76:
            operator delete(v61);
            if ( (v50 & 1) == 0 )
              return std::mutex::unlock(v3);
            goto LABEL_77;
          }
          operator delete(v57);
          if ( (v59 & 1) != 0 )
            goto LABEL_76;
        }
        else
        {
          v50 = 0;
          if ( (v59 & 1) != 0 )
            goto LABEL_76;
        }
LABEL_73:
        if ( (v50 & 1) == 0 )
          return std::mutex::unlock(v3);
LABEL_77:
        LogCapture::LogCapture((LogCapture *)v75, "DomainSock", (const LEVELS *)&dword_45610, "", 6, 0LL);
        v51 = std::__put_character_sequence<char,std::char_traits<char>>(v76, (__int64)"unkown msg id:", 14LL);
        v52 = *a2;
        if ( (v52 & 1) != 0 )
          v53 = *((_QWORD *)a2 + 2);
        else
          v53 = (__int64)(a2 + 1);
        if ( (v52 & 1) != 0 )
          v54 = *((_QWORD *)a2 + 1);
        else
          v54 = v52 >> 1;
        std::__put_character_sequence<char,std::char_traits<char>>(v51, v53, v54);
        LogCapture::~LogCapture((LogCapture *)v75);
        return std::mutex::unlock(v3);
      }
    }
    memcpy(v48, v45, v47);
    goto LABEL_70;
  }
  v13 = *a3;
  *a3 = 0LL;
  v62 = v13;
  v14 = *(_QWORD *)(v12 + 96);
  if ( !v14 )
    sub_13744();
  (*(void (__fastcall **)(__int64, unsigned __int8 *, void **))(*(_QWORD *)v14 + 48LL))(v14, a2, &v62);
  v15 = (void ***)v62;
  v62 = 0LL;
  if ( v15 )
  {
    v16 = *v15;
    if ( *v15 )
    {
      v15[1] = v16;
      operator delete(v16);
    }
    goto LABEL_56;
  }
  return std::mutex::unlock(v3);
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 455B0: using guessed type int dword_455B0;
// 455B8: using guessed type __int16 word_455B8;
// 455C8: using guessed type __int64 qword_455C8;
// 45610: using guessed type int dword_45610;
// 45618: using guessed type __int16 word_45618;
// 45628: using guessed type __int64 qword_45628;
// 45630: using guessed type int dword_45630;
// 45638: using guessed type __int16 word_45638;
// 45648: using guessed type __int64 qword_45648;
// 29410: using guessed type char var_1E8[8];

//----- (0000000000029E18) ----------------------------------------------------
_QWORD *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<std::vector<unsigned char>>)>>>>::erase(
        _QWORD *a1,
        __int64 a2)
{
  _QWORD *v2; // x8
  _QWORD *v4; // x20
  __int64 v5; // x8
  __int64 v6; // x9
  _QWORD *v7; // t1
  __int64 *v8; // x8
  __int64 v9; // x0
  void (*v10)(void); // x8

  v2 = *(_QWORD **)(a2 + 8);
  if ( v2 )
  {
    do
    {
      v4 = v2;
      v2 = (_QWORD *)*v2;
    }
    while ( v2 );
  }
  else
  {
    v5 = a2 + 16;
    v4 = *(_QWORD **)(a2 + 16);
    if ( *v4 != a2 )
    {
      do
      {
        v6 = *(_QWORD *)v5;
        v7 = *(_QWORD **)(*(_QWORD *)v5 + 16LL);
        v5 = *(_QWORD *)v5 + 16LL;
        v4 = v7;
      }
      while ( *v7 != v6 );
    }
  }
  if ( *a1 == a2 )
    *a1 = v4;
  v8 = (__int64 *)a1[1];
  --a1[2];
  std::__tree_remove<std::__tree_node_base<void *> *>(v8, (__int64 *)a2);
  v9 = *(_QWORD *)(a2 + 96);
  if ( a2 + 64 == v9 )
  {
    v10 = *(void (**)(void))(*(_QWORD *)v9 + 32LL);
  }
  else
  {
    if ( !v9 )
      goto LABEL_13;
    v10 = *(void (**)(void))(*(_QWORD *)v9 + 40LL);
  }
  v10();
LABEL_13:
  if ( (*(_BYTE *)(a2 + 32) & 1) != 0 )
    operator delete(*(void **)(a2 + 48));
  operator delete((void *)a2);
  return v4;
}

//----- (0000000000029EE8) ----------------------------------------------------
_QWORD *__fastcall std::__tree<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::function<void ()(std::string const&,std::unique_ptr<nlohmann::basic_json<std::map,std::vector,std::string,bool,long,unsigned long,double,std::allocator,nlohmann::adl_serializer>>)>>>>::erase(
        _QWORD *a1,
        __int64 a2)
{
  _QWORD *v2; // x8
  _QWORD *v4; // x20
  __int64 v5; // x8
  __int64 v6; // x9
  _QWORD *v7; // t1
  __int64 *v8; // x8
  __int64 v9; // x0
  void (*v10)(void); // x8

  v2 = *(_QWORD **)(a2 + 8);
  if ( v2 )
  {
    do
    {
      v4 = v2;
      v2 = (_QWORD *)*v2;
    }
    while ( v2 );
  }
  else
  {
    v5 = a2 + 16;
    v4 = *(_QWORD **)(a2 + 16);
    if ( *v4 != a2 )
    {
      do
      {
        v6 = *(_QWORD *)v5;
        v7 = *(_QWORD **)(*(_QWORD *)v5 + 16LL);
        v5 = *(_QWORD *)v5 + 16LL;
        v4 = v7;
      }
      while ( *v7 != v6 );
    }
  }
  if ( *a1 == a2 )
    *a1 = v4;
  v8 = (__int64 *)a1[1];
  --a1[2];
  std::__tree_remove<std::__tree_node_base<void *> *>(v8, (__int64 *)a2);
  v9 = *(_QWORD *)(a2 + 96);
  if ( a2 + 64 == v9 )
  {
    v10 = *(void (**)(void))(*(_QWORD *)v9 + 32LL);
  }
  else
  {
    if ( !v9 )
      goto LABEL_13;
    v10 = *(void (**)(void))(*(_QWORD *)v9 + 40LL);
  }
  v10();
LABEL_13:
  if ( (*(_BYTE *)(a2 + 32) & 1) != 0 )
    operator delete(*(void **)(a2 + 48));
  operator delete((void *)a2);
  return v4;
}

//----- (0000000000029FB8) ----------------------------------------------------
std::__ndk1 *__fastcall sub_29FB8(pthread_t *a1, __int128 *a2)
{
  std::__thread_struct *v4; // x21
  char *v5; // x0
  __int128 v6; // q0
  std::__thread_struct **v7; // x19
  std::__ndk1 *result; // x0
  const char *v9; // x2
  struct _Unwind_Exception *v10; // x0
  std::__thread_struct *v11; // x21
  struct _Unwind_Exception *v12; // x20

  v4 = (std::__thread_struct *)operator new(8uLL);
  std::__thread_struct::__thread_struct(v4);
  v5 = (char *)operator new(0x20uLL);
  *(_QWORD *)v5 = v4;
  v6 = *a2;
  v7 = (std::__thread_struct **)v5;
  *((_QWORD *)v5 + 3) = *((_QWORD *)a2 + 2);
  *(_OWORD *)(v5 + 8) = v6;
  result = (std::__ndk1 *)pthread_create(
                            a1,
                            0LL,
                            (void *(*)(void *))std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (protocol::DomainSockClient::*)(void),protocol::DomainSockClient*>>>,
                            v5);
  if ( (_DWORD)result )
  {
    v10 = (struct _Unwind_Exception *)std::__throw_system_error(result, (int)"thread constructor failed", v9);
    v11 = *v7;
    v12 = v10;
    *v7 = 0LL;
    if ( v11 )
    {
      std::__thread_struct::~__thread_struct(v11);
      operator delete(v11);
    }
    operator delete(v7);
    _Unwind_Resume(v12);
  }
  return result;
}
// 2A034: variable 'v9' is possibly undefined

//----- (000000000002A084) ----------------------------------------------------
__int64 __fastcall std::__thread_proxy<std::tuple<std::unique_ptr<std::__thread_struct>,std::__bind<void (protocol::DomainSockClient::*)(void),protocol::DomainSockClient*>>>(
        std::__ndk1 *a1)
{
  pthread_key_t *v2; // x0
  std::__thread_struct *v3; // x1
  __int64 v4; // x10
  void (__fastcall *v5)(_QWORD); // x8
  _QWORD *v6; // x0
  std::__thread_struct *v7; // x20

  v2 = (pthread_key_t *)std::__thread_local_data(a1);
  v3 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0LL;
  pthread_setspecific(*v2, v3);
  v4 = *((_QWORD *)a1 + 2);
  v5 = (void (__fastcall *)(_QWORD))*((_QWORD *)a1 + 1);
  v6 = (_QWORD *)(*((_QWORD *)a1 + 3) + (v4 >> 1));
  if ( (v4 & 1) != 0 )
    v5 = *(void (__fastcall **)(_QWORD))((char *)v5 + *v6);
  v5(v6);
  v7 = *(std::__thread_struct **)a1;
  *(_QWORD *)a1 = 0LL;
  if ( v7 )
  {
    std::__thread_struct::~__thread_struct(v7);
    operator delete(v7);
  }
  operator delete(a1);
  return 0LL;
}

//----- (000000000002A13C) ----------------------------------------------------
__int64 __fastcall pudutech::Ashdmem::Ashdmem(__int64 this, char a2)
{
  *(_BYTE *)this = a2 & 1;
  *(_DWORD *)(this + 4) = -1;
  *(_QWORD *)(this + 8) = 0LL;
  return this;
}

//----- (000000000002A154) ----------------------------------------------------
void __fastcall pudutech::Ashdmem::~Ashdmem(pudutech::Ashdmem *this)
{
  pudutech::Ashdmem::releaseSharedMemory(this);
  if ( *(_BYTE *)this )
    pudutech::Ashdmem::closeSharedMemory(this);
}

//----- (000000000002A188) ----------------------------------------------------
__int64 __fastcall pudutech::Ashdmem::releaseSharedMemory(pudutech::Ashdmem *this)
{
  int v2; // w0
  int v3; // w0
  const char *v4; // x22
  int v5; // w20
  size_t v6; // x0
  size_t v7; // x21
  char *v8; // x23
  const char *v9; // x20
  size_t v10; // x0
  size_t v11; // x19
  char *v12; // x21
  unsigned __int64 v13; // x24
  char *v14; // x21
  size_t v15; // x0
  size_t v16; // x22
  char *v17; // x23
  char v18; // w21
  unsigned __int64 v19; // x22
  char *v20; // x19
  size_t v21; // x0
  size_t v22; // x20
  char *v23; // x21
  char v24; // w19
  const char *v25; // x20
  size_t v26; // x0
  size_t v27; // x19
  char *v28; // x21
  unsigned __int64 v29; // x24
  _QWORD *v30; // x0
  _QWORD *v31; // x0
  int v32; // w0
  const char *v33; // x22
  int v34; // w20
  size_t v35; // x0
  size_t v36; // x21
  char *v37; // x23
  unsigned __int64 v38; // x24
  char *v39; // x21
  size_t v40; // x0
  size_t v41; // x22
  char *v42; // x23
  char v43; // w21
  const char *v44; // x20
  size_t v45; // x0
  size_t v46; // x19
  char *v47; // x21
  unsigned __int64 v48; // x22
  char *v49; // x19
  size_t v50; // x0
  size_t v51; // x20
  char *v52; // x21
  char v53; // w19
  unsigned __int64 v54; // x24
  _QWORD *v55; // x0
  unsigned __int64 v56; // x22
  _QWORD *v57; // x20
  __int64 v58; // x1
  int *v59; // x19
  _QWORD *v60; // x0
  _QWORD *v61; // x20
  char *v62; // x19
  __int64 v63; // x0
  unsigned __int64 v64; // x22
  unsigned __int64 v66; // x22
  char *v67; // x19
  size_t v68; // x0
  size_t v69; // x20
  char *v70; // x21
  char v71; // w19
  unsigned __int64 v72; // x22
  unsigned __int64 v73; // [xsp+8h] [xbp-2B8h] BYREF
  size_t v74; // [xsp+10h] [xbp-2B0h]
  void *v75; // [xsp+18h] [xbp-2A8h]
  int v76; // [xsp+20h] [xbp-2A0h] BYREF
  unsigned __int64 v77; // [xsp+28h] [xbp-298h] BYREF
  size_t v78; // [xsp+30h] [xbp-290h]
  void *v79; // [xsp+38h] [xbp-288h]
  unsigned __int64 v80; // [xsp+40h] [xbp-280h] BYREF
  size_t v81; // [xsp+48h] [xbp-278h]
  void *v82; // [xsp+50h] [xbp-270h]
  int v83; // [xsp+58h] [xbp-268h] BYREF
  unsigned __int64 v84; // [xsp+60h] [xbp-260h] BYREF
  size_t v85; // [xsp+68h] [xbp-258h]
  void *v86; // [xsp+70h] [xbp-250h]
  unsigned __int64 v87; // [xsp+78h] [xbp-248h] BYREF
  size_t v88; // [xsp+80h] [xbp-240h]
  void *v89; // [xsp+88h] [xbp-238h]
  int v90; // [xsp+90h] [xbp-230h] BYREF
  unsigned __int64 v91; // [xsp+98h] [xbp-228h] BYREF
  size_t v92; // [xsp+A0h] [xbp-220h]
  void *v93; // [xsp+A8h] [xbp-218h]
  unsigned __int64 v94; // [xsp+B0h] [xbp-210h] BYREF
  size_t v95; // [xsp+B8h] [xbp-208h]
  void *v96; // [xsp+C0h] [xbp-200h]
  int v97; // [xsp+C8h] [xbp-1F8h] BYREF
  unsigned __int64 v98; // [xsp+D0h] [xbp-1F0h] BYREF
  size_t v99; // [xsp+D8h] [xbp-1E8h]
  void *v100; // [xsp+E0h] [xbp-1E0h]
  unsigned __int64 v101; // [xsp+E8h] [xbp-1D8h] BYREF
  size_t v102; // [xsp+F0h] [xbp-1D0h]
  void *v103; // [xsp+F8h] [xbp-1C8h]
  int v104; // [xsp+100h] [xbp-1C0h] BYREF
  unsigned __int64 v105; // [xsp+108h] [xbp-1B8h] BYREF
  size_t v106; // [xsp+110h] [xbp-1B0h]
  void *v107; // [xsp+118h] [xbp-1A8h]
  char v108[8]; // [xsp+120h] [xbp-1A0h] BYREF
  _QWORD v109[41]; // [xsp+128h] [xbp-198h] BYREF

  v109[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *((_DWORD *)this + 1);
  if ( v2 == -1 && !*((_QWORD *)this + 1) )
  {
    if ( (word_45780 & 1) != 0 )
      v25 = (const char *)qword_45790;
    else
      v25 = (char *)&word_45780 + 1;
    v104 = dword_45778;
    v106 = 0LL;
    v107 = 0LL;
    v105 = 0LL;
    v26 = strlen(v25);
    if ( v26 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_134;
    v27 = v26;
    if ( v26 >= 0x17 )
    {
      v66 = (v26 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v28 = (char *)operator new(v66);
      v106 = v27;
      v107 = v28;
      v105 = v66 | 1;
    }
    else
    {
      v28 = (char *)&v105 + 1;
      LOBYTE(v105) = 2 * v26;
      if ( !v26 )
      {
LABEL_116:
        v28[v27] = 0;
        if ( (g3::logLevel(&v104) & 1) == 0 )
        {
          v71 = 0;
          if ( (v105 & 1) == 0 )
            goto LABEL_128;
          goto LABEL_122;
        }
        v102 = 0LL;
        v103 = 0LL;
        v101 = 0LL;
        v67 = pudutech::ASHTAG;
        v68 = strlen(pudutech::ASHTAG);
        if ( v68 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v69 = v68;
        if ( v68 >= 0x17 )
        {
          v72 = (v68 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v70 = (char *)operator new(v72);
          v102 = v69;
          v103 = v70;
          v101 = v72 | 1;
        }
        else
        {
          v70 = (char *)&v101 + 1;
          LOBYTE(v101) = 2 * v68;
          if ( !v68 )
          {
LABEL_126:
            v70[v69] = 0;
            v71 = g3::logTag(&v101);
            if ( (v101 & 1) != 0 )
            {
              operator delete(v103);
              if ( (v105 & 1) == 0 )
              {
LABEL_128:
                if ( (v71 & 1) == 0 )
                  return 1LL;
                goto LABEL_129;
              }
            }
            else if ( (v105 & 1) == 0 )
            {
              goto LABEL_128;
            }
LABEL_122:
            operator delete(v107);
            if ( (v71 & 1) == 0 )
              return 1LL;
LABEL_129:
            LogCapture::LogCapture((LogCapture *)v108, pudutech::ASHTAG, (const LEVELS *)&dword_45778, "", 6, 0LL);
            std::__put_character_sequence<char,std::char_traits<char>>(v109, (__int64)"memory not  alloced", 19LL);
            LogCapture::~LogCapture((LogCapture *)v108);
            return 1LL;
          }
        }
        memcpy(v70, v67, v69);
        goto LABEL_126;
      }
    }
    memcpy(v28, v25, v27);
    goto LABEL_116;
  }
  v3 = ioctl(v2, 0x7704uLL, 0LL);
  if ( v3 < 0 )
  {
    if ( (word_45780 & 1) != 0 )
      v9 = (const char *)qword_45790;
    else
      v9 = (char *)&word_45780 + 1;
    v97 = dword_45778;
    v99 = 0LL;
    v100 = 0LL;
    v98 = 0LL;
    v10 = strlen(v9);
    if ( v10 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_134;
    v11 = v10;
    if ( v10 >= 0x17 )
    {
      v19 = (v10 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v12 = (char *)operator new(v19);
      v99 = v11;
      v100 = v12;
      v98 = v19 | 1;
    }
    else
    {
      v12 = (char *)&v98 + 1;
      LOBYTE(v98) = 2 * v10;
      if ( !v10 )
      {
LABEL_30:
        v12[v11] = 0;
        if ( (g3::logLevel(&v97) & 1) == 0 )
        {
          v24 = 0;
          if ( (v98 & 1) == 0 )
            goto LABEL_108;
          goto LABEL_36;
        }
        v95 = 0LL;
        v96 = 0LL;
        v94 = 0LL;
        v20 = pudutech::ASHTAG;
        v21 = strlen(pudutech::ASHTAG);
        if ( v21 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v22 = v21;
        if ( v21 >= 0x17 )
        {
          v64 = (v21 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v23 = (char *)operator new(v64);
          v95 = v22;
          v96 = v23;
          v94 = v64 | 1;
        }
        else
        {
          v23 = (char *)&v94 + 1;
          LOBYTE(v94) = 2 * v21;
          if ( !v21 )
          {
LABEL_106:
            v23[v22] = 0;
            v24 = g3::logTag(&v94);
            if ( (v94 & 1) != 0 )
            {
              operator delete(v96);
              if ( (v98 & 1) == 0 )
              {
LABEL_108:
                if ( (v24 & 1) == 0 )
                  return 0LL;
LABEL_109:
                LogCapture::LogCapture((LogCapture *)v108, pudutech::ASHTAG, (const LEVELS *)&dword_45778, "", 6, 0LL);
                std::__put_character_sequence<char,std::char_traits<char>>(
                  v109,
                  (__int64)"closed memory size is smaller than 0",
                  36LL);
                goto LABEL_110;
              }
            }
            else if ( (v98 & 1) == 0 )
            {
              goto LABEL_108;
            }
LABEL_36:
            operator delete(v100);
            if ( (v24 & 1) == 0 )
              return 0LL;
            goto LABEL_109;
          }
        }
        memcpy(v23, v20, v22);
        goto LABEL_106;
      }
    }
    memcpy(v12, v9, v11);
    goto LABEL_30;
  }
  if ( (word_45740 & 1) != 0 )
    v4 = (const char *)qword_45750;
  else
    v4 = (char *)&word_45740 + 1;
  v5 = v3;
  v90 = dword_45738;
  v92 = 0LL;
  v93 = 0LL;
  v91 = 0LL;
  v6 = strlen(v4);
  if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
LABEL_133:
    std::__basic_string_common<true>::__throw_length_error();
  v7 = v6;
  if ( v6 >= 0x17 )
  {
    v13 = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v8 = (char *)operator new(v13);
    v92 = v7;
    v93 = v8;
    v91 = v13 | 1;
    goto LABEL_19;
  }
  v8 = (char *)&v91 + 1;
  LOBYTE(v91) = 2 * v6;
  if ( v6 )
LABEL_19:
    memcpy(v8, v4, v7);
  v8[v7] = 0;
  if ( (g3::logLevel(&v90) & 1) == 0 )
  {
    v18 = 0;
    if ( (v91 & 1) == 0 )
      goto LABEL_49;
    goto LABEL_26;
  }
  v88 = 0LL;
  v89 = 0LL;
  v87 = 0LL;
  v14 = pudutech::ASHTAG;
  v15 = strlen(pudutech::ASHTAG);
  if ( v15 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v16 = v15;
  if ( v15 >= 0x17 )
  {
    v29 = (v15 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v17 = (char *)operator new(v29);
    v88 = v16;
    v89 = v17;
    v87 = v29 | 1;
    goto LABEL_46;
  }
  v17 = (char *)&v87 + 1;
  LOBYTE(v87) = 2 * v15;
  if ( v15 )
LABEL_46:
    memcpy(v17, v14, v16);
  v17[v16] = 0;
  v18 = g3::logTag(&v87);
  if ( (v87 & 1) != 0 )
  {
    operator delete(v89);
    if ( (v91 & 1) == 0 )
    {
LABEL_49:
      if ( (v18 & 1) == 0 )
        goto LABEL_51;
      goto LABEL_50;
    }
  }
  else if ( (v91 & 1) == 0 )
  {
    goto LABEL_49;
  }
LABEL_26:
  operator delete(v93);
  if ( (v18 & 1) == 0 )
    goto LABEL_51;
LABEL_50:
  LogCapture::LogCapture((LogCapture *)v108, pudutech::ASHTAG, (const LEVELS *)&dword_45738, "", 6, 0LL);
  v30 = std::__put_character_sequence<char,std::char_traits<char>>(v109, (__int64)"check shared memory size ", 25LL);
  v31 = std::ostream::operator<<(v30);
  std::__put_character_sequence<char,std::char_traits<char>>(v31, (__int64)" before realse memory", 21LL);
  LogCapture::~LogCapture((LogCapture *)v108);
LABEL_51:
  v32 = munmap(*((void **)this + 1), v5);
  if ( (word_45740 & 1) != 0 )
    v33 = (const char *)qword_45750;
  else
    v33 = (char *)&word_45740 + 1;
  v34 = v32;
  v83 = dword_45738;
  v85 = 0LL;
  v86 = 0LL;
  v84 = 0LL;
  v35 = strlen(v33);
  if ( v35 >= 0xFFFFFFFFFFFFFFF0LL )
    goto LABEL_133;
  v36 = v35;
  if ( v35 >= 0x17 )
  {
    v38 = (v35 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v37 = (char *)operator new(v38);
    v85 = v36;
    v86 = v37;
    v84 = v38 | 1;
    goto LABEL_59;
  }
  v37 = (char *)&v84 + 1;
  LOBYTE(v84) = 2 * v35;
  if ( v35 )
LABEL_59:
    memcpy(v37, v33, v36);
  v37[v36] = 0;
  if ( (g3::logLevel(&v83) & 1) == 0 )
  {
    v43 = 0;
    if ( (v84 & 1) == 0 )
      goto LABEL_91;
    goto LABEL_66;
  }
  v81 = 0LL;
  v82 = 0LL;
  v80 = 0LL;
  v39 = pudutech::ASHTAG;
  v40 = strlen(pudutech::ASHTAG);
  if ( v40 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v41 = v40;
  if ( v40 >= 0x17 )
  {
    v54 = (v40 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v42 = (char *)operator new(v54);
    v81 = v41;
    v82 = v42;
    v80 = v54 | 1;
    goto LABEL_88;
  }
  v42 = (char *)&v80 + 1;
  LOBYTE(v80) = 2 * v40;
  if ( v40 )
LABEL_88:
    memcpy(v42, v39, v41);
  v42[v41] = 0;
  v43 = g3::logTag(&v80);
  if ( (v80 & 1) == 0 )
  {
    if ( (v84 & 1) == 0 )
      goto LABEL_91;
LABEL_66:
    operator delete(v86);
    if ( (v43 & 1) != 0 )
      goto LABEL_92;
    goto LABEL_67;
  }
  operator delete(v82);
  if ( (v84 & 1) != 0 )
    goto LABEL_66;
LABEL_91:
  if ( (v43 & 1) != 0 )
  {
LABEL_92:
    LogCapture::LogCapture((LogCapture *)v108, pudutech::ASHTAG, (const LEVELS *)&dword_45738, "", 6, 0LL);
    v55 = std::__put_character_sequence<char,std::char_traits<char>>(v109, (__int64)"unmap return ", 13LL);
    std::ostream::operator<<(v55);
    LogCapture::~LogCapture((LogCapture *)v108);
    if ( !v34 )
      goto LABEL_93;
LABEL_68:
    if ( (word_45780 & 1) != 0 )
      v44 = (const char *)qword_45790;
    else
      v44 = (char *)&word_45780 + 1;
    v76 = dword_45778;
    v78 = 0LL;
    v79 = 0LL;
    v77 = 0LL;
    v45 = strlen(v44);
    if ( v45 < 0xFFFFFFFFFFFFFFF0LL )
    {
      v46 = v45;
      if ( v45 >= 0x17 )
      {
        v48 = (v45 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v47 = (char *)operator new(v48);
        v78 = v46;
        v79 = v47;
        v77 = v48 | 1;
      }
      else
      {
        v47 = (char *)&v77 + 1;
        LOBYTE(v77) = 2 * v45;
        if ( !v45 )
        {
LABEL_77:
          v47[v46] = 0;
          if ( (g3::logLevel(&v76) & 1) == 0 )
          {
            v53 = 0;
            if ( (v77 & 1) == 0 )
              goto LABEL_100;
            goto LABEL_83;
          }
          v74 = 0LL;
          v75 = 0LL;
          v73 = 0LL;
          v49 = pudutech::ASHTAG;
          v50 = strlen(pudutech::ASHTAG);
          if ( v50 >= 0xFFFFFFFFFFFFFFF0LL )
            std::__basic_string_common<true>::__throw_length_error();
          v51 = v50;
          if ( v50 >= 0x17 )
          {
            v56 = (v50 + 16) & 0xFFFFFFFFFFFFFFF0LL;
            v52 = (char *)operator new(v56);
            v74 = v51;
            v75 = v52;
            v73 = v56 | 1;
          }
          else
          {
            v52 = (char *)&v73 + 1;
            LOBYTE(v73) = 2 * v50;
            if ( !v50 )
            {
LABEL_98:
              v52[v51] = 0;
              v53 = g3::logTag(&v73);
              if ( (v73 & 1) != 0 )
              {
                operator delete(v75);
                if ( (v77 & 1) == 0 )
                {
LABEL_100:
                  if ( (v53 & 1) != 0 )
                    goto LABEL_101;
                  return 0LL;
                }
              }
              else if ( (v77 & 1) == 0 )
              {
                goto LABEL_100;
              }
LABEL_83:
              operator delete(v79);
              if ( (v53 & 1) != 0 )
              {
LABEL_101:
                LogCapture::LogCapture((LogCapture *)v108, pudutech::ASHTAG, (const LEVELS *)&dword_45778, "", 6, 0LL);
                v57 = std::__put_character_sequence<char,std::char_traits<char>>(
                        v109,
                        (__int64)"unmap memory failed, error ",
                        27LL);
                v59 = (int *)__errno(v57, v58);
                v60 = std::ostream::operator<<(v57);
                v61 = std::__put_character_sequence<char,std::char_traits<char>>(v60, (__int64)" ", 1LL);
                v62 = strerror(*v59);
                v63 = strlen(v62);
                std::__put_character_sequence<char,std::char_traits<char>>(v61, (__int64)v62, v63);
LABEL_110:
                LogCapture::~LogCapture((LogCapture *)v108);
                return 0LL;
              }
              return 0LL;
            }
          }
          memcpy(v52, v49, v51);
          goto LABEL_98;
        }
      }
      memcpy(v47, v44, v46);
      goto LABEL_77;
    }
LABEL_134:
    std::__basic_string_common<true>::__throw_length_error();
  }
LABEL_67:
  if ( v34 )
    goto LABEL_68;
LABEL_93:
  *((_QWORD *)this + 1) = 0LL;
  return 1LL;
}
// 2A89C: variable 'v58' is possibly undefined
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);
// 45028: using guessed type char *pudutech::ASHTAG;
// 45738: using guessed type int dword_45738;
// 45740: using guessed type __int16 word_45740;
// 45750: using guessed type __int64 qword_45750;
// 45778: using guessed type int dword_45778;
// 45780: using guessed type __int16 word_45780;
// 45790: using guessed type __int64 qword_45790;
// 2A188: using guessed type char var_1A0[8];

//----- (000000000002ACB8) ----------------------------------------------------
__int64 __fastcall pudutech::Ashdmem::closeSharedMemory(pudutech::Ashdmem *this)
{
  int v2; // w0
  int v3; // w0
  const char *v4; // x22
  int v5; // w20
  size_t v6; // x0
  size_t v7; // x21
  char *v8; // x23
  unsigned __int64 v9; // x24
  char *v10; // x21
  size_t v11; // x0
  size_t v12; // x22
  char *v13; // x23
  char v14; // w21
  const char *v15; // x20
  size_t v16; // x0
  size_t v17; // x19
  char *v18; // x21
  unsigned __int64 v19; // x22
  char *v20; // x19
  size_t v21; // x0
  size_t v22; // x20
  char *v23; // x21
  char v24; // w19
  unsigned __int64 v25; // x24
  _QWORD *v26; // x0
  unsigned __int64 v28; // x22
  _QWORD *v29; // x20
  __int64 v30; // x1
  int *v31; // x19
  _QWORD *v32; // x0
  _QWORD *v33; // x20
  char *v34; // x19
  __int64 v35; // x0
  unsigned __int64 v36; // [xsp+0h] [xbp-200h] BYREF
  size_t v37; // [xsp+8h] [xbp-1F8h]
  void *v38; // [xsp+10h] [xbp-1F0h]
  int v39; // [xsp+18h] [xbp-1E8h] BYREF
  unsigned __int64 v40; // [xsp+20h] [xbp-1E0h] BYREF
  size_t v41; // [xsp+28h] [xbp-1D8h]
  void *v42; // [xsp+30h] [xbp-1D0h]
  unsigned __int64 v43; // [xsp+38h] [xbp-1C8h] BYREF
  size_t v44; // [xsp+40h] [xbp-1C0h]
  void *v45; // [xsp+48h] [xbp-1B8h]
  int v46; // [xsp+50h] [xbp-1B0h] BYREF
  unsigned __int64 v47; // [xsp+58h] [xbp-1A8h] BYREF
  size_t v48; // [xsp+60h] [xbp-1A0h]
  void *v49; // [xsp+68h] [xbp-198h]
  char v50[8]; // [xsp+70h] [xbp-190h] BYREF
  _QWORD v51[41]; // [xsp+78h] [xbp-188h] BYREF

  v51[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v2 = *((_DWORD *)this + 1);
  if ( v2 == -1 )
    return 1LL;
  v3 = close(v2);
  if ( (word_45740 & 1) != 0 )
    v4 = (const char *)qword_45750;
  else
    v4 = (char *)&word_45740 + 1;
  v5 = v3;
  v46 = dword_45738;
  v48 = 0LL;
  v49 = 0LL;
  v47 = 0LL;
  v6 = strlen(v4);
  if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v7 = v6;
  if ( v6 >= 0x17 )
  {
    v9 = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v8 = (char *)operator new(v9);
    v48 = v7;
    v49 = v8;
    v47 = v9 | 1;
    goto LABEL_10;
  }
  v8 = (char *)&v47 + 1;
  LOBYTE(v47) = 2 * v6;
  if ( v6 )
LABEL_10:
    memcpy(v8, v4, v7);
  v8[v7] = 0;
  if ( (g3::logLevel(&v46) & 1) == 0 )
  {
    v14 = 0;
    if ( (v47 & 1) == 0 )
      goto LABEL_40;
    goto LABEL_17;
  }
  v44 = 0LL;
  v45 = 0LL;
  v43 = 0LL;
  v10 = pudutech::ASHTAG;
  v11 = strlen(pudutech::ASHTAG);
  if ( v11 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v12 = v11;
  if ( v11 >= 0x17 )
  {
    v25 = (v11 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v13 = (char *)operator new(v25);
    v44 = v12;
    v45 = v13;
    v43 = v25 | 1;
    goto LABEL_37;
  }
  v13 = (char *)&v43 + 1;
  LOBYTE(v43) = 2 * v11;
  if ( v11 )
LABEL_37:
    memcpy(v13, v10, v12);
  v13[v12] = 0;
  v14 = g3::logTag(&v43);
  if ( (v43 & 1) == 0 )
  {
    if ( (v47 & 1) == 0 )
      goto LABEL_40;
LABEL_17:
    operator delete(v49);
    if ( (v14 & 1) != 0 )
      goto LABEL_41;
    goto LABEL_18;
  }
  operator delete(v45);
  if ( (v47 & 1) != 0 )
    goto LABEL_17;
LABEL_40:
  if ( (v14 & 1) != 0 )
  {
LABEL_41:
    LogCapture::LogCapture((LogCapture *)v50, pudutech::ASHTAG, (const LEVELS *)&dword_45738, "", 6, 0LL);
    v26 = std::__put_character_sequence<char,std::char_traits<char>>(v51, (__int64)"close fd return ", 16LL);
    std::ostream::operator<<(v26);
    LogCapture::~LogCapture((LogCapture *)v50);
    if ( !v5 )
      goto LABEL_42;
    goto LABEL_19;
  }
LABEL_18:
  if ( !v5 )
  {
LABEL_42:
    *((_DWORD *)this + 1) = -1;
    return 1LL;
  }
LABEL_19:
  if ( (word_45780 & 1) != 0 )
    v15 = (const char *)qword_45790;
  else
    v15 = (char *)&word_45780 + 1;
  v39 = dword_45778;
  v41 = 0LL;
  v42 = 0LL;
  v40 = 0LL;
  v16 = strlen(v15);
  if ( v16 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v17 = v16;
  if ( v16 >= 0x17 )
  {
    v19 = (v16 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v18 = (char *)operator new(v19);
    v41 = v17;
    v42 = v18;
    v40 = v19 | 1;
    goto LABEL_27;
  }
  v18 = (char *)&v40 + 1;
  LOBYTE(v40) = 2 * v16;
  if ( v16 )
LABEL_27:
    memcpy(v18, v15, v17);
  v18[v17] = 0;
  if ( (g3::logLevel(&v39) & 1) == 0 )
  {
    v24 = 0;
    if ( (v40 & 1) == 0 )
      goto LABEL_50;
    goto LABEL_34;
  }
  v37 = 0LL;
  v38 = 0LL;
  v36 = 0LL;
  v20 = pudutech::ASHTAG;
  v21 = strlen(pudutech::ASHTAG);
  if ( v21 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v22 = v21;
  if ( v21 >= 0x17 )
  {
    v28 = (v21 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v23 = (char *)operator new(v28);
    v37 = v22;
    v38 = v23;
    v36 = v28 | 1;
    goto LABEL_47;
  }
  v23 = (char *)&v36 + 1;
  LOBYTE(v36) = 2 * v21;
  if ( v21 )
LABEL_47:
    memcpy(v23, v20, v22);
  v23[v22] = 0;
  v24 = g3::logTag(&v36);
  if ( (v36 & 1) == 0 )
  {
    if ( (v40 & 1) == 0 )
      goto LABEL_50;
LABEL_34:
    operator delete(v42);
    if ( (v24 & 1) == 0 )
      return 0LL;
    goto LABEL_51;
  }
  operator delete(v38);
  if ( (v40 & 1) != 0 )
    goto LABEL_34;
LABEL_50:
  if ( (v24 & 1) != 0 )
  {
LABEL_51:
    LogCapture::LogCapture((LogCapture *)v50, pudutech::ASHTAG, (const LEVELS *)&dword_45778, "", 6, 0LL);
    v29 = std::__put_character_sequence<char,std::char_traits<char>>(
            v51,
            (__int64)"close file descriptor failed, error ",
            36LL);
    v31 = (int *)__errno(v29, v30);
    v32 = std::ostream::operator<<(v29);
    v33 = std::__put_character_sequence<char,std::char_traits<char>>(v32, (__int64)" ", 1LL);
    v34 = strerror(*v31);
    v35 = strlen(v34);
    std::__put_character_sequence<char,std::char_traits<char>>(v33, (__int64)v34, v35);
    LogCapture::~LogCapture((LogCapture *)v50);
  }
  return 0LL;
}
// 2B074: variable 'v30' is possibly undefined
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);
// 45028: using guessed type char *pudutech::ASHTAG;
// 45738: using guessed type int dword_45738;
// 45740: using guessed type __int16 word_45740;
// 45750: using guessed type __int64 qword_45750;
// 45778: using guessed type int dword_45778;
// 45780: using guessed type __int16 word_45780;
// 45790: using guessed type __int64 qword_45790;
// 2ACB8: using guessed type char var_190[8];

//----- (000000000002B1B4) ----------------------------------------------------
_QWORD *__usercall pudutech::Ashdmem::create@<X0>(_QWORD *a1@<X8>)
{
  __int64 v3; // x19
  _QWORD *result; // x0

  v3 = operator new(0x10uLL);
  *(_QWORD *)(v3 + 8) = 0LL;
  *(_BYTE *)v3 = 1;
  *(_DWORD *)(v3 + 4) = -1;
  *a1 = v3;
  result = (_QWORD *)operator new(0x20uLL);
  result[2] = 0LL;
  result[3] = v3;
  a1[1] = result;
  *result = &off_444F0;
  result[1] = 0LL;
  return result;
}
// 444F0: using guessed type void (__fastcall *)(std::__shared_weak_count *__hidden this);

//----- (000000000002B244) ----------------------------------------------------
__int64 __fastcall pudutech::Ashdmem::createMemory(__int64 a1, __int64 a2, unsigned int a3)
{
  int v6; // w0
  int v7; // w0
  const char *v8; // x24
  int v9; // w22
  size_t v10; // x0
  size_t v11; // x23
  char *v12; // x25
  const char *v13; // x20
  size_t v14; // x0
  size_t v15; // x19
  char *v16; // x21
  unsigned __int64 v17; // x26
  char *v18; // x23
  size_t v19; // x0
  size_t v20; // x24
  char *v21; // x25
  char v22; // w23
  unsigned __int64 v23; // x22
  char *v24; // x19
  size_t v25; // x0
  size_t v26; // x20
  char *v27; // x21
  char v28; // w19
  unsigned __int64 v29; // x26
  _QWORD *v30; // x0
  void *v31; // x0
  unsigned int v32; // w8
  __int64 v33; // x2
  int v34; // w0
  int v35; // w8
  int v36; // w0
  int v37; // w8
  const char *v38; // x23
  size_t v39; // x0
  size_t v40; // x22
  char *v41; // x24
  unsigned __int64 v42; // x22
  _QWORD *v43; // x19
  __int64 v44; // x1
  int *v45; // x0
  char *v46; // x20
  __int64 v47; // x0
  const char *v49; // x20
  size_t v50; // x0
  size_t v51; // x19
  char *v52; // x21
  const char *v53; // x20
  size_t v54; // x0
  size_t v55; // x19
  char *v56; // x21
  unsigned __int64 v57; // x25
  char *v58; // x22
  size_t v59; // x0
  size_t v60; // x23
  char *v61; // x24
  char v62; // w22
  unsigned __int64 v63; // x22
  char *v64; // x19
  size_t v65; // x0
  size_t v66; // x20
  char *v67; // x21
  char v68; // w19
  unsigned __int64 v69; // x22
  char *v70; // x19
  size_t v71; // x0
  size_t v72; // x20
  char *v73; // x21
  char v74; // w19
  unsigned __int64 v75; // x25
  _QWORD *v76; // x0
  _QWORD *v77; // x0
  _QWORD *v78; // x0
  unsigned __int64 v79; // x22
  _QWORD *v80; // x19
  __int64 v81; // x1
  int *v82; // x0
  char *v83; // x20
  __int64 v84; // x0
  unsigned __int64 v85; // x22
  _QWORD *v86; // x19
  __int64 v87; // x1
  int *v88; // x0
  char *v89; // x20
  __int64 v90; // x0
  unsigned __int64 v91; // [xsp+0h] [xbp-2C0h] BYREF
  size_t v92; // [xsp+8h] [xbp-2B8h]
  void *v93; // [xsp+10h] [xbp-2B0h]
  int v94; // [xsp+18h] [xbp-2A8h] BYREF
  unsigned __int64 v95; // [xsp+20h] [xbp-2A0h] BYREF
  size_t v96; // [xsp+28h] [xbp-298h]
  void *v97; // [xsp+30h] [xbp-290h]
  unsigned __int64 v98; // [xsp+38h] [xbp-288h] BYREF
  size_t v99; // [xsp+40h] [xbp-280h]
  void *v100; // [xsp+48h] [xbp-278h]
  int v101; // [xsp+50h] [xbp-270h] BYREF
  unsigned __int64 v102; // [xsp+58h] [xbp-268h] BYREF
  size_t v103; // [xsp+60h] [xbp-260h]
  void *v104; // [xsp+68h] [xbp-258h]
  unsigned __int64 v105; // [xsp+70h] [xbp-250h] BYREF
  size_t v106; // [xsp+78h] [xbp-248h]
  void *v107; // [xsp+80h] [xbp-240h]
  int v108; // [xsp+88h] [xbp-238h] BYREF
  unsigned __int64 v109; // [xsp+90h] [xbp-230h] BYREF
  size_t v110; // [xsp+98h] [xbp-228h]
  void *v111; // [xsp+A0h] [xbp-220h]
  unsigned __int64 v112; // [xsp+A8h] [xbp-218h] BYREF
  size_t v113; // [xsp+B0h] [xbp-210h]
  void *v114; // [xsp+B8h] [xbp-208h]
  int v115; // [xsp+C0h] [xbp-200h] BYREF
  unsigned __int64 v116; // [xsp+C8h] [xbp-1F8h] BYREF
  size_t v117; // [xsp+D0h] [xbp-1F0h]
  void *v118; // [xsp+D8h] [xbp-1E8h]
  unsigned __int64 v119; // [xsp+E0h] [xbp-1E0h] BYREF
  size_t v120; // [xsp+E8h] [xbp-1D8h]
  void *v121; // [xsp+F0h] [xbp-1D0h]
  int v122; // [xsp+F8h] [xbp-1C8h] BYREF
  unsigned __int64 v123; // [xsp+100h] [xbp-1C0h] BYREF
  size_t v124; // [xsp+108h] [xbp-1B8h]
  void *v125; // [xsp+110h] [xbp-1B0h]
  char v126[8]; // [xsp+118h] [xbp-1A8h] BYREF
  _QWORD v127[42]; // [xsp+120h] [xbp-1A0h] BYREF

  v127[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v6 = open(pudutech::ASHMEM_DEVICE, 2);
  if ( v6 < 0 )
  {
    if ( (word_45780 & 1) != 0 )
      v13 = (const char *)qword_45790;
    else
      v13 = (char *)&word_45780 + 1;
    v122 = dword_45778;
    v124 = 0LL;
    v125 = 0LL;
    v123 = 0LL;
    v14 = strlen(v13);
    if ( v14 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_138;
    v15 = v14;
    if ( v14 >= 0x17 )
    {
      v23 = (v14 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v16 = (char *)operator new(v23);
      v124 = v15;
      v125 = v16;
      v123 = v23 | 1;
    }
    else
    {
      v16 = (char *)&v123 + 1;
      LOBYTE(v123) = 2 * v14;
      if ( !v14 )
      {
LABEL_27:
        v16[v15] = 0;
        if ( (g3::logLevel(&v122) & 1) == 0 )
        {
          v28 = 0;
          if ( (v123 & 1) == 0 )
            goto LABEL_61;
          goto LABEL_64;
        }
        v120 = 0LL;
        v121 = 0LL;
        v119 = 0LL;
        v24 = pudutech::ASHTAG;
        v25 = strlen(pudutech::ASHTAG);
        if ( v25 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v26 = v25;
        if ( v25 >= 0x17 )
        {
          v42 = (v25 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v27 = (char *)operator new(v42);
          v120 = v26;
          v121 = v27;
          v119 = v42 | 1;
        }
        else
        {
          v27 = (char *)&v119 + 1;
          LOBYTE(v119) = 2 * v25;
          if ( !v25 )
          {
LABEL_59:
            v27[v26] = 0;
            v28 = g3::logTag(&v119);
            if ( (v119 & 1) != 0 )
            {
              operator delete(v121);
              if ( (v123 & 1) == 0 )
              {
LABEL_61:
                if ( (v28 & 1) == 0 )
                  return (unsigned int)-1;
LABEL_65:
                LogCapture::LogCapture((LogCapture *)v126, pudutech::ASHTAG, (const LEVELS *)&dword_45778, "", 6, 0LL);
                v43 = std::__put_character_sequence<char,std::char_traits<char>>(
                        v127,
                        (__int64)"open ashmem device failed ",
                        26LL);
                v45 = (int *)__errno(v43, v44);
                v46 = strerror(*v45);
                v47 = strlen(v46);
                std::__put_character_sequence<char,std::char_traits<char>>(v43, (__int64)v46, v47);
LABEL_66:
                LogCapture::~LogCapture((LogCapture *)v126);
                return (unsigned int)-1;
              }
            }
            else if ( (v123 & 1) == 0 )
            {
              goto LABEL_61;
            }
LABEL_64:
            operator delete(v125);
            if ( (v28 & 1) == 0 )
              return (unsigned int)-1;
            goto LABEL_65;
          }
        }
        memcpy(v27, v24, v26);
        goto LABEL_59;
      }
    }
    memcpy(v16, v13, v15);
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 4) = v6;
  v7 = ioctl(v6, 0x7704uLL, 0LL);
  if ( (word_45740 & 1) != 0 )
    v8 = (const char *)qword_45750;
  else
    v8 = (char *)&word_45740 + 1;
  v9 = v7;
  v115 = dword_45738;
  v117 = 0LL;
  v118 = 0LL;
  v116 = 0LL;
  v10 = strlen(v8);
  if ( v10 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v11 = v10;
  if ( v10 >= 0x17 )
  {
    v17 = (v10 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v12 = (char *)operator new(v17);
    v117 = v11;
    v118 = v12;
    v116 = v17 | 1;
    goto LABEL_17;
  }
  v12 = (char *)&v116 + 1;
  LOBYTE(v116) = 2 * v10;
  if ( v10 )
LABEL_17:
    memcpy(v12, v8, v11);
  v12[v11] = 0;
  if ( (g3::logLevel(&v115) & 1) == 0 )
  {
    v22 = 0;
    if ( (v116 & 1) == 0 )
      goto LABEL_38;
    goto LABEL_42;
  }
  v113 = 0LL;
  v114 = 0LL;
  v112 = 0LL;
  v18 = pudutech::ASHTAG;
  v19 = strlen(pudutech::ASHTAG);
  if ( v19 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v20 = v19;
  if ( v19 >= 0x17 )
  {
    v29 = (v19 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v21 = (char *)operator new(v29);
    v113 = v20;
    v114 = v21;
    v112 = v29 | 1;
    goto LABEL_35;
  }
  v21 = (char *)&v112 + 1;
  LOBYTE(v112) = 2 * v19;
  if ( v19 )
LABEL_35:
    memcpy(v21, v18, v20);
  v21[v20] = 0;
  v22 = g3::logTag(&v112);
  if ( (v112 & 1) != 0 )
  {
    operator delete(v114);
    if ( (v116 & 1) == 0 )
    {
LABEL_38:
      if ( (v22 & 1) == 0 )
        goto LABEL_39;
LABEL_43:
      LogCapture::LogCapture((LogCapture *)v126, pudutech::ASHTAG, (const LEVELS *)&dword_45738, "", 6, 0LL);
      v30 = std::__put_character_sequence<char,std::char_traits<char>>(v127, (__int64)"shared memory length ", 21LL);
      std::ostream::operator<<(v30);
      LogCapture::~LogCapture((LogCapture *)v126);
      if ( v9 >= 1 )
        goto LABEL_44;
      goto LABEL_45;
    }
  }
  else if ( (v116 & 1) == 0 )
  {
    goto LABEL_38;
  }
LABEL_42:
  operator delete(v118);
  if ( (v22 & 1) != 0 )
    goto LABEL_43;
LABEL_39:
  if ( v9 >= 1 )
    goto LABEL_44;
LABEL_45:
  if ( (*(_BYTE *)a2 & 1) != 0 )
    v33 = *(_QWORD *)(a2 + 16);
  else
    v33 = a2 + 1;
  v34 = ioctl(*(_DWORD *)(a1 + 4), 0x41007701uLL, v33);
  v35 = *(_DWORD *)(a1 + 4);
  if ( v34 < 0 )
  {
    close(v35);
    *(_DWORD *)(a1 + 4) = -1;
    v108 = dword_45778;
    v110 = 0LL;
    v111 = 0LL;
    v109 = 0LL;
    if ( (word_45780 & 1) != 0 )
      v49 = (const char *)qword_45790;
    else
      v49 = (char *)&word_45780 + 1;
    v50 = strlen(v49);
    if ( v50 >= 0xFFFFFFFFFFFFFFF0LL )
      goto LABEL_138;
    v51 = v50;
    if ( v50 >= 0x17 )
    {
      v63 = (v50 + 16) & 0xFFFFFFFFFFFFFFF0LL;
      v52 = (char *)operator new(v63);
      v110 = v51;
      v111 = v52;
      v109 = v63 | 1;
    }
    else
    {
      v52 = (char *)&v109 + 1;
      LOBYTE(v109) = 2 * v50;
      if ( !v50 )
      {
LABEL_94:
        v52[v51] = 0;
        if ( (g3::logLevel(&v108) & 1) == 0 )
        {
          v68 = 0;
          if ( (v109 & 1) == 0 )
            goto LABEL_123;
          goto LABEL_126;
        }
        v106 = 0LL;
        v107 = 0LL;
        v105 = 0LL;
        v64 = pudutech::ASHTAG;
        v65 = strlen(pudutech::ASHTAG);
        if ( v65 >= 0xFFFFFFFFFFFFFFF0LL )
          std::__basic_string_common<true>::__throw_length_error();
        v66 = v65;
        if ( v65 >= 0x17 )
        {
          v79 = (v65 + 16) & 0xFFFFFFFFFFFFFFF0LL;
          v67 = (char *)operator new(v79);
          v106 = v66;
          v107 = v67;
          v105 = v79 | 1;
        }
        else
        {
          v67 = (char *)&v105 + 1;
          LOBYTE(v105) = 2 * v65;
          if ( !v65 )
          {
LABEL_121:
            v67[v66] = 0;
            v68 = g3::logTag(&v105);
            if ( (v105 & 1) != 0 )
            {
              operator delete(v107);
              if ( (v109 & 1) == 0 )
              {
LABEL_123:
                if ( (v68 & 1) == 0 )
                  return (unsigned int)-1;
                goto LABEL_127;
              }
            }
            else if ( (v109 & 1) == 0 )
            {
              goto LABEL_123;
            }
LABEL_126:
            operator delete(v111);
            if ( (v68 & 1) == 0 )
              return (unsigned int)-1;
LABEL_127:
            LogCapture::LogCapture((LogCapture *)v126, pudutech::ASHTAG, (const LEVELS *)&dword_45778, "", 6, 0LL);
            v80 = std::__put_character_sequence<char,std::char_traits<char>>(
                    v127,
                    (__int64)"set ashmem name failed ",
                    23LL);
            v82 = (int *)__errno(v80, v81);
            v83 = strerror(*v82);
            v84 = strlen(v83);
            std::__put_character_sequence<char,std::char_traits<char>>(v80, (__int64)v83, v84);
            goto LABEL_66;
          }
        }
        memcpy(v67, v64, v66);
        goto LABEL_121;
      }
    }
    memcpy(v52, v49, v51);
    goto LABEL_94;
  }
  v36 = ioctl(v35, 0x40087703uLL, a3);
  v37 = *(_DWORD *)(a1 + 4);
  if ( v36 < 0 )
  {
    close(v37);
    *(_DWORD *)(a1 + 4) = -1;
    v101 = dword_45778;
    v103 = 0LL;
    v104 = 0LL;
    v102 = 0LL;
    if ( (word_45780 & 1) != 0 )
      v53 = (const char *)qword_45790;
    else
      v53 = (char *)&word_45780 + 1;
    v54 = strlen(v53);
    if ( v54 < 0xFFFFFFFFFFFFFFF0LL )
    {
      v55 = v54;
      if ( v54 >= 0x17 )
      {
        v69 = (v54 + 16) & 0xFFFFFFFFFFFFFFF0LL;
        v56 = (char *)operator new(v69);
        v103 = v55;
        v104 = v56;
        v102 = v69 | 1;
      }
      else
      {
        v56 = (char *)&v102 + 1;
        LOBYTE(v102) = 2 * v54;
        if ( !v54 )
        {
LABEL_103:
          v56[v55] = 0;
          if ( (g3::logLevel(&v101) & 1) == 0 )
          {
            v74 = 0;
            if ( (v102 & 1) == 0 )
              goto LABEL_132;
            goto LABEL_135;
          }
          v99 = 0LL;
          v100 = 0LL;
          v98 = 0LL;
          v70 = pudutech::ASHTAG;
          v71 = strlen(pudutech::ASHTAG);
          if ( v71 >= 0xFFFFFFFFFFFFFFF0LL )
            std::__basic_string_common<true>::__throw_length_error();
          v72 = v71;
          if ( v71 >= 0x17 )
          {
            v85 = (v71 + 16) & 0xFFFFFFFFFFFFFFF0LL;
            v73 = (char *)operator new(v85);
            v99 = v72;
            v100 = v73;
            v98 = v85 | 1;
          }
          else
          {
            v73 = (char *)&v98 + 1;
            LOBYTE(v98) = 2 * v71;
            if ( !v71 )
            {
LABEL_130:
              v73[v72] = 0;
              v74 = g3::logTag(&v98);
              if ( (v98 & 1) != 0 )
              {
                operator delete(v100);
                if ( (v102 & 1) == 0 )
                {
LABEL_132:
                  if ( (v74 & 1) == 0 )
                    return (unsigned int)-1;
                  goto LABEL_136;
                }
              }
              else if ( (v102 & 1) == 0 )
              {
                goto LABEL_132;
              }
LABEL_135:
              operator delete(v104);
              if ( (v74 & 1) == 0 )
                return (unsigned int)-1;
LABEL_136:
              LogCapture::LogCapture((LogCapture *)v126, pudutech::ASHTAG, (const LEVELS *)&dword_45778, "", 6, 0LL);
              v86 = std::__put_character_sequence<char,std::char_traits<char>>(
                      v127,
                      (__int64)"set ashmem size failed ",
                      23LL);
              v88 = (int *)__errno(v86, v87);
              v89 = strerror(*v88);
              v90 = strlen(v89);
              std::__put_character_sequence<char,std::char_traits<char>>(v86, (__int64)v89, v90);
              goto LABEL_66;
            }
          }
          memcpy(v73, v70, v72);
          goto LABEL_130;
        }
      }
      memcpy(v56, v53, v55);
      goto LABEL_103;
    }
LABEL_138:
    std::__basic_string_common<true>::__throw_length_error();
  }
  ioctl(v37, 0x7704uLL, 0LL);
  if ( (word_45740 & 1) != 0 )
    v38 = (const char *)qword_45750;
  else
    v38 = (char *)&word_45740 + 1;
  v94 = dword_45738;
  v96 = 0LL;
  v97 = 0LL;
  v95 = 0LL;
  v39 = strlen(v38);
  if ( v39 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v40 = v39;
  if ( v39 >= 0x17 )
  {
    v57 = (v39 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v41 = (char *)operator new(v57);
    v96 = v40;
    v97 = v41;
    v95 = v57 | 1;
    goto LABEL_84;
  }
  v41 = (char *)&v95 + 1;
  LOBYTE(v95) = 2 * v39;
  if ( v39 )
LABEL_84:
    memcpy(v41, v38, v40);
  v41[v40] = 0;
  if ( (g3::logLevel(&v94) & 1) == 0 )
  {
    v62 = 0;
    if ( (v95 & 1) == 0 )
      goto LABEL_114;
    goto LABEL_117;
  }
  v92 = 0LL;
  v93 = 0LL;
  v91 = 0LL;
  v58 = pudutech::ASHTAG;
  v59 = strlen(pudutech::ASHTAG);
  if ( v59 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v60 = v59;
  if ( v59 >= 0x17 )
  {
    v75 = (v59 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v61 = (char *)operator new(v75);
    v92 = v60;
    v93 = v61;
    v91 = v75 | 1;
    goto LABEL_111;
  }
  v61 = (char *)&v91 + 1;
  LOBYTE(v91) = 2 * v59;
  if ( v59 )
LABEL_111:
    memcpy(v61, v58, v60);
  v61[v60] = 0;
  v62 = g3::logTag(&v91);
  if ( (v91 & 1) != 0 )
  {
    operator delete(v93);
    if ( (v95 & 1) == 0 )
    {
LABEL_114:
      if ( (v62 & 1) != 0 )
        goto LABEL_118;
      goto LABEL_44;
    }
  }
  else if ( (v95 & 1) == 0 )
  {
    goto LABEL_114;
  }
LABEL_117:
  operator delete(v97);
  if ( (v62 & 1) != 0 )
  {
LABEL_118:
    LogCapture::LogCapture((LogCapture *)v126, pudutech::ASHTAG, (const LEVELS *)&dword_45738, "", 6, 0LL);
    v76 = std::__put_character_sequence<char,std::char_traits<char>>(v127, (__int64)"check shared memory size ", 25LL);
    v77 = std::ostream::operator<<(v76);
    v78 = std::__put_character_sequence<char,std::char_traits<char>>(v77, (__int64)" after set size ", 16LL);
    std::ostream::operator<<(v78);
    LogCapture::~LogCapture((LogCapture *)v126);
  }
LABEL_44:
  v31 = mmap(0LL, (int)a3, 3, 1, *(_DWORD *)(a1 + 4), 0LL);
  v32 = *(_DWORD *)(a1 + 4);
  *(_QWORD *)(a1 + 8) = v31;
  return v32;
}
// 2B718: variable 'v44' is possibly undefined
// 2BBD0: variable 'v81' is possibly undefined
// 2BCB4: variable 'v87' is possibly undefined
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 10DE0: using guessed type __int64 __fastcall __errno(_QWORD, _QWORD);
// 45020: using guessed type char *pudutech::ASHMEM_DEVICE;
// 45028: using guessed type char *pudutech::ASHTAG;
// 45738: using guessed type int dword_45738;
// 45740: using guessed type __int16 word_45740;
// 45750: using guessed type __int64 qword_45750;
// 45778: using guessed type int dword_45778;
// 45780: using guessed type __int16 word_45780;
// 45790: using guessed type __int64 qword_45790;
// 2B244: using guessed type char var_1A8[8];

//----- (000000000002BE50) ----------------------------------------------------
_QWORD *__fastcall std::ostream::operator<<(_QWORD *a1)
{
  _QWORD *v2; // x8
  char *v3; // x9
  _QWORD *v4; // x0
  __int64 v5; // x21
  char *v6; // x22
  __int64 v7; // x23
  __int64 v8; // x0
  unsigned __int8 v9; // w24
  char v11[8]; // [xsp+0h] [xbp-60h] BYREF
  _QWORD *v12; // [xsp+8h] [xbp-58h]
  _QWORD v13[2]; // [xsp+10h] [xbp-50h] BYREF

  v13[1] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  v11[0] = 0;
  v12 = a1;
  v2 = (_QWORD *)(*a1 - 24LL);
  v3 = (char *)a1 + *v2;
  if ( !*((_DWORD *)v3 + 8) )
  {
    v4 = (_QWORD *)*((_QWORD *)v3 + 17);
    if ( v4 )
    {
      std::ostream::flush(v4);
      v2 = (_QWORD *)(*a1 - 24LL);
    }
    v11[0] = 1;
    std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *v2));
    v5 = std::locale::use_facet(v13, &std::num_put<char,std::ostreambuf_iterator<char>>::id);
    std::locale::~locale((std::locale *)v13);
    v6 = (char *)a1 + *(_QWORD *)(*a1 - 24LL);
    v7 = *((_QWORD *)v6 + 5);
    if ( *((_DWORD *)v6 + 36) == -1 )
    {
      std::ios_base::getloc(v13, (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)));
      v8 = std::locale::use_facet(v13, &std::ctype<char>::id);
      v9 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v8 + 56LL))(v8, 32LL);
      std::locale::~locale((std::locale *)v13);
      *((_DWORD *)v6 + 36) = v9;
    }
    if ( !(*(__int64 (__fastcall **)(__int64, __int64, char *))(*(_QWORD *)v5 + 48LL))(v5, v7, v6) )
      std::ios_base::clear(
        (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24LL)),
        *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24LL) + 32) | 5);
  }
  std::ostream::sentry::~sentry((__int64)v11);
  return a1;
}
// 110C0: using guessed type __int64 __fastcall std::locale::use_facet(_QWORD, _QWORD);
// 2BE50: using guessed type char var_60[8];

//----- (000000000002C01C) ----------------------------------------------------
__int64 __fastcall pudutech::Ashdmem::destroyMemory(pudutech::Ashdmem *this)
{
  if ( *(_BYTE *)this && (pudutech::Ashdmem::releaseSharedMemory(this) & 1) != 0 )
    return pudutech::Ashdmem::closeSharedMemory(this);
  else
    return 0LL;
}

//----- (000000000002C05C) ----------------------------------------------------
__int64 __usercall pudutech::Ashdmem::useMemory@<X0>(pudutech::Ashdmem *this@<X0>, unsigned __int64 *a2@<X8>)
{
  int v2; // w22
  unsigned __int64 v4; // x20
  unsigned __int64 *v5; // x0
  std::__shared_weak_count *v6; // x19
  unsigned __int64 *v7; // x23
  __int64 result; // x0
  unsigned __int64 v9; // x8

  v2 = (int)this;
  v4 = operator new(0x10uLL);
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v4 + 4) = -1;
  *(_QWORD *)(v4 + 8) = 0LL;
  v5 = (unsigned __int64 *)operator new(0x20uLL);
  v5[2] = 0LL;
  v6 = (std::__shared_weak_count *)v5;
  v5[1] = 0LL;
  v7 = v5 + 1;
  *v5 = (unsigned __int64)&off_444F0;
  v5[3] = v4;
  result = pudutech::Ashdmem::linkSharedMemory((pudutech::Ashdmem *)v4, v2);
  if ( (result & 1) != 0 )
  {
    *a2 = v4;
    a2[1] = (unsigned __int64)v6;
  }
  else
  {
    *a2 = 0LL;
    a2[1] = 0LL;
    do
      v9 = __ldaxr(v7);
    while ( __stlxr(v9 - 1, v7) );
    if ( !v9 )
    {
      (*(void (__fastcall **)(std::__shared_weak_count *))(*(_QWORD *)v6 + 16LL))(v6);
      return std::__shared_weak_count::__release_weak(v6);
    }
  }
  return result;
}
// 444F0: using guessed type void (__fastcall *off_444F0)(std::__shared_weak_count *__hidden this);

//----- (000000000002C194) ----------------------------------------------------
__int64 __fastcall pudutech::Ashdmem::linkSharedMemory(pudutech::Ashdmem *this, int fd)
{
  int v3; // w0
  const char *v4; // x22
  int v5; // w20
  size_t v6; // x0
  size_t v7; // x21
  char *v8; // x23
  unsigned __int64 v9; // x24
  char *v10; // x21
  size_t v11; // x0
  size_t v12; // x22
  char *v13; // x23
  char v14; // w21
  unsigned __int64 v15; // x24
  _QWORD *v16; // x0
  unsigned int v17; // w21
  unsigned __int64 v19; // [xsp+8h] [xbp-1C8h] BYREF
  size_t v20; // [xsp+10h] [xbp-1C0h]
  void *v21; // [xsp+18h] [xbp-1B8h]
  int v22; // [xsp+20h] [xbp-1B0h] BYREF
  unsigned __int64 v23; // [xsp+28h] [xbp-1A8h] BYREF
  size_t v24; // [xsp+30h] [xbp-1A0h]
  void *v25; // [xsp+38h] [xbp-198h]
  char v26[8]; // [xsp+40h] [xbp-190h] BYREF
  _QWORD v27[41]; // [xsp+48h] [xbp-188h] BYREF

  v27[40] = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 2)) + 40);
  *((_DWORD *)this + 1) = fd;
  v3 = ioctl(fd, 0x7704uLL, 0LL);
  if ( (word_45740 & 1) != 0 )
    v4 = (const char *)qword_45750;
  else
    v4 = (char *)&word_45740 + 1;
  v5 = v3;
  v22 = dword_45738;
  v24 = 0LL;
  v25 = 0LL;
  v23 = 0LL;
  v6 = strlen(v4);
  if ( v6 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v7 = v6;
  if ( v6 >= 0x17 )
  {
    v9 = (v6 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v8 = (char *)operator new(v9);
    v24 = v7;
    v25 = v8;
    v23 = v9 | 1;
    goto LABEL_9;
  }
  v8 = (char *)&v23 + 1;
  LOBYTE(v23) = 2 * v6;
  if ( v6 )
LABEL_9:
    memcpy(v8, v4, v7);
  v8[v7] = 0;
  if ( (g3::logLevel(&v22) & 1) == 0 )
  {
    v14 = 0;
    goto LABEL_20;
  }
  v20 = 0LL;
  v21 = 0LL;
  v19 = 0LL;
  v10 = pudutech::ASHTAG;
  v11 = strlen(pudutech::ASHTAG);
  if ( v11 >= 0xFFFFFFFFFFFFFFF0LL )
    std::__basic_string_common<true>::__throw_length_error();
  v12 = v11;
  if ( v11 >= 0x17 )
  {
    v15 = (v11 + 16) & 0xFFFFFFFFFFFFFFF0LL;
    v13 = (char *)operator new(v15);
    v20 = v12;
    v21 = v13;
    v19 = v15 | 1;
    goto LABEL_17;
  }
  v13 = (char *)&v19 + 1;
  LOBYTE(v19) = 2 * v11;
  if ( v11 )
LABEL_17:
    memcpy(v13, v10, v12);
  v13[v12] = 0;
  v14 = g3::logTag(&v19);
  if ( (v19 & 1) != 0 )
    operator delete(v21);
LABEL_20:
  if ( (v23 & 1) != 0 )
    operator delete(v25);
  if ( (v14 & 1) != 0 )
  {
    LogCapture::LogCapture((LogCapture *)v26, pudutech::ASHTAG, (const LEVELS *)&dword_45738, "", 6, 0LL);
    v16 = std::__put_character_sequence<char,std::char_traits<char>>(v27, (__int64)"shared memory length ", 21LL);
    std::ostream::operator<<(v16);
    LogCapture::~LogCapture((LogCapture *)v26);
  }
  if ( v5 )
  {
    v17 = 1;
    *((_QWORD *)this + 1) = mmap(0LL, v5, 3, 1, *((_DWORD *)this + 1), 0LL);
  }
  else
  {
    return 0;
  }
  return v17;
}
// 10860: using guessed type __int64 __fastcall g3::logLevel(_QWORD);
// 10880: using guessed type LogCapture *__fastcall LogCapture::LogCapture(LogCapture *__hidden this, const char *, const LEVELS *, const char *, int, const char *);
// 10D60: using guessed type __int64 __fastcall g3::logTag(_QWORD);
// 45028: using guessed type char *pudutech::ASHTAG;
// 45738: using guessed type int dword_45738;
// 45740: using guessed type __int16 word_45740;
// 45750: using guessed type __int64 qword_45750;
// 2C194: using guessed type char var_190[8];

//----- (000000000002C458) ----------------------------------------------------
__int64 __fastcall pudutech::Ashdmem::getMemory(pudutech::Ashdmem *this)
{
  if ( *(_BYTE *)this )
    return 0LL;
  else
    return *((_QWORD *)this + 1);
}

//----- (000000000002C470) ----------------------------------------------------
void __fastcall std::__shared_ptr_pointer<pudutech::Ashdmem  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(a1);
}

//----- (000000000002C494) ----------------------------------------------------
void __fastcall std::__shared_ptr_pointer<pudutech::Ashdmem  *>::__on_zero_shared(__int64 a1)
{
  pudutech::Ashdmem *v1; // x19

  v1 = *(pudutech::Ashdmem **)(a1 + 24);
  if ( v1 )
  {
    pudutech::Ashdmem::releaseSharedMemory(*(pudutech::Ashdmem **)(a1 + 24));
    if ( *(_BYTE *)v1 )
      pudutech::Ashdmem::closeSharedMemory(v1);
    operator delete(v1);
  }
}

//----- (000000000002C4E0) ----------------------------------------------------
__int64 __fastcall std::__shared_ptr_pointer<pudutech::Ashdmem  *>::__get_deleter(__int64 a1, __int64 a2)
{
  if ( *(char **)(a2 + 8) == "NSt6__ndk114default_deleteIN8pudutech7AshdmemEEE" )
    return a1 + 24;
  else
    return 0LL;
}

// nfuncs=558 queued=381 decompiled=381 lumina nreq=0 worse=0 better=0
// ALL OK, 381 function(s) have been successfully decompiled
