int64_t sub_125e0()
{
    /* jump -> nullptr */
}

int64_t Eigen::internal::tridiagonalization_inplace_selector<Eigen::Matrix<float, 3, 3, 0, 3, 3>, 3, false>::run<Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1> >(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3, bool arg4)
{
    /* tailcall */
    return Eigen::internal::tridiagonalization_inplace_selector<Eigen::Matrix<float, 3, 3, 0, 3, 3>, 3, false>::run<Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1> >(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::__shared_weak_count::__get_deleter(std::type_info* arg1)
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__get_deleter(arg1);
}

int64_t gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector0(cv::Mat* arg1, float arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8)
{
    /* tailcall */
    return gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector0(arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg1);
}

int64_t cv::FileStorage::FileStorage(cv::Mat* arg1, int32_t arg2, cv::Mat* arg3)
{
    /* tailcall */
    return cv::FileStorage::FileStorage(arg1, arg2, arg3);
}

int64_t std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(cv::Mat* arg1, char* arg2, uint64_t arg3)
{
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg1, arg2, arg3);
}

int64_t cv::Mat::deallocate()
{
    /* tailcall */
    return cv::Mat::deallocate();
}

int64_t system(char* arg1)
{
    /* tailcall */
    return system(arg1);
}

int64_t std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::__append(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::__append(arg1);
}

int64_t Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1, 0, -1, -1> >::resize(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1, 0, -1, -1> >::resize(arg1, arg2);
}

int64_t std::__ndk1::vector<std::__ndk1::shared_ptr<PlaneSeg>, std::__ndk1::allocator<std::__ndk1::shared_ptr<PlaneSeg> > >::__push_back_slow_path<std::__ndk1::shared_ptr<PlaneSeg> >(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<std::__ndk1::shared_ptr<PlaneSeg>, std::__ndk1::allocator<std::__ndk1::shared_ptr<PlaneSeg> > >::__push_back_slow_path<std::__ndk1::shared_ptr<PlaneSeg> >(arg1);
}

int64_t __cxa_free_exception()
{
    /* tailcall */
    return __cxa_free_exception();
}

int64_t Eigen::Matrix<float, -1, -1, 0, -1, -1>::operator=<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, false> >(cv::Mat* arg1)
{
    /* tailcall */
    return Eigen::Matrix<float, -1, -1, 0, -1, -1>::operator=<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, false> >(arg1);
}

int64_t Eigen::Matrix<bool, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, -1, 0, -1, -1> > >(cv::Mat* arg1)
{
    /* tailcall */
    return Eigen::Matrix<bool, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, -1, 0, -1, -1> > >(arg1);
}

int64_t getColorDepthImage(cv::Mat* arg1, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return getColorDepthImage(arg1, arg2, arg3);
}

int64_t std::logic_error::logic_error(char* arg1)
{
    /* tailcall */
    return std::logic_error::logic_error(arg1);
}

void* __cxa_begin_catch(void* exceptionObject)
{
    /* tailcall */
    return __cxa_begin_catch(exceptionObject);
}

int64_t CAPE::judgPlaneValid(cv::Mat* arg1, cv::Mat* arg2, float arg3, float arg4, float arg5)
{
    /* tailcall */
    return CAPE::judgPlaneValid(arg1, arg2, arg3, arg4, arg5);
}

int64_t feasibal_region::feasibal_region::run(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return feasibal_region::feasibal_region::run(arg1, arg2);
}

int64_t feasibal_region::ground_process::getExtrinsic()
{
    /* tailcall */
    return feasibal_region::ground_process::getExtrinsic();
}

int64_t LogCapture::capturef()
{
    /* tailcall */
    return LogCapture::capturef();
}

int64_t std::bad_cast::bad_cast()
{
    /* tailcall */
    return std::bad_cast::bad_cast();
}

int32_t __cxa_atexit(void (* func)(void* retval), void* arg, void* dso_handle)
{
    /* tailcall */
    return __cxa_atexit(func, arg, dso_handle);
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::sync()
{
    /* tailcall */
    return std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::sync();
}

int64_t feasibal_region::feasibal_region::init(int64_t arg1, int64_t arg2, int32_t arg3, double arg4)
{
    /* tailcall */
    return feasibal_region::feasibal_region::init(arg1, arg4, arg2, arg3);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(char arg1)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(arg1);
}

int64_t operator delete[](void* arg1)
{
    /* tailcall */
    return operator delete[](arg1);
}

int64_t cv::write(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return cv::write(arg1, arg2, arg3);
}

int64_t cv::write(cv::Mat* arg1, cv::Mat* arg2, int32_t arg3)
{
    /* tailcall */
    return cv::write(arg1, arg2, arg3);
}

int64_t std::__ndk1::uniform_int_distribution<int64_t>::operator()<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return std::__ndk1::uniform_int_distribution<int64_t>::operator()<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(arg1, arg2);
}

int64_t feasibal_region::ground_process::init(cv::Mat* arg1)
{
    /* tailcall */
    return feasibal_region::ground_process::init(arg1);
}

int64_t std::__ndk1::locale::has_facet(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::locale::has_facet(arg1);
}

int64_t operator new(uint64_t arg1)
{
    /* tailcall */
    return operator new(arg1);
}

int64_t Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(arg1, arg2);
}

int64_t access(char* arg1, int32_t arg2)
{
    /* tailcall */
    return access(arg1, arg2);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(arg1, arg2);
}

int64_t std::__ndk1::__basic_string_common<true>::__throw_length_error()
{
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_length_error();
}

int64_t sincos(double* arg1, double* arg2, double arg3)
{
    /* tailcall */
    return sincos(arg1, arg2, arg3);
}

int64_t atanf(float arg1)
{
    /* tailcall */
    return atanf(arg1);
}

int64_t ground_filter::Plane_Seg::judgPointsValid(cv::Mat* arg1)
{
    /* tailcall */
    return ground_filter::Plane_Seg::judgPointsValid(arg1);
}

int64_t fread(int64_t arg1, size_t arg2, size_t arg3, FILE* arg4)
{
    /* tailcall */
    return fread(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(char* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(arg1, arg2);
}

int128_t atan2f(float arg1, float arg2, float arg3)
{
    /* tailcall */
    return atan2f(arg1, arg2, arg3);
}

int64_t std::__ndk1::__shared_weak_count::__release_weak()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__release_weak();
}

int64_t malloc(size_t arg1)
{
    /* tailcall */
    return malloc(arg1);
}

int64_t cv::Mat_<uint8_t>::Mat_(int32_t arg1, int32_t arg2, uint8_t* arg3)
{
    /* tailcall */
    return cv::Mat_<uint8_t>::Mat_(arg1, arg2, arg3);
}

int64_t feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2, arg3);
}

int64_t cv::read(cv::Mat* arg1, int32_t* arg2, int32_t arg3)
{
    /* tailcall */
    return cv::read(arg1, arg2, arg3);
}

int64_t std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(int32_t** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(arg1);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(uint64_t arg1, char* arg2, uint64_t arg3)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(arg1, arg2, arg3);
}

void __stack_chk_fail() __noreturn
{
    /* tailcall */
    return __stack_chk_fail();
}

int64_t feasibal_region::ground_process::processSlopeBasePlane(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3, cv::Mat* arg4, cv::Mat* arg5, cv::Mat* arg6, cv::Mat* arg7, cv::Mat* arg8)
{
    /* tailcall */
    return feasibal_region::ground_process::processSlopeBasePlane(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

int64_t feasibal_region::ground_process::getExtrinsicFromPlane(cv::Mat* arg1)
{
    /* tailcall */
    return feasibal_region::ground_process::getExtrinsicFromPlane(arg1);
}

int64_t feasibal_region::PreParamInfo::PreParamInfo()
{
    /* tailcall */
    return feasibal_region::PreParamInfo::PreParamInfo();
}

int64_t lrintf(float arg1)
{
    /* tailcall */
    return lrintf(arg1);
}

int64_t std::__ndk1::random_device::random_device(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::random_device::random_device(arg1);
}

int64_t fwrite(int64_t arg1, size_t arg2, size_t arg3, FILE* arg4)
{
    /* tailcall */
    return fwrite(arg1, arg2, arg3, arg4);
}

int64_t cv::Mat::operator=(cv::Mat* arg1)
{
    /* tailcall */
    return cv::Mat::operator=(arg1);
}

int64_t PlaneSeg::fitPlane()
{
    /* tailcall */
    return PlaneSeg::fitPlane();
}

int64_t std::__ndk1::vector<PlaneSeg, std::__ndk1::allocator<PlaneSeg> >::__push_back_slow_path<PlaneSeg const&>(PlaneSeg** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<PlaneSeg, std::__ndk1::allocator<PlaneSeg> >::__push_back_slow_path<PlaneSeg const&>(arg1);
}

int64_t mkdir(int64_t arg1, mode_t arg2)
{
    /* tailcall */
    return mkdir(arg1, arg2);
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >(int64_t arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >(arg1, arg2, arg3);
}

int64_t std::__ndk1::__throw_system_error(int32_t arg1, char* arg2)
{
    /* tailcall */
    return std::__ndk1::__throw_system_error(arg1, arg2);
}

int64_t std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(arg1);
}

int64_t std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool>(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, 4ul* arg5)
{
    /* tailcall */
    return std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool>(arg1, arg2, arg3, arg4, arg5);
}

int64_t sincosf(float* arg1, float* arg2, float arg3)
{
    /* tailcall */
    return sincosf(arg1, arg2, arg3);
}

int64_t cv::operator&(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator&(arg1, arg2);
}

int64_t feasibal_region::ground_process::planeProcess()
{
    /* tailcall */
    return feasibal_region::ground_process::planeProcess();
}

int64_t cv::Mat_<double>::operator=(cv::Mat* arg1)
{
    /* tailcall */
    return cv::Mat_<double>::operator=(arg1);
}

int64_t cv::minMaxLoc(cv::Mat* arg1, double* arg2, double* arg3, cv::Mat* arg4, cv::Mat* arg5, cv::Mat* arg6)
{
    /* tailcall */
    return cv::minMaxLoc(arg1, arg2, arg3, arg4, arg5, arg6);
}

int64_t readdir(DIR* arg1)
{
    /* tailcall */
    return readdir(arg1);
}

int64_t operator delete(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::locale::use_facet(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::locale::use_facet(arg1);
}

int64_t lstat()
{
    /* tailcall */
    return lstat();
}

int64_t cv::operator==(cv::Mat* arg1, double arg2)
{
    /* tailcall */
    return cv::operator==(arg1, arg2);
}

int64_t read(int32_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return read(arg1, arg2, arg3);
}

int64_t cv::MatConstIterator::seek(int64_t arg1, bool arg2)
{
    /* tailcall */
    return cv::MatConstIterator::seek(arg1, arg2);
}

int64_t CAPE::process_modify_opt(cv::Mat* arg1, int32_t* arg2, cv::Mat* arg3, cv::Mat* arg4, cv::Mat* arg5, cv::Mat* arg6)
{
    /* tailcall */
    return CAPE::process_modify_opt(arg1, arg2, arg3, arg4, arg5, arg6);
}

int64_t Histogram::~Histogram()
{
    /* tailcall */
    return Histogram::~Histogram();
}

int64_t close(int32_t arg1)
{
    /* tailcall */
    return close(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush()
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
}

int64_t Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(int64_t arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(arg1, arg2, arg3);
}

int128_t pow(double arg1, double arg2)
{
    /* tailcall */
    return pow(arg1, arg2);
}

int64_t cv::FileNode::type()
{
    /* tailcall */
    return cv::FileNode::type();
}

int64_t cv::read(cv::Mat* arg1, float* arg2, float arg3)
{
    /* tailcall */
    return cv::read(arg1, arg2, arg3);
}

int64_t CAPE::swapPlanes(cv::Mat* arg1, cv::Mat* arg2, uint64_t arg3, uint64_t arg4)
{
    /* tailcall */
    return CAPE::swapPlanes(arg1, arg2, arg3, arg4);
}

int64_t checktool::saveResults(int64_t arg1)
{
    /* tailcall */
    return checktool::saveResults(arg1);
}

int64_t feasibal_region::ground_process::run(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return feasibal_region::ground_process::run(arg1, arg2);
}

int64_t cv::MatConstIterator::seek(int32_t* arg1, bool arg2)
{
    /* tailcall */
    return cv::MatConstIterator::seek(arg1, arg2);
}

int64_t cv::Mat::ones(int32_t arg1, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return cv::Mat::ones(arg1, arg2, arg3);
}

int64_t cv::Mat::create(int32_t arg1, int32_t* arg2, int32_t arg3)
{
    /* tailcall */
    return cv::Mat::create(arg1, arg2, arg3);
}

int64_t std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::tellg()
{
    /* tailcall */
    return std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::tellg();
}

int64_t cv::transpose(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::transpose(arg1, arg2);
}

int64_t operator new[](uint64_t arg1)
{
    /* tailcall */
    return operator new[](arg1);
}

int64_t std::uncaught_exception()
{
    /* tailcall */
    return std::uncaught_exception();
}

int64_t LogCapture::LogCapture(char* arg1, LEVELS* arg2, char* arg3, int32_t arg4, char* arg5)
{
    /* tailcall */
    return LogCapture::LogCapture(arg1, arg2, arg3, arg4, arg5);
}

int64_t ground_filter::Plane_Seg::getPointCloudOnIndexes(cv::Mat* arg1)
{
    /* tailcall */
    return ground_filter::Plane_Seg::getPointCloudOnIndexes(arg1);
}

int64_t cv::Mat::copyTo(cv::Mat* arg1)
{
    /* tailcall */
    return cv::Mat::copyTo(arg1);
}

int64_t free(int64_t arg1)
{
    /* tailcall */
    return free(arg1);
}

int64_t gte::NISymmetricEigensolver3x3<float>::operator()(int32_t arg1, cv::Mat* arg2, cv::Mat* arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9)
{
    /* tailcall */
    return gte::NISymmetricEigensolver3x3<float>::operator()(arg4, arg5, arg6, arg7, arg8, arg9, arg1, arg2, arg3);
}

int64_t std::__ndk1::vector<std::__ndk1::shared_ptr<PlaneSeg>, std::__ndk1::allocator<std::__ndk1::shared_ptr<PlaneSeg> > >::__push_back_slow_path<std::__ndk1::shared_ptr<PlaneSeg> const&>(cv::Mat** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<std::__ndk1::shared_ptr<PlaneSeg>, std::__ndk1::allocator<std::__ndk1::shared_ptr<PlaneSeg> > >::__push_back_slow_path<std::__ndk1::shared_ptr<PlaneSeg> const&>(arg1);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg1, arg2);
}

int64_t feasibal_region::RunInputParam::~RunInputParam()
{
    /* tailcall */
    return feasibal_region::RunInputParam::~RunInputParam();
}

int64_t std::__ndk1::getline<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(cv::Mat* arg1, cv::Mat* arg2, char arg3)
{
    /* tailcall */
    return std::__ndk1::getline<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(arg1, arg2, arg3);
}

int64_t __cxa_allocate_exception()
{
    /* tailcall */
    return __cxa_allocate_exception();
}

int64_t std::__ndk1::ios_base::getloc()
{
    /* tailcall */
    return std::__ndk1::ios_base::getloc();
}

int64_t cv::operator*(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator*(arg1, arg2);
}

int64_t PlaneSeg::updatePlaneSeg(cv::Mat* arg1, int32_t arg2, int32_t arg3, int32_t arg4)
{
    /* tailcall */
    return PlaneSeg::updatePlaneSeg(arg1, arg2, arg3, arg4);
}

int64_t feasibal_region::rotationMatrixFromAxisAndAngle(int64_t arg1, double arg2)
{
    /* tailcall */
    return feasibal_region::rotationMatrixFromAxisAndAngle(arg1, arg2);
}

int64_t __errno()
{
    /* tailcall */
    return __errno();
}

int64_t __gxx_personality_v0()
{
    /* tailcall */
    return __gxx_personality_v0();
}

int64_t fflush(FILE* arg1)
{
    /* tailcall */
    return fflush(arg1);
}

int64_t std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__emplace_back_slow_path<int32_t&>(int32_t** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__emplace_back_slow_path<int32_t&>(arg1);
}

int64_t _Unwind_Resume()
{
    /* tailcall */
    return _Unwind_Resume();
}

int64_t feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(int64_t arg1, int64_t arg2, uint32_t arg3, int32_t arg4, bool arg5, int32_t arg6, float arg7)
{
    /* tailcall */
    return feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(arg1, arg2, arg3, arg4, arg7, arg5, arg6);
}

int64_t CAPE::judgeValidBasedImage(cv::Mat* arg1, cv::Mat* arg2, uint32_t* arg3, uint32_t* arg4)
{
    /* tailcall */
    return CAPE::judgeValidBasedImage(arg1, arg2, arg3, arg4);
}

int64_t closedir(DIR* arg1)
{
    /* tailcall */
    return closedir(arg1);
}

int64_t open()
{
    /* tailcall */
    return open();
}

int128_t acos(double arg1)
{
    /* tailcall */
    return acos(arg1);
}

int64_t cv::projectPoints(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3, cv::Mat* arg4, cv::Mat* arg5, cv::Mat* arg6, cv::Mat* arg7, double arg8)
{
    /* tailcall */
    return cv::projectPoints(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

int64_t cv::rectangle(cv::Mat* arg1, int64_t arg2, cv::Mat* arg3, int32_t arg4, int32_t arg5, int32_t arg6)
{
    /* tailcall */
    return cv::rectangle(arg1, arg2, arg3, arg4, arg5, arg6);
}

int64_t strcmp()
{
    /* tailcall */
    return strcmp();
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf()
{
    /* tailcall */
    return std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
}

int64_t ground_filter::Plane_Seg::Plane_Seg(bool arg1, float arg2)
{
    /* tailcall */
    return ground_filter::Plane_Seg::Plane_Seg(arg1, arg2);
}

int64_t Eigen::DenseStorage<float, -1, -1, -1, 0>::DenseStorage(int64_t arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return Eigen::DenseStorage<float, -1, -1, -1, 0>::DenseStorage(arg1, arg2, arg3);
}

int64_t checktool::getExtrinsicParameters(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return checktool::getExtrinsicParameters(arg1, arg2);
}

int64_t feasibal_region::feasibal_region::readParam(cv::Mat* arg1)
{
    /* tailcall */
    return feasibal_region::feasibal_region::readParam(arg1);
}

int64_t feasibal_region::GroundProcessRunInData::~GroundProcessRunInData()
{
    /* tailcall */
    return feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
}

int64_t std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__swap_out_circular_buffer(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__swap_out_circular_buffer(arg1);
}

int64_t CAPE::RegionGrowing()
{
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t cv::operator+(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator+(arg1, arg2);
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf()
{
    /* tailcall */
    return std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf();
}

int64_t std::__ndk1::locale::locale(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::locale::locale(arg1);
}

int64_t Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(cv::Mat* arg1)
{
    /* tailcall */
    return Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(arg1);
}

int64_t feasibal_region::feasibal_region::init(cv::Mat* arg1)
{
    /* tailcall */
    return feasibal_region::feasibal_region::init(arg1);
}

int64_t ground_filter::Plane_Seg::segPlane(cv::Mat* arg1, cv::Mat* arg2, int32_t arg3)
{
    /* tailcall */
    return ground_filter::Plane_Seg::segPlane(arg1, arg2, arg3);
}

int64_t CAPE::getConnectedComponents(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return CAPE::getConnectedComponents(arg1, arg2);
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(cv::Mat** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(arg1);
}

int64_t isRotationMatrix(cv::Mat* arg1)
{
    /* tailcall */
    return isRotationMatrix(arg1);
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1> const*> >(int64_t arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1> const*> >(arg1, arg2, arg3);
}

int64_t cv::Mat::operator=(cv::Mat* arg1)
{
    /* tailcall */
    return cv::Mat::operator=(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry()
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
}

int64_t Eigen::SelfAdjointEigenSolver<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::compute(cv::Mat* arg1, int32_t arg2)
{
    /* tailcall */
    return Eigen::SelfAdjointEigenSolver<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::compute(arg1, arg2);
}

int64_t ground_filter::Plane_Seg::getPlaneFrom3Points(cv::Mat* arg1, int64_t arg2, cv::Mat* arg3)
{
    /* tailcall */
    return ground_filter::Plane_Seg::getPlaneFrom3Points(arg1, arg2, arg3);
}

int64_t std::__ndk1::vector<Eigen::Transform<float, 3, 1, 0>, std::__ndk1::allocator<Eigen::Transform<float, 3, 1, 0> > >::__push_back_slow_path<Eigen::Transform<float, 3, 1, 0> const&>(cv::Mat** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Transform<float, 3, 1, 0>, std::__ndk1::allocator<Eigen::Transform<float, 3, 1, 0> > >::__push_back_slow_path<Eigen::Transform<float, 3, 1, 0> const&>(arg1);
}

int64_t strftime(char* arg1, size_t arg2, char* arg3, struct tm* arg4)
{
    /* tailcall */
    return strftime(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(float arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

void __cxa_throw(void* thrown_exception, void* tinfo, void (* dest)(void* retval)) __noreturn
{
    /* tailcall */
    return __cxa_throw(thrown_exception, tinfo, dest);
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(arg1, arg2);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(uint32_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t PlaneSeg::~PlaneSeg()
{
    /* tailcall */
    return PlaneSeg::~PlaneSeg();
}

int64_t feasibal_region::ground_process::set_calib(int64_t arg1, float arg2)
{
    /* tailcall */
    return feasibal_region::ground_process::set_calib(arg1, arg2);
}

int64_t Eigen::PlainObjectBase<Eigen::Matrix<bool, -1, -1, 0, -1, -1> >::resize(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return Eigen::PlainObjectBase<Eigen::Matrix<bool, -1, -1, 0, -1, -1> >::resize(arg1, arg2);
}

int64_t memmove(int64_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return memmove(arg1, arg2, arg3);
}

int64_t cv::divide(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3, int32_t arg4, double arg5)
{
    /* tailcall */
    return cv::divide(arg1, arg2, arg3, arg5, arg4);
}

int64_t memset(int64_t arg1, int32_t arg2, size_t arg3)
{
    /* tailcall */
    return memset(arg1, arg2, arg3);
}

int64_t Histogram::getPointsFromMostFrequentBin()
{
    /* tailcall */
    return Histogram::getPointsFromMostFrequentBin();
}

int64_t fseeko(FILE* arg1, off_t arg2, int32_t arg3)
{
    /* tailcall */
    return fseeko(arg1, arg2, arg3);
}

int64_t cv::operator<<(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator<<(arg1, arg2);
}

int64_t std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::assign(uint64_t arg1, int32_t* arg2)
{
    /* tailcall */
    return std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::assign(arg1, arg2);
}

int64_t cv::operator-(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator-(arg1, arg2);
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf()
{
    /* tailcall */
    return std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf();
}

int64_t ground_filter::Plane_Seg::judgPlaneValid(cv::Mat* arg1, cv::Mat* arg2, float arg3)
{
    /* tailcall */
    return ground_filter::Plane_Seg::judgPlaneValid(arg1, arg2, arg3);
}

int64_t std::bad_alloc::bad_alloc()
{
    /* tailcall */
    return std::bad_alloc::bad_alloc();
}

int64_t time(time_t* arg1)
{
    /* tailcall */
    return time(arg1);
}

int64_t cv::Mat::convertTo(cv::Mat* arg1, int32_t arg2, double arg3, double arg4)
{
    /* tailcall */
    return cv::Mat::convertTo(arg1, arg2, arg3, arg4);
}

int128_t sin(double arg1)
{
    /* tailcall */
    return sin(arg1);
}

int64_t feasibal_region::feasibal_region::attemtpRead<cv::Mat>(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<cv::Mat>(arg1, arg2, arg3);
}

int64_t __cxa_finalize(int64_t arg1)
{
    /* tailcall */
    return __cxa_finalize(arg1);
}

int64_t std::__ndk1::locale::locale()
{
    /* tailcall */
    return std::__ndk1::locale::locale();
}

int64_t feasibal_region::RunOutputParam::~RunOutputParam()
{
    /* tailcall */
    return feasibal_region::RunOutputParam::~RunOutputParam();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(bool arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t std::__ndk1::vector<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::allocator<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > > > >::__push_back_slow_path<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > > const&>(cv::Mat** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::allocator<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > > > >::__push_back_slow_path<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > > const&>(arg1);
}

int64_t cv::circle(cv::Mat* arg1, int64_t arg2, int32_t arg3, cv::Mat* arg4, int32_t arg5, int32_t arg6, int32_t arg7)
{
    /* tailcall */
    return cv::circle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
}

int64_t rotationMatrixToEulerAngles(cv::Mat* arg1)
{
    /* tailcall */
    return rotationMatrixToEulerAngles(arg1);
}

int64_t std::__ndk1::__independent_bits_engine<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, uint64_t>::__eval(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__independent_bits_engine<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, uint64_t>::__eval(arg1);
}

int64_t std::__ndk1::vector<cv::Point_<int32_t>, std::__ndk1::allocator<cv::Point_<int32_t> > >::__push_back_slow_path<cv::Point_<int32_t> >(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<cv::Point_<int32_t>, std::__ndk1::allocator<cv::Point_<int32_t> > >::__push_back_slow_path<cv::Point_<int32_t> >(arg1);
}

int64_t CAPE::CAPE(int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, bool arg5, float arg6, float arg7, float arg8)
{
    /* tailcall */
    return CAPE::CAPE(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

int64_t cv::Mat::copySize(cv::Mat* arg1)
{
    /* tailcall */
    return cv::Mat::copySize(arg1);
}

int64_t cv::read(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return cv::read(arg1, arg2, arg3);
}

int64_t gettimeofday(struct timeval* arg1, int64_t arg2)
{
    /* tailcall */
    return gettimeofday(arg1, arg2);
}

int64_t cv::imwrite(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return cv::imwrite(arg1, arg2, arg3);
}

int64_t __cxa_end_catch()
{
    /* tailcall */
    return __cxa_end_catch();
}

int64_t ftello(FILE* arg1)
{
    /* tailcall */
    return ftello(arg1);
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::insert(int64_t arg1, cv::Mat* arg2)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::insert(arg1, arg2);
}

int64_t cv::imshow(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::imshow(arg1, arg2);
}

int64_t cv::operator-(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator-(arg1, arg2);
}

int64_t std::runtime_error::runtime_error(char* arg1)
{
    /* tailcall */
    return std::runtime_error::runtime_error(arg1);
}

int64_t LogCapture::~LogCapture()
{
    /* tailcall */
    return LogCapture::~LogCapture();
}

int64_t feasibal_region::ground_process::ground_process()
{
    /* tailcall */
    return feasibal_region::ground_process::ground_process();
}

int64_t PlaneSeg::operator=(cv::Mat* arg1)
{
    /* tailcall */
    return PlaneSeg::operator=(arg1);
}

int64_t fclose(FILE* arg1)
{
    /* tailcall */
    return fclose(arg1);
}

int128_t atan2(double arg1, double arg2)
{
    /* tailcall */
    return atan2(arg1, arg2);
}

int64_t fprintf()
{
    /* tailcall */
    return fprintf();
}

int64_t std::__ndk1::vector<std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::allocator<std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> > > >::vector(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::vector<std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::allocator<std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> > > >::vector(arg1);
}

int64_t std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__push_back_slow_path<cv::Mat const&>(cv::Mat** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__push_back_slow_path<cv::Mat const&>(arg1);
}

int64_t cv::cvtColor(cv::Mat* arg1, cv::Mat* arg2, int32_t arg3, int32_t arg4)
{
    /* tailcall */
    return cv::cvtColor(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(arg1, arg2);
}

int128_t cos(double arg1)
{
    /* tailcall */
    return cos(arg1);
}

int64_t CAPE::updateDefaultPlane(int64_t arg1, float arg2)
{
    /* tailcall */
    return CAPE::updateDefaultPlane(arg1, arg2);
}

int64_t cv::Mat::eye(int32_t arg1, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return cv::Mat::eye(arg1, arg2, arg3);
}

int64_t ground_filter::Plane_Seg::optimizePlaneCoef(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return ground_filter::Plane_Seg::optimizePlaneCoef(arg1, arg2, arg3);
}

int64_t PlaneSeg::expandSegment(int64_t arg1)
{
    /* tailcall */
    return PlaneSeg::expandSegment(arg1);
}

int64_t cv::read(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return cv::read(arg1, arg2, arg3);
}

int64_t cv::imread(cv::Mat* arg1, int32_t arg2)
{
    /* tailcall */
    return cv::imread(arg1, arg2);
}

int64_t std::__ndk1::locale::~locale()
{
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t checktool::getNearEdge(cv::Mat* arg1, int32_t arg2)
{
    /* tailcall */
    return checktool::getNearEdge(arg1, arg2);
}

int64_t feasibal_region::PreParamInfo::~PreParamInfo()
{
    /* tailcall */
    return feasibal_region::PreParamInfo::~PreParamInfo();
}

int64_t cv::operator+(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator+(arg1, arg2);
}

int64_t std::__ndk1::random_device::operator()()
{
    /* tailcall */
    return std::__ndk1::random_device::operator()();
}

int64_t Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(arg1, arg2);
}

int64_t cv::FileStorage::~FileStorage()
{
    /* tailcall */
    return cv::FileStorage::~FileStorage();
}

int64_t cv::Mat::setTo(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::Mat::setTo(arg1, arg2);
}

int64_t CAPE::set_extrinsic(int64_t arg1, int64_t arg2)
{
    /* tailcall */
    return CAPE::set_extrinsic(arg1, arg2);
}

int64_t cv::error(int32_t arg1, cv::Mat* arg2, char* arg3, char* arg4, int32_t arg5)
{
    /* tailcall */
    return cv::error(arg1, arg2, arg3, arg4, arg5);
}

int64_t std::__ndk1::__basic_string_common<true>::__throw_out_of_range()
{
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
}

int128_t cosf(int64_t arg1, int64_t arg2, int32_t arg3, float arg4)
{
    /* tailcall */
    return cosf(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::ios_base::init(void* arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::init(arg1);
}

int64_t checktool::getPointCloud(int64_t arg1, int64_t arg2, int32_t arg3)
{
    /* tailcall */
    return checktool::getPointCloud(arg1, arg2, arg3);
}

int64_t std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::assign<ground_filter::plane_base*>(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::assign<ground_filter::plane_base*>(arg1, arg2);
}

int64_t cv::putText(cv::Mat* arg1, cv::Mat* arg2, int64_t arg3, int32_t arg4, int64_t arg5, int32_t arg6, int32_t arg7, bool arg8, double arg9)
{
    /* tailcall */
    return cv::putText(arg1, arg2, arg3, arg4, arg9, arg5, arg6, arg7, arg8);
}

int64_t cv::getTextSize(cv::Mat* arg1, int32_t arg2, int32_t arg3, int32_t* arg4, double arg5)
{
    /* tailcall */
    return cv::getTextSize(arg1, arg2, arg5, arg3, arg4);
}

int64_t feasibal_region::feasibal_region::feasibal_region()
{
    /* tailcall */
    return feasibal_region::feasibal_region::feasibal_region();
}

int64_t feasibal_region::PreParamInfo::operator=(cv::Mat* arg1)
{
    /* tailcall */
    return feasibal_region::PreParamInfo::operator=(arg1);
}

int64_t cv::FileStorage::operator[](cv::Mat* arg1)
{
    /* tailcall */
    return cv::FileStorage::operator[](arg1);
}

int64_t cv::MatExpr::~MatExpr()
{
    /* tailcall */
    return cv::MatExpr::~MatExpr();
}

int64_t Histogram::Histogram(int32_t arg1)
{
    /* tailcall */
    return Histogram::Histogram(arg1);
}

int64_t CAPE::getBestPlane(cv::Mat* arg1, cv::Mat* arg2, int32_t* arg3)
{
    /* tailcall */
    return CAPE::getBestPlane(arg1, arg2, arg3);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int32_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t CAPE::~CAPE()
{
    /* tailcall */
    return CAPE::~CAPE();
}

int128_t acosf(float arg1)
{
    /* tailcall */
    return acosf(arg1);
}

int64_t Histogram::initHistogram(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return Histogram::initHistogram(arg1, arg2);
}

int64_t g3::logLevel(int64_t arg1)
{
    /* tailcall */
    return g3::logLevel(arg1);
}

int64_t std::__ndk1::__split_buffer<cv::Mat, std::__ndk1::allocator<cv::Mat>&>::~__split_buffer()
{
    /* tailcall */
    return std::__ndk1::__split_buffer<cv::Mat, std::__ndk1::allocator<cv::Mat>&>::~__split_buffer();
}

int64_t std::__ndk1::to_string(uint32_t arg1)
{
    /* tailcall */
    return std::__ndk1::to_string(arg1);
}

int128_t log(double arg1)
{
    /* tailcall */
    return log(arg1);
}

int64_t std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool&>(int64_t arg1, int64_t arg2, int64_t arg3, int64_t arg4, 4ul* arg5)
{
    /* tailcall */
    return std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool&>(arg1, arg2, arg3, arg4, arg5);
}

int64_t feasibal_region::ground_process::pointCloudProcess(int64_t arg1)
{
    /* tailcall */
    return feasibal_region::ground_process::pointCloudProcess(arg1);
}

int64_t cv::noArray()
{
    /* tailcall */
    return cv::noArray();
}

int64_t cv::operator*(cv::Mat* arg1, double arg2)
{
    /* tailcall */
    return cv::operator*(arg2, arg1);
}

int64_t std::__ndk1::ios_base::clear(uint32_t arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::clear(arg1);
}

int64_t cv::FileStorage::release()
{
    /* tailcall */
    return cv::FileStorage::release();
}

int64_t cv::operator*(cv::Mat* arg1, double arg2)
{
    /* tailcall */
    return cv::operator*(arg1, arg2);
}

int64_t std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t>(int32_t* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t>(arg1);
}

int64_t sscanf()
{
    /* tailcall */
    return sscanf();
}

int64_t cv::waitKey(int32_t arg1)
{
    /* tailcall */
    return cv::waitKey(arg1);
}

int64_t std::__ndk1::vector<cv::Vec<int32_t, 4>, std::__ndk1::allocator<cv::Vec<int32_t, 4> > >::__push_back_slow_path<cv::Vec<int32_t, 4> const&>(cv::Mat** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<cv::Vec<int32_t, 4>, std::__ndk1::allocator<cv::Vec<int32_t, 4> > >::__push_back_slow_path<cv::Vec<int32_t, 4> const&>(arg1);
}

int64_t std::__ndk1::__vector_base_common<true>::__throw_length_error()
{
    /* tailcall */
    return std::__ndk1::__vector_base_common<true>::__throw_length_error();
}

int64_t ground_filter::Plane_Seg::computeRoots(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return ground_filter::Plane_Seg::computeRoots(arg1, arg2);
}

int64_t ground_filter::Plane_Seg::segPlane(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3, cv::Mat* arg4, cv::Mat* arg5, int64_t arg6, int64_t arg7, int32_t arg8, float arg9)
{
    /* tailcall */
    return ground_filter::Plane_Seg::segPlane(arg1, arg2, arg3, arg4, arg5, arg6, arg9, arg7, arg8);
}

int64_t std::__ndk1::ios_base::__set_badbit_and_consider_rethrow()
{
    /* tailcall */
    return std::__ndk1::ios_base::__set_badbit_and_consider_rethrow();
}

int64_t localtime(time_t* arg1)
{
    /* tailcall */
    return localtime(arg1);
}

int64_t cv::Mat_<int32_t>::Mat_(int32_t arg1, int32_t arg2, int32_t* arg3)
{
    /* tailcall */
    return cv::Mat_<int32_t>::Mat_(arg1, arg2, arg3);
}

int64_t eulerAnglestoRotationMtx(int64_t arg1)
{
    /* tailcall */
    return eulerAnglestoRotationMtx(arg1);
}

int64_t ground_filter::Plane_Seg::run(cv::Mat* arg1, int32_t arg2, int32_t arg3, int32_t arg4, cv::Mat* arg5, cv::Mat* arg6, cv::Mat* arg7, float arg8)
{
    /* tailcall */
    return ground_filter::Plane_Seg::run(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

int64_t std::__ndk1::random_device::~random_device()
{
    /* tailcall */
    return std::__ndk1::random_device::~random_device();
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> >(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> >(arg1);
}

int64_t feasibal_region::ground_process::getPlaneFromExtrinsic(cv::Mat* arg1, float* arg2, bool arg3)
{
    /* tailcall */
    return feasibal_region::ground_process::getPlaneFromExtrinsic(arg1, arg2, arg3);
}

int64_t fopen(char* arg1, char* arg2)
{
    /* tailcall */
    return fopen(arg1, arg2);
}

int64_t std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(int64_t arg1, int64_t arg2, int64_t arg3)
{
    /* tailcall */
    return std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(arg1, arg2, arg3);
}

int64_t cv::write(cv::Mat* arg1, cv::Mat* arg2, double arg3)
{
    /* tailcall */
    return cv::write(arg1, arg2, arg3);
}

int64_t cv::FileStorage::isOpened()
{
    /* tailcall */
    return cv::FileStorage::isOpened();
}

int64_t feasibal_region::ground_process::~ground_process()
{
    /* tailcall */
    return feasibal_region::ground_process::~ground_process();
}

int64_t feasibal_region::ground_process::groundProcess()
{
    /* tailcall */
    return feasibal_region::ground_process::groundProcess();
}

int64_t cv::operator>(cv::Mat* arg1, double arg2)
{
    /* tailcall */
    return cv::operator>(arg1, arg2);
}

int64_t memcpy(int64_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return memcpy(arg1, arg2, arg3);
}

int64_t cv::operator+(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator+(arg1, arg2);
}

int64_t ground_filter::plane_base::operator=(cv::Mat* arg1)
{
    /* tailcall */
    return ground_filter::plane_base::operator=(arg1);
}

int64_t feasibal_region::ground_process::GetCameraPlaneRT_(int64_t arg1, cv::Mat* arg2, cv::Mat* arg3, float arg4)
{
    /* tailcall */
    return feasibal_region::ground_process::GetCameraPlaneRT_(arg1, arg2, arg3, arg4);
}

int64_t cv::operator*(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return cv::operator*(arg1, arg2);
}

int64_t CAPE::imageScore(cv::Mat* arg1, int32_t* arg2)
{
    /* tailcall */
    return CAPE::imageScore(arg1, arg2);
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 4, 1, 0, 4, 1> >(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 4, 1, 0, 4, 1> >(arg1);
}

int64_t feasibal_region::RunInputParam::RunInputParam()
{
    /* tailcall */
    return feasibal_region::RunInputParam::RunInputParam();
}

int64_t gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector1(cv::Mat* arg1, cv::Mat* arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9)
{
    /* tailcall */
    return gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector1(arg3, arg4, arg5, arg6, arg7, arg8, arg1, arg9, arg2);
}

int64_t std::__ndk1::ios_base::~ios_base()
{
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t cv::fastFree(void* arg1)
{
    /* tailcall */
    return cv::fastFree(arg1);
}

int64_t g3::logTag(int64_t arg1)
{
    /* tailcall */
    return g3::logTag(arg1);
}

int64_t feasibal_region::feasibal_region::WriteCameraParam(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return feasibal_region::feasibal_region::WriteCameraParam(arg1, arg2);
}

int64_t Histogram::removePoint(int32_t arg1)
{
    /* tailcall */
    return Histogram::removePoint(arg1);
}

int64_t ground_filter::plane_base::plane_base(cv::Mat* arg1)
{
    /* tailcall */
    return ground_filter::plane_base::plane_base(arg1);
}

int64_t feasibal_region::getDirectorySize(int64_t arg1)
{
    /* tailcall */
    return feasibal_region::getDirectorySize(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(double arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t Eigen::internal::apply_rotation_in_the_plane<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, float>(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return Eigen::internal::apply_rotation_in_the_plane<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, float>(arg1, arg2, arg3);
}

int64_t cv::norm(cv::Mat* arg1, cv::Mat* arg2, int32_t arg3, cv::Mat* arg4)
{
    /* tailcall */
    return cv::norm(arg1, arg2, arg3, arg4);
}

int64_t cv::Mat_<double>::operator=(cv::Mat* arg1)
{
    /* tailcall */
    return cv::Mat_<double>::operator=(arg1);
}

int64_t cv::medianBlur(cv::Mat* arg1, cv::Mat* arg2, int32_t arg3)
{
    /* tailcall */
    return cv::medianBlur(arg1, arg2, arg3);
}

int64_t cv::Mat::zeros(int32_t arg1, int32_t arg2, int32_t arg3)
{
    /* tailcall */
    return cv::Mat::zeros(arg1, arg2, arg3);
}

int64_t rand()
{
    /* tailcall */
    return rand();
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(cv::Mat* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(arg1);
}

int64_t feasibal_region::ground_process::getTFMatrix(cv::Mat* arg1, cv::Mat* arg2)
{
    /* tailcall */
    return feasibal_region::ground_process::getTFMatrix(arg1, arg2);
}

int64_t std::__ndk1::vector<cv::Vec<uint8_t, 3>, std::__ndk1::allocator<cv::Vec<uint8_t, 3> > >::__push_back_slow_path<cv::Vec<uint8_t, 3> const&>(cv::Mat** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<cv::Vec<uint8_t, 3>, std::__ndk1::allocator<cv::Vec<uint8_t, 3> > >::__push_back_slow_path<cv::Vec<uint8_t, 3> const&>(arg1);
}

int64_t feasibal_region::depth2color(cv::Mat* arg1, cv::Mat* arg2, double arg3, double arg4)
{
    /* tailcall */
    return feasibal_region::depth2color(arg1, arg2, arg3, arg4);
}

int64_t std::__ndk1::__shared_weak_count::~__shared_weak_count()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t cv::Mat::reshape(int32_t arg1, int32_t arg2, int32_t* arg3)
{
    /* tailcall */
    return cv::Mat::reshape(arg1, arg2, arg3);
}

int64_t feasibal_region::feasibal_region::readParam(int64_t arg1, int64_t arg2, int32_t arg3, double arg4)
{
    /* tailcall */
    return feasibal_region::feasibal_region::readParam(arg1, arg4, arg2, arg3);
}

int64_t strlen(char* arg1)
{
    /* tailcall */
    return strlen(arg1);
}

int64_t sprintf()
{
    /* tailcall */
    return sprintf();
}

int64_t cv::applyColorMap(cv::Mat* arg1, cv::Mat* arg2, int32_t arg3)
{
    /* tailcall */
    return cv::applyColorMap(arg1, arg2, arg3);
}

int64_t ground_filter::Plane_Seg::computeMeanAndCovarianceMatrix(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3)
{
    /* tailcall */
    return ground_filter::Plane_Seg::computeMeanAndCovarianceMatrix(arg1, arg2, arg3);
}

int64_t cv::countNonZero(cv::Mat* arg1)
{
    /* tailcall */
    return cv::countNonZero(arg1);
}

int64_t ground_filter::Plane_Seg::~Plane_Seg()
{
    /* tailcall */
    return ground_filter::Plane_Seg::~Plane_Seg();
}

int32_t std::terminate() __noreturn
{
    /* tailcall */
    return std::terminate();
}

int64_t opendir(char* arg1)
{
    /* tailcall */
    return opendir(arg1);
}

int64_t std::__ndk1::vector<cv::Vec<float, 3>, std::__ndk1::allocator<cv::Vec<float, 3> > >::__push_back_slow_path<cv::Vec<float, 3> const&>(cv::Mat** arg1)
{
    /* tailcall */
    return std::__ndk1::vector<cv::Vec<float, 3>, std::__ndk1::allocator<cv::Vec<float, 3> > >::__push_back_slow_path<cv::Vec<float, 3> const&>(arg1);
}

int64_t feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData()
{
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
}

int64_t posix_memalign(int64_t arg1, size_t arg2, size_t arg3)
{
    /* tailcall */
    return posix_memalign(arg1, arg2, arg3);
}

int64_t feasibal_region::ground_process::init_data_pre(int64_t arg1)
{
    /* tailcall */
    return feasibal_region::ground_process::init_data_pre(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::put(char arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::put(arg1);
}

int64_t cv::resize(cv::Mat* arg1, cv::Mat* arg2, int64_t arg3, int32_t arg4, double arg5, double arg6)
{
    /* tailcall */
    return cv::resize(arg1, arg2, arg3, arg5, arg6, arg4);
}

int64_t std::__ndk1::vector<float, std::__ndk1::allocator<float> >::insert(int64_t arg1, float* arg2)
{
    /* tailcall */
    return std::__ndk1::vector<float, std::__ndk1::allocator<float> >::insert(arg1, arg2);
}

int64_t std::__ndk1::__split_buffer<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base>&>::~__split_buffer()
{
    /* tailcall */
    return std::__ndk1::__split_buffer<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base>&>::~__split_buffer();
}

int64_t std::__ndk1::to_string(int32_t arg1)
{
    /* tailcall */
    return std::__ndk1::to_string(arg1);
}

int64_t _start()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::anyimpl::empty_any>::policy = 1;
    }
}

int64_t sub_1399c()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<char const*>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<char const*>::policy = 1;
    }
}

int64_t sub_139b8()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<int32_t>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<int32_t>::policy = 1;
    }
}

int64_t sub_139d4()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<float>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<float>::policy = 1;
    }
}

int64_t sub_139f0()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<bool>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<bool>::policy = 1;
    }
}

int64_t sub_13a0c()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::flann_algorithm_t>::policy = 1;
    }
}

int64_t sub_13a28()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<cvflann::flann_centers_init_t>::policy = 1;
    }
}

int64_t sub_13a44()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<uint32_t>::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<uint32_t>::policy = 1;
    }
}

int64_t sub_13a60()
{
    if ((*guard_variable_for_cvflann::anyimpl::SinglePolicy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::policy & 1) == 0)
    {
        *guard_variable_for_cvflann::anyimpl::SinglePolicy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::policy = 1;
    }
}

int64_t sub_13a7c()
{
    __bss_start = 0x64;
    data_6fc58 = 0x4402;
    __builtin_memset(&data_6fc5a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &__bss_start, &data_6f000);
    data_6fc70 = 0x32;
    data_6fc78 = 0x5602;  {  // {"2basic_stringIcNS2_11char_traits…"}}
    __builtin_memset(&data_6fc7a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fc70, &data_6f000);
    data_6fc90 = 0x12c;
    data_6fc98 = 0x4902;
    __builtin_memset(&data_6fc9a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fc90, &data_6f000);
    data_6fcb0 = 0x1f4;
    data_6fcb8 = 0x5702;  {  // {"ty_anyEE6policyE"}}
    __builtin_memset(&data_6fcba, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fcb0, &data_6f000);
    data_6fcd0 = 0x320;
    data_6fcd8 = 0x4502;
    __builtin_memset(&data_6fcda, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fcd0, &data_6f000);
    data_6fcf0 = 0x3e8;
    data_6fcf8 = 0x4602;
    __builtin_memset(&data_6fcfa, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fcf0, &data_6f000);
    data_6fd10 = 0x7d0;
    data_6fd18 = 0x10;
    __builtin_strncpy(&data_6fd19, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fd10, &data_6f000);
    data_6fd30 = 0x7d1;
    data_6fd38 = 0x18;
    __builtin_strncpy(&data_6fd39, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fd30, &data_6f000);
    data_6fd50 = 0x7d2;
    data_6fd58 = 0x1e;
    __builtin_strncpy(&data_6fd59, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fd50, &data_6f000);
    __builtin_memset(&data_6fd70, 0, 0x18);
    data_6fd70 = 0x10;
    __builtin_strncpy(&data_6fd71, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_6fd70, &data_6f000);
    __builtin_memset(&data_6fd88, 0, 0x18);
    data_6fd88 = 0x18;
    __builtin_strncpy(&data_6fd89, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_6fd88, &data_6f000);
}

int64_t sub_13d20()
{
    data_6fde8 = 0x64;
    data_6fdf0 = 0x4402;
    __builtin_memset(&data_6fdf2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fde8, &data_6f000);
    data_6fe08 = 0x32;
    data_6fe10 = 0x5602;  {  // {"2basic_stringIcNS2_11char_traits…"}}
    __builtin_memset(&data_6fe12, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fe08, &data_6f000);
    data_6fe28 = 0x12c;
    data_6fe30 = 0x4902;
    __builtin_memset(&data_6fe32, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fe28, &data_6f000);
    data_6fe48 = 0x1f4;
    data_6fe50 = 0x5702;  {  // {"ty_anyEE6policyE"}}
    __builtin_memset(&data_6fe52, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fe48, &data_6f000);
    data_6fe68 = 0x320;
    data_6fe70 = 0x4502;
    __builtin_memset(&data_6fe72, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fe68, &data_6f000);
    data_6fe88 = 0x3e8;
    data_6fe90 = 0x4602;
    __builtin_memset(&data_6fe92, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fe88, &data_6f000);
    data_6fea8 = 0x7d0;
    data_6feb0 = 0x10;
    __builtin_strncpy(&data_6feb1, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fea8, &data_6f000);
    data_6fec8 = 0x7d1;
    data_6fed0 = 0x18;
    __builtin_strncpy(&data_6fed1, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fec8, &data_6f000);
    data_6fee8 = 0x7d2;
    data_6fef0 = 0x1e;
    __builtin_strncpy(&data_6fef1, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fee8, &data_6f000);
    __builtin_memset(&data_6ff08, 0, 0x18);
    data_6ff08 = 0x10;
    __builtin_strncpy(&data_6ff09, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_6ff08, &data_6f000);
    __builtin_memset(&data_6ff20, 0, 0x18);
    data_6ff20 = 0x18;
    __builtin_strncpy(&data_6ff21, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_6ff20, &data_6f000);
}

int64_t sub_13fc4()
{
    data_6ff38 = 0x64;
    data_6ff40 = 0x4402;
    __builtin_memset(&data_6ff42, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6ff38, &data_6f000);
    data_6ff58 = 0x32;
    data_6ff60 = 0x5602;  {  // {"2basic_stringIcNS2_11char_traits…"}}
    __builtin_memset(&data_6ff62, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6ff58, &data_6f000);
    data_6ff78 = 0x12c;
    data_6ff80 = 0x4902;
    __builtin_memset(&data_6ff82, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6ff78, &data_6f000);
    data_6ff98 = 0x1f4;
    data_6ffa0 = 0x5702;  {  // {"ty_anyEE6policyE"}}
    __builtin_memset(&data_6ffa2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6ff98, &data_6f000);
    data_6ffb8 = 0x320;
    data_6ffc0 = 0x4502;
    __builtin_memset(&data_6ffc2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6ffb8, &data_6f000);
    data_6ffd8 = 0x3e8;
    data_6ffe0 = 0x4602;
    __builtin_memset(&data_6ffe2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_6ffd8, &data_6f000);
    data_6fff8 = 0x7d0;
    data_70000 = 0x10;
    __builtin_strncpy(&data_70001, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_6fff8, &data_6f000);
    data_70018 = 0x7d1;
    data_70020 = 0x18;
    __builtin_strncpy(&data_70021, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_70018, &data_6f000);
    data_70038 = 0x7d2;
    data_70040 = 0x1e;
    __builtin_strncpy(&data_70041, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_70038, &data_6f000);
    __builtin_memset(&data_70058, 0, 0x18);
    data_70058 = 0x10;
    __builtin_strncpy(&data_70059, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_70058, &data_6f000);
    __builtin_memset(&data_70070, 0, 0x18);
    data_70070 = 0x18;
    __builtin_strncpy(&data_70071, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_70070, &data_6f000);
}

int64_t sub_14268()
{
    data_70088 = 0x64;
    data_70090 = 0x4402;
    __builtin_memset(&data_70092, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_70088, &data_6f000);
    data_700a8 = 0x32;
    data_700b0 = 0x5602;  {  // {"2basic_stringIcNS2_11char_traits…"}}
    __builtin_memset(&data_700b2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_700a8, &data_6f000);
    data_700c8 = 0x12c;
    data_700d0 = 0x4902;
    __builtin_memset(&data_700d2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_700c8, &data_6f000);
    data_700e8 = 0x1f4;
    data_700f0 = 0x5702;  {  // {"ty_anyEE6policyE"}}
    __builtin_memset(&data_700f2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_700e8, &data_6f000);
    data_70108 = 0x320;
    data_70110 = 0x4502;
    __builtin_memset(&data_70112, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_70108, &data_6f000);
    data_70128 = 0x3e8;
    data_70130 = 0x4602;
    __builtin_memset(&data_70132, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_70128, &data_6f000);
    data_70148 = 0x7d0;
    data_70150 = 0x10;
    __builtin_strncpy(&data_70151, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_70148, &data_6f000);
    data_70168 = 0x7d1;
    data_70170 = 0x18;
    __builtin_strncpy(&data_70171, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_70168, &data_6f000);
    data_70188 = 0x7d2;
    data_70190 = 0x1e;
    __builtin_strncpy(&data_70191, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_70188, &data_6f000);
    __builtin_memset(&data_701a8, 0, 0x18);
    data_701a8 = 0x10;
    __builtin_strncpy(&data_701a9, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_701a8, &data_6f000);
    __builtin_memset(&data_701c0, 0, 0x18);
    data_701c0 = 0x18;
    __builtin_strncpy(&data_701c1, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_701c0, &data_6f000);
}

int64_t sub_1450c()
{
    data_701d8 = 0x64;
    data_701e0 = 0x4402;
    __builtin_memset(&data_701e2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_701d8, &data_6f000);
    data_701f8 = 0x32;
    data_70200 = 0x5602;  {  // {"2basic_stringIcNS2_11char_traits…"}}
    __builtin_memset(&data_70202, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_701f8, &data_6f000);
    data_70218 = 0x12c;
    data_70220 = 0x4902;
    __builtin_memset(&data_70222, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_70218, &data_6f000);
    data_70238 = 0x1f4;
    data_70240 = 0x5702;  {  // {"ty_anyEE6policyE"}}
    __builtin_memset(&data_70242, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_70238, &data_6f000);
    data_70258 = 0x320;
    data_70260 = 0x4502;
    __builtin_memset(&data_70262, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_70258, &data_6f000);
    data_70278 = 0x3e8;
    data_70280 = 0x4602;
    __builtin_memset(&data_70282, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_70278, &data_6f000);
    data_70298 = 0x7d0;
    data_702a0 = 0x10;
    __builtin_strncpy(&data_702a1, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_70298, &data_6f000);
    data_702b8 = 0x7d1;
    data_702c0 = 0x18;
    __builtin_strncpy(&data_702c1, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_702b8, &data_6f000);
    data_702d8 = 0x7d2;
    data_702e0 = 0x1e;
    __builtin_strncpy(&data_702e1, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_702d8, &data_6f000);
    __builtin_memset(&data_702f8, 0, 0x18);
    data_702f8 = 0x10;
    __builtin_strncpy(&data_702f9, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_702f8, &data_6f000);
    __builtin_memset(&data_70310, 0, 0x18);
    data_70310 = 0x18;
    __builtin_strncpy(&data_70311, "%H:%M:%S %f3", 0xd);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_70310, &data_6f000);
}

int64_t sub_147b0()
{
    /* tailcall */
    return __cxa_finalize(&data_6f000);
}

int64_t sub_147bc() __pure
{
    return;
}

int64_t j_sub_147bc()
{
    /* tailcall */
    return sub_147bc();
}

int64_t sub_147c8(int64_t arg1)
{
    /* jump -> arg1 */
}

void std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string(char* arg1)
{
    if ((*arg1 & 1) != 0)
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x10));
    }
}

void LEVELS::~LEVELS(void* arg1)
{
    if ((*(arg1 + 8) & 1) != 0)
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x18));
    }
}

int64_t checktool::checktool(void* arg1)
{
    int64_t x0 = feasibal_region::feasibal_region::feasibal_region();
    *(arg1 + 0x280) = 0x42ff0000;
    __builtin_memset((arg1 + 0x284), 0, 0x3c);
    *(arg1 + 0x2e0) = 0x42ff0000;
    *(arg1 + 0x2c0) = (arg1 + 0x288);
    *(arg1 + 0x2c8) = (arg1 + 0x2d0);
    *(arg1 + 0x2d8) = 0;
    *(arg1 + 0x2d0) = 0;
    __builtin_memset((arg1 + 0x2e4), 0, 0x3c);
    *(arg1 + 0x320) = (arg1 + 0x2e8);
    *(arg1 + 0x328) = (arg1 + 0x330);
    *(arg1 + 0x330) = 0;
    *(arg1 + 0x338) = 0;
    *(arg1 + 0x350) = 0;
    *(arg1 + 0x354) = 0x3eb333333f266666;
    return x0;
}

int64_t isRotationMatrix(cv::Mat* arg1)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int32_t var_c8 = 0x42ff0000;
    int128_t s_4;
    __builtin_memset(&s_4, 0, 0x3c);
    void* var_88 = &*s_4[4];
    int64_t var_78;
    int64_t* var_80 = &var_78;
    var_78 = 0;
    int64_t var_70 = 0;
    cv::Mat* var_280 = arg1;
    int64_t var_278 = 0;
    int32_t var_288 = 0x1010000;
    int32_t* var_120 = &var_c8;
    int64_t s_3 = 0;
    int32_t var_128 = 0x2010000;
    cv::transpose(&var_288, &var_128);
    cv::operator*(&var_c8, arg1);
    int64_t* x0_2 = var_288;
    int128_t v0;
    v0 = 0;
    *v0[8] = 0;
    var_128 = 0x42ff0000;
    int128_t s_2;
    __builtin_memset(&s_2, 0, 0x3c);
    void* var_e8 = &*s_2[4];
    int64_t var_d8;
    int64_t* var_e0 = &var_d8;
    int64_t var_d0 = 0;
    var_d8 = 0;
    *(*x0_2 + 0x18)(v0);
    cv::MatExpr::~MatExpr();
    cv::Mat::eye(3, 3, (var_128 & 0xfff));
    int64_t* x0_3 = var_288;
    int32_t var_2e8 = 0x42ff0000;
    int128_t v0_1;
    v0_1 = 0;
    *v0_1[8] = 0;
    int128_t s;
    __builtin_memset(&s, 0, 0x3c);
    void* var_2a8 = &*s[4];
    int64_t var_298;
    int64_t* var_2a0 = &var_298;
    var_298 = 0;
    int64_t var_290 = 0;
    *(*x0_3 + 0x18)(v0_1);
    cv::MatExpr::~MatExpr();
    int64_t var_278_1 = 0;
    var_288 = 0x1010000;
    int32_t* var_280_1 = &var_2e8;
    int64_t var_2f0 = 0;
    int32_t var_300 = 0x1010000;
    int32_t* var_2f8 = &var_128;
    int64_t v0_2 = cv::norm(&var_288, &var_300, 4, cv::noArray());
    int128_t var_2b8;
    int64_t x8_6 = *var_2b8[8];
    if (x8_6 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_6 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_6 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_2b8[8] = 0;
    bool cond:0 = s < 1;
    int128_t s_1;
    __builtin_memset(&s_1, 0, 0x20);
    if (!(cond:0))
    {
        int64_t i_1 = 0;
        do
        {
            *(var_2a8 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < s);
    }
    if (var_2a0 != &var_298)
    {
        cv::fastFree(var_2a0);
    }
    int128_t var_f8;
    int64_t x8_10 = *var_f8[8];
    if (x8_10 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_10 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_10 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_f8[8] = 0;
    __builtin_memset(&s_3, 0, 0x20);
    if (s_2 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(var_e8 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < s_2);
    }
    if (var_e0 != &var_d8)
    {
        cv::fastFree(var_e0);
    }
    int128_t var_98;
    int64_t x8_14 = *var_98[8];
    if (x8_14 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((x8_14 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (x8_14 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_98[8] = 0;
    int128_t s_5;
    __builtin_memset(&s_5, 0, 0x20);
    if (s_4 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(var_88 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < s_4);
    }
    if (var_80 != &var_78)
    {
        cv::fastFree(var_80);
    }
    int64_t x0_9;
    if (v0_2 < 9.9999999999999995e-07)
    {
        x0_9 = 1;
    }
    else
    {
        x0_9 = 0;
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_9;
}

void* cv::MatExpr::~MatExpr(void* arg1)
{
    int64_t x8 = *(arg1 + 0x108);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg1 + 0xd4);
    *(arg1 + 0x108) = 0;
    __builtin_memset((arg1 + 0xe0), 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = *(arg1 + 0x110);
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0xd4));
    }
    void* x0_1 = *(arg1 + 0x118);
    if (x0_1 != (arg1 + 0x120))
    {
        cv::fastFree(x0_1);
    }
    int64_t x8_5 = *(arg1 + 0xa8);
    if (x8_5 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_5 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_5 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_7 = *(arg1 + 0x74);
    *(arg1 + 0xa8) = 0;
    __builtin_memset((arg1 + 0x80), 0, 0x20);
    if (x8_7 >= 1)
    {
        int64_t x8_8 = *(arg1 + 0xb0);
        int64_t i_3 = 0;
        do
        {
            *(x8_8 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *(arg1 + 0x74));
    }
    void* x0_3 = *(arg1 + 0xb8);
    if (x0_3 != (arg1 + 0xc0))
    {
        cv::fastFree(x0_3);
    }
    int64_t x8_10 = *(arg1 + 0x48);
    if (x8_10 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((x8_10 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (x8_10 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_12 = *(arg1 + 0x14);
    *(arg1 + 0x48) = 0;
    __builtin_memset((arg1 + 0x20), 0, 0x20);
    if (x8_12 >= 1)
    {
        int64_t x8_13 = *(arg1 + 0x50);
        int64_t i_5 = 0;
        do
        {
            *(x8_13 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < *(arg1 + 0x14));
    }
    void* x0_5 = *(arg1 + 0x58);
    if (x0_5 != (arg1 + 0x60))
    {
        x0_5 = cv::fastFree(x0_5);
    }
    return x0_5;
}

void sub_14ffc(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t rotationMatrixToEulerAngles(cv::Mat* arg1, float* arg2 @ x8)
{
    double v11;
    double var_50 = v11;
    double v10;
    double var_48 = v10;
    double v9;
    double var_40 = v9;
    double v8;
    double var_38 = v8;
    int32_t x0 = isRotationMatrix(arg1);
    if ((x0 & 1) == 0)
    {
        *(arg2 + 5) = 0;
        *arg2 = 0.0;
    }
    else
    {
        int64_t* x20_1 = *(arg1 + 0x10);
        int64_t x21_1 = **(arg1 + 0x48);
        v10 = *x20_1;
        void* x8_1 = (x20_1 + x21_1);
        v11 = *x8_1;
        double v0_1;
        v0_1 = vsqrt_f64(((v10 * v10) + (v11 * v11)));
        v9 = v0_1;
        int32_t x8_3;
        double v0_3;
        if (v9 >= 9.9999999999999995e-07)
        {
            double* x20_2 = (x20_1 + (x21_1 << 1));
            v8 = atan2(x20_2[1], x20_2[2]);
            v9 = atan2(vneg_f64(*x20_2), v9);
            v0_3 = atan2(v11, v10);
            v0_3 = v0_3;
            x8_3 = v0_3;
        }
        else
        {
            v8 = atan2(vneg_f64(*(x8_1 + 0x10)), *(x8_1 + 8));
            v0_3 = atan2(vneg_f64(*(x20_1 + (x21_1 << 1))), v9);
            v9 = v0_3;
            x8_3 = 0;
        }
        v0_3 = v9;
        arg2[2] = x8_3;
        *arg2 = v8;
        arg2[1] = v0_3;
        arg2[3] = 1;
    }
    return x0;
}

int64_t* eulerAnglestoRotationMtx(void* arg1, int32_t* arg2 @ x8)
{
    int64_t v11;
    int64_t var_80 = v11;
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    int64_t* x8_2 = *(arg1 + 0x10);
    double v10 = *x8_2;
    double v9 = x8_2[1];
    double v8 = x8_2[2];
    int32_t var_480 = 0x42ff0000;
    int128_t s_1;
    __builtin_memset(&s_1, 0, 0x3c);
    void* var_440 = &*s_1[4];
    int64_t var_430;
    int64_t* var_438 = &var_430;
    var_430 = 0;
    int64_t var_428 = 0;
    int64_t var_4b0 = 0x300000003;
    int128_t v1;
    int128_t v2;
    int128_t v3;
    v1 = cv::Mat::create(&var_480, &*nullptr->ident.signature[2], &var_4b0);
    uint64_t x10 = s_1;
    int32_t* var_160 = &var_480;
    int64_t x8_4;
    if (x10 < 1)
    {
        x8_4 = 0;
    }
    else
    {
        x8_4 = var_438[(x10 - 1)];
    }
    uint32_t x9_2 = *var_480[1];
    void* s_7;
    __builtin_memset(&s_7, 0, 0x18);
    int32_t var_478;
    int32_t var_474;
    int64_t s_2;
    int64_t s_22;
    int64_t var_140_1;
    if ((x9_2 & 0x40) != 0)
    {
        int64_t s_11 = s_2;
        s_22 = s_11;
        int64_t x13_1;
        if (x10 < 3)
        {
            x13_1 = (var_474 * var_478);
        }
        else
        {
            int64_t i_24;
            if (x10 != 3)
            {
                i_24 = (x10 & 0xfffffffc);
                v1 = 1;
                *v1[8] = 1;
                void* x13_2 = (var_440 + 8);
                int64_t i_21 = i_24;
                int128_t v0_1 = v1;
                int64_t i;
                do
                {
                    v2 = *(x13_2 - 8);
                    v3 = *x13_2;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_2 = v1;
                    int64_t x0_2 = (v0_1 * v1);
                    int64_t x15_2 = (v1 * v0_1);
                    v1 = (v1 * v0_1);
                    int64_t x16_3 = (v0_1 * x2_2);
                    v0_1 = x0_2;
                    i = i_21;
                    i_21 = (i_21 - 4);
                    *v1[8] = x15_2;
                    *v0_1[8] = x16_3;
                    x13_2 = (x13_2 + 0x10);
                } while (i != 4);
                x13_1 = ((v0_1 * v1) * (v0_1 * v1));
            }
            else
            {
                i_24 = 0;
                x13_1 = 1;
            }
            if ((x10 == 3 || (x10 != 3 && i_24 != x10)))
            {
                int64_t i_18 = (x10 - i_24);
                void* x11_3 = (var_440 + (i_24 << 2));
                int64_t i_1;
                do
                {
                    int64_t x12_1 = *x11_3;
                    x11_3 = (x11_3 + 4);
                    i_1 = i_18;
                    i_18 = (i_18 - 1);
                    x13_1 = (x13_1 * x12_1);
                } while (i_1 != 1);
            }
        }
        var_140_1 = (s_11 + (x13_1 * x8_4));
    }
    cv::MatConstIterator::seek(&var_160, false);
    int64_t* s_15 = s_7;
    *s_15 = 0x3ff0000000000000;
    int32_t* x20 = var_160;
    if (x20 != 0)
    {
        void* s_9 = (s_15 + x8_4);
        s_7 = s_9;
        if (s_9 >= var_140_1)
        {
            s_7 = s_15;
            cv::MatConstIterator::seek(&var_160, true);
            x20 = var_160;
            s_15 = s_7;
        }
        else
        {
            s_15 = s_9;
        }
    }
    int32_t* var_1c0 = x20;
    int64_t* s_20 = s_15;
    int64_t s_33 = s_22;
    *s_15 = 0;
    if (x20 == 0)
    {
        *s_15 = cos(v10);
    }
    else
    {
        int64_t* s_23 = (s_15 + x8_4);
        int64_t* s_32 = s_23;
        if (s_23 >= var_140_1)
        {
            cv::MatConstIterator::seek(&var_1c0, true);
            s_23 = s_15;
            x20 = var_1c0;
        }
        *s_23 = 0;
        int64_t* s_35;
        if (x20 == 0)
        {
            s_35 = s_23;
            *s_35 = 0;
        }
        else
        {
            s_35 = (s_23 + x8_4);
            int64_t* s_39 = s_35;
            if (s_35 >= var_140_1)
            {
                cv::MatConstIterator::seek(&var_1c0, true);
                s_35 = s_23;
                x20 = var_1c0;
            }
            *s_35 = 0;
        }
        int64_t* s_42;
        if ((x20 == 0 || (x20 != 0 && x20 != 0)))
        {
            s_42 = (s_35 + x8_4);
            int64_t* s_45 = s_42;
            if (s_42 >= var_140_1)
            {
                cv::MatConstIterator::seek(&var_1c0, true);
                s_42 = s_35;
                x20 = var_1c0;
            }
        }
        if ((x20 == 0 || x20 == 0))
        {
            s_42 = s_35;
        }
        int64_t v0_5 = cos(v10);
        *s_42 = v0_5;
        int64_t* s_48;
        if (x20 == 0)
        {
            s_48 = s_42;
        }
        else
        {
            s_48 = (s_42 + x8_4);
            int64_t* s_51 = s_48;
            if (s_48 >= var_140_1)
            {
                cv::MatConstIterator::seek(&var_1c0, true);
                s_48 = s_42;
                x20 = var_1c0;
            }
        }
        double v0_3 = sin(v10);
        *s_48 = vneg_f64(v0_3);
        int64_t* s_52;
        if (x20 == 0)
        {
            s_52 = s_48;
            *s_52 = 0;
        }
        else
        {
            s_52 = (s_48 + x8_4);
            int64_t* s_57 = s_52;
            if (s_52 >= var_140_1)
            {
                cv::MatConstIterator::seek(&var_1c0, true);
                s_52 = s_48;
                x20 = var_1c0;
            }
            *s_52 = 0;
        }
        int64_t* s_60;
        if ((x20 == 0 || (x20 != 0 && x20 != 0)))
        {
            s_60 = (s_52 + x8_4);
            int64_t* s_63 = s_60;
            if (s_60 >= var_140_1)
            {
                cv::MatConstIterator::seek(&var_1c0, true);
                s_60 = s_52;
                x20 = var_1c0;
            }
            *s_60 = v0_3;
        }
        if ((x20 == 0 || x20 == 0))
        {
            s_60 = s_52;
            *s_60 = v0_3;
        }
        int64_t* s_64;
        if (((x20 == 0 || x20 == 0) || ((x20 == 0 || (x20 != 0 && x20 != 0)) && x20 != 0)))
        {
            s_64 = (s_60 + x8_4);
            int64_t* s_71 = s_64;
            if (s_64 >= var_140_1)
            {
                cv::MatConstIterator::seek(&var_1c0, true);
                s_64 = s_60;
                x20 = var_1c0;
            }
            *s_64 = v0_5;
            if (x20 != 0)
            {
                goto label_15568;
            }
        }
        if (((x20 == 0 || x20 == 0) || ((x20 == 0 || (x20 != 0 && x20 != 0)) && x20 == 0)))
        {
            s_64 = s_60;
            *s_64 = v0_5;
            if (x20 != 0)
            {
            label_15568:
                void* x9_9 = (s_64 + x8_4);
                void* var_1b0_7 = x9_9;
                if (x9_9 >= var_140_1)
                {
                    int64_t* s_72 = s_64;
                    cv::MatConstIterator::seek(&var_1c0, true);
                }
            }
        }
    }
    int32_t var_320;
    int64_t x21 = (&var_320 | 8);
    int128_t s_3;
    __builtin_memset(&s_3, 0, 0x3c);
    int64_t var_2d0;
    int64_t* var_2d8 = &var_2d0;
    int64_t var_2c8 = 0;
    var_2d0 = 0;
    var_320 = 0x42ff0006;
    int128_t v0_7;
    int128_t v1_1;
    int128_t v2_1;
    v0_7 = cv::Mat_<double>::operator=(&var_320);
    v2_1 = var_320;
    int128_t s_8 = s_3;
    int128_t var_30c;
    int128_t var_e0 = var_30c;
    int128_t var_100 = v2_1;
    int128_t var_2f0;
    int128_t var_d0 = var_2f0;
    int64_t var_c0 = (&var_100 | 8);
    int64_t var_b0;
    int64_t* var_b8 = &var_b0;
    var_b0 = 0;
    int64_t var_a8 = 0;
    int64_t* x0_14;
    if (v2_1 > 2)
    {
        x0_14 = &var_2d0;
        int64_t* var_2d8_1 = &var_2d0;
        int64_t var_2e0_1 = x21;
        var_c0 = x21;
    }
    else
    {
        x0_14 = var_2d8;
        var_b0 = *x0_14;
        int64_t var_a8_1 = x0_14[1];
    }
    var_320 = 0x42ff0000;
    __builtin_memset((&var_320 | 4), 0, 0x34);
    *var_2f0[8] = 0;
    __builtin_memset(&*s_3[0xc], 0, 0x20);
    if (x0_14 != &var_2d0)
    {
        cv::fastFree(x0_14);
    }
    int128_t var_450;
    int64_t x8_14 = *var_450[8];
    if (x8_14 != 0)
    {
        int32_t temp0_2;
        int32_t i_2;
        do
        {
            temp0_2 = __ldaxr((x8_14 + 0x14));
            i_2 = __stlxr((temp0_2 - 1), (x8_14 + 0x14));
        } while (i_2 != 0);
        if (temp0_2 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_16 = s_1;
    *var_450[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_16 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(var_440 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < s_1);
    }
    if (var_438 != &var_430)
    {
        cv::fastFree(var_438);
    }
    var_480 = 0x42ff0000;
    __builtin_memset(&s_1, 0, 0x3c);
    void* var_440_1 = &*s_1[4];
    int64_t* var_438_1 = &var_430;
    var_430 = 0;
    int64_t var_428_1 = 0;
    var_4b0 = 0x300000003;
    cv::Mat::create(&var_480, &*nullptr->ident.signature[2], &var_4b0);
    int64_t v0_9;
    int128_t v1_2;
    int128_t v2_2;
    int128_t v3_1;
    v0_9 = cos(v9);
    uint64_t x10_13 = s_1;
    var_1c0 = &var_480;
    int64_t x8_19;
    if (x10_13 < 1)
    {
        x8_19 = 0;
    }
    else
    {
        x8_19 = var_438_1[(x10_13 - 1)];
    }
    uint32_t x9_14 = *var_480[1];
    void* s_6;
    __builtin_memset(&s_6, 0, 0x18);
    int64_t s_21;
    int64_t var_1a0_1;
    if ((x9_14 & 0x40) != 0)
    {
        int64_t s_12 = s_2;
        s_21 = s_12;
        int64_t x13_5;
        if (x10_13 < 3)
        {
            x13_5 = (var_474 * var_478);
        }
        else
        {
            int64_t i_25;
            if (x10_13 != 3)
            {
                i_25 = (x10_13 & 0xfffffffc);
                v1_2 = 1;
                *v1_2[8] = 1;
                void* x13_6 = (var_440_1 + 8);
                int64_t i_22 = i_25;
                int128_t v0_10 = v1_2;
                int64_t i_4;
                do
                {
                    v2_2 = *(x13_6 - 8);
                    v3_1 = *x13_6;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_15 = v1_2;
                    int64_t x0_18 = (v0_10 * v1_2);
                    int64_t x15_6 = (v1_2 * v0_10);
                    v1_2 = (v1_2 * v0_10);
                    int64_t x16_7 = (v0_10 * x2_15);
                    v0_10 = x0_18;
                    i_4 = i_22;
                    i_22 = (i_22 - 4);
                    *v1_2[8] = x15_6;
                    *v0_10[8] = x16_7;
                    x13_6 = (x13_6 + 0x10);
                } while (i_4 != 4);
                x13_5 = ((v0_10 * v1_2) * (v0_10 * v1_2));
            }
            else
            {
                i_25 = 0;
                x13_5 = 1;
            }
            if ((x10_13 == 3 || (x10_13 != 3 && i_25 != x10_13)))
            {
                int64_t i_19 = (x10_13 - i_25);
                void* x11_6 = (var_440_1 + (i_25 << 2));
                int64_t i_5;
                do
                {
                    int64_t x12_2 = *x11_6;
                    x11_6 = (x11_6 + 4);
                    i_5 = i_19;
                    i_19 = (i_19 - 1);
                    x13_5 = (x13_5 * x12_2);
                } while (i_5 != 1);
            }
        }
        var_1a0_1 = (s_12 + (x13_5 * x8_19));
    }
    cv::MatConstIterator::seek(&var_1c0, false);
    int64_t* s_10 = s_6;
    *s_10 = v0_9;
    int32_t* x20_1 = var_1c0;
    if (x20_1 != 0)
    {
        void* s_13 = (s_10 + x8_19);
        s_6 = s_13;
        if (s_13 >= var_1a0_1)
        {
            s_6 = s_10;
            cv::MatConstIterator::seek(&var_1c0, true);
            x20_1 = var_1c0;
            s_10 = s_6;
        }
        else
        {
            s_10 = s_13;
        }
    }
    int32_t* var_4a8 = x20_1;
    int64_t* s_18 = s_10;
    int64_t s_31 = s_21;
    *s_10 = 0;
    if (x20_1 == 0)
    {
        *s_10 = v0_9;
    }
    else
    {
        int64_t* s_26 = (s_10 + x8_19);
        int64_t* s_29 = s_26;
        if (s_26 >= var_1a0_1)
        {
            cv::MatConstIterator::seek(&var_4a8, true);
            s_26 = s_10;
            x20_1 = var_4a8;
        }
        double v0_11 = sin(v9);
        *s_26 = v0_11;
        int64_t* s_34;
        if (x20_1 == 0)
        {
            s_34 = s_26;
            *s_34 = 0;
        }
        else
        {
            s_34 = (s_26 + x8_19);
            int64_t* s_38 = s_34;
            if (s_34 >= var_1a0_1)
            {
                cv::MatConstIterator::seek(&var_4a8, true);
                s_34 = s_26;
                x20_1 = var_4a8;
            }
            *s_34 = 0;
        }
        int64_t* s_40;
        if ((x20_1 == 0 || (x20_1 != 0 && x20_1 != 0)))
        {
            s_40 = (s_34 + x8_19);
            int64_t* s_44 = s_40;
            if (s_40 >= var_1a0_1)
            {
                cv::MatConstIterator::seek(&var_4a8, true);
                s_40 = s_34;
                x20_1 = var_4a8;
            }
        }
        if ((x20_1 == 0 || x20_1 == 0))
        {
            s_40 = s_34;
        }
        *s_40 = 0x3ff0000000000000;
        int64_t* s_46;
        if (x20_1 == 0)
        {
            s_46 = s_40;
            *s_46 = 0;
        }
        else
        {
            s_46 = (s_40 + x8_19);
            int64_t* s_50 = s_46;
            if (s_46 >= var_1a0_1)
            {
                cv::MatConstIterator::seek(&var_4a8, true);
                s_46 = s_40;
                x20_1 = var_4a8;
            }
            *s_46 = 0;
        }
        int64_t* s_53;
        if ((x20_1 == 0 || (x20_1 != 0 && x20_1 != 0)))
        {
            s_53 = (s_46 + x8_19);
            int64_t* s_56 = s_53;
            if (s_53 >= var_1a0_1)
            {
                cv::MatConstIterator::seek(&var_4a8, true);
                s_53 = s_46;
                x20_1 = var_4a8;
            }
        }
        if ((x20_1 == 0 || x20_1 == 0))
        {
            s_53 = s_46;
        }
        *s_53 = vneg_f64(v0_11);
        int64_t* s_58;
        if (x20_1 == 0)
        {
            s_58 = s_53;
            *s_58 = 0;
        }
        else
        {
            s_58 = (s_53 + x8_19);
            int64_t* s_62 = s_58;
            if (s_58 >= var_1a0_1)
            {
                cv::MatConstIterator::seek(&var_4a8, true);
                s_58 = s_53;
                x20_1 = var_4a8;
            }
            *s_58 = 0;
        }
        int64_t* s_65;
        if ((x20_1 == 0 || (x20_1 != 0 && x20_1 != 0)))
        {
            s_65 = (s_58 + x8_19);
            int64_t* s_69 = s_65;
            if (s_65 >= var_1a0_1)
            {
                cv::MatConstIterator::seek(&var_4a8, true);
                s_65 = s_58;
                x20_1 = var_4a8;
            }
            *s_65 = v0_9;
        }
        if ((x20_1 == 0 || x20_1 == 0))
        {
            s_65 = s_58;
            *s_65 = v0_9;
        }
        if (((x20_1 == 0 || x20_1 == 0) || ((x20_1 == 0 || (x20_1 != 0 && x20_1 != 0)) && x20_1 != 0)))
        {
            void* x8_25 = (s_65 + x8_19);
            void* var_498_7 = x8_25;
            if (x8_25 >= var_1a0_1)
            {
                int64_t* s_70 = s_65;
                cv::MatConstIterator::seek(&var_4a8, true);
            }
        }
    }
    int64_t x22_1 = (&var_320 | 8);
    int128_t s_4;
    __builtin_memset(&s_4, 0, 0x3c);
    int64_t* var_2d8_2 = &var_2d0;
    int64_t var_2c8_1 = 0;
    var_2d0 = 0;
    var_320 = 0x42ff0006;
    int128_t v0_13;
    int128_t v1_3;
    int128_t v2_3;
    v0_13 = cv::Mat_<double>::operator=(&var_320);
    v2_3 = var_320;
    s_7 = s_4;
    int128_t var_30c_1;
    var_140_1 = var_30c_1;
    var_160 = v2_3;
    int128_t var_2f0_1;
    int128_t var_130 = var_2f0_1;
    int64_t var_120 = (&var_160 | 8);
    int64_t var_110;
    int64_t* var_118 = &var_110;
    int64_t var_108 = 0;
    var_110 = 0;
    int64_t* x0_30;
    if (v2_3 > 2)
    {
        x0_30 = &var_2d0;
        int64_t* var_2d8_3 = &var_2d0;
        int64_t var_2e0_3 = x22_1;
        var_120 = x22_1;
    }
    else
    {
        x0_30 = var_2d8_2;
        var_110 = *x0_30;
        int64_t var_108_1 = x0_30[1];
    }
    var_320 = 0x42ff0000;
    __builtin_memset((&var_320 | 4), 0, 0x34);
    *var_2f0_1[8] = 0;
    __builtin_memset(&*s_4[0xc], 0, 0x20);
    if (x0_30 != &var_2d0)
    {
        cv::fastFree(x0_30);
    }
    int128_t var_450_1;
    int64_t x8_26 = *var_450_1[8];
    if (x8_26 != 0)
    {
        int32_t temp0_4;
        int32_t i_6;
        do
        {
            temp0_4 = __ldaxr((x8_26 + 0x14));
            i_6 = __stlxr((temp0_4 - 1), (x8_26 + 0x14));
        } while (i_6 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_28 = s_1;
    *var_450_1[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_28 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(var_440_1 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < s_1);
    }
    if (var_438_1 != &var_430)
    {
        cv::fastFree(var_438_1);
    }
    var_480 = 0x42ff0000;
    __builtin_memset(&s_1, 0, 0x3c);
    void* var_440_2 = &*s_1[4];
    int64_t* var_438_2 = &var_430;
    var_430 = 0;
    int64_t var_428_2 = 0;
    var_4b0 = 0x300000003;
    cv::Mat::create(&var_480, &*nullptr->ident.signature[2], &var_4b0);
    int64_t v0_15;
    int128_t v1_4;
    int128_t v2_4;
    int128_t v3_2;
    v0_15 = cos(v8);
    uint64_t x10_29 = s_1;
    var_4a8 = &var_480;
    int64_t x8_31;
    if (x10_29 < 1)
    {
        x8_31 = 0;
    }
    else
    {
        x8_31 = var_438_2[(x10_29 - 1)];
    }
    uint32_t x9_25 = *var_480[1];
    int64_t* s;
    __builtin_memset(&s, 0, 0x18);
    int64_t s_19;
    int64_t var_488_1;
    if ((x9_25 & 0x40) != 0)
    {
        int64_t s_14 = s_2;
        s_19 = s_14;
        int64_t x13_9;
        if (x10_29 < 3)
        {
            x13_9 = (var_474 * var_478);
        }
        else
        {
            int64_t i_26;
            if (x10_29 != 3)
            {
                i_26 = (x10_29 & 0xfffffffc);
                v1_4 = 1;
                *v1_4[8] = 1;
                void* x13_10 = (var_440_2 + 8);
                int64_t i_23 = i_26;
                int128_t v0_16 = v1_4;
                int64_t i_8;
                do
                {
                    v2_4 = *(x13_10 - 8);
                    v3_2 = *x13_10;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_28 = v1_4;
                    int64_t x0_34 = (v0_16 * v1_4);
                    int64_t x15_10 = (v1_4 * v0_16);
                    v1_4 = (v1_4 * v0_16);
                    int64_t x16_11 = (v0_16 * x2_28);
                    v0_16 = x0_34;
                    i_8 = i_23;
                    i_23 = (i_23 - 4);
                    *v1_4[8] = x15_10;
                    *v0_16[8] = x16_11;
                    x13_10 = (x13_10 + 0x10);
                } while (i_8 != 4);
                x13_9 = ((v0_16 * v1_4) * (v0_16 * v1_4));
            }
            else
            {
                i_26 = 0;
                x13_9 = 1;
            }
            if ((x10_29 == 3 || (x10_29 != 3 && i_26 != x10_29)))
            {
                int64_t i_20 = (x10_29 - i_26);
                void* x11_10 = (var_440_2 + (i_26 << 2));
                int64_t i_9;
                do
                {
                    int64_t x12_3 = *x11_10;
                    x11_10 = (x11_10 + 4);
                    i_9 = i_20;
                    i_20 = (i_20 - 1);
                    x13_9 = (x13_9 * x12_3);
                } while (i_9 != 1);
            }
        }
        var_488_1 = (s_14 + (x13_9 * x8_31));
    }
    cv::MatConstIterator::seek(&var_4a8, false);
    int64_t* s_16 = s;
    *s_16 = v0_15;
    int32_t* x20_2 = var_4a8;
    if (x20_2 != 0)
    {
        void* s_24 = (s_16 + x8_31);
        void* s_30 = s_24;
        if (s_24 >= var_488_1)
        {
            cv::MatConstIterator::seek(&var_4a8, true);
            x20_2 = var_4a8;
        }
        else
        {
            s_16 = s_24;
        }
    }
    int32_t* var_4d8 = x20_2;
    int64_t* s_17 = s_16;
    int64_t s_28 = s_19;
    double v0_18 = sin(v8);
    *s_16 = vneg_f64(v0_18);
    if (x20_2 == 0)
    {
        *s_16 = 0x3ff0000000000000;
    }
    else
    {
        int64_t* s_25 = (s_16 + x8_31);
        int64_t* s_27 = s_25;
        if (s_25 >= var_488_1)
        {
            cv::MatConstIterator::seek(&var_4d8, true);
            s_25 = s_16;
            x20_2 = var_4d8;
        }
        *s_25 = 0;
        int64_t* s_36;
        if (x20_2 == 0)
        {
            s_36 = s_25;
            *s_36 = v0_18;
        }
        else
        {
            s_36 = (s_25 + x8_31);
            int64_t* s_37 = s_36;
            if (s_36 >= var_488_1)
            {
                cv::MatConstIterator::seek(&var_4d8, true);
                s_36 = s_25;
                x20_2 = var_4d8;
            }
            *s_36 = v0_18;
        }
        int64_t* s_41;
        if ((x20_2 == 0 || (x20_2 != 0 && x20_2 != 0)))
        {
            s_41 = (s_36 + x8_31);
            int64_t* s_43 = s_41;
            if (s_41 >= var_488_1)
            {
                cv::MatConstIterator::seek(&var_4d8, true);
                s_41 = s_36;
                x20_2 = var_4d8;
            }
            *s_41 = v0_15;
        }
        if ((x20_2 == 0 || x20_2 == 0))
        {
            s_41 = s_36;
            *s_41 = v0_15;
        }
        int64_t* s_47;
        if (((x20_2 == 0 || x20_2 == 0) || ((x20_2 == 0 || (x20_2 != 0 && x20_2 != 0)) && x20_2 != 0)))
        {
            s_47 = (s_41 + x8_31);
            int64_t* s_49 = s_47;
            if (s_47 >= var_488_1)
            {
                cv::MatConstIterator::seek(&var_4d8, true);
                s_47 = s_41;
                x20_2 = var_4d8;
            }
            *s_47 = 0;
            if (x20_2 != 0)
            {
                goto label_15f40;
            }
            goto label_16018;
        }
        if (((x20_2 == 0 || x20_2 == 0) || ((x20_2 == 0 || (x20_2 != 0 && x20_2 != 0)) && x20_2 == 0)))
        {
            s_47 = s_41;
            *s_47 = 0;
            int64_t* s_54;
            if (x20_2 != 0)
            {
            label_15f40:
                s_54 = (s_47 + x8_31);
                int64_t* s_55 = s_54;
                if (s_54 >= var_488_1)
                {
                    cv::MatConstIterator::seek(&var_4d8, true);
                    s_54 = s_47;
                    x20_2 = var_4d8;
                }
                *s_54 = 0;
                if (x20_2 != 0)
                {
                    goto label_15f7c;
                }
                goto label_16024;
            }
        label_16018:
            s_54 = s_47;
            *s_54 = 0;
            int64_t* s_59;
            if (x20_2 != 0)
            {
            label_15f7c:
                s_59 = (s_54 + x8_31);
                int64_t* s_61 = s_59;
                if (s_59 >= var_488_1)
                {
                    cv::MatConstIterator::seek(&var_4d8, true);
                    s_59 = s_54;
                    x20_2 = var_4d8;
                }
                *s_59 = 0;
                if (x20_2 != 0)
                {
                    goto label_15fb8;
                }
                goto label_16030;
            }
        label_16024:
            s_59 = s_54;
            *s_59 = 0;
            int64_t* s_66;
            if (x20_2 == 0)
            {
            label_16030:
                s_66 = s_59;
            }
            else
            {
            label_15fb8:
                s_66 = (s_59 + x8_31);
                int64_t* s_67 = s_66;
                if (s_66 >= var_488_1)
                {
                    cv::MatConstIterator::seek(&var_4d8, true);
                    s_66 = s_59;
                    x20_2 = var_4d8;
                }
            }
            *s_66 = 0x3ff0000000000000;
            if (x20_2 != 0)
            {
                void* x8_40 = (s_66 + x8_31);
                void* var_4c8_7 = x8_40;
                if (x8_40 >= var_488_1)
                {
                    int64_t* s_68 = s_66;
                    cv::MatConstIterator::seek(&var_4d8, true);
                }
            }
        }
    }
    int64_t x23_1 = (&var_320 | 8);
    int128_t s_5;
    __builtin_memset(&s_5, 0, 0x3c);
    int64_t* var_2d8_4 = &var_2d0;
    int64_t var_2c8_2 = 0;
    var_2d0 = 0;
    var_320 = 0x42ff0006;
    int128_t v0_19;
    int128_t v1_5;
    int128_t v2_5;
    v0_19 = cv::Mat_<double>::operator=(&var_320);
    v2_5 = var_320;
    s_6 = s_5;
    int128_t var_30c_2;
    var_1a0_1 = var_30c_2;
    var_1c0 = v2_5;
    int128_t var_2f0_2;
    int128_t var_190 = var_2f0_2;
    int64_t var_180 = (&var_1c0 | 8);
    int64_t var_170;
    int64_t* var_178 = &var_170;
    int64_t var_168 = 0;
    var_170 = 0;
    int64_t* x0_46;
    if (v2_5 > 2)
    {
        x0_46 = &var_2d0;
        int64_t* var_2d8_5 = &var_2d0;
        int64_t var_2e0_5 = x23_1;
        var_180 = x23_1;
    }
    else
    {
        x0_46 = var_2d8_4;
        var_170 = *x0_46;
        int64_t var_168_1 = x0_46[1];
    }
    var_320 = 0x42ff0000;
    __builtin_memset((&var_320 | 4), 0, 0x34);
    *var_2f0_2[8] = 0;
    __builtin_memset(&*s_5[0xc], 0, 0x20);
    if (x0_46 != &var_2d0)
    {
        cv::fastFree(x0_46);
    }
    int128_t var_450_2;
    int64_t x8_41 = *var_450_2[8];
    if (x8_41 != 0)
    {
        int32_t temp0_6;
        int32_t i_10;
        do
        {
            temp0_6 = __ldaxr((x8_41 + 0x14));
            i_10 = __stlxr((temp0_6 - 1), (x8_41 + 0x14));
        } while (i_10 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_43 = s_1;
    *var_450_2[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_43 >= 1)
    {
        int64_t i_11 = 0;
        do
        {
            *(var_440_2 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < s_1);
    }
    if (var_438_2 != &var_430)
    {
        cv::fastFree(var_438_2);
    }
    cv::operator*(&var_1c0, &var_160);
    cv::operator*(&var_480, &var_100);
    int64_t* x0_50 = var_320;
    int128_t v0_20;
    v0_20 = 0;
    *v0_20[8] = 0;
    *arg2 = 0x42ff0000;
    *(arg2 + 4) = {0};
    __builtin_memset(&arg2[5], 0, 0x2c);
    *(arg2 + 0x50) = 0;
    *(arg2 + 0x40) = &arg2[2];
    *(arg2 + 0x48) = &arg2[0x14];
    *(arg2 + 0x58) = 0;
    *(*x0_50 + 0x18)(v0_20);
    cv::MatExpr::~MatExpr();
    cv::MatExpr::~MatExpr();
    int64_t x8_48 = *var_190[8];
    if (x8_48 != 0)
    {
        int32_t temp0_7;
        int32_t i_12;
        do
        {
            temp0_7 = __ldaxr((x8_48 + 0x14));
            i_12 = __stlxr((temp0_7 - 1), (x8_48 + 0x14));
        } while (i_12 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_190[8] = 0;
    __builtin_memset(&s_6, 0, 0x20);
    if (*var_1c0[4] >= 1)
    {
        int64_t i_13 = 0;
        do
        {
            *(var_180 + (i_13 << 2)) = 0;
            i_13 = (i_13 + 1);
        } while (i_13 < *var_1c0[4]);
    }
    if (var_178 != &var_170)
    {
        cv::fastFree(var_178);
    }
    int64_t x8_52 = *var_130[8];
    if (x8_52 != 0)
    {
        int32_t temp0_8;
        int32_t i_14;
        do
        {
            temp0_8 = __ldaxr((x8_52 + 0x14));
            i_14 = __stlxr((temp0_8 - 1), (x8_52 + 0x14));
        } while (i_14 != 0);
        if (temp0_8 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_130[8] = 0;
    __builtin_memset(&s_7, 0, 0x20);
    if (*var_160[4] >= 1)
    {
        int64_t i_15 = 0;
        do
        {
            *(var_120 + (i_15 << 2)) = 0;
            i_15 = (i_15 + 1);
        } while (i_15 < *var_160[4]);
    }
    if (var_118 != &var_110)
    {
        cv::fastFree(var_118);
    }
    int64_t x8_57 = *var_d0[8];
    if (x8_57 != 0)
    {
        int32_t temp0_9;
        int32_t i_16;
        do
        {
            temp0_9 = __ldaxr((x8_57 + 0x14));
            i_16 = __stlxr((temp0_9 - 1), (x8_57 + 0x14));
        } while (i_16 != 0);
        if (temp0_9 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_d0[8] = 0;
    __builtin_memset(&s_8, 0, 0x20);
    if (*var_100[4] >= 1)
    {
        int64_t i_17 = 0;
        do
        {
            *(var_c0 + (i_17 << 2)) = 0;
            i_17 = (i_17 + 1);
        } while (i_17 < *var_100[4]);
    }
    int64_t* x0_53 = var_b8;
    if (x0_53 != &var_b0)
    {
        x0_53 = cv::fastFree(x0_53);
    }
    if (*(x8 + 0x28) != x8_1)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_53;
}

int64_t checktool::init(void* arg1, int128_t* arg2, int32_t arg3, int32_t arg4)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int32_t x24 = -0x40990b20;
    int32_t x25 = -0x41233376;
    int32_t x26 = -0x43d70c56;
    *(arg1 + 0x354) = 0x3f7eb852;
    double v8;
    if ((arg3 == 3 && arg4 == 0))
    {
        v8 = 1055.0;
    }
    int128_t v0;
    int128_t v1;
    if ((arg3 != 3 || (arg3 == 3 && arg4 != 0)))
    {
        if ((arg3 == 4 && arg4 == 0))
        {
            v8 = 1077.0;
        }
        if ((arg3 != 4 || (arg3 == 4 && arg4 != 0)))
        {
            if ((arg3 == 6 && arg4 == 1))
            {
                v0 = 0x402000003f266666;
                v8 = 930.0;
                x24 = -0x40aae46d;
                x25 = -0x40f228cc;
                *(arg1 + 0x354) = 0x402000003f266666;
                x26 = 0x3bc61d86;
            }
            if ((arg3 != 6 || (arg3 == 6 && arg4 != 1)))
            {
                if ((arg3 != 6 || (arg3 == 6 && arg4 != 2)))
                {
                    v0 = 0x408d100000000000;
                    int32_t x11_1;
                    if (arg3 == 6)
                    {
                        x11_1 = 1;
                    }
                    else
                    {
                        x11_1 = 0;
                    }
                    v1 = 0x408f400000000000;
                    int32_t x12_1;
                    if (arg4 == 3)
                    {
                        x12_1 = 1;
                    }
                    else
                    {
                        x12_1 = 0;
                    }
                    int32_t temp0_1 = (x11_1 & x12_1);
                    if (temp0_1 != 0)
                    {
                        x26 = -0x80000000;
                    }
                    else
                    {
                        x26 = 0;
                    }
                    if (temp0_1 != 0)
                    {
                        x25 = -0x40e5af7d;
                    }
                    else
                    {
                        x25 = 0;
                    }
                    if (temp0_1 != 0)
                    {
                        x24 = -0x40b3bce4;
                    }
                    else
                    {
                        x24 = 0x3f800000;
                    }
                    if (temp0_1 != 0)
                    {
                        v8 = 930.0;
                    }
                    else
                    {
                        v8 = 1000.0;
                    }
                }
                if ((arg3 == 6 && arg4 == 2))
                {
                    v8 = 930.0;
                    x24 = -0x40a486f0;
                    x25 = -0x40fc7ae1;
                    x26 = 0x3d05f8d3;
                }
            }
        }
    }
    v0 = *arg2;
    v1 = arg2[1];
    int128_t var_d0 = v0;
    int128_t var_c0 = v1;
    int128_t var_b0 = arg2[2];
    int64_t var_a0 = arg2[3];
    int64_t x8_3 = *(arg2 + 0x38);
    int64_t var_80;
    int64_t* var_88 = &var_80;
    var_80 = 0;
    int64_t var_78 = 0;
    if (x8_3 != 0)
    {
        int32_t i;
        do
        {
            i = __stlxr((__ldaxr((x8_3 + 0x14)) + 1), (x8_3 + 0x14));
        } while (i != 0);
    }
    if (((x8_3 == 0 && v0 <= 2) || (x8_3 != 0 && *(arg2 + 4) <= 2)))
    {
        int64_t* x8_6 = *(arg2 + 0x48);
        *var_88 = *x8_6;
        var_88[1] = x8_6[1];
    }
    if (((x8_3 == 0 && v0 > 2) || (x8_3 != 0 && *(arg2 + 4) > 2)))
    {
        *var_d0[4] = 0;
        cv::Mat::copySize(&var_d0);
    }
    int32_t var_e0 = x26;
    int32_t var_dc = x25;
    int32_t var_d8 = x24;
    feasibal_region::feasibal_region::init(arg1, &var_d0, &var_e0, v8);
    if (x8_3 != 0)
    {
        int32_t temp0_3;
        int32_t i_1;
        do
        {
            temp0_3 = __ldaxr((x8_3 + 0x14));
            i_1 = __stlxr((temp0_3 - 1), (x8_3 + 0x14));
        } while (i_1 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int128_t v0_2;
    v0_2 = 0;
    *v0_2[8] = 0;
    int64_t var_98_1 = 0;
    int128_t s;
    __builtin_memset(&s, 0, 0x20);
    if (*var_d0[4] >= 1)
    {
        int64_t i_2 = 0;
        do
        {
            *((&var_d0 | 8) + (i_2 << 2)) = 0;
            i_2 = (i_2 + 1);
        } while (i_2 < *var_d0[4]);
    }
    if (var_88 != &var_80)
    {
        cv::fastFree(var_88);
    }
    if ((arg1 + 0x280) != arg2)
    {
        int64_t x8_13 = *(arg2 + 0x38);
        if (x8_13 != 0)
        {
            int32_t i_3;
            do
            {
                i_3 = __stlxr((__ldaxr((x8_13 + 0x14)) + 1), (x8_13 + 0x14));
            } while (i_3 != 0);
        }
        int64_t x8_15 = *(arg1 + 0x2b8);
        if (x8_15 != 0)
        {
            int32_t temp0_5;
            int32_t i_4;
            do
            {
                temp0_5 = __ldaxr((x8_15 + 0x14));
                i_4 = __stlxr((temp0_5 - 1), (x8_15 + 0x14));
            } while (i_4 != 0);
            if (temp0_5 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int32_t x8_17 = *(arg1 + 0x284);
        v0_2 = 0;
        *v0_2[8] = 0;
        *(arg1 + 0x2b8) = 0;
        __builtin_memset((arg1 + 0x290), 0, 0x20);
        int64_t x10_7;
        if (x8_17 <= 0)
        {
            *(arg1 + 0x280) = *arg2;
        }
        else
        {
            int64_t x8_18 = *(arg1 + 0x2c0);
            int64_t x9_10 = 0;
            do
            {
                *(x8_18 + (x9_10 << 2)) = 0;
                x10_7 = *(arg1 + 0x284);
                x9_10 = (x9_10 + 1);
            } while (x9_10 < x10_7);
            *(arg1 + 0x280) = *arg2;
        }
        int32_t x8_21;
        if ((x8_17 <= 0 || (x8_17 > 0 && x10_7 <= 2)))
        {
            x8_21 = *(arg2 + 4);
            if (x8_21 <= 2)
            {
                *(arg1 + 0x284) = x8_21;
                int64_t* x10_8 = *(arg1 + 0x2c8);
                *(arg1 + 0x288) = *(arg2 + 8);
                int64_t* x8_23 = *(arg2 + 0x48);
                *x10_8 = *x8_23;
                x10_8[1] = x8_23[1];
            }
        }
        if ((((x8_17 <= 0 || (x8_17 > 0 && x10_7 <= 2)) && x8_21 > 2) || (x8_17 > 0 && x10_7 > 2)))
        {
            cv::Mat::copySize((arg1 + 0x280));
        }
        *(arg1 + 0x290) = arg2[1];
        *(arg1 + 0x2a0) = arg2[2];
        *(arg1 + 0x2b0) = arg2[3];
    }
    *(arg1 + 0x348) = v8;
    *(arg1 + 0x350) = arg4;
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

int64_t checktool::runcheck(cv::Mat* arg1, int64_t* arg2, char* arg3, char* arg4, int32_t* arg5 @ x8)
{
    double v9;
    double var_70 = v9;
    double v8;
    double var_68 = v8;
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    feasibal_region::RunInputParam::RunInputParam();
    int128_t s_23;
    __builtin_memset(&s_23, 0, 0xa8);
    int32_t var_2c0 = 0x42ff0000;
    int128_t s_24;
    __builtin_memset(&s_24, 0, 0x3c);
    void* var_280 = &*s_24[4];
    int64_t var_270;
    int64_t* var_278 = &var_270;
    var_270 = 0;
    int64_t var_268 = 0;
    int32_t var_260 = 0x42ff0000;
    int128_t s_25;
    __builtin_memset(&s_25, 0, 0x3c);
    void* var_220 = &*s_25[4];
    int64_t var_210;
    int64_t* var_218 = &var_210;
    var_210 = 0;
    int64_t var_208 = 0;
    int64_t var_1fc = 0;
    int32_t var_408 = 0x42ff0000;
    int64_t var_1f4 = 0;
    int128_t s_21;
    __builtin_memset(&s_21, 0, 0x3c);
    cv::Mat* s_4;
    __builtin_memset(&s_4, 0, 0x30);
    int64_t var_1e8 = 0xffffffff;
    char var_1e0 = 0;
    int32_t var_200 = 1;
    void* var_3c8 = &*s_21[4];
    int64_t var_3b8;
    int64_t* var_3c0 = &var_3b8;
    int64_t var_3b0 = 0;
    var_3b8 = 0;
    int64_t x9 = arg2[1];
    int32_t var_470;
    int64_t* x8_1 = (&var_470 | 8);
    var_470 = 0x42ff0000;
    int128_t s_20;
    __builtin_memset(&s_20, 0, 0x3c);
    int64_t* var_2198 = &var_3b8;
    int64_t var_420;
    int64_t* var_2190 = &var_420;
    int64_t* var_428 = &var_420;
    int64_t var_418 = 0;
    var_420 = 0;
    int64_t* s_15 = nullptr;
    int32_t s_13 = 0x2010000;
    int32_t* s_14 = &var_470;
    cv::Mat::copyTo((x9 - 0x60));
    int32_t x8_2 = *(arg1 + 0x350);
    int32_t x13 = *s_20[4];
    int32_t j_15 = *s_20[8];
    int64_t s_51 = *x8_1;
    int32_t var_4d0 = 0x42ff0000;
    int128_t s_17;
    __builtin_memset(&s_17, 0, 0x3c);
    void* var_490 = &*s_17[4];
    int32_t x16_1;
    if (x8_2 == 1)
    {
        x16_1 = 0x32;
    }
    else
    {
        x16_1 = 0;
    }
    int64_t x0_1;
    if (x8_2 == 1)
    {
        x0_1 = 0x78;
    }
    else
    {
        x0_1 = 0x32;
    }
    int32_t x9_1;
    if (x8_2 == 1)
    {
        x9_1 = 0x64;
    }
    else
    {
        x9_1 = 0x1e;
    }
    int32_t i_38 = (x16_1 + x13);
    int32_t i_37 = ((x13 - x9_1) + x16_1);
    int64_t x20;
    if (x8_2 == 1)
    {
        x20 = 0x96;
    }
    else
    {
        x20 = 0x1e;
    }
    int32_t j_14 = (j_15 - x0_1);
    int32_t i_9;
    if (i_37 > i_38)
    {
        i_9 = i_38;
    }
    else
    {
        i_9 = i_37;
    }
    int32_t j_13;
    if (j_15 > j_14)
    {
        j_13 = j_14;
    }
    else
    {
        j_13 = j_15;
    }
    int32_t x26;
    if ((j_13 + 2) < (x0_1 - 2))
    {
        x26 = (j_13 + 2);
    }
    else
    {
        x26 = (x0_1 - 2);
    }
    int32_t x27;
    if ((i_9 + 2) < (x20 - 2))
    {
        x27 = (i_9 + 2);
    }
    else
    {
        x27 = (x20 - 2);
    }
    int32_t x19_1;
    if ((x0_1 - 2) < (j_13 + 2))
    {
        x19_1 = (j_13 + 2);
    }
    else
    {
        x19_1 = (x0_1 - 2);
    }
    int32_t x21_1;
    if ((x20 - 2) < (i_9 + 2))
    {
        x21_1 = (i_9 + 2);
    }
    else
    {
        x21_1 = (x20 - 2);
    }
    __builtin_memset(&s_13, 0, 0x20);
    int64_t var_480;
    int64_t* var_21a0 = &var_480;
    int64_t* var_488 = &var_480;
    int64_t var_478 = 0;
    var_480 = 0;
    int64_t s_48 = s_51;
    cv::Mat::create(&var_4d0, &*nullptr->ident.signature[2], &s_48);
    cv::Mat::operator=(&var_4d0);
    int32_t x9_4 = (x19_1 - x26);
    int32_t x10_1 = (x21_1 - x27);
    int64_t var_1d20 = 0;
    int32_t var_2030 = x26;
    int32_t var_202c = x27;
    int32_t s_5 = 0x3010000;
    int32_t* var_1d28 = &var_4d0;
    int32_t var_2028 = x9_4;
    int32_t var_2024 = x10_1;
    s_13 = 0x406fe00000000000;
    __builtin_memset(&s_14, 0, 0x18);
    cv::rectangle(&s_5, &var_2030, &s_13, 0xffffffff, 8, 0);
    s_5 = 0x406fe00000000000;
    int64_t s_6;
    __builtin_memset(&s_6, 0, 0x18);
    cv::operator-(&s_5, &var_4d0);
    *(*s_13 + 0x18)();
    int64_t* x0_7;
    int128_t v0;
    x0_7 = cv::MatExpr::~MatExpr();
    void* var_2008;
    void* var_2000;
    int128_t* s_7;
    int32_t var_19ec;
    int128_t var_19d0;
    int128_t var_19c0;
    int32_t** var_19b0;
    int64_t* var_19a8;
    int64_t var_19a0;
    int128_t s_22;
    int128_t var_3d8_1;
    int64_t* x8_6;
    if (arg2[1] == *arg2)
    {
        x8_6 = &var_2000;
    }
    else
    {
        int32_t** x8_7 = (&s_13 | 8);
        int64_t s_32 = (&s_13 | 4);
        int64_t x21_2 = *arg2;
        int128_t var_118;
        int128_t* var_2180_1 = &var_118;
        int64_t var_c8;
        int64_t* var_2128_1 = &var_c8;
        int64_t i = 0;
        int32_t* var_2168_1 = &var_260;
        int32_t* var_2160_1 = &var_2c0;
        do
        {
            int32_t* x24_1 = (x21_2 + (i * 0x60));
            int32_t var_1d8;
            if (&var_1d8 != x24_1)
            {
                int64_t x8_9 = *((x21_2 + (i * 0x60)) + 0x38);
                if (x8_9 != 0)
                {
                    int32_t j;
                    do
                    {
                        j = __stlxr((__ldaxr((x8_9 + 0x14)) + 1), (x8_9 + 0x14));
                    } while (j != 0);
                }
                int64_t var_1a0;
                if (var_1a0 != 0)
                {
                    int32_t temp0_2;
                    int32_t j_1;
                    do
                    {
                        temp0_2 = __ldaxr((var_1a0 + 0x14));
                        j_1 = __stlxr((temp0_2 - 1), (var_1a0 + 0x14));
                    } while (j_1 != 0);
                    if (temp0_2 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                v0 = 0;
                *v0[8] = 0;
                var_1a0 = 0;
                int128_t s_26;
                __builtin_memset(&s_26, 0, 0x20);
                int32_t var_1d4;
                int64_t x10_5;
                if (var_1d4 <= 0)
                {
                    var_1d8 = *x24_1;
                }
                else
                {
                    int64_t x9_10 = 0;
                    do
                    {
                        int64_t var_198;
                        *(var_198 + (x9_10 << 2)) = 0;
                        x10_5 = var_1d4;
                        x9_10 = (x9_10 + 1);
                    } while (x9_10 < x10_5);
                    var_1d8 = *x24_1;
                }
                int32_t x8_19;
                if ((var_1d4 <= 0 || (var_1d4 > 0 && x10_5 <= 2)))
                {
                    x8_19 = *((x21_2 + (i * 0x60)) + 4);
                    if (x8_19 <= 2)
                    {
                        var_1d4 = x8_19;
                        void* x8_20 = (x21_2 + (i * 0x60));
                        int64_t var_1d0_1 = *(x8_20 + 8);
                        int64_t* x8_21 = *(x8_20 + 0x48);
                        int64_t* var_190;
                        *var_190 = *x8_21;
                        var_190[1] = x8_21[1];
                    }
                }
                if ((((var_1d4 <= 0 || (var_1d4 > 0 && x10_5 <= 2)) && x8_19 > 2) || (var_1d4 > 0 && x10_5 > 2)))
                {
                    cv::Mat::copySize(&var_1d8);
                }
                void* x8_23 = (x21_2 + (i * 0x60));
                s_26 = *(x8_23 + 0x10);
                int128_t var_1b8_1 = *(x8_23 + 0x20);
                int128_t var_1a8_1 = *(x8_23 + 0x30);
            }
            s_13 = 0xc1020006;
            s_14 = &s_48;
            s_5 = 0x1010000;
            s_48 = 0;
            s_15 = 0x100000001;
            s_7 = nullptr;
            int32_t* var_1d28_1 = &var_4d0;
            int128_t v0_1;
            int128_t s_42;
            int128_t v2_1;
            int128_t v3_1;
            v0_1 = cv::Mat::setTo(&var_1d8, &s_13);
            s_13 = 0x42ff0000;
            v0_1 = 0;
            *v0_1[8] = 0;
            __builtin_memset(s_32, 0, 0x3c);
            var_19b0 = x8_7;
            var_19a8 = &var_19a0;
            var_19a0 = 0;
            int64_t var_1998_1 = 0;
            int64_t var_e0;
            if (var_e0 != 0)
            {
                int32_t temp0_3;
                int32_t j_2;
                do
                {
                    temp0_3 = __ldaxr((var_e0 + 0x14));
                    j_2 = __stlxr((temp0_3 - 1), (var_e0 + 0x14));
                } while (j_2 != 0);
                if (temp0_3 == 1)
                {
                    v0_1 = cv::Mat::deallocate();
                }
            }
            v0_1 = 0;
            *v0_1[8] = 0;
            var_e0 = 0;
            int128_t s_27;
            __builtin_memset(&s_27, 0, 0x20);
            int32_t var_114;
            void* var_d8;
            if (var_114 >= 1)
            {
                int64_t j_3 = 0;
                do
                {
                    *(var_d8 + (j_3 << 2)) = 0;
                    j_3 = (j_3 + 1);
                } while (j_3 < var_114);
            }
            v0_1 = s_13;
            s_42 = s_15;
            var_118 = v0_1;
            s_27 = s_42;
            int128_t var_f8_1 = var_19d0;
            int128_t var_e8_1 = var_19c0;
            int64_t* var_d0;
            if (var_d0 != var_2128_1)
            {
                cv::fastFree(var_d0);
                var_d0 = var_2128_1;
                void var_110;
                var_d8 = &var_110;
            }
            int64_t* x0_12;
            if (((var_d0 == var_2128_1 && v0_1 <= 2) || (var_d0 != var_2128_1 && var_19ec <= 2)))
            {
                x0_12 = var_19a8;
                var_c8 = *x0_12;
                int64_t var_c0_1 = x0_12[1];
            }
            if (((var_d0 == var_2128_1 && v0_1 > 2) || (var_d0 != var_2128_1 && var_19ec > 2)))
            {
                x0_12 = &var_19a0;
                var_19a8 = &var_19a0;
                var_d8 = var_19b0;
                var_19b0 = x8_7;
            }
            s_13 = 0x42ff0000;
            __builtin_memset(s_32, 0, 0x30);
            *var_19c0[8] = 0;
            __builtin_memset(&s_15, 0, 0x34);
            if (x0_12 != &var_19a0)
            {
                cv::fastFree(x0_12);
            }
            int128_t v1_1;
            int128_t v2_2;
            v0 = feasibal_region::feasibal_region::run(arg1, &var_1d8);
            char var_1ec;
            if (var_1ec != 0)
            {
                void* x8_37 = var_2000;
                int64_t var_1ff8;
                if (x8_37 == var_1ff8)
                {
                    v0 = std::__ndk1::vector<Eigen::Transform<float, 3, 1, 0>, std::__ndk1::allocator<Eigen::Transform<float, 3, 1, 0> > >::__push_back_slow_path<Eigen::Transform<float, 3, 1, 0> const&>(&var_2008);
                }
                else
                {
                    int32_t var_3a8;
                    *x8_37 = var_3a8;
                    int32_t var_3a4;
                    *(x8_37 + 4) = var_3a4;
                    int32_t var_3a0;
                    *(x8_37 + 8) = var_3a0;
                    int32_t var_39c;
                    *(x8_37 + 0xc) = var_39c;
                    int32_t var_398;
                    *(x8_37 + 0x10) = var_398;
                    int32_t var_394;
                    *(x8_37 + 0x14) = var_394;
                    int32_t var_390;
                    *(x8_37 + 0x18) = var_390;
                    int32_t var_38c;
                    *(x8_37 + 0x1c) = var_38c;
                    int32_t var_388;
                    *(x8_37 + 0x20) = var_388;
                    int32_t var_384;
                    *(x8_37 + 0x24) = var_384;
                    int32_t var_380;
                    *(x8_37 + 0x28) = var_380;
                    int32_t var_37c;
                    *(x8_37 + 0x2c) = var_37c;
                    int32_t var_378;
                    *(x8_37 + 0x30) = var_378;
                    int32_t var_374;
                    *(x8_37 + 0x34) = var_374;
                    int32_t var_370;
                    *(x8_37 + 0x38) = var_370;
                    int32_t var_36c;
                    *(x8_37 + 0x3c) = var_36c;
                    var_2000 = (x8_37 + 0x40);
                }
            }
            int64_t* var_2018_1;
            x0_7 = var_2018_1;
            int64_t var_2010;
            if (x0_7 == var_2010)
            {
                x0_7 = std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__push_back_slow_path<cv::Mat const&>(&s_4);
            }
            else
            {
                *x0_7 = var_2c0;
                int128_t var_2b0;
                *(x0_7 + 0x10) = var_2b0;
                int128_t var_2ac;
                *(x0_7 + 0x20) = var_2ac;
                int128_t var_290;
                x0_7[6] = var_290;
                int64_t x8_41 = *var_290[8];
                x0_7[0xa] = 0;
                x0_7[8] = &x0_7[1];
                x0_7[9] = &x0_7[0xa];
                x0_7[7] = x8_41;
                x0_7[0xb] = 0;
                if (x8_41 != 0)
                {
                    int32_t j_4;
                    do
                    {
                        j_4 = __stlxr((__ldaxr((x8_41 + 0x14)) + 1), (x8_41 + 0x14));
                    } while (j_4 != 0);
                }
                if (s_24 > 2)
                {
                    *(x0_7 + 4) = 0;
                    x0_7 = cv::Mat::copySize(x0_7);
                }
                else
                {
                    int64_t* x10_11 = x0_7[9];
                    *x10_11 = *var_278;
                    x10_11[1] = var_278[1];
                }
                var_2018_1 = &var_2018_1[0xc];
            }
            int128_t var_230;
            int64_t x8_48 = *var_230[8];
            if (x8_48 != 0)
            {
                int32_t j_5;
                do
                {
                    j_5 = __stlxr((__ldaxr((x8_48 + 0x14)) + 1), (x8_48 + 0x14));
                } while (j_5 != 0);
            }
            int64_t x8_50 = *var_3d8_1[8];
            if (x8_50 != 0)
            {
                int32_t temp0_7;
                int32_t j_6;
                do
                {
                    temp0_7 = __ldaxr((x8_50 + 0x14));
                    j_6 = __stlxr((temp0_7 - 1), (x8_50 + 0x14));
                } while (j_6 != 0);
                if (temp0_7 == 1)
                {
                    x0_7 = cv::Mat::deallocate();
                }
            }
            v0 = 0;
            *v0[8] = 0;
            *var_3d8_1[8] = 0;
            __builtin_memset(&s_22, 0, 0x20);
            int64_t x10_14;
            if (s_21 <= 0)
            {
                var_408 = var_260;
            }
            else
            {
                int64_t x9_44 = 0;
                do
                {
                    *(var_3c8 + (x9_44 << 2)) = 0;
                    x10_14 = s_21;
                    x9_44 = (x9_44 + 1);
                } while (x9_44 < x10_14);
                var_408 = var_260;
            }
            int32_t x8_57;
            if ((s_21 <= 0 || (s_21 > 0 && x10_14 <= 2)))
            {
                x8_57 = s_25;
                if (x8_57 <= 2)
                {
                    s_21 = x8_57;
                    int64_t var_400_1 = *s_25[4];
                    *var_3c0 = *var_218;
                    var_3c0[1] = var_218[1];
                }
            }
            if ((((s_21 <= 0 || (s_21 > 0 && x10_14 <= 2)) && x8_57 > 2) || (s_21 > 0 && x10_14 > 2)))
            {
                x0_7 = cv::Mat::copySize(&var_408);
            }
            s_22 = s_25;
            int128_t var_24c;
            int128_t var_3f4_1 = var_24c;
            var_3d8_1 = var_230;
            i = (i + 1);
            x21_2 = *arg2;
        } while (i < (((arg2[1] - x21_2) >> 5) * -0x5555555555555555));
        x8_6 = &var_2000;
        int64_t* var_2140;
        var_2140 = var_200;
    }
    bool cond:5 = ((*x8_6 - var_2008) >> 6) < 2;
    int64_t s_3;
    __builtin_memset(&s_3, 0, 0x48);
    int64_t var_2060;
    void* var_2048;
    int64_t s_45;
    int32_t var_1e88;
    if (!(cond:5))
    {
        int64_t i_1 = 1;
        do
        {
            s_13 = 0x42ff0000;
            __builtin_memset((&s_13 | 4), 0, 0x3c);
            var_19b0 = &s_14;
            var_19a8 = &var_19a0;
            var_19a0 = 0;
            int64_t var_1998_2 = 0;
            s_48 = 0x300000003;
            cv::Mat::create(&s_13, &*nullptr->ident.signature[2], &s_48);
            s_5 = 0x42ff0000;
            __builtin_memset((&s_5 | 4), 0, 0x3c);
            int64_t var_1ce0;
            int64_t* var_1ce8_1 = &var_1ce0;
            var_1ce0 = 0;
            int64_t var_1cd8_1 = 0;
            s_48 = 0x300000001;
            cv::Mat::create(&s_5, &*nullptr->ident.signature[2], &s_48);
            void* x8_70 = var_2008;
            int32_t var_1fe8_1 = 0;
            s_45 = 0;
            int32_t* x8_71 = (x8_70 + (i_1 << 6));
            int128_t v0_2;
            v0_2 = *x8_71;
            int64_t* s_41 = s_15;
            int64_t x9_49 = *var_19a8;
            v0_2 = v0_2;
            *s_41 = v0_2;
            v0_2 = x8_71[4];
            void* x11_2 = (s_41 + x9_49);
            void* x9_50 = (s_41 + (x9_49 << 1));
            v0_2 = v0_2;
            s_41[1] = v0_2;
            v0_2 = x8_71[8];
            v0_2 = v0_2;
            s_41[2] = v0_2;
            v0_2 = x8_71[1];
            v0_2 = v0_2;
            *x11_2 = v0_2;
            v0_2 = x8_71[5];
            v0_2 = v0_2;
            *(x11_2 + 8) = v0_2;
            v0_2 = x8_71[9];
            v0_2 = v0_2;
            *(x11_2 + 0x10) = v0_2;
            v0_2 = x8_71[2];
            v0_2 = v0_2;
            *x9_50 = v0_2;
            v0_2 = x8_71[6];
            v0_2 = v0_2;
            *(x9_50 + 8) = v0_2;
            v0_2 = x8_71[0xa];
            v0_2 = v0_2;
            *(x9_50 + 0x10) = v0_2;
            v0_2 = *(x8_71 + 0x30);
            int128_t* s_38 = s_7;
            /* unimplemented  {fcvtl v0.2d, v0.2s} */;
            *s_38 = v0_2;
            v0_2 = x8_71[0xe];
            v0_2 = v0_2;
            s_38[1] = v0_2;
            rotationMatrixToEulerAngles(&s_13);
            s_45 = s_48;
            int128_t* var_2070_1;
            int64_t var_2068;
            char var_1e84;
            int32_t var_1d2c;
            int64_t var_1cf8;
            cv::Mat* s_37;
            if (var_1e84 != 0)
            {
                int128_t* var_2058_1;
                int64_t var_2050;
                if (var_2058_1 == var_2050)
                {
                    std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__push_back_slow_path<cv::Mat const&>(&var_2060);
                }
                else
                {
                    *var_2058_1 = s_5;
                    var_2058_1[1] = s_7;
                    int128_t var_1d10;
                    var_2058_1[2] = var_1d10;
                    int64_t var_1d00;
                    var_2058_1[3] = var_1d00;
                    var_2058_1[5] = 0;
                    var_2058_1[4] = (var_2058_1 + 8);
                    *(var_2058_1 + 0x48) = &var_2058_1[5];
                    *(var_2058_1 + 0x38) = var_1cf8;
                    *(var_2058_1 + 0x58) = 0;
                    if (var_1cf8 != 0)
                    {
                        int32_t j_7;
                        do
                        {
                            j_7 = __stlxr((__ldaxr((var_1cf8 + 0x14)) + 1), (var_1cf8 + 0x14));
                        } while (j_7 != 0);
                    }
                    if (var_1d2c > 2)
                    {
                        *(var_2058_1 + 4) = 0;
                        cv::Mat::copySize(var_2058_1);
                    }
                    else
                    {
                        int64_t* x10_19 = *(var_2058_1 + 0x48);
                        *x10_19 = *var_1ce8_1;
                        x10_19[1] = var_1ce8_1[1];
                    }
                    var_2058_1 = &var_2058_1[6];
                }
                void* var_2040_1;
                int32_t* x8_82 = var_2040_1;
                int64_t var_2038;
                if (x8_82 == var_2038)
                {
                    std::__ndk1::vector<cv::Vec<float, 3>, std::__ndk1::allocator<cv::Vec<float, 3> > >::__push_back_slow_path<cv::Vec<float, 3> const&>(&var_2048);
                }
                else
                {
                    *x8_82 = s_45;
                    x8_82[1] = *s_45[4];
                    x8_82[2] = var_1e88;
                    var_2040_1 = &x8_82[3];
                }
                s_37 = s_4;
                if (var_2070_1 == var_2068)
                {
                    std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__push_back_slow_path<cv::Mat const&>(&s_3);
                }
            }
            int64_t x8_88;
            if (((var_1e84 != 0 && var_2070_1 == var_2068) || var_1e84 == 0))
            {
                x8_88 = var_1cf8;
                if (x8_88 != 0)
                {
                label_17a28:
                    int32_t temp0_10;
                    int32_t j_8;
                    do
                    {
                        temp0_10 = __ldaxr((x8_88 + 0x14));
                        j_8 = __stlxr((temp0_10 - 1), (x8_88 + 0x14));
                    } while (j_8 != 0);
                    if (temp0_10 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
            }
            if ((var_1e84 != 0 && var_2070_1 != var_2068))
            {
                void* x10_21 = (s_37 + (i_1 * 0x60));
                *var_2070_1 = *(s_37 + (i_1 * 0x60));
                var_2070_1[1] = *(x10_21 + 0x10);
                var_2070_1[2] = *(x10_21 + 0x20);
                var_2070_1[3] = *(x10_21 + 0x30);
                int64_t x10_22 = *(x10_21 + 0x38);
                var_2070_1[5] = 0;
                var_2070_1[4] = (var_2070_1 + 8);
                *(var_2070_1 + 0x48) = &var_2070_1[5];
                *(var_2070_1 + 0x38) = x10_22;
                *(var_2070_1 + 0x58) = 0;
                if (x10_22 != 0)
                {
                    int32_t j_9;
                    do
                    {
                        j_9 = __stlxr((__ldaxr((x10_22 + 0x14)) + 1), (x10_22 + 0x14));
                    } while (j_9 != 0);
                }
                if (*(x10_21 + 4) > 2)
                {
                    *(var_2070_1 + 4) = 0;
                    cv::Mat::copySize(var_2070_1);
                }
                else
                {
                    int64_t* x8_84 = *((s_37 + (i_1 * 0x60)) + 0x48);
                    int64_t* x10_24 = *(var_2070_1 + 0x48);
                    *x10_24 = *x8_84;
                    x10_24[1] = x8_84[1];
                }
                var_2070_1 = &var_2070_1[6];
                x8_88 = var_1cf8;
                if (x8_88 != 0)
                {
                    goto label_17a28;
                }
            }
            var_1cf8 = 0;
            __builtin_memset(&s_7, 0, 0x20);
            if (var_1d2c >= 1)
            {
                int64_t j_10 = 0;
                do
                {
                    *((&s_5 | 8) + (j_10 << 2)) = 0;
                    j_10 = (j_10 + 1);
                } while (j_10 < var_1d2c);
            }
            if (var_1ce8_1 != &var_1ce0)
            {
                cv::fastFree(var_1ce8_1);
            }
            int64_t x8_92 = *var_19c0[8];
            if (x8_92 != 0)
            {
                int32_t temp0_11;
                int32_t j_11;
                do
                {
                    temp0_11 = __ldaxr((x8_92 + 0x14));
                    j_11 = __stlxr((temp0_11 - 1), (x8_92 + 0x14));
                } while (j_11 != 0);
                if (temp0_11 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_19c0[8] = 0;
            __builtin_memset(&s_15, 0, 0x20);
            if (var_19ec >= 1)
            {
                int64_t j_12 = 0;
                do
                {
                    *(var_19b0 + (j_12 << 2)) = 0;
                    j_12 = (j_12 + 1);
                } while (j_12 < var_19ec);
            }
            x0_7 = var_19a8;
            if (x0_7 != &var_19a0)
            {
                x0_7 = cv::fastFree(x0_7);
            }
            i_1 = (i_1 + 1);
        } while (i_1 < ((*x8_6 - var_2008) >> 6));
    }
    int32_t var_530;
    int64_t x19_2 = (&var_530 | 8);
    var_530 = 0x42ff0000;
    int128_t s_16;
    __builtin_memset(&s_16, 0, 0x3c);
    int64_t var_4f0 = x19_2;
    int64_t var_4e0;
    int64_t* var_4e8 = &var_4e0;
    int64_t var_4d8 = 0;
    var_4e0 = 0;
    int128_t v0_3;
    int128_t v1_2;
    int128_t v2_3;
    int128_t v3_2;
    v0_3 = checktool::getExtrinsicParameters(x0_7, &var_2048);
    int128_t var_500;
    int64_t x8_99 = *var_500[8];
    if (x8_99 != 0)
    {
        int32_t temp0_12;
        int32_t i_2;
        do
        {
            temp0_12 = __ldaxr((x8_99 + 0x14));
            i_2 = __stlxr((temp0_12 - 1), (x8_99 + 0x14));
        } while (i_2 != 0);
        if (temp0_12 == 1)
        {
            v0_3 = cv::Mat::deallocate();
        }
    }
    v0_3 = 0;
    *v0_3[8] = 0;
    *var_500[8] = 0;
    bool cond:7 = s_16 < 1;
    __builtin_memset(&*s_16[0xc], 0, 0x20);
    if (!(cond:7))
    {
        int64_t i_3 = 0;
        do
        {
            *(var_4f0 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < s_16);
    }
    v0_3 = s_13;
    var_530 = v0_3;
    s_16 = s_15;
    int128_t var_500_1 = var_19c0;
    int32_t x8_103;
    if (var_4e8 == &var_4e0)
    {
        x8_103 = v0_3;
    }
    else
    {
        cv::fastFree(var_4e8);
        x8_103 = var_19ec;
        var_4e8 = &var_4e0;
        var_4f0 = x19_2;
    }
    int64_t* x0_27;
    if (x8_103 > 2)
    {
        x0_27 = &var_19a0;
        int64_t* var_19a8_1 = &var_19a0;
        var_4f0 = var_19b0;
        int64_t var_19b0_1 = (&s_13 | 8);
    }
    else
    {
        x0_27 = var_19a8;
        var_4e0 = *x0_27;
        int64_t var_4d8_1 = x0_27[1];
    }
    s_13 = 0x42ff0000;
    __builtin_memset((&s_13 | 4), 0, 0x34);
    *var_19c0[8] = 0;
    __builtin_memset(&s_15, 0, 0x20);
    if (x0_27 != &var_19a0)
    {
        x0_27 = cv::fastFree(x0_27);
    }
    int32_t x0_28;
    int128_t v0_4;
    x0_28 = checktool::getNearEdge(x0_27, &s_3);
    *(arg1 + 0x340) = x0_28;
    if ((arg1 + 0x2e0) != &var_530)
    {
        int64_t x8_104 = *var_500_1[8];
        if (x8_104 != 0)
        {
            int32_t i_4;
            do
            {
                i_4 = __stlxr((__ldaxr((x8_104 + 0x14)) + 1), (x8_104 + 0x14));
            } while (i_4 != 0);
        }
        int64_t x8_106 = *(arg1 + 0x318);
        if (x8_106 != 0)
        {
            int32_t temp0_14;
            int32_t i_5;
            do
            {
                temp0_14 = __ldaxr((x8_106 + 0x14));
                i_5 = __stlxr((temp0_14 - 1), (x8_106 + 0x14));
            } while (i_5 != 0);
            if (temp0_14 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int32_t x8_108 = *(arg1 + 0x2e4);
        v0_4 = 0;
        *v0_4[8] = 0;
        *(arg1 + 0x318) = 0;
        __builtin_memset((arg1 + 0x2f0), 0, 0x20);
        int64_t x10_36;
        if (x8_108 <= 0)
        {
            *(arg1 + 0x2e0) = var_530;
        }
        else
        {
            int64_t x8_109 = *(arg1 + 0x320);
            int64_t x9_77 = 0;
            do
            {
                *(x8_109 + (x9_77 << 2)) = 0;
                x10_36 = *(arg1 + 0x2e4);
                x9_77 = (x9_77 + 1);
            } while (x9_77 < x10_36);
            *(arg1 + 0x2e0) = var_530;
        }
        int32_t x8_112;
        if ((x8_108 <= 0 || (x8_108 > 0 && x10_36 <= 2)))
        {
            x8_112 = s_16;
            if (x8_112 <= 2)
            {
                *(arg1 + 0x2e4) = x8_112;
                int64_t* x10_37 = *(arg1 + 0x328);
                *(arg1 + 0x2e8) = *s_16[4];
                *x10_37 = *var_4e8;
                x10_37[1] = var_4e8[1];
            }
        }
        if ((((x8_108 <= 0 || (x8_108 > 0 && x10_36 <= 2)) && x8_112 > 2) || (x8_108 > 0 && x10_36 > 2)))
        {
            cv::Mat::copySize((arg1 + 0x2e0));
        }
        *(arg1 + 0x2f0) = s_16;
        *(arg1 + 0x300) = var_19d0;
        *(arg1 + 0x310) = var_500_1;
    }
    int64_t* x9_79 = *(arg1 + 0x290);
    v8 = *x9_79;
    double v10 = x9_79[2];
    void* x8_118 = (x9_79 + **(arg1 + 0x2c8));
    v9 = *(x8_118 + 8);
    double v11 = *(x8_118 + 0x10);
    v0_4 = 0x41a00000;
    int64_t x0_32;
    int128_t v0_5;
    int128_t v2_4;
    int128_t v3_3;
    x0_32 = ground_filter::Plane_Seg::Plane_Seg(&s_13, v0_4);
    v0_5 = var_470;
    int128_t var_440;
    int64_t x8_119 = *var_440[8];
    v8 = (v8 * 0.5);
    v9 = (v9 * 0.5);
    v10 = (v10 * 0.5);
    v11 = (v11 * 0.5);
    int128_t s_34 = s_20;
    int128_t var_45c;
    int128_t var_1a40 = var_45c;
    int64_t var_1a30 = var_440;
    v2_4 = v9;
    v3_3 = v10;
    float var_1a00 = v8;
    int128_t var_1a60 = v0_5;
    int32_t var_19fc = v2_4;
    int32_t var_19f8 = v3_3;
    float var_19f4 = v11;
    int64_t var_1a10;
    int64_t* var_1a18 = &var_1a10;
    int64_t var_1a08 = 0;
    var_1a10 = 0;
    if (x8_119 != 0)
    {
        int32_t i_6;
        do
        {
            i_6 = __stlxr((__ldaxr((x8_119 + 0x14)) + 1), (x8_119 + 0x14));
        } while (i_6 != 0);
    }
    if (((x8_119 == 0 && v0_5 <= 2) || (x8_119 != 0 && s_20 <= 2)))
    {
        *var_1a18 = *var_428;
        var_1a18[1] = var_428[1];
    }
    if (((x8_119 == 0 && v0_5 > 2) || (x8_119 != 0 && s_20 > 2)))
    {
        *var_1a60[4] = 0;
        x0_32 = cv::Mat::copySize(&var_1a60);
    }
    checktool::getPointCloud(x0_32, &var_1a00, &var_1a60);
    if (x8_119 != 0)
    {
        int32_t temp0_16;
        int32_t i_7;
        do
        {
            temp0_16 = __ldaxr((x8_119 + 0x14));
            i_7 = __stlxr((temp0_16 - 1), (x8_119 + 0x14));
        } while (i_7 != 0);
        if (temp0_16 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int64_t var_1a28_1 = 0;
    int128_t s_12;
    __builtin_memset(&s_12, 0, 0x20);
    if (*var_1a60[4] >= 1)
    {
        int64_t i_8 = 0;
        do
        {
            *((&var_1a60 | 8) + (i_8 << 2)) = 0;
            i_8 = (i_8 + 1);
        } while (i_8 < *var_1a60[4]);
    }
    if (var_1a18 != &var_1a10)
    {
        cv::fastFree(var_1a18);
    }
    cv::Mat* var_2090;
    std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&s_13, var_2090);
    void* s_2;
    __builtin_memset(&s_2, 0, 0x18);
    int32_t var_1a70;
    ground_filter::Plane_Seg::segPlane(&s_13, &var_1a70, &s_2);
    int64_t s_52 = *x8_1;
    int32_t var_1ad0;
    int64_t x11_7 = (&var_1ad0 | 8);
    __builtin_memset(&s_5, 0, 0x20);
    var_1ad0 = 0x42ff0000;
    int128_t s_11;
    __builtin_memset(&s_11, 0, 0x3c);
    int64_t var_1a80;
    int64_t* var_1a88 = &var_1a80;
    int64_t var_1a78 = 0;
    var_1a80 = 0;
    s_48 = s_52;
    cv::Mat::create(&var_1ad0, &*nullptr->ident.signature[2], &s_48);
    cv::Mat::operator=(&var_1ad0);
    *arg4 = 1;
    s_48 = 0x3010000;
    int128_t v0_6;
    v0_6 = 0x406fe00000000000;
    *v0_6[8] = 0x406fe00000000000;
    void* var_1e80 = nullptr;
    var_1e88 = &var_1ad0;
    int32_t var_20b8 = x26;
    s_5 = v0_6;
    int64_t var_1d18 = 0;
    int64_t var_1d20_1 = 0;
    int32_t var_20b4 = x27;
    int32_t var_20b0 = x9_4;
    int32_t var_20ac = x10_1;
    double v5;
    double v6;
    double v7;
    v5 = cv::rectangle(&s_48, &var_20b8, &s_5, 2, 8, 0);
    int64_t v13 = 0.0;
    int64_t v12 = 0.0;
    if (x20 < i_9)
    {
        v12 = 0.0;
        v13 = 0.0;
        do
        {
            if (x0_1 < j_13)
            {
                double v2_5 = (vcvt_f64_s64(x20) - v11);
                int64_t x10_43 = (x0_1 + (x0_1 << 1));
                int64_t x11_8 = x0_1;
                do
                {
                    v12 = (v12 + 1.0);
                    uint32_t x12_7 = *((*s_20[0xc] + (x20 * *var_428)) + (x11_8 << 1));
                    char x12_9;
                    char x13_3;
                    if (x12_7 == 0)
                    {
                        x12_9 = -0x80;
                        x13_3 = -0x80;
                    }
                    else
                    {
                        v5 = var_1a70;
                        int32_t var_1a6c;
                        v6 = var_1a6c;
                        double v3_4 = (vcvt_f64_u32(x12_7) / 1000.0);
                        int32_t var_1a68;
                        v7 = var_1a68;
                        double v4_1 = ((((vcvt_f64_s64(x11_8) - v10) * v3_4) / v8) * v5);
                        v5 = (((v2_5 * v3_4) / v9) * v6);
                        int32_t var_1a64;
                        v6 = var_1a64;
                        v7 = (v3_4 * v7);
                        v3_4 = *(arg1 + 0x358);
                        v4_1 = ((v7 + (v4_1 + v5)) + v6);
                        v13 = (v13 + 1.0);
                        if (!(v4_1 >= v3_4))
                        {
                            /* unimplemented  {fneg s3, s3} */;
                            if (!(v4_1 <= v3_4))
                            {
                                x12_9 = 0;
                                x13_3 = 0x64;
                            }
                        }
                        if ((v4_1 >= v3_4 || (!(v4_1 >= v3_4) && v4_1 <= v3_4)))
                        {
                            int16_t* x10_44 = ((*s_11[0xc] + (*var_1a88 * x20)) + x10_43);
                            *x10_44 = 0;
                            x10_44[1] = 0xfa;
                            *arg4 = 0;
                            break;
                        }
                    }
                    x11_8 = (x11_8 + 1);
                    char* x14_4 = ((*s_11[0xc] + (x20 * *var_1a88)) + x10_43);
                    x10_43 = (x10_43 + 3);
                    *x14_4 = x12_9;
                    x14_4[1] = x13_3;
                    x14_4[2] = x12_9;
                } while (j_13 > x11_8);
            }
            x20 = (x20 + 1);
        } while (i_9 > x20);
    }
    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::cout, "fill_rate:", 0xa);
    v8 = (v13 / v12);
    int64_t* x0_41 = std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(v8);
    *(*x0_41 - 0x18);
    std::__ndk1::ios_base::getloc();
    *(*std::__ndk1::locale::use_facet(&s_5) + 0x38)();
    std::__ndk1::locale::~locale();
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::put(x0_41);
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
    double v0_8;
    v0_8 = *(arg1 + 0x354);
    if (!(v8 >= v0_8))
    {
        *arg4 = 0;
    }
    void* x9_89 = *(arg1 + 0x2f0);
    int64_t x8_140 = **(arg1 + 0x328);
    v8 = *(x9_89 + 0x18);
    v10 = *((x9_89 + x8_140) + 0x18);
    v9 = *((x9_89 + (x8_140 << 1)) + 0x18);
    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::cout, "height:", 7);
    v8 = vsqrt_f64((((v8 * v8) + (v10 * v10)) + (v9 * v9)));
    bool x0_50 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(v8), " legal:", 7);
    *arg4;
    int64_t* x0_51 = std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_50);
    *(*x0_51 - 0x18);
    std::__ndk1::ios_base::getloc();
    *(*std::__ndk1::locale::use_facet(&s_5) + 0x38)();
    std::__ndk1::locale::~locale();
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::put(x0_51);
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
    double v0_11 = 0.0;
    *(arg1 + 0x348);
    if (!((FCMP_UO(v8, v8))))
    {
        v8 = v0_11;
    }
    int32_t x8_147;
    if (*(arg1 + 0x350) == 1)
    {
        x8_147 = 0x14;
    }
    else
    {
        x8_147 = 0xf;
    }
    /* unimplemented  {fabd d0, d8, d1} */;
    int32_t x20_1;
    if (v0_11 >= vcvt_f64_s64(x8_147))
    {
        x20_1 = 1;
        *arg4 = 0;
    }
    else
    {
        x20_1 = 0;
    }
    getColorDepthImage(&var_470, 0x64, 0x1f40);
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    void* var_20c0_1;
    int32_t var_1b2c;
    int64_t var_1af8;
    int64_t var_1af0;
    void* var_1ae8;
    void var_1ae0;
    int128_t var_1aa0;
    int128_t var_4a0;
    int64_t x22_3;
    int64_t x23_6;
    int128_t v0_14;
    char* var_20c0;
    int128_t v1_6;
    if (*arg4 == 0)
    {
        std::__ndk1::to_string(vcvt_s64_f64(v8));
        int128_t* s_28;
        int128_t v0_13;
        s_28 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_48, nullptr, "Failed-");
        void* x8_151 = s_28[1];
        s_5 = *s_28;
        __builtin_memset(s_28, 0, 0x18);
        char* s_29;
        s_29 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_5, &data_53f19);
        void* x21_5 = *(s_29 + 0x10);
        int64_t s_49 = *(s_29 + 1);
        char x22_1 = *s_29;
        s_45 = *(s_29 + 8);
        s_45 = s_49;
        __builtin_memset(s_29, 0, 0x18);
        if ((s_1 & 1) == 0)
        {
            s_1 = 0;
        }
        else
        {
            *var_20c0 = 0;
            int64_t var_20c8_1 = 0;
            if ((s_1 & 1) != 0)
            {
                v0_14 = operator delete(var_20c0);
                s_1 = 0;
            }
        }
        int64_t s_39 = s_45;
        uint32_t x10_46 = s_5;
        s_1 = x22_1;
        int64_t s_46 = s_45;
        s_45 = 0;
        s_1 = s_39;
        var_20c0_1 = x21_5;
        s_45 = 0;
        if ((x10_46 & 1) != 0)
        {
            v0_14 = operator delete(x8_151);
        }
        if ((s_48 & 1) != 0)
        {
            v0_14 = operator delete(var_1e80);
        }
        x23_6 = 0;
        x22_3 = 0x406fe00000000000;
    }
    else
    {
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        void* var_20e0_1;
        if ((*arg3 & 1) == 0)
        {
            var_20e0_1 = *(arg3 + 0x10);
            s = *arg3;
        }
        else
        {
            size_t x23_5 = *(arg3 + 8);
            if (x23_5 < -0x10)
            {
                int64_t x0_104 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                if ((s_1 & 1) != 0)
                {
                    operator delete(var_20c0);
                }
                if (var_1af8 != 0)
                {
                    int32_t temp0_34;
                    int32_t i_10;
                    do
                    {
                        temp0_34 = __ldaxr((var_1af8 + 0x14));
                        i_10 = __stlxr((temp0_34 - 1), (var_1af8 + 0x14));
                    } while (i_10 != 0);
                    if (temp0_34 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int64_t var_1af8_2 = 0;
                int128_t s_10;
                __builtin_memset(&s_10, 0, 0x20);
                if (var_1b2c >= 1)
                {
                    int64_t i_11 = 0;
                    do
                    {
                        *(var_1af0 + (i_11 << 2)) = 0;
                        i_11 = (i_11 + 1);
                    } while (i_11 < var_1b2c);
                }
                if (var_1ae8 != &var_1ae0)
                {
                    cv::fastFree(var_1ae8);
                }
                int64_t x8_224 = *var_1aa0[8];
                if (x8_224 != 0)
                {
                    int32_t temp0_35;
                    int32_t i_12;
                    do
                    {
                        temp0_35 = __ldaxr((x8_224 + 0x14));
                        i_12 = __stlxr((temp0_35 - 1), (x8_224 + 0x14));
                    } while (i_12 != 0);
                    if (temp0_35 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_1aa0[8] = 0;
                bool cond:32 = s_11 < 1;
                __builtin_memset(&*s_11[0xc], 0, 0x20);
                if (!(cond:32))
                {
                    int64_t i_13 = 0;
                    do
                    {
                        *(x11_7 + (i_13 << 2)) = 0;
                        i_13 = (i_13 + 1);
                    } while (i_13 < s_11);
                }
                if (var_1a88 != &var_1a80)
                {
                    cv::fastFree(var_1a88);
                }
                void* s_36 = s_2;
                if (s_36 != 0)
                {
                    void* s_44 = s_36;
                    operator delete(s_36);
                }
                if (var_2090 != 0)
                {
                    cv::Mat* var_2088_2 = var_2090;
                    operator delete(var_2090);
                }
                ground_filter::Plane_Seg::~Plane_Seg();
                int64_t x8_228 = *var_500_1[8];
                if (x8_228 != 0)
                {
                    int32_t temp0_36;
                    int32_t i_14;
                    do
                    {
                        temp0_36 = __ldaxr((x8_228 + 0x14));
                        i_14 = __stlxr((temp0_36 - 1), (x8_228 + 0x14));
                    } while (i_14 != 0);
                    if (temp0_36 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_500_1[8] = 0;
                bool cond:35 = s_16 < 1;
                __builtin_memset(&*s_16[0xc], 0, 0x20);
                if (!(cond:35))
                {
                    int64_t i_15 = 0;
                    do
                    {
                        *(var_4f0 + (i_15 << 2)) = 0;
                        i_15 = (i_15 + 1);
                    } while (i_15 < s_16);
                }
                if (var_4e8 != &var_4e0)
                {
                    cv::fastFree(var_4e8);
                }
                sub_1fd5c(&s_3);
                sub_1fd5c(&var_2060);
                void* x0_112 = var_2048;
                int64_t x8_232;
                if (x0_112 == 0)
                {
                    x8_232 = *var_4a0[8];
                }
                else
                {
                    void* var_2040_3 = x0_112;
                    operator delete(x0_112);
                    x8_232 = *var_4a0[8];
                }
                if (((x0_112 == 0 && x8_232 != 0) || (x0_112 != 0 && x8_232 != 0)))
                {
                    int32_t temp0_37;
                    int32_t i_16;
                    do
                    {
                        temp0_37 = __ldaxr((x8_232 + 0x14));
                        i_16 = __stlxr((temp0_37 - 1), (x8_232 + 0x14));
                    } while (i_16 != 0);
                    if (temp0_37 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_4a0[8] = 0;
                bool cond:39 = s_17 < 1;
                int128_t s_19;
                __builtin_memset(&s_19, 0, 0x20);
                if (!(cond:39))
                {
                    int64_t i_17 = 0;
                    do
                    {
                        *(var_490 + (i_17 << 2)) = 0;
                        i_17 = (i_17 + 1);
                    } while (i_17 < s_17);
                }
                if (var_488 != var_21a0)
                {
                    cv::fastFree(var_488);
                }
                int64_t x8_237 = *var_440[8];
                if (x8_237 != 0)
                {
                    int32_t temp0_38;
                    int32_t i_18;
                    do
                    {
                        temp0_38 = __ldaxr((x8_237 + 0x14));
                        i_18 = __stlxr((temp0_38 - 1), (x8_237 + 0x14));
                    } while (i_18 != 0);
                    if (temp0_38 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_440[8] = 0;
                bool cond:42 = s_20 < 1;
                __builtin_memset(&*s_20[0xc], 0, 0x20);
                if (!(cond:42))
                {
                    int64_t i_19 = 0;
                    do
                    {
                        *(x8_1 + (i_19 << 2)) = 0;
                        i_19 = (i_19 + 1);
                    } while (i_19 < s_20);
                }
                if (var_428 != var_2190)
                {
                    cv::fastFree(var_428);
                }
                int64_t x8_242 = *var_3d8_1[8];
                if (x8_242 != 0)
                {
                    int32_t temp0_39;
                    int32_t i_20;
                    do
                    {
                        temp0_39 = __ldaxr((x8_242 + 0x14));
                        i_20 = __stlxr((temp0_39 - 1), (x8_242 + 0x14));
                    } while (i_20 != 0);
                    if (temp0_39 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_3d8_1[8] = 0;
                __builtin_memset(&s_22, 0, 0x20);
                if (s_21 >= 1)
                {
                    int64_t i_21 = 0;
                    do
                    {
                        *(var_3c8 + (i_21 << 2)) = 0;
                        i_21 = (i_21 + 1);
                    } while (i_21 < s_21);
                }
                if (var_3c0 != var_2198)
                {
                    cv::fastFree(var_3c0);
                }
                sub_1fd5c(&s_4);
                void* x0_117 = var_2008;
                if (x0_117 != 0)
                {
                    var_2000 = x0_117;
                    operator delete(x0_117);
                }
                feasibal_region::RunOutputParam::~RunOutputParam();
                feasibal_region::RunInputParam::~RunInputParam();
                sub_20ac4(_Unwind_Resume(x0_104));
                /* no return */
            }
            int64_t x22_2 = *(arg3 + 0x10);
            void* x24_6;
            if (x23_5 >= 0x17)
            {
                uint64_t x25 = ((x23_5 + 0x10) & 0xfffffffffffffff0);
                void* x0_66 = operator new(x25);
                x24_6 = x0_66;
                size_t var_20e8_1 = x23_5;
                var_20e0_1 = x0_66;
                s = (x25 | 1);
            }
            else
            {
                x24_6 = (&s | 1);
                s = (x23_5 << 1);
            }
            if ((x23_5 >= 0x17 || (x23_5 < 0x17 && x23_5 != 0)))
            {
                memcpy(x24_6, x22_2, x23_5);
            }
            *(x24_6 + x23_5) = 0;
        }
        checktool::saveResults(arg1);
        if ((s & 1) != 0)
        {
            operator delete(var_20e0_1);
        }
        std::__ndk1::to_string(vcvt_s64_f64(v8));
        int128_t* s_30;
        int128_t v0_15;
        s_30 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_48, nullptr, &data_53f15);
        void* x8_162 = s_30[1];
        s_5 = *s_30;
        __builtin_memset(s_30, 0, 0x18);
        char* s_31;
        s_31 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_5, &data_53f19);
        void* x21_6 = *(s_31 + 0x10);
        int64_t s_50 = *(s_31 + 1);
        char x22_4 = *s_31;
        s_45 = *(s_31 + 8);
        s_45 = s_50;
        __builtin_memset(s_31, 0, 0x18);
        if ((s_1 & 1) == 0)
        {
            s_1 = 0;
        }
        else
        {
            *var_20c0 = 0;
            int64_t var_20c8_2 = 0;
            if ((s_1 & 1) != 0)
            {
                v0_14 = operator delete(var_20c0);
                s_1 = 0;
            }
        }
        int64_t s_40 = s_45;
        uint32_t x10_47 = s_5;
        s_1 = x22_4;
        int64_t s_47 = s_45;
        s_45 = 0;
        s_1 = s_40;
        var_20c0_1 = x21_6;
        s_45 = 0;
        if ((x10_47 & 1) != 0)
        {
            v0_14 = operator delete(x8_162);
        }
        if ((s_48 & 1) != 0)
        {
            v0_14 = operator delete(var_1e80);
        }
        x22_3 = 0;
        x23_6 = 0x406fe00000000000;
    }
    v0_14 = var_1ad0;
    int64_t x8_169 = *var_1aa0[8];
    int128_t s_33 = s_11;
    int64_t var_1b60 = var_1aa0;
    int128_t var_1b90;
    int32_t* x9_91 = (&var_1b90 | 8);
    var_1b90 = v0_14;
    int128_t var_1abc;
    int128_t var_1b70 = var_1abc;
    int64_t var_1b40;
    int64_t* var_1b48 = &var_1b40;
    int64_t var_1b38 = 0;
    var_1b40 = 0;
    if (x8_169 != 0)
    {
        int32_t i_22;
        do
        {
            i_22 = __stlxr((__ldaxr((x8_169 + 0x14)) + 1), (x8_169 + 0x14));
        } while (i_22 != 0);
    }
    if (((x8_169 == 0 && v0_14 <= 2) || (x8_169 != 0 && s_11 <= 2)))
    {
        *var_1b48 = *var_1a88;
        var_1b48[1] = var_1a88[1];
    }
    if (((x8_169 == 0 && v0_14 > 2) || (x8_169 != 0 && s_11 > 2)))
    {
        *var_1b90[4] = 0;
        cv::Mat::copySize(&var_1b90);
    }
    if ((var_1b90 & 0xff8) == 0)
    {
        s_5 = 0x1010000;
        int64_t var_1d20_4 = 0;
        int64_t var_1e80_1 = 0;
        s_48 = 0x2010000;
        int128_t* var_1d28_2 = &var_1b90;
        var_1e88 = &var_1b90;
        cv::cvtColor(&s_5, &s_48, 8, 0);
    }
    v0_14 = 0x3ff0000000000000;
    void var_20f4;
    cv::getTextSize(&s_1, 3, 2, &var_20f4, v0_14);
    int32_t x12_11 = *x9_91;
    int32_t var_20fc;
    int32_t x10_51;
    if (var_20fc < x12_11)
    {
        x10_51 = var_20fc;
    }
    else
    {
        x10_51 = x12_11;
    }
    int32_t x24_7 = ((*var_1b90[8] / 3) + x10_51);
    int32_t x8_177 = x9_91[1];
    int128_t* var_1d28_3 = &var_1b90;
    int32_t x11_14 = *var_1b90[0xc];
    int64_t var_1d20_5 = 0;
    int32_t var_2100;
    int32_t x8_178;
    if (var_2100 < x8_177)
    {
        x8_178 = var_2100;
    }
    else
    {
        x8_178 = x8_177;
    }
    int32_t x9_100;
    if (x11_14 < 0)
    {
        x9_100 = (x11_14 + 1);
    }
    else
    {
        x9_100 = x11_14;
    }
    int32_t var_2104 = x24_7;
    int32_t var_2100_1 = x8_178;
    int32_t x8_179;
    if (x8_178 < 0)
    {
        x8_179 = (x8_178 + 1);
    }
    else
    {
        x8_179 = x8_178;
    }
    int32_t x25_1 = ((x9_100 >> 1) - (x8_179 >> 1));
    s_5 = 0x3010000;
    int64_t var_1bb0 = 0;
    int64_t var_1ba8 = x23_6;
    int64_t var_1ba0 = x22_3;
    int32_t var_2108 = x25_1;
    int64_t var_1b98 = 0;
    cv::putText(&s_5, &s_1, &var_2108, 3, &var_1bb0, 2, 8, false, 1.0);
    if (*arg4 == 0)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&s_1, &data_54bb5);
        if (x20_1 == 0)
        {
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_1, " fill rate error!");
        }
        else
        {
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_1, "    distance error!");
        }
        double v1_7;
        v1_7 = x10_51;
        double v0_18 = vcvt_f64_s64(x24_7);
        /* unimplemented  {sxtl v1.2d, v1.2s} */;
        /* unimplemented  {scvtf d1, d1} */;
        s_5 = 0x3010000;
        int128_t* var_1d28_4 = &var_1b90;
        int32_t temp0_26 = vcvt_s64_f64(((v1_7 * 1.5) + v0_18));
        int64_t var_1d20_6 = 0;
        int64_t var_1bd0 = 0;
        int64_t var_1bc8_1 = x23_6;
        int64_t var_1bc0_1 = x22_3;
        int32_t var_2110 = x25_1;
        int32_t var_210c_1 = temp0_26;
        int64_t var_1bb8_1 = 0;
        cv::putText(&s_5, &s_1, &var_2110, 3, &var_1bd0, 2, 8, false, 1.0);
    }
    void var_1b30;
    cv::operator*(&var_1b30, 0.29999999999999999);
    cv::operator*(&var_1b90, 0.69999999999999996);
    cv::operator+(&s_48, &s_45);
    *(*s_5 + 0x18)();
    cv::MatExpr::~MatExpr();
    cv::MatExpr::~MatExpr();
    cv::MatExpr::~MatExpr();
    *arg5 = 0x42ff0000;
    s_5 = 0x1010000;
    *(arg5 + 4) = {0};
    __builtin_memset(&arg5[5], 0, 0x2c);
    *(arg5 + 0x50) = 0;
    int64_t var_1d20_7 = 0;
    int128_t* var_1d28_5 = &var_1b90;
    int64_t var_1e80_2 = 0;
    s_48 = 0x2010000;
    *(arg5 + 0x58) = 0;
    *(arg5 + 0x40) = &arg5[2];
    *(arg5 + 0x48) = &arg5[0x14];
    var_1e88 = arg5;
    cv::cvtColor(&s_5, &s_48, 0, 0);
    if (x8_169 != 0)
    {
        int32_t temp0_27;
        int32_t i_23;
        do
        {
            temp0_27 = __ldaxr((x8_169 + 0x14));
            i_23 = __stlxr((temp0_27 - 1), (x8_169 + 0x14));
        } while (i_23 != 0);
        if (temp0_27 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int64_t var_1b58_1 = 0;
    int128_t s_8;
    __builtin_memset(&s_8, 0, 0x20);
    if (*var_1b90[4] >= 1)
    {
        int64_t i_24 = 0;
        do
        {
            x9_91[i_24] = 0;
            i_24 = (i_24 + 1);
        } while (i_24 < *var_1b90[4]);
    }
    if (var_1b48 != &var_1b40)
    {
        cv::fastFree(var_1b48);
    }
    if ((s_1 & 1) != 0)
    {
        operator delete(var_20c0_1);
    }
    if (var_1af8 != 0)
    {
        int32_t temp0_28;
        int32_t i_25;
        do
        {
            temp0_28 = __ldaxr((var_1af8 + 0x14));
            i_25 = __stlxr((temp0_28 - 1), (var_1af8 + 0x14));
        } while (i_25 != 0);
        if (temp0_28 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int64_t var_1af8_1 = 0;
    int128_t s_9;
    __builtin_memset(&s_9, 0, 0x20);
    if (var_1b2c >= 1)
    {
        int64_t i_26 = 0;
        do
        {
            *(var_1af0 + (i_26 << 2)) = 0;
            i_26 = (i_26 + 1);
        } while (i_26 < var_1b2c);
    }
    if (var_1ae8 != &var_1ae0)
    {
        cv::fastFree(var_1ae8);
    }
    int64_t x8_195 = *var_1aa0[8];
    if (x8_195 != 0)
    {
        int32_t temp0_29;
        int32_t i_27;
        do
        {
            temp0_29 = __ldaxr((x8_195 + 0x14));
            i_27 = __stlxr((temp0_29 - 1), (x8_195 + 0x14));
        } while (i_27 != 0);
        if (temp0_29 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_1aa0[8] = 0;
    __builtin_memset(&*s_11[0xc], 0, 0x20);
    if (s_11 >= 1)
    {
        int64_t i_28 = 0;
        do
        {
            *(x11_7 + (i_28 << 2)) = 0;
            i_28 = (i_28 + 1);
        } while (i_28 < s_11);
    }
    if (var_1a88 != &var_1a80)
    {
        cv::fastFree(var_1a88);
    }
    void* s_35 = s_2;
    if (s_35 != 0)
    {
        void* s_43 = s_35;
        operator delete(s_35);
    }
    if (var_2090 != 0)
    {
        cv::Mat* var_2088_1 = var_2090;
        operator delete(var_2090);
    }
    ground_filter::Plane_Seg::~Plane_Seg();
    int64_t x8_199 = *var_500_1[8];
    if (x8_199 != 0)
    {
        int32_t temp0_30;
        int32_t i_29;
        do
        {
            temp0_30 = __ldaxr((x8_199 + 0x14));
            i_29 = __stlxr((temp0_30 - 1), (x8_199 + 0x14));
        } while (i_29 != 0);
        if (temp0_30 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_500_1[8] = 0;
    __builtin_memset(&*s_16[0xc], 0, 0x20);
    if (s_16 >= 1)
    {
        int64_t i_30 = 0;
        do
        {
            *(var_4f0 + (i_30 << 2)) = 0;
            i_30 = (i_30 + 1);
        } while (i_30 < s_16);
    }
    if (var_4e8 != &var_4e0)
    {
        cv::fastFree(var_4e8);
    }
    sub_1fd5c(&s_3);
    sub_1fd5c(&var_2060);
    void* x0_97 = var_2048;
    if (x0_97 != 0)
    {
        void* var_2040_2 = x0_97;
        operator delete(x0_97);
    }
    int64_t x8_203 = *var_4a0[8];
    if (x8_203 != 0)
    {
        int32_t temp0_31;
        int32_t i_31;
        do
        {
            temp0_31 = __ldaxr((x8_203 + 0x14));
            i_31 = __stlxr((temp0_31 - 1), (x8_203 + 0x14));
        } while (i_31 != 0);
        if (temp0_31 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_4a0[8] = 0;
    bool cond:46 = s_17 < 1;
    int128_t s_18;
    __builtin_memset(&s_18, 0, 0x20);
    if (!(cond:46))
    {
        int64_t i_32 = 0;
        do
        {
            *(var_490 + (i_32 << 2)) = 0;
            i_32 = (i_32 + 1);
        } while (i_32 < s_17);
    }
    if (var_488 != var_21a0)
    {
        cv::fastFree(var_488);
    }
    int64_t x8_208 = *var_440[8];
    if (x8_208 != 0)
    {
        int32_t temp0_32;
        int32_t i_33;
        do
        {
            temp0_32 = __ldaxr((x8_208 + 0x14));
            i_33 = __stlxr((temp0_32 - 1), (x8_208 + 0x14));
        } while (i_33 != 0);
        if (temp0_32 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_440[8] = 0;
    __builtin_memset(&*s_20[0xc], 0, 0x20);
    if (s_20 >= 1)
    {
        int64_t i_34 = 0;
        do
        {
            *(x8_1 + (i_34 << 2)) = 0;
            i_34 = (i_34 + 1);
        } while (i_34 < s_20);
    }
    if (var_428 != var_2190)
    {
        cv::fastFree(var_428);
    }
    int64_t x8_213 = *var_3d8_1[8];
    if (x8_213 != 0)
    {
        int32_t temp0_33;
        int32_t i_35;
        do
        {
            temp0_33 = __ldaxr((x8_213 + 0x14));
            i_35 = __stlxr((temp0_33 - 1), (x8_213 + 0x14));
        } while (i_35 != 0);
        if (temp0_33 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_3d8_1[8] = 0;
    __builtin_memset(&s_22, 0, 0x20);
    if (s_21 >= 1)
    {
        int64_t i_36 = 0;
        do
        {
            *(var_3c8 + (i_36 << 2)) = 0;
            i_36 = (i_36 + 1);
        } while (i_36 < s_21);
    }
    if (var_3c0 != var_2198)
    {
        cv::fastFree(var_3c0);
    }
    sub_1fd5c(&s_4);
    void* x0_102 = var_2008;
    if (x0_102 != 0)
    {
        *x8_6 = x0_102;
        operator delete(x0_102);
    }
    feasibal_region::RunOutputParam::~RunOutputParam();
    int64_t x0_103 = feasibal_region::RunInputParam::~RunInputParam();
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_103;
}

void sub_18d7c(int64_t arg1, int64_t arg2 @ x19, int64_t arg3 @ x26, int64_t arg4 @ x27, int64_t arg5, int64_t arg6, int64_t arg7, char arg8, void* arg9, void* arg10, void* arg11, void* arg12, void* arg13, int32_t arg14, int64_t arg15, int64_t arg16, void* arg17, int32_t arg18, int64_t arg19, int64_t arg20, void* arg21, int32_t arg22, int64_t arg23, int64_t arg24, void* arg25, int32_t arg26, int64_t arg27, int64_t arg28, void* arg29, int32_t arg30, int64_t arg31, int64_t arg32, void* arg33, int32_t arg34, int64_t arg35, int64_t arg36, void* arg37, int32_t arg38, int64_t arg39, int64_t arg40, void* arg41) __noreturn
{
    if (arg15 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg15 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg15 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg15 = 0;
    int64_t s_6;
    __builtin_memset(s_6, 0, 0x20);
    if (arg14 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg16 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg14);
    }
    if (arg17 != arg2)
    {
        cv::fastFree(arg17);
    }
    if ((arg8 & 1) != 0)
    {
        operator delete(arg9);
    }
    if (arg19 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg19 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg19 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg19 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg18 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg20 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg18);
    }
    if (arg21 != &arg_700)
    {
        cv::fastFree(arg21);
    }
    if (arg23 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg23 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg23 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg23 = 0;
    __builtin_memset(&s_1, 0, 0x20);
    if (arg22 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg24 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg22);
    }
    if (arg25 != arg4)
    {
        cv::fastFree(arg25);
    }
    if (arg10 != 0)
    {
        arg_140 = arg10;
        operator delete(arg10);
    }
    if (arg11 != 0)
    {
        arg_158 = arg11;
        operator delete(arg11);
    }
    ground_filter::Plane_Seg::~Plane_Seg();
    if (arg27 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((arg27 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (arg27 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg27 = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (arg26 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg28 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg26);
    }
    if (arg29 != arg3)
    {
        cv::fastFree(arg29);
    }
    sub_1fd5c(&arg_168);
    sub_1fd5c(&arg_180);
    int64_t x8_17;
    if (arg12 == 0)
    {
        x8_17 = arg31;
    }
    else
    {
        arg_1a0 = arg12;
        operator delete(arg12);
        x8_17 = arg31;
    }
    if (((arg12 == 0 && x8_17 != 0) || (arg12 != 0 && x8_17 != 0)))
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((x8_17 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (x8_17 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg31 = 0;
    __builtin_memset(&s_3, 0, 0x20);
    if (arg30 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg32 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg30);
    }
    if (arg33 != arg5)
    {
        cv::fastFree(arg33);
    }
    if (arg35 != 0)
    {
        int32_t temp0_7;
        int32_t i_10;
        do
        {
            temp0_7 = __ldaxr((arg35 + 0x14));
            i_10 = __stlxr((temp0_7 - 1), (arg35 + 0x14));
        } while (i_10 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg35 = 0;
    __builtin_memset(&s_4, 0, 0x20);
    if (arg34 >= 1)
    {
        int64_t i_11 = 0;
        do
        {
            *(arg36 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < arg34);
    }
    if (arg37 != arg7)
    {
        cv::fastFree(arg37);
    }
    if (arg39 != 0)
    {
        int32_t temp0_8;
        int32_t i_12;
        do
        {
            temp0_8 = __ldaxr((arg39 + 0x14));
            i_12 = __stlxr((temp0_8 - 1), (arg39 + 0x14));
        } while (i_12 != 0);
        if (temp0_8 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg39 = 0;
    __builtin_memset(&s_5, 0, 0x20);
    if (arg38 >= 1)
    {
        int64_t i_13 = 0;
        do
        {
            *(arg40 + (i_13 << 2)) = 0;
            i_13 = (i_13 + 1);
        } while (i_13 < arg38);
    }
    if (arg41 != arg6)
    {
        cv::fastFree(arg41);
    }
    sub_1fd5c(&arg_1c0);
    if (arg13 != 0)
    {
        arg_1e0 = arg13;
        operator delete(arg13);
    }
    feasibal_region::RunOutputParam::~RunOutputParam();
    feasibal_region::RunInputParam::~RunInputParam();
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_18d84(int64_t arg1, int64_t arg2 @ x26, int64_t arg3 @ x27, int64_t arg4, int64_t arg5, int64_t arg6, char arg7, void* arg8, void* arg9, void* arg10, void* arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, int32_t arg17, int64_t arg18, int64_t arg19, void* arg20, int32_t arg21, int64_t arg22, int64_t arg23, void* arg24, int32_t arg25, int64_t arg26, int64_t arg27, void* arg28, int32_t arg29, int64_t arg30, int64_t arg31, void* arg32, int32_t arg33, int64_t arg34, int64_t arg35, void* arg36, int32_t arg37, int64_t arg38, int64_t arg39, void* arg40) __noreturn
{
    if ((arg15 & 1) != 0)
    {
        operator delete(arg16);
    }
    if ((((arg15 & 1) == 0 && (arg13 & 1) != 0) || ((arg15 & 1) != 0 && (arg13 & 1) != 0)))
    {
        operator delete(arg14);
        if ((arg7 & 1) != 0)
        {
            goto label_18ff8;
        }
    }
    if (((((arg15 & 1) == 0 && (arg13 & 1) == 0) || ((arg15 & 1) != 0 && (arg13 & 1) == 0)) && (arg7 & 1) != 0))
    {
    label_18ff8:
        operator delete(arg8);
    }
    if (arg18 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg18 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg18 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg18 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg17 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg19 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg17);
    }
    if (arg20 != &arg_700)
    {
        cv::fastFree(arg20);
    }
    if (arg22 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg22 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg22 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg22 = 0;
    __builtin_memset(&s_1, 0, 0x20);
    if (arg21 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg23 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg21);
    }
    if (arg24 != arg3)
    {
        cv::fastFree(arg24);
    }
    if (arg9 != 0)
    {
        arg_140 = arg9;
        operator delete(arg9);
    }
    if (arg10 != 0)
    {
        arg_158 = arg10;
        operator delete(arg10);
    }
    ground_filter::Plane_Seg::~Plane_Seg();
    if (arg26 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg26 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg26 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg26 = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (arg25 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg27 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg25);
    }
    if (arg28 != arg2)
    {
        cv::fastFree(arg28);
    }
    sub_1fd5c(&arg_168);
    sub_1fd5c(&arg_180);
    int64_t x8_17;
    if (arg11 == 0)
    {
        x8_17 = arg30;
    }
    else
    {
        arg_1a0 = arg11;
        operator delete(arg11);
        x8_17 = arg30;
    }
    if (((arg11 == 0 && x8_17 != 0) || (arg11 != 0 && x8_17 != 0)))
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((x8_17 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (x8_17 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg30 = 0;
    __builtin_memset(&s_3, 0, 0x20);
    if (arg29 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg31 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg29);
    }
    if (arg32 != arg4)
    {
        cv::fastFree(arg32);
    }
    if (arg34 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((arg34 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (arg34 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg34 = 0;
    __builtin_memset(&s_4, 0, 0x20);
    if (arg33 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg35 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg33);
    }
    if (arg36 != arg6)
    {
        cv::fastFree(arg36);
    }
    if (arg38 != 0)
    {
        int32_t temp0_7;
        int32_t i_10;
        do
        {
            temp0_7 = __ldaxr((arg38 + 0x14));
            i_10 = __stlxr((temp0_7 - 1), (arg38 + 0x14));
        } while (i_10 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg38 = 0;
    __builtin_memset(&s_5, 0, 0x20);
    if (arg37 >= 1)
    {
        int64_t i_11 = 0;
        do
        {
            *(arg39 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < arg37);
    }
    if (arg40 != arg5)
    {
        cv::fastFree(arg40);
    }
    sub_1fd5c(&arg_1c0);
    if (arg12 != 0)
    {
        arg_1e0 = arg12;
        operator delete(arg12);
    }
    feasibal_region::RunOutputParam::~RunOutputParam();
    feasibal_region::RunInputParam::~RunInputParam();
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

int64_t sub_18dc8(int64_t arg1, int64_t arg2 @ x26, int64_t arg3 @ x27, int64_t arg4, int64_t arg5, int64_t arg6, char arg7, void* arg8, void* arg9, void* arg10, void* arg11, void* arg12, char arg13, int64_t arg14, int32_t arg15, int64_t arg16, int64_t arg17, void* arg18, int32_t arg19, int64_t arg20, int64_t arg21, void* arg22, int32_t arg23, int64_t arg24, int64_t arg25, void* arg26, int32_t arg27, int64_t arg28, int64_t arg29, void* arg30, int32_t arg31, int64_t arg32, int64_t arg33, void* arg34, int32_t arg35, int64_t arg36, int64_t arg37, void* arg38)
{
    if ((arg13 & 1) != 0)
    {
        /* tailcall */
        return sub_18dfc(arg14);
    }
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    if (arg16 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg16 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg16 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg16 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg15 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg17 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg15);
    }
    if (arg18 != &arg_700)
    {
        cv::fastFree(arg18);
    }
    if (arg20 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg20 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg20 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg20 = 0;
    __builtin_memset(&s_1, 0, 0x20);
    if (arg19 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg21 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg19);
    }
    if (arg22 != arg3)
    {
        cv::fastFree(arg22);
    }
    if (arg9 != 0)
    {
        arg_140 = arg9;
        operator delete(arg9);
    }
    if (arg10 != 0)
    {
        arg_158 = arg10;
        operator delete(arg10);
    }
    ground_filter::Plane_Seg::~Plane_Seg();
    if (arg24 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg24 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg24 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg24 = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (arg23 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg25 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg23);
    }
    if (arg26 != arg2)
    {
        cv::fastFree(arg26);
    }
    sub_1fd5c(&arg_168);
    sub_1fd5c(&arg_180);
    int64_t x8_15;
    if (arg11 == 0)
    {
        x8_15 = arg28;
    }
    else
    {
        arg_1a0 = arg11;
        operator delete(arg11);
        x8_15 = arg28;
    }
    if (((arg11 == 0 && x8_15 != 0) || (arg11 != 0 && x8_15 != 0)))
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((x8_15 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (x8_15 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg28 = 0;
    __builtin_memset(&s_3, 0, 0x20);
    if (arg27 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg29 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg27);
    }
    if (arg30 != arg4)
    {
        cv::fastFree(arg30);
    }
    if (arg32 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((arg32 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (arg32 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg32 = 0;
    __builtin_memset(&s_4, 0, 0x20);
    if (arg31 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg33 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg31);
    }
    if (arg34 != arg6)
    {
        cv::fastFree(arg34);
    }
    if (arg36 != 0)
    {
        int32_t temp0_7;
        int32_t i_10;
        do
        {
            temp0_7 = __ldaxr((arg36 + 0x14));
            i_10 = __stlxr((temp0_7 - 1), (arg36 + 0x14));
        } while (i_10 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg36 = 0;
    __builtin_memset(&s_5, 0, 0x20);
    if (arg35 >= 1)
    {
        int64_t i_11 = 0;
        do
        {
            *(arg37 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < arg35);
    }
    if (arg38 != arg5)
    {
        cv::fastFree(arg38);
    }
    sub_1fd5c(&arg_1c0);
    if (arg12 != 0)
    {
        arg_1e0 = arg12;
        operator delete(arg12);
    }
    feasibal_region::RunOutputParam::~RunOutputParam();
    feasibal_region::RunInputParam::~RunInputParam();
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_18e0c(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_19078(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_19328(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_194ec(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t feasibal_region::RunInputParam::RunInputParam(int32_t* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x20 + 0x28);
    *arg1 = 0x42ff0000;
    *(arg1 + 4) = {0};
    __builtin_memset(&arg1[5], 0, 0x2c);
    *(arg1 + 0x50) = 0;
    *(arg1 + 0x58) = 0;
    *(arg1 + 0x40) = &arg1[2];
    *(arg1 + 0x48) = &arg1[0x14];
    arg1[0x18] = 0x42ff0000;
    *(arg1 + 0x64) = {0};
    __builtin_memset(&arg1[0x1d], 0, 0x2c);
    *(arg1 + 0xb0) = 0;
    *(arg1 + 0xb8) = 0;
    *(arg1 + 0xa0) = &arg1[0x1a];
    *(arg1 + 0xa8) = &arg1[0x2c];
    arg1[0x30] = 0x42ff0000;
    __builtin_memset(&arg1[0x31], 0, 0x3c);
    *(arg1 + 0x100) = &arg1[0x32];
    __builtin_memset(&arg1[0x44], 0, 0x18);
    *(arg1 + 0x108) = &arg1[0x44];
    arg1[0x4a] = 0x43480000;
    cv::Mat::eye(3, 3, 6);
    int64_t* var_1d0;
    *(*var_1d0 + 0x18)();
    int64_t x0_1 = cv::MatExpr::~MatExpr();
    if (*(x20 + 0x28) != x9)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int128_t* cv::Mat::operator=(int128_t* arg1, int128_t* arg2)
{
    if (arg1 != arg2)
    {
        int64_t x8_1 = *(arg1 + 0x38);
        if (x8_1 != 0)
        {
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_1 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int32_t x8_3 = *(arg1 + 4);
        int128_t v0;
        v0 = 0;
        *v0[8] = 0;
        *(arg1 + 0x38) = 0;
        __builtin_memset(&arg1[1], 0, 0x20);
        if (x8_3 >= 1)
        {
            int64_t x8_4 = arg1[4];
            int64_t i_1 = 0;
            do
            {
                *(x8_4 + (i_1 << 2)) = 0;
                i_1 = (i_1 + 1);
            } while (i_1 < *(arg1 + 4));
        }
        void* x0_1 = *(arg1 + 0x48);
        *arg1 = *arg2;
        arg1[1] = arg2[1];
        arg1[2] = arg2[2];
        arg1[3] = arg2[3];
        if (x0_1 != &arg1[5])
        {
            cv::fastFree(x0_1);
            x0_1 = &arg1[5];
            arg1[4] = (arg1 + 8);
            *(arg1 + 0x48) = &arg1[5];
        }
        if (*(arg2 + 4) > 2)
        {
            arg1[4] = arg2[4];
            arg2[4] = (arg2 + 8);
            *(arg2 + 0x48) = &arg2[5];
        }
        else
        {
            int64_t* x9_3 = *(arg2 + 0x48);
            *x0_1 = *x9_3;
            *(x0_1 + 8) = x9_3[1];
        }
        *arg2 = 0x42ff0000;
        __builtin_memset((arg2 + 4), 0, 0x3c);
    }
    return arg1;
}

int64_t* checktool::getExtrinsicParameters(int64_t arg1, int64_t* arg2, int64_t* arg3, cv::Mat* arg4 @ x8)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t var_88 = 0;
    int32_t var_80 = 0;
    void* x10 = *arg2;
    int64_t x8_1 = arg2[1];
    void* x8_2;
    uint128_t v0;
    int64_t v1;
    double v3;
    int128_t v4;
    int128_t v2;
    if (x8_1 == x10)
    {
        x8_2 = *arg3;
        v2 = 0;
        v4 = 0.0;
        v3 = 0f;
        v0 = 0.0;
        v1 = 0.0;
    }
    else
    {
        x8_2 = *arg3;
        int64_t i = 0;
        int32_t* x10_1 = (x10 + 8);
        v0 = 0;
        *v0[8] = 0;
        v2 = 0;
        v1 = 0.0;
        int64_t* x12_1 = (x8_2 + 0x10);
        v3 = 0f;
        do
        {
            v4 = *(x10_1 - 8);
            double v5;
            v5 = *x10_1;
            x10_1 = &x10_1[3];
            int128_t* x13_1 = *x12_1;
            x12_1 = &x12_1[0xc];
            /* unimplemented  {fcvtl v2.2d, v2.2s} */;
            /* unimplemented  {fcvtl v4.2d, v4.2s} */;
            v0 = (v0 + v4);
            *v0[8] = (*v0[8] + *v4[8]);
            v4 = *x13_1;
            i = (i + 1);
            v2 = (v4 + v2);
            *v2[8] = (*v4[8] + *v2[8]);
            v4 = x13_1[1];
            v1 = (v1 + v5);
            /* unimplemented  {fcvtn v2.2s, v2.2d} */;
            v3 = (v4 + v3);
        } while (i < (((x8_1 - x10) >> 2) * -0x5555555555555555));
        v4 = vdupd_laneq_s64(v0, 1);
        int64_t var_88_1 = v2;
        int32_t var_80_1 = v3;
    }
    uint64_t x8_5 = (((arg3[1] - x8_2) >> 5) * -0x5555555555555555);
    int32_t var_f0 = 0x42ff0000;
    int128_t s_4;
    __builtin_memset(&s_4, 0, 0x3c);
    double temp0_2 = vcvt_f64_u64(x8_5);
    double v8 = (v0 / temp0_2);
    v0 = vcvth_f16_u16(x8_5);
    double v10 = (v1 / temp0_2);
    v1 = (v3 / v0);
    uint64_t v0_1 = vdup_laneq_s32(v0, 0);
    /* unimplemented  {fdiv v0.2s, v2.2s, v0.2s} */;
    int64_t var_a0;
    int64_t* var_a8 = &var_a0;
    var_a0 = 0;
    int64_t var_98 = 0;
    int32_t var_80_2 = v1;
    int64_t var_238 = 0x300000001;
    int128_t v0_2;
    int128_t v1_1;
    int128_t v2_1;
    v0_2 = cv::Mat::create(&var_f0, &*nullptr->ident.signature[2], &var_238);
    int64_t* s_6 = *s_4[0xc];
    *s_6 = v8;
    s_6[1] = (v4 / temp0_2);
    s_6[2] = v10;
    v0_2 = var_f0;
    int128_t var_c0;
    int64_t x8_6 = *var_c0[8];
    int128_t var_1b0 = v0_2;
    int64_t* s_2 = s_6;
    int128_t var_dc;
    int128_t var_198 = var_dc;
    int128_t var_cc;
    int128_t var_188 = var_cc;
    int64_t var_160;
    int64_t* var_168 = &var_160;
    var_160 = 0;
    int64_t var_158 = 0;
    int32_t x8_8;
    if (x8_6 == 0)
    {
        x8_8 = v0_2;
    }
    else
    {
        int32_t i_1;
        do
        {
            i_1 = __stlxr((__ldaxr((x8_6 + 0x14)) + 1), (x8_6 + 0x14));
        } while (i_1 != 0);
        x8_8 = s_4;
    }
    if (x8_8 > 2)
    {
        *var_1b0[4] = 0;
        cv::Mat::copySize(&var_1b0);
    }
    else
    {
        *var_168 = *var_a8;
        var_168[1] = var_a8[1];
    }
    eulerAnglestoRotationMtx(&var_1b0);
    if (x8_6 != 0)
    {
        int32_t temp0_5;
        int32_t i_2;
        do
        {
            temp0_5 = __ldaxr((x8_6 + 0x14));
            i_2 = __stlxr((temp0_5 - 1), (x8_6 + 0x14));
        } while (i_2 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int64_t var_178_1 = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (*var_1b0[4] >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *((&var_1b0 | 8) + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *var_1b0[4]);
    }
    if (var_168 != &var_160)
    {
        cv::fastFree(var_168);
    }
    int32_t var_210 = 0x42ff0000;
    int128_t s;
    __builtin_memset(&s, 0, 0x20);
    int128_t s_1;
    __builtin_memset(&s_1, 0, 0x3c);
    int64_t var_1c0;
    int64_t* var_1c8 = &var_1c0;
    var_1c0 = 0;
    int64_t var_1b8 = 0;
    var_238 = 0x400000004;
    cv::Mat::create(&var_210, &*nullptr->ident.signature[2], &var_238);
    int128_t v0_3;
    int128_t v1_2;
    v0_3 = cv::Mat::operator=(&var_210);
    int64_t* s_3;
    int64_t* s_5 = s_3;
    int64_t* x10_7 = *s_1[0xc];
    int64_t* var_108;
    int64_t x9_10 = *var_108;
    int64_t x11_4 = *var_1c8;
    *x10_7 = *s_5;
    void* x14 = (x10_7 + x11_4);
    x10_7[1] = s_5[1];
    x10_7[2] = s_5[2];
    v0_3 = v0_1;
    void* x12_5 = (s_5 + x9_10);
    void* x8_15 = (s_5 + (x9_10 << 1));
    v0_3 = v0_3;
    x10_7[3] = v0_3;
    *x14 = *x12_5;
    *(x14 + 8) = *(x12_5 + 8);
    int64_t x13_4 = (x11_4 << 1);
    *(x14 + 0x10) = *(x12_5 + 0x10);
    v0_3 = *v0_1[4];
    void* x14_1 = (x10_7 + x13_4);
    v0_3 = v0_3;
    *(&x10_7[3] + x11_4) = v0_3;
    *x14_1 = *x8_15;
    *(x14_1 + 8) = *(x8_15 + 8);
    *(x14_1 + 0x10) = *(x8_15 + 0x10);
    v0_3 = var_80_2;
    v0_3 = v0_3;
    *(&x10_7[3] + x13_4) = v0_3;
    *((x10_7 + (x13_4 + x11_4)) + 0x18) = 0x3ff0000000000000;
    v0_3 = var_210;
    int128_t var_1e0;
    int64_t x8_17 = *var_1e0[8];
    int128_t var_1fc;
    *(arg4 + 0x18) = var_1fc;
    *(arg4 + 0x10) = x10_7;
    *arg4 = v0_3;
    int128_t var_1ec;
    *(arg4 + 0x28) = var_1ec;
    *(arg4 + 0x50) = 0;
    *(arg4 + 0x40) = (arg4 + 8);
    *(arg4 + 0x48) = (arg4 + 0x50);
    *(arg4 + 0x38) = x8_17;
    *(arg4 + 0x58) = 0;
    int32_t x8_19;
    if (x8_17 == 0)
    {
        x8_19 = v0_3;
    }
    else
    {
        int32_t i_4;
        do
        {
            i_4 = __stlxr((__ldaxr((x8_17 + 0x14)) + 1), (x8_17 + 0x14));
        } while (i_4 != 0);
        x8_19 = s_1;
    }
    if (x8_19 > 2)
    {
        *(arg4 + 4) = 0;
        cv::Mat::copySize(arg4);
    }
    else
    {
        int64_t* x10_10 = *(arg4 + 0x48);
        *x10_10 = *var_1c8;
        x10_10[1] = var_1c8[1];
    }
    int64_t x8_22 = *var_1e0[8];
    *(arg4 + 0x60) = 0;
    if (x8_22 != 0)
    {
        int32_t temp0_8;
        int32_t i_5;
        do
        {
            temp0_8 = __ldaxr((x8_22 + 0x14));
            i_5 = __stlxr((temp0_8 - 1), (x8_22 + 0x14));
        } while (i_5 != 0);
        if (temp0_8 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_1e0[8] = 0;
    __builtin_memset(&*s_1[0xc], 0, 0x20);
    if (s_1 >= 1)
    {
        int64_t i_6 = 0;
        do
        {
            *((&var_210 | 8) + (i_6 << 2)) = 0;
            i_6 = (i_6 + 1);
        } while (i_6 < s_1);
    }
    if (var_1c8 != &var_1c0)
    {
        cv::fastFree(var_1c8);
    }
    int64_t var_118;
    if (var_118 != 0)
    {
        int32_t temp0_9;
        int32_t i_7;
        do
        {
            temp0_9 = __ldaxr((var_118 + 0x14));
            i_7 = __stlxr((temp0_9 - 1), (var_118 + 0x14));
        } while (i_7 != 0);
        if (temp0_9 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int64_t var_118_1 = 0;
    __builtin_memset(&s_3, 0, 0x20);
    int32_t var_14c;
    if (var_14c >= 1)
    {
        int64_t i_8 = 0;
        do
        {
            int64_t var_110;
            *(var_110 + (i_8 << 2)) = 0;
            i_8 = (i_8 + 1);
        } while (i_8 < var_14c);
    }
    void var_100;
    if (var_108 != &var_100)
    {
        cv::fastFree(var_108);
    }
    int64_t x8_30 = *var_c0[8];
    if (x8_30 != 0)
    {
        int32_t temp0_10;
        int32_t i_9;
        do
        {
            temp0_10 = __ldaxr((x8_30 + 0x14));
            i_9 = __stlxr((temp0_10 - 1), (x8_30 + 0x14));
        } while (i_9 != 0);
        if (temp0_10 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_c0[8] = 0;
    __builtin_memset(&*s_4[0xc], 0, 0x20);
    if (s_4 >= 1)
    {
        int64_t i_10 = 0;
        do
        {
            *((&var_f0 | 8) + (i_10 << 2)) = 0;
            i_10 = (i_10 + 1);
        } while (i_10 < s_4);
    }
    int64_t* x0_9 = var_a8;
    if (x0_9 != &var_a0)
    {
        x0_9 = cv::fastFree(x0_9);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_9;
}

uint64_t checktool::getNearEdge(int64_t arg1, int64_t* arg2, int32_t arg3)
{
    double v8;
    double var_70 = v8;
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int32_t* s;
    __builtin_memset(&s, 0, 0x18);
    int64_t x8_1 = *arg2;
    int32_t* s_2;
    void* x8_2;
    uint128_t v0;
    if (arg2[1] == x8_1)
    {
        s_2 = nullptr;
        x8_2 = nullptr;
    }
    else
    {
        int64_t i = 0;
        void* var_f0_1;
        do
        {
            int128_t* x1 = (x8_1 + (i * 0x60));
            int128_t var_e0 = *x1;
            int64_t var_d0_1 = x1[1];
            int128_t var_c0_1 = x1[2];
            int64_t var_b0_1 = x1[3];
            int64_t x10_1 = *(x1 + 0x38);
            int64_t var_90;
            int64_t* var_98_1 = &var_90;
            var_90 = 0;
            int64_t var_88_1 = 0;
            if (x10_1 != 0)
            {
                int32_t j;
                do
                {
                    j = __stlxr((__ldaxr((x10_1 + 0x14)) + 1), (x10_1 + 0x14));
                } while (j != 0);
            }
            uint128_t v1;
            uint128_t v2;
            uint128_t v3;
            uint128_t v4;
            if (*(x1 + 4) > 2)
            {
                *var_e0[4] = 0;
                v0 = cv::Mat::copySize(&var_e0);
            }
            else
            {
                int64_t* x8_4 = *((x8_1 + (i * 0x60)) + 0x48);
                *var_98_1 = *x8_4;
                var_98_1[1] = x8_4[1];
            }
            int32_t x12_2 = *var_e0[0xc];
            int32_t var_fc_1 = 0;
            int64_t x9_5 = (*var_e0[8] - 1);
            int32_t x8_8 = 0;
            if (x9_5 != 0)
            {
                v0 = vcvt_f64_s64(x12_2);
                v0 = (v0 * 0.20000000000000001);
                int32_t j_1 = vcvt_s64_f64(v0);
                int64_t j_4 = j_1;
                int64_t x12_4 = (x12_2 - j_1);
                int64_t x15_1;
                if ((j_4 + 1) < x12_4)
                {
                    x15_1 = x12_4;
                }
                else
                {
                    x15_1 = (j_4 + 1);
                }
                int64_t x14_2 = (x15_1 + !(j_4));
                int64_t x13_2 = (x15_1 - j_4);
                int32_t x17_1;
                if ((j_1 + x14_2) < j_1)
                {
                    x17_1 = 1;
                }
                else
                {
                    x17_1 = 0;
                }
                int64_t k_2 = (x13_2 & 0xffffffffffffffe0);
                int32_t x16_2;
                if ((x14_2 >> 0x20) != 0)
                {
                    x16_2 = 1;
                }
                else
                {
                    x16_2 = 0;
                }
                while (x12_4 > j_1)
                {
                    int32_t x2;
                    if (x13_2 < 0x20)
                    {
                        x2 = 1;
                    }
                    else
                    {
                        x2 = 0;
                    }
                    void* x0_3 = (var_d0_1 + (*var_98_1 * x9_5));
                    int32_t x1_2;
                    int64_t j_5;
                    if (((x2 | (x17_1 | x16_2)) & 1) == 0)
                    {
                        v0 = 0;
                        *v0[8] = 0;
                        int64_t k_1 = k_2;
                        int64_t x2_2 = ((j_1 << 0x20) >> 0);
                        v1 = 0;
                        *v1[8] = 0;
                        v4 = 1;
                        *v4[1] = 1;
                        *v4[2] = 1;
                        *v4[3] = 1;
                        *v4[4] = 1;
                        *v4[5] = 1;
                        *v4[6] = 1;
                        *v4[7] = 1;
                        *v4[8] = 1;
                        *v4[9] = 1;
                        *v4[0xa] = 1;
                        *v4[0xb] = 1;
                        *v4[0xc] = 1;
                        *v4[0xd] = 1;
                        *v4[0xe] = 1;
                        *v4[0xf] = 1;
                        int64_t k;
                        do
                        {
                            void* x3_2 = (x0_3 + (x2_2 >> 0x20));
                            v3 = *(x3_2 + 0x10);
                            k = k_1;
                            k_1 = (k_1 - 0x20);
                            x2_2 = (x2_2 + 0x2000000000);
                            v0 = (v0 | !(vceqq_p8(*x3_2, v4)));
                            v1 = (v1 | !(vceqq_p8(v3, v4)));
                        } while (k != 0x20);
                        float128 v0_1 = (v1 | v0);
                        float128 v0_2 = (v0_1 | vextq_f16(v0_1, v0_1, false));
                        float128 v0_3 = (v0_2 | vextq_f16(v0_2, v0_2, false));
                        uint128_t v0_4 = (v0_3 | vextq_f16(v0_3, v0_3, false));
                        x1_2 = vget_lane_u8((v0_4 | vdupq_laneq_s8(v0_4, 1)), 0);
                        j_5 = (k_2 + j_4);
                    }
                    else
                    {
                        x1_2 = 0;
                        j_5 = j_4;
                    }
                    if ((((x2 | (x17_1 | x16_2)) & 1) != 0 || (((x2 | (x17_1 | x16_2)) & 1) == 0 && x13_2 != k_2)))
                    {
                        int64_t x3_3 = (j_5 << 0x20);
                        do
                        {
                            uint32_t x4_2 = *(x0_3 + (x3_3 >> 0x20));
                            j_5 = (j_5 + 1);
                            x3_3 = (x3_3 + 0x100000000);
                            int32_t x4_3;
                            if (x4_2 != 1)
                            {
                                x4_3 = 1;
                            }
                            else
                            {
                                x4_3 = 0;
                            }
                            x1_2 = (x1_2 | x4_3);
                        } while (j_5 < x12_4);
                    }
                    if ((x1_2 & 1) == 0)
                    {
                        break;
                    }
                    x8_8 = (x8_8 + 1);
                    int64_t temp2_1 = x9_5;
                    x9_5 = (x9_5 - 1);
                    int32_t var_fc_2 = x8_8;
                    if (temp2_1 == 1)
                    {
                        break;
                    }
                }
            }
            int32_t* x9_6 = var_f0_1;
            int64_t var_e8;
            int64_t x8_9;
            if (x9_6 == var_e8)
            {
                v0 = std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(&s);
                x8_9 = x10_1;
            }
            else
            {
                *x9_6 = x8_8;
                var_f0_1 = &x9_6[1];
                x8_9 = x10_1;
            }
            if (((x9_6 == var_e8 && x8_9 != 0) || (x9_6 != var_e8 && x8_9 != 0)))
            {
                int32_t temp0_4;
                int32_t j_2;
                do
                {
                    temp0_4 = __ldaxr((x8_9 + 0x14));
                    j_2 = __stlxr((temp0_4 - 1), (x8_9 + 0x14));
                } while (j_2 != 0);
                if (temp0_4 == 1)
                {
                    v0 = cv::Mat::deallocate();
                }
            }
            v0 = 0;
            *v0[8] = 0;
            int64_t var_a8_2 = 0;
            int128_t s_1;
            __builtin_memset(&s_1, 0, 0x20);
            if (*var_e0[4] >= 1)
            {
                int64_t j_3 = 0;
                do
                {
                    *((&var_e0 | 8) + (j_3 << 2)) = 0;
                    j_3 = (j_3 + 1);
                } while (j_3 < *var_e0[4]);
            }
            if (var_98_1 != &var_90)
            {
                v0 = cv::fastFree(var_98_1);
            }
            x8_1 = *arg2;
            i = (i + 1);
        } while (i < (((arg2[1] - x8_1) >> 5) * -0x5555555555555555));
        s_2 = s;
        x8_2 = var_f0_1;
    }
    if (((x8_2 - s_2) >> 2) <= 1)
    {
        v8 = 0.5;
    }
    else
    {
        int32_t* s_4;
        if (s_2 == x8_2)
        {
            s_4 = s_2;
        }
        else
        {
            int32_t* s_5 = &s_2[1];
            s_4 = s_2;
            if (s_5 != x8_2)
            {
                int32_t* s_6 = s_5;
                do
                {
                    int32_t x13_3 = *s_6;
                    s_6 = &s_6[1];
                    if (*s_4 < x13_3)
                    {
                        s_4 = s_5;
                    }
                    s_5 = s_6;
                } while (x8_2 != s_6);
            }
        }
        v0 = *s_4;
        /* unimplemented  {scvtf s0, s0} */;
        v0 = v0;
        v8 = (v0 + 0.5);
    }
    if (((((x8_2 - s_2) >> 2) <= 1 && s_2 != 0) || (((x8_2 - s_2) >> 2) > 1 && s_2 != 0)))
    {
        int32_t* s_3 = s_2;
        operator delete(s_2);
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    v0 = vcvt_f64_s64(arg3);
    v0 = (v8 * v0);
    return vcvt_s64_f64(v0);
}

void checktool::getPointCloud(int64_t arg1, int32_t* arg2, void* arg3, int32_t arg4, int64_t* arg5 @ x8)
{
    double v13;
    double var_80 = v13;
    int64_t v10;
    int64_t var_68 = v10;
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    double v11;
    v11 = *arg2;
    double v12;
    v12 = arg2[1];
    int64_t v8;
    v8 = arg2[2];
    int64_t v9;
    v9 = arg2[3];
    __builtin_memset(arg5, 0, 0x18);
    int32_t x25 = *(arg3 + 8);
    int32_t x23 = *(arg3 + 0xc);
    int32_t x8_2 = ((x23 * x25) / (arg4 * arg4));
    double v0;
    double v1;
    if (x8_2 != 0)
    {
        int64_t x24_1 = x8_2;
        if ((x24_1 & 0x80000000) != 0)
        {
            sub_20e70();
            /* no return */
        }
        arg1 = operator new((x24_1 * 0xc));
        *arg5 = arg1;
        arg5[1] = arg1;
        arg5[2] = (arg1 + (x24_1 * 0xc));
    }
    if (x25 >= 1)
    {
        int64_t i = 0;
        int64_t x21_1 = arg4;
        do
        {
            if (x23 >= 1)
            {
                v0 = vcvts_f32_s32(i);
                v0 = (v0 - v9);
                int64_t j = 0;
                v13 = v0;
                do
                {
                    int64_t* x8_5 = *(arg3 + 0x48);
                    int64_t x9_1 = *(arg3 + 0x10);
                    v1 = vcvts_f32_s32(j);
                    v1 = (v1 - v8);
                    v0 = *((x9_1 + (i * *x8_5)) + (j << 1));
                    int32_t* x8_8 = arg5[1];
                    int64_t x9_2 = arg5[2];
                    v0 = (vcvt_f64_u64(v0) * 0.001);
                    double v2 = (v0 * v13);
                    float v3 = v0;
                    v0 = ((v0 * v1) / v11);
                    v1 = (v2 / v12);
                    int32_t var_98_1 = v0;
                    if (x8_8 == x9_2)
                    {
                        arg1 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(arg5);
                        x23 = *(arg3 + 0xc);
                    }
                    else
                    {
                        *x8_8 = v0;
                        x8_8[1] = v1;
                        x8_8[2] = v3;
                        arg5[1] = &x8_8[3];
                    }
                    j = (j + x21_1);
                } while (j < x23);
                x25 = *(arg3 + 8);
            }
            i = (i + x21_1);
        } while (i < x25);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int128_t arg2 @ v0, int128_t arg3 @ v8)
{
    int64_t var_50 = arg3;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x21_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x21_1 + 0x90);
        int64_t x22_1 = *(x21_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x21_1 + 0x90) = x3_1;
        }
        if (*(*x0_3 + 0x40)(x0_3, x22_1, x21_1, x3_1, arg2) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    arg3 = var_50;
    return arg1;
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        if (*(*x0_3 + 0x18)(x0_3, x23_1, x22_1, x3_1, (arg2 & 1)) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

void* getColorDepthImage(void* arg1, int32_t arg2, int32_t arg3, int32_t* arg4 @ x8)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t x8_2 = **(arg1 + 0x40);
    *arg4 = 0x42ff0000;
    *(arg4 + 4) = {0};
    __builtin_memset(&arg4[5], 0, 0x2c);
    *(arg4 + 0x50) = 0;
    int128_t s;
    __builtin_memset(&s, 0, 0x18);
    *(arg4 + 0x40) = &arg4[2];
    *(arg4 + 0x48) = &arg4[0x14];
    *(arg4 + 0x58) = 0;
    int64_t var_98 = x8_2;
    cv::Mat::create(arg4, &*nullptr->ident.signature[2], &var_98);
    cv::Mat::operator=(arg4);
    __builtin_memset(&s, 0, 0x18);
    if (arg3 >= arg2)
    {
        int32_t x27_1 = 0;
        int64_t x9_1 = 0;
        int32_t* x8_3 = nullptr;
        int32_t x28_1 = arg2;
        while (true)
        {
            int32_t x10_1 = (x27_1 / (arg3 - arg2));
            var_98 = x10_1;
            if (x8_3 == x9_1)
            {
                std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(&s);
                if (x28_1 >= arg3)
                {
                    break;
                }
            }
            else
            {
                *x8_3 = x10_1;
                *s[8] = &x8_3[1];
                if (x28_1 >= arg3)
                {
                    break;
                }
            }
            x8_3 = *s[8];
            int64_t var_80;
            x9_1 = var_80;
            x28_1 = (x28_1 + 1);
            x27_1 = (x27_1 + 0xff);
        }
    }
    int32_t x11 = *(arg1 + 8);
    if (x11 > 0)
    {
        int64_t x13_1 = *(arg1 + 0xc);
        int64_t i = 0;
        do
        {
            if (x13_1 >= 1)
            {
                int64_t x11_1 = 0;
                int64_t x12_1 = 0;
                do
                {
                    int64_t x13_6 = (*((*(arg1 + 0x10) + (i * **(arg1 + 0x48))) + (x12_1 << 1)) - arg2);
                    char x13_9;
                    int64_t x14_2;
                    if ((x13_6 & 0x80000000) == 0)
                    {
                        x14_2 = s;
                        if (x13_6 < ((*s[8] - x14_2) >> 2))
                        {
                            int32_t* x13_8 = (colormap + (*(x14_2 + (x13_6 << 2)) * 0xc));
                            (*(arg4 + 0x10) + (i * **(arg4 + 0x48)))[x11_1] = *x13_8;
                            *(((*(arg4 + 0x10) + (i * **(arg4 + 0x48))) + x11_1) + 1) = x13_8[1];
                            x13_9 = x13_8[2];
                        }
                    }
                    if (((x13_6 & 0x80000000) != 0 || ((x13_6 & 0x80000000) == 0 && x13_6 >= ((*s[8] - x14_2) >> 2))))
                    {
                        x13_9 = 0;
                        (*(arg4 + 0x10) + (i * **(arg4 + 0x48)))[x11_1] = 0;
                        *(((*(arg4 + 0x10) + (i * **(arg4 + 0x48))) + x11_1) + 1) = 0;
                    }
                    x12_1 = (x12_1 + 1);
                    *(((*(arg4 + 0x10) + (i * **(arg4 + 0x48))) + x11_1) + 2) = x13_9;
                    x13_1 = *(arg1 + 0xc);
                    x11_1 = (x11_1 + 3);
                } while (x12_1 < x13_1);
                x11 = *(arg1 + 8);
            }
            i = (i + 1);
        } while (i < x11);
    }
    void* x0_3 = s;
    if (x0_3 != 0)
    {
        *s[8] = x0_3;
        x0_3 = operator delete(x0_3);
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_3;
}

int64_t checktool::saveResults(void* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    char var_3e8;
    sub_20140(arg2, "PreParamInfo.json", &var_3e8);
    int64_t s_14;
    __builtin_memset(&s_14, 0, 0x18);
    cv::Mat var_420;
    cv::FileStorage::FileStorage(&var_420, &var_3e8, &*nullptr->ident.signature[1]);
    void* s_15;
    if ((s_14 & 1) != 0)
    {
        operator delete(s_15);
    }
    int64_t x24 = (&s_14 | 8);
    s_14 = 0x42ff0000;
    __builtin_memset(&*s_14[4], 0, 0x3c);
    int32_t var_1c0 = 0x42ff0000;
    int128_t s_11;
    __builtin_memset(&s_11, 0, 0x3c);
    int64_t var_c0 = x24;
    int64_t var_b0;
    int64_t* var_b8 = &var_b0;
    var_b0 = 0;
    int64_t var_a8 = 0;
    void* var_180 = &*s_11[4];
    int64_t var_170;
    int64_t* var_178 = &var_170;
    int64_t var_168 = 0;
    var_170 = 0;
    int64_t var_3d0 = 0x300000001;
    int64_t* var_460 = &var_b0;
    int128_t v1;
    int128_t v2;
    int128_t v3;
    v1 = cv::Mat::create(&var_1c0, &*nullptr->ident.signature[2], &var_3d0);
    uint64_t x10 = s_11;
    int32_t* var_220 = &var_1c0;
    int32_t* x8_5;
    if (x10 < 1)
    {
        x8_5 = nullptr;
    }
    else
    {
        x8_5 = var_178[(x10 - 1)];
    }
    uint32_t x9_2 = *var_1c0[1];
    int32_t* var_218 = x8_5;
    void* s_10;
    __builtin_memset(&s_10, 0, 0x18);
    int64_t s_64;
    int64_t var_200_1;
    int32_t var_1b8;
    int32_t var_1b4;
    int64_t s_12;
    if ((x9_2 & 0x40) != 0)
    {
        int64_t s_33 = s_12;
        s_64 = s_33;
        int64_t x13_1;
        if (x10 < 3)
        {
            x13_1 = (var_1b4 * var_1b8);
        }
        else
        {
            int64_t i_80;
            if (x10 != 3)
            {
                i_80 = (x10 & 0xfffffffc);
                v1 = 1;
                *v1[8] = 1;
                void* x13_2 = (var_180 + 8);
                int64_t i_72 = i_80;
                int128_t v0_1 = v1;
                int64_t i;
                do
                {
                    v2 = *(x13_2 - 8);
                    v3 = *x13_2;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_2 = v1;
                    int64_t x0_5 = (v0_1 * v1);
                    int64_t x15_2 = (v1 * v0_1);
                    v1 = (v1 * v0_1);
                    int64_t x16_3 = (v0_1 * x2_2);
                    v0_1 = x0_5;
                    i = i_72;
                    i_72 = (i_72 - 4);
                    *v1[8] = x15_2;
                    *v0_1[8] = x16_3;
                    x13_2 = (x13_2 + 0x10);
                } while (i != 4);
                x13_1 = ((v0_1 * v1) * (v0_1 * v1));
            }
            else
            {
                i_80 = 0;
                x13_1 = 1;
            }
            if ((x10 == 3 || (x10 != 3 && i_80 != x10)))
            {
                int64_t i_64 = (x10 - i_80);
                void* x11_3 = (var_180 + (i_80 << 2));
                int64_t i_1;
                do
                {
                    int64_t x12_1 = *x11_3;
                    x11_3 = (x11_3 + 4);
                    i_1 = i_64;
                    i_64 = (i_64 - 1);
                    x13_1 = (x13_1 * x12_1);
                } while (i_1 != 1);
            }
        }
        var_200_1 = (s_33 + (x13_1 * x8_5));
    }
    cv::MatConstIterator::seek(&var_220, false);
    int64_t* s_17 = s_10;
    *s_17 = 0x4049000000000000;
    int32_t* x1_2 = var_220;
    if (x1_2 != 0)
    {
        void* s_34 = (s_17 + var_218);
        s_10 = s_34;
        if (s_34 >= var_200_1)
        {
            s_10 = s_17;
            cv::MatConstIterator::seek(&var_220, true);
            x1_2 = var_220;
            s_17 = s_10;
        }
        else
        {
            s_17 = s_34;
        }
    }
    int32_t* x9_4 = var_218;
    int32_t* var_280 = x1_2;
    int64_t* s_9 = s_17;
    int64_t s_81 = s_64;
    *s_17 = 0x4049000000000000;
    if (x1_2 == 0)
    {
        *s_17 = 0x4034000000000000;
    }
    else
    {
        void* s_35 = (s_17 + x9_4);
        s_9 = s_35;
        if (s_35 >= var_200_1)
        {
            s_9 = s_17;
            cv::MatConstIterator::seek(&var_280, true);
            s_35 = s_9;
            x1_2 = var_280;
        }
        *s_35 = 0x4034000000000000;
        if (x1_2 != 0)
        {
            void* s_18 = (s_35 + x9_4);
            s_9 = s_18;
            if (s_18 >= var_200_1)
            {
                s_9 = s_35;
                cv::MatConstIterator::seek(&var_280, true);
            }
        }
    }
    int32_t var_160;
    int64_t x27 = (&var_160 | 8);
    int128_t s_13;
    __builtin_memset(&s_13, 0, 0x3c);
    int64_t var_110;
    int64_t* var_118 = &var_110;
    int64_t var_108 = 0;
    var_110 = 0;
    var_160 = 0x42ff0006;
    int128_t v0_2;
    int128_t v1_1;
    int128_t v2_1;
    int128_t v3_1;
    v0_2 = cv::Mat_<double>::operator=(&var_160);
    int128_t var_d0;
    int64_t x8_8 = *var_d0[8];
    if (x8_8 != 0)
    {
        int32_t temp0_1;
        int32_t i_2;
        do
        {
            temp0_1 = __ldaxr((x8_8 + 0x14));
            i_2 = __stlxr((temp0_1 - 1), (x8_8 + 0x14));
        } while (i_2 != 0);
        if (temp0_1 == 1)
        {
            v0_2 = cv::Mat::deallocate();
        }
    }
    v0_2 = 0;
    *v0_2[8] = 0;
    *var_d0[8] = 0;
    __builtin_memset(&s_15, 0, 0x20);
    if (*s_14[4] >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(var_c0 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *s_14[4]);
    }
    v0_2 = var_160;
    s_14 = v0_2;
    s_15 = s_13;
    int128_t var_14c;
    int128_t var_e0 = var_14c;
    int128_t var_130;
    int128_t var_d0_1 = var_130;
    int32_t x9_7;
    if (var_b8 == &var_b0)
    {
        x9_7 = v0_2;
    }
    else
    {
        cv::fastFree(var_b8);
        x9_7 = s_13;
        var_c0 = x24;
        var_b8 = &var_b0;
    }
    int64_t* x0_12;
    if (x9_7 > 2)
    {
        x0_12 = &var_110;
        int64_t* var_118_1 = &var_110;
        int64_t var_120_1 = x27;
        var_c0 = x27;
    }
    else
    {
        x0_12 = var_118;
        var_b0 = *x0_12;
        int64_t var_a8_1 = x0_12[1];
    }
    var_160 = 0x42ff0000;
    __builtin_memset((&var_160 | 4), 0, 0x34);
    *var_130[8] = 0;
    __builtin_memset(&*s_13[0xc], 0, 0x20);
    if (x0_12 != &var_110)
    {
        cv::fastFree(x0_12);
    }
    int128_t var_190;
    int64_t x8_13 = *var_190[8];
    if (x8_13 != 0)
    {
        int32_t temp0_2;
        int32_t i_4;
        do
        {
            temp0_2 = __ldaxr((x8_13 + 0x14));
            i_4 = __stlxr((temp0_2 - 1), (x8_13 + 0x14));
        } while (i_4 != 0);
        if (temp0_2 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_190[8] = 0;
    __builtin_memset(&s_12, 0, 0x20);
    if (s_11 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(var_180 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < s_11);
    }
    if (var_178 != &var_170)
    {
        cv::fastFree(var_178);
    }
    int32_t x8_46 = *(arg1 + 0x350);
    void** s_3 = &s_15;
    if (x8_46 == 0)
    {
        var_1c0 = 0x42ff0000;
        __builtin_memset(&s_11, 0, 0x3c);
        void* var_180_2 = &*s_11[4];
        int64_t* var_178_2 = &var_170;
        int64_t var_168_2 = 0;
        var_170 = 0;
        var_3d0 = 0x300000001;
        int128_t v1_3;
        int128_t v2_3;
        int128_t v3_3;
        v1_3 = cv::Mat::create(&var_1c0, &*nullptr->ident.signature[2], &var_3d0);
        uint64_t x10_12 = s_11;
        var_220 = &var_1c0;
        int32_t* x8_20;
        if (x10_12 < 1)
        {
            x8_20 = nullptr;
        }
        else
        {
            x8_20 = var_178_2[(x10_12 - 1)];
        }
        uint32_t x9_13 = *var_1c0[1];
        var_218 = x8_20;
        __builtin_memset(&s_10, 0, 0x18);
        int64_t s_66;
        if ((x9_13 & 0x40) != 0)
        {
            int64_t s_37 = s_12;
            s_66 = s_37;
            int64_t x13_6;
            if (x10_12 < 3)
            {
                x13_6 = (var_1b4 * var_1b8);
            }
            else
            {
                int64_t i_82;
                if (x10_12 != 3)
                {
                    i_82 = (x10_12 & 0xfffffffc);
                    v1_3 = 1;
                    *v1_3[8] = 1;
                    void* x13_10 = (var_180_2 + 8);
                    int64_t i_74 = i_82;
                    int128_t v0_4 = v1_3;
                    int64_t i_6;
                    do
                    {
                        v2_3 = *(x13_10 - 8);
                        v3_3 = *x13_10;
                        /* unimplemented  {sxtl v0.2d, v2.2s} */;
                        /* unimplemented  {sxtl v1.2d, v3.2s} */;
                        int64_t x2_16 = v1_3;
                        int64_t x0_27 = (v0_4 * v1_3);
                        int64_t x15_10 = (v1_3 * v0_4);
                        v1_3 = (v1_3 * v0_4);
                        int64_t x16_11 = (v0_4 * x2_16);
                        v0_4 = x0_27;
                        i_6 = i_74;
                        i_74 = (i_74 - 4);
                        *v1_3[8] = x15_10;
                        *v0_4[8] = x16_11;
                        x13_10 = (x13_10 + 0x10);
                    } while (i_6 != 4);
                    x13_6 = ((v0_4 * v1_3) * (v0_4 * v1_3));
                }
                else
                {
                    i_82 = 0;
                    x13_6 = 1;
                }
                if ((x10_12 == 3 || (x10_12 != 3 && i_82 != x10_12)))
                {
                    int64_t i_66 = (x10_12 - i_82);
                    void* x11_11 = (var_180_2 + (i_82 << 2));
                    int64_t i_7;
                    do
                    {
                        int64_t x12_3 = *x11_11;
                        x11_11 = (x11_11 + 4);
                        i_7 = i_66;
                        i_66 = (i_66 - 1);
                        x13_6 = (x13_6 * x12_3);
                    } while (i_7 != 1);
                }
            }
            var_200_1 = (s_37 + (x13_6 * x8_20));
        }
        cv::MatConstIterator::seek(&var_220, false);
        void* s_21 = s_10;
        *s_21 = 0x4049000000000000;
        int32_t* x1_8 = var_220;
        if (x1_8 != 0)
        {
            void* s_40 = (s_21 + var_218);
            s_10 = s_40;
            if (s_40 >= var_200_1)
            {
                s_10 = s_21;
                cv::MatConstIterator::seek(&var_220, true);
                x1_8 = var_220;
                s_21 = s_10;
            }
            else
            {
                s_21 = s_40;
            }
        }
        int32_t* x9_22 = var_218;
        var_280 = x1_8;
        s_9 = s_21;
        int64_t s_83 = s_66;
        *s_21 = 0x4049000000000000;
        if (x1_8 == 0)
        {
            *s_21 = 0x4034000000000000;
        }
        else
        {
            void* s_41 = (s_21 + x9_22);
            s_9 = s_41;
            if (s_41 >= var_200_1)
            {
                s_9 = s_21;
                cv::MatConstIterator::seek(&var_280, true);
                s_41 = s_9;
                x1_8 = var_280;
            }
            *s_41 = 0x4034000000000000;
            if (x1_8 != 0)
            {
                void* s_22 = (s_41 + x9_22);
                s_9 = s_22;
                if (s_22 >= var_200_1)
                {
                    s_9 = s_41;
                    cv::MatConstIterator::seek(&var_280, true);
                }
            }
        }
        int64_t x27_2 = (&var_160 | 8);
        __builtin_memset(&s_13, 0, 0x3c);
        int64_t* var_118_4 = &var_110;
        int64_t var_108_2 = 0;
        var_110 = 0;
        var_160 = 0x42ff0006;
        int128_t v1_5;
        int128_t v2_5;
        int128_t v3_5;
        v0_2 = cv::Mat_<double>::operator=(&var_160);
        int64_t x8_36 = *var_d0_1[8];
        if (x8_36 != 0)
        {
            int32_t temp0_5;
            int32_t i_8;
            do
            {
                temp0_5 = __ldaxr((x8_36 + 0x14));
                i_8 = __stlxr((temp0_5 - 1), (x8_36 + 0x14));
            } while (i_8 != 0);
            if (temp0_5 == 1)
            {
                v0_2 = cv::Mat::deallocate();
            }
        }
        v0_2 = 0;
        *v0_2[8] = 0;
        *var_d0_1[8] = 0;
        __builtin_memset(s_3, 0, 0x20);
        if (*s_14[4] >= 1)
        {
            int64_t i_9 = 0;
            do
            {
                *(var_c0 + (i_9 << 2)) = 0;
                i_9 = (i_9 + 1);
            } while (i_9 < *s_14[4]);
        }
        v0_2 = var_160;
        s_14 = v0_2;
        s_15 = s_13;
        int128_t var_e0_2 = var_14c;
        int128_t var_130_2;
        var_d0_1 = var_130_2;
        int32_t x9_25;
        if (var_b8 == &var_b0)
        {
            x9_25 = v0_2;
        }
        else
        {
            cv::fastFree(var_b8);
            x9_25 = s_13;
            var_c0 = x24;
            var_b8 = &var_b0;
        }
        int64_t* x0_34;
        if (x9_25 > 2)
        {
            x0_34 = &var_110;
            int64_t* var_118_5 = &var_110;
            int64_t var_120_5 = x27_2;
            var_c0 = x27_2;
        }
        else
        {
            x0_34 = var_118_4;
            var_b0 = *x0_34;
            int64_t var_a8_3 = x0_34[1];
        }
        var_160 = 0x42ff0000;
        __builtin_memset((&var_160 | 4), 0, 0x34);
        *var_130_2[8] = 0;
        __builtin_memset(&*s_13[0xc], 0, 0x20);
        if (x0_34 != &var_110)
        {
            cv::fastFree(x0_34);
        }
        int128_t var_190_2;
        int64_t x8_42 = *var_190_2[8];
        if (x8_42 != 0)
        {
            int32_t temp0_6;
            int32_t i_10;
            do
            {
                temp0_6 = __ldaxr((x8_42 + 0x14));
                i_10 = __stlxr((temp0_6 - 1), (x8_42 + 0x14));
            } while (i_10 != 0);
            if (temp0_6 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_190_2[8] = 0;
        __builtin_memset(&s_12, 0, 0x20);
        if (s_11 >= 1)
        {
            int64_t i_11 = 0;
            do
            {
                *(var_180_2 + (i_11 << 2)) = 0;
                i_11 = (i_11 + 1);
            } while (i_11 < s_11);
        }
        if (var_178_2 != &var_170)
        {
            cv::fastFree(var_178_2);
        }
        x8_46 = *(arg1 + 0x350);
    }
    if ((x8_46 == 1 || (x8_46 == 0 && x8_46 == 1)))
    {
        var_1c0 = 0x42ff0000;
        __builtin_memset(&s_11, 0, 0x3c);
        void* var_180_1 = &*s_11[4];
        int64_t* var_178_1 = &var_170;
        int64_t var_168_1 = 0;
        var_170 = 0;
        var_3d0 = 0x300000001;
        int128_t v1_2;
        int128_t v2_2;
        int128_t v3_2;
        v1_2 = cv::Mat::create(&var_1c0, &*nullptr->ident.signature[2], &var_3d0);
        uint64_t x10_11 = s_11;
        var_220 = &var_1c0;
        int32_t* x8_18;
        if (x10_11 < 1)
        {
            x8_18 = nullptr;
        }
        else
        {
            x8_18 = var_178_1[(x10_11 - 1)];
        }
        uint32_t x9_12 = *var_1c0[1];
        var_218 = x8_18;
        __builtin_memset(&s_10, 0, 0x18);
        int64_t s_65;
        if ((x9_12 & 0x40) != 0)
        {
            int64_t s_36 = s_12;
            s_65 = s_36;
            int64_t x13_5;
            if (x10_11 < 3)
            {
                x13_5 = (var_1b4 * var_1b8);
            }
            else
            {
                int64_t i_81;
                if (x10_11 != 3)
                {
                    i_81 = (x10_11 & 0xfffffffc);
                    v1_2 = 1;
                    *v1_2[8] = 1;
                    void* x13_7 = (var_180_1 + 8);
                    int64_t i_73 = i_81;
                    int128_t v0_3 = v1_2;
                    int64_t i_12;
                    do
                    {
                        v2_2 = *(x13_7 - 8);
                        v3_2 = *x13_7;
                        /* unimplemented  {sxtl v0.2d, v2.2s} */;
                        /* unimplemented  {sxtl v1.2d, v3.2s} */;
                        int64_t x2_10 = v1_2;
                        int64_t x0_17 = (v0_3 * v1_2);
                        int64_t x15_6 = (v1_2 * v0_3);
                        v1_2 = (v1_2 * v0_3);
                        int64_t x16_7 = (v0_3 * x2_10);
                        v0_3 = x0_17;
                        i_12 = i_73;
                        i_73 = (i_73 - 4);
                        *v1_2[8] = x15_6;
                        *v0_3[8] = x16_7;
                        x13_7 = (x13_7 + 0x10);
                    } while (i_12 != 4);
                    x13_5 = ((v0_3 * v1_2) * (v0_3 * v1_2));
                }
                else
                {
                    i_81 = 0;
                    x13_5 = 1;
                }
                if ((x10_11 == 3 || (x10_11 != 3 && i_81 != x10_11)))
                {
                    int64_t i_65 = (x10_11 - i_81);
                    void* x11_9 = (var_180_1 + (i_81 << 2));
                    int64_t i_13;
                    do
                    {
                        int64_t x12_2 = *x11_9;
                        x11_9 = (x11_9 + 4);
                        i_13 = i_65;
                        i_65 = (i_65 - 1);
                        x13_5 = (x13_5 * x12_2);
                    } while (i_13 != 1);
                }
            }
            var_200_1 = (s_36 + (x13_5 * x8_18));
        }
        cv::MatConstIterator::seek(&var_220, false);
        void* s_19 = s_10;
        *s_19 = 0x4049000000000000;
        int32_t* x1_5 = var_220;
        if (x1_5 != 0)
        {
            void* s_38 = (s_19 + var_218);
            s_10 = s_38;
            if (s_38 >= var_200_1)
            {
                s_10 = s_19;
                cv::MatConstIterator::seek(&var_220, true);
                x1_5 = var_220;
                s_19 = s_10;
            }
            else
            {
                s_19 = s_38;
            }
        }
        int32_t* x9_15 = var_218;
        var_280 = x1_5;
        s_9 = s_19;
        int64_t s_82 = s_65;
        *s_19 = 0x4049000000000000;
        if (x1_5 == 0)
        {
            *s_19 = 0x403e000000000000;
        }
        else
        {
            void* s_39 = (s_19 + x9_15);
            s_9 = s_39;
            if (s_39 >= var_200_1)
            {
                s_9 = s_19;
                cv::MatConstIterator::seek(&var_280, true);
                s_39 = s_9;
                x1_5 = var_280;
            }
            *s_39 = 0x403e000000000000;
            if (x1_5 != 0)
            {
                void* s_20 = (s_39 + x9_15);
                s_9 = s_20;
                if (s_20 >= var_200_1)
                {
                    s_9 = s_39;
                    cv::MatConstIterator::seek(&var_280, true);
                }
            }
        }
        int64_t x27_1 = (&var_160 | 8);
        __builtin_memset(&s_13, 0, 0x3c);
        int64_t* var_118_2 = &var_110;
        int64_t var_108_1 = 0;
        var_110 = 0;
        var_160 = 0x42ff0006;
        int128_t v1_4;
        int128_t v2_4;
        int128_t v3_4;
        v0_2 = cv::Mat_<double>::operator=(&var_160);
        int64_t x8_23 = *var_d0_1[8];
        if (x8_23 != 0)
        {
            int32_t temp0_3;
            int32_t i_14;
            do
            {
                temp0_3 = __ldaxr((x8_23 + 0x14));
                i_14 = __stlxr((temp0_3 - 1), (x8_23 + 0x14));
            } while (i_14 != 0);
            if (temp0_3 == 1)
            {
                v0_2 = cv::Mat::deallocate();
            }
        }
        v0_2 = 0;
        *v0_2[8] = 0;
        *var_d0_1[8] = 0;
        __builtin_memset(s_3, 0, 0x20);
        if (*s_14[4] >= 1)
        {
            int64_t i_15 = 0;
            do
            {
                *(var_c0 + (i_15 << 2)) = 0;
                i_15 = (i_15 + 1);
            } while (i_15 < *s_14[4]);
        }
        v0_2 = var_160;
        s_14 = v0_2;
        s_15 = s_13;
        int128_t var_e0_1 = var_14c;
        int128_t var_130_1;
        var_d0_1 = var_130_1;
        int32_t x9_18;
        if (var_b8 == &var_b0)
        {
            x9_18 = v0_2;
        }
        else
        {
            cv::fastFree(var_b8);
            x9_18 = s_13;
            var_c0 = x24;
            var_b8 = &var_b0;
        }
        int64_t* x0_24;
        if (x9_18 > 2)
        {
            x0_24 = &var_110;
            int64_t* var_118_3 = &var_110;
            int64_t var_120_3 = x27_1;
            var_c0 = x27_1;
        }
        else
        {
            x0_24 = var_118_2;
            var_b0 = *x0_24;
            int64_t var_a8_2 = x0_24[1];
        }
        var_160 = 0x42ff0000;
        __builtin_memset((&var_160 | 4), 0, 0x34);
        *var_130_1[8] = 0;
        __builtin_memset(&*s_13[0xc], 0, 0x20);
        if (x0_24 != &var_110)
        {
            cv::fastFree(x0_24);
        }
        int128_t var_190_1;
        int64_t x8_29 = *var_190_1[8];
        if (x8_29 != 0)
        {
            int32_t temp0_4;
            int32_t i_16;
            do
            {
                temp0_4 = __ldaxr((x8_29 + 0x14));
                i_16 = __stlxr((temp0_4 - 1), (x8_29 + 0x14));
            } while (i_16 != 0);
            if (temp0_4 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_190_1[8] = 0;
        __builtin_memset(&s_12, 0, 0x20);
        if (s_11 >= 1)
        {
            int64_t i_17 = 0;
            do
            {
                *(var_180_1 + (i_17 << 2)) = 0;
                i_17 = (i_17 + 1);
            } while (i_17 < s_11);
        }
        if (var_178_1 != &var_170)
        {
            cv::fastFree(var_178_1);
        }
        if (*(arg1 + 0x350) == 2)
        {
            goto label_1bc80;
        }
    }
    if ((((x8_46 != 0 && x8_46 != 1) || x8_46 == 0) && x8_46 == 2))
    {
    label_1bc80:
        var_1c0 = 0x42ff0000;
        __builtin_memset(&s_11, 0, 0x3c);
        void* var_180_3 = &*s_11[4];
        int64_t* var_178_3 = &var_170;
        int64_t var_168_3 = 0;
        var_170 = 0;
        var_3d0 = 0x300000001;
        int128_t v1_6;
        int128_t v2_6;
        int128_t v3_6;
        v1_6 = cv::Mat::create(&var_1c0, &*nullptr->ident.signature[2], &var_3d0);
        uint64_t x10_33 = s_11;
        var_220 = &var_1c0;
        int32_t* x8_48;
        if (x10_33 < 1)
        {
            x8_48 = nullptr;
        }
        else
        {
            x8_48 = var_178_3[(x10_33 - 1)];
        }
        uint32_t x9_29 = *var_1c0[1];
        var_218 = x8_48;
        __builtin_memset(&s_10, 0, 0x18);
        int64_t s_67;
        if ((x9_29 & 0x40) != 0)
        {
            int64_t s_42 = s_12;
            s_67 = s_42;
            int64_t x13_13;
            if (x10_33 < 3)
            {
                x13_13 = (var_1b4 * var_1b8);
            }
            else
            {
                int64_t i_83;
                if (x10_33 != 3)
                {
                    i_83 = (x10_33 & 0xfffffffc);
                    v1_6 = 1;
                    *v1_6[8] = 1;
                    void* x13_14 = (var_180_3 + 8);
                    int64_t i_75 = i_83;
                    int128_t v0_5 = v1_6;
                    int64_t i_18;
                    do
                    {
                        v2_6 = *(x13_14 - 8);
                        v3_6 = *x13_14;
                        /* unimplemented  {sxtl v0.2d, v2.2s} */;
                        /* unimplemented  {sxtl v1.2d, v3.2s} */;
                        int64_t x2_23 = v1_6;
                        int64_t x0_38 = (v0_5 * v1_6);
                        int64_t x15_14 = (v1_6 * v0_5);
                        v1_6 = (v1_6 * v0_5);
                        int64_t x16_15 = (v0_5 * x2_23);
                        v0_5 = x0_38;
                        i_18 = i_75;
                        i_75 = (i_75 - 4);
                        *v1_6[8] = x15_14;
                        *v0_5[8] = x16_15;
                        x13_14 = (x13_14 + 0x10);
                    } while (i_18 != 4);
                    x13_13 = ((v0_5 * v1_6) * (v0_5 * v1_6));
                }
                else
                {
                    i_83 = 0;
                    x13_13 = 1;
                }
                if ((x10_33 == 3 || (x10_33 != 3 && i_83 != x10_33)))
                {
                    int64_t i_67 = (x10_33 - i_83);
                    void* x11_15 = (var_180_3 + (i_83 << 2));
                    int64_t i_19;
                    do
                    {
                        int64_t x12_4 = *x11_15;
                        x11_15 = (x11_15 + 4);
                        i_19 = i_67;
                        i_67 = (i_67 - 1);
                        x13_13 = (x13_13 * x12_4);
                    } while (i_19 != 1);
                }
            }
            var_200_1 = (s_42 + (x13_13 * x8_48));
        }
        cv::MatConstIterator::seek(&var_220, false);
        void* s_23 = s_10;
        *s_23 = 0x4049000000000000;
        int32_t* x1_11 = var_220;
        if (x1_11 != 0)
        {
            void* s_43 = (s_23 + var_218);
            s_10 = s_43;
            if (s_43 >= var_200_1)
            {
                s_10 = s_23;
                cv::MatConstIterator::seek(&var_220, true);
                x1_11 = var_220;
                s_23 = s_10;
            }
            else
            {
                s_23 = s_43;
            }
        }
        int32_t* x9_31 = var_218;
        var_280 = x1_11;
        s_9 = s_23;
        int64_t s_84 = s_67;
        *s_23 = 0x4049000000000000;
        if (x1_11 == 0)
        {
            *s_23 = 0x4034000000000000;
        }
        else
        {
            void* s_44 = (s_23 + x9_31);
            s_9 = s_44;
            if (s_44 >= var_200_1)
            {
                s_9 = s_23;
                cv::MatConstIterator::seek(&var_280, true);
                s_44 = s_9;
                x1_11 = var_280;
            }
            *s_44 = 0x4034000000000000;
            if (x1_11 != 0)
            {
                void* s_24 = (s_44 + x9_31);
                s_9 = s_24;
                if (s_24 >= var_200_1)
                {
                    s_9 = s_44;
                    cv::MatConstIterator::seek(&var_280, true);
                }
            }
        }
        int64_t x27_3 = (&var_160 | 8);
        __builtin_memset(&s_13, 0, 0x3c);
        int64_t* var_118_6 = &var_110;
        int64_t var_108_3 = 0;
        var_110 = 0;
        var_160 = 0x42ff0006;
        int128_t v1_7;
        int128_t v2_7;
        int128_t v3_7;
        v0_2 = cv::Mat_<double>::operator=(&var_160);
        int64_t x8_51 = *var_d0_1[8];
        if (x8_51 != 0)
        {
            int32_t temp0_7;
            int32_t i_20;
            do
            {
                temp0_7 = __ldaxr((x8_51 + 0x14));
                i_20 = __stlxr((temp0_7 - 1), (x8_51 + 0x14));
            } while (i_20 != 0);
            if (temp0_7 == 1)
            {
                v0_2 = cv::Mat::deallocate();
            }
        }
        v0_2 = 0;
        *v0_2[8] = 0;
        *var_d0_1[8] = 0;
        __builtin_memset(s_3, 0, 0x20);
        if (*s_14[4] >= 1)
        {
            int64_t i_21 = 0;
            do
            {
                *(var_c0 + (i_21 << 2)) = 0;
                i_21 = (i_21 + 1);
            } while (i_21 < *s_14[4]);
        }
        v0_2 = var_160;
        s_14 = v0_2;
        s_15 = s_13;
        int128_t var_e0_3 = var_14c;
        int128_t var_130_3;
        var_d0_1 = var_130_3;
        int32_t x9_34;
        if (var_b8 == &var_b0)
        {
            x9_34 = v0_2;
        }
        else
        {
            cv::fastFree(var_b8);
            x9_34 = s_13;
            var_c0 = x24;
            var_b8 = &var_b0;
        }
        int64_t* x0_45;
        if (x9_34 > 2)
        {
            x0_45 = &var_110;
            int64_t* var_118_7 = &var_110;
            int64_t var_120_7 = x27_3;
            var_c0 = x27_3;
        }
        else
        {
            x0_45 = var_118_6;
            var_b0 = *x0_45;
            int64_t var_a8_4 = x0_45[1];
        }
        var_160 = 0x42ff0000;
        __builtin_memset((&var_160 | 4), 0, 0x34);
        *var_130_3[8] = 0;
        __builtin_memset(&*s_13[0xc], 0, 0x20);
        if (x0_45 != &var_110)
        {
            cv::fastFree(x0_45);
        }
        int128_t var_190_3;
        int64_t x8_57 = *var_190_3[8];
        if (x8_57 != 0)
        {
            int32_t temp0_8;
            int32_t i_22;
            do
            {
                temp0_8 = __ldaxr((x8_57 + 0x14));
                i_22 = __stlxr((temp0_8 - 1), (x8_57 + 0x14));
            } while (i_22 != 0);
            if (temp0_8 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_190_3[8] = 0;
        __builtin_memset(&s_12, 0, 0x20);
        if (s_11 >= 1)
        {
            int64_t i_23 = 0;
            do
            {
                *(var_180_3 + (i_23 << 2)) = 0;
                i_23 = (i_23 + 1);
            } while (i_23 < s_11);
        }
        if (var_178_3 != &var_170)
        {
            cv::fastFree(var_178_3);
        }
    }
    var_220 = 0x42ff0000;
    __builtin_memset(&*var_220[4], 0, 0x3c);
    int64_t* var_1e0 = &var_218;
    int64_t var_1d0;
    int64_t* var_1d8 = &var_1d0;
    int64_t var_1c8 = 0;
    var_1d0 = 0;
    var_3d0 = 0x300000003;
    int128_t v1_8;
    int128_t v2_8;
    int128_t v3_8;
    v1_8 = cv::Mat::create(&var_220, &*nullptr->ident.signature[2], &var_3d0);
    uint64_t x10_44 = *var_220[4];
    var_280 = &var_220;
    int64_t x8_62;
    if (x10_44 < 1)
    {
        x8_62 = 0;
    }
    else
    {
        x8_62 = var_1d8[(x10_44 - 1)];
    }
    uint32_t x9_38 = *var_220[1];
    __builtin_memset(&s_9, 0, 0x18);
    void* s_63;
    int64_t var_260_4;
    if ((x9_38 & 0x40) != 0)
    {
        void* s_45 = s_10;
        s_63 = s_45;
        int64_t x13_17;
        if (x10_44 < 3)
        {
            x13_17 = (*var_218[4] * var_218);
        }
        else
        {
            int64_t i_84;
            if (x10_44 != 3)
            {
                i_84 = (x10_44 & 0xfffffffc);
                v1_8 = 1;
                *v1_8[8] = 1;
                void* x13_18 = &var_1e0[1];
                int64_t i_76 = i_84;
                int128_t v0_6 = v1_8;
                int64_t i_24;
                do
                {
                    v2_8 = *(x13_18 - 8);
                    v3_8 = *x13_18;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_30 = v1_8;
                    int64_t x0_49 = (v0_6 * v1_8);
                    int64_t x15_18 = (v1_8 * v0_6);
                    v1_8 = (v1_8 * v0_6);
                    int64_t x16_19 = (v0_6 * x2_30);
                    v0_6 = x0_49;
                    i_24 = i_76;
                    i_76 = (i_76 - 4);
                    *v1_8[8] = x15_18;
                    *v0_6[8] = x16_19;
                    x13_18 = (x13_18 + 0x10);
                } while (i_24 != 4);
                x13_17 = ((v0_6 * v1_8) * (v0_6 * v1_8));
            }
            else
            {
                i_84 = 0;
                x13_17 = 1;
            }
            if ((x10_44 == 3 || (x10_44 != 3 && i_84 != x10_44)))
            {
                int64_t i_68 = (x10_44 - i_84);
                void* x11_19 = (var_1e0 + (i_84 << 2));
                int64_t i_25;
                do
                {
                    int64_t x12_5 = *x11_19;
                    x11_19 = (x11_19 + 4);
                    i_25 = i_68;
                    i_68 = (i_68 - 1);
                    x13_17 = (x13_17 * x12_5);
                } while (i_25 != 1);
            }
        }
        var_260_4 = (s_45 + (x13_17 * x8_62));
    }
    cv::MatConstIterator::seek(&var_280, false);
    int64_t* s_25 = s_9;
    *s_25 = 0x40803149ba5e353f;
    int32_t* x1_14 = var_280;
    if (x1_14 != 0)
    {
        void* s_46 = (s_25 + x8_62);
        s_9 = s_46;
        if (s_46 >= var_260_4)
        {
            s_9 = s_25;
            cv::MatConstIterator::seek(&var_280, true);
            x1_14 = var_280;
            s_25 = s_9;
        }
        else
        {
            s_25 = s_46;
        }
    }
    int32_t* var_2e0 = x1_14;
    int64_t var_2d8 = x8_62;
    int64_t* s_8 = s_25;
    void* s_80 = s_63;
    *s_25 = 0;
    if (x1_14 == 0)
    {
        *s_25 = 0x3ff0000000000000;
    }
    else
    {
        int64_t* s_47 = (s_25 + x8_62);
        s_8 = s_47;
        if (s_47 >= var_260_4)
        {
            s_8 = s_25;
            cv::MatConstIterator::seek(&var_2e0, true);
            s_47 = s_8;
            x1_14 = var_2e0;
        }
        *s_47 = 0x407499c6a7ef9db2;
        int64_t* s_26;
        if (x1_14 == 0)
        {
            s_26 = s_47;
            *s_26 = 0;
        }
        else
        {
            s_26 = (s_47 + var_2d8);
            s_8 = s_26;
            if (s_26 >= var_260_4)
            {
                s_8 = s_47;
                cv::MatConstIterator::seek(&var_2e0, true);
                s_26 = s_8;
                x1_14 = var_2e0;
            }
            *s_26 = 0;
        }
        int64_t* s_48;
        if ((x1_14 == 0 || (x1_14 != 0 && x1_14 != 0)))
        {
            s_48 = (s_26 + var_2d8);
            s_8 = s_48;
            if (s_48 >= var_260_4)
            {
                s_8 = s_26;
                cv::MatConstIterator::seek(&var_2e0, true);
                s_48 = s_8;
                x1_14 = var_2e0;
            }
        }
        if ((x1_14 == 0 || x1_14 == 0))
        {
            s_48 = s_26;
        }
        *s_48 = 0x40803149ba5e353f;
        int64_t* s_27;
        if (x1_14 == 0)
        {
            s_27 = s_48;
        }
        else
        {
            s_27 = (s_48 + var_2d8);
            s_8 = s_27;
            if (s_27 >= var_260_4)
            {
                s_8 = s_48;
                cv::MatConstIterator::seek(&var_2e0, true);
                s_27 = s_8;
                x1_14 = var_2e0;
            }
        }
        *s_27 = 0x406e065604189375;
        int64_t* s_49;
        if (x1_14 == 0)
        {
            s_49 = s_27;
            *s_49 = 0;
        }
        else
        {
            s_49 = (s_27 + var_2d8);
            s_8 = s_49;
            if (s_49 >= var_260_4)
            {
                s_8 = s_27;
                cv::MatConstIterator::seek(&var_2e0, true);
                s_49 = s_8;
                x1_14 = var_2e0;
            }
            *s_49 = 0;
        }
        int64_t* s_28;
        if ((x1_14 == 0 || (x1_14 != 0 && x1_14 != 0)))
        {
            s_28 = (s_49 + var_2d8);
            s_8 = s_28;
            if (s_28 >= var_260_4)
            {
                s_8 = s_49;
                cv::MatConstIterator::seek(&var_2e0, true);
                s_28 = s_8;
                x1_14 = var_2e0;
            }
            *s_28 = 0;
        }
        if ((x1_14 == 0 || x1_14 == 0))
        {
            s_28 = s_49;
            *s_28 = 0;
        }
        int64_t* s_50;
        if (((x1_14 == 0 || x1_14 == 0) || ((x1_14 == 0 || (x1_14 != 0 && x1_14 != 0)) && x1_14 != 0)))
        {
            s_50 = (s_28 + var_2d8);
            s_8 = s_50;
            if (s_50 >= var_260_4)
            {
                s_8 = s_28;
                cv::MatConstIterator::seek(&var_2e0, true);
                s_50 = s_8;
                x1_14 = var_2e0;
            }
        }
        if (((x1_14 == 0 || x1_14 == 0) || ((x1_14 == 0 || (x1_14 != 0 && x1_14 != 0)) && x1_14 == 0)))
        {
            s_50 = s_28;
        }
        *s_50 = 0x3ff0000000000000;
        if (x1_14 != 0)
        {
            void* s_29 = (s_50 + var_2d8);
            s_8 = s_29;
            if (s_29 >= var_260_4)
            {
                s_8 = s_50;
                cv::MatConstIterator::seek(&var_2e0, true);
            }
        }
    }
    int64_t x26 = (&var_1c0 | 8);
    __builtin_memset(&s_11, 0, 0x3c);
    int64_t* var_178_4 = &var_170;
    int64_t var_168_4 = 0;
    var_170 = 0;
    var_1c0 = 0x42ff0006;
    int128_t v0_7;
    int128_t v1_9;
    int128_t v2_9;
    v0_7 = cv::Mat_<double>::operator=(&var_1c0);
    v2_9 = var_1c0;
    s_13 = s_12;
    int128_t var_1ac;
    var_14c = var_1ac;
    var_160 = v2_9;
    int128_t var_190_4;
    int128_t var_130_4 = var_190_4;
    int64_t var_120_8 = (&var_160 | 8);
    int64_t* var_468 = &var_110;
    int64_t* var_118_8 = &var_110;
    int64_t var_108_4 = 0;
    var_110 = 0;
    int64_t* x0_61;
    if (v2_9 > 2)
    {
        x0_61 = &var_170;
        int64_t* var_178_5 = &var_170;
        int64_t var_180_5 = x26;
        var_120_8 = x26;
    }
    else
    {
        x0_61 = var_178_4;
        var_110 = *x0_61;
        int64_t var_108_5 = x0_61[1];
    }
    var_1c0 = 0x42ff0000;
    __builtin_memset((&var_1c0 | 4), 0, 0x34);
    *var_190_4[8] = 0;
    __builtin_memset(&s_12, 0, 0x20);
    if (x0_61 != &var_170)
    {
        cv::fastFree(x0_61);
    }
    int128_t var_1f0;
    int64_t x8_68 = *var_1f0[8];
    if (x8_68 != 0)
    {
        int32_t temp0_9;
        int32_t i_26;
        do
        {
            temp0_9 = __ldaxr((x8_68 + 0x14));
            i_26 = __stlxr((temp0_9 - 1), (x8_68 + 0x14));
        } while (i_26 != 0);
        if (temp0_9 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_1f0[8] = 0;
    __builtin_memset(&s_10, 0, 0x20);
    if (*var_220[4] >= 1)
    {
        int64_t i_27 = 0;
        do
        {
            *(var_1e0 + (i_27 << 2)) = 0;
            i_27 = (i_27 + 1);
        } while (i_27 < *var_220[4]);
    }
    if (var_1d8 != &var_1d0)
    {
        cv::fastFree(var_1d8);
    }
    var_220 = 0x2010000;
    var_1c0 = 0x42ff0000;
    s_10 = nullptr;
    __builtin_memset(&s_11, 0, 0x3c);
    void* var_180_6 = &*s_11[4];
    void* s_2 = &*s_13[0xc];
    int64_t* var_470 = &var_170;
    int64_t* var_178_6 = &var_170;
    int64_t var_168_5 = 0;
    var_170 = 0;
    var_218 = &var_1c0;
    cv::Mat::copyTo((arg1 + 0x280));
    var_2e0 = 0x42ff0000;
    __builtin_memset(&*var_2e0[4], 0, 0x3c);
    int64_t* var_2a0 = &var_2d8;
    int64_t var_290;
    int64_t* var_298 = &var_290;
    int64_t var_288 = 0;
    var_290 = 0;
    var_3d0 = 0x300000003;
    int128_t v1_10;
    int128_t v2_10;
    int128_t v3_9;
    v1_10 = cv::Mat::create(&var_2e0, &*nullptr->ident.signature[2], &var_3d0);
    uint64_t x10_61 = *var_2e0[4];
    int32_t** s_6 = &var_2e0;
    int64_t x8_73;
    if (x10_61 < 1)
    {
        x8_73 = 0;
    }
    else
    {
        x8_73 = var_298[(x10_61 - 1)];
    }
    uint32_t x9_48 = *var_2e0[1];
    int64_t var_338 = x8_73;
    void* s_7;
    __builtin_memset(&s_7, 0, 0x18);
    int64_t* s_62;
    int64_t var_320_1;
    if ((x9_48 & 0x40) != 0)
    {
        int64_t* s_51 = s_8;
        s_62 = s_51;
        int64_t x13_21;
        if (x10_61 < 3)
        {
            x13_21 = (*var_2d8[4] * var_2d8);
        }
        else
        {
            int64_t i_85;
            if (x10_61 != 3)
            {
                i_85 = (x10_61 & 0xfffffffc);
                v1_10 = 1;
                *v1_10[8] = 1;
                void* x13_22 = &var_2a0[1];
                int64_t i_77 = i_85;
                int128_t v0_8 = v1_10;
                int64_t i_28;
                do
                {
                    v2_10 = *(x13_22 - 8);
                    v3_9 = *x13_22;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_43 = v1_10;
                    int64_t x0_66 = (v0_8 * v1_10);
                    int64_t x15_22 = (v1_10 * v0_8);
                    v1_10 = (v1_10 * v0_8);
                    int64_t x16_23 = (v0_8 * x2_43);
                    v0_8 = x0_66;
                    i_28 = i_77;
                    i_77 = (i_77 - 4);
                    *v1_10[8] = x15_22;
                    *v0_8[8] = x16_23;
                    x13_22 = (x13_22 + 0x10);
                } while (i_28 != 4);
                x13_21 = ((v0_8 * v1_10) * (v0_8 * v1_10));
            }
            else
            {
                i_85 = 0;
                x13_21 = 1;
            }
            if ((x10_61 == 3 || (x10_61 != 3 && i_85 != x10_61)))
            {
                int64_t i_69 = (x10_61 - i_85);
                void* x11_23 = (var_2a0 + (i_85 << 2));
                int64_t i_29;
                do
                {
                    int64_t x12_6 = *x11_23;
                    x11_23 = (x11_23 + 4);
                    i_29 = i_69;
                    i_69 = (i_69 - 1);
                    x13_21 = (x13_21 * x12_6);
                } while (i_29 != 1);
            }
        }
        var_320_1 = (s_51 + (x13_21 * x8_73));
    }
    cv::MatConstIterator::seek(&s_6, false);
    int64_t* s_30 = s_7;
    *s_30 = 0x3fefffa3b9ae0c17;
    int32_t*** s_16 = s_6;
    if (s_16 != 0)
    {
        void* s_52 = (s_30 + var_338);
        s_7 = s_52;
        if (s_52 >= var_320_1)
        {
            s_7 = s_30;
            cv::MatConstIterator::seek(&s_6, true);
            s_16 = s_6;
            s_30 = s_7;
        }
        else
        {
            s_30 = s_52;
        }
    }
    int64_t x9_50 = var_338;
    int32_t*** s_59 = s_16;
    int64_t var_398 = x9_50;
    int64_t* s_60 = s_30;
    int64_t* s_79 = s_62;
    *s_30 = 0x3f831fda90daae37;
    if (s_16 == 0)
    {
        *s_30 = 0x3fefffef39085f4a;
    }
    else
    {
        int64_t* s_68 = (s_30 + x9_50);
        int64_t* s_78 = s_68;
        if (s_68 >= var_320_1)
        {
            cv::MatConstIterator::seek(&s_59, true);
            s_68 = s_30;
            s_16 = s_59;
        }
        *s_68 = 0x3f4c317b9a77876d;
        int64_t* s_86;
        if (s_16 == 0)
        {
            s_86 = s_68;
        }
        else
        {
            s_86 = (s_68 + var_398);
            int64_t* s_90 = s_86;
            if (s_86 >= var_320_1)
            {
                cv::MatConstIterator::seek(&s_59, true);
                s_86 = s_68;
                s_16 = s_59;
            }
        }
        *s_86 = -0x407ce1f9daa1f78c;
        int64_t* s_91;
        if (s_16 == 0)
        {
            s_91 = s_86;
        }
        else
        {
            s_91 = (s_86 + var_398);
            int64_t* s_94 = s_91;
            if (s_91 >= var_320_1)
            {
                cv::MatConstIterator::seek(&s_59, true);
                s_91 = s_86;
                s_16 = s_59;
            }
        }
        *s_91 = 0x3fefff950b955f78;
        int64_t* s_96;
        if (s_16 == 0)
        {
            s_96 = s_91;
        }
        else
        {
            s_96 = (s_91 + var_398);
            int64_t* s_100 = s_96;
            if (s_96 >= var_320_1)
            {
                cv::MatConstIterator::seek(&s_59, true);
                s_96 = s_91;
                s_16 = s_59;
            }
        }
        *s_96 = -0x408fb9a14bea8f2a;
        int64_t* s_101;
        if (s_16 == 0)
        {
            s_101 = s_96;
        }
        else
        {
            s_101 = (s_96 + var_398);
            int64_t* s_104 = s_101;
            if (s_101 >= var_320_1)
            {
                cv::MatConstIterator::seek(&s_59, true);
                s_101 = s_96;
                s_16 = s_59;
            }
        }
        *s_101 = -0x40b297a2a71205c5;
        int64_t* s_105;
        if (s_16 == 0)
        {
            s_105 = s_101;
        }
        else
        {
            s_105 = (s_101 + var_398);
            int64_t* s_108 = s_105;
            if (s_105 >= var_320_1)
            {
                cv::MatConstIterator::seek(&s_59, true);
                s_105 = s_101;
                s_16 = s_59;
            }
        }
        *s_105 = 0x3f703dc2d92e041f;
        int64_t* s_109;
        if (s_16 == 0)
        {
            s_109 = s_105;
        }
        else
        {
            s_109 = (s_105 + var_398);
            int64_t* s_112 = s_109;
            if (s_109 >= var_320_1)
            {
                cv::MatConstIterator::seek(&s_59, true);
                s_109 = s_105;
                s_16 = s_59;
            }
        }
        *s_109 = 0x3fefffef39085f4a;
        if (s_16 != 0)
        {
            void* x8_79 = (s_109 + var_398);
            void* var_390_7 = x8_79;
            if (x8_79 >= var_320_1)
            {
                int64_t* s_113 = s_109;
                cv::MatConstIterator::seek(&s_59, true);
            }
        }
    }
    int64_t x26_1 = (&var_280 | 8);
    __builtin_memset(&*var_280[4], 0, 0x3c);
    int64_t var_230;
    int64_t* var_238 = &var_230;
    int64_t var_228 = 0;
    var_230 = 0;
    var_280 = 0x42ff0006;
    int128_t v0_9;
    int128_t v1_11;
    int128_t v2_11;
    v0_9 = cv::Mat_<double>::operator=(&var_280);
    v2_11 = var_280;
    s_10 = s_9;
    var_200_1 = var_260_4;
    var_220 = v2_11;
    int128_t var_250;
    int128_t var_1f0_1 = var_250;
    int64_t var_1e0_1 = (&var_220 | 8);
    int64_t* var_480 = &var_1d0;
    int64_t* var_1d8_1 = &var_1d0;
    int64_t var_1c8_1 = 0;
    var_1d0 = 0;
    int64_t* x0_78;
    if (v2_11 > 2)
    {
        x0_78 = &var_230;
        int64_t* var_238_1 = &var_230;
        int64_t var_240_1 = x26_1;
        var_1e0_1 = x26_1;
    }
    else
    {
        x0_78 = var_238;
        var_1d0 = *x0_78;
        int64_t var_1c8_2 = x0_78[1];
    }
    var_280 = 0x42ff0000;
    __builtin_memset((&var_280 | 4), 0, 0x34);
    *var_250[8] = 0;
    __builtin_memset(&s_9, 0, 0x20);
    if (x0_78 != &var_230)
    {
        cv::fastFree(x0_78);
    }
    int128_t var_2b0;
    int64_t x8_80 = *var_2b0[8];
    if (x8_80 != 0)
    {
        int32_t temp0_10;
        int32_t i_30;
        do
        {
            temp0_10 = __ldaxr((x8_80 + 0x14));
            i_30 = __stlxr((temp0_10 - 1), (x8_80 + 0x14));
        } while (i_30 != 0);
        if (temp0_10 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_2b0[8] = 0;
    __builtin_memset(&s_8, 0, 0x20);
    if (*var_2e0[4] >= 1)
    {
        int64_t i_31 = 0;
        do
        {
            *(var_2a0 + (i_31 << 2)) = 0;
            i_31 = (i_31 + 1);
        } while (i_31 < *var_2e0[4]);
    }
    if (var_298 != &var_290)
    {
        cv::fastFree(var_298);
    }
    s_6 = 0x42ff0000;
    __builtin_memset(&*s_6[4], 0, 0x3c);
    int64_t* var_300 = &var_338;
    int64_t var_2f0;
    int64_t* var_2f8 = &var_2f0;
    var_2f0 = 0;
    int64_t var_2e8 = 0;
    var_3d0 = 0x100000003;
    void** s_1 = &s_10;
    int128_t v1_12;
    int128_t v2_12;
    int128_t v3_10;
    v1_12 = cv::Mat::create(&s_6, &*nullptr->ident.signature[2], &var_3d0);
    uint64_t x10_78 = *s_6[4];
    s_59 = &s_6;
    int64_t x8_85;
    if (x10_78 < 1)
    {
        x8_85 = 0;
    }
    else
    {
        x8_85 = var_2f8[(x10_78 - 1)];
    }
    uint32_t x9_58 = *s_6[1];
    var_398 = x8_85;
    void* s_5;
    __builtin_memset(&s_5, 0, 0x18);
    void* s_61;
    int64_t var_380_1;
    if ((x9_58 & 0x40) != 0)
    {
        void* s_53 = s_7;
        s_61 = s_53;
        int64_t x13_25;
        if (x10_78 < 3)
        {
            x13_25 = (*var_338[4] * var_338);
        }
        else
        {
            int64_t i_86;
            if (x10_78 != 3)
            {
                i_86 = (x10_78 & 0xfffffffc);
                v1_12 = 1;
                *v1_12[8] = 1;
                void* x13_26 = &var_300[1];
                int64_t i_78 = i_86;
                int128_t v0_10 = v1_12;
                int64_t i_32;
                do
                {
                    v2_12 = *(x13_26 - 8);
                    v3_10 = *x13_26;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_56 = v1_12;
                    int64_t x0_82 = (v0_10 * v1_12);
                    int64_t x15_26 = (v1_12 * v0_10);
                    v1_12 = (v1_12 * v0_10);
                    int64_t x16_27 = (v0_10 * x2_56);
                    v0_10 = x0_82;
                    i_32 = i_78;
                    i_78 = (i_78 - 4);
                    *v1_12[8] = x15_26;
                    *v0_10[8] = x16_27;
                    x13_26 = (x13_26 + 0x10);
                } while (i_32 != 4);
                x13_25 = ((v0_10 * v1_12) * (v0_10 * v1_12));
            }
            else
            {
                i_86 = 0;
                x13_25 = 1;
            }
            if ((x10_78 == 3 || (x10_78 != 3 && i_86 != x10_78)))
            {
                int64_t i_70 = (x10_78 - i_86);
                void* x11_27 = (var_300 + (i_86 << 2));
                int64_t i_33;
                do
                {
                    int64_t x12_7 = *x11_27;
                    x11_27 = (x11_27 + 4);
                    i_33 = i_70;
                    i_70 = (i_70 - 1);
                    x13_25 = (x13_25 * x12_7);
                } while (i_33 != 1);
            }
        }
        var_380_1 = (s_53 + (x13_25 * x8_85));
    }
    cv::MatConstIterator::seek(&s_59, false);
    int64_t* s_31 = s_5;
    *s_31 = -0x3fc71cb295e9e1b1;
    int32_t**** s_85 = s_59;
    if (s_85 != 0)
    {
        void* s_54 = (s_31 + var_398);
        s_5 = s_54;
        if (s_54 >= var_380_1)
        {
            s_5 = s_31;
            cv::MatConstIterator::seek(&s_59, true);
            s_85 = s_59;
            s_31 = s_5;
        }
        else
        {
            s_31 = s_54;
        }
    }
    int64_t x9_60 = var_398;
    int32_t**** s_89 = s_85;
    int64_t* s_57 = s_31;
    void* s_77 = s_61;
    *s_31 = 0x3fc679cc74b838c1;
    if (s_85 == 0)
    {
        *s_31 = 0x3fe6fa3db3bfb58d;
    }
    else
    {
        int64_t* s_69 = (s_31 + x9_60);
        int64_t* s_74 = s_69;
        if (s_69 >= var_380_1)
        {
            cv::MatConstIterator::seek(&s_89, true);
            s_69 = s_31;
            s_85 = s_89;
        }
        *s_69 = 0x3fe6fa3db3bfb58d;
        if (s_85 != 0)
        {
            void* x8_88 = (s_69 + x9_60);
            void* var_3b8_1 = x8_88;
            if (x8_88 >= var_380_1)
            {
                int64_t* s_75 = s_69;
                cv::MatConstIterator::seek(&s_89, true);
            }
        }
    }
    int64_t x26_2 = (&var_2e0 | 8);
    __builtin_memset(&*var_2e0[4], 0, 0x3c);
    int64_t* var_298_1 = &var_290;
    int64_t var_288_1 = 0;
    var_290 = 0;
    var_2e0 = 0x42ff0006;
    int128_t v0_11;
    int128_t v1_13;
    int128_t v2_13;
    v0_11 = cv::Mat_<double>::operator=(&var_2e0);
    v2_13 = var_2e0;
    s_9 = s_8;
    var_260_4 = var_260_4;
    var_280 = v2_13;
    int128_t var_2b0_1;
    int128_t var_250_1 = var_2b0_1;
    int64_t var_240_2 = (&var_280 | 8);
    int64_t* var_490 = &var_230;
    int64_t* var_238_2 = &var_230;
    int64_t var_228_1 = 0;
    var_230 = 0;
    int64_t* x0_88;
    if (v2_13 > 2)
    {
        x0_88 = &var_290;
        int64_t* var_298_2 = &var_290;
        int64_t var_2a0_2 = x26_2;
        var_240_2 = x26_2;
    }
    else
    {
        x0_88 = var_298_1;
        var_230 = *x0_88;
        int64_t var_228_2 = x0_88[1];
    }
    var_2e0 = 0x42ff0000;
    __builtin_memset((&var_2e0 | 4), 0, 0x34);
    *var_2b0_1[8] = 0;
    __builtin_memset(&s_8, 0, 0x20);
    if (x0_88 != &var_290)
    {
        cv::fastFree(x0_88);
    }
    int128_t var_310;
    int64_t x8_89 = *var_310[8];
    if (x8_89 != 0)
    {
        int32_t temp0_11;
        int32_t i_34;
        do
        {
            temp0_11 = __ldaxr((x8_89 + 0x14));
            i_34 = __stlxr((temp0_11 - 1), (x8_89 + 0x14));
        } while (i_34 != 0);
        if (temp0_11 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_310[8] = 0;
    __builtin_memset(&s_7, 0, 0x20);
    if (*s_6[4] >= 1)
    {
        int64_t i_35 = 0;
        do
        {
            *(var_300 + (i_35 << 2)) = 0;
            i_35 = (i_35 + 1);
        } while (i_35 < *s_6[4]);
    }
    if (var_2f8 != &var_2f0)
    {
        cv::fastFree(var_2f8);
    }
    s_59 = 0x42ff0000;
    __builtin_memset(&*s_59[4], 0, 0x3c);
    int64_t* var_360 = &var_398;
    int64_t var_350;
    int64_t* var_358 = &var_350;
    var_350 = 0;
    int64_t var_348 = 0;
    var_3d0 = 0x400000004;
    int64_t** s = &s_9;
    int128_t v1_14;
    int128_t v2_14;
    int128_t v3_11;
    v1_14 = cv::Mat::create(&s_59, &*nullptr->ident.signature[2], &var_3d0);
    uint64_t x10_89 = *s_59[4];
    s_89 = &s_59;
    int64_t x8_94;
    if (x10_89 < 1)
    {
        x8_94 = 0;
    }
    else
    {
        x8_94 = var_358[(x10_89 - 1)];
    }
    uint32_t x9_65 = *s_59[1];
    int64_t* s_4;
    __builtin_memset(&s_4, 0, 0x18);
    void* s_58;
    int64_t var_3a8_1;
    if ((x9_65 & 0x40) != 0)
    {
        void* s_55 = s_5;
        s_58 = s_55;
        int64_t x13_29;
        if (x10_89 < 3)
        {
            x13_29 = (*var_398[4] * var_398);
        }
        else
        {
            int64_t i_87;
            if (x10_89 != 3)
            {
                i_87 = (x10_89 & 0xfffffffc);
                v1_14 = 1;
                *v1_14[8] = 1;
                void* x13_30 = &var_360[1];
                int64_t i_79 = i_87;
                int128_t v0_12 = v1_14;
                int64_t i_36;
                do
                {
                    v2_14 = *(x13_30 - 8);
                    v3_11 = *x13_30;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_63 = v1_14;
                    int64_t x0_92 = (v0_12 * v1_14);
                    int64_t x15_30 = (v1_14 * v0_12);
                    v1_14 = (v1_14 * v0_12);
                    int64_t x16_31 = (v0_12 * x2_63);
                    v0_12 = x0_92;
                    i_36 = i_79;
                    i_79 = (i_79 - 4);
                    *v1_14[8] = x15_30;
                    *v0_12[8] = x16_31;
                    x13_30 = (x13_30 + 0x10);
                } while (i_36 != 4);
                x13_29 = ((v0_12 * v1_14) * (v0_12 * v1_14));
            }
            else
            {
                i_87 = 0;
                x13_29 = 1;
            }
            if ((x10_89 == 3 || (x10_89 != 3 && i_87 != x10_89)))
            {
                int64_t i_71 = (x10_89 - i_87);
                void* x11_31 = (var_360 + (i_87 << 2));
                int64_t i_37;
                do
                {
                    int64_t x12_8 = *x11_31;
                    x11_31 = (x11_31 + 4);
                    i_37 = i_71;
                    i_71 = (i_71 - 1);
                    x13_29 = (x13_29 * x12_8);
                } while (i_37 != 1);
            }
        }
        var_3a8_1 = (s_55 + (x13_29 * x8_94));
    }
    cv::MatConstIterator::seek(&s_89, false);
    int64_t* s_32 = s_4;
    *s_32 = 0x3ff0000000000000;
    int32_t**** s_95 = s_89;
    if (s_95 != 0)
    {
        void* s_70 = (s_32 + x8_94);
        void* s_76 = s_70;
        if (s_70 >= var_3a8_1)
        {
            cv::MatConstIterator::seek(&s_89, true);
            s_95 = s_89;
        }
        else
        {
            s_32 = s_70;
        }
    }
    int32_t**** s_98 = s_95;
    int64_t* s_56 = s_32;
    void* s_73 = s_58;
    *s_32 = 0;
    if (s_95 == 0)
    {
        *s_32 = 0x3ff0000000000000;
    }
    else
    {
        int64_t* s_71 = (s_32 + x8_94);
        int64_t* s_72 = s_71;
        if (s_71 >= var_3a8_1)
        {
            cv::MatConstIterator::seek(&s_98, true);
            s_71 = s_32;
            s_95 = s_98;
        }
        *s_71 = 0;
        int64_t* s_87;
        if (s_95 == 0)
        {
            s_87 = s_71;
            *s_87 = 0;
        }
        else
        {
            s_87 = (s_71 + x8_94);
            int64_t* s_88 = s_87;
            if (s_87 >= var_3a8_1)
            {
                cv::MatConstIterator::seek(&s_98, true);
                s_87 = s_71;
                s_95 = s_98;
            }
            *s_87 = 0;
        }
        int64_t* s_92;
        if ((s_95 == 0 || (s_95 != 0 && s_95 != 0)))
        {
            s_92 = (s_87 + x8_94);
            int64_t* s_93 = s_92;
            if (s_92 >= var_3a8_1)
            {
                cv::MatConstIterator::seek(&s_98, true);
                s_92 = s_87;
                s_95 = s_98;
            }
            *s_92 = 0;
        }
        if ((s_95 == 0 || s_95 == 0))
        {
            s_92 = s_87;
            *s_92 = 0;
        }
        int64_t* s_97;
        if (((s_95 == 0 || s_95 == 0) || ((s_95 == 0 || (s_95 != 0 && s_95 != 0)) && s_95 != 0)))
        {
            s_97 = (s_92 + x8_94);
            int64_t* s_99 = s_97;
            if (s_97 >= var_3a8_1)
            {
                cv::MatConstIterator::seek(&s_98, true);
                s_97 = s_92;
                s_95 = s_98;
            }
        }
        if (((s_95 == 0 || s_95 == 0) || ((s_95 == 0 || (s_95 != 0 && s_95 != 0)) && s_95 == 0)))
        {
            s_97 = s_92;
        }
        *s_97 = 0x3ff0000000000000;
        int64_t* s_102;
        if (s_95 == 0)
        {
            s_102 = s_97;
            *s_102 = 0;
        }
        else
        {
            s_102 = (s_97 + x8_94);
            int64_t* s_103 = s_102;
            if (s_102 >= var_3a8_1)
            {
                cv::MatConstIterator::seek(&s_98, true);
                s_102 = s_97;
                s_95 = s_98;
            }
            *s_102 = 0;
        }
        int64_t* s_106;
        if ((s_95 == 0 || (s_95 != 0 && s_95 != 0)))
        {
            s_106 = (s_102 + x8_94);
            int64_t* s_107 = s_106;
            if (s_106 >= var_3a8_1)
            {
                cv::MatConstIterator::seek(&s_98, true);
                s_106 = s_102;
                s_95 = s_98;
            }
            *s_106 = 0;
        }
        if ((s_95 == 0 || s_95 == 0))
        {
            s_106 = s_102;
            *s_106 = 0;
        }
        int64_t* s_110;
        if (((s_95 == 0 || s_95 == 0) || ((s_95 == 0 || (s_95 != 0 && s_95 != 0)) && s_95 != 0)))
        {
            s_110 = (s_106 + x8_94);
            int64_t* s_111 = s_110;
            if (s_110 >= var_3a8_1)
            {
                cv::MatConstIterator::seek(&s_98, true);
                s_110 = s_106;
                s_95 = s_98;
            }
            *s_110 = 0;
            if (s_95 != 0)
            {
                goto label_1d3f4;
            }
            goto label_1d484;
        }
        if (((s_95 == 0 || s_95 == 0) || ((s_95 == 0 || (s_95 != 0 && s_95 != 0)) && s_95 == 0)))
        {
            s_110 = s_106;
            *s_110 = 0;
            int64_t* s_114;
            if (s_95 != 0)
            {
            label_1d3f4:
                s_114 = (s_110 + x8_94);
                int64_t* s_115 = s_114;
                if (s_114 >= var_3a8_1)
                {
                    cv::MatConstIterator::seek(&s_98, true);
                    s_114 = s_110;
                    s_95 = s_98;
                }
                *s_114 = 0;
                if (s_95 != 0)
                {
                    goto label_1d430;
                }
                goto label_1d490;
            }
        label_1d484:
            s_114 = s_110;
            *s_114 = 0;
            int64_t* s_116;
            if (s_95 == 0)
            {
            label_1d490:
                s_116 = s_114;
            }
            else
            {
            label_1d430:
                s_116 = (s_114 + x8_94);
                int64_t* s_117 = s_116;
                if (s_116 >= var_3a8_1)
                {
                    cv::MatConstIterator::seek(&s_98, true);
                    s_116 = s_114;
                    s_95 = s_98;
                }
            }
            *s_116 = 0x3ff0000000000000;
            int64_t* s_118;
            if (s_95 == 0)
            {
                s_118 = s_116;
                *s_118 = 0;
            }
            else
            {
                s_118 = (s_116 + x8_94);
                int64_t* s_119 = s_118;
                if (s_118 >= var_3a8_1)
                {
                    cv::MatConstIterator::seek(&s_98, true);
                    s_118 = s_116;
                    s_95 = s_98;
                }
                *s_118 = 0;
            }
            int64_t* s_120;
            if ((s_95 == 0 || (s_95 != 0 && s_95 != 0)))
            {
                s_120 = (s_118 + x8_94);
                int64_t* s_121 = s_120;
                if (s_120 >= var_3a8_1)
                {
                    cv::MatConstIterator::seek(&s_98, true);
                    s_120 = s_118;
                    s_95 = s_98;
                }
                *s_120 = 0;
            }
            if ((s_95 == 0 || s_95 == 0))
            {
                s_120 = s_118;
                *s_120 = 0;
            }
            int64_t* s_122;
            if (((s_95 == 0 || s_95 == 0) || ((s_95 == 0 || (s_95 != 0 && s_95 != 0)) && s_95 != 0)))
            {
                s_122 = (s_120 + x8_94);
                int64_t* s_123 = s_122;
                if (s_122 >= var_3a8_1)
                {
                    cv::MatConstIterator::seek(&s_98, true);
                    s_122 = s_120;
                    s_95 = s_98;
                }
                *s_122 = 0;
                if (s_95 != 0)
                {
                    goto label_1d55c;
                }
                goto label_1d5ec;
            }
            if (((s_95 == 0 || s_95 == 0) || ((s_95 == 0 || (s_95 != 0 && s_95 != 0)) && s_95 == 0)))
            {
                s_122 = s_120;
                *s_122 = 0;
                int64_t* s_124;
                if (s_95 != 0)
                {
                label_1d55c:
                    s_124 = (s_122 + x8_94);
                    int64_t* s_125 = s_124;
                    if (s_124 >= var_3a8_1)
                    {
                        cv::MatConstIterator::seek(&s_98, true);
                        s_124 = s_122;
                        s_95 = s_98;
                    }
                    *s_124 = 0;
                    if (s_95 != 0)
                    {
                        goto label_1d598;
                    }
                    goto label_1d5f8;
                }
            label_1d5ec:
                s_124 = s_122;
                *s_124 = 0;
                int64_t* s_126;
                if (s_95 == 0)
                {
                label_1d5f8:
                    s_126 = s_124;
                }
                else
                {
                label_1d598:
                    s_126 = (s_124 + x8_94);
                    int64_t* s_127 = s_126;
                    if (s_126 >= var_3a8_1)
                    {
                        cv::MatConstIterator::seek(&s_98, true);
                        s_126 = s_124;
                        s_95 = s_98;
                    }
                }
                *s_126 = 0x3ff0000000000000;
                if (s_95 != 0)
                {
                    void* x9_75 = (s_126 + x8_94);
                    void* var_438_14 = x9_75;
                    if (x9_75 >= var_3a8_1)
                    {
                        int64_t* s_128 = s_126;
                        cv::MatConstIterator::seek(&s_98, true);
                    }
                }
            }
        }
    }
    int64_t x25 = (&s_6 | 8);
    __builtin_memset(&*s_6[4], 0, 0x3c);
    int64_t* var_2f8_1 = &var_2f0;
    var_2f0 = 0;
    int64_t var_2e8_1 = 0;
    s_6 = 0x42ff0006;
    int128_t v0_13;
    int128_t v1_15;
    int128_t v2_15;
    v0_13 = cv::Mat_<double>::operator=(&s_6);
    v2_15 = s_6;
    s_8 = s_7;
    int64_t var_2c0;
    var_2c0 = var_320_1;
    var_2e0 = v2_15;
    int128_t var_310_1;
    int128_t var_2b0_2 = var_310_1;
    int64_t var_2a0_3 = (&var_2e0 | 8);
    int64_t* var_298_3 = &var_290;
    int64_t var_288_2 = 0;
    var_290 = 0;
    int64_t* x0_111;
    if (v2_15 > 2)
    {
        x0_111 = &var_2f0;
        int64_t var_300_2 = x25;
        int64_t* var_2f8_2 = &var_2f0;
        var_2a0_3 = x25;
    }
    else
    {
        x0_111 = var_2f8_1;
        var_290 = *x0_111;
        int64_t var_288_3 = x0_111[1];
    }
    s_6 = 0x42ff0000;
    __builtin_memset((&s_6 | 4), 0, 0x34);
    *var_310_1[8] = 0;
    __builtin_memset(&s_7, 0, 0x20);
    if (x0_111 != &var_2f0)
    {
        cv::fastFree(x0_111);
    }
    int128_t var_370;
    int64_t x8_103 = *var_370[8];
    if (x8_103 != 0)
    {
        int32_t temp0_12;
        int32_t i_38;
        do
        {
            temp0_12 = __ldaxr((x8_103 + 0x14));
            i_38 = __stlxr((temp0_12 - 1), (x8_103 + 0x14));
        } while (i_38 != 0);
        if (temp0_12 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_370[8] = 0;
    __builtin_memset(&s_5, 0, 0x20);
    if (*s_59[4] >= 1)
    {
        int64_t i_39 = 0;
        do
        {
            *(var_360 + (i_39 << 2)) = 0;
            i_39 = (i_39 + 1);
        } while (i_39 < *s_59[4]);
    }
    if (var_358 != &var_350)
    {
        cv::fastFree(var_358);
    }
    int64_t* x0_114 = sub_2024c(&var_420, "use_static_extrinsic");
    int32_t x0_115 = *(*x0_114 + 0x18)();
    if (((x0_115 & 1) != 0 && x0_114[1] != 6))
    {
        cv::write(x0_114, &x0_114[2], 1);
        if ((x0_114[1] & 4) != 0)
        {
            x0_114[1] = 6;
        }
    }
    void* var_3d8;
    int128_t var_190_5;
    if (((x0_115 & 1) == 0 || ((x0_115 & 1) != 0 && x0_114[1] != 6)))
    {
        int64_t* x0_118 = sub_2024c(&var_420, "use_static_camera_matrix");
        if ((*(*x0_118 + 0x18)() & 1) != 0)
        {
            if (x0_118[1] == 6)
            {
                goto label_1e430;
            }
            cv::write(x0_118, &x0_118[2], 1);
            if ((x0_118[1] & 4) != 0)
            {
                x0_118[1] = 6;
            }
        }
        int64_t* x0_122 = sub_2024c(&var_420, "near_edge");
        if ((*(*x0_122 + 0x18)() & 1) != 0)
        {
            if (x0_122[1] == 6)
            {
                goto label_1e48c;
            }
            cv::write(x0_122, &x0_122[2], 1);
            if ((x0_122[1] & 4) != 0)
            {
                x0_122[1] = 6;
            }
        }
        sub_2024c(sub_2024c(&var_420, "mask_file"), "/sdcard/pudu/config/mask.png");
        int64_t* x0_128 = sub_2024c(&var_420, "lamda");
        if ((*(*x0_128 + 0x18)() & 1) != 0)
        {
            if (x0_128[1] == 6)
            {
                goto label_1e4e8;
            }
            cv::write(x0_128, &x0_128[2], 0.80000000000000004);
            if ((x0_128[1] & 4) != 0)
            {
                x0_128[1] = 6;
            }
            goto label_1d8e8;
        }
    label_1d8e8:
        int64_t* x0_132 = sub_2024c(&var_420, &data_53fc2);
        void* x9_79 = *(arg1 + 0x2f0);
        int64_t x8_124 = **(arg1 + 0x328);
        double v9 = *(x9_79 + 0x18);
        double v10 = *((x9_79 + x8_124) + 0x18);
        double v8 = *((x9_79 + (x8_124 << 1)) + 0x18);
        if ((*(*x0_132 + 0x18)() & 1) != 0)
        {
            if (x0_132[1] == 6)
            {
                goto label_1e544;
            }
            cv::write(x0_132, &x0_132[2], vsqrt_f64((((v9 * v9) + (v10 * v10)) + (v8 * v8))));
            if ((x0_132[1] & 4) != 0)
            {
                x0_132[1] = 6;
            }
            goto label_1d96c;
        }
    label_1d96c:
        int64_t* x0_136 = sub_2024c(&var_420, "region_x");
        if ((*(*x0_136 + 0x18)() & 1) != 0)
        {
            if (x0_136[1] == 6)
            {
                goto label_1e5a0;
            }
            cv::write(x0_136, &x0_136[2], 0x3e8);
            if ((x0_136[1] & 4) != 0)
            {
                x0_136[1] = 6;
            }
            goto label_1d9bc;
        }
    label_1d9bc:
        int64_t* x0_140 = sub_2024c(&var_420, "region_y");
        if ((*(*x0_140 + 0x18)() & 1) != 0)
        {
            if (x0_140[1] == 6)
            {
                goto label_1e5fc;
            }
            cv::write(x0_140, &x0_140[2], 0x5dc);
            if ((x0_140[1] & 4) != 0)
            {
                x0_140[1] = 6;
            }
        }
        int64_t* x20_8;
        if (*(arg1 + 0x350) != 1)
        {
            int64_t* x0_152 = sub_2024c(&var_420, "angular_resolution");
            if ((*(*x0_152 + 0x18)() & 1) != 0)
            {
                if (x0_152[1] == 6)
                {
                    goto label_1ea4c;
                }
                cv::write(x0_152, &x0_152[2], 0xf);
                if ((x0_152[1] & 4) != 0)
                {
                    x0_152[1] = 6;
                }
                goto label_1dafc;
            }
        label_1dafc:
            int64_t* x0_156 = sub_2024c(&var_420, "patch_size");
            x20_8 = x0_156;
            if ((*(*x0_156 + 0x18)() & 1) == 0)
            {
                goto label_1db40;
            }
            if (x20_8[1] == 6)
            {
                goto label_1eaa8;
            }
            cv::write(x20_8, &x20_8[2], 8);
        }
        else
        {
            int64_t* x0_144 = sub_2024c(&var_420, "angular_resolution");
            if ((*(*x0_144 + 0x18)() & 1) != 0)
            {
                if (x0_144[1] == 6)
                {
                    goto label_1e994;
                }
                cv::write(x0_144, &x0_144[2], 0x14);
                if ((x0_144[1] & 4) != 0)
                {
                    x0_144[1] = 6;
                }
                goto label_1da68;
            }
        label_1da68:
            int64_t* x0_148 = sub_2024c(&var_420, "patch_size");
            x20_8 = x0_148;
            if ((*(*x0_148 + 0x18)() & 1) == 0)
            {
                goto label_1db40;
            }
            if (x20_8[1] == 6)
            {
                goto label_1e9f0;
            }
            cv::write(x20_8, &x20_8[2], 0xa);
        }
        if ((x20_8[1] & 4) == 0)
        {
            goto label_1db40;
        }
        x20_8[1] = 6;
    label_1db40:
        int32_t x8_153 = *(arg1 + 0x350);
        if (x8_153 != 0)
        {
            if (x8_153 == 1)
            {
            label_1dc0c:
                int64_t* x0_168 = sub_2024c(&var_420, "image_width");
                if ((*(*x0_168 + 0x18)() & 1) == 0)
                {
                label_1dc5c:
                    int64_t* x0_172 = sub_2024c(&var_420, "image_hight");
                    if ((*(*x0_172 + 0x18)() & 1) == 0)
                    {
                        goto label_1dca0;
                    }
                    if (x0_172[1] == 6)
                    {
                        goto label_1eb60;
                    }
                    cv::write(x0_172, &x0_172[2], 0xf0);
                    if ((x0_172[1] & 4) != 0)
                    {
                        x0_172[1] = 6;
                    }
                    goto label_1dca0;
                }
                if (x0_168[1] == 6)
                {
                    goto label_1eb04;
                }
                cv::write(x0_168, &x0_168[2], 0x1a8);
                if ((x0_168[1] & 4) != 0)
                {
                    x0_168[1] = 6;
                }
                goto label_1dc5c;
            }
        label_1dca0:
            int32_t x8_179 = *(arg1 + 0x350);
            if (x8_179 == 2)
            {
                int64_t* x0_176 = sub_2024c(&var_420, "image_width");
                if ((*(*x0_176 + 0x18)() & 1) != 0)
                {
                    if (x0_176[1] == 6)
                    {
                        goto label_1ebbc;
                    }
                    cv::write(x0_176, &x0_176[2], 0xc8);
                    if ((x0_176[1] & 4) != 0)
                    {
                        x0_176[1] = 6;
                    }
                    goto label_1dd08;
                }
            label_1dd08:
                int64_t* x0_180 = sub_2024c(&var_420, "image_hight");
                if ((*(*x0_180 + 0x18)() & 1) != 0)
                {
                    if (x0_180[1] == 6)
                    {
                        goto label_1ec18;
                    }
                    cv::write(x0_180, &x0_180[2], 0x140);
                    if ((x0_180[1] & 4) != 0)
                    {
                        x0_180[1] = 6;
                    }
                    goto label_1dd4c;
                }
            label_1dd4c:
                x8_179 = *(arg1 + 0x350);
            }
            if (x8_179 == 3)
            {
                int64_t* x0_184 = sub_2024c(&var_420, "image_width");
                if ((*(*x0_184 + 0x18)() & 1) == 0)
                {
                label_1ddb4:
                    int64_t* x0_188 = sub_2024c(&var_420, "image_hight");
                    if ((*(*x0_188 + 0x18)() & 1) == 0)
                    {
                        goto label_1de04;
                    }
                    if (x0_188[1] == 6)
                    {
                        goto label_1ecd0;
                    }
                    cv::write(x0_188, &x0_188[2], 0x140);
                    if ((x0_188[1] & 4) != 0)
                    {
                        x0_188[1] = 6;
                    }
                    goto label_1de04;
                }
                if (x0_184[1] == 6)
                {
                    goto label_1ec74;
                }
                cv::write(x0_184, &x0_184[2], 0xc8);
                if ((x0_184[1] & 4) != 0)
                {
                    x0_184[1] = 6;
                }
                goto label_1ddb4;
            }
        label_1de04:
            int64_t* x0_192 = sub_2024c(&var_420, "hand_hold");
            if ((*(*x0_192 + 0x18)() & 1) == 0)
            {
            label_1de54:
                int64_t* x0_196 = sub_2024c(&var_420, "camera_type");
                if ((*(*x0_196 + 0x18)() & 1) == 0)
                {
                label_1dea4:
                    int64_t* x0_200 = sub_2024c(&var_420, "obstacle_size");
                    if ((*(*x0_200 + 0x18)() & 1) == 0)
                    {
                    label_1def4:
                        int64_t* x0_204 = sub_2024c(&var_420, "camera_matrix_rgb");
                        if ((*(*x0_204 + 0x18)() & 1) == 0)
                        {
                        label_1df44:
                            int64_t* x0_208 = sub_2024c(&var_420, "camera_matrix");
                            if ((*(*x0_208 + 0x18)() & 1) == 0)
                            {
                            label_1df94:
                                cv::Mat* x0_212 = sub_2024c(&var_420, &data_54043);
                                if ((*(*x0_212 + 0x18)() & 1) == 0)
                                {
                                label_1dfe4:
                                    cv::Mat* x0_216 = sub_2024c(&var_420, &data_54045);
                                    if ((*(*x0_216 + 0x18)() & 1) == 0)
                                    {
                                    label_1e034:
                                        cv::Mat* x0_220 = sub_2024c(&var_420, &data_54047);
                                        if ((*(*x0_220 + 0x18)() & 1) == 0)
                                        {
                                        label_1e084:
                                            cv::Mat* x0_224 = sub_2024c(&var_420, &data_5404b);
                                            int32_t x0_225 = *(*x0_224 + 0x18)();
                                            if (((x0_225 & 1) != 0 && *(x0_224 + 8) != 6))
                                            {
                                                cv::write(x0_224, (x0_224 + 0x10), &var_2e0);
                                                if ((*(x0_224 + 8) & 4) != 0)
                                                {
                                                    *(x0_224 + 8) = 6;
                                                }
                                            }
                                            if (((x0_225 & 1) == 0 || ((x0_225 & 1) != 0 && *(x0_224 + 8) != 6)))
                                            {
                                                cv::FileStorage::release();
                                                int64_t x8_224 = *var_2b0_2[8];
                                                if (x8_224 != 0)
                                                {
                                                    int32_t temp0_14;
                                                    int32_t i_40;
                                                    do
                                                    {
                                                        temp0_14 = __ldaxr((x8_224 + 0x14));
                                                        i_40 = __stlxr((temp0_14 - 1), (x8_224 + 0x14));
                                                    } while (i_40 != 0);
                                                    if (temp0_14 == 1)
                                                    {
                                                        cv::Mat::deallocate();
                                                    }
                                                }
                                                *var_2b0_2[8] = 0;
                                                __builtin_memset(&s_8, 0, 0x20);
                                                if (*var_2e0[4] >= 1)
                                                {
                                                    int64_t i_41 = 0;
                                                    do
                                                    {
                                                        *(var_2a0_3 + (i_41 << 2)) = 0;
                                                        i_41 = (i_41 + 1);
                                                    } while (i_41 < *var_2e0[4]);
                                                }
                                                if (var_298_3 != &var_290)
                                                {
                                                    cv::fastFree(var_298_3);
                                                }
                                                int64_t x8_228 = *var_250_1[8];
                                                if (x8_228 != 0)
                                                {
                                                    int32_t temp0_15;
                                                    int32_t i_42;
                                                    do
                                                    {
                                                        temp0_15 = __ldaxr((x8_228 + 0x14));
                                                        i_42 = __stlxr((temp0_15 - 1), (x8_228 + 0x14));
                                                    } while (i_42 != 0);
                                                    if (temp0_15 == 1)
                                                    {
                                                        cv::Mat::deallocate();
                                                    }
                                                }
                                                *var_250_1[8] = 0;
                                                __builtin_memset(s, 0, 0x20);
                                                if (*var_280[4] >= 1)
                                                {
                                                    int64_t i_43 = 0;
                                                    do
                                                    {
                                                        *(var_240_2 + (i_43 << 2)) = 0;
                                                        i_43 = (i_43 + 1);
                                                    } while (i_43 < *var_280[4]);
                                                }
                                                if (var_238_2 != var_490)
                                                {
                                                    cv::fastFree(var_238_2);
                                                }
                                                int64_t x8_234 = *var_1f0_1[8];
                                                if (x8_234 != 0)
                                                {
                                                    int32_t temp0_16;
                                                    int32_t i_44;
                                                    do
                                                    {
                                                        temp0_16 = __ldaxr((x8_234 + 0x14));
                                                        i_44 = __stlxr((temp0_16 - 1), (x8_234 + 0x14));
                                                    } while (i_44 != 0);
                                                    if (temp0_16 == 1)
                                                    {
                                                        cv::Mat::deallocate();
                                                    }
                                                }
                                                *var_1f0_1[8] = 0;
                                                __builtin_memset(s_1, 0, 0x20);
                                                if (*var_220[4] >= 1)
                                                {
                                                    int64_t i_45 = 0;
                                                    do
                                                    {
                                                        *(var_1e0_1 + (i_45 << 2)) = 0;
                                                        i_45 = (i_45 + 1);
                                                    } while (i_45 < *var_220[4]);
                                                }
                                                if (var_1d8_1 != var_480)
                                                {
                                                    cv::fastFree(var_1d8_1);
                                                }
                                                int64_t x8_240 = *var_190_5[8];
                                                if (x8_240 != 0)
                                                {
                                                    int32_t temp0_17;
                                                    int32_t i_46;
                                                    do
                                                    {
                                                        temp0_17 = __ldaxr((x8_240 + 0x14));
                                                        i_46 = __stlxr((temp0_17 - 1), (x8_240 + 0x14));
                                                    } while (i_46 != 0);
                                                    if (temp0_17 == 1)
                                                    {
                                                        cv::Mat::deallocate();
                                                    }
                                                }
                                                *var_190_5[8] = 0;
                                                __builtin_memset(&s_12, 0, 0x20);
                                                if (s_11 >= 1)
                                                {
                                                    int64_t i_47 = 0;
                                                    do
                                                    {
                                                        *(var_180_6 + (i_47 << 2)) = 0;
                                                        i_47 = (i_47 + 1);
                                                    } while (i_47 < s_11);
                                                }
                                                if (var_178_6 != var_470)
                                                {
                                                    cv::fastFree(var_178_6);
                                                }
                                                int64_t x8_245 = *var_130_4[8];
                                                if (x8_245 != 0)
                                                {
                                                    int32_t temp0_18;
                                                    int32_t i_48;
                                                    do
                                                    {
                                                        temp0_18 = __ldaxr((x8_245 + 0x14));
                                                        i_48 = __stlxr((temp0_18 - 1), (x8_245 + 0x14));
                                                    } while (i_48 != 0);
                                                    if (temp0_18 == 1)
                                                    {
                                                        cv::Mat::deallocate();
                                                    }
                                                }
                                                *var_130_4[8] = 0;
                                                __builtin_memset(s_2, 0, 0x20);
                                                if (s_13 >= 1)
                                                {
                                                    int64_t i_49 = 0;
                                                    do
                                                    {
                                                        *(var_120_8 + (i_49 << 2)) = 0;
                                                        i_49 = (i_49 + 1);
                                                    } while (i_49 < s_13);
                                                }
                                                if (var_118_8 != var_468)
                                                {
                                                    cv::fastFree(var_118_8);
                                                }
                                                int64_t x8_251 = *var_d0_1[8];
                                                if (x8_251 != 0)
                                                {
                                                    int32_t temp0_19;
                                                    int32_t i_50;
                                                    do
                                                    {
                                                        temp0_19 = __ldaxr((x8_251 + 0x14));
                                                        i_50 = __stlxr((temp0_19 - 1), (x8_251 + 0x14));
                                                    } while (i_50 != 0);
                                                    if (temp0_19 == 1)
                                                    {
                                                        cv::Mat::deallocate();
                                                    }
                                                }
                                                *var_d0_1[8] = 0;
                                                __builtin_memset(s_3, 0, 0x20);
                                                if (*s_14[4] >= 1)
                                                {
                                                    int64_t i_51 = 0;
                                                    do
                                                    {
                                                        *(var_c0 + (i_51 << 2)) = 0;
                                                        i_51 = (i_51 + 1);
                                                    } while (i_51 < *s_14[4]);
                                                }
                                                if (var_b8 != var_460)
                                                {
                                                    cv::fastFree(var_b8);
                                                }
                                                cv::FileStorage::~FileStorage();
                                                if ((var_3e8 & 1) != 0)
                                                {
                                                    operator delete(var_3d8);
                                                }
                                                if (*(x8 + 0x28) != x8_1)
                                                {
                                                    __stack_chk_fail();
                                                    /* no return */
                                                }
                                                return 0;
                                            }
                                            goto label_1e938;
                                        }
                                        if (*(x0_220 + 8) == 6)
                                        {
                                            goto label_1e8dc;
                                        }
                                        cv::write(x0_220, (x0_220 + 0x10), (arg1 + 0x2e0));
                                        if ((*(x0_220 + 8) & 4) != 0)
                                        {
                                            *(x0_220 + 8) = 6;
                                        }
                                        goto label_1e084;
                                    }
                                    if (*(x0_216 + 8) == 6)
                                    {
                                        goto label_1e880;
                                    }
                                    cv::write(x0_216, (x0_216 + 0x10), &var_280);
                                    if ((*(x0_216 + 8) & 4) != 0)
                                    {
                                        *(x0_216 + 8) = 6;
                                    }
                                    goto label_1e034;
                                }
                                if (*(x0_212 + 8) == 6)
                                {
                                    goto label_1e824;
                                }
                                cv::write(x0_212, (x0_212 + 0x10), &var_220);
                                if ((*(x0_212 + 8) & 4) != 0)
                                {
                                    *(x0_212 + 8) = 6;
                                }
                                goto label_1dfe4;
                            }
                            if (x0_208[1] == 6)
                            {
                                goto label_1e7c8;
                            }
                            cv::write(x0_208, &x0_208[2], &var_1c0);
                            if ((x0_208[1] & 4) != 0)
                            {
                                x0_208[1] = 6;
                            }
                            goto label_1df94;
                        }
                        if (x0_204[1] == 6)
                        {
                            goto label_1e76c;
                        }
                        cv::write(x0_204, &x0_204[2], &var_160);
                        if ((x0_204[1] & 4) != 0)
                        {
                            x0_204[1] = 6;
                        }
                        goto label_1df44;
                    }
                    if (x0_200[1] == 6)
                    {
                        goto label_1e710;
                    }
                    cv::write(x0_200, &x0_200[2], &s_14);
                    if ((x0_200[1] & 4) != 0)
                    {
                        x0_200[1] = 6;
                    }
                    goto label_1def4;
                }
                if (x0_196[1] == 6)
                {
                    goto label_1e6b4;
                }
                cv::write(x0_196, &x0_196[2], *(arg1 + 0x350));
                if ((x0_196[1] & 4) != 0)
                {
                    x0_196[1] = 6;
                }
                goto label_1dea4;
            }
            if (x0_192[1] == 6)
            {
                goto label_1e658;
            }
            cv::write(x0_192, &x0_192[2], 0);
            if ((x0_192[1] & 4) != 0)
            {
                x0_192[1] = 6;
            }
            goto label_1de54;
        }
        int64_t* x0_160 = sub_2024c(&var_420, "image_width");
        if ((*(*x0_160 + 0x18)() & 1) != 0)
        {
            if (x0_160[1] == 6)
            {
                goto label_1ed2c;
            }
            cv::write(x0_160, &x0_160[2], 0x140);
            if ((x0_160[1] & 4) != 0)
            {
                x0_160[1] = 6;
            }
            goto label_1dbb0;
        }
    label_1dbb0:
        int64_t* x0_164 = sub_2024c(&var_420, "image_hight");
        int32_t x0_165 = *(*x0_164 + 0x18)();
        if (((x0_165 & 1) != 0 && x0_164[1] != 6))
        {
            cv::write(x0_164, &x0_164[2], 0xf0);
            if ((x0_164[1] & 4) != 0)
            {
                x0_164[1] = 6;
            }
        }
        if (((x0_165 & 1) == 0 || ((x0_165 & 1) != 0 && x0_164[1] != 6)))
        {
            if (*(arg1 + 0x350) == 1)
            {
                goto label_1dc0c;
            }
            goto label_1dca0;
        }
    }
    if (((x0_115 & 1) != 0 && x0_114[1] == 6))
    {
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_235;
        int128_t v0_16;
        x0_235 = operator new(0x20);
        int64_t var_330 = x0_235;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_235, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e430:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_236;
        int128_t v0_17;
        x0_236 = operator new(0x20);
        int64_t var_330_1 = x0_236;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_236, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e48c:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_237;
        int128_t v0_18;
        x0_237 = operator new(0x20);
        int64_t var_330_2 = x0_237;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_237, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e4e8:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_238;
        int128_t v0_19;
        x0_238 = operator new(0x20);
        int64_t var_330_3 = x0_238;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_238, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e544:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_239;
        int128_t v0_20;
        x0_239 = operator new(0x20);
        int64_t var_330_4 = x0_239;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_239, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e5a0:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_240;
        int128_t v0_21;
        x0_240 = operator new(0x20);
        int64_t var_330_5 = x0_240;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_240, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e5fc:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_241;
        int128_t v0_22;
        x0_241 = operator new(0x20);
        int64_t var_330_6 = x0_241;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_241, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e658:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_242;
        int128_t v0_23;
        x0_242 = operator new(0x20);
        int64_t var_330_7 = x0_242;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_242, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e6b4:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_243;
        int128_t v0_24;
        x0_243 = operator new(0x20);
        int64_t var_330_8 = x0_243;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_243, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e710:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_244;
        int128_t v0_25;
        x0_244 = operator new(0x20);
        int64_t var_330_9 = x0_244;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_244, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e76c:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_245;
        int128_t v0_26;
        x0_245 = operator new(0x20);
        int64_t var_330_10 = x0_245;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_245, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e7c8:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_246;
        int128_t v0_27;
        x0_246 = operator new(0x20);
        int64_t var_330_11 = x0_246;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_246, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e824:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_247;
        int128_t v0_28;
        x0_247 = operator new(0x20);
        int64_t var_330_12 = x0_247;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_247, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e880:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_248;
        int128_t v0_29;
        x0_248 = operator new(0x20);
        int64_t var_330_13 = x0_248;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_248, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e8dc:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_249;
        int128_t v0_30;
        x0_249 = operator new(0x20);
        int64_t var_330_14 = x0_249;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_249, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e938:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_250;
        int128_t v0_31;
        x0_250 = operator new(0x20);
        int64_t var_330_15 = x0_250;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_250, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e994:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_251;
        int128_t v0_32;
        x0_251 = operator new(0x20);
        int64_t var_330_16 = x0_251;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_251, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1e9f0:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_252;
        int128_t v0_33;
        x0_252 = operator new(0x20);
        int64_t var_330_17 = x0_252;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_252, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1ea4c:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_253;
        int128_t v0_34;
        x0_253 = operator new(0x20);
        int64_t var_330_18 = x0_253;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_253, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1eaa8:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_254;
        int128_t v0_35;
        x0_254 = operator new(0x20);
        int64_t var_330_19 = x0_254;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_254, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1eb04:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_255;
        int128_t v0_36;
        x0_255 = operator new(0x20);
        int64_t var_330_20 = x0_255;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_255, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1eb60:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_256;
        int128_t v0_37;
        x0_256 = operator new(0x20);
        int64_t var_330_21 = x0_256;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_256, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1ebbc:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_257;
        int128_t v0_38;
        x0_257 = operator new(0x20);
        int64_t var_330_22 = x0_257;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_257, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1ec18:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_258;
        int128_t v0_39;
        x0_258 = operator new(0x20);
        int64_t var_330_23 = x0_258;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_258, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1ec74:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_259;
        int128_t v0_40;
        x0_259 = operator new(0x20);
        int64_t var_330_24 = x0_259;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_259, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1ecd0:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_260;
        int128_t v0_41;
        x0_260 = operator new(0x20);
        int64_t var_330_25 = x0_260;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_260, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    label_1ed2c:
        __builtin_memset(&s_6, 0, 0x18);
        int64_t x0_261;
        int128_t v0_42;
        x0_261 = operator new(0x20);
        int64_t var_330_26 = x0_261;
        s_6 = data_53eb0;
        __builtin_strncpy(x0_261, "No element name has been given", 0x1f);
        cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    }
    __builtin_memset(&s_6, 0, 0x18);
    void* x0_262;
    int128_t v0_43;
    x0_262 = operator new(0x20);
    s_6 = data_53eb0;
    __builtin_strncpy(x0_262, "No element name has been given", 0x1f);
    int64_t x0_263 = cv::error(0xfffffffe, &s_6, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    int64_t x8_260;
    if ((s_6 & 1) == 0)
    {
        x8_260 = *var_2b0_2[8];
    }
    else
    {
        operator delete(x0_262);
        x8_260 = *var_2b0_2[8];
    }
    if ((((s_6 & 1) == 0 && x8_260 != 0) || ((s_6 & 1) != 0 && x8_260 != 0)))
    {
        int32_t temp0_20;
        int32_t i_52;
        do
        {
            temp0_20 = __ldaxr((x8_260 + 0x14));
            i_52 = __stlxr((temp0_20 - 1), (x8_260 + 0x14));
        } while (i_52 != 0);
        if (temp0_20 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_2b0_2[8] = 0;
    __builtin_memset(&s_8, 0, 0x20);
    if (*var_2e0[4] >= 1)
    {
        int64_t i_53 = 0;
        do
        {
            *(var_2a0_3 + (i_53 << 2)) = 0;
            i_53 = (i_53 + 1);
        } while (i_53 < *var_2e0[4]);
    }
    if (var_298_3 != &var_290)
    {
        cv::fastFree(var_298_3);
    }
    int64_t x8_265 = *var_250_1[8];
    if (x8_265 != 0)
    {
        int32_t temp0_21;
        int32_t i_54;
        do
        {
            temp0_21 = __ldaxr((x8_265 + 0x14));
            i_54 = __stlxr((temp0_21 - 1), (x8_265 + 0x14));
        } while (i_54 != 0);
        if (temp0_21 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_250_1[8] = 0;
    __builtin_memset(s, 0, 0x20);
    if (*var_280[4] >= 1)
    {
        int64_t i_55 = 0;
        do
        {
            *(var_240_2 + (i_55 << 2)) = 0;
            i_55 = (i_55 + 1);
        } while (i_55 < *var_280[4]);
    }
    if (var_238_2 != var_490)
    {
        cv::fastFree(var_238_2);
    }
    int64_t x8_271 = *var_1f0_1[8];
    if (x8_271 != 0)
    {
        int32_t temp0_22;
        int32_t i_56;
        do
        {
            temp0_22 = __ldaxr((x8_271 + 0x14));
            i_56 = __stlxr((temp0_22 - 1), (x8_271 + 0x14));
        } while (i_56 != 0);
        if (temp0_22 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_1f0_1[8] = 0;
    __builtin_memset(s_1, 0, 0x20);
    if (*var_220[4] >= 1)
    {
        int64_t i_57 = 0;
        do
        {
            *(var_1e0_1 + (i_57 << 2)) = 0;
            i_57 = (i_57 + 1);
        } while (i_57 < *var_220[4]);
    }
    if (var_1d8_1 != var_480)
    {
        cv::fastFree(var_1d8_1);
    }
    int64_t x8_277 = *var_190_5[8];
    if (x8_277 != 0)
    {
        int32_t temp0_23;
        int32_t i_58;
        do
        {
            temp0_23 = __ldaxr((x8_277 + 0x14));
            i_58 = __stlxr((temp0_23 - 1), (x8_277 + 0x14));
        } while (i_58 != 0);
        if (temp0_23 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_190_5[8] = 0;
    __builtin_memset(&s_12, 0, 0x20);
    if (s_11 >= 1)
    {
        int64_t i_59 = 0;
        do
        {
            *(var_180_6 + (i_59 << 2)) = 0;
            i_59 = (i_59 + 1);
        } while (i_59 < s_11);
    }
    if (var_178_6 != var_470)
    {
        cv::fastFree(var_178_6);
    }
    int64_t x8_282 = *var_130_4[8];
    if (x8_282 != 0)
    {
        int32_t temp0_24;
        int32_t i_60;
        do
        {
            temp0_24 = __ldaxr((x8_282 + 0x14));
            i_60 = __stlxr((temp0_24 - 1), (x8_282 + 0x14));
        } while (i_60 != 0);
        if (temp0_24 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_130_4[8] = 0;
    __builtin_memset(s_2, 0, 0x20);
    if (s_13 >= 1)
    {
        int64_t i_61 = 0;
        do
        {
            *(var_120_8 + (i_61 << 2)) = 0;
            i_61 = (i_61 + 1);
        } while (i_61 < s_13);
    }
    if (var_118_8 != var_468)
    {
        cv::fastFree(var_118_8);
    }
    int64_t x8_288 = *var_d0_1[8];
    if (x8_288 != 0)
    {
        int32_t temp0_25;
        int32_t i_62;
        do
        {
            temp0_25 = __ldaxr((x8_288 + 0x14));
            i_62 = __stlxr((temp0_25 - 1), (x8_288 + 0x14));
        } while (i_62 != 0);
        if (temp0_25 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_d0_1[8] = 0;
    __builtin_memset(&s_15, 0, 0x20);
    if (*s_14[4] >= 1)
    {
        int64_t i_63 = 0;
        do
        {
            *(var_c0 + (i_63 << 2)) = 0;
            i_63 = (i_63 + 1);
        } while (i_63 < *s_14[4]);
    }
    if (var_b8 != var_460)
    {
        cv::fastFree(var_b8);
    }
    cv::FileStorage::~FileStorage();
    if ((var_3e8 & 1) == 0)
    {
        do
        {
            _Unwind_Resume(x0_263);
            operator delete(s_15);
        } while ((var_3e8 & 1) == 0);
    }
    operator delete(var_3d8);
    sub_20ac4(_Unwind_Resume(x0_263));
    /* no return */
}

void sub_1ee70(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_1f6fc(int64_t arg1, int64_t arg2 @ x28, void* arg3 @ x29, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, int64_t arg10, int64_t arg11, char arg12, void* arg13, int32_t arg14, int64_t arg15, int64_t arg16, void* arg17, int32_t arg18, int64_t arg19, int64_t arg20, void* arg21, int32_t arg22, int64_t arg23, int64_t arg24, void* arg25, int32_t arg26, int64_t arg27, int64_t arg28, void* arg29, int32_t arg30, int64_t arg31, int64_t arg32, void* arg33) __noreturn
{
    if (arg15 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg15 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg15 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg15 = 0;
    int64_t s;
    __builtin_memset(s, 0, 0x20);
    if (arg14 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg16 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg14);
    }
    if (arg17 != arg2)
    {
        cv::fastFree(arg17);
    }
    if (arg19 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg19 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg19 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg19 = 0;
    __builtin_memset(arg4, 0, 0x20);
    if (arg18 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg20 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg18);
    }
    if (arg21 != arg5)
    {
        cv::fastFree(arg21);
    }
    if (arg23 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg23 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg23 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg23 = 0;
    __builtin_memset(arg6, 0, 0x20);
    if (arg22 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg24 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg22);
    }
    if (arg25 != arg7)
    {
        cv::fastFree(arg25);
    }
    if (arg27 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((arg27 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (arg27 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg27 = 0;
    int64_t x23;
    __builtin_memset((x23 + 0xd0), 0, 0x20);
    if (arg26 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg28 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg26);
    }
    if (arg29 != arg9)
    {
        cv::fastFree(arg29);
    }
    if (arg31 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((arg31 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (arg31 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg31 = 0;
    __builtin_memset(arg8, 0, 0x20);
    if (arg30 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg32 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg30);
    }
    if (arg33 != arg10)
    {
        cv::fastFree(arg33);
    }
    int64_t x8_27 = *(arg3 - 0xb8);
    if (x8_27 != 0)
    {
        int32_t temp0_7;
        int32_t i_10;
        do
        {
            temp0_7 = __ldaxr((x8_27 + 0x14));
            i_10 = __stlxr((temp0_7 - 1), (x8_27 + 0x14));
        } while (i_10 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 - 0xb8) = 0;
    int64_t x22;
    __builtin_memset((x22 + 0x70), 0, 0x20);
    if (*(arg3 - 0xec) >= 1)
    {
        int64_t x8_30 = *(arg3 - 0xb0);
        int64_t i_11 = 0;
        do
        {
            *(x8_30 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < *(arg3 - 0xec));
    }
    void* x0_6 = *(arg3 - 0xa8);
    if (x0_6 != arg11)
    {
        cv::fastFree(x0_6);
    }
    cv::FileStorage::~FileStorage();
    if ((arg12 & 1) == 0)
    {
        do
        {
            _Unwind_Resume(arg1);
            operator delete(*(arg3 - 0xe0));
        } while ((arg12 & 1) == 0);
    }
    operator delete(arg13);
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_1f71c(int64_t arg1, int64_t arg2 @ x24, void* arg3 @ x29, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8, int64_t arg9, char arg10, void* arg11, int32_t arg12, int64_t arg13, int64_t arg14, void* arg15, int32_t arg16, int64_t arg17, int64_t arg18, void* arg19, int32_t arg20, int64_t arg21, int64_t arg22, void* arg23, int32_t arg24, int64_t arg25, int64_t arg26, void* arg27) __noreturn
{
    if (arg13 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg13 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg13 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg13 = 0;
    int64_t x27;
    __builtin_memset((x27 + 0x70), 0, 0x20);
    if (arg12 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg14 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg12);
    }
    if (arg15 != arg2)
    {
        cv::fastFree(arg15);
    }
    if (arg17 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg17 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg17 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg17 = 0;
    __builtin_memset(arg4, 0, 0x20);
    if (arg16 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg18 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg16);
    }
    if (arg19 != arg5)
    {
        cv::fastFree(arg19);
    }
    if (arg21 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg21 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg21 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg21 = 0;
    int64_t x23;
    __builtin_memset((x23 + 0xd0), 0, 0x20);
    if (arg20 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg22 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg20);
    }
    if (arg23 != arg7)
    {
        cv::fastFree(arg23);
    }
    if (arg25 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((arg25 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (arg25 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg25 = 0;
    __builtin_memset(arg6, 0, 0x20);
    if (arg24 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg26 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg24);
    }
    if (arg27 != arg8)
    {
        cv::fastFree(arg27);
    }
    int64_t x8_21 = *(arg3 - 0xb8);
    if (x8_21 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((x8_21 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (x8_21 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 - 0xb8) = 0;
    int64_t x22;
    __builtin_memset((x22 + 0x70), 0, 0x20);
    if (*(arg3 - 0xec) >= 1)
    {
        int64_t x8_24 = *(arg3 - 0xb0);
        int64_t i_9 = 0;
        do
        {
            *(x8_24 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < *(arg3 - 0xec));
    }
    void* x0_5 = *(arg3 - 0xa8);
    if (x0_5 != arg9)
    {
        cv::fastFree(x0_5);
    }
    cv::FileStorage::~FileStorage();
    if ((arg10 & 1) == 0)
    {
        do
        {
            _Unwind_Resume(arg1);
            operator delete(*(arg3 - 0xe0));
        } while ((arg10 & 1) == 0);
    }
    operator delete(arg11);
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_1f790(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void* ground_filter::Plane_Seg::~Plane_Seg(int64_t* arg1)
{
    void* x20 = arg1[0x295];
    if (x20 != 0)
    {
        void* x21_1 = arg1[0x296];
        void* x0_2;
        if (x21_1 == x20)
        {
            x0_2 = x20;
        }
        else
        {
            do
            {
                int64_t x8_1 = *(x21_1 - 0x50);
                if (x8_1 != 0)
                {
                    int32_t temp0_1;
                    int32_t i;
                    do
                    {
                        temp0_1 = __ldaxr((x8_1 + 0x14));
                        i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
                    } while (i != 0);
                    if (temp0_1 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int32_t x8_3 = *(x21_1 - 0x84);
                int128_t v0;
                v0 = 0;
                *v0[8] = 0;
                *(x21_1 - 0x50) = 0;
                __builtin_memset((x21_1 - 0x78), 0, 0x20);
                if (x8_3 >= 1)
                {
                    int64_t x8_4 = *(x21_1 - 0x48);
                    int64_t i_1 = 0;
                    do
                    {
                        *(x8_4 + (i_1 << 2)) = 0;
                        i_1 = (i_1 + 1);
                    } while (i_1 < *(x21_1 - 0x84));
                }
                void* x0_1 = *(x21_1 - 0x40);
                if (x0_1 != (x21_1 - 0x38))
                {
                    cv::fastFree(x0_1);
                }
                x21_1 = (x21_1 - 0xb0);
            } while (x21_1 != x20);
            x0_2 = arg1[0x295];
        }
        arg1[0x296] = x20;
        operator delete(x0_2);
    }
    void* x0_3 = arg1[0x291];
    if (x0_3 != 0)
    {
        arg1[0x292] = x0_3;
        operator delete(x0_3);
    }
    std::__ndk1::random_device::~random_device();
    void* x0_5 = *arg1;
    if (x0_5 == 0)
    {
        return x0_5;
    }
    arg1[1] = x0_5;
    /* tailcall */
    return operator delete(x0_5);
}

void sub_1fd58(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_1fd5c(int64_t* arg1)
{
    void* x21 = *arg1;
    if (x21 == 0)
    {
        return;
    }
    void* x22 = arg1[1];
    void* x0_2;
    if (x22 == x21)
    {
        x0_2 = x21;
    }
    else
    {
        bool cond:1_1;
        do
        {
            int64_t x8_1 = *(x22 - 0x28);
            if (x8_1 != 0)
            {
                int32_t temp0_1;
                int32_t i;
                do
                {
                    temp0_1 = __ldaxr((x8_1 + 0x14));
                    i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
                } while (i != 0);
                if (temp0_1 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int32_t x8_3 = *(x22 - 0x5c);
            int128_t v0;
            v0 = 0;
            *v0[8] = 0;
            *(x22 - 0x28) = 0;
            __builtin_memset((x22 - 0x50), 0, 0x20);
            if (x8_3 >= 1)
            {
                int64_t x8_4 = *(x22 - 0x20);
                int64_t i_1 = 0;
                do
                {
                    *(x8_4 + (i_1 << 2)) = 0;
                    i_1 = (i_1 + 1);
                } while (i_1 < *(x22 - 0x5c));
            }
            void* x0_1 = *(x22 - 0x18);
            if (x0_1 != (x22 - 0x10))
            {
                cv::fastFree(x0_1);
            }
            cond:1_1 = (x22 - 0x60) != x21;
            x22 = (x22 - 0x60);
        } while (cond:1_1);
        x0_2 = *arg1;
    }
    arg1[1] = x21;
    /* tailcall */
    return operator delete(x0_2);
}

void sub_1fe34(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void* feasibal_region::RunOutputParam::~RunOutputParam(void* arg1)
{
    int64_t x8 = *(arg1 + 0x180);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x180) = 0;
    __builtin_memset((arg1 + 0x158), 0, 0x20);
    if (*(arg1 + 0x14c) >= 1)
    {
        int64_t x8_4 = *(arg1 + 0x188);
        int64_t i_1 = 0;
        do
        {
            *(x8_4 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0x14c));
    }
    void* x0_1 = *(arg1 + 0x190);
    if (x0_1 != (arg1 + 0x198))
    {
        cv::fastFree(x0_1);
    }
    int64_t x8_6 = *(arg1 + 0x120);
    if (x8_6 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_6 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_6 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x120) = 0;
    int32_t x8_9 = *(arg1 + 0xec);
    __builtin_memset((arg1 + 0xf8), 0, 0x20);
    if (x8_9 >= 1)
    {
        int64_t x8_10 = *(arg1 + 0x128);
        int64_t i_3 = 0;
        do
        {
            *(x8_10 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *(arg1 + 0xec));
    }
    void* x0_3 = *(arg1 + 0x130);
    if (x0_3 != (arg1 + 0x138))
    {
        cv::fastFree(x0_3);
    }
    void* x0_4 = *(arg1 + 0xd0);
    if (x0_4 != 0)
    {
        *(arg1 + 0xd8) = x0_4;
        operator delete(x0_4);
    }
    void* x0_5 = *(arg1 + 0xb8);
    if (x0_5 != 0)
    {
        *(arg1 + 0xc0) = x0_5;
        operator delete(x0_5);
    }
    void* x0_6 = *(arg1 + 0xa0);
    if (x0_6 != 0)
    {
        *(arg1 + 0xa8) = x0_6;
        operator delete(x0_6);
    }
    void* x0_7 = *(arg1 + 0x88);
    if (x0_7 != 0)
    {
        *(arg1 + 0x90) = x0_7;
        operator delete(x0_7);
    }
    void* x0_8 = *(arg1 + 0x70);
    if (x0_8 != 0)
    {
        *(arg1 + 0x78) = x0_8;
        operator delete(x0_8);
    }
    void* x0_9 = *(arg1 + 0x58);
    if (x0_9 != 0)
    {
        *(arg1 + 0x60) = x0_9;
        operator delete(x0_9);
    }
    void* x0_10 = *(arg1 + 0x40);
    if (x0_10 == 0)
    {
        return x0_10;
    }
    *(arg1 + 0x48) = x0_10;
    /* tailcall */
    return operator delete(x0_10);
}

void sub_1ffc0(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void* feasibal_region::RunInputParam::~RunInputParam(void* arg1)
{
    int64_t x8 = *(arg1 + 0xf8);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg1 + 0xc4);
    *(arg1 + 0xf8) = 0;
    __builtin_memset((arg1 + 0xd0), 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = *(arg1 + 0x100);
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0xc4));
    }
    void* x0_1 = *(arg1 + 0x108);
    if (x0_1 != (arg1 + 0x110))
    {
        cv::fastFree(x0_1);
    }
    int64_t x8_5 = *(arg1 + 0x98);
    if (x8_5 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_5 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_5 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_7 = *(arg1 + 0x64);
    *(arg1 + 0x98) = 0;
    __builtin_memset((arg1 + 0x70), 0, 0x20);
    if (x8_7 >= 1)
    {
        int64_t x8_8 = *(arg1 + 0xa0);
        int64_t i_3 = 0;
        do
        {
            *(x8_8 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *(arg1 + 0x64));
    }
    void* x0_3 = *(arg1 + 0xa8);
    if (x0_3 != (arg1 + 0xb0))
    {
        cv::fastFree(x0_3);
    }
    int64_t x8_10 = *(arg1 + 0x38);
    if (x8_10 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((x8_10 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (x8_10 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_12 = *(arg1 + 4);
    *(arg1 + 0x38) = 0;
    __builtin_memset((arg1 + 0x10), 0, 0x20);
    if (x8_12 >= 1)
    {
        int64_t x8_13 = *(arg1 + 0x40);
        int64_t i_5 = 0;
        do
        {
            *(x8_13 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < *(arg1 + 4));
    }
    void* x0_5 = *(arg1 + 0x48);
    if (x0_5 != (arg1 + 0x50))
    {
        x0_5 = cv::fastFree(x0_5);
    }
    return x0_5;
}

void sub_20134(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t sub_20140(char* arg1, char* arg2, char* arg3 @ x8)
{
    __builtin_memset(arg3, 0, 0x18);
    uint64_t x8 = *arg1;
    uint64_t x21;
    int64_t x22;
    void* x23_1;
    if ((x8 & 1) != 0)
    {
        x21 = *(arg1 + 8);
        int64_t x0_3 = strlen(arg2);
        x23_1 = *(arg1 + 0x10);
        x22 = x0_3;
    }
    else
    {
        x21 = (x8 >> 1);
        x22 = strlen(arg2);
        x23_1 = &arg1[1];
    }
    int64_t x8_1 = (x21 + x22);
    if (x8_1 < -0x10)
    {
        int64_t x0_10 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        if ((*arg3 & 1) != 0)
        {
            operator delete(*(arg3 + 0x10));
        }
        cv::Mat* x0_13;
        char* x1_2;
        x0_13 = _Unwind_Resume(x0_10);
        /* tailcall */
        return sub_2024c(x0_13, x1_2);
    }
    void* x24_1;
    if (x8_1 > 0x16)
    {
        uint64_t x25_1 = ((x8_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_8 = operator new(x25_1);
        x24_1 = x0_8;
        *(arg3 + 8) = x21;
        *(arg3 + 0x10) = x0_8;
        *arg3 = (x25_1 | 1);
    }
    else
    {
        *arg3 = (x21 << 1);
        x24_1 = &arg3[1];
    }
    if (((x8_1 > 0x16 && x21 != 0) || (x8_1 <= 0x16 && x21 != 0)))
    {
        memcpy(x24_1, x23_1, x21);
    }
    *(x24_1 + x21) = 0;
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg3, arg2);
}

int64_t sub_2024c(cv::Mat* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    size_t x0_1 = strlen(arg2);
    if (x0_1 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_50_1;
        void* x22_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x23_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x23_1);
            x22_1 = x0_3;
            size_t var_58_1 = x0_1;
            var_50_1 = x0_3;
            s = (x23_1 | 1);
        }
        else
        {
            x22_1 = (&s | 1);
            s = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x22_1, arg2, x0_1);
        }
        *(x22_1 + x0_1) = 0;
        int64_t x0_6 = cv::operator<<(arg1, &s);
        if ((s & 1) != 0)
        {
            operator delete(var_50_1);
        }
        if (*(x24 + 0x28) == x8)
        {
            return x0_6;
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t sub_20340(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    _Unwind_Resume(arg1);
    /* tailcall */
    return cvflann::anyimpl::base_any_policy::~base_any_policy();
}

int64_t cvflann::anyimpl::base_any_policy::~base_any_policy() __pure
{
    return;
}

void* cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::static_delete(int64_t arg1, int64_t* arg2)
{
    void* x0 = *arg2;
    if (x0 != 0)
    {
        x0 = operator delete(x0);
    }
    *arg2 = 0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::copy_from_value(int64_t arg1, int64_t arg2, int64_t* arg3)
{
    int64_t x0 = operator new(1);
    *arg3 = x0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::clone(int64_t arg1, int64_t arg2, int64_t* arg3)
{
    int64_t x0 = operator new(1);
    *arg3 = x0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::move() __pure
{
    return;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::get_size() __pure
{
    return 1;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::anyimpl::empty_any>::type() __pure
{
    return _typeinfo_for_cvflann::anyimpl::empty_any;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::print(int64_t arg1, cv::Mat* arg2)
{
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg2, "[empty_any]", 0xb);
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::anyimpl::empty_any>::~big_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::copy_from_value(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<char const*>::get_size() __pure
{
    return 8;
}

int64_t cvflann::anyimpl::typed_base_any_policy<char const*>::type() __pure
{
    return _typeinfo_for_char const*;
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::print(int64_t arg1, cv::Mat* arg2, int64_t* arg3)
{
    char* x19 = *arg3;
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg2, x19, strlen(x19));
}

int64_t cvflann::anyimpl::small_any_policy<char const*>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::copy_from_value(int64_t, int32_t* arg2, int32_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<int32_t>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<int32_t>::type() __pure
{
    return _typeinfo_for_int32_t;
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::print(int64_t arg1, int32_t arg2, int32_t* arg3)
{
    *arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::small_any_policy<int32_t>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<float>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<float>::copy_from_value(int64_t, int32_t* arg2, int32_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<float>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<float>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<float>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<float>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<float>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<float>::type() __pure
{
    return _typeinfo_for_float;
}

int64_t cvflann::anyimpl::small_any_policy<float>::print(int64_t arg1, int64_t arg2, int32_t* arg3)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(*arg3);
}

int64_t cvflann::anyimpl::small_any_policy<float>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<bool>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::copy_from_value(int64_t, char* arg2, char* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<bool>::get_size() __pure
{
    return 1;
}

int64_t cvflann::anyimpl::typed_base_any_policy<bool>::type() __pure
{
    return _typeinfo_for_bool;
}

int64_t cvflann::anyimpl::small_any_policy<bool>::print(int64_t arg1, bool arg2, char* arg3)
{
    *arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::small_any_policy<bool>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void* cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::static_delete(int64_t arg1, int64_t* arg2)
{
    void* x0 = *arg2;
    if (x0 != 0)
    {
        x0 = operator delete(x0);
    }
    *arg2 = 0;
    return x0;
}

int32_t* cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::copy_from_value(int64_t arg1, int32_t* arg2, int32_t** arg3)
{
    int32_t* x0 = operator new(4);
    *x0 = *arg2;
    *arg3 = x0;
    return x0;
}

int32_t* cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::clone(int64_t arg1, int64_t* arg2, int32_t** arg3)
{
    int32_t* x0 = operator new(4);
    *x0 = **arg2;
    *arg3 = x0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    **arg3 = **arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::flann_algorithm_t>::type() __pure
{
    return _typeinfo_for_cvflann::flann_algorithm_t;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::print(int64_t arg1, int32_t arg2, int64_t* arg3)
{
    **arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_algorithm_t>::~big_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void* cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::static_delete(int64_t arg1, int64_t* arg2)
{
    void* x0 = *arg2;
    if (x0 != 0)
    {
        x0 = operator delete(x0);
    }
    *arg2 = 0;
    return x0;
}

int32_t* cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::copy_from_value(int64_t arg1, int32_t* arg2, int32_t** arg3)
{
    int32_t* x0 = operator new(4);
    *x0 = *arg2;
    *arg3 = x0;
    return x0;
}

int32_t* cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::clone(int64_t arg1, int64_t* arg2, int32_t** arg3)
{
    int32_t* x0 = operator new(4);
    *x0 = **arg2;
    *arg3 = x0;
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    **arg3 = **arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<cvflann::flann_centers_init_t>::type() __pure
{
    return _typeinfo_for_cvflann::flann_centers_init_t;
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::print(int64_t arg1, int32_t arg2, int64_t* arg3)
{
    **arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::big_any_policy<cvflann::flann_centers_init_t>::~big_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::static_delete() __pure
{
    return;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::copy_from_value(int64_t, int32_t* arg2, int32_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::clone(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::move(int64_t, int64_t* arg2, int64_t* arg3)
{
    *arg3 = *arg2;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::get_value(int64_t arg1, int64_t arg2) __pure
{
    return arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<uint32_t>::get_size() __pure
{
    return 4;
}

int64_t cvflann::anyimpl::typed_base_any_policy<uint32_t>::type() __pure
{
    return _typeinfo_for_uint32_t;
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::print(int64_t arg1, uint32_t arg2, int32_t* arg3)
{
    *arg3;
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg2);
}

int64_t cvflann::anyimpl::small_any_policy<uint32_t>::~small_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::static_delete(int64_t arg1, int64_t* arg2)
{
    char* x20 = *arg2;
    if (x20 != 0)
    {
        if ((*x20 & 1) != 0)
        {
            operator delete(*(x20 + 0x10));
        }
        operator delete(x20);
    }
    *arg2 = 0;
}

int128_t* cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::copy_from_value(int64_t arg1, char* arg2, int128_t** arg3)
{
    int128_t* s;
    int128_t v0;
    s = operator new(0x18);
    __builtin_memset(s, 0, 0x18);
    int128_t* s_1 = s;
    if ((*arg2 & 1) == 0)
    {
        s_1[1] = *(arg2 + 0x10);
        *s_1 = *arg2;
    }
    else
    {
        size_t x21_1 = *(arg2 + 8);
        if (x21_1 < -0x10)
        {
            int64_t x0_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            operator delete(s_1);
            int128_t* x0_7;
            int64_t* x1_1;
            int128_t** x2_1;
            x0_7 = _Unwind_Resume(x0_4);
            /* tailcall */
            return cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::clone(x0_7, x1_1, x2_1);
        }
        int64_t x22_1 = *(arg2 + 0x10);
        void* x23_2;
        if (x21_1 >= 0x17)
        {
            uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x24_1);
            x23_2 = x0_1;
            *(s_1 + 8) = x21_1;
            s_1[1] = x0_1;
            *s_1 = (x24_1 | 1);
        }
        else
        {
            *s_1 = (x21_1 << 1);
            x23_2 = (s_1 + 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            s = memcpy(x23_2, x22_1, x21_1);
        }
        *(x23_2 + x21_1) = 0;
    }
    *arg3 = s_1;
    return s;
}

int128_t* cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::clone(int64_t arg1, int64_t* arg2, int128_t** arg3)
{
    int128_t* s;
    int128_t v0;
    s = operator new(0x18);
    char* x8 = *arg2;
    __builtin_memset(s, 0, 0x18);
    int128_t* s_1 = s;
    if ((*x8 & 1) == 0)
    {
        s_1[1] = *(x8 + 0x10);
        *s_1 = *x8;
    }
    else
    {
        size_t x21_1 = *(x8 + 8);
        if (x21_1 < -0x10)
        {
            int64_t x0_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            operator delete(s_1);
            char* x0_7;
            char** x1_1;
            int64_t* x2_1;
            x0_7 = _Unwind_Resume(x0_4);
            /* tailcall */
            return cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::move(x0_7, x1_1, x2_1);
        }
        int64_t x22_1 = *(x8 + 0x10);
        void* x23_2;
        if (x21_1 >= 0x17)
        {
            uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x24_1);
            x23_2 = x0_1;
            *(s_1 + 8) = x21_1;
            s_1[1] = x0_1;
            *s_1 = (x24_1 | 1);
        }
        else
        {
            *s_1 = (x21_1 << 1);
            x23_2 = (s_1 + 1);
        }
        if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
        {
            s = memcpy(x23_2, x22_1, x21_1);
        }
        *(x23_2 + x21_1) = 0;
    }
    *arg3 = s_1;
    return s;
}

char* cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::move(int64_t arg1, char** arg2, int64_t* arg3)
{
    char* x0 = *arg3;
    if ((*x0 & 1) != 0)
    {
        operator delete(*(x0 + 0x10));
        x0 = *arg3;
    }
    char* x8_1 = *arg2;
    if (x0 != x8_1)
    {
        *(x8_1 + 8);
        uint64_t x1;
        if ((*x8_1 & 1) != 0)
        {
            x1 = *(x8_1 + 0x10);
        }
        else
        {
            x1 = &x8_1[1];
        }
        x0 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(x0, x1);
    }
    return x0;
}

int64_t cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::get_value(int64_t arg1, int64_t* arg2)
{
    return *arg2;
}

int64_t cvflann::anyimpl::typed_base_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::get_size() __pure
{
    return 0x18;
}

int64_t cvflann::anyimpl::typed_base_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::type() __pure
{
    return _typeinfo_for_std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >;
}

int64_t cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::print(int64_t arg1, cv::Mat* arg2, int64_t* arg3)
{
    char* x8 = *arg3;
    void* x20;
    if ((*x8 & 1) != 0)
    {
        x20 = *(x8 + 0x10);
    }
    else
    {
        x20 = &x8[1];
    }
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg2, x20, strlen(x20));
}

int64_t cvflann::anyimpl::big_any_policy<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >::~big_any_policy(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void sub_20ac4(void* arg1) __noreturn
{
    __cxa_begin_catch(arg1);
    std::terminate();
    /* no return */
}

void* std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(int64_t* arg1, void* arg2, void* arg3)
{
    int64_t x8 = arg1[2];
    void* x0 = *arg1;
    int64_t x22 = (((arg3 - arg2) >> 2) * -0x5555555555555555);
    void* x21 = arg2;
    void* x8_12;
    if (x22 <= (((x8 - x0) >> 2) * -0x5555555555555555))
    {
        x8_12 = arg1[1];
        int64_t x11_1 = (x8_12 - x0);
        int64_t x10_8 = ((x11_1 >> 2) * -0x5555555555555555);
        void* x9_4 = (x21 + x11_1);
        void* x11_2;
        if (x22 > x10_8)
        {
            x11_2 = x9_4;
        }
        else
        {
            x11_2 = arg3;
        }
        int128_t v1;
        int128_t v2;
        int128_t v3;
        int128_t v4;
        int128_t v5;
        if (x11_2 != x21)
        {
            uint64_t x14_1 = (((x11_2 - 0xc) - x21) / 0xc);
            void* x12_4 = x21;
            if ((x14_1 + 1) < 8)
            {
            label_20cf4:
                do
                {
                    *x0 = *x12_4;
                    *(x0 + 4) = *(x12_4 + 4);
                    int32_t x13_4 = *(x12_4 + 8);
                    x12_4 = (x12_4 + 0xc);
                    *(x0 + 8) = x13_4;
                    x0 = (x0 + 0xc);
                } while (x12_4 != x11_2);
            }
            else
            {
                if (x0 < (x21 + (0xc + (x14_1 * 0xc))))
                {
                    x12_4 = x21;
                    if ((x0 + (0xc + (x14_1 * 0xc))) > x21)
                    {
                        goto label_20cf4;
                    }
                }
                int64_t i_8 = ((x14_1 + 1) & 0x3ffffffffffffff8);
                int64_t x12_8 = (i_8 * 0xc);
                void* x15_1 = x0;
                x0 = (x0 + x12_8);
                x12_4 = (x21 + x12_8);
                int64_t i_5 = i_8;
                void* x17_1 = x21;
                int64_t i;
                do
                {
                    v1 = *(x17_1 + 0x10);
                    v2 = *(x17_1 + 0x20);
                    v3 = *(x17_1 + 0x30);
                    v4 = *(x17_1 + 0x40);
                    v5 = *(x17_1 + 0x50);
                    i = i_5;
                    i_5 = (i_5 - 8);
                    *x15_1 = *x17_1;
                    *(x15_1 + 0x10) = v1;
                    *(x15_1 + 0x20) = v2;
                    *(x15_1 + 0x30) = v3;
                    *(x15_1 + 0x40) = v4;
                    *(x15_1 + 0x50) = v5;
                    x15_1 = (x15_1 + 0x60);
                    x17_1 = (x17_1 + 0x60);
                } while (i != 8);
                if ((x14_1 + 1) != i_8)
                {
                    goto label_20cf4;
                }
            }
        }
        if (x22 <= x10_8)
        {
            arg1[1] = x0;
        label_20e50:
            return x0;
        }
        if (x11_2 == arg3)
        {
            goto label_20e50;
        }
        int64_t x12_9 = !(x10_8);
        if (((((arg3 + (x12_9 * 0xc)) - x21) / 0xc) + 1) < 8)
        {
        label_20de8:
            do
            {
                *x8_12 = *x9_4;
                *(x8_12 + 4) = *(x9_4 + 4);
                int32_t x10_13 = *(x9_4 + 8);
                x9_4 = (x9_4 + 0xc);
                *(x8_12 + 8) = x10_13;
                x8_12 = (x8_12 + 0xc);
            } while (x9_4 != arg3);
        }
        else
        {
            uint64_t x12_13 = (((arg3 + (x12_9 * 0xc)) - x21) / 0xc);
            if ((x8_12 < ((x21 + ((x10_8 + x12_13) * 0xc)) + 0xc) && x9_4 < ((x8_12 + (x12_13 * 0xc)) + 0xc)))
            {
                goto label_20de8;
            }
            int64_t i_7 = (((((arg3 + (x12_9 * 0xc)) - x21) / 0xc) + 1) & 0x3ffffffffffffff8);
            int64_t x14_6 = (i_7 * 0xc);
            void* x13_5 = x8_12;
            x8_12 = (x8_12 + x14_6);
            x9_4 = (x9_4 + x14_6);
            void* x10_10 = ((x21 + (x10_8 * 0xc)) + 0x30);
            int64_t i_4 = i_7;
            int64_t i_1;
            do
            {
                v1 = *(x10_10 - 0x20);
                v2 = *(x10_10 - 0x10);
                v3 = *x10_10;
                v4 = *(x10_10 + 0x10);
                v5 = *(x10_10 + 0x20);
                i_1 = i_4;
                i_4 = (i_4 - 8);
                *x13_5 = *(x10_10 - 0x30);
                *(x13_5 + 0x10) = v1;
                *(x13_5 + 0x20) = v2;
                *(x13_5 + 0x30) = v3;
                *(x13_5 + 0x40) = v4;
                *(x13_5 + 0x50) = v5;
                x13_5 = (x13_5 + 0x60);
                x10_10 = (x10_10 + 0x60);
            } while (i_1 != 8);
            if (((((arg3 + (x12_9 * 0xc)) - x21) / 0xc) + 1) != i_7)
            {
                goto label_20de8;
            }
        }
    }
    else
    {
        if (x0 != 0)
        {
            arg1[1] = x0;
            operator delete(x0);
            x8 = 0;
            __builtin_memset(arg1, 0, 0x18);
        }
        int64_t x9_1 = 0x1555555555555555;
        if (x22 > 0x1555555555555555)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
            /* tailcall */
            return std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        int64_t x8_2 = ((x8 >> 2) * -0x5555555555555555);
        if (x8_2 <= 0xaaaaaaaaaaaaaa9)
        {
            int64_t x8_3 = (x8_2 << 1);
            if (x8_3 < x22)
            {
                x9_1 = x22;
            }
            else
            {
                x9_1 = x8_3;
            }
        }
        int64_t x22_1 = (x9_1 * 0xc);
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_1;
        int128_t v3_1;
        int128_t v4_1;
        int128_t v5_1;
        x0 = operator new(x22_1);
        *arg1 = x0;
        arg1[1] = x0;
        arg1[2] = (x0 + x22_1);
        if (x21 == arg3)
        {
            goto label_20e50;
        }
        uint64_t x8_9 = (((arg3 - 0xc) - x21) / 0xc);
        int64_t* x9_3;
        if (((x8_9 + 1) < 8 || (((x8_9 + 1) >= 8 && x0 < (x21 + (0xc + (x8_9 * 0xc)))) && (x0 + (0xc + (x8_9 * 0xc))) > x21)))
        {
            x8_12 = x0;
            x9_3 = x21;
        label_20c04:
            do
            {
                *x8_12 = *x9_3;
                int32_t x10_6 = x9_3[1];
                x9_3 = (x9_3 + 0xc);
                *(x8_12 + 8) = x10_6;
                x8_12 = (x8_12 + 0xc);
            } while (x9_3 != arg3);
        }
        if (((x8_9 + 1) >= 8 && (x0 >= (x21 + (0xc + (x8_9 * 0xc))) || (x0 < (x21 + (0xc + (x8_9 * 0xc))) && (x0 + (0xc + (x8_9 * 0xc))) <= x21))))
        {
            int64_t i_6 = ((x8_9 + 1) & 0x3ffffffffffffff8);
            int64_t x9_5 = (i_6 * 0xc);
            x8_12 = (x0 + x9_5);
            x9_3 = (x21 + x9_5);
            int64_t i_3 = i_6;
            int64_t i_2;
            do
            {
                v1_1 = *(x21 + 0x10);
                v2_1 = *(x21 + 0x20);
                v3_1 = *(x21 + 0x30);
                v4_1 = *(x21 + 0x40);
                v5_1 = *(x21 + 0x50);
                i_2 = i_3;
                i_3 = (i_3 - 8);
                *x0 = *x21;
                *(x0 + 0x10) = v1_1;
                *(x0 + 0x20) = v2_1;
                *(x0 + 0x30) = v3_1;
                *(x0 + 0x40) = v4_1;
                *(x0 + 0x50) = v5_1;
                x0 = (x0 + 0x60);
                x21 = (x21 + 0x60);
            } while (i_2 != 8);
            if ((x8_9 + 1) != i_6)
            {
                goto label_20c04;
            }
        }
    }
    arg1[1] = x8_12;
    goto label_20e50;
}

void std::__ndk1::__vector_base_common<true>::__throw_length_error() __noreturn
{
    sub_20e70();
    /* no return */
}

void sub_20e70() __noreturn
{
    char* thrown_exception = __cxa_allocate_exception(0x10);
    sub_20ec0(thrown_exception);
    __cxa_throw(thrown_exception, _typeinfo_for_std::length_error, std::length_error::~length_error);
    /* no return */
}

int64_t sub_20ec0(char* arg1)
{
    int64_t x0 = std::logic_error::logic_error(arg1);
    *arg1 = (_vtable_for_std::length_error + 0x10);
    return x0;
}

void std::__ndk1::__basic_string_common<true>::__throw_length_error() __noreturn
{
    sub_20e70();
    /* no return */
}

int64_t* std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        void* x22_1 = (arg1 + *x8_2);
        int32_t x5_1 = *(x22_1 + 0x90);
        int64_t* x23_1 = *(x22_1 + 0x28);
        int32_t x26_1 = *(x22_1 + 8);
        if (x5_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            void var_60;
            char x0_4 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x5_1 = x0_4;
            *(x22_1 + 0x90) = x5_1;
        }
        int64_t x3_1 = (arg2 + arg3);
        int64_t x2;
        if ((x26_1 & 0xb0) == 0x20)
        {
            x2 = x3_1;
        }
        else
        {
            x2 = arg2;
        }
        if (sub_210a8(x23_1, arg2, x2, x3_1, x22_1, x5_1) == 0)
        {
            void* x0_7 = (arg1 + *(*arg1 - 0x18));
            *(x0_7 + 0x20);
            std::__ndk1::ios_base::clear(x0_7);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* sub_210a8(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, void* arg5, int32_t arg6)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    int64_t* x19 = arg1;
    if (arg1 != 0)
    {
        int64_t x8_1 = *(arg5 + 0x18);
        int64_t x9_1 = (arg4 - arg2);
        int64_t x25_1 = (arg3 - arg2);
        size_t x23_1;
        if (x8_1 > x9_1)
        {
            x23_1 = (x8_1 - x9_1);
        }
        else
        {
            x23_1 = 0;
        }
        int64_t x0_1;
        if (x25_1 >= 1)
        {
            x0_1 = *(*x19 + 0x60)(x19);
            if (x0_1 != x25_1)
            {
            label_21204:
                x19 = nullptr;
            }
        }
        if ((x25_1 < 1 || (x25_1 >= 1 && x0_1 == x25_1)))
        {
            if (x23_1 >= 1)
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                void* var_70_1;
                char* x25_2;
                void* x26_1;
                if (x23_1 >= 0x17)
                {
                    uint64_t x26_2 = ((x23_1 + 0x10) & 0xfffffffffffffff0);
                    void* x0_3 = operator new(x26_2);
                    x25_2 = x0_3;
                    size_t var_78_1 = x23_1;
                    var_70_1 = x0_3;
                    s = (x26_2 | 1);
                    x26_1 = (&s | 1);
                }
                else
                {
                    x26_1 = (&s | 1);
                    x25_2 = x26_1;
                    s = (x23_1 << 1);
                }
                memset(x25_2, arg6, x23_1);
                x25_2[x23_1] = 0;
                void* x1_1;
                if ((s & 1) == 0)
                {
                    x1_1 = x26_1;
                }
                else
                {
                    x1_1 = var_70_1;
                }
                int64_t x0_6 = *(*x19 + 0x60)(x19, x1_1, x23_1);
                if ((s & 1) != 0)
                {
                    operator delete(var_70_1);
                }
                if (x0_6 != x23_1)
                {
                    goto label_21204;
                }
            }
            int64_t x22_2 = (arg4 - arg3);
            if (x22_2 >= 1)
            {
                if (*(*x19 + 0x60)(x19, arg3, x22_2) != x22_2)
                {
                    goto label_21204;
                }
                goto label_211fc;
            }
        label_211fc:
            *(arg5 + 0x18) = 0;
        }
    }
    if (*(x27 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

int64_t sub_21240(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry(_Unwind_Resume(arg1));
}

void std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry(void* arg1)
{
    int64_t* x8 = *(arg1 + 8);
    void* x8_1 = (x8 + *(*x8 - 0x18));
    if ((*(x8_1 + 0x28) != 0 && (*(x8_1 + 0x20) == 0 && (*(x8_1 + 9) & 0x20) != 0)))
    {
        void* x19_1 = arg1;
        if ((std::uncaught_exception() & 1) == 0)
        {
            int64_t* x8_3 = *(x19_1 + 8);
            if (*(**((x8_3 + *(*x8_3 - 0x18)) + 0x28) + 0x30)() == 0xffffffff)
            {
                int64_t* x8_7 = *(x19_1 + 8);
                void* x0_1 = (x8_7 + *(*x8_7 - 0x18));
                *(x0_1 + 0x20);
                std::__ndk1::ios_base::clear(x0_1);
            }
        }
    }
}

void sub_212f8(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t* x8_2 = (*arg1 - 0x18);
    if (*((arg1 + *x8_2) + 0x28) != 0)
    {
        char var_48_1 = 0;
        int64_t* var_40_1 = arg1;
        void* x9_4 = (arg1 + *x8_2);
        if (*(x9_4 + 0x20) == 0)
        {
            if (*(x9_4 + 0x88) != 0)
            {
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
                x8_2 = (*arg1 - 0x18);
            }
            char var_48_2 = 1;
            if (*(**((arg1 + *x8_2) + 0x28) + 0x30)() == 0xffffffff)
            {
                void* x0_3 = (arg1 + *(*arg1 - 0x18));
                *(x0_3 + 0x20);
                std::__ndk1::ios_base::clear(x0_3);
            }
        }
        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(char* arg1, int64_t arg2, size_t arg3)
{
    uint32_t x8 = *arg1;
    int64_t x25;
    if ((x8 & 1) != 0)
    {
        x25 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    else
    {
        x25 = 0x16;
    }
    if ((((x8 & 1) != 0 && x25 >= arg3) || ((x8 & 1) == 0 && 0x16 >= arg3)))
    {
        void* x22;
        if ((x8 & 1) != 0)
        {
            x22 = *(arg1 + 0x10);
            if (arg3 == 0)
            {
                goto label_214b0;
            }
        }
        else
        {
            x22 = &arg1[1];
            if (arg3 == 0)
            {
                goto label_214b0;
            }
        }
        memmove(x22, arg2, arg3);
    label_214b0:
        *(x22 + arg3) = 0;
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = arg3;
        }
        else
        {
            *arg1 = (arg3 << 1);
        }
    label_21560:
        return arg1;
    }
    if ((((x8 & 1) != 0 && x25 < arg3) || ((x8 & 1) == 0 && 0x16 < arg3)))
    {
        if ((-0x12 - x25) < (arg3 - x25))
        {
            char* x0_6;
            int64_t x1_2;
            size_t x2_2;
            x0_6 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(x0_6, x1_2, x2_2);
        }
        void* x22_1;
        if ((x8 & 1) != 0)
        {
            x22_1 = *(arg1 + 0x10);
        }
        else
        {
            x22_1 = &arg1[1];
        }
        uint64_t x23_1;
        if (x25 > 0x7fffffffffffffe6)
        {
            x23_1 = -0x11;
        }
        else
        {
            size_t x8_3 = (x25 << 1);
            size_t x8_4;
            if (x8_3 > arg3)
            {
                x8_4 = x8_3;
            }
            else
            {
                x8_4 = arg3;
            }
            if (x8_4 >= 0x17)
            {
                x23_1 = ((x8_4 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x23_1 = 0x17;
            }
        }
        int64_t x0_2 = operator new(x23_1);
        memcpy(x0_2, arg2, arg3);
        if (x25 != 0x16)
        {
            operator delete(x22_1);
        }
        *(arg1 + 8) = arg3;
        *(arg1 + 0x10) = x0_2;
        *arg1 = (x23_1 | 1);
        *(x0_2 + arg3) = 0;
        goto label_21560;
    }
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, int64_t arg2, size_t arg3)
{
    uint64_t x8 = *arg1;
    uint64_t x22;
    int64_t x26;
    if ((x8 & 1) != 0)
    {
        x22 = *(arg1 + 8);
        x26 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    else
    {
        x22 = (x8 >> 1);
        x26 = 0x16;
    }
    void* x8_4;
    if (((x26 - x22) >= arg3 && arg3 != 0))
    {
        void* x23_2;
        if ((x8 & 1) != 0)
        {
            x23_2 = *(arg1 + 0x10);
        }
        else
        {
            x23_2 = &arg1[1];
        }
        memcpy((x23_2 + x22), arg2, arg3);
        int64_t x8_3 = (x22 + arg3);
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = x8_3;
            x8_4 = (x23_2 + x8_3);
        }
        else
        {
            *arg1 = (x8_3 << 1);
            x8_4 = (x23_2 + x8_3);
        }
    }
    if ((x26 - x22) < arg3)
    {
        int64_t x27_1 = (x22 + arg3);
        if ((-0x12 - x26) < (x27_1 - x26))
        {
            int64_t* x0_8;
            char x1_3;
            x0_8 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::put(x0_8, x1_3);
        }
        void* x23_1;
        if ((x8 & 1) != 0)
        {
            x23_1 = *(arg1 + 0x10);
        }
        else
        {
            x23_1 = &arg1[1];
        }
        uint64_t x24_1;
        if (x26 > 0x7fffffffffffffe6)
        {
            x24_1 = -0x11;
        }
        else
        {
            int64_t x8_1 = (x26 << 1);
            int64_t x8_2;
            if (x27_1 < x8_1)
            {
                x8_2 = x8_1;
            }
            else
            {
                x8_2 = x27_1;
            }
            if (x8_2 >= 0x17)
            {
                x24_1 = ((x8_2 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x24_1 = 0x17;
            }
        }
        void* x0_2 = operator new(x24_1);
        if (x22 != 0)
        {
            memcpy(x0_2, x23_1, x22);
        }
        memcpy((x0_2 + x22), arg2, arg3);
        if (x26 != 0x16)
        {
            operator delete(x23_1);
        }
        *arg1 = (x24_1 | 1);
        x8_4 = (x0_2 + x27_1);
        *(arg1 + 8) = x27_1;
        *(arg1 + 0x10) = x0_2;
    }
    if (((x26 - x22) < arg3 || ((x26 - x22) >= arg3 && arg3 != 0)))
    {
        *x8_4 = 0;
    }
    return arg1;
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::put(int64_t* arg1, char arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    char var_48 = 0;
    int64_t* var_40 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_48_1 = 1;
        int64_t* x0_1 = *((arg1 + *x8_2) + 0x28);
        int32_t x0_2;
        char* x8_4;
        if (x0_1 != 0)
        {
            x8_4 = x0_1[6];
            if (x8_4 == x0_1[7])
            {
                x0_2 = *(*x0_1 + 0x68)();
                if (x0_2 == 0xffffffff)
                {
                    x8_2 = (*arg1 - 0x18);
                }
            }
            else
            {
                x0_1[6] = &x8_4[1];
                *x8_4 = arg2;
            }
        }
        if ((((x0_1 != 0 && x8_4 == x0_1[7]) && x0_2 == 0xffffffff) || x0_1 == 0))
        {
            void* x0_3 = (arg1 + *x8_2);
            *(x0_3 + 0x20);
            std::__ndk1::ios_base::clear(x0_3);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

void std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(int64_t* arg1, int32_t* arg2)
{
    void* x20 = *arg1;
    size_t x21 = (arg1[1] - x20);
    int64_t x24 = (x21 >> 2);
    if (((x24 + 1) >> 0x3e) != 0)
    {
        int32_t* x0_6;
        int32_t* x1_2;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return cv::Mat_<double>::operator=(x0_6, x1_2);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t* x23;
    int64_t x25;
    if (0x1ffffffffffffffe < (x9_2 >> 2))
    {
        x25 = 0x3fffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 1);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x23 = nullptr;
        }
        else if ((x25 >> 0x3e) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    if ((0x1ffffffffffffffe < (x9_2 >> 2) || (0x1ffffffffffffffe >= (x9_2 >> 2) && x25 != 0)))
    {
        x23 = operator new((x25 << 2));
    }
    void* x24_1 = (x23 + (x24 << 2));
    *x24_1 = *arg2;
    if (x21 >= 1)
    {
        memcpy(x23, x20, x21);
    }
    *arg1 = x23;
    arg1[1] = (x24_1 + 4);
    arg1[2] = (x23 + (x25 << 2));
    if (x20 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x20);
}

int32_t* cv::Mat_<double>::operator=(int32_t* arg1, int32_t* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int32_t* x19 = arg1;
    int32_t x8_1 = *arg2;
    int128_t v0;
    if ((x8_1 & 0xfff) != 6)
    {
        if ((x8_1 & 7) == 6)
        {
            cv::Mat::reshape(arg2, 1, arg2[1]);
            x19 = cv::Mat_<double>::operator=(x19);
            int64_t var_68;
            if (var_68 != 0)
            {
                int32_t temp0_3;
                int32_t i;
                do
                {
                    temp0_3 = __ldaxr((var_68 + 0x14));
                    i = __stlxr((temp0_3 - 1), (var_68 + 0x14));
                } while (i != 0);
                if (temp0_3 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int64_t var_68_1 = 0;
            int64_t s;
            __builtin_memset(&s, 0, 0x20);
            int32_t var_9c;
            if (var_9c >= 1)
            {
                int64_t i_1 = 0;
                do
                {
                    int64_t var_60;
                    *(var_60 + (i_1 << 2)) = 0;
                    i_1 = (i_1 + 1);
                } while (i_1 < var_9c);
            }
            void* var_58;
            void var_50;
            if (var_58 != &var_50)
            {
                cv::fastFree(var_58);
            }
        }
        else
        {
            int32_t var_a0;
            int128_t v1;
            if (((x8_1 & 0xff8) != 0 && *(arg2 + 0x10) != 0))
            {
                uint64_t x8_14 = arg2[1];
                int64_t x11_1;
                if (x8_14 >= 3)
                {
                    void* x9_11 = *(arg2 + 0x40);
                    int64_t i_8;
                    if (x8_14 != 3)
                    {
                        i_8 = (x8_14 & 0xfffffffc);
                        v1 = 1;
                        *v1[8] = 1;
                        void* x11_2 = (x9_11 + 8);
                        int64_t i_6 = i_8;
                        v0 = v1;
                        int64_t i_2;
                        do
                        {
                            int128_t v2;
                            v2 = *(x11_2 - 8);
                            int128_t v3;
                            v3 = *x11_2;
                            /* unimplemented  {sxtl v0.2d, v2.2s} */;
                            /* unimplemented  {sxtl v1.2d, v3.2s} */;
                            int64_t x0_7 = v1;
                            int64_t x16_2 = (v0 * v1);
                            int64_t x13_2 = (v1 * v0);
                            v1 = (v1 * v0);
                            int64_t x14_3 = (v0 * x0_7);
                            v0 = x16_2;
                            i_2 = i_6;
                            i_6 = (i_6 - 4);
                            *v1[8] = x13_2;
                            *v0[8] = x14_3;
                            x11_2 = (x11_2 + 0x10);
                        } while (i_2 != 4);
                        x11_1 = ((v0 * v1) * (v0 * v1));
                    }
                    else
                    {
                        i_8 = 0;
                        x11_1 = 1;
                    }
                    if ((x8_14 == 3 || (x8_14 != 3 && i_8 != x8_14)))
                    {
                        int64_t i_7 = (x8_14 - i_8);
                        int32_t* x9_12 = (x9_11 + (i_8 << 2));
                        int64_t i_3;
                        do
                        {
                            int64_t x10_8 = *x9_12;
                            x9_12 = &x9_12[1];
                            i_3 = i_7;
                            i_7 = (i_7 - 1);
                            x11_1 = (x11_1 * x10_8);
                        } while (i_3 != 1);
                    }
                }
                else
                {
                    x11_1 = (arg2[3] * arg2[2]);
                }
                if ((((x8_14 < 3 && x8_14 != 0) || (x8_14 >= 3 && x8_14 != 0)) && x11_1 != 0))
                {
                    void* x0_10;
                    int128_t v0_1;
                    x0_10 = operator new(0x40);
                    var_a0 = data_53ec0;
                    __builtin_strncpy(x0_10, "DataType<_Tp>::channels == m.channels() || m.empty()", 0x35);
                    int64_t x0_11 = cv::error(0xffffff29, &var_a0, "operator=", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x6af);
                    if ((var_a0 & 1) == 0)
                    {
                        sub_20ac4(_Unwind_Resume(x0_11));
                        /* no return */
                    }
                    operator delete(x0_10);
                    sub_20ac4(_Unwind_Resume(x0_11));
                    /* no return */
                }
            }
            int32_t* var_98_1 = x19;
            int64_t var_90 = 0;
            var_a0 = 0x82010006;
            v0 = 0x3ff0000000000000;
            v1 = 0.0;
            cv::Mat::convertTo(arg2, &var_a0, v0, v1);
        }
    }
    else if (x19 != arg2)
    {
        int64_t x8_2 = *(arg2 + 0x38);
        if (x8_2 != 0)
        {
            int32_t i_4;
            do
            {
                i_4 = __stlxr((__ldaxr((x8_2 + 0x14)) + 1), (x8_2 + 0x14));
            } while (i_4 != 0);
        }
        int64_t x8_4 = *(x19 + 0x38);
        if (x8_4 != 0)
        {
            int32_t temp0_2;
            int32_t i_5;
            do
            {
                temp0_2 = __ldaxr((x8_4 + 0x14));
                i_5 = __stlxr((temp0_2 - 1), (x8_4 + 0x14));
            } while (i_5 != 0);
            if (temp0_2 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int32_t x8_6 = x19[1];
        v0 = 0;
        *v0[8] = 0;
        *(x19 + 0x38) = 0;
        __builtin_memset(&x19[4], 0, 0x20);
        int64_t x10_3;
        if (x8_6 <= 0)
        {
            *x19 = *arg2;
        }
        else
        {
            int64_t x8_7 = *(x19 + 0x40);
            int64_t x9_5 = 0;
            do
            {
                *(x8_7 + (x9_5 << 2)) = 0;
                x10_3 = x19[1];
                x9_5 = (x9_5 + 1);
            } while (x9_5 < x10_3);
            *x19 = *arg2;
        }
        int32_t x8_16;
        if ((x8_6 <= 0 || (x8_6 > 0 && x10_3 <= 2)))
        {
            x8_16 = arg2[1];
            if (x8_16 <= 2)
            {
                x19[1] = x8_16;
                int64_t* x10_7 = *(x19 + 0x48);
                *(x19 + 8) = *(arg2 + 8);
                int64_t* x8_18 = *(arg2 + 0x48);
                *x10_7 = *x8_18;
                x10_7[1] = x8_18[1];
            }
        }
        if ((((x8_6 <= 0 || (x8_6 > 0 && x10_3 <= 2)) && x8_16 > 2) || (x8_6 > 0 && x10_3 > 2)))
        {
            cv::Mat::copySize(x19);
        }
        *(x19 + 0x10) = *(arg2 + 0x10);
        *(x19 + 0x20) = *(arg2 + 0x20);
        *(x19 + 0x30) = *(arg2 + 0x30);
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

cv::Mat* cv::Mat_<double>::operator=(cv::Mat* arg1, int32_t* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    int32_t x8_1 = *arg2;
    if ((x8_1 & 0xfff) == 6)
    {
        cv::Mat::operator=(arg1);
    }
    else
    {
        int32_t var_a0;
        if ((x8_1 & 7) != 6)
        {
            cv::Mat* var_98_1 = arg1;
            int64_t var_90 = 0;
            var_a0 = 0x82010006;
            cv::Mat::convertTo(arg2, &var_a0, 1.0, 0.0);
        }
        else
        {
            int128_t v0_1;
            int128_t v1_1;
            v0_1 = cv::Mat::reshape(arg2, 1, arg2[1]);
            int32_t var_9c;
            int64_t s;
            int64_t var_60;
            int64_t* var_58;
            void var_50;
            int64_t var_68;
            if (arg1 != &var_a0)
            {
                int64_t x8_3 = *(arg1 + 0x38);
                if (x8_3 != 0)
                {
                    int32_t temp0_1;
                    int32_t i;
                    do
                    {
                        temp0_1 = __ldaxr((x8_3 + 0x14));
                        i = __stlxr((temp0_1 - 1), (x8_3 + 0x14));
                    } while (i != 0);
                    if (temp0_1 == 1)
                    {
                        v0_1 = cv::Mat::deallocate();
                    }
                }
                int32_t x8_5 = *(arg1 + 4);
                v0_1 = 0;
                *v0_1[8] = 0;
                *(arg1 + 0x38) = 0;
                __builtin_memset((arg1 + 0x10), 0, 0x20);
                if (x8_5 >= 1)
                {
                    int64_t x8_6 = *(arg1 + 0x40);
                    int64_t i_1 = 0;
                    do
                    {
                        *(x8_6 + (i_1 << 2)) = 0;
                        i_1 = (i_1 + 1);
                    } while (i_1 < *(arg1 + 4));
                }
                v0_1 = var_a0;
                v1_1 = s;
                void* x0_3 = *(arg1 + 0x48);
                *arg1 = v0_1;
                *(arg1 + 0x10) = v1_1;
                int128_t var_80;
                *(arg1 + 0x20) = var_80;
                int128_t var_70;
                *(arg1 + 0x30) = var_70;
                int32_t x8_8;
                if (x0_3 == (arg1 + 0x50))
                {
                    x8_8 = v0_1;
                }
                else
                {
                    cv::fastFree(x0_3);
                    *(arg1 + 0x40) = (arg1 + 8);
                    *(arg1 + 0x48) = (arg1 + 0x50);
                    x8_8 = var_9c;
                    x0_3 = (arg1 + 0x50);
                }
                if (x8_8 > 2)
                {
                    *(arg1 + 0x40) = var_60;
                    var_60 = (&var_a0 | 8);
                    var_58 = &var_50;
                }
                else
                {
                    *x0_3 = *var_58;
                    *(x0_3 + 8) = var_58[1];
                }
                var_a0 = 0x42ff0000;
                __builtin_memset((&var_a0 | 4), 0, 0x3c);
            }
            else if (var_68 != 0)
            {
                int32_t temp0_2;
                int32_t i_2;
                do
                {
                    temp0_2 = __ldaxr((var_68 + 0x14));
                    i_2 = __stlxr((temp0_2 - 1), (var_68 + 0x14));
                } while (i_2 != 0);
                if (temp0_2 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int64_t var_68_1 = 0;
            __builtin_memset(&s, 0, 0x20);
            if (var_9c >= 1)
            {
                int64_t i_3 = 0;
                do
                {
                    *(var_60 + (i_3 << 2)) = 0;
                    i_3 = (i_3 + 1);
                } while (i_3 < var_9c);
            }
            if (var_58 != &var_50)
            {
                cv::fastFree(var_58);
            }
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t std::__ndk1::vector<Eigen::Transform<float, 3, 1, 0>, std::__ndk1::allocator<Eigen::Transform<float, 3, 1, 0> > >::__push_back_slow_path<Eigen::Transform<float, 3, 1, 0> const&>(int64_t* arg1, int128_t* arg2)
{
    void* x20 = *arg1;
    int64_t x22 = ((arg1[1] - x20) >> 6);
    if (((x22 + 1) >> 0x3a) != 0)
    {
        int64_t* x0_6;
        int128_t* x1_1;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__push_back_slow_path<cv::Mat const&>(x0_6, x1_1);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t x0_2;
    int64_t x23;
    if (0x1fffffffffffffe < (x9_2 >> 6))
    {
        x23 = 0x3ffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 5);
        if (x9_3 < (x22 + 1))
        {
            x23 = (x22 + 1);
        }
        else
        {
            x23 = x9_3;
        }
        if (x23 == 0)
        {
            x0_2 = 0;
        }
        else if ((x23 >> 0x3a) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    int128_t v0;
    if ((0x1fffffffffffffe < (x9_2 >> 6) || (0x1fffffffffffffe >= (x9_2 >> 6) && x23 != 0)))
    {
        x0_2 = operator new((x23 << 6));
    }
    int128_t* x8_4 = (x0_2 + (x22 << 6));
    *x8_4 = *arg2;
    x8_4[1] = arg2[1];
    x8_4[2] = arg2[2];
    x8_4[3] = arg2[3];
    void* x11 = *arg1;
    int32_t* x12 = arg1[1];
    if (x12 == x11)
    {
        x20 = x11;
    }
    else
    {
        void* x13_2 = ((x12 - 0x40) - x11);
        void* x14_1 = (x8_4 - 0x20);
        do
        {
            x12 = &x12[-0x10];
            *(x14_1 - 0x20) = *x12;
            *(x14_1 - 0x1c) = x12[1];
            *(x14_1 - 0x18) = x12[2];
            *(x14_1 - 0x14) = x12[3];
            *(x14_1 - 0x10) = x12[4];
            *(x14_1 - 0xc) = x12[5];
            *(x14_1 - 8) = x12[6];
            *(x14_1 - 4) = x12[7];
            *x14_1 = x12[8];
            *(x14_1 + 4) = x12[9];
            *(x14_1 + 8) = x12[0xa];
            *(x14_1 + 0xc) = x12[0xb];
            *(x14_1 + 0x10) = x12[0xc];
            *(x14_1 + 0x14) = x12[0xd];
            *(x14_1 + 0x18) = x12[0xe];
            *(x14_1 + 0x1c) = x12[0xf];
            x14_1 = (x14_1 - 0x40);
        } while (x11 != x12);
        x8_4 = (x8_4 + (!(x13_2) & 0xffffffffffffffc0));
    }
    *arg1 = x8_4;
    arg1[1] = &x8_4[4];
    arg1[2] = (x0_2 + (x23 << 6));
    if (x20 == 0)
    {
        return x0_2;
    }
    /* tailcall */
    return operator delete(x20);
}

int64_t std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__push_back_slow_path<cv::Mat const&>(int64_t* arg1, int128_t* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t x9 = *arg1;
    int64_t x22 = 0x2aaaaaaaaaaaaaa;
    int64_t x23 = (((arg1[1] - x9) >> 5) * -0x5555555555555555);
    if ((x23 + 1) > 0x2aaaaaaaaaaaaaa)
    {
        std::__ndk1::__vector_base_common<true>::__throw_length_error();
    }
    else
    {
        int64_t x10_1 = (((arg1[2] - x9) >> 5) * -0x5555555555555555);
        if (x10_1 >= 0x155555555555555)
        {
            int64_t var_58_2 = 0;
            void* var_50_2 = &arg1[2];
        }
        else
        {
            int64_t x10_2 = (x10_1 << 1);
            if (x10_2 < (x23 + 1))
            {
                x22 = (x23 + 1);
            }
            else
            {
                x22 = x10_2;
            }
            int64_t var_58_1 = 0;
            void* var_50_1 = &arg1[2];
        }
        int64_t x8_5;
        int128_t v0;
        int128_t v1;
        if ((x10_1 >= 0x155555555555555 || (x10_1 < 0x155555555555555 && x22 != 0)))
        {
            int64_t x0_1;
            x0_1 = operator new((x22 * 0x60));
            x8_5 = x0_1;
        }
        if ((x10_1 < 0x155555555555555 && x22 == 0))
        {
            x8_5 = 0;
        }
        int64_t var_70_1 = x8_5;
        int128_t* x0_2 = (x8_5 + (x23 * 0x60));
        int128_t* var_68_1 = x0_2;
        int64_t var_58_3 = (x8_5 + (x22 * 0x60));
        v0 = *arg2;
        v1 = arg2[1];
        *x0_2 = v0;
        x0_2[1] = v1;
        x0_2[2] = arg2[2];
        x0_2[3] = arg2[3];
        int64_t x8_9 = *(arg2 + 0x38);
        *(x0_2 + 0x58) = 0;
        *(x0_2 + 0x38) = x8_9;
        x0_2[4] = (x0_2 + 8);
        x0_2[5] = 0;
        *(x0_2 + 0x48) = &x0_2[5];
        if (x8_9 != 0)
        {
            int32_t i;
            do
            {
                i = __stlxr((__ldaxr((x8_9 + 0x14)) + 1), (x8_9 + 0x14));
            } while (i != 0);
        }
        if (((x8_9 == 0 && v0 <= 2) || (x8_9 != 0 && *(arg2 + 4) <= 2)))
        {
            int64_t* x8_12 = *(arg2 + 0x48);
            int64_t* x9_8 = *(x0_2 + 0x48);
            *x9_8 = *x8_12;
            x9_8[1] = x8_12[1];
        }
        if (((x8_9 == 0 && v0 > 2) || (x8_9 != 0 && *(arg2 + 4) > 2)))
        {
            *(x0_2 + 4) = 0;
            cv::Mat::copySize(x0_2);
        }
        void* var_60_2 = &x0_2[6];
        std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__swap_out_circular_buffer(arg1);
        int64_t x0_4 = std::__ndk1::__split_buffer<cv::Mat, std::__ndk1::allocator<cv::Mat>&>::~__split_buffer();
        if (*(x21 + 0x28) == x8)
        {
            return x0_4;
        }
    }
    __stack_chk_fail();
    /* no return */
}

void std::__ndk1::vector<cv::Mat, std::__ndk1::allocator<cv::Mat> >::__swap_out_circular_buffer(int64_t* arg1, int64_t* arg2)
{
    int64_t x22 = *arg1;
    int128_t* x9 = arg1[1];
    int64_t* x19 = arg1;
    void* x8;
    if (x9 == x22)
    {
        x8 = arg2[1];
    }
    else
    {
        x8 = arg2[1];
        int128_t* x21_1 = x9;
        do
        {
            x21_1 = &x21_1[-6];
            *(x8 - 0x60) = *x21_1;
            *(x8 - 0x50) = x21_1[1];
            *(x8 - 0x40) = x21_1[2];
            *(x8 - 0x30) = x21_1[3];
            int64_t x10_2 = *(x21_1 + 0x38);
            *(x8 - 0x10) = 0;
            *(x8 - 0x20) = (x8 - 0x58);
            *(x8 - 0x18) = (x8 - 0x10);
            *(x8 - 0x28) = x10_2;
            *(x8 - 8) = 0;
            if (x10_2 != 0)
            {
                int32_t i;
                do
                {
                    i = __stlxr((__ldaxr((x10_2 + 0x14)) + 1), (x10_2 + 0x14));
                } while (i != 0);
            }
            if (*(x9 - 0x5c) > 2)
            {
                *(x8 - 0x5c) = 0;
                int128_t v0;
                arg1 = cv::Mat::copySize((x8 - 0x60));
            }
            else
            {
                int64_t* x9_1 = *(x9 - 0x18);
                int64_t* x8_1 = *(x8 - 0x18);
                *x8_1 = *x9_1;
                x8_1[1] = x9_1[1];
            }
            x9 = x21_1;
            x8 = (arg2[1] - 0x60);
            arg2[1] = x8;
        } while (x21_1 != x22);
        x22 = *x19;
    }
    *x19 = x8;
    int64_t x8_3 = arg2[2];
    arg2[1] = x22;
    int64_t x9_3 = x19[1];
    x19[1] = x8_3;
    int64_t x8_4 = arg2[3];
    arg2[2] = x9_3;
    int64_t x9_4 = x19[2];
    x19[2] = x8_4;
    int64_t x8_5 = arg2[1];
    arg2[3] = x9_4;
    *arg2 = x8_5;
}

void* std::__ndk1::__split_buffer<cv::Mat, std::__ndk1::allocator<cv::Mat>&>::~__split_buffer(int64_t* arg1)
{
    int64_t x20 = arg1[1];
    void* x21 = arg1[2];
    if (x21 != x20)
    {
        do
        {
            arg1[2] = (x21 - 0x60);
            int64_t x8_2 = *(x21 - 0x28);
            if (x8_2 != 0)
            {
                int32_t temp0_1;
                int32_t i;
                do
                {
                    temp0_1 = __ldaxr((x8_2 + 0x14));
                    i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
                } while (i != 0);
                if (temp0_1 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int32_t x8_4 = *(x21 - 0x5c);
            int128_t v0;
            v0 = 0;
            *v0[8] = 0;
            *(x21 - 0x28) = 0;
            __builtin_memset((x21 - 0x50), 0, 0x20);
            if (x8_4 >= 1)
            {
                int64_t x8_5 = *(x21 - 0x20);
                int64_t i_1 = 0;
                do
                {
                    *(x8_5 + (i_1 << 2)) = 0;
                    i_1 = (i_1 + 1);
                } while (i_1 < *(x21 - 0x5c));
            }
            void* x0_3 = *(x21 - 0x18);
            if (x0_3 != (x21 - 0x10))
            {
                cv::fastFree(x0_3);
            }
            x21 = arg1[2];
        } while (x21 != x20);
    }
    void* x0 = *arg1;
    if (x0 == 0)
    {
        return x0;
    }
    /* tailcall */
    return operator delete(x0);
}

void sub_22578(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t std::__ndk1::vector<cv::Vec<float, 3>, std::__ndk1::allocator<cv::Vec<float, 3> > >::__push_back_slow_path<cv::Vec<float, 3> const&>(int64_t* arg1, int64_t* arg2)
{
    void* x20 = *arg1;
    int32_t* x22 = arg1[1];
    int64_t x24 = (((x22 - x20) >> 2) * -0x5555555555555555);
    int64_t x23 = 0x1555555555555555;
    if ((x24 + 1) > 0x1555555555555555)
    {
        char* x0_5;
        size_t x1_1;
        int64_t x2_1;
        size_t x3_1;
        x0_5 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(x0_5, x1_1, x2_1, x3_1);
    }
    int64_t x9 = (((arg1[2] - x20) >> 2) * -0x5555555555555555);
    int64_t x0_1;
    if (x9 <= 0xaaaaaaaaaaaaaa9)
    {
        int64_t x9_1 = (x9 << 1);
        if (x9_1 < (x24 + 1))
        {
            x23 = (x24 + 1);
        }
        else
        {
            x23 = x9_1;
        }
        if (x23 == 0)
        {
            x0_1 = 0;
        }
    }
    if ((x9 > 0xaaaaaaaaaaaaaa9 || (x9 <= 0xaaaaaaaaaaaaaa9 && x23 != 0)))
    {
        x0_1 = operator new((x23 * 0xc));
    }
    int64_t* x8_4 = (x0_1 + (x24 * 0xc));
    *x8_4 = *arg2;
    void* x10_3 = (x8_4 + 0xc);
    x8_4[1] = arg2[1];
    if (x22 != x20)
    {
        do
        {
            x22 = &x22[-3];
            x8_4 = (x8_4 - 0xc);
            *x8_4 = *x22;
            *(x8_4 + 4) = x22[1];
            x8_4[1] = x22[2];
        } while (x20 != x22);
    }
    *arg1 = x8_4;
    arg1[1] = x10_3;
    arg1[2] = (x0_1 + (x23 * 0xc));
    if (x20 == 0)
    {
        return x0_1;
    }
    /* tailcall */
    return operator delete(x20);
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(char* arg1, size_t arg2, int64_t arg3, size_t arg4)
{
    uint64_t x8 = *arg1;
    int64_t x21 = arg3;
    uint64_t x27;
    if ((x8 & 1) != 0)
    {
        x27 = *(arg1 + 8);
    }
    else
    {
        x27 = (x8 >> 1);
    }
    if ((((x8 & 1) != 0 && x27 < arg2) || ((x8 & 1) == 0 && x27 < arg2)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
    label_22890:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
    }
    if ((((x8 & 1) != 0 && x27 >= arg2) || ((x8 & 1) == 0 && x27 >= arg2)))
    {
        int64_t x28_1;
        if ((x8 & 1) != 0)
        {
            x28_1 = ((*arg1 & 0xfffffffffffffffe) - 1);
        }
        else
        {
            x28_1 = 0x16;
        }
        void* x8_6;
        if (((x28_1 - x27) >= arg4 && arg4 != 0))
        {
            void* x23_2;
            if ((x8 & 1) != 0)
            {
                x23_2 = *(arg1 + 0x10);
            }
            else
            {
                x23_2 = &arg1[1];
            }
            void* x22_1 = (x23_2 + arg2);
            if (x27 != arg2)
            {
                bool c_1;
                bool z_1;
                if ((x23_2 + x27) > x21)
                {
                    c_1 = x22_1 < x21;
                    z_1 = x22_1 == x21;
                }
                else
                {
                    z_1 = false;
                    c_1 = true;
                }
                if ((z_1 || c_1))
                {
                    x21 = (x21 + arg4);
                }
                memmove((x22_1 + arg4), x22_1, (x27 - arg2));
            }
            memmove(x22_1, x21, arg4);
            int64_t x8_5 = (x27 + arg4);
            if ((*arg1 & 1) != 0)
            {
                *(arg1 + 8) = x8_5;
                x8_6 = (x23_2 + x8_5);
            }
            else
            {
                *arg1 = (x8_5 << 1);
                x8_6 = (x23_2 + x8_5);
            }
        }
        if ((x28_1 - x27) < arg4)
        {
            int64_t x23_1 = (x27 + arg4);
            if ((-0x12 - x28_1) < (x23_1 - x28_1))
            {
                goto label_22890;
            }
            void* x8_1;
            if ((x8 & 1) != 0)
            {
                x8_1 = *(arg1 + 0x10);
            }
            else
            {
                x8_1 = &arg1[1];
            }
            uint64_t x24_1;
            if (x28_1 > 0x7fffffffffffffe6)
            {
                x24_1 = -0x11;
            }
            else
            {
                int64_t x8_2 = (x28_1 << 1);
                int64_t x8_3;
                if (x23_1 < x8_2)
                {
                    x8_3 = x8_2;
                }
                else
                {
                    x8_3 = x23_1;
                }
                if (x8_3 >= 0x17)
                {
                    x24_1 = ((x8_3 + 0x10) & 0xfffffffffffffff0);
                }
                else
                {
                    x24_1 = 0x17;
                }
            }
            void* x0_3 = operator new(x24_1);
            if (arg2 != 0)
            {
                memcpy(x0_3, x8_1, arg2);
            }
            void* x26_1 = (x0_3 + arg2);
            memcpy(x26_1, x21, arg4);
            if (x27 != arg2)
            {
                memcpy((x26_1 + arg4), (x8_1 + arg2), (x27 - arg2));
            }
            if (x28_1 != 0x16)
            {
                operator delete(x8_1);
            }
            *arg1 = (x24_1 | 1);
            x8_6 = (x0_3 + x23_1);
            *(arg1 + 8) = x23_1;
            *(arg1 + 0x10) = x0_3;
        }
        if ((((x28_1 - x27) >= arg4 && arg4 != 0) || (x28_1 - x27) < arg4))
        {
            *x8_6 = 0;
        }
        if (((((x28_1 - x27) >= arg4 && arg4 != 0) || (x28_1 - x27) < arg4) || ((x28_1 - x27) >= arg4 && arg4 == 0)))
        {
            return arg1;
        }
    }
}

void std::__ndk1::__basic_string_common<true>::__throw_out_of_range() __noreturn
{
    sub_228a8();
    /* no return */
}

void sub_228a8() __noreturn
{
    char* thrown_exception = __cxa_allocate_exception(0x10);
    sub_228f8(thrown_exception);
    __cxa_throw(thrown_exception, _typeinfo_for_std::out_of_range, std::out_of_range::~out_of_range);
    /* no return */
}

int64_t sub_228f8(char* arg1)
{
    int64_t x0 = std::logic_error::logic_error(arg1);
    *arg1 = (_vtable_for_std::out_of_range + 0x10);
    return x0;
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(int64_t* arg1, int64_t* arg2)
{
    void* x20 = *arg1;
    int32_t* x22 = arg1[1];
    int64_t x24 = (((x22 - x20) >> 2) * -0x5555555555555555);
    int64_t x23 = 0x1555555555555555;
    if ((x24 + 1) > 0x1555555555555555)
    {
        int64_t* x0_5;
        int32_t x1_1;
        x0_5 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1_1);
    }
    int64_t x9 = (((arg1[2] - x20) >> 2) * -0x5555555555555555);
    int64_t x0_1;
    if (x9 <= 0xaaaaaaaaaaaaaa9)
    {
        int64_t x9_1 = (x9 << 1);
        if (x9_1 < (x24 + 1))
        {
            x23 = (x24 + 1);
        }
        else
        {
            x23 = x9_1;
        }
        if (x23 == 0)
        {
            x0_1 = 0;
        }
    }
    if ((x9 > 0xaaaaaaaaaaaaaa9 || (x9 <= 0xaaaaaaaaaaaaaa9 && x23 != 0)))
    {
        x0_1 = operator new((x23 * 0xc));
    }
    int64_t* x8_4 = (x0_1 + (x24 * 0xc));
    *x8_4 = *arg2;
    void* x10_3 = (x8_4 + 0xc);
    x8_4[1] = arg2[1];
    if (x22 != x20)
    {
        do
        {
            x22 = &x22[-3];
            x8_4 = (x8_4 - 0xc);
            *x8_4 = *x22;
            *(x8_4 + 4) = x22[1];
            x8_4[1] = x22[2];
        } while (x20 != x22);
    }
    *arg1 = x8_4;
    arg1[1] = x10_3;
    arg1[2] = (x0_1 + (x23 * 0xc));
    if (x20 == 0)
    {
        return x0_1;
    }
    /* tailcall */
    return operator delete(x20);
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        int32_t x26_1 = *((arg1 + *x8_2) + 8);
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        int32_t x8_9 = (x26_1 & 0x4a);
        bool z_1;
        if (x8_9 != 8)
        {
            z_1 = x8_9 == 0x40;
        }
        else
        {
            z_1 = true;
        }
        uint64_t x4_1;
        if (z_1)
        {
            x4_1 = arg2;
        }
        else
        {
            x4_1 = arg2;
        }
        if (*(*x0_3 + 0x20)(x0_3, x23_1, x22_1, x3_1, x4_1) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int64_t arg2 @ v0)
{
    int64_t v8;
    int64_t var_50 = v8;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x21_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x21_1 + 0x90);
        int64_t x22_1 = *(x21_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x21_1 + 0x90) = x3_1;
        }
        int128_t v0;
        v0 = arg2;
        if (*(*x0_3 + 0x40)(x0_3, x22_1, x21_1, x3_1, v0) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        if (*(*x0_3 + 0x30)(x0_3, x23_1, x22_1, x3_1, arg2) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t ground_filter::Plane_Seg::Plane_Seg(void* arg1, char arg2, int32_t arg3 @ v0)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    __builtin_memset(arg1, 0, 0x18);
    uint64_t var_13f0 = 0;
    int64_t var_13e8 = 0;
    var_13f0 = 0x18;
    void* var_13e0 = nullptr;
    __builtin_strncpy(&*var_13f0[1], "/dev/urandom", 0xd);
    std::__ndk1::random_device::random_device((arg1 + 0x18));
    if ((var_13f0 & 1) != 0)
    {
        operator delete(var_13e0);
    }
    uint64_t x8_2 = 0x1571;
    *(arg1 + 0x20) = 0x1571;
    int64_t i = 5;
    do
    {
        x8_2 = ((i + (((x8_2 >> 0x1e) ^ x8_2) * 0x6c078965)) - 4);
        *(arg1 + (i << 3)) = x8_2;
        i = (i + 1);
    } while (i != 0x274);
    *(arg1 + 0x13a0) = 0;
    *(arg1 + 0x1448) = 0;
    __builtin_memset((arg1 + 0x1488), 0, 0x18);
    __builtin_memset((arg1 + 0x14a8), 0, 0x18);
    uint64_t x8_5 = std::__ndk1::random_device::operator()();
    int64_t i_1 = 1;
    var_13f0 = x8_5;
    do
    {
        x8_5 = (i_1 + (((x8_5 >> 0x1e) ^ x8_5) * 0x6c078965));
        &var_13f0[i_1] = x8_5;
        i_1 = (i_1 + 1);
    } while (i_1 != 0x270);
    int64_t var_70 = 0;
    int64_t x0_5 = memcpy((arg1 + 0x20), &var_13f0, 0x1388);
    *(arg1 + 0x14a4) = arg3;
    *(arg1 + 0x14a0) = (arg2 & 1);
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_5;
}

int64_t sub_23230(int64_t arg1, int64_t* arg2 @ x19, char arg3, void* arg4)
{
    void* x0;
    if ((arg3 & 1) != 0)
    {
        while (true)
        {
            operator delete(arg4);
            x0 = *arg2;
            if (x0 != 0)
            {
                break;
            }
        label_23248:
            _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0 = *arg2;
        if (x0 == 0)
        {
            goto label_23248;
        }
    }
    arg2[1] = x0;
    operator delete(x0);
    uint64_t x0_4;
    int64_t* x1;
    int128_t v0;
    int128_t v1;
    int128_t v2;
    float v3;
    double v4;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return ground_filter::Plane_Seg::judgPointsValid(x0_4, x1, v0, v1, v2, v3, v4);
}

uint64_t ground_filter::Plane_Seg::judgPointsValid(void* arg1, int64_t* arg2, int128_t arg3 @ v0, int128_t arg4 @ v1, int128_t arg5 @ v2, float arg6, double arg7)
{
    void* x9 = *arg2;
    int64_t x10 = arg2[1];
    if (x9 == x10)
    {
        return 1;
    }
    int32_t x8 = 0xff;
    while (true)
    {
        arg6 = *(x9 + 8);
        /* unimplemented  {fabs s4, s3} */;
        if ((!(arg7 > 5000f) && !(arg7 < 0.0001)))
        {
            float v5 = *x9;
            arg7 = *(x9 + 4);
            float v6 = (*(arg1 + 0x13e8) + (((v5 * *(arg1 + 0x13b8)) + (arg7 * *(arg1 + 0x13c8))) + (arg6 * *(arg1 + 0x13d8))));
            if (v6 < *(arg1 + 0x1438))
            {
                return 0;
            }
            if (v6 > *(arg1 + 0x143c))
            {
                return 0;
            }
            v6 = (*(arg1 + 0x13ec) + (((v5 * *(arg1 + 0x13bc)) + (arg7 * *(arg1 + 0x13cc))) + (arg6 * *(arg1 + 0x13dc))));
            if (v6 < *(arg1 + 0x1440))
            {
                return 0;
            }
            if (v6 > *(arg1 + 0x1444))
            {
                return 0;
            }
            *(arg1 + 0x1448);
            arg7 = (arg7 * *(arg1 + 0x13d0));
            arg7 = ((v5 * *(arg1 + 0x13c0)) + arg7);
            arg6 = (*(arg1 + 0x13f0) + (arg7 + (arg6 * *(arg1 + 0x13e0))));
            /* unimplemented  {fabd s3, s3, s18} */;
            arg7 = (*(arg1 + 0x14a4) * 5f);
            if (arg6 > arg7)
            {
                x8 = 2;
            }
            else
            {
                x9 = (x9 + 0xc);
                if (x10 == x9)
                {
                    break;
                }
                continue;
            }
        }
        return x8;
    }
    return 1;
}

uint64_t ground_filter::Plane_Seg::judgPlaneValid(void* arg1, int32_t* arg2, int32_t* arg3)
{
    int64_t v9;
    v9 = *arg2;
    int64_t v10;
    v10 = arg2[1];
    int128_t v0;
    v0 = *arg3;
    double v1;
    v1 = arg3[1];
    int64_t v11;
    v11 = arg2[2];
    float v2 = arg3[2];
    float v4 = (((v9 * v9) + (v10 * v10)) + (v11 * v11));
    float v5 = (((v0 * v0) + (v1 * v1)) + (v2 * v2));
    /* unimplemented  {fsqrt s4, s4} */;
    /* unimplemented  {fsqrt s5, s5} */;
    v0 = (v0 / v5);
    v1 = (v1 / v5);
    v0 = ((v9 / v4) * v0);
    v1 = ((v10 / v4) * v1);
    v0 = (v0 + v1);
    v0 = (((v11 / v4) * (v2 / v5)) + v0);
    double v3;
    v3 = 0xbf800000;
    /* unimplemented  {fabs s1, s0} */;
    v1 = (v1 + -1f);
    /* unimplemented  {fabs s1, s1} */;
    int32_t x8;
    if (!(v1 >= 0.0001))
    {
        x8 = 1;
    }
    else
    {
        v0 = acosf(v0);
        v3 = v0;
        v1 = (3.1415926535897931 - v3);
        if (v3 > 1.5707963267948966)
        {
            v0 = v1;
        }
        else
        {
            v0 = v0;
        }
        /* unimplemented  {fabs s0, s0} */;
        v0 = v0;
        if (v0 <= 0.52359877559829882)
        {
            x8 = 1;
        }
        else
        {
            x8 = 0;
        }
    }
    v1 = arg2[3];
    v0 = 0f;
    v2 = (v9 * v0);
    v3 = (v10 * v0);
    v0 = (v11 * v0);
    v0 = (v0 + v1);
    v1 = *(arg1 + 0x14a4);
    v0 = ((v2 + v3) + v0);
    /* unimplemented  {fabs s0, s0} */;
    /* unimplemented  {fabd s0, s0, s8} */;
    int32_t x9;
    if (v0 <= v1)
    {
        x9 = 1;
    }
    else
    {
        x9 = 0;
    }
    return (x8 & x9);
}

float ground_filter::Plane_Seg::getVectorAngle(int64_t arg1, int32_t* arg2, int32_t* arg3)
{
    float v0 = *arg2;
    double v1;
    v1 = arg2[1];
    float v3 = *arg3;
    float v4 = arg3[1];
    float v2 = arg2[2];
    float v5 = arg3[2];
    float v6 = (((v0 * v0) + (v1 * v1)) + (v2 * v2));
    float v7 = (((v3 * v3) + (v4 * v4)) + (v5 * v5));
    /* unimplemented  {fsqrt s6, s6} */;
    /* unimplemented  {fsqrt s7, s7} */;
    v1 = (v1 / v6);
    v1 = (v1 * (v4 / v7));
    v0 = ((((v0 / v6) * (v3 / v7)) + v1) + ((v2 / v6) * (v5 / v7)));
    /* unimplemented  {fabs s1, s0} */;
    v1 = (v1 + -1f);
    /* unimplemented  {fabs s1, s1} */;
    if (!(v1 >= 0.0001))
    {
        return 0f;
    }
    float v0_1 = acosf(v0);
    double v3_1 = v0_1;
    double v1_1;
    v1_1 = (3.1415926535897931 - v3_1);
    if (v3_1 > 1.5707963267948966)
    {
        v0_1 = v1_1;
    }
    /* unimplemented  {fabs s0, s0} */;
    return v0_1;
}

int64_t ground_filter::Plane_Seg::run(cv::Mat* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, cv::Mat* arg6, cv::Mat* arg7, float arg8, int64_t* arg9)
{
    if ((arg1 + 0x14a8) != arg9)
    {
        arg9[1];
        std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::assign<ground_filter::plane_base*>((arg1 + 0x14a8), *arg9);
    }
    /* tailcall */
    return ground_filter::Plane_Seg::run(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
}

void* ground_filter::Plane_Seg::run(cv::Mat* arg1, int64_t* arg2, int32_t arg3, int32_t arg4, int32_t arg5, int32_t* arg6, void* arg7, int64_t* arg8, int128_t arg9 @ v0, int64_t arg10 @ v1, float arg11, float arg12, int64_t arg13 @ v4, int64_t arg14 @ x8)
{
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    int32_t s_31 = (arg4 * arg3);
    float v8 = arg9;
    void* x27 = arg7;
    int64_t s_30 = s_31;
    char* s_4;
    __builtin_memset(&s_4, 0, 0x30);
    int64_t v5;
    int64_t v6;
    int64_t v7;
    int64_t v19;
    if (s_31 != 0)
    {
        if ((s_30 & 0x80000000) != 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        else
        {
            char* s_5;
            s_5 = operator new(s_30);
            char* s_29 = s_5;
            void* var_d0_1 = &s_5[s_30];
            int64_t i_1 = -(s_30);
            s_4 = s_5;
            char* s_26 = s_5;
            int64_t i;
            do
            {
                *s_29 = 0;
                i = i_1;
                i_1 = (i_1 + 1);
                s_29 = &s_26[1];
                s_26 = s_29;
            } while (i != -1);
        }
    }
    if ((s_31 == 0 || (s_31 != 0 && (s_30 & 0x80000000) == 0)))
    {
        int32_t v16;
        bool cond:0_1;
        if (*(arg1 + 0x14a0) == 0)
        {
            int32_t x10_1 = *arg6;
            *(arg1 + 0x13b8) = x10_1;
            int32_t x12_1 = arg6[1];
            v5 = x10_1;
            *(arg1 + 0x13bc) = x12_1;
            int32_t x13_1 = arg6[2];
            v6 = x12_1;
            *(arg1 + 0x13c0) = x13_1;
            v7 = x13_1;
            *(arg1 + 0x13c4) = arg6[3];
            int32_t x8_5 = arg6[4];
            *(arg1 + 0x13c8) = x8_5;
            int32_t x9_1 = arg6[5];
            *v5[4] = x8_5;
            *(arg1 + 0x13cc) = x9_1;
            int32_t x11_1 = arg6[6];
            *v6[4] = x9_1;
            *(arg1 + 0x13d0) = x11_1;
            *v7[4] = x11_1;
            *(arg1 + 0x13d4) = arg6[7];
            int32_t x14_2 = arg6[8];
            *(arg1 + 0x13d8) = x14_2;
            int32_t x15_1 = arg6[9];
            arg9 = x14_2;
            *(arg1 + 0x13dc) = x15_1;
            float x16_1 = arg6[0xa];
            arg10 = x15_1;
            *(arg1 + 0x13e0) = x16_1;
            arg11 = x16_1;
            *(arg1 + 0x13e4) = arg6[0xb];
            float x17_2 = arg6[0xc];
            *(arg1 + 0x13e8) = x17_2;
            float x0_1 = arg6[0xd];
            v16 = x17_2;
            *(arg1 + 0x13ec) = x0_1;
            float x1 = arg6[0xe];
            float v17 = x0_1;
            /* unimplemented  {fnmul s4, s17, s1} */;
            float v18 = x1;
            *(arg1 + 0x13f0) = x1;
            v19 = (v18 * arg11);
            int32_t x0_2 = arg6[0xf];
            arg12 = ((arg13 - (v16 * arg9)) - v19);
            v19 = (v6 * v17);
            *v19[4] = (*v6[4] * v17);
            arg13 = (v5 * v16);
            *arg13[4] = (*v5[4] * v16);
            /* unimplemented  {fneg v19.2s, v19.2s} */;
            (arg13 - v19);
            (*arg13[4] - *v19[4]);
            (arg13 - arg13);
            (*arg13[4] - *arg13[4]);
            *(arg1 + 0x13f8) = x10_1;
            *(arg1 + 0x1408) = x12_1;
            *(arg1 + 0x1418) = x13_1;
            *(arg1 + 0x1400) = x14_2;
            *(arg1 + 0x1410) = x15_1;
            *(arg1 + 0x1420) = x16_1;
            *(arg1 + 0x13fc) = x8_5;
            *(arg1 + 0x1404) = 0;
            *(arg1 + 0x140c) = x9_1;
            *(arg1 + 0x1414) = 0;
            *(arg1 + 0x141c) = x11_1;
            *(arg1 + 0x1424) = 0;
            *(arg1 + 0x1434) = 0x3f800000;
            *(arg1 + 0x1430) = arg12;
            *(arg1 + 0x13f4) = x0_2;
            *(arg1 + 0x1428) = arg13;
            *(arg1 + 0x1438) = *x27;
            *(arg1 + 0x143c) = *(x27 + 4);
            /* unimplemented  {fsqrt s16, s16} */;
            cond:0_1 = (((v16 * v16) + (v17 * v17)) + (v18 * v18)) >= 100f;
            *(arg1 + 0x1440) = *(x27 + 8);
            *(arg1 + 0x1444) = *(x27 + 0xc);
            if (cond:0_1)
            {
                *(arg1 + 0x1448) = 0;
            }
        }
        else
        {
            v5 = *(arg1 + 0x13f8);
            v6 = *(arg1 + 0x1408);
            v7 = *(arg1 + 0x1418);
            arg13 = *(arg1 + 0x1428);
            arg9 = *(arg1 + 0x1400);
            arg10 = *(arg1 + 0x1410);
            arg11 = *(arg1 + 0x1420);
            arg12 = *(arg1 + 0x1430);
        }
        if ((*(arg1 + 0x14a0) != 0 || (*(arg1 + 0x14a0) == 0 && !(cond:0_1))))
        {
            *(arg1 + 0x1448) = v8;
        }
        if ((((*(arg1 + 0x14a0) == 0 && cond:0_1) || *(arg1 + 0x14a0) != 0) || (*(arg1 + 0x14a0) == 0 && !(cond:0_1))))
        {
            v5 = (v5 * 0f);
            *v5[4] = (*v5[4] * 0f);
            v6 = (v6 * 0f);
            *v6[4] = (*v6[4] * 0f);
            v7 = (v7 * 0f);
            *v7[4] = (*v7[4] * 0f);
            v16 = 0f;
            arg9 = (arg9 * v16);
            arg10 = (arg10 * v16);
            v5 = (v5 + v6);
            *v5[4] = (*v5[4] + *v6[4]);
            arg9 = (arg9 + arg10);
            arg10 = (v5 + v7);
            *arg10[4] = (*v5[4] + *v7[4]);
            arg9 = (arg9 + (arg11 * v16));
            arg10 = (arg13 + arg10);
            *arg10[4] = (*arg13[4] + *arg10[4]);
            arg9 = (arg12 + arg9);
            *(arg1 + 0x144c) = v8;
            *(arg1 + 0x13b4) = 0x3f800000;
            *(arg1 + 0x13a8) = arg10;
            *(arg1 + 0x13b0) = arg9;
            void* s_3;
            __builtin_memset(&s_3, 0, 0x30);
            void* s_2;
            __builtin_memset(&s_2, 0, 0x18);
            int64_t var_120_1;
            if ((s_30 != 0 && (s_30 & 0x80000000) == 0))
            {
                int64_t x0_4;
                x0_4 = operator new((s_30 << 2));
                arg9 = x0_4;
                *arg9[8] = x0_4;
                s_2 = arg9;
                var_120_1 = (x0_4 + (s_30 << 2));
            }
            if (((s_30 != 0 && (s_30 & 0x80000000) == 0) || s_30 == 0))
            {
                int64_t s_1;
                void* var_f8;
                char var_a0;
                void* x19_2;
                void* s_17;
                if (arg4 <= 0)
                {
                    s_17 = nullptr;
                    x19_2 = nullptr;
                }
                else
                {
                    x27 = nullptr;
                    int32_t x9_2 = 0;
                    void* var_108_1;
                    do
                    {
                        if (arg3 >= 1)
                        {
                            int32_t x23_1 = 0;
                            int32_t x19_1 = ((arg5 >> 1) + (arg5 * x27));
                            do
                            {
                                uint64_t x28_1 = (x27 + x23_1);
                                uint64_t x11_2 = x19_1;
                                s_4[x28_1] = 1;
                                int64_t x10_2 = *arg2;
                                int64_t x9_4 = arg2[1];
                                void* var_128_1;
                                int32_t* x8_17 = var_128_1;
                                int32_t x24_1 = *(x10_2 + ((x9_4 + x11_2) << 2));
                                int32_t x22_1 = *(x10_2 + ((x11_2 + (x9_4 << 1)) << 2));
                                int32_t x21_1 = *(x10_2 + (x19_1 << 2));
                                s_1 = x19_1;
                                if (x8_17 >= var_120_1)
                                {
                                    std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t>(&s_2);
                                }
                                else
                                {
                                    *x8_17 = x19_1;
                                    var_128_1 = &x8_17[1];
                                }
                                __builtin_memset(&s_1, 0, 0x18);
                                int64_t s_6 = operator new(0xc);
                                s_30 = s_6;
                                *s_6 = x21_1;
                                *(s_6 + 4) = x24_1;
                                s_1 = s_6;
                                int64_t var_140_1 = (s_6 + 0xc);
                                *(s_6 + 8) = x22_1;
                                int64_t var_138_1 = (s_6 + 0xc);
                                uint32_t x8_20 = ground_filter::Plane_Seg::judgPointsValid(arg1);
                                if (x8_20 != 2)
                                {
                                    if (x8_20 == 0)
                                    {
                                        s_4[x28_1] = 0;
                                    }
                                    else
                                    {
                                        void* var_f0_1;
                                        int32_t* x8_22 = var_f0_1;
                                        var_a0 = x21_1;
                                        int64_t var_e8;
                                        if (x8_22 == var_e8)
                                        {
                                            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(&var_f8);
                                        }
                                        else
                                        {
                                            *x8_22 = x21_1;
                                            x8_22[1] = x24_1;
                                            x8_22[2] = x22_1;
                                            var_f0_1 = &x8_22[3];
                                        }
                                        int32_t* x8_23 = var_108_1;
                                        int32_t var_14c_1 = x28_1;
                                        int64_t var_100;
                                        if (x8_23 >= var_100)
                                        {
                                            std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t>(&s_3);
                                        }
                                        else
                                        {
                                            *x8_23 = x28_1;
                                            var_108_1 = &x8_23[1];
                                        }
                                    }
                                }
                                arg9 = operator delete(s_30);
                                x23_1 = (x23_1 + 1);
                                x19_1 = (x19_1 + arg5);
                            } while (x23_1 < arg3);
                            x27 = (x27 + x23_1);
                        }
                        x9_2 = (x9_2 + 1);
                    } while (x9_2 < arg4);
                    s_17 = s_3;
                    x19_2 = var_108_1;
                }
                __builtin_memset(&s_1, 0, 0x18);
                uint64_t x0_11 = (x19_2 - s_17);
                int64_t var_b0 = *arg8;
                int32_t x8_29 = arg8[1];
                void* s;
                __builtin_memset(&s, 0, 0x18);
                int32_t var_a8 = x8_29;
                void* var_c8;
                if (x19_2 != s_17)
                {
                    int64_t x20_1 = (x0_11 >> 2);
                    if ((x20_1 >> 0x3e) != 0)
                    {
                        int64_t x0_22 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
                        int64_t s_13 = s_1;
                        void* s_14;
                        if (s_13 == 0)
                        {
                            s_14 = s_2;
                        }
                        else
                        {
                            int64_t s_21 = s_13;
                            operator delete(s_13);
                            s_14 = s_2;
                        }
                        void* s_15;
                        if (((s_13 == 0 && s_14 != 0) || (s_13 != 0 && s_14 != 0)))
                        {
                            void* s_23 = s_14;
                            operator delete(s_14);
                            s_15 = s_3;
                            void* x0_23;
                            if (s_15 == 0)
                            {
                            label_23d44:
                                x0_23 = var_f8;
                                char* s_16;
                                if (x0_23 != 0)
                                {
                                label_23dc0:
                                    void* var_f0_3 = x0_23;
                                    operator delete(x0_23);
                                    s_16 = s_4;
                                    if (s_16 != 0)
                                    {
                                    label_23dd0:
                                        char* s_28 = s_16;
                                        operator delete(s_16);
                                    }
                                }
                                else
                                {
                                label_23d4c:
                                    s_16 = s_4;
                                    if (s_16 != 0)
                                    {
                                        goto label_23dd0;
                                    }
                                }
                                void* x0_24 = var_c8;
                                if (x0_24 != 0)
                                {
                                    void* var_c0_2 = x0_24;
                                    operator delete(x0_24);
                                }
                                cv::Mat* x0_26;
                                int64_t* x1_6;
                                char** x2_5;
                                int32_t* x3_3;
                                int32_t** x4_3;
                                cv::Mat* x5_1;
                                int64_t* x6_1;
                                int64_t* x7_1;
                                x0_26 = _Unwind_Resume(x0_22);
                                int32_t var_1b0;
                                /* tailcall */
                                return ground_filter::Plane_Seg::segPlane(x0_26, x1_6, x2_5, x3_3, x4_3, x5_1, x6_1, x7_1, s_30, x27, var_1b0);
                            }
                        label_23db0:
                            void* s_25 = s_15;
                            operator delete(s_15);
                            x0_23 = var_f8;
                            if (x0_23 != 0)
                            {
                                goto label_23dc0;
                            }
                            goto label_23d4c;
                        }
                        if (((s_13 == 0 && s_14 == 0) || (s_13 != 0 && s_14 == 0)))
                        {
                            s_15 = s_3;
                            if (s_15 == 0)
                            {
                                goto label_23d44;
                            }
                            goto label_23db0;
                        }
                    }
                    else
                    {
                        void* s_7;
                        s_7 = operator new(x0_11);
                        void* x24_2 = (x19_2 - s_17);
                        s = s_7;
                        void* s_18 = s_7;
                        void* var_158_1 = (s_7 + (x20_1 << 2));
                        if (x24_2 >= 1)
                        {
                            arg9 = memcpy(s_7, s_17, x24_2);
                            void* var_160_1 = (s_7 + x24_2);
                        }
                    }
                }
                int32_t var_1b0_1 = 0x32;
                int64_t var_90;
                int32_t x0_14;
                int64_t x1_3;
                int64_t x2_2;
                int64_t x3_1;
                4ul* x4_1;
                x0_14 = ground_filter::Plane_Seg::segPlane(arg1, &var_f8, &s_4, &var_90, &var_c8, &s_1, &var_b0, &s, arg9);
                void* s_8 = s;
                if (s_8 != 0)
                {
                    void* s_19 = s_8;
                    x1_3 = operator delete(s_8);
                }
                if ((x0_14 & 1) == 0)
                {
                    var_a0 = 0;
                    var_1b0_1 = &s_4;
                    char* var_1a8_1 = &var_a0;
                    std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool>(arg14, x1_3, x2_2, x3_1, x4_1);
                }
                else
                {
                    char x0_16;
                    int64_t x1_5;
                    int64_t x2_4;
                    int64_t x3_2;
                    4ul* x4_2;
                    x0_16 = ground_filter::Plane_Seg::judgPlaneValid(arg1, &var_90, v8);
                    var_a0 = (x0_16 & 1);
                    int32_t var_84;
                    if (!(var_84 >= 0f))
                    {
                        /* unimplemented  {fneg s0, s0} */;
                        /* unimplemented  {fneg v1.2s, v1.2s} */;
                        var_90 = var_90;
                        int32_t var_88;
                        int64_t v1;
                        v1 = var_88;
                        /* unimplemented  {fneg s1, s1} */;
                        int32_t var_88_1 = v1;
                        int32_t var_84_1 = var_84;
                    }
                    var_1b0_1 = &s_4;
                    char* var_1a8 = &var_a0;
                    std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool&>(arg14, x1_5, x2_4, x3_2, x4_2);
                }
                int64_t s_9 = s_1;
                if (s_9 != 0)
                {
                    int64_t s_20 = s_9;
                    operator delete(s_9);
                }
                void* s_10 = s_2;
                if (s_10 != 0)
                {
                    void* s_22 = s_10;
                    operator delete(s_10);
                }
                void* s_11 = s_3;
                if (s_11 != 0)
                {
                    void* s_24 = s_11;
                    operator delete(s_11);
                }
                void* x0_19 = var_f8;
                if (x0_19 != 0)
                {
                    void* var_f0_2 = x0_19;
                    operator delete(x0_19);
                }
                char* s_12 = s_4;
                if (s_12 != 0)
                {
                    char* s_27 = s_12;
                    operator delete(s_12);
                }
                void* x0_20 = var_c8;
                if (x0_20 != 0)
                {
                    void* var_c0_1 = x0_20;
                    x0_20 = operator delete(x0_20);
                }
                if (*(x8 + 0x28) != x8_1)
                {
                    __stack_chk_fail();
                    /* no return */
                }
                return x0_20;
            }
        }
    }
    sub_20e70();
    /* no return */
}

int64_t sub_23d00(int64_t arg1, void* arg2 @ x29, void* arg3, void* arg4, void* arg5, void* arg6, void* arg7, void* arg8)
{
    void* x0;
    if (arg3 != 0)
    {
        arg_50 = arg3;
        operator delete(arg3);
        x0 = arg4;
    }
    else
    {
        x0 = arg4;
    }
    void* x0_2;
    if (((arg3 != 0 && x0 == 0) || (arg3 == 0 && x0 == 0)))
    {
        x0_2 = arg5;
        void* x0_3;
        if (x0_2 != 0)
        {
        label_23da0:
            arg_88 = x0_2;
            operator delete(x0_2);
            x0_3 = arg6;
            void* x0_4;
            if (x0_3 == 0)
            {
            label_23d44:
                x0_4 = arg7;
                void* x0_5;
                if (x0_4 != 0)
                {
                label_23dc0:
                    arg_c0 = x0_4;
                    operator delete(x0_4);
                    x0_5 = arg8;
                    if (x0_5 != 0)
                    {
                    label_23dd0:
                        arg_d8 = x0_5;
                        operator delete(x0_5);
                    }
                }
                else
                {
                label_23d4c:
                    x0_5 = arg8;
                    if (x0_5 != 0)
                    {
                        goto label_23dd0;
                    }
                }
                void* x0_6 = *(arg2 - 0xb8);
                if (x0_6 != 0)
                {
                    *(arg2 - 0xb0) = x0_6;
                    operator delete(x0_6);
                }
                _Unwind_Resume(arg1);
                /* tailcall */
                return ground_filter::Plane_Seg::segPlane();
            }
        label_23db0:
            arg_a8 = x0_3;
            operator delete(x0_3);
            x0_4 = arg7;
            if (x0_4 != 0)
            {
                goto label_23dc0;
            }
            goto label_23d4c;
        }
    label_23d3c:
        x0_3 = arg6;
        if (x0_3 == 0)
        {
            goto label_23d44;
        }
        goto label_23db0;
    }
    if (((arg3 != 0 && x0 != 0) || (arg3 == 0 && x0 != 0)))
    {
        arg_70 = x0;
        operator delete(x0);
        x0_2 = arg5;
        if (x0_2 != 0)
        {
            goto label_23da0;
        }
        goto label_23d3c;
    }
}

int64_t sub_23d04(int64_t arg1, void* arg2 @ x29, void* arg3, void* arg4, void* arg5, void* arg6)
{
    void* x0;
    if (arg3 == 0)
    {
        x0 = arg4;
    }
    else
    {
        arg_88 = arg3;
        operator delete(arg3);
        x0 = arg4;
    }
    void* x0_2;
    if (((arg3 == 0 && x0 != 0) || (arg3 != 0 && x0 != 0)))
    {
        arg_a8 = x0;
        operator delete(x0);
        x0_2 = arg5;
        void* x0_3;
        if (x0_2 == 0)
        {
        label_23d4c:
            x0_3 = arg6;
            if (x0_3 != 0)
            {
            label_23dd0:
                arg_d8 = x0_3;
                operator delete(x0_3);
            }
        }
        else
        {
        label_23dc0:
            arg_c0 = x0_2;
            operator delete(x0_2);
            x0_3 = arg6;
            if (x0_3 != 0)
            {
                goto label_23dd0;
            }
        }
        void* x0_4 = *(arg2 - 0xb8);
        if (x0_4 != 0)
        {
            *(arg2 - 0xb0) = x0_4;
            operator delete(x0_4);
        }
        _Unwind_Resume(arg1);
        /* tailcall */
        return ground_filter::Plane_Seg::segPlane();
    }
    if (((arg3 == 0 && x0 == 0) || (arg3 != 0 && x0 == 0)))
    {
        x0_2 = arg5;
        if (x0_2 == 0)
        {
            goto label_23d4c;
        }
        goto label_23dc0;
    }
}

int64_t sub_23d70()
{
    int64_t x26;
    arg_70 = x26;
    /* tailcall */
    return sub_23d80();
}

int64_t ground_filter::Plane_Seg::segPlane(cv::Mat* arg1, int64_t* arg2, char** arg3, int32_t* arg4, int32_t** arg5, cv::Mat* arg6, int64_t* arg7, int64_t* arg8, void* arg9 @ x26, void* arg10 @ x27, int32_t arg11)
{
    double v15;
    double var_a0 = v15;
    double v14;
    double var_98 = v14;
    int64_t v13;
    int64_t var_90 = v13;
    int64_t v12;
    int64_t var_88 = v12;
    int64_t v11;
    int64_t var_80 = v11;
    int64_t v10;
    int64_t var_78 = v10;
    int64_t v9;
    int64_t var_70 = v9;
    double v8;
    double var_68 = v8;
    void* var_58 = arg10;
    void* var_50 = arg9;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int64_t x20 = (((arg2[1] - *arg2) >> 2) * -0x5555555555555555);
    int64_t x0;
    if (x20 < 0xa)
    {
        x0 = 0;
    }
    else
    {
        v8 = *(arg1 + 0x14a4);
        void* s_2;
        __builtin_memset(&s_2, 0, 0x18);
        void* s;
        void* s_1;
        void* var_148;
        if ((x20 >> 0x3e) != 0)
        {
            int64_t x0_19 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* s_7 = s;
            if (s_7 != 0)
            {
                void* s_13 = s_7;
                operator delete(s_7);
            }
            operator delete(arg9);
            void* var_c0_1 = arg10;
            operator delete(arg10);
            void* s_8 = s_1;
            if (s_8 != 0)
            {
                void* s_15 = s_8;
                operator delete(s_8);
            }
            void* x0_22 = var_148;
            void* s_9;
            if (x0_22 != 0)
            {
                void* var_140_2 = x0_22;
                operator delete(x0_22);
                s_9 = s_2;
            }
            else
            {
                s_9 = s_2;
            }
            if (((x0_22 != 0 && s_9 != 0) || (x0_22 == 0 && s_9 != 0)))
            {
                void* s_16 = s_9;
                operator delete(s_9);
            }
            void* x0_24;
            int32_t* x1_6;
            int32_t* x2_4;
            x0_24 = _Unwind_Resume(x0_19);
            /* tailcall */
            return ground_filter::Plane_Seg::getIndication(x0_24, x1_6, x2_4);
        }
        int64_t x23_1 = (x20 << 2);
        int32_t* j_1 = operator new(x23_1);
        void* x21_1 = (j_1 + x23_1);
        void* var_108_1 = x21_1;
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_1;
        int128_t v3_1;
        v0_1 = memset(j_1, 0, x23_1);
        if (x23_1 != 0)
        {
            int64_t x8_6 = ((x21_1 - j_1) >> 2);
            int64_t x10_1;
            if (x8_6 > 1)
            {
                x10_1 = x8_6;
            }
            else
            {
                x10_1 = 1;
            }
            int64_t i_3;
            if (x10_1 >= 8)
            {
                v0_1 = data_54730;
                i_3 = (x10_1 & 0xfffffffffffffff8);
                void* x11_1 = &j_1[4];
                v1_1 = 4;
                *v1_1[4] = 4;
                *v1_1[8] = 4;
                *v1_1[0xc] = 4;
                v2_1 = 8;
                *v2_1[4] = 8;
                *v2_1[8] = 8;
                *v2_1[0xc] = 8;
                int64_t i_2 = i_3;
                int16_t i;
                do
                {
                    *(x11_1 - 0x10) = v0_1;
                    *x11_1 = (v0_1 + v1_1);
                    v0_1 = (v0_1 + v2_1);
                    i = i_2;
                    i_2 = (i_2 - 8);
                    x11_1 = (x11_1 + 0x20);
                } while (i != 8);
            }
            else
            {
                i_3 = 0;
            }
            if ((x10_1 < 8 || (x10_1 >= 8 && x10_1 != i_3)))
            {
                do
                {
                    j_1[i_3] = i_3;
                    i_3 = (i_3 + 1);
                } while (x8_6 > i_3);
            }
        }
        int32_t var_194_1 = 0x80000001;
        v3_1 = data_54740;
        v1_1 = 0x3fc999999999999a;
        int64_t* x24_1 = arg2;
        v0_1 = vcvth_f16_u16(x20);
        v9 = 0x3f800000;
        v2_1 = v8;
        v0_1 = (1f / v0_1);
        uint32_t x21_2 = 0;
        v14 = v0_1;
        __builtin_memset(&s_1, 0, 0x40);
        int64_t var_130;
        cv::Mat* s_3;
        int32_t i_1;
        do
        {
            v0_1 = vcvts_f32_s32(x21_2);
            /* unimplemented  {frintp s1, s9} */;
            if (v1_1 <= v0_1)
            {
                break;
            }
            __builtin_memset(&s_3, 0, 0x18);
            cv::Mat* s_4 = operator new(0x24);
            void* var_b8_1 = (s_4 + 0x24);
            s_3 = s_4;
            float var_c0 = (s_4 + 0x24);
            cv::Mat* x0_2;
            int128_t v0_2;
            x0_2 = operator new(0xc);
            int32_t* j = j_1;
            cv::Mat* x26_1 = x0_2;
            *(x0_2 + 8) = 0;
            *x0_2 = 0;
            void* x8_8 = (x21_1 - j);
            int64_t var_100;
            int64_t var_f8;
            if (x8_8 >= 5)
            {
                s = v3_1;
                if ((x21_1 - 4) > j)
                {
                    int64_t x24_2 = ((x8_8 >> 2) - 1);
                    do
                    {
                        var_100 = 0;
                        var_f8 = x24_2;
                        x0_2 = std::__ndk1::uniform_int_distribution<int64_t>::operator()<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(&s, (arg1 + 0x20));
                        if (x0_2 != 0)
                        {
                            int64_t x8_10 = (x0_2 << 2);
                            int32_t x10_2 = *j;
                            *j = *(j + x8_10);
                            *(j + x8_10) = x10_2;
                        }
                        j = &j[1];
                        x24_2 = (x24_2 - 1);
                    } while ((x21_1 - 4) > j);
                    j = j_1;
                    x24_1 = arg2;
                }
            }
            x0_2 = memmove(x26_1, j, 0xc);
            int64_t x8_11 = *x24_1;
            int32_t* x9_4 = (x8_11 + (*x26_1 * 0xc));
            int32_t* x10_4 = (x8_11 + (*(x26_1 + 4) * 0xc));
            *s_4 = *x9_4;
            *(s_4 + 4) = x9_4[1];
            *(s_4 + 8) = x9_4[2];
            *(s_4 + 0xc) = *x10_4;
            *(s_4 + 0x10) = x10_4[1];
            int64_t x10_5 = *(x26_1 + 8);
            *(s_4 + 0x14) = x10_4[2];
            int32_t* x8_12 = (x8_11 + (x10_5 * 0xc));
            *(s_4 + 0x18) = *x8_12;
            *(s_4 + 0x1c) = x8_12[1];
            *(s_4 + 0x20) = x8_12[2];
            int64_t var_d8 = *arg7;
            int32_t var_d0_1 = arg7[1];
            int32_t x0_5;
            int128_t v0_3;
            x0_5 = ground_filter::Plane_Seg::getPlaneFrom3Points(x0_2, &s_3, &var_d8);
            if ((x0_5 & 1) == 0)
            {
                i_1 = 5;
            }
            else
            {
                __builtin_memset(&s, 0, 0x18);
                int32_t* x23_2 = *x24_1;
                int64_t x25_3 = x24_1[1];
                uint64_t x0_6 = (x25_3 - x23_2);
                void* s_11;
                int64_t var_170_1;
                void* s_10;
                if (x25_3 == x23_2)
                {
                    s_10 = nullptr;
                }
                else
                {
                    int64_t x24_3 = ((x0_6 >> 2) * -0x5555555555555555);
                    if (x24_3 >= 0x1555555555555556)
                    {
                        sub_20e70();
                        /* no return */
                    }
                    void* s_5;
                    s_5 = operator new(x0_6);
                    x24_1 = arg2;
                    s_10 = s_5;
                    s = s_5;
                    s_11 = s_5;
                    var_170_1 = (s_5 + (x24_3 * 0xc));
                }
                void* s_17 = s_10;
                double var_e8;
                if (x23_2 != x25_3)
                {
                    v10 = var_100;
                    v8 = *var_100[4];
                    v11 = var_f8;
                    v13 = *var_f8[4];
                    do
                    {
                        int32_t x8_17 = *x23_2;
                        var_e8 = x8_17;
                        float x9_13 = x23_2[1];
                        v0_3 = x8_17;
                        v0_3 = (v10 * v0_3);
                        *var_e8[4] = x9_13;
                        float x10_6 = x23_2[2];
                        v0_3 = (v0_3 + (v8 * x9_13));
                        v0_3 = (v0_3 + ((v11 * x10_6) + v13));
                        /* unimplemented  {fabs s0, s0} */;
                        v0_3 = v0_3;
                        if (!((v2_1 * 0.20000000000000001) <= v0_3))
                        {
                            if (s_11 == var_170_1)
                            {
                                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(&s);
                            }
                            else
                            {
                                *s_11 = x8_17;
                                *(s_11 + 4) = *var_e8[4];
                                *(s_11 + 8) = x10_6;
                                s_11 = (s_11 + 0xc);
                            }
                        }
                        x23_2 = &x23_2[3];
                    } while (x23_2 != x25_3);
                    s_10 = s;
                    s_17 = s_11;
                }
                int32_t x23_3 = (((s_17 - s_10) >> 2) * 0xaaaaaaab);
                if (var_194_1 < x23_3)
                {
                    var_130 = var_100;
                    std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&var_148, s_10);
                    std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&s_1, s_4);
                    double v0_5 = (1.0 - pow((v14 * vcvt_f64_s64(x23_3)), 3.0));
                    double var_188 = 2.2204460492503131e-16;
                    var_e8 = v0_5;
                    double* x8_20;
                    if (v0_5 > 2.2204460492503131e-16)
                    {
                        x8_20 = &var_e8;
                    }
                    else
                    {
                        x8_20 = &var_188;
                    }
                    double x8_21 = *x8_20;
                    v0_5 = x8_21;
                    if (!(v0_5 < 0.99999999999999978))
                    {
                        v0_5 = 0.99999999999999978;
                    }
                    var_e8 = x8_21;
                    double v0_6 = log(v0_5);
                    s_10 = s;
                    var_194_1 = x23_3;
                    v9 = (-4.6051702499389648 / v0_6);
                }
                if (x21_2 < arg11)
                {
                    i_1 = 0;
                }
                else
                {
                    i_1 = 6;
                }
                if (s_10 != 0)
                {
                    void* s_12 = s_10;
                    operator delete(s_10);
                }
                x21_2 = (x21_2 + 1);
            }
            operator delete(x26_1);
            v0_1 = operator delete(s_4);
        } while (i_1 != 6);
        ground_filter::Plane_Seg::optimizePlaneCoef(arg1, &var_148, &var_130);
        int64_t* x9_19 = arg5;
        x9_19[1] = *x9_19;
        int32_t* x19_3 = *x24_1;
        int64_t x20_1 = x24_1[1];
        if (x19_3 != x20_1)
        {
            int64_t x21_3 = 0;
            do
            {
                float x24_4 = *x19_3;
                float x25_4 = x19_3[1];
                double v0_7;
                v0_7 = *arg4;
                double v1_4;
                v1_4 = arg4[1];
                float x26_2 = x19_3[2];
                v0_7 = (v0_7 * x24_4);
                v1_4 = (v1_4 * x25_4);
                v0_7 = (v0_7 + v1_4);
                v1_4 = ((arg4[2] * x26_2) + arg4[3]);
                v0_7 = (v0_7 + v1_4);
                /* unimplemented  {fabs s0, s0} */;
                if (!((v2_1 * 0.5) <= v0_7))
                {
                    int32_t x8_24 = *(*arg8 + x21_3);
                    s = x8_24;
                    int32_t* x9_20 = arg5[1];
                    if (x9_20 == arg5[2])
                    {
                        v0_7 = std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(arg5);
                    }
                    else
                    {
                        *x9_20 = x8_24;
                        arg5[1] = &x9_20[1];
                    }
                    *arg3[s] = 2;
                    s_3 = x24_4;
                    *s_3[4] = x25_4;
                    cv::Mat** x8_26 = *(arg6 + 8);
                    if (x8_26 >= *(arg6 + 0x10))
                    {
                        v0_7 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> >(arg6);
                    }
                    else
                    {
                        *x8_26 = s_3;
                        x8_26[1] = x26_2;
                        *x8_26 = x24_4;
                        *(x8_26 + 4) = *s_3[4];
                        x8_26[1] = x26_2;
                        *(arg6 + 8) = (*(arg6 + 8) + 0xc);
                    }
                }
                x19_3 = &x19_3[3];
                x21_3 = (x21_3 + 4);
            } while (x19_3 != x20_1);
        }
        void* s_6 = s_1;
        if (s_6 != 0)
        {
            void* s_14 = s_6;
            operator delete(s_6);
        }
        void* x0_16 = var_148;
        if (x0_16 != 0)
        {
            void* var_140_1 = x0_16;
            operator delete(x0_16);
        }
        if (j_1 != 0)
        {
            int32_t* j_2 = j_1;
            operator delete(j_1);
        }
        x0 = 1;
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

int64_t sub_244c4(int64_t arg1, void* arg2, void* arg3, void* arg4)
{
    if (arg2 != 0)
    {
        arg_a8 = arg2;
        operator delete(arg2);
    }
    void* x0_2;
    if (arg3 != 0)
    {
        arg_c0 = arg3;
        operator delete(arg3);
        x0_2 = arg4;
    }
    else
    {
        x0_2 = arg4;
    }
    if (((arg3 != 0 && x0_2 != 0) || (arg3 == 0 && x0_2 != 0)))
    {
        arg_f0 = x0_2;
        operator delete(x0_2);
    }
    void* x0_4;
    int32_t* x1;
    int32_t* x2;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return ground_filter::Plane_Seg::getIndication(x0_4, x1, x2);
}

void ground_filter::Plane_Seg::getIndication(void* arg1, int32_t* arg2, int32_t* arg3)
{
    *arg2 = *(arg1 + 0x1450);
    *arg3 = *(arg1 + 0x1454);
}

void ground_filter::Plane_Seg::getPointInfo(void* arg1, int32_t* arg2, int64_t* arg3)
{
    *arg2 = *(arg1 + 0x1458);
    arg2[1] = *(arg1 + 0x145c);
    arg2[2] = *(arg1 + 0x1460);
    arg2[3] = *(arg1 + 0x1464);
    arg2[4] = *(arg1 + 0x1468);
    arg2[5] = *(arg1 + 0x146c);
    arg2[6] = *(arg1 + 0x1470);
    arg2[7] = *(arg1 + 0x1474);
    arg2[8] = *(arg1 + 0x1478);
    *arg3 = *(arg1 + 0x1480);
}

int64_t ground_filter::Plane_Seg::getTFMatrix(int64_t arg1, int64_t* arg2, int128_t* arg3, double* arg4 @ x8)
{
    double v9 = arg2[1];
    double v13 = *arg2;
    double var_78;
    double var_70;
    sincos(&var_70, &var_78, (arg2[2] * 0.5));
    double v11 = var_78;
    double v10 = var_70;
    int64_t v8 = 0.0;
    double v12 = (v10 * v8);
    double var_88;
    double var_80;
    sincos(&var_80, &var_88, (v9 * 0.5));
    double v1 = var_88;
    double v0_2 = var_80;
    double v2 = (v0_2 * v8);
    double v4 = (v0_2 * v12);
    double v5 = (v1 * v12);
    double v3 = (v1 * v11);
    double v7 = (v2 * v12);
    double v16 = (v10 * v2);
    v2 = (v11 * v2);
    v11 = ((v16 + ((v0_2 * v11) + v5)) - v7);
    v12 = ((v4 + ((v1 * v10) + v2)) - v7);
    v9 = (((v3 - v7) - v4) - v16);
    v10 = ((v7 + (v2 + v5)) - (v0_2 * v10));
    double var_68;
    double var_58;
    int64_t x0_3;
    int128_t v0_3;
    x0_3 = sincos(&var_58, &var_68, (v13 * 0.5));
    v0_3 = var_68;
    double v1_1 = var_58;
    double v7_1 = (v0_3 * v10);
    double v3_1 = (v1_1 * v8);
    double v4_1 = (v0_3 * v9);
    double v16_1 = (v0_3 * v11);
    v0_3 = (v0_3 * v12);
    double v6_1 = ((v1_1 * v9) + v7_1);
    v7_1 = (v3_1 * v9);
    double v17 = (v3_1 * v11);
    double v18 = (v3_1 * v12);
    v3_1 = (v3_1 * v10);
    v0_3 = (v0_3 + v7_1);
    v0_3 = (v3_1 + v0_3);
    v6_1 = ((v17 + v6_1) - v18);
    v3_1 = (((v1_1 * v12) + (v7_1 + v16_1)) - v3_1);
    v0_3 = (v0_3 - (v1_1 * v11));
    v4_1 = (((v4_1 - (v1_1 * v10)) - v17) - v18);
    v1_1 = (v6_1 + v6_1);
    double v5_1 = (v3_1 + v3_1);
    v7_1 = (v0_3 + v0_3);
    v16_1 = (v4_1 * v1_1);
    v1_1 = (v6_1 * v1_1);
    v17 = (v4_1 * v5_1);
    v4_1 = (v4_1 * v7_1);
    v18 = (v6_1 * v5_1);
    v6_1 = (v6_1 * v7_1);
    v5_1 = (v3_1 * v5_1);
    v3_1 = (v3_1 * v7_1);
    v0_3 = (v0_3 * v7_1);
    v7_1 = (v5_1 + v0_3);
    double v19 = (v18 - v4_1);
    double v20 = (v6_1 + v17);
    v4_1 = (v18 + v4_1);
    v0_3 = (v1_1 + v0_3);
    v18 = (v3_1 - v16_1);
    v1_1 = (v1_1 + v5_1);
    v6_1 = (v6_1 - v17);
    v3_1 = (v3_1 + v16_1);
    v5_1 = (1.0 - v7_1);
    v0_3 = (1.0 - v0_3);
    v1_1 = (1.0 - v1_1);
    double v2_1 = (v4_1 * v8);
    v16_1 = (v18 * v8);
    v17 = (v20 * v8);
    v20 = (v20 + v16_1);
    v18 = (v18 + v17);
    v16_1 = (v17 + v16_1);
    v17 = (v5_1 + v2_1);
    v5_1 = (v5_1 * v8);
    v7_1 = (v19 * v8);
    v4_1 = (v4_1 + v5_1);
    v2_1 = (v2_1 + v5_1);
    v5_1 = (v0_3 * v8);
    v0_3 = (v7_1 + v0_3);
    v19 = (v19 + v5_1);
    v5_1 = (v7_1 + v5_1);
    v7_1 = (v1_1 * v8);
    v20 = (v20 + v7_1);
    v7_1 = (v18 + v7_1);
    v18 = (v6_1 * v8);
    v1_1 = (v1_1 + v16_1);
    v16_1 = (v3_1 * v8);
    v0_3 = (v16_1 + v0_3);
    arg4[3] = 0;
    arg4[7] = 0;
    arg4[0xb] = 0;
    arg4[0xf] = 0x3ff0000000000000;
    arg4[8] = v20;
    arg4[9] = v7_1;
    arg4[0xa] = v1_1;
    *arg4 = (v18 + v17);
    arg4[1] = (v18 + v4_1);
    arg4[2] = (v6_1 + v2_1);
    arg4[4] = (v16_1 + v19);
    arg4[5] = v0_3;
    arg4[6] = (v3_1 + v5_1);
    v0_3 = (*arg3 + 0.0);
    *v0_3[8] = (*v0_3[8] + 0.0);
    v1_1 = (arg3[1] + v8);
    *(arg4 + 0x60) = v0_3;
    arg4[0xe] = v1_1;
    return x0_3;
}

int64_t ground_filter::Plane_Seg::getPlaneFrom3Points(int64_t arg1, int64_t* arg2, int32_t* arg3, float* arg4)
{
    int64_t v12;
    int64_t var_50 = v12;
    int64_t v11;
    int64_t var_40 = v11;
    int64_t v10;
    int64_t var_38 = v10;
    int64_t v9;
    int64_t var_30 = v9;
    int64_t v8;
    int64_t var_28 = v8;
    int32_t* x20 = *arg2;
    int64_t x0;
    if ((arg2[1] - x20) != 0x24)
    {
    label_248c8:
        x0 = 0;
    }
    else
    {
        float v4 = x20[2];
        double v0;
        v0 = x20[3];
        double v1;
        v1 = *x20;
        double v3;
        v3 = x20[1];
        float v2 = (v0 - v1);
        v0 = (x20[4] - v3);
        v1 = (x20[6] - v1);
        v3 = (x20[7] - v3);
        float v6 = (v0 / v3);
        float v5 = (x20[5] - v4);
        v4 = (x20[8] - v4);
        if ((!((v2 / v1) != v6) && !((v5 / v4) != v6)))
        {
            goto label_248c8;
        }
        v6 = (v0 * v4);
        v0 = (v0 * v1);
        v10 = (v6 - (v5 * v3));
        v9 = ((v5 * v1) - (v2 * v4));
        v8 = ((v2 * v3) - v0);
        arg4[3] = 0;
        *arg4 = v10;
        arg4[1] = v9;
        arg4[2] = v8;
        v0 = *arg3;
        v2 = arg3[1];
        v3 = arg3[2];
        v11 = ((v10 * v10) + (v9 * v9));
        v12 = (v8 * v8);
        v4 = (v12 + v11);
        v5 = (((v0 * v0) + (v2 * v2)) + (v3 * v3));
        /* unimplemented  {fsqrt s4, s4} */;
        /* unimplemented  {fsqrt s5, s5} */;
        v0 = (v0 / v5);
        v3 = (v3 / v5);
        v0 = ((v10 / v4) * v0);
        v2 = ((v9 / v4) * (v2 / v5));
        v3 = ((v8 / v4) * v3);
        v0 = (v0 + v2);
        v0 = (v3 + v0);
        v1 = 0xbf800000;
        /* unimplemented  {fabs s2, s0} */;
        v1 = (v2 + -1f);
        /* unimplemented  {fabs s1, s1} */;
        if (!(v1 < 0.0001))
        {
            v0 = acosf(v0);
            v3 = v0;
            v1 = (3.1415926535897931 - v3);
            if (v3 > 1.5707963267948966)
            {
                v0 = v1;
            }
            else
            {
                v0 = v0;
            }
            /* unimplemented  {fabs s0, s0} */;
            if (v0 > 0.78539816339744828)
            {
                goto label_248c8;
            }
        }
        v0 = 0f;
        v1 = (v12 + v0);
        v1 = (v11 + v1);
        /* unimplemented  {fsqrt s1, s1} */;
        v2 = (v10 / v1);
        v3 = (v9 / v1);
        v4 = (v8 / v1);
        v0 = (v0 / v1);
        *arg4 = v2;
        arg4[1] = v3;
        arg4[2] = v4;
        arg4[3] = v0;
        v0 = *x20;
        v1 = x20[1];
        x0 = 1;
        v0 = (v2 * v0);
        v1 = (v3 * v1);
        v0 = (v0 + v1);
        v0 = (v0 + (v4 * x20[2]));
        /* unimplemented  {fneg s0, s0} */;
        arg4[3] = v0;
    }
    return x0;
}

int64_t ground_filter::Plane_Seg::optimizePlaneCoef(cv::Mat* arg1, int64_t* arg2, int32_t* arg3, int32_t* arg4)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t x0;
    if ((((arg2[1] - *arg2) >> 2) * 0xaaaaaaab) <= 3)
    {
        x0 = 0;
        *arg4 = *arg3;
        arg4[1] = arg3[1];
        arg4[2] = arg3[2];
        arg4[3] = arg3[3];
    }
    else
    {
        int32_t var_70;
        ground_filter::Plane_Seg::computeMeanAndCovarianceMatrix(arg1, arg2, &var_70);
        int64_t x23_1 = *arg2;
        int64_t x21_2 = arg2[1];
        int32_t var_e8 = var_70;
        int64_t var_64;
        int32_t var_e4_1 = var_64;
        int32_t var_58;
        int32_t var_e0_1 = var_58;
        int64_t var_dc_1 = var_64;
        int64_t var_54;
        int32_t var_d4_1 = var_54;
        int32_t var_d0_1 = var_58;
        int64_t var_cc_1 = var_54;
        char var_84_1 = 0;
        float var_c0;
        Eigen::SelfAdjointEigenSolver<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::compute(&var_c0, &var_e8);
        int32_t x0_3;
        int128_t v0_2;
        int128_t v1_2;
        x0_3 = posix_memalign(&var_e8, 0x10, 0xc);
        int32_t* x0_4;
        if (x0_3 != 0)
        {
            var_e8 = 0;
        }
        else
        {
            x0_4 = var_e8;
        }
        if ((x0_3 != 0 || (x0_3 == 0 && x0_4 == 0)))
        {
            void* thrown_exception = __cxa_allocate_exception(8);
            std::bad_alloc::bad_alloc();
            __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
            /* no return */
        }
        if ((x0_3 == 0 && x0_4 != 0))
        {
            float x8_10 = var_c0;
            *x0_4 = x8_10;
            float var_bc;
            x0_4[1] = var_bc;
            float var_b8;
            x0_4[2] = var_b8;
            int32_t var_80;
            v0_2 = var_80;
            int32_t var_7c;
            v1_2 = var_7c;
            *arg4 = x8_10;
            v0_2 = (v0_2 * x8_10);
            v1_2 = (v1_2 * var_bc);
            arg4[1] = x0_4[1];
            v0_2 = (v0_2 + v1_2);
            float var_78;
            v0_2 = (v0_2 + (var_78 * var_b8));
            /* unimplemented  {fneg s0, s0} */;
            arg4[2] = x0_4[2];
            arg4[3] = v0_2;
            int64_t var_9c;
            v0_2 = var_9c;
            v1_2 = vcvth_f16_u16((((x21_2 - x23_1) >> 2) * -0x5555555555555555));
            vzip1_f32(v1_2, v0_2);
            /* unimplemented  {fdiv v0.2s, v0.2s, v1.2s} */;
            *(arg1 + 0x1450) = v0_2;
            v0_2 = arg4[3];
            if (!(v0_2 >= 0f))
            {
                float v2_1 = arg4[2];
                /* unimplemented  {fneg s0, s0} */;
                /* unimplemented  {fneg v1.2s, v1.2s} */;
                /* unimplemented  {fneg s2, s2} */;
                *arg4 = *arg4;
                arg4[2] = v2_1;
                arg4[3] = v0_2;
            }
            free(x0_4);
            x0 = 1;
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

uint64_t ground_filter::Plane_Seg::detectPlane(cv::Mat* arg1, int64_t* arg2, int64_t* arg3, int64_t* arg4, int64_t* arg5, int32_t arg6, void* arg7 @ x25, void* arg8 @ x27)
{
    int64_t v15;
    int64_t var_a0 = v15;
    double v14;
    double var_98 = v14;
    int64_t v13;
    int64_t var_90 = v13;
    int64_t v12;
    int64_t var_88 = v12;
    int64_t v11;
    int64_t var_80 = v11;
    int64_t v10;
    int64_t var_78 = v10;
    double v9;
    double var_70 = v9;
    int64_t v8;
    int64_t var_68 = v8;
    void* var_58 = arg8;
    void* var_48 = arg7;
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    ground_filter::Plane_Seg::getPointCloudOnIndexes(arg1);
    void* var_f8;
    void* x0 = var_f8;
    int64_t var_f0;
    int64_t x19 = (((var_f0 - x0) >> 2) * -0x5555555555555555);
    int32_t x19_1;
    if (x19 > 9)
    {
        v8 = *(arg1 + 0x14a4);
        void* s_3;
        __builtin_memset(&s_3, 0, 0x18);
        void* s;
        void* s_2;
        void* var_138;
        if ((x19 >> 0x3e) != 0)
        {
            int64_t x0_19 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* s_7 = s;
            if (s_7 != 0)
            {
                void* s_13 = s_7;
                operator delete(s_7);
            }
            operator delete(arg8);
            void* var_160_2 = arg7;
            operator delete(arg7);
            void* s_8 = s_2;
            if (s_8 != 0)
            {
                void* s_15 = s_8;
                operator delete(s_8);
            }
            void* x0_22 = var_138;
            void* s_9;
            if (x0_22 != 0)
            {
                void* var_130_2 = x0_22;
                operator delete(x0_22);
                s_9 = s_3;
            }
            else
            {
                s_9 = s_3;
            }
            if (((x0_22 != 0 && s_9 != 0) || (x0_22 == 0 && s_9 != 0)))
            {
                void* s_16 = s_9;
                operator delete(s_9);
            }
            if (var_f8 != 0)
            {
                void* var_f0_2 = var_f8;
                operator delete(var_f8);
            }
            int64_t* x0_25;
            int64_t* x1_6;
            int64_t* x8_25;
            x0_25 = _Unwind_Resume(x0_19);
            /* tailcall */
            return ground_filter::Plane_Seg::getPointCloudOnIndexes(x0_25, x1_6, x8_25);
        }
        int64_t x22_1 = (x19 << 2);
        int32_t* j_1 = operator new(x22_1);
        void* x21_1 = (j_1 + x22_1);
        void* var_100_1 = x21_1;
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_1;
        int128_t v3_1;
        v0_1 = memset(j_1, 0, x22_1);
        if (x22_1 != 0)
        {
            int64_t x8_7 = ((x21_1 - j_1) >> 2);
            int64_t x10_1;
            if (x8_7 > 1)
            {
                x10_1 = x8_7;
            }
            else
            {
                x10_1 = 1;
            }
            int64_t i_3;
            if (x10_1 > 7)
            {
                v0_1 = data_54730;
                i_3 = (x10_1 & 0xfffffffffffffff8);
                void* x11_1 = &j_1[4];
                v1_1 = 4;
                *v1_1[4] = 4;
                *v1_1[8] = 4;
                *v1_1[0xc] = 4;
                v2_1 = 8;
                *v2_1[4] = 8;
                *v2_1[8] = 8;
                *v2_1[0xc] = 8;
                int64_t i_2 = i_3;
                int16_t i;
                do
                {
                    *(x11_1 - 0x10) = v0_1;
                    *x11_1 = (v0_1 + v1_1);
                    v0_1 = (v0_1 + v2_1);
                    i = i_2;
                    i_2 = (i_2 - 8);
                    x11_1 = (x11_1 + 0x20);
                } while (i != 8);
            }
            else
            {
                i_3 = 0;
            }
            if ((x10_1 <= 7 || (x10_1 > 7 && x10_1 != i_3)))
            {
                do
                {
                    j_1[i_3] = i_3;
                    i_3 = (i_3 + 1);
                } while (x8_7 > i_3);
            }
        }
        v1_1 = v8;
        v9 = (v1_1 * 0.5);
        v1_1 = 0x3cb0000000000000;
        int32_t var_194_1 = 0x80000001;
        v3_1 = data_54740;
        v1_1 = -0x3fed944e40000000;
        v0_1 = vcvth_f16_u16(x19);
        v15 = 0x3f800000;
        v0_1 = (1f / v0_1);
        uint32_t x23_1 = 0;
        v14 = v0_1;
        __builtin_memset(&s_2, 0, 0x40);
        cv::Mat* s_1;
        int64_t var_120;
        int32_t i_1;
        do
        {
            v0_1 = vcvts_f32_s32(x23_1);
            /* unimplemented  {frintp s1, s15} */;
            if (v1_1 <= v0_1)
            {
                break;
            }
            __builtin_memset(&s_1, 0, 0x18);
            cv::Mat* s_4 = operator new(0x24);
            void* var_158_1 = (s_4 + 0x24);
            s_1 = s_4;
            void* var_160_1 = (s_4 + 0x24);
            cv::Mat* x0_3;
            int128_t v0_2;
            x0_3 = operator new(0xc);
            int32_t* j = j_1;
            cv::Mat* x27_1 = x0_3;
            *(x0_3 + 8) = 0;
            *x0_3 = 0;
            void* x8_8 = (x21_1 - j);
            int64_t var_e0;
            int64_t var_d8;
            if (x8_8 >= 5)
            {
                s = v3_1;
                if ((x21_1 - 4) > j)
                {
                    int64_t x24_1 = ((x8_8 >> 2) - 1);
                    do
                    {
                        var_e0 = 0;
                        var_d8 = x24_1;
                        x0_3 = std::__ndk1::uniform_int_distribution<int64_t>::operator()<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(&s, (arg1 + 0x20));
                        if (x0_3 != 0)
                        {
                            int64_t x8_10 = (x0_3 << 2);
                            int32_t x10_2 = *j;
                            *j = *(j + x8_10);
                            *(j + x8_10) = x10_2;
                        }
                        j = &j[1];
                        x24_1 = (x24_1 - 1);
                    } while ((x21_1 - 4) > j);
                    j = j_1;
                }
            }
            x0_3 = memmove(x27_1, j, 0xc);
            int32_t* x9_5 = (var_f8 + (*x27_1 * 0xc));
            int32_t* x10_4 = (var_f8 + (*(x27_1 + 4) * 0xc));
            *s_4 = *x9_5;
            *(s_4 + 4) = x9_5[1];
            *(s_4 + 8) = x9_5[2];
            *(s_4 + 0xc) = *x10_4;
            *(s_4 + 0x10) = x10_4[1];
            int64_t x10_5 = *(x27_1 + 8);
            *(s_4 + 0x14) = x10_4[2];
            int32_t* x8_12 = (var_f8 + (x10_5 * 0xc));
            *(s_4 + 0x18) = *x8_12;
            *(s_4 + 0x1c) = x8_12[1];
            *(s_4 + 0x20) = x8_12[2];
            int64_t var_c0 = *arg5;
            int32_t var_b8_1 = arg5[1];
            int32_t x0_6;
            int128_t v0_3;
            x0_6 = ground_filter::Plane_Seg::getPlaneFrom3Points(x0_3, &s_1, &var_c0);
            if ((x0_6 & 1) == 0)
            {
                i_1 = 5;
            }
            else
            {
                void* x19_3 = var_f8;
                __builtin_memset(&s, 0, 0x18);
                void* x0_7 = (var_f0 - x19_3);
                void* s_11;
                int64_t var_170_1;
                void* s_10;
                if (var_f0 == x19_3)
                {
                    s_10 = nullptr;
                }
                else
                {
                    int64_t x24_2 = ((x0_7 >> 2) * -0x5555555555555555);
                    if (x24_2 >= 0x1555555555555556)
                    {
                        sub_20e70();
                        /* no return */
                    }
                    void* s_5;
                    s_5 = operator new(x0_7);
                    s_10 = s_5;
                    s = s_5;
                    s_11 = s_5;
                    var_170_1 = (s_5 + (x24_2 * 0xc));
                }
                void* s_17 = s_10;
                double var_d0;
                if (x19_3 != var_f0)
                {
                    v10 = var_e0;
                    v8 = *var_e0[4];
                    v11 = var_d8;
                    v13 = *var_d8[4];
                    do
                    {
                        int32_t x8_17 = *x19_3;
                        var_d0 = x8_17;
                        float x9_14 = *(x19_3 + 4);
                        v0_3 = x8_17;
                        v0_3 = (v10 * v0_3);
                        *var_d0[4] = x9_14;
                        float x10_6 = *(x19_3 + 8);
                        v0_3 = (v0_3 + (v8 * x9_14));
                        v0_3 = (v0_3 + ((v11 * x10_6) + v13));
                        /* unimplemented  {fabs s0, s0} */;
                        v0_3 = v0_3;
                        if (!(v9 <= v0_3))
                        {
                            if (s_11 == var_170_1)
                            {
                                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(&s);
                            }
                            else
                            {
                                *s_11 = x8_17;
                                *(s_11 + 4) = *var_d0[4];
                                *(s_11 + 8) = x10_6;
                                s_11 = (s_11 + 0xc);
                            }
                        }
                        x19_3 = (x19_3 + 0xc);
                    } while (x19_3 != var_f0);
                    s_10 = s;
                    s_17 = s_11;
                }
                int32_t x19_4 = (((s_17 - s_10) >> 2) * 0xaaaaaaab);
                if (var_194_1 < x19_4)
                {
                    var_120 = var_e0;
                    std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&var_138, s_10);
                    std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&s_2, s_4);
                    double v0_5 = (1.0 - pow((v14 * vcvt_f64_s64(x19_4)), 3.0));
                    double var_188 = 2.2204460492503131e-16;
                    var_d0 = v0_5;
                    double* x8_20;
                    if (v0_5 > 2.2204460492503131e-16)
                    {
                        x8_20 = &var_d0;
                    }
                    else
                    {
                        x8_20 = &var_188;
                    }
                    double x8_21 = *x8_20;
                    v0_5 = x8_21;
                    if (!(v0_5 < 0.99999999999999978))
                    {
                        v0_5 = 0.99999999999999978;
                    }
                    var_d0 = x8_21;
                    double v0_6 = log(v0_5);
                    s_10 = s;
                    var_194_1 = x19_4;
                    v15 = (-4.6051702499389648 / v0_6);
                }
                if (x23_1 < arg6)
                {
                    i_1 = 0;
                }
                else
                {
                    i_1 = 6;
                }
                if (s_10 != 0)
                {
                    void* s_12 = s_10;
                    operator delete(s_10);
                }
                x23_1 = (x23_1 + 1);
            }
            operator delete(x27_1);
            v0_1 = operator delete(s_4);
        } while (i_1 != 6);
        ground_filter::Plane_Seg::optimizePlaneCoef(arg1, &var_138, &var_120);
        arg4[1] = *arg4;
        int32_t* x19_5 = *arg2;
        int64_t x21_2 = arg2[1];
        if (x19_5 != x21_2)
        {
            do
            {
                int64_t x8_24 = *x19_5;
                s_1 = x8_24;
                int64_t* x9_21 = (*arg1 + (x8_24 * 0xc));
                int64_t v1_4 = *x9_21;
                double v0_7;
                v0_7 = (v1_4 * *arg3);
                *v0_7[4] = (*v1_4[4] * *v0_7[4]);
                v1_4 = (x9_21[1] * arg3[1]);
                /* unimplemented  {faddp s0, v0.2s} */;
                v1_4 = (v1_4 + *(arg3 + 0xc));
                v0_7 = (v0_7 + v1_4);
                /* unimplemented  {fabs s0, s0} */;
                if (!(v9 <= v0_7))
                {
                    int32_t* x9_22 = arg4[1];
                    if (x9_22 == arg4[2])
                    {
                        std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(arg4);
                    }
                    else
                    {
                        *x9_22 = x8_24;
                        arg4[1] = &x9_22[1];
                    }
                }
                x19_5 = &x19_5[1];
            } while (x21_2 != x19_5);
        }
        void* s_6 = s_2;
        if (s_6 != 0)
        {
            void* s_14 = s_6;
            operator delete(s_6);
        }
        void* x0_16 = var_138;
        if (x0_16 != 0)
        {
            void* var_130_1 = x0_16;
            operator delete(x0_16);
        }
        if (j_1 != 0)
        {
            int32_t* j_2 = j_1;
            operator delete(j_1);
        }
        x0 = var_f8;
        x19_1 = 1;
    }
    else
    {
        x19_1 = 0;
    }
    if (((x19 <= 9 && x0 != 0) || ((x19 > 9 && (x19 >> 0x3e) == 0) && x0 != 0)))
    {
        void* var_f0_1 = x0;
        operator delete(x0);
    }
    if (((((x19 <= 9 && x0 != 0) || ((x19 > 9 && (x19 >> 0x3e) == 0) && x0 != 0)) || (x19 <= 9 && x0 == 0)) || ((x19 > 9 && (x19 >> 0x3e) == 0) && x0 == 0)))
    {
        if (*(x21 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x19_1;
    }
}

int64_t sub_25270(int64_t arg1, void* arg2, void* arg3, void* arg4, void* arg5)
{
    if (arg2 != 0)
    {
        arg_98 = arg2;
        operator delete(arg2);
    }
    void* x0_2;
    if (arg3 != 0)
    {
        arg_b0 = arg3;
        operator delete(arg3);
        x0_2 = arg4;
    }
    else
    {
        x0_2 = arg4;
    }
    if (((arg3 != 0 && x0_2 != 0) || (arg3 == 0 && x0_2 != 0)))
    {
        arg_d8 = x0_2;
        operator delete(x0_2);
    }
    if (arg5 != 0)
    {
        arg_f0 = arg5;
        operator delete(arg5);
    }
    int64_t* x0_5;
    int64_t* x1;
    int64_t* x8;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return ground_filter::Plane_Seg::getPointCloudOnIndexes(x0_5, x1, x8);
}

int32_t* ground_filter::Plane_Seg::getPointCloudOnIndexes(int64_t* arg1, int64_t* arg2, int64_t* arg3 @ x8)
{
    __builtin_memset(arg3, 0, 0x18);
    void* x22 = *arg2;
    int64_t x21 = arg2[1];
    void* x8 = (x21 - x22);
    int32_t* x0_1;
    if (x21 == x22)
    {
        x0_1 = nullptr;
        if (x22 == x21)
        {
        label_2542c:
            return x0_1;
        }
    }
    else
    {
        int64_t x23_1 = (x8 >> 2);
        if (x23_1 >= 0x1555555555555556)
        {
            sub_20e70();
            /* no return */
        }
        x0_1 = operator new((x23_1 * 0xc));
        x8 = (x0_1 + (x23_1 * 0xc));
        *arg3 = x0_1;
        arg3[1] = x0_1;
        arg3[2] = x8;
        if (x22 == x21)
        {
            goto label_2542c;
        }
    }
    void* x22_1 = (x22 + 4);
    while (true)
    {
        int64_t x9_1 = *(x22_1 - 4);
        int64_t x10_1 = *arg1;
        if (x0_1 == x8)
        {
            x0_1 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(arg3);
            if (x21 == x22_1)
            {
                break;
            }
        }
        else
        {
            void* x9_2 = (x10_1 + (x9_1 * 0xc));
            *x0_1 = *(x10_1 + (x9_1 * 0xc));
            x0_1[1] = *(x9_2 + 4);
            x0_1[2] = *(x9_2 + 8);
            arg3[1] = &x0_1[3];
            if (x21 == x22_1)
            {
                break;
            }
        }
        x0_1 = arg3[1];
        x8 = arg3[2];
        x22_1 = (x22_1 + 4);
    }
    goto label_2542c;
}

uint64_t ground_filter::Plane_Seg::segPlane(void* arg1, int64_t* arg2, int64_t* arg3, int32_t arg4, void* arg5 @ x24, int64_t arg6 @ v8, int64_t arg7 @ v10, int64_t arg8 @ v11, int64_t arg9 @ v15)
{
    int64_t var_a0 = arg9;
    int64_t v14;
    int64_t var_98 = v14;
    double v13;
    double var_90 = v13;
    int64_t v12;
    int64_t var_88 = v12;
    int64_t var_80 = arg8;
    int64_t var_78 = arg7;
    int64_t v9;
    int64_t var_70 = v9;
    int64_t var_68 = arg6;
    void* var_40 = arg5;
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    void* var_e8;
    std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(&var_e8);
    void* x0_1 = var_e8;
    int64_t var_e0;
    uint64_t x21 = (((var_e0 - x0_1) >> 2) * -0x5555555555555555);
    int32_t x19;
    if (x21 > 9)
    {
        void* s_2;
        __builtin_memset(&s_2, 0, 0x18);
        void* s;
        void* s_1;
        void* var_118;
        if ((x21 >> 0x3e) != 0)
        {
            int64_t x0_22 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* s_6 = s;
            if (s_6 != 0)
            {
                void* s_13 = s_6;
                operator delete(s_6);
            }
            operator delete(arg1);
            operator delete(arg5);
            void* s_7 = s_1;
            void* x0_23;
            if (s_7 == 0)
            {
                x0_23 = var_118;
            }
            else
            {
                void* s_15 = s_7;
                operator delete(s_7);
                x0_23 = var_118;
            }
            void* s_8;
            if (((s_7 == 0 && x0_23 != 0) || (s_7 != 0 && x0_23 != 0)))
            {
                void* var_110_2 = x0_23;
                operator delete(x0_23);
                s_8 = s_2;
                if (s_8 != 0)
                {
                label_25c64:
                    void* s_16 = s_8;
                    operator delete(s_8);
                }
            }
            if (((s_7 == 0 && x0_23 == 0) || (s_7 != 0 && x0_23 == 0)))
            {
                s_8 = s_2;
                if (s_8 != 0)
                {
                    goto label_25c64;
                }
            }
            void* x0_26 = var_e8;
            if (x0_26 != 0)
            {
                void* var_e0_2 = x0_26;
                operator delete(x0_26);
            }
            uint64_t* x0_28;
            int64_t* x1_6;
            x0_28 = _Unwind_Resume(x0_22);
            /* tailcall */
            return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(x0_28, x1_6);
        }
        int64_t x24_1 = (x21 << 2);
        int32_t* i_2 = operator new(x24_1);
        void* x19_1 = (i_2 + x24_1);
        void* var_f0_1 = x19_1;
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_1;
        v0_1 = memset(i_2, 0, x24_1);
        if (x24_1 != 0)
        {
            int64_t x8_7 = ((x19_1 - i_2) >> 2);
            int64_t x10_1;
            if (x8_7 > 1)
            {
                x10_1 = x8_7;
            }
            else
            {
                x10_1 = 1;
            }
            int64_t i_5;
            if (x10_1 > 7)
            {
                v0_1 = data_54730;
                i_5 = (x10_1 & 0xfffffffffffffff8);
                void* x11_1 = &i_2[4];
                v1_1 = 4;
                *v1_1[4] = 4;
                *v1_1[8] = 4;
                *v1_1[0xc] = 4;
                v2_1 = 8;
                *v2_1[4] = 8;
                *v2_1[8] = 8;
                *v2_1[0xc] = 8;
                int64_t i_3 = i_5;
                int64_t i;
                do
                {
                    *(x11_1 - 0x10) = v0_1;
                    *x11_1 = (v0_1 + v1_1);
                    v0_1 = (v0_1 + v2_1);
                    i = i_3;
                    i_3 = (i_3 - 8);
                    x11_1 = (x11_1 + 0x20);
                } while (i != 8);
            }
            else
            {
                i_5 = 0;
            }
            if ((x10_1 <= 7 || (x10_1 > 7 && x10_1 != i_5)))
            {
                do
                {
                    i_2[i_5] = i_5;
                    i_5 = (i_5 + 1);
                } while (x8_7 > i_5);
            }
        }
        int128_t var_180_1 = data_54740;
        v1_1 = 0x3cb0000000000000;
        v0_1 = vcvt_f64_u64(x21);
        int64_t* x21_1 = arg3;
        v13 = 1.0;
        int32_t x28_1 = 0;
        int32_t x22_1 = -0x7fffffff;
        v0_1 = (1.0 / v0_1);
        int64_t var_d0 = 0;
        int64_t var_c8_1 = 0;
        __builtin_memset(&s_1, 0, 0x30);
        double var_190_1 = v0_1;
        int32_t var_c0;
        bool cond:8_1;
        do
        {
            v0_1 = vcvt_f64_s64(x28_1);
            v1_1 = vrndp_f64(v13);
            if (v1_1 <= v0_1)
            {
                break;
            }
            int32_t* x0_4 = operator new(0x24);
            int64_t* x0_5;
            int128_t v0_2;
            x0_5 = operator new(0xc);
            int32_t* i_1 = i_2;
            x0_5[1] = 0;
            *x0_5 = 0;
            void* x8_8 = (x19_1 - i_1);
            if (x8_8 >= 5)
            {
                s = var_180_1;
                if ((x19_1 - 4) > i_1)
                {
                    int64_t x19_2 = ((x8_8 >> 2) - 1);
                    do
                    {
                        var_c0 = 0;
                        float var_b8 = x19_2;
                        int64_t x0_7;
                        x0_7 = std::__ndk1::uniform_int_distribution<int64_t>::operator()<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(&s, (arg1 + 0x20));
                        if (x0_7 != 0)
                        {
                            int64_t x8_10 = (x0_7 << 2);
                            int32_t x10_2 = *i_1;
                            *i_1 = *(i_1 + x8_10);
                            *(i_1 + x8_10) = x10_2;
                        }
                        i_1 = &i_1[1];
                        x19_2 = (x19_2 - 1);
                    } while ((x19_1 - 4) > i_1);
                    i_1 = i_2;
                }
            }
            memmove(x0_5, i_1, 0xc);
            void* x8_11 = var_e8;
            int32_t* x9_5 = (x8_11 + (*x0_5 * 0xc));
            int32_t x11_2 = *x9_5;
            int32_t* x10_4 = (x8_11 + (*(x0_5 + 4) * 0xc));
            int32_t* x8_12 = (x8_11 + (x0_5[1] * 0xc));
            *x0_4 = x11_2;
            float x12_1 = x9_5[1];
            v0_2 = x11_2;
            x0_4[1] = x12_1;
            float x9_6 = x9_5[2];
            int32_t v1_2 = x12_1;
            x0_4[2] = x9_6;
            float x13_1 = *x10_4;
            int32_t v2_2 = x9_6;
            x0_4[3] = x13_1;
            float x14_1 = x10_4[1];
            int32_t v3_2 = (x13_1 - v0_2);
            x0_4[4] = x14_1;
            float x10_5 = x10_4[2];
            int32_t v4_1 = (x14_1 - v1_2);
            x0_4[5] = x10_5;
            float x15_2 = *x8_12;
            float v6_1 = (x10_5 - v2_2);
            x0_4[6] = x15_2;
            float x9_7 = x8_12[1];
            int32_t v5_1 = (x15_2 - v0_2);
            x0_4[7] = x9_7;
            float x8_13 = x8_12[2];
            int32_t v7_1 = (x9_7 - v1_2);
            float v17_1 = (v4_1 / v7_1);
            float v16_1 = (x8_13 - v2_2);
            x0_4[8] = x8_13;
            if (((v3_2 / v5_1) != v17_1 || (!((v3_2 / v5_1) != v17_1) && !((v6_1 / v16_1) == v17_1))))
            {
                v17_1 = (v4_1 * v16_1);
                float v18_1 = (v6_1 * v7_1);
                v6_1 = (v6_1 * v5_1);
                v4_1 = (v4_1 * v5_1);
                v5_1 = (v17_1 - v18_1);
                v6_1 = (v6_1 - (v3_2 * v16_1));
                v3_2 = ((v3_2 * v7_1) - v4_1);
                v4_1 = (((v3_2 * v3_2) + 0f) + ((v5_1 * v5_1) + (v6_1 * v6_1)));
                /* unimplemented  {fsqrt s4, s4} */;
                arg6 = (v5_1 / v4_1);
                arg9 = (v6_1 / v4_1);
                arg7 = (v3_2 / v4_1);
                v0_2 = (arg6 * v0_2);
                v0_2 = (v0_2 + (arg9 * v1_2));
                v0_2 = ((arg7 * v2_2) + v0_2);
                /* unimplemented  {fneg s11, s0} */;
            }
            void* x21_3 = var_e8;
            __builtin_memset(&s, 0, 0x18);
            void* x0_9 = (var_e0 - x21_3);
            void* s_10;
            int64_t var_140_1;
            void* s_9;
            if (var_e0 == x21_3)
            {
                s_9 = nullptr;
            }
            else
            {
                int64_t x19_3 = ((x0_9 >> 2) * -0x5555555555555555);
                if (x19_3 >= 0x1555555555555556)
                {
                    sub_20e70();
                    /* no return */
                }
                void* s_3;
                s_3 = operator new(x0_9);
                s_9 = s_3;
                s = s_3;
                s_10 = s_3;
                var_140_1 = (s_3 + (x19_3 * 0xc));
            }
            void* s_17 = s_9;
            if (x21_3 != var_e0)
            {
                do
                {
                    int32_t x8_15 = *x21_3;
                    var_c0 = x8_15;
                    float x9_9 = *(x21_3 + 4);
                    v0_2 = x8_15;
                    v0_2 = (arg6 * v0_2);
                    float x10_6 = *(x21_3 + 8);
                    v0_2 = (v0_2 + (arg9 * x9_9));
                    v0_2 = ((arg8 + (arg7 * x10_6)) + v0_2);
                    /* unimplemented  {fabs s0, s0} */;
                    if (!(v0_2 >= 0.0500000007f))
                    {
                        if (s_10 == var_140_1)
                        {
                            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(&s);
                        }
                        else
                        {
                            *s_10 = x8_15;
                            *(s_10 + 4) = x9_9;
                            *(s_10 + 8) = x10_6;
                            s_10 = (s_10 + 0xc);
                        }
                    }
                    x21_3 = (x21_3 + 0xc);
                } while (x21_3 != var_e0);
                s_9 = s;
                s_17 = s_10;
            }
            int32_t x21_4 = (((s_17 - s_9) >> 2) * 0xaaaaaaab);
            if (x22_1 < x21_4)
            {
                var_d0 = arg6;
                *var_d0[4] = arg9;
                var_c8_1 = arg7;
                *var_c8_1[4] = arg8;
                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&var_118, s_9);
                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&s_1, x0_4);
                double v0_4 = (1.0 - pow((var_190_1 * vcvt_f64_s64(x21_4)), 3.0));
                double var_158 = 2.2204460492503131e-16;
                var_c0 = v0_4;
                double* x8_18;
                if (v0_4 > 2.2204460492503131e-16)
                {
                    x8_18 = &var_c0;
                }
                else
                {
                    x8_18 = &var_158;
                }
                double x8_19 = *x8_18;
                v0_4 = x8_19;
                if (!(v0_4 < 0.99999999999999978))
                {
                    v0_4 = 0.99999999999999978;
                }
                var_c0 = x8_19;
                double v0_5 = log(v0_4);
                s_9 = s;
                v13 = (-4.6051701859880909 / v0_5);
                x22_1 = x21_4;
            }
            x21_1 = arg3;
            if (s_9 != 0)
            {
                void* s_11 = s_9;
                operator delete(s_9);
            }
            operator delete(x0_5);
            v0_1 = operator delete(x0_4);
            cond:8_1 = x28_1 < arg4;
            x28_1 = (x28_1 + 1);
        } while (cond:8_1);
        ground_filter::Plane_Seg::optimizePlaneCoef(arg1, &var_118, &var_d0);
        int64_t x8_21 = *x21_1;
        x21_1[1] = x8_21;
        void* x10_9 = var_e8;
        __builtin_memset(&s, 0, 0x18);
        var_c0 = 0;
        void* s_4;
        int32_t* x9_14;
        int64_t x10_10;
        double v1_4;
        if (var_e0 == x10_9)
        {
            s_4 = nullptr;
            x9_14 = nullptr;
            x10_10 = x8_21;
        }
        else
        {
            int64_t x10_11 = 0;
            int32_t x8_22 = 0;
            int32_t* var_148_1;
            bool cond:3_1;
            do
            {
                int64_t x9_15 = *arg1;
                double* x10_12 = (x9_15 + (x10_11 * 0xc));
                v1_4 = *x10_12;
                int64_t v0_6;
                v0_6 = (v1_4 * *arg2);
                *v0_6[4] = (*v1_4[4] * *v0_6[4]);
                v1_4 = (x10_12[1] * arg2[1]);
                /* unimplemented  {faddp s0, v0.2s} */;
                v1_4 = (v1_4 + *(arg2 + 0xc));
                v0_6 = (v0_6 + v1_4);
                /* unimplemented  {fabs s0, s0} */;
                if (!(v0_6 >= 0.0500000007f))
                {
                    int32_t* x10_13 = x21_1[1];
                    if (x10_13 == x21_1[2])
                    {
                        v0_6 = std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(x21_1);
                        x9_15 = *arg1;
                    }
                    else
                    {
                        *x10_13 = x8_22;
                        x21_1[1] = &x10_13[1];
                    }
                }
                int64_t x8_23 = var_c0;
                v0_6 = *((x9_15 + (x8_23 * 0xc)) + 8);
                int64_t var_140_2;
                if (!(v0_6 <= 0f))
                {
                    if (var_148_1 == var_140_2)
                    {
                        std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(&s);
                    }
                    else
                    {
                        *var_148_1 = x8_23;
                        var_148_1 = &var_148_1[1];
                    }
                }
                x10_11 = (var_c0 + 1);
                cond:3_1 = (((var_e0 - var_e8) >> 2) * -0x5555555555555555) > x10_11;
                x8_22 = x10_11;
                var_c0 = x10_11;
            } while (cond:3_1);
            x8_21 = *x21_1;
            x10_10 = x21_1[1];
            s_4 = s;
            x9_14 = var_148_1;
        }
        v1_4 = vcvth_f16_u16(((x10_10 - x8_21) >> 2));
        v1_4 = (v1_4 / vcvth_f16_u16(((x9_14 - s_4) >> 2)));
        if (v1_4 >= 0.80000000000000004)
        {
            x19 = 1;
        }
        else
        {
            x19 = 0;
        }
        if (s_4 != 0)
        {
            void* s_12 = s_4;
            operator delete(s_4);
        }
        void* s_5 = s_1;
        if (s_5 != 0)
        {
            void* s_14 = s_5;
            operator delete(s_5);
        }
        void* x0_19 = var_118;
        if (x0_19 != 0)
        {
            void* var_110_1 = x0_19;
            operator delete(x0_19);
        }
        if (i_2 != 0)
        {
            int32_t* i_4 = i_2;
            operator delete(i_2);
        }
        x0_1 = var_e8;
    }
    else
    {
        x19 = 0;
    }
    if (((x21 <= 9 && x0_1 != 0) || ((x21 > 9 && (x21 >> 0x3e) == 0) && x0_1 != 0)))
    {
        void* var_e0_1 = x0_1;
        operator delete(x0_1);
    }
    if (((((x21 <= 9 && x0_1 != 0) || ((x21 > 9 && (x21 >> 0x3e) == 0) && x0_1 != 0)) || (x21 <= 9 && x0_1 == 0)) || ((x21 > 9 && (x21 >> 0x3e) == 0) && x0_1 == 0)))
    {
        if (*(x22 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x19;
    }
}

int64_t sub_25ba4(int64_t arg1, void* arg2, void* arg3, void* arg4, void* arg5)
{
    void* x0;
    if (arg2 == 0)
    {
        x0 = arg3;
    }
    else
    {
        arg_78 = arg2;
        operator delete(arg2);
        x0 = arg3;
    }
    void* x0_2;
    if (((arg2 == 0 && x0 != 0) || (arg2 != 0 && x0 != 0)))
    {
        arg_90 = x0;
        operator delete(x0);
        x0_2 = arg4;
        if (x0_2 != 0)
        {
        label_25c64:
            arg_a8 = x0_2;
            operator delete(x0_2);
        }
    }
    if (((arg2 == 0 && x0 == 0) || (arg2 != 0 && x0 == 0)))
    {
        x0_2 = arg4;
        if (x0_2 != 0)
        {
            goto label_25c64;
        }
    }
    if (arg5 != 0)
    {
        arg_c0 = arg5;
        operator delete(arg5);
    }
    uint64_t* x0_5;
    int64_t* x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(x0_5, x1);
}

int64_t sub_25bc0(int64_t arg1, void* arg2, void* arg3, void* arg4, void* arg5, void* arg6)
{
    void* x0;
    if (arg2 != 0)
    {
        arg_58 = arg2;
        operator delete(arg2);
        x0 = arg3;
    }
    else
    {
        x0 = arg3;
    }
    void* x0_2;
    if (((arg2 == 0 && x0 != 0) || (arg2 != 0 && x0 != 0)))
    {
        arg_78 = x0;
        operator delete(x0);
        x0_2 = arg4;
        void* x0_3;
        if (x0_2 == 0)
        {
        label_25bdc:
            x0_3 = arg5;
            if (x0_3 != 0)
            {
            label_25c64:
                arg_a8 = x0_3;
                operator delete(x0_3);
            }
        }
        else
        {
        label_25c54:
            arg_90 = x0_2;
            operator delete(x0_2);
            x0_3 = arg5;
            if (x0_3 != 0)
            {
                goto label_25c64;
            }
        }
        if (arg6 != 0)
        {
            arg_c0 = arg6;
            operator delete(arg6);
        }
        uint64_t* x0_6;
        int64_t* x1;
        x0_6 = _Unwind_Resume(arg1);
        /* tailcall */
        return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(x0_6, x1);
    }
    if (((arg2 == 0 && x0 == 0) || (arg2 != 0 && x0 == 0)))
    {
        x0_2 = arg4;
        if (x0_2 == 0)
        {
            goto label_25bdc;
        }
        goto label_25c54;
    }
}

uint64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(uint64_t* arg1, int64_t* arg2)
{
    __builtin_memset(arg1, 0, 0x18);
    int64_t x8 = *arg2;
    int64_t x9 = arg2[1];
    uint64_t x0 = (x9 - x8);
    if (x9 != x8)
    {
        int64_t x21_1 = ((x0 >> 2) * -0x5555555555555555);
        if (x21_1 >= 0x1555555555555556)
        {
            int64_t x0_2 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            uint64_t x8_4 = *arg1;
            if (x8_4 != 0)
            {
                arg1[1] = x8_4;
                operator delete(x8_4);
            }
            int64_t x0_5;
            int64_t* x1;
            float* x2;
            x0_5 = _Unwind_Resume(x0_2);
            /* tailcall */
            return ground_filter::Plane_Seg::getPlaneFrom3Points(x0_5, x1, x2);
        }
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_1;
        int128_t v3_1;
        int128_t v4_1;
        int128_t v5_1;
        x0 = operator new(x0);
        *arg1 = x0;
        arg1[1] = x0;
        arg1[2] = (x0 + (x21_1 * 0xc));
        void* x10_1 = *arg2;
        int64_t x8_3 = arg2[1];
        if (x10_1 != x8_3)
        {
            uint64_t x9_4 = (((x8_3 - 0xc) - x10_1) / 0xc);
            uint64_t x9_7;
            int32_t* x11_2;
            if (((x9_4 + 1) < 8 || (((x9_4 + 1) >= 8 && x0 < (x10_1 + (0xc + (x9_4 * 0xc)))) && (x0 + (0xc + (x9_4 * 0xc))) > x10_1)))
            {
                x9_7 = x0;
                x11_2 = x10_1;
            label_25d68:
                do
                {
                    *x9_7 = *x11_2;
                    *(x9_7 + 4) = x11_2[1];
                    int32_t x10_4 = x11_2[2];
                    x11_2 = &x11_2[3];
                    *(x9_7 + 8) = x10_4;
                    x9_7 = (x9_7 + 0xc);
                } while (x11_2 != x8_3);
            }
            if (((x9_4 + 1) >= 8 && (x0 >= (x10_1 + (0xc + (x9_4 * 0xc))) || (x0 < (x10_1 + (0xc + (x9_4 * 0xc))) && (x0 + (0xc + (x9_4 * 0xc))) <= x10_1))))
            {
                int64_t i_2 = ((x9_4 + 1) & 0x3ffffffffffffff8);
                int64_t x11_3 = (i_2 * 0xc);
                x9_7 = (x0 + x11_3);
                x11_2 = (x10_1 + x11_3);
                int64_t i_1 = i_2;
                int64_t i;
                do
                {
                    v1_1 = *(x10_1 + 0x10);
                    v2_1 = *(x10_1 + 0x20);
                    v3_1 = *(x10_1 + 0x30);
                    v4_1 = *(x10_1 + 0x40);
                    v5_1 = *(x10_1 + 0x50);
                    i = i_1;
                    i_1 = (i_1 - 8);
                    *x0 = *x10_1;
                    *(x0 + 0x10) = v1_1;
                    *(x0 + 0x20) = v2_1;
                    *(x0 + 0x30) = v3_1;
                    *(x0 + 0x40) = v4_1;
                    *(x0 + 0x50) = v5_1;
                    x0 = (x0 + 0x60);
                    x10_1 = (x10_1 + 0x60);
                } while (i != 8);
                if ((x9_4 + 1) != i_2)
                {
                    goto label_25d68;
                }
            }
            arg1[1] = x9_7;
        }
    }
    return x0;
}

int64_t ground_filter::Plane_Seg::getPlaneFrom3Points(int64_t arg1, int64_t* arg2, float* arg3)
{
    int32_t* x8 = *arg2;
    if ((arg2[1] - x8) != 0x24)
    {
        return 0;
    }
    float v4 = x8[2];
    float v1 = *x8;
    float v3 = x8[1];
    float v2 = (x8[3] - v1);
    float v0 = (x8[4] - v3);
    v1 = (x8[6] - v1);
    v3 = (x8[7] - v3);
    float v6 = (v0 / v3);
    float v5 = (x8[5] - v4);
    v4 = (x8[8] - v4);
    if ((!((v2 / v1) != v6) && !((v5 / v4) != v6)))
    {
        return 0;
    }
    v6 = (v0 * v4);
    v4 = (v2 * v4);
    v2 = (v2 * v3);
    v3 = (v6 - (v5 * v3));
    v4 = ((v5 * v1) - v4);
    v0 = (v2 - (v0 * v1));
    v1 = 0f;
    v2 = (((v3 * v3) + (v4 * v4)) + ((v0 * v0) + v1));
    /* unimplemented  {fsqrt s2, s2} */;
    v3 = (v3 / v2);
    v4 = (v4 / v2);
    v0 = (v0 / v2);
    *arg3 = v3;
    arg3[1] = v4;
    arg3[2] = v0;
    arg3[3] = (v1 / v2);
    /* unimplemented  {fneg s0, s0} */;
    arg3[3] = (((v3 * *x8) + (v4 * x8[1])) + (v0 * x8[2]));
    return 1;
}

int64_t ground_filter::Plane_Seg::validSeedPlaneFrom3Points(void* arg1, int32_t* arg2)
{
    void* x20 = *(arg1 + 0x14a8);
    int64_t x0;
    if ((*(arg1 + 0x14b0) - x20) != 0xb0)
    {
        x0 = 1;
    }
    else
    {
        double v0;
        v0 = *arg2;
        double v1;
        v1 = arg2[1];
        float v3 = *(x20 + 0x8c);
        float v4 = *(x20 + 0x90);
        float v2 = arg2[2];
        float v5 = *(x20 + 0x94);
        float v6 = (((v0 * v0) + (v1 * v1)) + (v2 * v2));
        float v7 = (((v3 * v3) + (v4 * v4)) + (v5 * v5));
        /* unimplemented  {fsqrt s6, s6} */;
        /* unimplemented  {fsqrt s7, s7} */;
        v0 = (v0 / v6);
        v1 = (v1 / v6);
        v0 = (v0 * (v3 / v7));
        v1 = (v1 * (v4 / v7));
        v0 = (v0 + v1);
        v0 = (((v2 / v6) * (v5 / v7)) + v0);
        /* unimplemented  {fabs s1, s0} */;
        v1 = (v1 + -1f);
        /* unimplemented  {fabs s1, s1} */;
        if (!(v1 < 0.0001))
        {
            v0 = acosf(v0);
            double v3_1 = v0;
            v1 = (3.1415926535897931 - v3_1);
            if (v3_1 > 1.5707963267948966)
            {
                v0 = v1;
            }
            else
            {
                v0 = v0;
            }
            /* unimplemented  {fabs s0, s0} */;
            if (!(v0 <= 0.15707963267948966))
            {
                x0 = 0;
            }
        }
        if ((v1 < 0.0001 || (!(v1 < 0.0001) && v0 <= 0.15707963267948966)))
        {
            v0 = arg2[3];
            /* unimplemented  {fabd s0, s0, s1} */;
            if (v0 <= 10f)
            {
                x0 = 1;
            }
            else
            {
                x0 = 0;
            }
        }
    }
    return x0;
}

int32_t ground_filter::Plane_Seg::computeMeanAndCovarianceMatrix(void* arg1, int64_t* arg2, int32_t* arg3, int32_t* arg4)
{
    int64_t* x9 = *arg2;
    int64_t x10 = arg2[1];
    float128 v2;
    v2 = 0;
    int64_t x8 = (((x10 - x9) >> 2) * -0x5555555555555555);
    int32_t v0;
    int32_t v1;
    uint128_t v3;
    int128_t v4;
    int32_t v5;
    uint128_t v6;
    if (x9 == x10)
    {
        v1 = 0f;
        v5 = 0f;
        v0 = 0f;
        v3 = 0;
        v4 = 0;
    }
    else
    {
        v0 = 0f;
        v5 = 0f;
        v1 = 0f;
        v3 = 0;
        v4 = 0;
        do
        {
            v6 = *x9;
            float v7 = x9[1];
            x9 = (x9 + 0xc);
            uint64_t v18_1 = _byteswap(v6);
            float v16 = (v6 * v6);
            int64_t v17;
            v17 = (v6 * *v6[4]);
            *v17[4] = (*v6[4] * *v6[4]);
            v3 = (v3 + v6);
            *v3[4] = (*v3[4] + *v6[4]);
            v6 = (v18_1 * v7);
            *v6[4] = (*v18_1[4] * v7);
            v5 = (v5 + v16);
            v2 = (v2 + v17);
            *v2[4] = (*v2[4] + *v17[4]);
            v1 = (v1 + (v7 * v7));
            v4 = (v4 + v6);
            *v4[4] = (*v4[4] + *v6[4]);
            v0 = (v0 + v7);
        } while (x9 != x10);
    }
    v6 = vcvth_f16_u16(x8);
    _byteswap(v3);
    *(arg1 + 0x1458) = v5;
    v5 = (v5 - ((v3 * v3) / v6));
    vdup_laneq_s32(v6, 0);
    /* unimplemented  {fdiv v16.2s, v16.2s, v7.2s} */;
    /* unimplemented  {fdiv v7.2s, v17.2s, v7.2s} */;
    float128 v17_2;
    *v17_2[8] = v4;
    (v2 - v2);
    (*v2[4] - *v2[4]);
    float128 v16_1 = vextq_f16(v17_2, v17_2, false);
    (v4 - v4);
    (*v4[4] - *v4[4]);
    *(arg1 + 0x145c) = vextq_f16(v16_1, vextq_f16(v17_2, v16_1, false), false);
    float128 v16_2;
    v16_2 = vdups_laneq_s32(v3, 1);
    float v7_1 = (v1 - ((v0 * v0) / v6));
    *(arg1 + 0x146c) = v1;
    v1 = (v3 / v6);
    v16_2 = (v16_2 / v6);
    v6 = (v0 / v6);
    *(arg1 + 0x1470) = v3;
    *(arg1 + 0x1478) = v0;
    *(arg1 + 0x1480) = x8;
    *arg4 = v1;
    arg4[1] = v16_2;
    arg4[2] = v6;
    arg4[3] = 0x3f800000;
    *(arg3 + 0xc) = v2;
    *v2[4] = v4;
    *arg3 = v5;
    arg3[7] = v4;
    arg3[8] = v7_1;
    *(arg3 + 4) = v2;
    *(arg3 + 0x14) = v4;
    return v0;
}

int64_t ground_filter::Plane_Seg::eigen33(cv::Mat* arg1, int32_t* arg2, int32_t* arg3, int32_t* arg4, int32_t* arg5 @ x8, float arg6 @ v18, float arg7 @ v19, float arg8 @ v20, float arg9 @ v21)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    /* unimplemented  {fabs s18, s1} */;
    /* unimplemented  {fabs s19, s2} */;
    /* unimplemented  {fabs s20, s3} */;
    /* unimplemented  {fabs s21, s4} */;
    if (arg6 < arg7)
    {
        arg6 = arg7;
    }
    if (arg8 < arg9)
    {
        arg8 = arg9;
    }
    /* unimplemented  {fabs s19, s5} */;
    /* unimplemented  {fabs s21, s6} */;
    if (arg6 < arg8)
    {
        arg6 = arg8;
    }
    /* unimplemented  {fabs s20, s16} */;
    if (arg7 < arg9)
    {
        arg7 = arg9;
    }
    /* unimplemented  {fabs s21, s17} */;
    if (arg8 < arg9)
    {
        arg8 = arg9;
    }
    /* unimplemented  {fabs s21, s7} */;
    if (!(arg9 < arg8))
    {
        arg8 = arg9;
    }
    if (arg7 < arg8)
    {
        arg7 = arg8;
    }
    if (arg6 < arg7)
    {
        arg6 = arg7;
    }
    int64_t v8;
    if (arg6 > 1.17549435e-38f)
    {
        v8 = arg6;
    }
    else
    {
        v8 = 0x3f800000;
    }
    float v1 = (arg2[1] / v8);
    float v2 = (arg2[2] / v8);
    float v3 = (arg2[3] / v8);
    float v4 = (arg2[4] / v8);
    float v5 = (arg2[5] / v8);
    float v6 = (arg2[6] / v8);
    float v7 = (arg2[7] / v8);
    float v16 = (arg2[8] / v8);
    float var_70 = (*arg2 / v8);
    float var_54 = v7;
    int64_t x0;
    uint128_t v0_1;
    uint128_t v1_1;
    int128_t v5_1;
    int128_t v6_1;
    int64_t v7_1;
    int64_t v16_1;
    uint128_t v17_1;
    int128_t v19;
    x0 = ground_filter::Plane_Seg::computeRoots(arg1, &var_70);
    v0_1 = *arg5;
    v1_1 = (v8 * v0_1);
    *arg3 = v1_1;
    v1_1 = v4;
    v7_1 = v5;
    vdup_laneq_s32(v0_1, 0);
    *v1_1[4] = var_70;
    (v1_1 - v1_1);
    (*v1_1[4] - *v1_1[4]);
    var_70 = *v1_1[4];
    uint128_t v2_1;
    v2_1 = v16;
    v5_1 = v1;
    v6_1 = v6;
    vdupq_laneq_s32(v1_1, 1);
    v0_1 = (v2_1 - v0_1);
    v16_1 = v2;
    v2_1 = v3;
    int64_t v4_1;
    *v4_1[4] = v5_1;
    int32_t var_60_1 = v1_1;
    float v3_1 = (v1_1 * *v1_1[4]);
    v17_1 = (v2_1 * v5_1);
    double v18 = vzip1_f32(v2_1, v1_1);
    *v2_1[4] = v5_1;
    uint128_t v5_2 = _byteswap(v6_1);
    int32_t var_50_1 = v0_1;
    v19 = (v6_1 * v1_1);
    *v19[4] = (*v6_1[4] * *v1_1[4]);
    v1_1 = (v6_1 * v7_1);
    *v1_1[4] = (*v6_1[4] * v7_1);
    v6_1 = (v6_1 * v16_1);
    *v6_1[4] = (*v6_1[4] * v16_1);
    v7_1 = (v4_1 * v7_1);
    *v7_1[4] = (*v4_1[4] * v7_1);
    v4_1 = (v4_1 * v0_1);
    *v4_1[4] = (*v4_1[4] * v0_1);
    v0_1 = (v18 * v0_1);
    *v0_1[4] = (*v18[4] * v0_1);
    v16_1 = (v18 * v16_1);
    *v16_1[4] = (*v18[4] * v16_1);
    v5_2 = (v2_1 * v5_2);
    *v5_2[4] = (*v2_1[4] * *v5_2[4]);
    (v2_1 - v0_1);
    (*v2_1[4] - *v0_1[4]);
    (v1_1 - v6_1);
    (*v1_1[4] - *v6_1[4]);
    (v0_1 - v7_1);
    (*v0_1[4] - *v7_1[4]);
    (v4_1 - v5_2);
    (*v4_1[4] - *v5_2[4]);
    v3_1 = (v3_1 - v17_1);
    v7_1 = (v1_1 * v1_1);
    *v7_1[4] = (*v1_1[4] * *v1_1[4]);
    v16_1 = (v0_1 * v0_1);
    *v16_1[4] = (*v0_1[4] * *v0_1[4]);
    v17_1 = (v4_1 * v4_1);
    *v17_1[4] = (*v4_1[4] * *v4_1[4]);
    v6_1 = (v3_1 * v3_1);
    v16_1 = (v7_1 + v16_1);
    *v16_1[4] = (*v7_1[4] + *v16_1[4]);
    v7_1 = vdups_laneq_s32(v17_1, 1);
    v5_2 = (v2_1 * v2_1);
    *v5_2[4] = (*v2_1[4] * *v2_1[4]);
    v6_1 = (v7_1 + v6_1);
    v7_1 = (v17_1 + v6_1);
    v5_2 = (v5_2 + v16_1);
    *v5_2[4] = (*v5_2[4] + *v16_1[4]);
    v6_1 = vdups_laneq_s32(v5_2, 1);
    if ((!(v7_1 < v5_2) && !(v7_1 < v6_1)))
    {
        /* unimplemented  {fsqrt s0, s7} */;
        uint64_t v1_2 = vdup_laneq_s32(v0_1, 0);
        /* unimplemented  {fdiv v1.2s, v4.2s, v1.2s} */;
        *arg4 = v1_2;
        v0_1 = (v3_1 / v0_1);
    }
    if ((v7_1 < v5_2 || (!(v7_1 < v5_2) && v7_1 < v6_1)))
    {
        if ((v5_2 < v7_1 || (!(v5_2 < v7_1) && v5_2 < v6_1)))
        {
            /* unimplemented  {fsqrt s3, s6} */;
            v2_1 = vdups_laneq_s32(v2_1, 1);
            v1_1 = vdups_laneq_s32(v1_1, 1);
            v0_1 = vdups_laneq_s32(v0_1, 1);
            v2_1 = (v2_1 / v3_1);
            v1_1 = (v1_1 / v3_1);
            v0_1 = (v0_1 / v3_1);
            *arg4 = v2_1;
            arg4[1] = v1_1;
        }
        if ((!(v5_2 < v7_1) && !(v5_2 < v6_1)))
        {
            /* unimplemented  {fsqrt s3, s5} */;
            v2_1 = (v2_1 / v3_1);
            v1_1 = (v1_1 / v3_1);
            *arg4 = v2_1;
            arg4[1] = v1_1;
            v0_1 = (v0_1 / v3_1);
        }
    }
    arg4[2] = v0_1;
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

double ground_filter::Plane_Seg::computeRoots(int64_t arg1, int32_t* arg2, int32_t* arg3, int64_t arg4 @ v13)
{
    int64_t var_50 = arg4;
    int64_t v12;
    int64_t var_48 = v12;
    int64_t v11;
    int64_t var_40 = v11;
    int64_t v10;
    int64_t var_38 = v10;
    float v2 = *arg2;
    double v1;
    v1 = arg2[3];
    float v3 = arg2[4];
    float v6 = arg2[7];
    float v4 = arg2[8];
    float v5 = arg2[6];
    float v7 = (v2 * v3);
    double v0;
    v0 = (v1 * v1);
    v0 = (v7 - v0);
    float v16 = ((v2 * v4) + v0);
    v0 = (v4 * v1);
    v0 = (v1 * v0);
    v1 = (v1 + v1);
    v1 = (v1 * v5);
    v1 = (v1 * v6);
    v1 = ((v7 * v4) + v1);
    v1 = (v1 - (v6 * (v2 * v6)));
    v1 = (v1 - (v5 * (v3 * v5)));
    /* unimplemented  {fabd s3, s1, s0} */;
    int64_t v9;
    v9 = (((v3 * v4) + (v16 - (v5 * v5))) - (v6 * v6));
    int64_t v8;
    v8 = ((v2 + v3) + v4);
    if (!(v3 >= 1.1920929e-07f))
    {
        v0 = (v8 * v8);
        v0 = (v0 + (v9 * -4.0));
        /* unimplemented  {fmax s0, s0, s2} */;
        /* unimplemented  {fsqrt s0, s0} */;
        v2 = (v8 + v0);
        v0 = (v8 - v0);
        v0 = (v0 * 0.5f);
        *arg3 = 0;
        arg3[1] = v0;
        arg3[2] = (v2 * 0.5f);
    }
    else
    {
        v0 = (v1 - v0);
        v12 = (v8 * 0.333333343f);
        v1 = (v8 * v12);
        v1 = (v9 - v1);
        v1 = (v1 * 0.333333343f);
        /* unimplemented  {fmin s4, s1, s2} */;
        v1 = (v12 * ((v12 * (v12 + v12)) - v9));
        v0 = (v0 + v1);
        v1 = (v0 * 0.5f);
        v0 = (v4 * (v4 * v4));
        v0 = ((v1 * v1) + v0);
        /* unimplemented  {fmin s0, s0, s2} */;
        /* unimplemented  {fneg s0, s0} */;
        /* unimplemented  {fneg s5, s4} */;
        /* unimplemented  {fsqrt s0, s0} */;
        /* unimplemented  {fsqrt s13, s5} */;
        float var_18;
        float var_14;
        double v1_1;
        double v3_1;
        v0 = sincosf(&var_14, &var_18, (atan2f(v0, v1, 0f) * 0.333333343f));
        float v2_1 = var_18;
        v0 = var_14;
        v3_1 = 0x3fddb3d7;
        v1_1 = (arg4 + arg4);
        v1_1 = (v1_1 * v2_1);
        v0 = (v0 * 1.73205078f);
        v3_1 = (v2_1 + v0);
        v0 = (v2_1 - v0);
        v1_1 = (v12 + v1_1);
        v0 = (arg4 * v0);
        v3_1 = (v12 - (arg4 * v3_1));
        v0 = (v12 - v0);
        int32_t x8_1 = v1_1;
        int32_t x10_1 = v3_1;
        *arg3 = v1_1;
        arg3[1] = v3_1;
        arg3[2] = v0;
        int32_t x9_1;
        float v2_2;
        if (v1_1 >= v3_1)
        {
            v2_2 = v3_1;
            x9_1 = x10_1;
            *arg3 = v3_1;
            arg3[1] = v1_1;
        }
        else
        {
            v2_2 = v1_1;
            x9_1 = x8_1;
            x8_1 = x10_1;
        }
        if (((v1_1 >= v3_1 && !(v1_1 < v0)) || (!(v1_1 >= v3_1) && v3_1 >= v0)))
        {
            arg3[1] = v0;
            arg3[2] = x8_1;
            if (!(v2_2 < v0))
            {
                v2_2 = v0;
                *arg3 = v0;
                arg3[1] = x9_1;
            }
        }
        if (!(v2_2 > 0f))
        {
            v0 = (v8 * v8);
            v0 = (v0 + (v9 * -4.0));
            /* unimplemented  {fmax s0, s0, s2} */;
            /* unimplemented  {fsqrt s0, s0} */;
            v1_1 = (v8 + v0);
            v0 = (v8 - v0);
            v1_1 = (v1_1 * 0.5f);
            v0 = (v0 * 0.5f);
            *arg3 = 0;
            arg3[1] = v0;
            arg3[2] = v1_1;
        }
    }
    return v0;
}

double ground_filter::Plane_Seg::computeRoots2(int64_t, int32_t* arg2, int32_t* arg3, int32_t* arg4)
{
    *arg4 = 0;
    double v0;
    v0 = *arg3;
    int32_t v2 = *arg2;
    int128_t v3;
    v3 = 0f;
    double v1;
    v1 = (v2 * v2);
    v0 = (v1 + (v0 * -4.0));
    /* unimplemented  {fmax s0, s0, s3} */;
    /* unimplemented  {fsqrt s0, s0} */;
    v1 = (v2 + v0);
    v1 = (v1 * 0.5f);
    arg4[2] = v1;
    v1 = *arg2;
    v0 = (v1 - v0);
    v0 = (v0 * 0.5f);
    arg4[1] = v0;
    return v0;
}

int64_t std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool>(int32_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int32_t* arg6, int64_t* arg7, void* arg8, void* arg9 @ x21, int64_t* arg10, char* arg11)
{
    void* var_28 = arg9;
    void* s = arg8;
    *arg1 = *arg6;
    arg1[1] = arg6[1];
    arg1[2] = arg6[2];
    int32_t x8_3 = arg6[3];
    __builtin_memset(&arg1[4], 0, 0x18);
    arg1[3] = x8_3;
    int64_t x8_4 = *arg7;
    int64_t x9 = arg7[1];
    uint64_t x0 = (x9 - x8_4);
    int64_t x24_1;
    if (x9 != x8_4)
    {
        x24_1 = (x0 >> 2);
        if ((x24_1 >> 0x3e) != 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        else
        {
            int64_t x0_1 = operator new(x0);
            *(arg1 + 0x10) = x0_1;
            *(arg1 + 0x18) = x0_1;
            *(arg1 + 0x20) = (x0_1 + (x24_1 << 2));
            int64_t x1 = *arg7;
            size_t x21_1 = (arg7[1] - x1);
            if (x21_1 >= 1)
            {
                memcpy(x0_1, x1, x21_1);
                *(arg1 + 0x18) = (x0_1 + x21_1);
            }
        }
    }
    if ((x9 == x8_4 || (x9 != x8_4 && (x24_1 >> 0x3e) == 0)))
    {
        arg9 = &arg1[0xa];
        int64_t x0_4 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(arg9);
        s = &arg1[0x10];
        __builtin_memset(s, 0, 0x18);
        int64_t x8_9 = *arg10;
        int64_t x9_1 = arg10[1];
        uint64_t x24_2 = (x9_1 - x8_9);
        if ((x9_1 != x8_9 && (x24_2 & 0xffffffff80000000) == 0))
        {
            x0_4 = operator new(x24_2);
            *(arg1 + 0x40) = x0_4;
            *(arg1 + 0x48) = x0_4;
            *(arg1 + 0x50) = (x0_4 + x24_2);
            int64_t x1_2 = *arg10;
            int64_t x23_2 = x0_4;
            size_t x20_2 = (arg10[1] - x1_2);
            if (x20_2 >= 1)
            {
                x0_4 = memcpy(x23_2, x1_2, x20_2);
                *(arg1 + 0x48) = (x23_2 + x20_2);
            }
        }
        if ((x9_1 == x8_9 || (x9_1 != x8_9 && (x24_2 & 0xffffffff80000000) == 0)))
        {
            arg1[0x16] = *arg11;
            return x0_4;
        }
    }
    int64_t x0_9 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
    void* x8_15 = *s;
    void* x0_10;
    if (x8_15 != 0)
    {
        *(arg1 + 0x48) = x8_15;
        operator delete(x8_15);
        x0_10 = *arg9;
    }
    else
    {
        x0_10 = *arg9;
    }
    void* x0_12;
    if (((x8_15 != 0 && x0_10 == 0) || (x8_15 == 0 && x0_10 == 0)))
    {
        x0_12 = *(arg1 + 0x10);
        if (x0_12 != 0)
        {
        label_2680c:
            *(arg1 + 0x18) = x0_12;
            operator delete(x0_12);
        }
    }
    if (((x8_15 != 0 && x0_10 != 0) || (x8_15 == 0 && x0_10 != 0)))
    {
        *(arg1 + 0x30) = x0_10;
        operator delete(x0_10);
        x0_12 = *(arg1 + 0x10);
        if (x0_12 != 0)
        {
            goto label_2680c;
        }
    }
    _Unwind_Resume(x0_9);
    /* tailcall */
    return std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool&>();
}

int64_t std::__ndk1::__tuple_impl<std::__ndk1::__tuple_indices<0ul, 1ul, 2ul, 3ul, 4ul>, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool>::__tuple_impl<0ul, 1ul, 2ul, 3ul, 4ul, Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::vector<char, std::__ndk1::allocator<char> >, bool, Eigen::Matrix<float, 4, 1, 0, 4, 1>&, std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >&, std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >&, std::__ndk1::vector<char, std::__ndk1::allocator<char> >&, bool&>(int32_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, int64_t arg5, int32_t* arg6, int64_t* arg7, void* arg8, void* arg9 @ x21, int64_t* arg10, char* arg11)
{
    void* var_28 = arg9;
    void* s = arg8;
    *arg1 = *arg6;
    arg1[1] = arg6[1];
    arg1[2] = arg6[2];
    int32_t x8_3 = arg6[3];
    __builtin_memset(&arg1[4], 0, 0x18);
    arg1[3] = x8_3;
    int64_t x8_4 = *arg7;
    int64_t x9 = arg7[1];
    uint64_t x0 = (x9 - x8_4);
    int64_t x24_1;
    if (x9 != x8_4)
    {
        x24_1 = (x0 >> 2);
        if ((x24_1 >> 0x3e) != 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        else
        {
            int64_t x0_1 = operator new(x0);
            *(arg1 + 0x10) = x0_1;
            *(arg1 + 0x18) = x0_1;
            *(arg1 + 0x20) = (x0_1 + (x24_1 << 2));
            int64_t x1 = *arg7;
            size_t x21_1 = (arg7[1] - x1);
            if (x21_1 >= 1)
            {
                memcpy(x0_1, x1, x21_1);
                *(arg1 + 0x18) = (x0_1 + x21_1);
            }
        }
    }
    if ((x9 == x8_4 || (x9 != x8_4 && (x24_1 >> 0x3e) == 0)))
    {
        arg9 = &arg1[0xa];
        int64_t x0_4 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(arg9);
        s = &arg1[0x10];
        __builtin_memset(s, 0, 0x18);
        int64_t x8_9 = *arg10;
        int64_t x9_1 = arg10[1];
        uint64_t x24_2 = (x9_1 - x8_9);
        if ((x9_1 != x8_9 && (x24_2 & 0xffffffff80000000) == 0))
        {
            x0_4 = operator new(x24_2);
            *(arg1 + 0x40) = x0_4;
            *(arg1 + 0x48) = x0_4;
            *(arg1 + 0x50) = (x0_4 + x24_2);
            int64_t x1_2 = *arg10;
            int64_t x23_2 = x0_4;
            size_t x20_2 = (arg10[1] - x1_2);
            if (x20_2 >= 1)
            {
                x0_4 = memcpy(x23_2, x1_2, x20_2);
                *(arg1 + 0x48) = (x23_2 + x20_2);
            }
        }
        if ((x9_1 == x8_9 || (x9_1 != x8_9 && (x24_2 & 0xffffffff80000000) == 0)))
        {
            arg1[0x16] = *arg11;
            return x0_4;
        }
    }
    int64_t x0_9 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
    void* x8_15 = *s;
    void* x0_10;
    if (x8_15 != 0)
    {
        *(arg1 + 0x48) = x8_15;
        operator delete(x8_15);
        x0_10 = *arg9;
    }
    else
    {
        x0_10 = *arg9;
    }
    void* x0_12;
    if (((x8_15 != 0 && x0_10 == 0) || (x8_15 == 0 && x0_10 == 0)))
    {
        x0_12 = *(arg1 + 0x10);
        if (x0_12 != 0)
        {
        label_269c8:
            *(arg1 + 0x18) = x0_12;
            operator delete(x0_12);
        }
    }
    if (((x8_15 != 0 && x0_10 != 0) || (x8_15 == 0 && x0_10 != 0)))
    {
        *(arg1 + 0x30) = x0_10;
        operator delete(x0_10);
        x0_12 = *(arg1 + 0x10);
        if (x0_12 != 0)
        {
            goto label_269c8;
        }
    }
    void* x0_14;
    void* x1_3;
    void* x2_2;
    x0_14 = _Unwind_Resume(x0_9);
    /* tailcall */
    return std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::assign<ground_filter::plane_base*>(x0_14, x1_3, x2_2);
}

void std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::assign<ground_filter::plane_base*>(void* arg1, void* arg2, void* arg3)
{
    int64_t x8 = *(arg1 + 0x10);
    cv::Mat* x21 = *arg1;
    int64_t x24 = (((arg3 - arg2) >> 4) * 0x2e8ba2e8ba2e8ba3);
    void* x22 = arg2;
    void* s = arg1;
    int128_t v0;
    if (x24 <= (((x8 - x21) >> 4) * 0x2e8ba2e8ba2e8ba3))
    {
        void* x8_7 = (*(s + 8) - x21);
        int64_t x26_1 = ((x8_7 >> 4) * 0x2e8ba2e8ba2e8ba3);
        void* x23_2 = (x22 + x8_7);
        void* x25_1;
        if (x24 > x26_1)
        {
            x25_1 = x23_2;
        }
        else
        {
            x25_1 = arg3;
        }
        if (x25_1 != x22)
        {
            do
            {
                arg1 = ground_filter::plane_base::operator=(x21);
                x22 = (x22 + 0xb0);
                x21 = (x21 + 0xb0);
            } while (x25_1 != x22);
        }
        if (x24 <= x26_1)
        {
            void* x20_1 = *(s + 8);
            if (x20_1 != x21)
            {
                do
                {
                    int64_t x8_9 = *(x20_1 - 0x50);
                    if (x8_9 != 0)
                    {
                        int32_t temp0_3;
                        int32_t i;
                        do
                        {
                            temp0_3 = __ldaxr((x8_9 + 0x14));
                            i = __stlxr((temp0_3 - 1), (x8_9 + 0x14));
                        } while (i != 0);
                        if (temp0_3 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int32_t x8_11 = *(x20_1 - 0x84);
                    v0 = 0;
                    *v0[8] = 0;
                    *(x20_1 - 0x50) = 0;
                    __builtin_memset((x20_1 - 0x78), 0, 0x20);
                    if (x8_11 >= 1)
                    {
                        int64_t x8_12 = *(x20_1 - 0x48);
                        int64_t i_1 = 0;
                        do
                        {
                            *(x8_12 + (i_1 << 2)) = 0;
                            i_1 = (i_1 + 1);
                        } while (i_1 < *(x20_1 - 0x84));
                    }
                    arg1 = *(x20_1 - 0x40);
                    if (arg1 != (x20_1 - 0x38))
                    {
                        arg1 = cv::fastFree(arg1);
                    }
                    x20_1 = (x20_1 - 0xb0);
                } while (x20_1 != x21);
            }
            *(s + 8) = x21;
        }
        else if (x25_1 != arg3)
        {
            arg1 = *(s + 8);
            do
            {
                ground_filter::plane_base::plane_base(arg1);
                x23_2 = (x23_2 + 0xb0);
                arg1 = (*(s + 8) + 0xb0);
                *(s + 8) = arg1;
            } while (arg3 != x23_2);
        }
    }
    else
    {
        if (x21 != 0)
        {
            void* x23_1 = *(s + 8);
            cv::Mat* x0_2;
            if (x23_1 == x21)
            {
                x0_2 = x21;
            }
            else
            {
                do
                {
                    int64_t x8_1 = *(x23_1 - 0x50);
                    if (x8_1 != 0)
                    {
                        int32_t temp0_1;
                        int32_t i_2;
                        do
                        {
                            temp0_1 = __ldaxr((x8_1 + 0x14));
                            i_2 = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
                        } while (i_2 != 0);
                        if (temp0_1 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int32_t x8_3 = *(x23_1 - 0x84);
                    v0 = 0;
                    *v0[8] = 0;
                    *(x23_1 - 0x50) = 0;
                    __builtin_memset((x23_1 - 0x78), 0, 0x20);
                    if (x8_3 >= 1)
                    {
                        int64_t x8_4 = *(x23_1 - 0x48);
                        int64_t i_3 = 0;
                        do
                        {
                            *(x8_4 + (i_3 << 2)) = 0;
                            i_3 = (i_3 + 1);
                        } while (i_3 < *(x23_1 - 0x84));
                    }
                    void* x0_1 = *(x23_1 - 0x40);
                    if (x0_1 != (x23_1 - 0x38))
                    {
                        cv::fastFree(x0_1);
                    }
                    x23_1 = (x23_1 - 0xb0);
                } while (x23_1 != x21);
                x0_2 = *s;
            }
            *(s + 8) = x21;
            operator delete(x0_2);
            x8 = 0;
            __builtin_memset(s, 0, 0x18);
        }
        int64_t x9_5 = 0x1745d1745d1745d;
        if (x24 > 0x1745d1745d1745d)
        {
            sub_20ac4(std::__ndk1::__vector_base_common<true>::__throw_length_error());
            /* no return */
        }
        int64_t x8_15 = ((x8 >> 4) * 0x2e8ba2e8ba2e8ba3);
        if (x8_15 <= 0xba2e8ba2e8ba2d)
        {
            int64_t x8_16 = (x8_15 << 1);
            if (x8_16 < x24)
            {
                x9_5 = x24;
            }
            else
            {
                x9_5 = x8_16;
            }
        }
        uint64_t x21_1 = (x9_5 * 0xb0);
        arg1 = operator new(x21_1);
        *s = arg1;
        *(s + 8) = arg1;
        *(s + 0x10) = (arg1 + x21_1);
        if (x22 != arg3)
        {
            do
            {
                ground_filter::plane_base::plane_base(arg1);
                x22 = (x22 + 0xb0);
                arg1 = (*(s + 8) + 0xb0);
                *(s + 8) = arg1;
            } while (arg3 != x22);
        }
    }
}

int32_t* ground_filter::plane_base::operator=(int32_t* arg1, int32_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    arg1[3] = arg2[3];
    arg1[4] = arg2[4];
    *(arg1 + 0x14) = *(arg2 + 0x14);
    if (arg1 != arg2)
    {
        int64_t x8_5 = *(arg2 + 0x60);
        if (x8_5 != 0)
        {
            int32_t i;
            do
            {
                i = __stlxr((__ldaxr((x8_5 + 0x14)) + 1), (x8_5 + 0x14));
            } while (i != 0);
        }
        int64_t x8_7 = *(arg1 + 0x60);
        if (x8_7 != 0)
        {
            int32_t temp0_2;
            int32_t i_1;
            do
            {
                temp0_2 = __ldaxr((x8_7 + 0x14));
                i_1 = __stlxr((temp0_2 - 1), (x8_7 + 0x14));
            } while (i_1 != 0);
            if (temp0_2 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int32_t x8_9 = arg1[0xb];
        int128_t v0;
        v0 = 0;
        *v0[8] = 0;
        *(arg1 + 0x60) = 0;
        __builtin_memset(&arg1[0xe], 0, 0x20);
        int64_t x10_3;
        if (x8_9 <= 0)
        {
            arg1[0xa] = arg2[0xa];
        }
        else
        {
            int64_t x8_10 = *(arg1 + 0x68);
            int64_t x9_5 = 0;
            do
            {
                *(x8_10 + (x9_5 << 2)) = 0;
                x10_3 = arg1[0xb];
                x9_5 = (x9_5 + 1);
            } while (x9_5 < x10_3);
            arg1[0xa] = arg2[0xa];
        }
        int32_t x8_13;
        if ((x8_9 <= 0 || (x8_9 > 0 && x10_3 <= 2)))
        {
            x8_13 = arg2[0xb];
            if (x8_13 <= 2)
            {
                arg1[0xb] = x8_13;
                int64_t* x10_4 = *(arg1 + 0x70);
                *(arg1 + 0x30) = *(arg2 + 0x30);
                int64_t* x8_15 = *(arg2 + 0x70);
                *x10_4 = *x8_15;
                x10_4[1] = x8_15[1];
            }
        }
        if ((((x8_9 <= 0 || (x8_9 > 0 && x10_3 <= 2)) && x8_13 > 2) || (x8_9 > 0 && x10_3 > 2)))
        {
            cv::Mat::copySize(&arg1[0xa]);
        }
        *(arg1 + 0x38) = *(arg2 + 0x38);
        *(arg1 + 0x48) = *(arg2 + 0x48);
        *(arg1 + 0x58) = *(arg2 + 0x58);
    }
    *(arg1 + 0x88) = *(arg2 + 0x88);
    arg1[0x24] = arg2[0x24];
    arg1[0x25] = arg2[0x25];
    arg1[0x26] = arg2[0x26];
    arg1[0x27] = arg2[0x27];
    arg1[0x28] = arg2[0x28];
    *(arg1 + 0xa4) = *(arg2 + 0xa4);
    return arg1;
}

int128_t ground_filter::plane_base::plane_base(int32_t* arg1, int32_t* arg2)
{
    *arg1 = *arg2;
    arg1[1] = arg2[1];
    arg1[2] = arg2[2];
    arg1[3] = arg2[3];
    arg1[4] = arg2[4];
    *(arg1 + 0x14) = *(arg2 + 0x14);
    *(arg1 + 0x28) = *(arg2 + 0x28);
    *(arg1 + 0x38) = *(arg2 + 0x38);
    *(arg1 + 0x48) = *(arg2 + 0x48);
    int128_t v0 = *(arg2 + 0x50);
    *(arg1 + 0x50) = v0;
    int64_t x8_6 = *(arg2 + 0x60);
    *(arg1 + 0x78) = 0;
    *(arg1 + 0x68) = &arg1[0xc];
    *(arg1 + 0x70) = &arg1[0x1e];
    *(arg1 + 0x60) = x8_6;
    *(arg1 + 0x80) = 0;
    if (x8_6 != 0)
    {
        int32_t i;
        do
        {
            i = __stlxr((__ldaxr((x8_6 + 0x14)) + 1), (x8_6 + 0x14));
        } while (i != 0);
    }
    if (arg2[0xb] > 2)
    {
        arg1[0xb] = 0;
        v0 = cv::Mat::copySize(&arg1[0xa]);
    }
    else
    {
        int64_t* x8_9 = *(arg2 + 0x70);
        int64_t* x10_2 = *(arg1 + 0x70);
        *x10_2 = *x8_9;
        x10_2[1] = x8_9[1];
    }
    *(arg1 + 0x88) = *(arg2 + 0x88);
    arg1[0x24] = arg2[0x24];
    arg1[0x25] = arg2[0x25];
    arg1[0x26] = arg2[0x26];
    arg1[0x27] = arg2[0x27];
    arg1[0x28] = arg2[0x28];
    *(arg1 + 0xa4) = *(arg2 + 0xa4);
    return v0;
}

void std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t>(int64_t* arg1, int32_t* arg2)
{
    void* x20 = *arg1;
    size_t x21 = (arg1[1] - x20);
    int64_t x24 = (x21 >> 2);
    if (((x24 + 1) >> 0x3e) != 0)
    {
        int64_t x0_6;
        int64_t x1_2;
        int64_t* x2_3;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::uniform_int_distribution<int64_t>::operator()<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(x0_6, x1_2, x2_3);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t* x23;
    int64_t x25;
    if (0x1ffffffffffffffe < (x9_2 >> 2))
    {
        x25 = 0x3fffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 1);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x23 = nullptr;
        }
        else if ((x25 >> 0x3e) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    if ((0x1ffffffffffffffe < (x9_2 >> 2) || (0x1ffffffffffffffe >= (x9_2 >> 2) && x25 != 0)))
    {
        x23 = operator new((x25 << 2));
    }
    void* x24_1 = (x23 + (x24 << 2));
    *x24_1 = *arg2;
    if (x21 >= 1)
    {
        memcpy(x23, x20, x21);
    }
    *arg1 = x23;
    arg1[1] = (x24_1 + 4);
    arg1[2] = (x23 + (x25 << 2));
    if (x20 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x20);
}

int64_t std::__ndk1::uniform_int_distribution<int64_t>::operator()<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul> >(int64_t arg1, int64_t arg2, int64_t* arg3)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    int64_t x0 = *arg3;
    int64_t x8_1 = arg3[1];
    if (x8_1 != x0)
    {
        int64_t var_80;
        if ((x8_1 - x0) == -1)
        {
            int128_t v0 = data_54750;
            int128_t v1;
            v1 = 2;
            *v1[8] = 2;
            var_80 = arg2;
            int128_t var_78_1 = v0;
            int128_t var_68_1 = v1;
            int128_t var_58_1;
            __builtin_memcpy(&var_58_1, "\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x01\x00\x00\x00", 0x20);
            x0 = std::__ndk1::__independent_bits_engine<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, uint64_t>::__eval(&var_80);
        }
        else
        {
            int64_t x8_4 = (0x40 - _CountLeadingZeros(((x8_1 - x0) + 1)));
            int64_t x9_3;
            if (((-1 >> (0x41 - x8_4)) & ((x8_1 - x0) + 1)) == 0)
            {
                x9_3 = 1;
            }
            else
            {
                x9_3 = 0;
            }
            int64_t x11_1 = (x8_4 - x9_3);
            uint64_t x8_5 = (x11_1 >> 5);
            uint64_t x10_1;
            if ((x11_1 & 0x1f) != 0)
            {
                x10_1 = (x8_5 + 1);
            }
            else
            {
                x10_1 = x8_5;
            }
            uint64_t x8_6 = (x11_1 / x10_1);
            int64_t x9_6;
            if (x8_6 < 0x40)
            {
                x9_6 = ((-1 << x8_6) & 0x100000000);
            }
            else
            {
                x9_6 = 0;
            }
            var_80 = arg2;
            int128_t var_78;
            var_78 = x11_1;
            *var_78[8] = x8_6;
            int128_t var_68;
            var_68 = x10_1;
            int128_t var_58;
            var_58 = x9_6;
            int32_t x9_14;
            int64_t x12_2;
            if ((0x100000000 - x9_6) > (x9_6 / x10_1))
            {
                x10_1 = (x10_1 + 1);
                x8_6 = (x11_1 / x10_1);
                *var_78[8] = x8_6;
                var_68 = x10_1;
                if (x8_6 > 0x3f)
                {
                    x12_2 = 0;
                    x9_14 = 0;
                    *var_68[8] = (x10_1 + (-(x11_1) + (x8_6 * x10_1)));
                    var_58 = 0;
                }
                else
                {
                    var_58 = ((-1 << x8_6) & 0x100000000);
                }
            }
            if ((((0x100000000 - x9_6) > (x9_6 / x10_1) && x8_6 <= 0x3f) || (0x100000000 - x9_6) <= (x9_6 / x10_1)))
            {
                *var_68[8] = (x10_1 + (-(x11_1) + ((x11_1 / x10_1) * x10_1)));
                if (x8_6 > 0x3e)
                {
                    x12_2 = 0;
                    x9_14 = 0;
                }
                else
                {
                    x12_2 = ((-1 << (x8_6 + 1)) & 0x100000000);
                    x9_14 = 1;
                }
            }
            *var_58[8] = x12_2;
            uint64_t x10_5;
            if (x8_6 == 0)
            {
                x10_5 = 0;
            }
            else
            {
                x10_5 = (-1 >> -(x8_6));
            }
            uint64_t x8_9;
            if (x9_14 != 0)
            {
                x8_9 = (-1 >> (0x3f - x8_6));
            }
            else
            {
                x8_9 = -1;
            }
            int128_t var_48;
            var_48 = x10_5;
            *var_48[8] = x8_9;
            int64_t i;
            do
            {
                i = std::__ndk1::__independent_bits_engine<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, uint64_t>::__eval(&var_80);
            } while (i >= ((x8_1 - x0) + 1));
            x0 = (*arg3 + i);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

int64_t std::__ndk1::__independent_bits_engine<std::__ndk1::mersenne_twister_engine<uint64_t, 32ul, 624ul, 397ul, 31ul, 2567483615ul, 11ul, 4294967295ul, 7ul, 2636928640ul, 15ul, 4022730752ul, 18ul, 1812433253ul>, uint64_t>::__eval(int64_t* arg1)
{
    int64_t x8 = arg1[4];
    int64_t x12_12;
    if (x8 == 0)
    {
        x12_12 = 0;
    }
    else
    {
        int64_t* x14_1 = *arg1;
        int64_t x17_1 = x14_1[0x270];
        x8 = 0;
        int64_t x13_1 = 0;
        while (true)
        {
            int64_t x1_1 = (x17_1 << 3);
            int64_t x2_1 = (x17_1 + 0x18d);
            x17_1 = ((x17_1 + 1) % 0x270);
            int64_t x12_2 = x14_1[x17_1];
            *(x14_1 + x1_1) = ((((x12_2 & 1) * 0x9908b0df) ^ x14_1[(x2_1 % 0x270)]) ^ (((x12_2 & 0x7ffffffe) | (*(x14_1 + x1_1) & 0xffffffff80000000)) >> 1));
            int64_t x12_8 = x14_1[x14_1[0x270]];
            x14_1[0x270] = x17_1;
            int64_t x12_9 = (((x12_8 >> 0xb) & 0xffffffff) ^ x12_8);
            int64_t x12_10 = ((0x9d2c5680 & (x12_9 << 7)) ^ x12_9);
            int64_t x12_11 = ((0xefc60000 & (x12_10 << 0xf)) ^ x12_10);
            int64_t x1_5 = (x12_11 ^ (x12_11 >> 0x12));
            if (x1_5 < arg1[5])
            {
                int64_t x2_5 = arg1[2];
                x12_12 = arg1[4];
                x13_1 = (x13_1 + 1);
                int64_t x8_2;
                if (x2_5 < 0x40)
                {
                    x8_2 = (x8 << x2_5);
                }
                else
                {
                    x8_2 = 0;
                }
                x8 = (x8_2 + (arg1[7] & x1_5));
                if (x13_1 >= x12_12)
                {
                    break;
                }
            }
        }
    }
    if (x12_12 < arg1[3])
    {
        int64_t* x13_3 = *arg1;
        int64_t x16_1 = x13_3[0x270];
        while (true)
        {
            int64_t x1_7 = (x16_1 << 3);
            int64_t x2_6 = (x16_1 + 0x18d);
            x16_1 = ((x16_1 + 1) % 0x270);
            int64_t x17_6 = x13_3[x16_1];
            *(x13_3 + x1_7) = ((((x17_6 & 1) * 0x9908b0df) ^ x13_3[(x2_6 % 0x270)]) ^ (((x17_6 & 0x7ffffffe) | (*(x13_3 + x1_7) & 0xffffffff80000000)) >> 1));
            int64_t x17_12 = x13_3[x13_3[0x270]];
            x13_3[0x270] = x16_1;
            int64_t x17_13 = (((x17_12 >> 0xb) & 0xffffffff) ^ x17_12);
            int64_t x17_14 = ((0x9d2c5680 & (x17_13 << 7)) ^ x17_13);
            int64_t x17_15 = ((0xefc60000 & (x17_14 << 0xf)) ^ x17_14);
            int64_t x17_16 = (x17_15 ^ (x17_15 >> 0x12));
            if (x17_16 < arg1[6])
            {
                int64_t x1_11 = arg1[2];
                x12_12 = (x12_12 + 1);
                int64_t x8_4;
                if (x1_11 < 0x3f)
                {
                    x8_4 = (x8 << (x1_11 + 1));
                }
                else
                {
                    x8_4 = 0;
                }
                x8 = (x8_4 + (arg1[8] & x17_16));
                if (x12_12 >= arg1[3])
                {
                    break;
                }
            }
        }
    }
    return x8;
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> >(int64_t* arg1, int64_t* arg2)
{
    void* x20 = *arg1;
    int32_t* x22 = arg1[1];
    int64_t x24 = (((x22 - x20) >> 2) * -0x5555555555555555);
    int64_t x23 = 0x1555555555555555;
    if ((x24 + 1) > 0x1555555555555555)
    {
        int32_t* x0_5;
        int32_t* x1_1;
        int32_t x2_1;
        int32_t v0_1;
        int32_t v1_1;
        float v2_1;
        float v3_1;
        float v4_1;
        float v5_1;
        int32_t v6_1;
        int32_t v17_1;
        x0_5 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return Eigen::SelfAdjointEigenSolver<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::compute(x0_5, x1_1, x2_1, v0_1, v1_1, v2_1, v3_1, v4_1, v5_1, v6_1, v17_1);
    }
    int64_t x9 = (((arg1[2] - x20) >> 2) * -0x5555555555555555);
    int64_t x0_1;
    if (x9 <= 0xaaaaaaaaaaaaaa9)
    {
        int64_t x9_1 = (x9 << 1);
        if (x9_1 < (x24 + 1))
        {
            x23 = (x24 + 1);
        }
        else
        {
            x23 = x9_1;
        }
        if (x23 == 0)
        {
            x0_1 = 0;
        }
    }
    if ((x9 > 0xaaaaaaaaaaaaaa9 || (x9 <= 0xaaaaaaaaaaaaaa9 && x23 != 0)))
    {
        x0_1 = operator new((x23 * 0xc));
    }
    int64_t* x8_4 = (x0_1 + (x24 * 0xc));
    x8_4[1] = arg2[1];
    *x8_4 = *arg2;
    *x8_4 = *arg2;
    x8_4[1] = arg2[1];
    void* x10_5 = (x8_4 + 0xc);
    if (x22 != x20)
    {
        do
        {
            x22 = &x22[-3];
            x8_4 = (x8_4 - 0xc);
            *x8_4 = *x22;
            *(x8_4 + 4) = x22[1];
            x8_4[1] = x22[2];
        } while (x20 != x22);
    }
    *arg1 = x8_4;
    arg1[1] = x10_5;
    arg1[2] = (x0_1 + (x23 * 0xc));
    if (x20 == 0)
    {
        return x0_1;
    }
    /* tailcall */
    return operator delete(x20);
}

int32_t* Eigen::SelfAdjointEigenSolver<Eigen::Matrix<float, 3, 3, 0, 3, 3> >::compute(int32_t* arg1, int32_t* arg2, int32_t arg3, int32_t arg4 @ v0, int32_t arg5 @ v1, float arg6, float arg7, float arg8, float arg9, int32_t arg10 @ v6, int32_t arg11 @ v17)
{
    int64_t v14;
    int64_t var_a0 = v14;
    int64_t v13;
    int64_t var_90 = v13;
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    int32_t x9 = *arg2;
    int32_t x8_1 = (arg3 & 0x80);
    *arg1 = x9;
    float x10 = arg2[1];
    /* unimplemented  {fabs s2, s1} */;
    arg1[1] = x10;
    float x9_1 = arg2[2];
    /* unimplemented  {fabs s4, s3} */;
    arg1[2] = x9_1;
    arg1[3] = 0;
    float x10_1 = arg2[4];
    if (arg6 < arg8)
    {
        arg6 = arg8;
    }
    /* unimplemented  {fabs s5, s4} */;
    arg1[4] = x10_1;
    float x9_2 = arg2[5];
    *(arg1 + 0x18) = 0;
    if (arg6 < arg9)
    {
        arg6 = arg9;
    }
    arg1[5] = x9_2;
    float v16 = arg2[8];
    /* unimplemented  {fabs s6, s5} */;
    /* unimplemented  {fabs s17, s7} */;
    if (arg10 < arg11)
    {
        arg10 = arg11;
    }
    /* unimplemented  {fabs s17, s16} */;
    (v16 - 0f);
    if (v16 < 0f)
    {
        arg4 = arg11;
    }
    else
    {
        arg4 = 0f;
    }
    if (v16 > 0f)
    {
        arg4 = arg11;
    }
    if (!(arg10 < arg4))
    {
        arg4 = arg10;
    }
    if (!(arg6 < arg4))
    {
        arg4 = arg6;
    }
    int64_t v8;
    if (arg4 == 0f)
    {
        v8 = 0x3f800000;
    }
    else
    {
        v8 = arg4;
    }
    *arg1 = (x9 / v8);
    arg1[1] = (x10 / v8);
    arg1[2] = (x9_1 / v8);
    arg1[4] = (x10_1 / v8);
    arg1[5] = (x9_2 / v8);
    arg1[8] = (v16 / v8);
    int128_t v2;
    float v3;
    float v6;
    float v7_1;
    v2 = Eigen::internal::tridiagonalization_inplace_selector<Eigen::Matrix<float, 3, 3, 0, 3, 3>, 3, false>::run<Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1> >(arg1, &arg1[9], &arg1[0xc], ((arg3 >> 7) & 1));
    int64_t x9_3 = 0;
    int64_t x25 = 0;
    int64_t x11 = 2;
    int32_t* x24;
    if ((arg3 & 0x80) != 0)
    {
        x24 = arg1;
    }
    else
    {
        x24 = nullptr;
    }
    while (true)
    {
        int64_t x8_4 = x11;
        if (x25 < x11)
        {
            int64_t x11_1 = (x25 << 2);
            *((arg1 + x11_1) + 0x24);
            int64_t i_2 = (x8_4 - x25);
            void* x11_2 = (&arg1[0xc] + x11_1);
            int64_t i;
            do
            {
                /* unimplemented  {fabs s2, s0} */;
                *(x11_2 - 8);
                /* unimplemented  {fabs s3, s0} */;
                v2 = (v2 + v3);
                /* unimplemented  {fabs s1, s1} */;
                v2 = (v2 * 9.99999975e-06f);
                if (!(*x11_2 > v2))
                {
                    *x11_2 = 0;
                }
                i = i_2;
                i_2 = (i_2 - 1);
                x11_2 = (x11_2 + 4);
            } while (i != 1);
        }
        int64_t x12_1 = (x8_4 << 2);
        int64_t x10_3 = (x8_4 - 1);
        void* x17_1 = (&arg1[0xc] + x12_1);
        void* x11_4 = (&arg1[0xb] + x12_1);
        int64_t x16_1 = -0xc;
        int64_t x27_1 = x8_4;
        int64_t x9_4;
        int64_t i_4;
        void* x12_2;
        int64_t x13_2;
        int64_t x14_1;
        void* x15_1;
        float v0;
        float v1;
        while (true)
        {
            int64_t temp0_1 = x27_1;
            x27_1 = (x27_1 - 1);
            if (temp0_1 >= 1)
            {
                x12_2 = x11_4;
                v0 = *x11_4;
                x11_4 = (x11_4 - 4);
                x13_2 = x10_3;
                x14_1 = x16_1;
                x15_1 = x17_1;
                x10_3 = (x10_3 - 1);
                x16_1 = (x16_1 - 0xc);
                x17_1 = (x17_1 - 4);
                if (v0 == 0f)
                {
                    continue;
                }
                else
                {
                    x9_4 = (x9_3 + 1);
                    if (x9_3 <= 0x59)
                    {
                        i_4 = 1;
                        break;
                    }
                    x9_3 = x9_4;
                }
            }
            int32_t x8_9;
            if (x9_3 > 0x5a)
            {
                x8_9 = 1;
            }
            else
            {
                x8_9 = 0;
            }
            arg1[0xe] = (x8_9 << 1);
            if (x9_3 < 0x5b)
            {
                int32_t x8_11 = arg1[9];
                v0 = arg1[0xa];
                v2 = x8_11;
                (v0 - v2);
                bool cond:6_1 = v0 < v2;
                if (!(v0 < v2))
                {
                    v0 = v2;
                }
                int64_t x9_6;
                if (cond:6_1)
                {
                    x9_6 = 1;
                }
                else
                {
                    x9_6 = 0;
                }
                int64_t x9_7;
                if (arg1[0xb] < v0)
                {
                    x9_7 = 2;
                }
                else
                {
                    x9_7 = x9_6;
                }
                if (x9_7 != 0)
                {
                    int64_t x10_5 = (x9_7 << 2);
                    arg1[9] = *(&arg1[9] + x10_5);
                    *(&arg1[9] + x10_5) = x8_11;
                    if (x8_1 != 0)
                    {
                        int32_t* x8_12 = (arg1 + (x9_7 * 0xc));
                        int32_t x10_6 = *arg1;
                        *arg1 = *x8_12;
                        *x8_12 = x10_6;
                        int32_t x10_7 = arg1[1];
                        arg1[1] = x8_12[1];
                        x8_12[1] = x10_7;
                        int32_t x10_8 = arg1[2];
                        arg1[2] = x8_12[2];
                        x8_12[2] = x10_8;
                    }
                }
                float x8_13 = arg1[0xa];
                if (!(arg1[0xb] >= x8_13))
                {
                    arg1[0xa] = arg1[0xb];
                    arg1[0xb] = x8_13;
                    if (x8_1 != 0)
                    {
                        int64_t x9_12 = *(arg1 + 0xc);
                        int32_t x10_9 = arg1[8];
                        int32_t x11_6 = arg1[5];
                        *(arg1 + 0xc) = *(arg1 + 0x18);
                        *(arg1 + 0x18) = x9_12;
                        arg1[5] = x10_9;
                        arg1[8] = x11_6;
                    }
                }
            }
            v2 = arg1[0xb];
            v1 = (v8 * arg1[0xa]);
            v2 = (v8 * v2);
            arg1[9] = (v8 * arg1[9]);
            arg1[0xa] = v1;
            arg1[0xf] = 1;
            *(arg1 + 0x3d) = (x8_1 >> 7);
            arg1[0xb] = v2;
            if (*(x28 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return arg1;
        }
        void* x10_4;
        int64_t i_3;
        void* x21_1;
        int64_t x22_1;
        do
        {
            x25 = x13_2;
            int64_t temp2_1 = x13_2;
            x13_2 = (x13_2 - 1);
            x10_4 = x12_2;
            x22_1 = x14_1;
            x21_1 = x15_1;
            i_3 = i_4;
            if (temp2_1 < 1)
            {
                break;
            }
            x12_2 = (x10_4 - 4);
            x14_1 = (x22_1 - 0xc);
            x15_1 = (x21_1 - 4);
            i_4 = (i_3 + 1);
        } while (*x12_2 != 0f);
        v2 = *(x11_4 - 8);
        v1 = *(x11_4 - 4);
        v2 = (v2 - v1);
        v2 = (v2 * 0.5f);
        float v4;
        float v5;
        if (!(v2 != 0f))
        {
            x11 = (x27_1 + 1);
            /* unimplemented  {fabs s0, s0} */;
        }
        else
        {
            /* unimplemented  {fabs s6, s2} */;
            /* unimplemented  {fabs s7, s0} */;
            if (v6 < v7_1)
            {
                v5 = v7_1;
            }
            else
            {
                v5 = v6;
            }
            v3 = (v0 * v0);
            v4 = 0f;
            if (!(v5 == 0f))
            {
                if (v7_1 < v6)
                {
                    v4 = v7_1;
                }
                else
                {
                    v4 = v6;
                }
                v4 = (v4 / v5);
                /* unimplemented  {fsqrt s4, s4} */;
                v4 = (v5 * ((v4 * v4) + 1f));
            }
            x11 = (x27_1 + 1);
            if (v3 != 0f)
            {
                /* unimplemented  {fneg s0, s4} */;
                if (v2 > 0f)
                {
                    v0 = v4;
                }
                v0 = (v3 / (v2 + v0));
            }
            else
            {
                if (v2 > 0f)
                {
                    v3 = 1f;
                }
                else
                {
                    v3 = -1f;
                }
                v2 = (v2 + v3);
                v2 = (v0 / v2);
                v0 = (v2 * (v0 / v4));
            }
        }
        x9_3 = x9_4;
        if ((x25 + 1) <= x11)
        {
            v2 = *(x10_4 - 0xc);
            v13 = *x10_4;
            v0 = (v1 - v0);
            v14 = (v2 - v0);
            int64_t x28_1 = x25;
            int64_t i_1;
            do
            {
                if (!(v13 != 0f))
                {
                    if (v14 < 0f)
                    {
                        v0 = -1f;
                    }
                    else
                    {
                        v0 = 1f;
                    }
                    v1 = 0f;
                }
                else if (v14 != 0f)
                {
                    /* unimplemented  {fabs s0, s14} */;
                    /* unimplemented  {fabs s1, s13} */;
                    if (v0 <= v1)
                    {
                        v0 = (v14 / v13);
                        /* unimplemented  {fsqrt s1, s1} */;
                        /* unimplemented  {fneg s2, s1} */;
                        if (v13 < 0f)
                        {
                            v1 = v2;
                        }
                        else
                        {
                            v1 = ((v0 * v0) + 1f);
                        }
                        v1 = (-1f / v1);
                        /* unimplemented  {fnmul s0, s0, s1} */;
                    }
                    else
                    {
                        v1 = (v13 / v14);
                        /* unimplemented  {fsqrt s0, s0} */;
                        /* unimplemented  {fneg s2, s0} */;
                        if (v14 < 0f)
                        {
                            v0 = v2;
                        }
                        else
                        {
                            v0 = ((v1 * v1) + 1f);
                        }
                        v0 = (1f / v0);
                        /* unimplemented  {fnmul s1, s1, s0} */;
                    }
                }
                else
                {
                    if (v13 < 0f)
                    {
                        v1 = 1f;
                    }
                    else
                    {
                        v1 = -1f;
                    }
                    v0 = 0f;
                }
                v2 = *(x21_1 - 0x10);
                v4 = *(x21_1 - 0xc);
                v3 = *(x21_1 - 4);
                v5 = (v1 * v2);
                v6 = (v0 * v3);
                v3 = (v1 * v3);
                v2 = (v0 * v2);
                v5 = (v5 + v6);
                v7_1 = (v3 + (v0 * v4));
                v2 = (v2 - v3);
                v2 = (v0 * v2);
                v3 = (v1 * (v6 - (v1 * v4)));
                v6 = (v0 * v7_1);
                v7_1 = (v1 * v7_1);
                v2 = (v2 - v3);
                v3 = ((v1 * v5) + v6);
                v14 = ((v0 * v5) - v7_1);
                *(x21_1 - 0x10) = v2;
                *(x21_1 - 0xc) = v3;
                *(x21_1 - 4) = v14;
                if (x28_1 >= (x25 + 1))
                {
                    v2 = *(x21_1 - 8);
                    v3 = (v13 * v1);
                    v2 = (v0 * v2);
                    v2 = (v2 - v3);
                    *(x21_1 - 8) = v2;
                }
                if (((x28_1 >= (x25 + 1) && x28_1 >= x27_1) || (x28_1 < (x25 + 1) && x28_1 >= x27_1)))
                {
                    x28_1 = (x28_1 + 1);
                    if (x24 != 0)
                    {
                    label_279a4:
                        v2 = 3;
                        *v2[8] = 3;
                        /* unimplemented  {fneg s1, s1} */;
                        int64_t x8_7 = ((x24 + (x8_4 * 0xc)) + x22_1);
                        int64_t var_f0 = x8_7;
                        int64_t var_e8_1 = 3;
                        float var_138 = v0;
                        float var_134_1 = v1;
                        int32_t* var_d8_1 = x24;
                        int128_t var_d0_1 = v2;
                        int64_t var_b8_1 = 3;
                        int64_t var_130 = (x8_7 + 0xc);
                        int64_t var_128_1 = 3;
                        int32_t* var_118_1 = x24;
                        int128_t var_110_1 = v2;
                        int64_t var_f8_1 = 3;
                        v0 = Eigen::internal::apply_rotation_in_the_plane<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, float>(&var_f0, &var_130, &var_138);
                    }
                }
                if (((x28_1 >= (x25 + 1) && x28_1 < x27_1) || (x28_1 < (x25 + 1) && x28_1 < x27_1)))
                {
                    v2 = *x21_1;
                    /* unimplemented  {fnmul s13, s1, s2} */;
                    v2 = (v0 * v2);
                    *x21_1 = v2;
                    x28_1 = (x28_1 + 1);
                    if (x24 != 0)
                    {
                        goto label_279a4;
                    }
                }
                x22_1 = (x22_1 + 0xc);
                i_1 = i_3;
                i_3 = (i_3 - 1);
                x21_1 = (x21_1 + 4);
            } while (i_1 != 1);
            x11 = (x27_1 + 1);
            x9_3 = x9_4;
        }
    }
}

int128_t Eigen::internal::tridiagonalization_inplace_selector<Eigen::Matrix<float, 3, 3, 0, 3, 3>, 3, false>::run<Eigen::Matrix<float, 3, 1, 0, 3, 1>, Eigen::Matrix<float, 2, 1, 0, 2, 1> >(int32_t* arg1, int32_t* arg2, int32_t* arg3, int32_t arg4, int128_t arg5 @ v0, float arg6, int128_t arg7 @ v2, float arg8, float arg9, int32_t arg10 @ v5, float arg11, float arg12)
{
    *arg2 = *arg1;
    arg6 = arg1[2];
    arg5 = (arg6 * arg6);
    if (arg5 != 0f)
    {
        arg7 = arg1[1];
        arg9 = arg1[4];
        arg5 = (arg5 + (arg7 * arg7));
        /* unimplemented  {fsqrt s7, s0} */;
        arg8 = (1f / arg12);
        arg5 = (arg7 * arg8);
        arg6 = (arg6 * arg8);
        arg7 = (arg5 + arg5);
        arg7 = (arg1[5] * arg7);
        arg7 = (((arg1[8] - arg9) * arg6) + arg7);
        arg8 = (arg6 * arg7);
        arg2[1] = (arg9 + arg8);
        arg7 = (arg5 * arg7);
        arg2[2] = (arg1[8] - arg8);
        *arg3 = arg12;
        arg7 = (arg1[5] - arg7);
        arg3[1] = arg7;
        if ((arg4 & 1) != 0)
        {
            arg7 = data_54780;
            arg1[4] = arg5;
            arg1[5] = arg6;
            /* unimplemented  {fneg s0, s0} */;
            arg1[6] = 0;
            *arg1 = arg7;
            arg1[7] = arg6;
            arg1[8] = arg5;
        }
    }
    else
    {
        arg2[1] = arg1[4];
        arg2[2] = arg1[8];
        *arg3 = arg1[1];
        arg3[1] = arg1[5];
        if ((arg4 & 1) != 0)
        {
            arg5 = data_54780;
            __builtin_memcpy(arg1, "\x00\x00\x80\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x3f", 0x24);
            return arg5;
        }
    }
    return arg5;
}

uint128_t Eigen::internal::apply_rotation_in_the_plane<Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, Eigen::Block<Eigen::Map<Eigen::Matrix<float, -1, -1, 0, -1, -1>, 0, Eigen::Stride<0, 0> >, -1, 1, true>, float>(int64_t* arg1, int64_t* arg2, int32_t* arg3)
{
    uint128_t v0;
    v0 = *arg3;
    uint128_t v1;
    v1 = arg3[1];
    int128_t* x8 = *arg1;
    int64_t x10 = arg1[1];
    int128_t* x9 = *arg2;
    uint128_t v2;
    v2 = 0x3f800000;
    if ((v0 != 1f || (!(v0 != 1f) && !(v1 == 0f))))
    {
        int64_t x14_1 = x10;
        int64_t x11_1 = x10;
        if ((x9 & 3) == 0)
        {
            int64_t x11_3 = (-((x9 >> 2)) & 3);
            if (x11_3 > x10)
            {
                x11_1 = x10;
            }
            else
            {
                x11_1 = x11_3;
            }
        }
        int64_t x12_1 = (x10 - x11_1);
        int64_t x13_2;
        if (x12_1 < 0)
        {
            x13_2 = (x12_1 + 3);
        }
        else
        {
            x13_2 = x12_1;
        }
        int128_t v4;
        int128_t v5;
        int128_t v6;
        int128_t v7;
        if (x11_1 >= 1)
        {
            int64_t x15_1;
            int64_t i_8;
            uint128_t v3;
            if (x11_1 > 3)
            {
                x15_1 = (x11_1 << 2);
                if ((x8 >= (x9 + x15_1) || (x8 < (x9 + x15_1) && x9 >= (x8 + x15_1))))
                {
                    i_8 = (x11_1 & 0xfffffffffffffffc);
                    v2 = vdupq_laneq_s32(v0, 0);
                    v3 = vdupq_laneq_s32(v1, 0);
                    int64_t i_7 = i_8;
                    int128_t* x0_3 = x9;
                    int128_t* x2 = x8;
                    int128_t* x17_5 = x8;
                    int128_t* x1_1 = x9;
                    int64_t i;
                    do
                    {
                        v4 = *x17_5;
                        x17_5 = &x17_5[1];
                        v5 = *x1_1;
                        x1_1 = &x1_1[1];
                        i = i_7;
                        i_7 = (i_7 - 4);
                        v6 = (v2 * v4);
                        *v6[4] = (*v2[4] * *v4[4]);
                        *v6[8] = (*v2[8] * *v4[8]);
                        *v6[0xc] = (*v2[0xc] * *v4[0xc]);
                        v7 = (v3 * v5);
                        *v7[4] = (*v3[4] * *v5[4]);
                        *v7[8] = (*v3[8] * *v5[8]);
                        *v7[0xc] = (*v3[0xc] * *v5[0xc]);
                        v4 = (v3 * v4);
                        *v4[4] = (*v3[4] * *v4[4]);
                        *v4[8] = (*v3[8] * *v4[8]);
                        *v4[0xc] = (*v3[0xc] * *v4[0xc]);
                        v5 = (v2 * v5);
                        *v5[4] = (*v2[4] * *v5[4]);
                        *v5[8] = (*v2[8] * *v5[8]);
                        *v5[0xc] = (*v2[0xc] * *v5[0xc]);
                        v6 = (v6 + v7);
                        *v6[4] = (*v6[4] + *v7[4]);
                        *v6[8] = (*v6[8] + *v7[8]);
                        *v6[0xc] = (*v6[0xc] + *v7[0xc]);
                        (v4 - v5);
                        (*v4[4] - *v5[4]);
                        (*v4[8] - *v5[8]);
                        (*v4[0xc] - *v5[0xc]);
                        *x2 = v6;
                        *x0_3 = v4;
                        x0_3 = x1_1;
                        x2 = x17_5;
                    } while (i != 4);
                    if (x11_1 != i_8)
                    {
                        goto label_27ca8;
                    }
                }
            }
            if ((x11_1 <= 3 || ((x11_1 > 3 && x8 < (x9 + x15_1)) && x9 < (x8 + x15_1))))
            {
                i_8 = 0;
            label_27ca8:
                int64_t x17_1 = (i_8 << 2);
                int64_t i_5 = (x11_1 - i_8);
                int32_t* x15_3 = (x9 + x17_1);
                int32_t* x17_2 = (x8 + x17_1);
                int64_t i_1;
                do
                {
                    v2 = *x17_2;
                    v3 = *x15_3;
                    i_1 = i_5;
                    i_5 = (i_5 - 1);
                    v4 = (v0 * v2);
                    v5 = (v1 * v3);
                    v2 = (v1 * v2);
                    v3 = (v0 * v3);
                    v4 = (v4 + v5);
                    v2 = (v3 - v2);
                    *x17_2 = v4;
                    x17_2 = &x17_2[1];
                    *x15_3 = v2;
                    x15_3 = &x15_3[1];
                } while (i_1 != 1);
            }
        }
        int64_t x15_4 = (x13_2 & 0xfffffffffffffffc);
        int64_t x13_3 = (x11_1 << 2);
        int128_t* x16_2 = (x8 + x13_3);
        void* x17_3 = (x9 + x13_3);
        if ((x8 & 3) == 0)
        {
            int64_t x13_5 = (-((x8 >> 2)) & 3);
            if (x13_5 > x10)
            {
                x14_1 = x10;
            }
            else
            {
                x14_1 = x13_5;
            }
        }
        int64_t x13_6 = (x15_4 + x11_1);
        uint128_t v2_1 = vdupq_laneq_s32(v0, 0);
        uint128_t v3_1 = vdupq_laneq_s32(v1, 0);
        if (x14_1 != x11_1)
        {
            int64_t x14_4;
            if (x12_1 < 0)
            {
                x14_4 = (x12_1 + 7);
            }
            else
            {
                x14_4 = x12_1;
            }
            int64_t x14_6 = ((x14_4 & 0xfffffffffffffff8) + x11_1);
            if (x12_1 >= 8)
            {
                int64_t x0_1 = x11_1;
                do
                {
                    v4 = *x16_2;
                    v6 = x16_2[1];
                    v5 = *x17_3;
                    v7 = *(x17_3 + 0x10);
                    x0_1 = (x0_1 + 8);
                    int128_t v16;
                    v16 = (v2_1 * v4);
                    *v16[4] = (*v2_1[4] * *v4[4]);
                    *v16[8] = (*v2_1[8] * *v4[8]);
                    *v16[0xc] = (*v2_1[0xc] * *v4[0xc]);
                    int128_t v17;
                    v17 = (v3_1 * v5);
                    *v17[4] = (*v3_1[4] * *v5[4]);
                    *v17[8] = (*v3_1[8] * *v5[8]);
                    *v17[0xc] = (*v3_1[0xc] * *v5[0xc]);
                    int128_t v18;
                    v18 = (v2_1 * v6);
                    *v18[4] = (*v2_1[4] * *v6[4]);
                    *v18[8] = (*v2_1[8] * *v6[8]);
                    *v18[0xc] = (*v2_1[0xc] * *v6[0xc]);
                    v16 = (v16 + v17);
                    *v16[4] = (*v16[4] + *v17[4]);
                    *v16[8] = (*v16[8] + *v17[8]);
                    *v16[0xc] = (*v16[0xc] + *v17[0xc]);
                    v17 = (v3_1 * v7);
                    *v17[4] = (*v3_1[4] * *v7[4]);
                    *v17[8] = (*v3_1[8] * *v7[8]);
                    *v17[0xc] = (*v3_1[0xc] * *v7[0xc]);
                    v5 = (v2_1 * v5);
                    *v5[4] = (*v2_1[4] * *v5[4]);
                    *v5[8] = (*v2_1[8] * *v5[8]);
                    *v5[0xc] = (*v2_1[0xc] * *v5[0xc]);
                    v4 = (v3_1 * v4);
                    *v4[4] = (*v3_1[4] * *v4[4]);
                    *v4[8] = (*v3_1[8] * *v4[8]);
                    *v4[0xc] = (*v3_1[0xc] * *v4[0xc]);
                    v7 = (v2_1 * v7);
                    *v7[4] = (*v2_1[4] * *v7[4]);
                    *v7[8] = (*v2_1[8] * *v7[8]);
                    *v7[0xc] = (*v2_1[0xc] * *v7[0xc]);
                    v6 = (v3_1 * v6);
                    *v6[4] = (*v3_1[4] * *v6[4]);
                    *v6[8] = (*v3_1[8] * *v6[8]);
                    *v6[0xc] = (*v3_1[0xc] * *v6[0xc]);
                    v17 = (v18 + v17);
                    *v17[4] = (*v18[4] + *v17[4]);
                    *v17[8] = (*v18[8] + *v17[8]);
                    *v17[0xc] = (*v18[0xc] + *v17[0xc]);
                    (v4 - v5);
                    (*v4[4] - *v5[4]);
                    (*v4[8] - *v5[8]);
                    (*v4[0xc] - *v5[0xc]);
                    (v5 - v7);
                    (*v5[4] - *v7[4]);
                    (*v5[8] - *v7[8]);
                    (*v5[0xc] - *v7[0xc]);
                    *x16_2 = v16;
                    x16_2[1] = v17;
                    x16_2 = &x16_2[2];
                    *x17_3 = v4;
                    *(x17_3 + 0x10) = v5;
                    x17_3 = (x17_3 + 0x20);
                } while (x0_1 < x14_6);
            }
            if (x13_6 != x14_6)
            {
                int64_t x14_7 = (x14_6 << 2);
                v4 = *(x8 + x14_7);
                v5 = *(x9 + x14_7);
                v6 = (v2_1 * v4);
                *v6[4] = (*v2_1[4] * *v4[4]);
                *v6[8] = (*v2_1[8] * *v4[8]);
                *v6[0xc] = (*v2_1[0xc] * *v4[0xc]);
                v7 = (v3_1 * v5);
                *v7[4] = (*v3_1[4] * *v5[4]);
                *v7[8] = (*v3_1[8] * *v5[8]);
                *v7[0xc] = (*v3_1[0xc] * *v5[0xc]);
                v2_1 = (v2_1 * v5);
                *v2_1[4] = (*v2_1[4] * *v5[4]);
                *v2_1[8] = (*v2_1[8] * *v5[8]);
                *v2_1[0xc] = (*v2_1[0xc] * *v5[0xc]);
                v3_1 = (v3_1 * v4);
                *v3_1[4] = (*v3_1[4] * *v4[4]);
                *v3_1[8] = (*v3_1[8] * *v4[8]);
                *v3_1[0xc] = (*v3_1[0xc] * *v4[0xc]);
                v4 = (v6 + v7);
                *v4[4] = (*v6[4] + *v7[4]);
                *v4[8] = (*v6[8] + *v7[8]);
                *v4[0xc] = (*v6[0xc] + *v7[0xc]);
                (v2_1 - v2_1);
                (*v2_1[4] - *v2_1[4]);
                (*v2_1[8] - *v2_1[8]);
                (*v2_1[0xc] - *v2_1[0xc]);
                *(x8 + x14_7) = v4;
                *(x9 + x14_7) = v2_1;
            }
        }
        else if (x12_1 >= 4)
        {
            int64_t x14_2 = x11_1;
            int128_t* x0 = x16_2;
            void* x1 = x17_3;
            do
            {
                v4 = *x0;
                x0 = &x0[1];
                v5 = *x1;
                x1 = (x1 + 0x10);
                x14_2 = (x14_2 + 4);
                v6 = (v2_1 * v4);
                *v6[4] = (*v2_1[4] * *v4[4]);
                *v6[8] = (*v2_1[8] * *v4[8]);
                *v6[0xc] = (*v2_1[0xc] * *v4[0xc]);
                v7 = (v3_1 * v5);
                *v7[4] = (*v3_1[4] * *v5[4]);
                *v7[8] = (*v3_1[8] * *v5[8]);
                *v7[0xc] = (*v3_1[0xc] * *v5[0xc]);
                v5 = (v2_1 * v5);
                *v5[4] = (*v2_1[4] * *v5[4]);
                *v5[8] = (*v2_1[8] * *v5[8]);
                *v5[0xc] = (*v2_1[0xc] * *v5[0xc]);
                v4 = (v3_1 * v4);
                *v4[4] = (*v3_1[4] * *v4[4]);
                *v4[8] = (*v3_1[8] * *v4[8]);
                *v4[0xc] = (*v3_1[0xc] * *v4[0xc]);
                v6 = (v6 + v7);
                *v6[4] = (*v6[4] + *v7[4]);
                *v6[8] = (*v6[8] + *v7[8]);
                *v6[0xc] = (*v6[0xc] + *v7[0xc]);
                (v4 - v5);
                (*v4[4] - *v5[4]);
                (*v4[8] - *v5[8]);
                (*v4[0xc] - *v5[0xc]);
                *x16_2 = v6;
                *x17_3 = v4;
                x16_2 = x0;
                x17_3 = x1;
            } while (x14_2 < x13_6);
        }
        if (x13_6 < x10)
        {
            int64_t x12_2 = (x12_1 - x15_4);
            if (x12_2 >= 4)
            {
                int64_t x15_5 = (x10 << 2);
                int64_t x14_8 = ((x11_1 + x15_4) << 2);
                void* x11_5 = (x8 + x14_8);
                void* x14_9 = (x9 + x14_8);
                if ((x11_5 < (x9 + x15_5) && x14_9 < (x8 + x15_5)))
                {
                    goto label_27eb4;
                }
                int64_t i_9 = (x12_2 & 0xfffffffffffffffc);
                v2_1 = vdupq_laneq_s32(v0, 0);
                x13_6 = (x13_6 + i_9);
                v3_1 = vdupq_laneq_s32(v1, 0);
                int64_t i_6 = i_9;
                void* x17_4 = x11_5;
                void* x0_2 = x14_9;
                int64_t i_2;
                do
                {
                    v4 = *x17_4;
                    x17_4 = (x17_4 + 0x10);
                    v5 = *x0_2;
                    x0_2 = (x0_2 + 0x10);
                    i_2 = i_6;
                    i_6 = (i_6 - 4);
                    v6 = (v2_1 * v4);
                    *v6[4] = (*v2_1[4] * *v4[4]);
                    *v6[8] = (*v2_1[8] * *v4[8]);
                    *v6[0xc] = (*v2_1[0xc] * *v4[0xc]);
                    v7 = (v3_1 * v5);
                    *v7[4] = (*v3_1[4] * *v5[4]);
                    *v7[8] = (*v3_1[8] * *v5[8]);
                    *v7[0xc] = (*v3_1[0xc] * *v5[0xc]);
                    v4 = (v3_1 * v4);
                    *v4[4] = (*v3_1[4] * *v4[4]);
                    *v4[8] = (*v3_1[8] * *v4[8]);
                    *v4[0xc] = (*v3_1[0xc] * *v4[0xc]);
                    v5 = (v2_1 * v5);
                    *v5[4] = (*v2_1[4] * *v5[4]);
                    *v5[8] = (*v2_1[8] * *v5[8]);
                    *v5[0xc] = (*v2_1[0xc] * *v5[0xc]);
                    v6 = (v6 + v7);
                    *v6[4] = (*v6[4] + *v7[4]);
                    *v6[8] = (*v6[8] + *v7[8]);
                    *v6[0xc] = (*v6[0xc] + *v7[0xc]);
                    (v4 - v5);
                    (*v4[4] - *v5[4]);
                    (*v4[8] - *v5[8]);
                    (*v4[0xc] - *v5[0xc]);
                    *x11_5 = v6;
                    *x14_9 = v4;
                    x14_9 = x0_2;
                    x11_5 = x17_4;
                } while (i_2 != 4);
                if (x12_2 != i_9)
                {
                    goto label_27eb4;
                }
            }
            else
            {
            label_27eb4:
                int64_t x11_6 = (x13_6 << 2);
                int64_t i_4 = (x10 - x13_6);
                void* x9_1 = (x9 + x11_6);
                void* x8_1 = (x8 + x11_6);
                int64_t i_3;
                do
                {
                    v2_1 = *x8_1;
                    v3_1 = *x9_1;
                    i_3 = i_4;
                    i_4 = (i_4 - 1);
                    v4 = (v0 * v2_1);
                    v5 = (v1 * v3_1);
                    v2_1 = (v1 * v2_1);
                    v3_1 = (v0 * v3_1);
                    v4 = (v4 + v5);
                    v2_1 = (v3_1 - v2_1);
                    *x8_1 = v4;
                    x8_1 = (x8_1 + 4);
                    *x9_1 = v2_1;
                    x9_1 = (x9_1 + 4);
                } while (i_3 != 1);
            }
        }
    }
    return v0;
}

int64_t feasibal_region::getDirectorySize(char* arg1)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    void* x19;
    if ((*arg1 & 1) != 0)
    {
        x19 = *(arg1 + 0x10);
    }
    else
    {
        x19 = &arg1[1];
    }
    DIR* x0_1 = opendir(x19);
    int64_t x20;
    if (x0_1 == 0)
    {
        *stderr;
        fprintf();
        x20 = -1;
    }
    else
    {
        void var_1f0;
        lstat(x19, &var_1f0);
        int64_t var_1c0;
        x20 = var_1c0;
        int64_t i = readdir(x0_1);
        if (i != 0)
        {
            do
            {
                sprintf();
                void var_170;
                lstat(&var_170, &var_1f0);
                int32_t var_1e0;
                int32_t x0_11;
                int32_t x0_12;
                int64_t x25_1;
                if ((var_1e0 & 0xf000) != 0x4000)
                {
                    x25_1 = var_1c0;
                }
                else
                {
                    x0_11 = strcmp(&data_548f8, (i + 0x13));
                    if (x0_11 != 0)
                    {
                        x0_12 = strcmp(&data_548f7, (i + 0x13));
                        if (x0_12 != 0)
                        {
                            int64_t s;
                            __builtin_memset(&s, 0, 0x18);
                            size_t x0_14 = strlen(&var_170);
                            if (x0_14 < -0x10)
                            {
                                std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                goto label_28150;
                            }
                            void* var_1f8_1;
                            char* x26_1;
                            if (x0_14 >= 0x17)
                            {
                                uint64_t x27_1 = ((x0_14 + 0x10) & 0xfffffffffffffff0);
                                void* x0_5 = operator new(x27_1);
                                x26_1 = x0_5;
                                size_t var_200_1 = x0_14;
                                var_1f8_1 = x0_5;
                                s = (x27_1 | 1);
                            }
                            else
                            {
                                x26_1 = (&s | 1);
                                s = (x0_14 << 1);
                            }
                            if ((x0_14 >= 0x17 || (x0_14 < 0x17 && x0_14 != 0)))
                            {
                                memcpy(x26_1, &var_170, x0_14);
                            }
                            x26_1[x0_14] = 0;
                            x25_1 = feasibal_region::getDirectorySize(&s);
                            if ((s & 1) != 0)
                            {
                                operator delete(var_1f8_1);
                            }
                        }
                    }
                }
                if (((var_1e0 & 0xf000) != 0x4000 || (((var_1e0 & 0xf000) == 0x4000 && x0_11 != 0) && x0_12 != 0)))
                {
                    x20 = (x25_1 + x20);
                }
                i = readdir(x0_1);
            } while (i != 0);
        }
        closedir(x0_1);
    }
    if (*(x22 + 0x28) == x8)
    {
        return x20;
    }
label_28150:
    __stack_chk_fail();
    /* no return */
}

int64_t feasibal_region::cleanDirectory(char* arg1)
{
    void tpidr_el0;
    uint64_t x19 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x19 + 0x28);
    if ((*arg1 & 1) != 0)
    {
        *(arg1 + 0x10);
    }
    sprintf();
    void var_8c;
    int64_t x0_2;
    if (system(&var_8c) == 0)
    {
        x0_2 = 1;
    }
    else
    {
        x0_2 = 0;
    }
    if (*(x19 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t feasibal_region::ground_process::ground_process(void* arg1)
{
    void* var_e0 = (arg1 + 0x10);
    feasibal_region::PreParamInfo::PreParamInfo();
    *(arg1 + 0x200) = 0;
    __builtin_memset((arg1 + 0x24c), 0, 0x3c);
    __builtin_memset((arg1 + 0x218), 0, 0x30);
    *(arg1 + 0x288) = (arg1 + 0x250);
    *(arg1 + 0x290) = (arg1 + 0x298);
    *(arg1 + 0x298) = {0};
    *(arg1 + 0x248) = 0x42ff0004;
    __builtin_memset((arg1 + 0x2ac), 0, 0x3c);
    *(arg1 + 0x2e8) = (arg1 + 0x2b0);
    void* var_e8 = (arg1 + 0x298);
    void* var_78 = (arg1 + 0x2ac);
    *(arg1 + 0x2f0) = (arg1 + 0x2f8);
    void* var_f0 = (arg1 + 0x2f8);
    *(arg1 + 0x2f8) = {0};
    *(arg1 + 0x2a8) = 0x42ff0005;
    __builtin_memset((arg1 + 0x30c), 0, 0x3c);
    *(arg1 + 0x348) = (arg1 + 0x310);
    *(arg1 + 0x350) = (arg1 + 0x358);
    *(arg1 + 0x358) = {0};
    *(arg1 + 0x308) = 0x42ff0005;
    __builtin_memset((arg1 + 0x36c), 0, 0x3c);
    *(arg1 + 0x3a8) = (arg1 + 0x370);
    *(arg1 + 0x3b0) = (arg1 + 0x3b8);
    *(arg1 + 0x3b8) = {0};
    *(arg1 + 0x368) = 0x42ff0005;
    void* var_90 = (arg1 + 0x3cc);
    __builtin_memset((arg1 + 0x3cc), 0, 0x3c);
    *(arg1 + 0x408) = (arg1 + 0x3d0);
    *(arg1 + 0x410) = (arg1 + 0x418);
    void* var_108 = (arg1 + 0x418);
    *(arg1 + 0x418) = {0};
    *(arg1 + 0x3c8) = 0x42ff0005;
    __builtin_memset((arg1 + 0x42c), 0, 0x3c);
    *(arg1 + 0x468) = (arg1 + 0x430);
    *(arg1 + 0x470) = (arg1 + 0x478);
    *(arg1 + 0x478) = {0};
    *(arg1 + 0x428) = 0x42ff0000;
    *(arg1 + 0x488) = 0x42ff0000;
    __builtin_memset((arg1 + 0x48c), 0, 0x3c);
    *(arg1 + 0x4c8) = (arg1 + 0x490);
    *(arg1 + 0x4d0) = (arg1 + 0x4d8);
    *(arg1 + 0x4d8) = {0};
    *(arg1 + 0x518) = {0};
    *(arg1 + 0x4fc) = {0};
    void* var_70_1 = (arg1 + 0x42c);
    *(arg1 + 0x50c) = {0};
    *(arg1 + 0x4ec) = {0};
    *(arg1 + 0x528) = (arg1 + 0x4f0);
    *(arg1 + 0x530) = (arg1 + 0x538);
    *(arg1 + 0x538) = {0};
    *(arg1 + 0x4e8) = 0x42ff0005;
    __builtin_memset((arg1 + 0x54c), 0, 0x3c);
    *(arg1 + 0x588) = (arg1 + 0x550);
    *(arg1 + 0x590) = (arg1 + 0x598);
    *(arg1 + 0x598) = {0};
    *(arg1 + 0x548) = 0x42ff0005;
    void* var_128 = (arg1 + 0x598);
    __builtin_memset((arg1 + 0x5ac), 0, 0x3c);
    *(arg1 + 0x5e8) = (arg1 + 0x5b0);
    *(arg1 + 0x5f0) = (arg1 + 0x5f8);
    *(arg1 + 0x5f8) = {0};
    *(arg1 + 0x5a8) = 0x42ff0005;
    int128_t v1;
    v1 = 0x3f800000;
    *v1[4] = 0x3f800000;
    __builtin_memset((arg1 + 0x60c), 0, 0x3c);
    *(arg1 + 0x648) = (arg1 + 0x610);
    *(arg1 + 0x650) = (arg1 + 0x658);
    void* var_140 = (arg1 + 0x668);
    void* var_138 = (arg1 + 0x658);
    *(arg1 + 0x658) = {0};
    *(arg1 + 0x608) = 0x42ff0005;
    __builtin_memset((arg1 + 0x668), 0, 0x18);
    *(arg1 + 0x680) = 0x3f800000;
    *(arg1 + 0x684) = {0};
    *(arg1 + 0x694) = 0x3f800000;
    *(arg1 + 0x698) = {0};
    *(arg1 + 0x6a8) = 0x3f800000;
    *(arg1 + 0x6ac) = {0};
    *(arg1 + 0x6bc) = 0x3f8000003f800000;
    v1 = data_547a0;
    *(arg1 + 0x6c4) = {0};
    *(arg1 + 0x6d4) = 0x3f800000;
    *(arg1 + 0x6d8) = {0};
    *(arg1 + 0x6e8) = 0x3f800000;
    *(arg1 + 0x6ec) = {0};
    *(arg1 + 0x6fc) = 0x3f800000;
    void* var_80 = (arg1 + 0x30c);
    void* var_f8 = (arg1 + 0x358);
    void* var_88 = (arg1 + 0x36c);
    void* var_100 = (arg1 + 0x3b8);
    void* var_110 = (arg1 + 0x478);
    void* var_98 = (arg1 + 0x48c);
    void* var_118 = (arg1 + 0x4d8);
    void* var_a0 = (arg1 + 0x4ec);
    void* var_120 = (arg1 + 0x538);
    void* var_a8 = (arg1 + 0x54c);
    void* var_b0 = (arg1 + 0x5ac);
    void* var_130 = (arg1 + 0x5f8);
    void* var_b8 = (arg1 + 0x60c);
    *(arg1 + 0x700) = 0;
    *(arg1 + 0x714) = {0};
    __builtin_memset((arg1 + 0x76c), 0, 0x3c);
    void* var_150 = (arg1 + 0x7b8);
    void* var_148 = (arg1 + 0x738);
    __builtin_memset((arg1 + 0x738), 0, 0x30);
    *(arg1 + 0x7a8) = (arg1 + 0x770);
    *(arg1 + 0x7b0) = (arg1 + 0x7b8);
    *(arg1 + 0x7b8) = {0};
    *(arg1 + 0x768) = 0x42ff0000;
    *(arg1 + 0x7c8) = 0x42ff0000;
    __builtin_memset((arg1 + 0x7cc), 0, 0x3c);
    *(arg1 + 0x808) = (arg1 + 0x7d0);
    *(arg1 + 0x810) = (arg1 + 0x818);
    *(arg1 + 0x818) = {0};
    *(arg1 + 0x828) = 0x42ff0000;
    void* var_158 = (arg1 + 0x818);
    void* var_d0 = (arg1 + 0x82c);
    void* var_c8 = (arg1 + 0x7cc);
    __builtin_memset((arg1 + 0x82c), 0, 0x3c);
    *(arg1 + 0x868) = (arg1 + 0x830);
    *(arg1 + 0x870) = (arg1 + 0x878);
    __builtin_memset((arg1 + 0x878), 0, 0x14);
    *(arg1 + 0x890) = 0x42ff0000;
    void* var_160 = (arg1 + 0x878);
    void* var_d8 = (arg1 + 0x894);
    __builtin_memset((arg1 + 0x894), 0, 0x3c);
    *(arg1 + 0x8d0) = (arg1 + 0x898);
    *(arg1 + 0x8d8) = (arg1 + 0x8e0);
    *(arg1 + 0x8e0) = {0};
    *(arg1 + 0x8f0) = 0x42ff0000;
    __builtin_memset((arg1 + 0x8f4), 0, 0x3c);
    *(arg1 + 0x930) = (arg1 + 0x8f8);
    *(arg1 + 0x938) = (arg1 + 0x940);
    *(arg1 + 0x940) = {0};
    *(arg1 + 0x950) = 1;
    __builtin_memset((arg1 + 0x958), 0, 0x78);
    *(arg1 + 0x9d9) = 0;
    void* var_168 = (arg1 + 0x8e0);
    *(arg1 + 0x9d4) = 0;
    *(arg1 + 0x9e1) = 1;
    __builtin_memset((arg1 + 0x9e8), 0, 0x24);
    *(arg1 + 0xa30) = 0x42ff0000;
    __builtin_memset((arg1 + 0xa10), 0, 0x1c);
    __builtin_memset((arg1 + 0xa34), 0, 0x3c);
    *(arg1 + 0xa70) = (arg1 + 0xa38);
    void* var_c0 = (arg1 + 0x76c);
    *(arg1 + 0xa78) = (arg1 + 0xa80);
    *(arg1 + 0xa98) = 0;
    *(arg1 + 0xa8d) = 0;
    *(arg1 + 0xa80) = 0;
    *(arg1 + 0xab0) = (construction_vtable_for_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(arg1 + 0xb60) = (construction_vtable_for_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x40);
    *(arg1 + 0xa88) = 0;
    *(arg1 + 0xaa0) = v1;
    std::__ndk1::ios_base::init((arg1 + 0xb60));
    *(arg1 + 0xbe8) = 0;
    *(arg1 + 0xbf0) = 0xffffffff;
    *(arg1 + 0xab0) = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(arg1 + 0xb60) = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x40);
    int64_t x0_6 = std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf();
    *(arg1 + 0xbfc) = 0;
    *(arg1 + 0xc00) = 1;
    *(arg1 + 0xc08) = {0};
    return x0_6;
}

void sub_28820(int64_t arg1, int64_t* arg2 @ x19, void* arg3 @ x20, int32_t* arg4 @ x23, int64_t arg5 @ x24, int32_t* arg6 @ x25, int32_t* arg7 @ x26, int64_t arg8 @ x27, int64_t* arg9 @ x28, void* arg10 @ x29, int64_t arg11, int64_t arg12, int64_t arg13, int64_t arg14, int64_t* arg15, int64_t* arg16, int64_t arg17, int64_t arg18, int64_t arg19, int64_t arg20, int64_t arg21, int64_t arg22, int64_t arg23, int64_t arg24, int64_t arg25, int64_t arg26, int64_t arg27, int64_t arg28, int32_t* arg29, int32_t* arg30, int32_t* arg31, int32_t* arg32) __noreturn
{
    std::__ndk1::ios_base::~ios_base();
    int64_t x8 = *(arg3 + 0xa68);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg3 + 0xa34);
    *(arg3 + 0xa68) = 0;
    __builtin_memset((arg3 + 0xa40), 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = *(arg3 + 0xa70);
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *arg6);
    }
    void* x0_1 = *(arg3 + 0xa78);
    if (x0_1 != arg5)
    {
        cv::fastFree(x0_1);
    }
    void* x0_2 = *(arg3 + 0xa10);
    if (x0_2 != 0)
    {
        *(arg3 + 0xa18) = x0_2;
        operator delete(x0_2);
    }
    void* x0_3 = *arg9;
    if (x0_3 != 0)
    {
        *(arg3 + 0x9f0) = x0_3;
        operator delete(x0_3);
    }
    void* x0_4 = *(arg3 + 0x9b8);
    if (x0_4 != 0)
    {
        *(arg3 + 0x9c0) = x0_4;
        operator delete(x0_4);
    }
    void* x0_5 = *(arg3 + 0x9a0);
    if (x0_5 != 0)
    {
        *(arg3 + 0x9a8) = x0_5;
        operator delete(x0_5);
    }
    void* x0_6 = *(arg3 + 0x988);
    if (x0_6 != 0)
    {
        *(arg3 + 0x990) = x0_6;
        operator delete(x0_6);
    }
    void* x0_7 = *(arg3 + 0x970);
    if (x0_7 != 0)
    {
        *(arg3 + 0x978) = x0_7;
        operator delete(x0_7);
    }
    void* x0_8 = *arg2;
    if (x0_8 != 0)
    {
        *(arg3 + 0x960) = x0_8;
        operator delete(x0_8);
    }
    int64_t x8_5 = *(arg3 + 0x928);
    if (x8_5 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_5 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_5 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_7 = *(arg3 + 0x8f4);
    *(arg3 + 0x928) = 0;
    __builtin_memset((arg3 + 0x900), 0, 0x20);
    if (x8_7 >= 1)
    {
        int64_t x8_8 = *(arg3 + 0x930);
        int64_t i_3 = 0;
        do
        {
            *(x8_8 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *arg7);
    }
    void* x0_10 = *(arg3 + 0x938);
    if (x0_10 != arg8)
    {
        cv::fastFree(x0_10);
    }
    int64_t x8_9 = *(arg3 + 0x8c8);
    if (x8_9 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((x8_9 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (x8_9 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_11 = *(arg3 + 0x894);
    *(arg3 + 0x8c8) = 0;
    __builtin_memset((arg3 + 0x8a0), 0, 0x20);
    if (x8_11 >= 1)
    {
        int64_t x8_12 = *(arg3 + 0x8d0);
        int64_t i_5 = 0;
        do
        {
            *(x8_12 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < *arg29);
    }
    void* x0_12 = *(arg3 + 0x8d8);
    if (x0_12 != arg11)
    {
        cv::fastFree(x0_12);
    }
    int64_t x8_14 = *(arg3 + 0x860);
    if (x8_14 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((x8_14 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (x8_14 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x860) = 0;
    __builtin_memset((arg3 + 0x838), 0, 0x20);
    if (*(arg3 + 0x82c) >= 1)
    {
        int64_t x8_18 = *(arg3 + 0x868);
        int64_t i_7 = 0;
        do
        {
            *(x8_18 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < *arg30);
    }
    void* x0_14 = *(arg3 + 0x870);
    if (x0_14 != arg12)
    {
        cv::fastFree(x0_14);
    }
    int64_t x8_20 = *(arg3 + 0x800);
    if (x8_20 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((x8_20 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (x8_20 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x800) = 0;
    __builtin_memset((arg3 + 0x7d8), 0, 0x20);
    if (*(arg3 + 0x7cc) >= 1)
    {
        int64_t x8_24 = *(arg3 + 0x808);
        int64_t i_9 = 0;
        do
        {
            *(x8_24 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < *arg31);
    }
    void* x0_16 = *(arg3 + 0x810);
    if (x0_16 != arg13)
    {
        cv::fastFree(x0_16);
    }
    int64_t x8_26 = *(arg3 + 0x7a0);
    if (x8_26 != 0)
    {
        int32_t temp0_7;
        int32_t i_10;
        do
        {
            temp0_7 = __ldaxr((x8_26 + 0x14));
            i_10 = __stlxr((temp0_7 - 1), (x8_26 + 0x14));
        } while (i_10 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x7a0) = 0;
    __builtin_memset((arg3 + 0x778), 0, 0x20);
    if (*(arg3 + 0x76c) >= 1)
    {
        int64_t x8_30 = *(arg3 + 0x7a8);
        int64_t i_11 = 0;
        do
        {
            *(x8_30 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < *arg32);
    }
    void* x0_18 = *(arg3 + 0x7b0);
    if (x0_18 != arg14)
    {
        cv::fastFree(x0_18);
    }
    void* x0_19 = *(arg3 + 0x750);
    if (x0_19 != 0)
    {
        *(arg3 + 0x758) = x0_19;
        operator delete(x0_19);
    }
    void* x0_20 = *arg15;
    if (x0_20 != 0)
    {
        *(arg3 + 0x740) = x0_20;
        operator delete(x0_20);
    }
    void* x0_21 = *arg16;
    if (x0_21 != 0)
    {
        *(arg3 + 0x670) = x0_21;
        operator delete(x0_21);
    }
    int64_t x8_34 = *(arg3 + 0x640);
    if (x8_34 != 0)
    {
        int32_t temp0_8;
        int32_t i_12;
        do
        {
            temp0_8 = __ldaxr((x8_34 + 0x14));
            i_12 = __stlxr((temp0_8 - 1), (x8_34 + 0x14));
        } while (i_12 != 0);
        if (temp0_8 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x640) = 0;
    __builtin_memset((arg3 + 0x618), 0, 0x20);
    if (*(arg3 + 0x60c) >= 1)
    {
        int64_t x8_38 = *(arg3 + 0x648);
        int64_t i_13 = 0;
        int32_t* x10_18;
        do
        {
            x10_18 = *(arg10 - 0xa8);
            *(x8_38 + (i_13 << 2)) = 0;
            i_13 = (i_13 + 1);
        } while (i_13 < *x10_18);
    }
    void* x0_23 = *(arg3 + 0x650);
    if (x0_23 != arg17)
    {
        cv::fastFree(x0_23);
    }
    int64_t x8_40 = *(arg3 + 0x5e0);
    if (x8_40 != 0)
    {
        int32_t temp0_9;
        int32_t i_14;
        do
        {
            temp0_9 = __ldaxr((x8_40 + 0x14));
            i_14 = __stlxr((temp0_9 - 1), (x8_40 + 0x14));
        } while (i_14 != 0);
        if (temp0_9 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x5e0) = 0;
    __builtin_memset((arg3 + 0x5b8), 0, 0x20);
    if (*(arg3 + 0x5ac) >= 1)
    {
        int64_t x8_44 = *(arg3 + 0x5e8);
        int64_t i_15 = 0;
        int32_t* x10_21;
        do
        {
            x10_21 = *(arg10 - 0xa0);
            *(x8_44 + (i_15 << 2)) = 0;
            i_15 = (i_15 + 1);
        } while (i_15 < *x10_21);
    }
    void* x0_25 = *(arg3 + 0x5f0);
    if (x0_25 != arg18)
    {
        cv::fastFree(x0_25);
    }
    int64_t x8_46 = *(arg3 + 0x580);
    if (x8_46 != 0)
    {
        int32_t temp0_10;
        int32_t i_16;
        do
        {
            temp0_10 = __ldaxr((x8_46 + 0x14));
            i_16 = __stlxr((temp0_10 - 1), (x8_46 + 0x14));
        } while (i_16 != 0);
        if (temp0_10 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x580) = 0;
    __builtin_memset((arg3 + 0x558), 0, 0x20);
    if (*(arg3 + 0x54c) >= 1)
    {
        int64_t x8_50 = *(arg3 + 0x588);
        int64_t i_17 = 0;
        int32_t* x10_24;
        do
        {
            x10_24 = *(arg10 - 0x98);
            *(x8_50 + (i_17 << 2)) = 0;
            i_17 = (i_17 + 1);
        } while (i_17 < *x10_24);
    }
    void* x0_27 = *(arg3 + 0x590);
    if (x0_27 != arg19)
    {
        cv::fastFree(x0_27);
    }
    int64_t x8_52 = *(arg3 + 0x520);
    if (x8_52 != 0)
    {
        int32_t temp0_11;
        int32_t i_18;
        do
        {
            temp0_11 = __ldaxr((x8_52 + 0x14));
            i_18 = __stlxr((temp0_11 - 1), (x8_52 + 0x14));
        } while (i_18 != 0);
        if (temp0_11 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x520) = 0;
    __builtin_memset((arg3 + 0x4f8), 0, 0x20);
    if (*(arg3 + 0x4ec) >= 1)
    {
        int64_t x8_56 = *(arg3 + 0x528);
        int64_t i_19 = 0;
        int32_t* x10_27;
        do
        {
            x10_27 = *(arg10 - 0x90);
            *(x8_56 + (i_19 << 2)) = 0;
            i_19 = (i_19 + 1);
        } while (i_19 < *x10_27);
    }
    void* x0_29 = *(arg3 + 0x530);
    if (x0_29 != arg20)
    {
        cv::fastFree(x0_29);
    }
    int64_t x8_58 = *(arg3 + 0x4c0);
    if (x8_58 != 0)
    {
        int32_t temp0_12;
        int32_t i_20;
        do
        {
            temp0_12 = __ldaxr((x8_58 + 0x14));
            i_20 = __stlxr((temp0_12 - 1), (x8_58 + 0x14));
        } while (i_20 != 0);
        if (temp0_12 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x4c0) = 0;
    __builtin_memset((arg3 + 0x498), 0, 0x20);
    if (*(arg3 + 0x48c) >= 1)
    {
        int64_t x8_62 = *(arg3 + 0x4c8);
        int64_t i_21 = 0;
        int32_t* x10_30;
        do
        {
            x10_30 = *(arg10 - 0x88);
            *(x8_62 + (i_21 << 2)) = 0;
            i_21 = (i_21 + 1);
        } while (i_21 < *x10_30);
    }
    void* x0_31 = *(arg3 + 0x4d0);
    if (x0_31 != arg21)
    {
        cv::fastFree(x0_31);
    }
    int64_t x8_64 = *(arg3 + 0x460);
    if (x8_64 != 0)
    {
        int32_t temp0_13;
        int32_t i_22;
        do
        {
            temp0_13 = __ldaxr((x8_64 + 0x14));
            i_22 = __stlxr((temp0_13 - 1), (x8_64 + 0x14));
        } while (i_22 != 0);
        if (temp0_13 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x460) = 0;
    __builtin_memset((arg3 + 0x438), 0, 0x20);
    if (*(arg3 + 0x42c) >= 1)
    {
        int64_t x8_68 = *(arg3 + 0x468);
        int64_t i_23 = 0;
        int32_t* x10_33;
        do
        {
            x10_33 = *(arg10 - 0x60);
            *(x8_68 + (i_23 << 2)) = 0;
            i_23 = (i_23 + 1);
        } while (i_23 < *x10_33);
    }
    void* x0_33 = *(arg3 + 0x470);
    if (x0_33 != arg22)
    {
        cv::fastFree(x0_33);
    }
    int64_t x8_70 = *(arg3 + 0x400);
    if (x8_70 != 0)
    {
        int32_t temp0_14;
        int32_t i_24;
        do
        {
            temp0_14 = __ldaxr((x8_70 + 0x14));
            i_24 = __stlxr((temp0_14 - 1), (x8_70 + 0x14));
        } while (i_24 != 0);
        if (temp0_14 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x400) = 0;
    __builtin_memset((arg3 + 0x3d8), 0, 0x20);
    if (*(arg3 + 0x3cc) >= 1)
    {
        int64_t x8_74 = *(arg3 + 0x408);
        int64_t i_25 = 0;
        int32_t* x10_36;
        do
        {
            x10_36 = *(arg10 - 0x80);
            *(x8_74 + (i_25 << 2)) = 0;
            i_25 = (i_25 + 1);
        } while (i_25 < *x10_36);
    }
    void* x0_35 = *(arg3 + 0x410);
    if (x0_35 != arg23)
    {
        cv::fastFree(x0_35);
    }
    int64_t x8_76 = *(arg3 + 0x3a0);
    if (x8_76 != 0)
    {
        int32_t temp0_15;
        int32_t i_26;
        do
        {
            temp0_15 = __ldaxr((x8_76 + 0x14));
            i_26 = __stlxr((temp0_15 - 1), (x8_76 + 0x14));
        } while (i_26 != 0);
        if (temp0_15 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x3a0) = 0;
    __builtin_memset((arg3 + 0x378), 0, 0x20);
    if (*(arg3 + 0x36c) >= 1)
    {
        int64_t x8_80 = *(arg3 + 0x3a8);
        int64_t i_27 = 0;
        int32_t* x10_39;
        do
        {
            x10_39 = *(arg10 - 0x78);
            *(x8_80 + (i_27 << 2)) = 0;
            i_27 = (i_27 + 1);
        } while (i_27 < *x10_39);
    }
    void* x0_37 = *(arg3 + 0x3b0);
    if (x0_37 != arg24)
    {
        cv::fastFree(x0_37);
    }
    int64_t x8_82 = *(arg3 + 0x340);
    if (x8_82 != 0)
    {
        int32_t temp0_16;
        int32_t i_28;
        do
        {
            temp0_16 = __ldaxr((x8_82 + 0x14));
            i_28 = __stlxr((temp0_16 - 1), (x8_82 + 0x14));
        } while (i_28 != 0);
        if (temp0_16 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x340) = 0;
    __builtin_memset((arg3 + 0x318), 0, 0x20);
    if (*(arg3 + 0x30c) >= 1)
    {
        int64_t x8_86 = *(arg3 + 0x348);
        int64_t i_29 = 0;
        int32_t* x10_42;
        do
        {
            x10_42 = *(arg10 - 0x70);
            *(x8_86 + (i_29 << 2)) = 0;
            i_29 = (i_29 + 1);
        } while (i_29 < *x10_42);
    }
    void* x0_39 = *(arg3 + 0x350);
    if (x0_39 != arg25)
    {
        cv::fastFree(x0_39);
    }
    int64_t x8_88 = *(arg3 + 0x2e0);
    if (x8_88 != 0)
    {
        int32_t temp0_17;
        int32_t i_30;
        do
        {
            temp0_17 = __ldaxr((x8_88 + 0x14));
            i_30 = __stlxr((temp0_17 - 1), (x8_88 + 0x14));
        } while (i_30 != 0);
        if (temp0_17 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x2e0) = 0;
    __builtin_memset((arg3 + 0x2b8), 0, 0x20);
    if (*(arg3 + 0x2ac) >= 1)
    {
        int64_t x8_92 = *(arg3 + 0x2e8);
        int64_t i_31 = 0;
        int32_t* x10_45;
        do
        {
            x10_45 = *(arg10 - 0x68);
            *(x8_92 + (i_31 << 2)) = 0;
            i_31 = (i_31 + 1);
        } while (i_31 < *x10_45);
    }
    void* x0_41 = *(arg3 + 0x2f0);
    if (x0_41 != arg26)
    {
        cv::fastFree(x0_41);
    }
    int64_t x8_94 = *(arg3 + 0x280);
    if (x8_94 != 0)
    {
        int32_t temp0_18;
        int32_t i_32;
        do
        {
            temp0_18 = __ldaxr((x8_94 + 0x14));
            i_32 = __stlxr((temp0_18 - 1), (x8_94 + 0x14));
        } while (i_32 != 0);
        if (temp0_18 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 + 0x280) = 0;
    __builtin_memset((arg3 + 0x258), 0, 0x20);
    if (*(arg3 + 0x24c) >= 1)
    {
        int64_t x8_98 = *(arg3 + 0x288);
        int64_t i_33 = 0;
        do
        {
            *(x8_98 + (i_33 << 2)) = 0;
            i_33 = (i_33 + 1);
        } while (i_33 < *arg4);
    }
    void* x0_43 = *(arg3 + 0x290);
    if (x0_43 != arg27)
    {
        cv::fastFree(x0_43);
    }
    free(*(arg3 + 0x230));
    free(*(arg3 + 0x218));
    void* x22 = *(arg3 + 0x200);
    *(arg3 + 0x200) = 0;
    if (x22 != 0)
    {
        CAPE::~CAPE();
        operator delete(x22);
    }
    feasibal_region::PreParamInfo::~PreParamInfo();
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

int64_t feasibal_region::PreParamInfo::PreParamInfo(char* arg1)
{
    *(arg1 + 0x110) = 0x42ff0000;
    __builtin_memset(&arg1[0x114], 0, 0x3c);
    *(arg1 + 0x170) = 0x42ff0000;
    *(arg1 + 0x150) = &arg1[0x118];
    *(arg1 + 0x158) = &arg1[0x160];
    *(arg1 + 0x160) = 0;
    *(arg1 + 0x168) = 0;
    __builtin_memset(&arg1[0x174], 0, 0x3c);
    *(arg1 + 0x1b0) = &arg1[0x178];
    *(arg1 + 0x1b8) = &arg1[0x1c0];
    __builtin_memset(&arg1[0x1c0], 0, 0x2a);
    __builtin_memcpy(&arg1[8], "\x00\x00\xfa\x44\x00\x00\xfa\x44\x00\x00\x48\x43\x00\x00\x70\x41\x00\xc0\x77\x44", 0x14);
    *(arg1 + 0x78) = 0x4248000042480000;
    *arg1 = 1;
    *(arg1 + 0x30) = 0x441ec000;
    *(arg1 + 0x50) = 0x3f800000;
    *(arg1 + 0x3c) = 0x441ec00000000000;
    *(arg1 + 0x80) = 0x41f00000;
    *(arg1 + 0x48) = 0x4370000043a00000;
    *(arg1 + 0x38) = 0;
    *(arg1 + 0x44) = 0;
    *(arg1 + 0x104) = 0x14000000014;
    *(arg1 + 0x10c) = 0x280;
    arg1[0x2c] = 0;
    *(arg1 + 0x28) = 0x3f59999a;
    *(arg1 + 0x1ec) = 0;
    int64_t x0_1 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&arg1[0x1d0], "./mask.png");
    *(arg1 + 4) = 0;
    return x0_1;
}

void sub_2931c(int64_t arg1, void* arg2 @ x19, char* arg3 @ x21, int32_t* arg4 @ x23, int64_t arg5 @ x24, int32_t* arg6 @ x25, int64_t arg7 @ x26) __noreturn
{
    if ((*arg3 & 1) != 0)
    {
        operator delete(*(arg2 + 0x1e0));
    }
    int64_t x8 = *(arg2 + 0x1a8);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg2 + 0x174);
    *(arg2 + 0x1a8) = 0;
    __builtin_memset((arg2 + 0x180), 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = *(arg2 + 0x1b0);
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *arg6);
    }
    void* x0_1 = *(arg2 + 0x1b8);
    if (x0_1 != arg7)
    {
        cv::fastFree(x0_1);
    }
    int64_t x8_4 = *(arg2 + 0x148);
    if (x8_4 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_4 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_4 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_6 = *(arg2 + 0x114);
    *(arg2 + 0x148) = 0;
    __builtin_memset((arg2 + 0x120), 0, 0x20);
    if (x8_6 >= 1)
    {
        int64_t x8_7 = *(arg2 + 0x150);
        int64_t i_3 = 0;
        do
        {
            *(x8_7 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *arg4);
    }
    void* x0_2 = *(arg2 + 0x158);
    if (x0_2 != arg5)
    {
        cv::fastFree(x0_2);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

int64_t std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> >::~basic_ofstream(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x16] = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

void* feasibal_region::PreParamInfo::~PreParamInfo(void* arg1)
{
    if ((*(arg1 + 0x1d0) & 1) != 0)
    {
        operator delete(*(arg1 + 0x1e0));
    }
    int64_t x8_1 = *(arg1 + 0x1a8);
    if (x8_1 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_3 = *(arg1 + 0x174);
    *(arg1 + 0x1a8) = 0;
    __builtin_memset((arg1 + 0x180), 0, 0x20);
    if (x8_3 >= 1)
    {
        int64_t x8_4 = *(arg1 + 0x1b0);
        int64_t i_1 = 0;
        do
        {
            *(x8_4 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0x174));
    }
    void* x0_2 = *(arg1 + 0x1b8);
    if (x0_2 != (arg1 + 0x1c0))
    {
        cv::fastFree(x0_2);
    }
    int64_t x8_6 = *(arg1 + 0x148);
    if (x8_6 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_6 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_6 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_8 = *(arg1 + 0x114);
    *(arg1 + 0x148) = 0;
    __builtin_memset((arg1 + 0x120), 0, 0x20);
    if (x8_8 >= 1)
    {
        int64_t x8_9 = *(arg1 + 0x150);
        int64_t i_3 = 0;
        do
        {
            *(x8_9 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *(arg1 + 0x114));
    }
    void* x0_4 = *(arg1 + 0x158);
    if (x0_4 != (arg1 + 0x160))
    {
        x0_4 = cv::fastFree(x0_4);
    }
    return x0_4;
}

void sub_29560(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t feasibal_region::ground_process::init(int32_t* arg1, void* arg2)
{
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    int128_t v0;
    int128_t v1;
    int128_t v2;
    v0 = feasibal_region::PreParamInfo::operator=(&arg1[4]);
    int32_t x9 = arg1[0x10];
    int32_t x10 = arg1[0x14];
    int64_t x11 = *(arg1 + 0x58);
    arg1[0x274] = *(arg2 + 0x10);
    v0 = *(arg1 + 0x94);
    v1 = *(arg1 + 0xa4);
    int32_t x12 = arg1[0x2d];
    arg1[0x278] = *(arg2 + 0x1e8);
    char x8_4 = *(arg2 + 0x1e9);
    v2 = *(arg1 + 0xb8);
    *arg1 = x9;
    arg1[1] = x10;
    *(arg1 + 8) = x11;
    *(arg1 + 0x6c0) = v0;
    *(arg1 + 0x6d0) = v1;
    arg1[0x1b8] = x12;
    *(arg1 + 0x9e1) = x8_4;
    *(arg1 + 0x6e4) = v2;
    int32_t x9_2 = arg1[0x33];
    int32_t x10_1 = arg1[0x34];
    v0 = 0xbf800000;
    arg1[0x1bd] = arg1[0x32];
    arg1[0x1be] = x9_2;
    arg1[0x1bf] = x10_1;
    int32_t x23 = *(arg2 + 0x108);
    arg1[0x82] = x23;
    int32_t x24 = *(arg2 + 0x10c);
    arg1[0x83] = x24;
    int32_t x25 = *(arg2 + 0x104);
    arg1[0x84] = x25;
    v1 = *(arg2 + 0x14);
    int64_t v8;
    v8 = *(arg2 + 0x80);
    v0 = (v1 + -1f);
    v0 = v0;
    v0 = (v0 * 3.1415926535897931);
    v0 = (v0 / 180.0);
    int64_t v9;
    v9 = cos(v0);
    int64_t x0_1 = operator new(0x628);
    *(arg2 + 0x1f1);
    CAPE::CAPE(x0_1, x23, x24, x25, x25, v9, *(arg2 + 0x1f4), v8);
    void* x23_1 = *(arg1 + 0x200);
    *(arg1 + 0x200) = x0_1;
    if (x23_1 != 0)
    {
        CAPE::~CAPE();
        operator delete(x23_1);
    }
    int128_t v0_3;
    int128_t v1_2;
    int128_t v2_2;
    int128_t v3;
    v0_3 = cv::imread(&arg1[0x78], 1);
    int64_t var_e0;
    void* s_8 = &var_e0;
    float s_6;
    int32_t var_400;
    int32_t var_2c0;
    int128_t* var_2b8;
    void* var_2b0;
    int128_t var_f0;
    int32_t var_ec;
    void* var_b0;
    char* x23_2;
    void* x24_1;
    int128_t v0_4;
    int128_t v1_3;
    if (var_e0 != 0)
    {
        uint64_t x8_7 = var_ec;
        int64_t x11_1;
        int32_t var_e8;
        int32_t var_e4;
        if (x8_7 < 3)
        {
            x11_1 = (var_e4 * var_e8);
        }
        else
        {
            int64_t i_11;
            if (x8_7 != 3)
            {
                i_11 = (x8_7 & 0xfffffffc);
                v1_2 = 1;
                *v1_2[8] = 1;
                void* x11_3 = (var_b0 + 8);
                int64_t i_9 = i_11;
                v0_3 = v1_2;
                int64_t i;
                do
                {
                    v2_2 = *(x11_3 - 8);
                    v3 = *x11_3;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x0_9 = v1_2;
                    int64_t x16_2 = (v0_3 * v1_2);
                    int64_t x13_2 = (v1_2 * v0_3);
                    v1_2 = (v1_2 * v0_3);
                    int64_t x14_3 = (v0_3 * x0_9);
                    v0_3 = x16_2;
                    i = i_9;
                    i_9 = (i_9 - 4);
                    *v1_2[8] = x13_2;
                    *v0_3[8] = x14_3;
                    x11_3 = (x11_3 + 0x10);
                } while (i != 4);
                x11_1 = ((v0_3 * v1_2) * (v0_3 * v1_2));
            }
            else
            {
                i_11 = 0;
                x11_1 = 1;
            }
            if ((x8_7 == 3 || (x8_7 != 3 && i_11 != x8_7)))
            {
                int64_t i_10 = (x8_7 - i_11);
                int32_t* x9_6 = (var_b0 + (i_11 << 2));
                int64_t i_1;
                do
                {
                    int64_t x10_4 = *x9_6;
                    x9_6 = &x9_6[1];
                    i_1 = i_10;
                    i_10 = (i_10 - 1);
                    x11_1 = (x11_1 * x10_4);
                } while (i_1 != 1);
            }
        }
        if ((((x8_7 < 3 && x8_7 != 0) || (x8_7 >= 3 && x8_7 != 0)) && x11_1 != 0))
        {
            v0_3 = 0xf000000140;
            var_2c0 = 0x1010000;
            var_2b0 = nullptr;
            var_400 = &var_f0;
            int64_t var_3f8_1 = 0;
            var_2b8 = &var_f0;
            s_6 = 9.4774232e-38f;
            int64_t var_418 = 0xf000000140;
            v0_3 = 0.0;
            v1_2 = 0.0;
            cv::resize(&var_2c0, &s_6, &var_418, 1, v0_3, v1_2);
            if ((*data_6fdf0 & 1) == 0)
            {
                x23_2 = &*(data_6fdf0 + 1);
            }
            else
            {
                x23_2 = *(data_6fdfa + 6);
            }
            int32_t var_438 = data_6fde8;
            int64_t s_5;
            __builtin_memset(&s_5, 0, 0x18);
            size_t x0_7 = strlen(x23_2);
            if (x0_7 < -0x10)
            {
                goto label_2a5cc;
            }
            void* var_420_1;
            if (x0_7 >= 0x17)
            {
                uint64_t x25_2 = ((x0_7 + 0x10) & 0xfffffffffffffff0);
                void* x0_23 = operator new(x25_2);
                x24_1 = x0_23;
                size_t var_428_1 = x0_7;
                var_420_1 = x0_23;
                s_5 = (x25_2 | 1);
            }
            else
            {
                x24_1 = &*s_5[1];
                s_5 = (x0_7 << 1);
            }
            if ((x0_7 >= 0x17 || (x0_7 < 0x17 && x0_7 != 0)))
            {
                memcpy(x24_1, x23_2, x0_7);
            }
            *(x24_1 + x0_7) = 0;
            int32_t x0_26;
            x0_26 = g3::logLevel(&var_438);
            int32_t x22_5;
            if ((x0_26 & 1) == 0)
            {
                x22_5 = 0;
                if ((s_5 & 1) != 0)
                {
                label_29a4c:
                    v0_4 = operator delete(var_420_1);
                    if ((x22_5 & 1) == 0)
                    {
                        goto label_29a94;
                    }
                    goto label_29a78;
                }
            }
            else
            {
                char var_450 = 0xc;
                int32_t var_44f;
                __builtin_strncpy(&var_44f, "region", 0x17);
                int32_t x0_28;
                x0_28 = g3::logTag(&var_450);
                x22_5 = x0_28;
                if ((var_450 & 1) != 0)
                {
                    void* var_440;
                    v0_4 = operator delete(var_440);
                    if ((s_5 & 1) != 0)
                    {
                        goto label_29a4c;
                    }
                }
                else if ((s_5 & 1) != 0)
                {
                    goto label_29a4c;
                }
            }
            if ((x22_5 & 1) == 0)
            {
                goto label_29a94;
            }
        label_29a78:
            LogCapture::LogCapture(&var_2c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
            goto label_29a90;
        }
    }
    if ((*data_6fdf0 & 1) != 0)
    {
        x23_2 = *(data_6fdfa + 6);
        goto label_2988c;
    }
    x23_2 = &*(data_6fdf0 + 1);
label_2988c:
    int32_t var_470 = data_6fde8;
    int64_t s_4;
    __builtin_memset(&s_4, 0, 0x18);
    size_t x0_11 = strlen(x23_2);
    int64_t var_b8;
    int64_t* var_a8;
    void var_a0;
    if (x0_11 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_2a5bc:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_2a5c4:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_2a5cc:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_2a5d4:
        int64_t x0_109 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
        if (var_b8 != 0)
        {
            int32_t temp0_6;
            int32_t i_2;
            do
            {
                temp0_6 = __ldaxr((var_b8 + 0x14));
                i_2 = __stlxr((temp0_6 - 1), (var_b8 + 0x14));
            } while (i_2 != 0);
            if (temp0_6 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int64_t var_b8_2 = 0;
        __builtin_memset(s_8, 0, 0x20);
        if (var_ec >= 1)
        {
            int64_t i_3 = 0;
            do
            {
                *(var_b0 + (i_3 << 2)) = 0;
                i_3 = (i_3 + 1);
            } while (i_3 < var_ec);
        }
        if (var_a8 != &var_a0)
        {
            cv::fastFree(var_a8);
        }
        sub_20ac4(_Unwind_Resume(x0_109));
        /* no return */
    }
    void* var_458_1;
    if (x0_11 >= 0x17)
    {
        uint64_t x25_1 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
        void* x0_13 = operator new(x25_1);
        x24_1 = x0_13;
        size_t var_460_1 = x0_11;
        var_458_1 = x0_13;
        s_4 = (x25_1 | 1);
    }
    else
    {
        x24_1 = &*s_4[1];
        s_4 = (x0_11 << 1);
    }
    if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
    {
        memcpy(x24_1, x23_2, x0_11);
    }
    *(x24_1 + x0_11) = 0;
    int32_t x0_16;
    x0_16 = g3::logLevel(&var_470);
    int32_t x22_4;
    if ((x0_16 & 1) == 0)
    {
        x22_4 = 0;
        if ((s_4 & 1) != 0)
        {
        label_2995c:
            v0_4 = operator delete(var_458_1);
            if ((x22_4 & 1) != 0)
            {
                goto label_29988;
            }
            goto label_29a94;
        }
    }
    else
    {
        char var_488 = 0xc;
        int32_t var_487;
        __builtin_strncpy(&var_487, "region", 0x17);
        int32_t x0_18;
        x0_18 = g3::logTag(&var_488);
        x22_4 = x0_18;
        if ((var_488 & 1) != 0)
        {
            void* var_478;
            v0_4 = operator delete(var_478);
            if ((s_4 & 1) != 0)
            {
                goto label_2995c;
            }
        }
        else if ((s_4 & 1) != 0)
        {
            goto label_2995c;
        }
    }
    if ((x22_4 & 1) == 0)
    {
        goto label_29a94;
    }
label_29988:
    LogCapture::LogCapture(&var_2c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
    LogCapture::capturef();
label_29a90:
    v0_4 = LogCapture::~LogCapture();
label_29a94:
    v0_4 = var_f0;
    int128_t s_7 = var_e0;
    int64_t var_c0;
    int64_t var_120_1 = var_c0;
    int128_t var_150 = v0_4;
    int128_t var_d0;
    int128_t var_130_1 = var_d0;
    int64_t var_100;
    int64_t* var_108_1 = &var_100;
    int64_t var_f8_1 = 0;
    var_100 = 0;
    if (var_b8 != 0)
    {
        int32_t i_4;
        do
        {
            i_4 = __stlxr((__ldaxr((var_b8 + 0x14)) + 1), (var_b8 + 0x14));
        } while (i_4 != 0);
    }
    if (((var_b8 == 0 && v0_4 <= 2) || (var_b8 != 0 && var_ec <= 2)))
    {
        *var_108_1 = *var_a8;
        var_108_1[1] = var_a8[1];
    }
    if (((var_b8 == 0 && v0_4 > 2) || (var_b8 != 0 && var_ec > 2)))
    {
        *var_150[4] = 0;
        cv::Mat::copySize(&var_150);
    }
    int64_t v1_4;
    int64_t v3_1;
    int64_t v4_1;
    int64_t v5_1;
    v1_4 = feasibal_region::ground_process::init_data_pre(arg1);
    if (var_b8 != 0)
    {
        int32_t temp0_2;
        int32_t i_5;
        do
        {
            temp0_2 = __ldaxr((var_b8 + 0x14));
            i_5 = __stlxr((temp0_2 - 1), (var_b8 + 0x14));
        } while (i_5 != 0);
        if (temp0_2 == 1)
        {
            v1_4 = cv::Mat::deallocate();
        }
    }
    int64_t var_118_2 = 0;
    __builtin_memset(&s_7, 0, 0x20);
    if (*var_150[4] >= 1)
    {
        int64_t i_6 = 0;
        do
        {
            *((&var_150 | 8) + (i_6 << 2)) = 0;
            i_6 = (i_6 + 1);
        } while (i_6 < *var_150[4]);
    }
    int64_t v0_5;
    if (var_108_1 != &var_100)
    {
        v0_5 = cv::fastFree(var_108_1);
    }
    uint32_t x8_33;
    if (arg1[4] == 0)
    {
        v8 = *(arg2 + 0x18);
        x23_2 = *(arg2 + 0x1c);
        int32_t x22_6 = *(arg2 + 0x20);
        int32_t x21_1 = *(arg2 + 0x24);
        int64_t x0_34 = *(arg1 + 0x200);
        arg1[0x222] = v8;
        int32_t var_160_1 = x23_2;
        int32_t var_15c_1 = x22_6;
        int32_t var_158_1 = x21_1;
        CAPE::updateDefaultPlane(x0_34, v8);
        var_2c0 = x23_2;
        int32_t var_2bc_1 = x22_6;
        var_2b8 = x21_1;
        *var_2b8[4] = v8;
        feasibal_region::ground_process::getExtrinsicFromPlane(arg1);
        x8_33 = arg1[4];
    }
    else
    {
        int32_t x13_5 = arg1[0x1b1];
        int32_t x12_2 = arg1[0x1b0];
        int32_t x9_15 = arg1[0x1b5];
        float x14_5 = arg1[0x1b9];
        int32_t x8_32 = arg1[0x1b4];
        float x11_7 = arg1[0x1b8];
        int32_t x15_2 = arg1[0x1b2];
        v1_4 = arg1[0x1bd];
        int32_t x10_10 = arg1[0x1b6];
        arg1[0x1af] = 0x3f800000;
        float x16_3 = arg1[0x1ba];
        v0_5 = arg1[0x1bc];
        v4_1 = x13_5;
        v3_1 = x12_2;
        *v4_1[4] = x9_15;
        v5_1 = x15_2;
        /* unimplemented  {fnmul s7, s1, s7} */;
        *v3_1[4] = x8_32;
        v1_4 = (v4_1 * v1_4);
        *v1_4[4] = (*v4_1[4] * v1_4);
        int32_t v6_1 = (v0_5 * x11_7);
        *v5_1[4] = x10_10;
        v0_5 = (v3_1 * v0_5);
        *v0_5[4] = (*v3_1[4] * v0_5);
        /* unimplemented  {fneg v1.2s, v1.2s} */;
        int32_t v16_1 = (arg1[0x1be] * x16_3);
        (v0_5 - v1_4);
        (*v0_5[4] - *v1_4[4]);
        arg1[0x1a1] = x8_32;
        v3_1 = ((x14_5 - v6_1) - v16_1);
        (v0_5 - v0_5);
        (*v0_5[4] - *v0_5[4]);
        x8_33 = 1;
        arg1[0x1a3] = 0;
        arg1[0x1a7] = 0;
        arg1[0x1ab] = 0;
        arg1[0x1a0] = x12_2;
        arg1[0x1a4] = x13_5;
        arg1[0x1a8] = x15_2;
        arg1[0x1a2] = x11_7;
        arg1[0x1a6] = x14_5;
        arg1[0x1aa] = x16_3;
        arg1[0x1a5] = x9_15;
        arg1[0x1a9] = x10_10;
        arg1[0x1ae] = v3_1;
        *(arg1 + 0x6b0) = v0_5;
    }
    int32_t x9_16 = arg1[6];
    v0_5 = arg1[7];
    arg1[0x1c9] = 0;
    arg1[0x1ca] = x9_16;
    v0_5 = (-0.5f * v0_5);
    *v0_5[4] = (0.5f * v0_5);
    *(arg1 + 0x72c) = v0_5;
    int32_t var_520;
    int32_t x0_38;
    size_t x0_55;
    if (x8_33 != 0)
    {
        arg1[4] = 0;
        if (arg1[0xf] == 0)
        {
            arg1[0x1c0] = 1;
        }
        feasibal_region::ground_process::getPlaneFromExtrinsic(arg1, &s_6, &var_520);
        int128_t v0_7 = *(arg1 + 0x724);
        int128_t var_4a0_1 = v0_7;
        x0_38 = feasibal_region::ground_process::set_calib(arg1, v0_7);
        if (x0_38 == 0)
        {
            v8 = var_520;
            int64_t var_170_1 = s_6;
            int32_t var_168_1 = var_400;
            CAPE::updateDefaultPlane(*(arg1 + 0x200), v8);
            arg1[0x222] = v8;
            char* x22_8;
            if ((*data_6fdf0 & 1) == 0)
            {
                x22_8 = &*(data_6fdf0 + 1);
            }
            else
            {
                x22_8 = *(data_6fdfa + 6);
            }
            int32_t var_4c0 = data_6fde8;
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            x0_55 = strlen(x22_8);
            if (x0_55 < -0x10)
            {
                goto label_2a5d4;
            }
            char* var_4a8_1;
            if (x0_55 >= 0x17)
            {
                x24_1 = ((x0_55 + 0x10) & 0xfffffffffffffff0);
                char* x0_67 = operator new(x24_1);
                x23_2 = x0_67;
                size_t var_4b0_1 = x0_55;
                var_4a8_1 = x0_67;
                s_3 = (x24_1 | 1);
            }
            else
            {
                x23_2 = &*s_3[1];
                s_3 = (x0_55 << 1);
            }
            if ((x0_55 >= 0x17 || (x0_55 < 0x17 && x0_55 != 0)))
            {
                memcpy(x23_2, x22_8, x0_55);
            }
            x23_2[x0_55] = 0;
            int32_t x0_70 = g3::logLevel(&var_4c0);
            int32_t x21_5;
            if ((x0_70 & 1) == 0)
            {
                x21_5 = 0;
                if ((s_3 & 1) != 0)
                {
                label_2a18c:
                    operator delete(var_4a8_1);
                    if ((x21_5 & 1) != 0)
                    {
                        goto label_2a1b8;
                    }
                }
            }
            else
            {
                char var_4d8 = 0xc;
                int32_t var_4d7;
                __builtin_strncpy(&var_4d7, "region", 0x17);
                x21_5 = g3::logTag(&var_4d8);
                if ((var_4d8 & 1) != 0)
                {
                    void* var_4c8;
                    operator delete(var_4c8);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_2a18c;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_2a18c;
                }
            }
            if (((((x0_70 & 1) == 0 && (s_3 & 1) == 0) || (x0_70 & 1) != 0) && (x21_5 & 1) != 0))
            {
            label_2a1b8:
                LogCapture::LogCapture(&var_2c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
            arg1[4] = 1;
        }
    }
    char* x21_3;
    if (((((x8_33 == 0 || (x8_33 != 0 && x0_38 != 0)) && *(arg1 + 0x9e1) != 0) || (((x8_33 != 0 && x0_38 == 0) && x0_55 >= -0x10) && *(arg1 + 0x9e1) != 0)) && (*data_6fdf0 & 1) == 0))
    {
        x21_3 = &*(data_6fdf0 + 1);
    label_29d64:
        int32_t var_4f8 = data_6fde8;
        int64_t s_2;
        __builtin_memset(&s_2, 0, 0x18);
        size_t x0_40 = strlen(x21_3);
        if (x0_40 < -0x10)
        {
            goto label_2a5bc;
        }
        void* var_4e0_1;
        void* x22_7;
        if (x0_40 >= 0x17)
        {
            uint64_t x23_3 = ((x0_40 + 0x10) & 0xfffffffffffffff0);
            void* x0_42 = operator new(x23_3);
            x22_7 = x0_42;
            size_t var_4e8_1 = x0_40;
            var_4e0_1 = x0_42;
            s_2 = (x23_3 | 1);
        }
        else
        {
            x22_7 = &*s_2[1];
            s_2 = (x0_40 << 1);
        }
        if ((x0_40 >= 0x17 || (x0_40 < 0x17 && x0_40 != 0)))
        {
            memcpy(x22_7, x21_3, x0_40);
        }
        *(x22_7 + x0_40) = 0;
        int32_t x0_45 = g3::logLevel(&var_4f8);
        int32_t x20_2;
        if ((x0_45 & 1) == 0)
        {
            x20_2 = 0;
            if ((s_2 & 1) != 0)
            {
            label_29e38:
                operator delete(var_4e0_1);
                if ((x20_2 & 1) != 0)
                {
                    goto label_29e64;
                }
            }
        }
        else
        {
            char var_510 = 0xc;
            int32_t var_50f;
            __builtin_strncpy(&var_50f, "region", 0x17);
            x20_2 = g3::logTag(&var_510);
            if ((var_510 & 1) != 0)
            {
                void* var_500;
                operator delete(var_500);
                if ((s_2 & 1) != 0)
                {
                    goto label_29e38;
                }
            }
            else if ((s_2 & 1) != 0)
            {
                goto label_29e38;
            }
        }
        if (((((x0_45 & 1) == 0 && (s_2 & 1) == 0) || (x0_45 & 1) != 0) && (x20_2 & 1) != 0))
        {
        label_29e64:
            LogCapture::LogCapture(&var_2c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        gettimeofday(&var_520, 0);
        int128_t v0_8;
        v0_8 = 0;
        *v0_8[8] = 0;
        v0_8 = (construction_vtable_for_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        int64_t (* var_208)() = (construction_vtable_for_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >-in-std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        var_2c0 = v0_8;
        int64_t (** var_5a8_1)() = &var_208;
        std::__ndk1::ios_base::init(&var_208);
        int64_t var_180_1 = 0;
        int32_t var_178_1 = 0xffffffff;
        var_2c0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        var_208 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf();
        FILE* var_238;
        FILE* x0_56;
        if (var_238 == 0)
        {
            x0_56 = fopen("/sdcard/pudu/picture/record.txt", &data_54ed4);
            var_238 = x0_56;
            if (x0_56 != 0)
            {
                int32_t var_218_1 = 8;
            }
        }
        if ((var_238 != 0 || (var_238 == 0 && x0_56 == 0)))
        {
            void* x0_52 = (&var_2c0 + *(var_2c0 - 0x18));
            *(x0_52 + 0x20);
            std::__ndk1::ios_base::clear(x0_52);
        }
        void* x8_51 = var_2c0;
        int64_t* var_598_1 = &var_2b0;
        if ((*((&var_2c0 + *(x8_51 - 0x18)) + 0x20) & 5) != 0)
        {
            s_8 = &arg1[0x2fe];
            x24_1 = &arg1[0x2ff];
            *(arg1 + 0xbf8) = 0;
        }
        else
        {
            __builtin_memset(&s_6, 0, 0x18);
            int32_t x25_3 = 0;
            int32_t x20_3;
            while (true)
            {
                *(x8_51 - 0x18);
                std::__ndk1::ios_base::getloc();
                int32_t var_410;
                char x0_60 = *(*std::__ndk1::locale::use_facet(&var_410) + 0x38)();
                std::__ndk1::locale::~locale();
                int64_t* x0_62 = std::__ndk1::getline<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(&var_2c0, &s_6, x0_60);
                FILE* x23_4;
                if ((*((x0_62 + *(*x0_62 - 0x18)) + 0x20) & 5) != 0)
                {
                    x20_3 = 0;
                    x23_4 = var_238;
                    if (x23_4 == 0)
                    {
                    label_2a284:
                        void* x0_83 = (&var_2c0 + *(var_2c0 - 0x18));
                        *(x0_83 + 0x20);
                        std::__ndk1::ios_base::clear(x0_83);
                        break;
                    }
                }
                else
                {
                    var_410 = 0;
                    sscanf();
                    if (x25_3 == var_410)
                    {
                        int64_t x0_64;
                        int64_t x1_14;
                        x0_64 = std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::tellg();
                        *(arg1 + 0xc08) = x0_64;
                        *(arg1 + 0xc10) = x1_14;
                        x8_51 = var_2c0;
                        x25_3 = (x25_3 + 1);
                        continue;
                    }
                    else
                    {
                        x20_3 = 1;
                        x23_4 = var_238;
                        if (x23_4 == 0)
                        {
                            goto label_2a284;
                        }
                    }
                }
                int32_t x0_76 = *(var_2b0 + 0x30)(var_598_1);
                if (fclose(x23_4) != 0)
                {
                    *(var_2b0 + 0x18)(var_598_1, 0, 0);
                }
                else
                {
                    int64_t var_238_1 = 0;
                    *(var_2b0 + 0x18)(var_598_1, 0, 0);
                    if (x0_76 == 0)
                    {
                        break;
                    }
                }
                goto label_2a284;
            }
            arg1[0x2fe] = x25_3;
            s_8 = &arg1[0x2fe];
            if ((s_6 & 1) != 0)
            {
                void* var_3f8_2;
                operator delete(var_3f8_2);
                x25_3 = *s_8;
            }
            x24_1 = &arg1[0x2ff];
            arg1[0x2ff] = x25_3;
            if (x20_3 != 0)
            {
                *s_8 = 0x61a8;  {  // {"ringIcNS2_11char_traitsIcEENS2_9…"}}
            }
        }
        int64_t var_530;
        gettimeofday(&var_530, 0);
        uint32_t x10_13 = *data_6fdf0;
        int64_t x20_4 = var_530;
        int64_t x21_6 = var_520;
        int32_t var_550 = data_6fde8;
        char* x22_10;
        if ((x10_13 & 1) == 0)
        {
            x22_10 = &*(data_6fdf0 + 1);
        }
        else
        {
            x22_10 = *(data_6fdfa + 6);
        }
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_87 = strlen(x22_10);
        if (x0_87 < -0x10)
        {
            goto label_2a5c4;
        }
        void* var_538_1;
        void* x23_5;
        if (x0_87 >= 0x17)
        {
            uint64_t x24_3 = ((x0_87 + 0x10) & 0xfffffffffffffff0);
            void* x0_89 = operator new(x24_3);
            x23_5 = x0_89;
            size_t var_540_1 = x0_87;
            var_538_1 = x0_89;
            s_1 = (x24_3 | 1);
        }
        else
        {
            x23_5 = &*s_1[1];
            s_1 = (x0_87 << 1);
        }
        if ((x0_87 >= 0x17 || (x0_87 < 0x17 && x0_87 != 0)))
        {
            memcpy(x23_5, x22_10, x0_87);
        }
        *(x23_5 + x0_87) = 0;
        int32_t x0_92 = g3::logLevel(&var_550);
        int32_t x19_2;
        if ((x0_92 & 1) == 0)
        {
            x19_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_2a3dc:
                operator delete(var_538_1);
                if ((x19_2 & 1) != 0)
                {
                    goto label_2a408;
                }
            }
        }
        else
        {
            int64_t var_568 = 0;
            int64_t var_560_1 = 0;
            var_568 = 0x1e;
            void* var_558_1 = nullptr;
            __builtin_strncpy(&*var_568[1], "feasibal_region", 0x10);
            x19_2 = g3::logTag(&var_568);
            if ((var_568 & 1) != 0)
            {
                operator delete(var_558_1);
                if ((s_1 & 1) != 0)
                {
                    goto label_2a3dc;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_2a3dc;
            }
        }
        if (((((x0_92 & 1) == 0 && (s_1 & 1) == 0) || (x0_92 & 1) != 0) && (x19_2 & 1) != 0))
        {
        label_2a408:
            LogCapture::LogCapture(&s_6, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            int64_t var_528;
            int64_t var_518;
            double v0_10;
            v0_10 = ((vcvtd_f64_s64((x20_4 - x21_6)) * 1000.0) + (vcvtd_f64_s64((var_528 - var_518)) / 1000.0));
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        __builtin_strncpy(&s, "*/sdcard/pudu/picture/", 0x17);
        int64_t x0_98 = feasibal_region::getDirectorySize(&s);
        void* var_570;
        if ((s & 1) != 0)
        {
            operator delete(var_570);
        }
        if (x0_98 >= 0x40100000)
        {
            *x24_1 = 0;
            *s_8 = 0x61a8;  {  // {"ringIcNS2_11char_traitsIcEENS2_9…"}}
        }
        var_2c0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
        var_208 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
        std::__ndk1::ios_base::~ios_base();
        s_8 = &var_e0;
    }
    if (((((x8_33 == 0 || (x8_33 != 0 && x0_38 != 0)) && *(arg1 + 0x9e1) == 0) || (((x8_33 != 0 && x0_38 == 0) && x0_55 >= -0x10) && *(arg1 + 0x9e1) == 0)) || ((((x8_33 == 0 || (x8_33 != 0 && x0_38 != 0)) && *(arg1 + 0x9e1) != 0) || (((x8_33 != 0 && x0_38 == 0) && x0_55 >= -0x10) && *(arg1 + 0x9e1) != 0)) && (*data_6fdf0 & 1) == 0)))
    {
        if (var_b8 == 0)
        {
        label_2a514:
            int64_t var_b8_1 = 0;
            __builtin_memset(s_8, 0, 0x20);
            if (var_ec >= 1)
            {
                int64_t i_7 = 0;
                do
                {
                    *(var_b0 + (i_7 << 2)) = 0;
                    i_7 = (i_7 + 1);
                } while (i_7 < var_ec);
            }
            if (var_a8 != &var_a0)
            {
                cv::fastFree(var_a8);
            }
            if (*(x8 + 0x28) != x8_1)
            {
                __stack_chk_fail();
                /* no return */
            }
            return 0;
        }
        int32_t temp0_5;
        int32_t i_8;
        do
        {
            temp0_5 = __ldaxr((var_b8 + 0x14));
            i_8 = __stlxr((temp0_5 - 1), (var_b8 + 0x14));
        } while (i_8 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
        goto label_2a514;
    }
    if (((((x8_33 == 0 || (x8_33 != 0 && x0_38 != 0)) && *(arg1 + 0x9e1) != 0) || (((x8_33 != 0 && x0_38 == 0) && x0_55 >= -0x10) && *(arg1 + 0x9e1) != 0)) && (*data_6fdf0 & 1) != 0))
    {
        x21_3 = *(data_6fdfa + 6);
        goto label_29d64;
    }
}

void sub_2a5dc(int64_t arg1, int64_t arg2 @ x26, void* arg3 @ x29) __noreturn
{
    int64_t x8 = *(arg3 - 0xa8);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 - 0xa8) = 0;
    __builtin_memset(arg2, 0, 0x20);
    if (*(arg3 - 0xdc) >= 1)
    {
        int64_t x8_4 = *(arg3 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_4 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg3 - 0xdc));
    }
    void* x0_1 = *(arg3 - 0x98);
    if (x0_1 != (arg3 - 0x90))
    {
        cv::fastFree(x0_1);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a5e0(int64_t arg1, int64_t arg2 @ x26, void* arg3 @ x29, char arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    int64_t x8_2;
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        x8_2 = *(arg3 - 0xa8);
        if (x8_2 != 0)
        {
        label_2a8d4:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x8_2 = *(arg3 - 0xa8);
        if (x8_2 != 0)
        {
            goto label_2a8d4;
        }
    }
    *(arg3 - 0xa8) = 0;
    __builtin_memset(arg2, 0, 0x20);
    if (*(arg3 - 0xdc) >= 1)
    {
        int64_t x8_6 = *(arg3 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg3 - 0xdc));
    }
    void* x0_3 = *(arg3 - 0x98);
    if (x0_3 != (arg3 - 0x90))
    {
        cv::fastFree(x0_3);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a604(int64_t arg1, FILE* arg2 @ x23, void* arg3 @ x29, int64_t arg4, int64_t arg5, int64_t arg6, char arg7, void* arg8) __noreturn
{
    fclose(arg2);
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    arg_2f0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_3a8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    int64_t x8_2 = *(arg3 - 0xa8);
    if (x8_2 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_2 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 - 0xa8) = 0;
    __builtin_memset(arg5, 0, 0x20);
    if (*(arg3 - 0xdc) >= 1)
    {
        int64_t x8_6 = *(arg3 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg3 - 0xdc));
    }
    void* x0_5 = *(arg3 - 0x98);
    if (x0_5 != (arg3 - 0x90))
    {
        cv::fastFree(x0_5);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a624(int64_t arg1, int64_t arg2 @ x26, void* arg3 @ x29, char arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    int64_t x8_2;
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        x8_2 = *(arg3 - 0xa8);
        if (x8_2 != 0)
        {
        label_2a8d4:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x8_2 = *(arg3 - 0xa8);
        if (x8_2 != 0)
        {
            goto label_2a8d4;
        }
    }
    *(arg3 - 0xa8) = 0;
    __builtin_memset(arg2, 0, 0x20);
    if (*(arg3 - 0xdc) >= 1)
    {
        int64_t x8_6 = *(arg3 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg3 - 0xdc));
    }
    void* x0_3 = *(arg3 - 0x98);
    if (x0_3 != (arg3 - 0x90))
    {
        cv::fastFree(x0_3);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a648(int64_t arg1, int64_t arg2 @ x26, void* arg3 @ x29, char arg4, void* arg5) __noreturn
{
    int64_t x8_1;
    if ((arg4 & 1) == 0)
    {
        x8_1 = *(arg3 - 0xa8);
    }
    else
    {
        operator delete(arg5);
        x8_1 = *(arg3 - 0xa8);
    }
    if ((((arg4 & 1) == 0 && x8_1 != 0) || ((arg4 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 - 0xa8) = 0;
    __builtin_memset(arg2, 0, 0x20);
    if (*(arg3 - 0xdc) >= 1)
    {
        int64_t x8_5 = *(arg3 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_5 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg3 - 0xdc));
    }
    void* x0_2 = *(arg3 - 0x98);
    if (x0_2 != (arg3 - 0x90))
    {
        cv::fastFree(x0_2);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a670(int64_t arg1, void* arg2 @ x29, int64_t arg3, int64_t arg4, int64_t arg5) __noreturn
{
    arg_2f0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_3a8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    int64_t x8_1 = *(arg2 - 0xa8);
    if (x8_1 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa8) = 0;
    __builtin_memset(arg4, 0, 0x20);
    if (*(arg2 - 0xdc) >= 1)
    {
        int64_t x8_5 = *(arg2 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_5 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xdc));
    }
    void* x0_3 = *(arg2 - 0x98);
    if (x0_3 != (arg2 - 0x90))
    {
        cv::fastFree(x0_3);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a674(int64_t arg1, void* arg2 @ x29, int64_t arg3, int64_t arg4, int64_t arg5, char arg6, void* arg7, char arg8, void* arg9) __noreturn
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || ((arg6 & 1) != 0 && (arg8 & 1) != 0)))
    {
        operator delete(arg9);
    }
    arg_2f0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_3a8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    int64_t x8_3 = *(arg2 - 0xa8);
    if (x8_3 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_3 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_3 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa8) = 0;
    __builtin_memset(arg4, 0, 0x20);
    if (*(arg2 - 0xdc) >= 1)
    {
        int64_t x8_7 = *(arg2 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_7 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xdc));
    }
    void* x0_5 = *(arg2 - 0x98);
    if (x0_5 != (arg2 - 0x90))
    {
        cv::fastFree(x0_5);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a6a4(int64_t arg1, void* arg2 @ x29, int64_t arg3, char arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    int64_t x8_2;
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        x8_2 = *(arg2 - 0xa8);
        if (x8_2 != 0)
        {
        label_2a8d4:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x8_2 = *(arg2 - 0xa8);
        if (x8_2 != 0)
        {
            goto label_2a8d4;
        }
    }
    *(arg2 - 0xa8) = 0;
    __builtin_memset(arg3, 0, 0x20);
    if (*(arg2 - 0xdc) >= 1)
    {
        int64_t x8_6 = *(arg2 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xdc));
    }
    void* x0_3 = *(arg2 - 0x98);
    if (x0_3 != (arg2 - 0x90))
    {
        cv::fastFree(x0_3);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a6c8(int64_t arg1, int64_t arg2 @ x26, void* arg3 @ x29, char arg4, void* arg5) __noreturn
{
    int64_t x8_1;
    if ((arg4 & 1) == 0)
    {
        x8_1 = *(arg3 - 0xa8);
    }
    else
    {
        operator delete(arg5);
        x8_1 = *(arg3 - 0xa8);
    }
    if ((((arg4 & 1) == 0 && x8_1 != 0) || ((arg4 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 - 0xa8) = 0;
    __builtin_memset(arg2, 0, 0x20);
    if (*(arg3 - 0xdc) >= 1)
    {
        int64_t x8_5 = *(arg3 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_5 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg3 - 0xdc));
    }
    void* x0_2 = *(arg3 - 0x98);
    if (x0_2 != (arg3 - 0x90))
    {
        cv::fastFree(x0_2);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a704(int64_t arg1, int64_t arg2 @ x26, void* arg3 @ x29, char arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    int64_t x8_2;
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        x8_2 = *(arg3 - 0xa8);
        if (x8_2 != 0)
        {
        label_2a8d4:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x8_2 = *(arg3 - 0xa8);
        if (x8_2 != 0)
        {
            goto label_2a8d4;
        }
    }
    *(arg3 - 0xa8) = 0;
    __builtin_memset(arg2, 0, 0x20);
    if (*(arg3 - 0xdc) >= 1)
    {
        int64_t x8_6 = *(arg3 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg3 - 0xdc));
    }
    void* x0_3 = *(arg3 - 0x98);
    if (x0_3 != (arg3 - 0x90))
    {
        cv::fastFree(x0_3);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a728(int64_t arg1, void* arg2 @ x29, int64_t arg3, int64_t arg4, int64_t arg5, char arg6, void* arg7) __noreturn
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    arg_2f0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_3a8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    int64_t x8_2 = *(arg2 - 0xa8);
    if (x8_2 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_2 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa8) = 0;
    __builtin_memset(arg4, 0, 0x20);
    if (*(arg2 - 0xdc) >= 1)
    {
        int64_t x8_6 = *(arg2 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xdc));
    }
    void* x0_4 = *(arg2 - 0x98);
    if (x0_4 != (arg2 - 0x90))
    {
        cv::fastFree(x0_4);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a754(int64_t arg1, void* arg2 @ x29, int64_t arg3, int64_t arg4, int64_t arg5, char arg6, void* arg7) __noreturn
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    arg_2f0 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg_3a8 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    int64_t x8_2 = *(arg2 - 0xa8);
    if (x8_2 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_2 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa8) = 0;
    __builtin_memset(arg4, 0, 0x20);
    if (*(arg2 - 0xdc) >= 1)
    {
        int64_t x8_6 = *(arg2 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xdc));
    }
    void* x0_4 = *(arg2 - 0x98);
    if (x0_4 != (arg2 - 0x90))
    {
        cv::fastFree(x0_4);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a778(int64_t arg1, void* arg2 @ x29, int64_t arg3, char arg4, void* arg5) __noreturn
{
    int64_t x8_1;
    if ((arg4 & 1) == 0)
    {
        x8_1 = *(arg2 - 0xa8);
    }
    else
    {
        operator delete(arg5);
        x8_1 = *(arg2 - 0xa8);
    }
    if ((((arg4 & 1) == 0 && x8_1 != 0) || ((arg4 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg2 - 0xa8) = 0;
    __builtin_memset(arg3, 0, 0x20);
    if (*(arg2 - 0xdc) >= 1)
    {
        int64_t x8_5 = *(arg2 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_5 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg2 - 0xdc));
    }
    void* x0_2 = *(arg2 - 0x98);
    if (x0_2 != (arg2 - 0x90))
    {
        cv::fastFree(x0_2);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a78c(int64_t arg1, int64_t arg2 @ x26, void* arg3 @ x29, char arg4, void* arg5) __noreturn
{
    int64_t x8_1;
    if ((arg4 & 1) == 0)
    {
        x8_1 = *(arg3 - 0xa8);
    }
    else
    {
        operator delete(arg5);
        x8_1 = *(arg3 - 0xa8);
    }
    if ((((arg4 & 1) == 0 && x8_1 != 0) || ((arg4 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg3 - 0xa8) = 0;
    __builtin_memset(arg2, 0, 0x20);
    if (*(arg3 - 0xdc) >= 1)
    {
        int64_t x8_5 = *(arg3 - 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_5 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg3 - 0xdc));
    }
    void* x0_2 = *(arg3 - 0x98);
    if (x0_2 != (arg3 - 0x90))
    {
        cv::fastFree(x0_2);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_2a7b0(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int128_t* feasibal_region::PreParamInfo::operator=(int128_t* arg1, int128_t* arg2)
{
    int128_t v1 = *arg2;
    *(arg1 + 0xc) = *(arg2 + 0xc);
    *arg1 = v1;
    *(arg1 + 0x1c) = *(arg2 + 0x1c);
    arg1[2] = arg2[2];
    *(arg1 + 0x24) = *(arg2 + 0x24);
    int32_t x9 = *(arg2 + 0x28);
    *(arg1 + 0x2c) = *(arg2 + 0x2c);
    *(arg1 + 0x28) = x9;
    arg1[3] = arg2[3];
    *(arg1 + 0x34) = *(arg2 + 0x34);
    *(arg1 + 0x38) = *(arg2 + 0x38);
    *(arg1 + 0x3c) = *(arg2 + 0x3c);
    arg1[4] = arg2[4];
    *(arg1 + 0x44) = *(arg2 + 0x44);
    *(arg1 + 0x48) = *(arg2 + 0x48);
    *(arg1 + 0x4c) = *(arg2 + 0x4c);
    arg1[5] = arg2[5];
    *(arg1 + 0x54) = *(arg2 + 0x54);
    *(arg1 + 0x58) = *(arg2 + 0x58);
    *(arg1 + 0x5c) = *(arg2 + 0x5c);
    arg1[6] = arg2[6];
    *(arg1 + 0x64) = *(arg2 + 0x64);
    *(arg1 + 0x68) = *(arg2 + 0x68);
    *(arg1 + 0x6c) = *(arg2 + 0x6c);
    arg1[7] = arg2[7];
    *(arg1 + 0x74) = *(arg2 + 0x74);
    *(arg1 + 0x78) = *(arg2 + 0x78);
    *(arg1 + 0x7c) = *(arg2 + 0x7c);
    arg1[8] = arg2[8];
    *(arg1 + 0x84) = *(arg2 + 0x84);
    *(arg1 + 0x88) = *(arg2 + 0x88);
    *(arg1 + 0x8c) = *(arg2 + 0x8c);
    arg1[9] = arg2[9];
    *(arg1 + 0x94) = *(arg2 + 0x94);
    *(arg1 + 0x98) = *(arg2 + 0x98);
    *(arg1 + 0x9c) = *(arg2 + 0x9c);
    arg1[0xa] = arg2[0xa];
    *(arg1 + 0xa4) = *(arg2 + 0xa4);
    *(arg1 + 0xa8) = *(arg2 + 0xa8);
    *(arg1 + 0xac) = *(arg2 + 0xac);
    arg1[0xb] = arg2[0xb];
    *(arg1 + 0xb4) = *(arg2 + 0xb4);
    *(arg1 + 0xb8) = *(arg2 + 0xb8);
    *(arg1 + 0xbc) = *(arg2 + 0xbc);
    arg1[0xc] = arg2[0xc];
    *(arg1 + 0xc4) = *(arg2 + 0xc4);
    *(arg1 + 0xc8) = *(arg2 + 0xc8);
    *(arg1 + 0xcc) = *(arg2 + 0xcc);
    arg1[0xd] = arg2[0xd];
    *(arg1 + 0xd4) = *(arg2 + 0xd4);
    *(arg1 + 0xd8) = *(arg2 + 0xd8);
    *(arg1 + 0xdc) = *(arg2 + 0xdc);
    arg1[0xe] = arg2[0xe];
    *(arg1 + 0xe4) = *(arg2 + 0xe4);
    *(arg1 + 0xe8) = *(arg2 + 0xe8);
    *(arg1 + 0xec) = *(arg2 + 0xec);
    arg1[0xf] = arg2[0xf];
    *(arg1 + 0xf4) = *(arg2 + 0xf4);
    *(arg1 + 0xf8) = *(arg2 + 0xf8);
    *(arg1 + 0xfc) = *(arg2 + 0xfc);
    arg1[0x10] = arg2[0x10];
    int64_t x9_2 = *(arg2 + 0x104);
    *(arg1 + 0x10c) = *(arg2 + 0x10c);
    *(arg1 + 0x104) = x9_2;
    if (arg1 != arg2)
    {
        int64_t x8_58 = *(arg2 + 0x148);
        if (x8_58 != 0)
        {
            int32_t i;
            do
            {
                i = __stlxr((__ldaxr((x8_58 + 0x14)) + 1), (x8_58 + 0x14));
            } while (i != 0);
        }
        int64_t x8_60 = *(arg1 + 0x148);
        if (x8_60 != 0)
        {
            int32_t temp0_2;
            int32_t i_1;
            do
            {
                temp0_2 = __ldaxr((x8_60 + 0x14));
                i_1 = __stlxr((temp0_2 - 1), (x8_60 + 0x14));
            } while (i_1 != 0);
            if (temp0_2 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int32_t x8_62 = *(arg1 + 0x114);
        int128_t v0;
        v0 = 0;
        *v0[8] = 0;
        *(arg1 + 0x148) = 0;
        __builtin_memset(&arg1[0x12], 0, 0x20);
        int64_t x10_3;
        if (x8_62 <= 0)
        {
            arg1[0x11] = arg2[0x11];
        }
        else
        {
            int64_t x8_63 = arg1[0x15];
            int64_t x9_7 = 0;
            do
            {
                *(x8_63 + (x9_7 << 2)) = 0;
                x10_3 = *(arg1 + 0x114);
                x9_7 = (x9_7 + 1);
            } while (x9_7 < x10_3);
            arg1[0x11] = arg2[0x11];
        }
        int32_t x8_66;
        if ((x8_62 <= 0 || (x8_62 > 0 && x10_3 <= 2)))
        {
            x8_66 = *(arg2 + 0x114);
            if (x8_66 <= 2)
            {
                *(arg1 + 0x114) = x8_66;
                int64_t* x10_4 = *(arg1 + 0x158);
                *(arg1 + 0x118) = *(arg2 + 0x118);
                int64_t* x8_68 = *(arg2 + 0x158);
                *x10_4 = *x8_68;
                x10_4[1] = x8_68[1];
            }
        }
        if ((((x8_62 <= 0 || (x8_62 > 0 && x10_3 <= 2)) && x8_66 > 2) || (x8_62 > 0 && x10_3 > 2)))
        {
            cv::Mat::copySize(&arg1[0x11]);
        }
        arg1[0x12] = arg2[0x12];
        arg1[0x13] = arg2[0x13];
        arg1[0x14] = arg2[0x14];
        if (arg1 != arg2)
        {
            int64_t x8_70 = *(arg2 + 0x1a8);
            if (x8_70 != 0)
            {
                int32_t i_2;
                do
                {
                    i_2 = __stlxr((__ldaxr((x8_70 + 0x14)) + 1), (x8_70 + 0x14));
                } while (i_2 != 0);
            }
            int64_t x8_72 = *(arg1 + 0x1a8);
            if (x8_72 != 0)
            {
                int32_t temp0_5;
                int32_t i_3;
                do
                {
                    temp0_5 = __ldaxr((x8_72 + 0x14));
                    i_3 = __stlxr((temp0_5 - 1), (x8_72 + 0x14));
                } while (i_3 != 0);
                if (temp0_5 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int32_t x8_74 = *(arg1 + 0x174);
            v0 = 0;
            *v0[8] = 0;
            *(arg1 + 0x1a8) = 0;
            __builtin_memset(&arg1[0x18], 0, 0x20);
            int64_t x10_7;
            if (x8_74 <= 0)
            {
                arg1[0x17] = arg2[0x17];
            }
            else
            {
                int64_t x8_75 = arg1[0x1b];
                int64_t x9_13 = 0;
                do
                {
                    *(x8_75 + (x9_13 << 2)) = 0;
                    x10_7 = *(arg1 + 0x174);
                    x9_13 = (x9_13 + 1);
                } while (x9_13 < x10_7);
                arg1[0x17] = arg2[0x17];
            }
            int32_t x8_78;
            if ((x8_74 <= 0 || (x8_74 > 0 && x10_7 <= 2)))
            {
                x8_78 = *(arg2 + 0x174);
                if (x8_78 <= 2)
                {
                    *(arg1 + 0x174) = x8_78;
                    int64_t* x10_8 = *(arg1 + 0x1b8);
                    *(arg1 + 0x178) = *(arg2 + 0x178);
                    int64_t* x8_80 = *(arg2 + 0x1b8);
                    *x10_8 = *x8_80;
                    x10_8[1] = x8_80[1];
                }
            }
            if ((((x8_74 <= 0 || (x8_74 > 0 && x10_7 <= 2)) && x8_78 > 2) || (x8_74 > 0 && x10_7 > 2)))
            {
                cv::Mat::copySize(&arg1[0x17]);
            }
            arg1[0x18] = arg2[0x18];
            arg1[0x19] = arg2[0x19];
            arg1[0x1a] = arg2[0x1a];
            if (arg1 != arg2)
            {
                *(arg2 + 0x1d8);
                void* x1_2;
                if ((arg2[0x1d] & 1) != 0)
                {
                    x1_2 = arg2[0x1e];
                }
                else
                {
                    x1_2 = (arg2 + 0x1d1);
                }
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&arg1[0x1d], x1_2);
            }
        }
    }
    *(arg1 + 0x1e8) = *(arg2 + 0x1e8);
    return arg1;
}

int64_t feasibal_region::ground_process::init_data_pre(int32_t* arg1, cv::Mat* arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int64_t* s;
    __builtin_memset(&s, 0, 0x18);
    int128_t v0;
    int128_t v1;
    v0 = Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(&s, (arg1[0x82] * arg1[0x83]));
    v0 = *(arg1 + 0x218);
    s = v0;
    *(arg1 + 0x218) = s;
    int64_t var_1c0_1 = *(arg1 + 0x228);
    int64_t var_1c0;
    *(arg1 + 0x228) = var_1c0;
    free(v0);
    __builtin_memset(&s, 0, 0x18);
    int128_t v0_1;
    int128_t v1_1;
    v0_1 = Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(&s, (arg1[0x82] * arg1[0x83]));
    v0_1 = *(arg1 + 0x230);
    s = v0_1;
    *(arg1 + 0x230) = s;
    int64_t s_1 = *(arg1 + 0x240);
    int64_t var_1c0_2;
    *(arg1 + 0x240) = var_1c0_2;
    free(v0_1);
    int64_t x8_6 = *(arg1 + 0x208);
    int64_t x24 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190 = x24;
    int64_t var_180;
    int64_t* var_188 = &var_180;
    var_180 = 0;
    int64_t var_178 = 0;
    int64_t var_1e8 = x8_6;
    int128_t v0_2;
    int128_t v1_2;
    v0_2 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0;
    if (&arg1[0x92] == &s)
    {
        int64_t x8_15 = *var_1a0[8];
        if (x8_15 != 0)
        {
            int32_t temp0_2;
            int32_t i;
            do
            {
                temp0_2 = __ldaxr((x8_15 + 0x14));
                i = __stlxr((temp0_2 - 1), (x8_15 + 0x14));
            } while (i != 0);
            if (temp0_2 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_7 = *(arg1 + 0x280);
        if (x8_7 != 0)
        {
            int32_t temp0_1;
            int32_t i_1;
            do
            {
                temp0_1 = __ldaxr((x8_7 + 0x14));
                i_1 = __stlxr((temp0_1 - 1), (x8_7 + 0x14));
            } while (i_1 != 0);
            if (temp0_1 == 1)
            {
                v0_2 = cv::Mat::deallocate();
            }
        }
        v0_2 = 0;
        *v0_2[8] = 0;
        *(arg1 + 0x280) = 0;
        __builtin_memset(&arg1[0x96], 0, 0x20);
        if (arg1[0x93] >= 1)
        {
            int64_t x8_10 = *(arg1 + 0x288);
            int64_t i_2 = 0;
            do
            {
                *(x8_10 + (i_2 << 2)) = 0;
                i_2 = (i_2 + 1);
            } while (i_2 < arg1[0x93]);
        }
        v0_2 = s;
        v1_2 = s_1;
        *(arg1 + 0x248) = v0_2;
        *(arg1 + 0x258) = v1_2;
        int128_t var_1b0;
        *(arg1 + 0x268) = var_1b0;
        *(arg1 + 0x278) = var_1a0;
        void* x0_6 = *(arg1 + 0x290);
        int32_t x8_14;
        if (x0_6 == &arg1[0xa6])
        {
            x8_14 = v0_2;
        }
        else
        {
            cv::fastFree(x0_6);
            *(arg1 + 0x290) = &arg1[0xa6];
            *(arg1 + 0x288) = &arg1[0x94];
            x8_14 = *s[4];
            x0_6 = &arg1[0xa6];
        }
        if (x8_14 > 2)
        {
            *(arg1 + 0x288) = var_190;
            var_190 = x24;
            var_188 = &var_180;
        }
        else
        {
            *x0_6 = *var_188;
            *(x0_6 + 8) = var_188[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_18 = *s[4];
    *var_1a0[8] = 0;
    __builtin_memset(&s_1, 0, 0x20);
    if (x8_18 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(var_190 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *s[4]);
    }
    if (var_188 != &var_180)
    {
        cv::fastFree(var_188);
    }
    int64_t x8_20 = *(arg1 + 0x208);
    int64_t x24_1 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_1 = x24_1;
    int64_t* var_188_1 = &var_180;
    var_180 = 0;
    int64_t var_178_1 = 0;
    var_1e8 = x8_20;
    int128_t v0_3;
    int128_t v1_3;
    v0_3 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_1;
    if (&arg1[0xaa] == &s)
    {
        int64_t x8_29 = *var_1a0_1[8];
        if (x8_29 != 0)
        {
            int32_t temp0_5;
            int32_t i_4;
            do
            {
                temp0_5 = __ldaxr((x8_29 + 0x14));
                i_4 = __stlxr((temp0_5 - 1), (x8_29 + 0x14));
            } while (i_4 != 0);
            if (temp0_5 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_21 = *(arg1 + 0x2e0);
        if (x8_21 != 0)
        {
            int32_t temp0_4;
            int32_t i_5;
            do
            {
                temp0_4 = __ldaxr((x8_21 + 0x14));
                i_5 = __stlxr((temp0_4 - 1), (x8_21 + 0x14));
            } while (i_5 != 0);
            if (temp0_4 == 1)
            {
                v0_3 = cv::Mat::deallocate();
            }
        }
        v0_3 = 0;
        *v0_3[8] = 0;
        *(arg1 + 0x2e0) = 0;
        __builtin_memset(&arg1[0xae], 0, 0x20);
        if (arg1[0xab] >= 1)
        {
            int64_t x9_14 = *(arg1 + 0x2e8);
            int64_t i_6 = 0;
            do
            {
                *(x9_14 + (i_6 << 2)) = 0;
                i_6 = (i_6 + 1);
            } while (i_6 < arg1[0xab]);
        }
        v0_3 = s;
        v1_3 = s_1;
        *(arg1 + 0x2a8) = v0_3;
        *(arg1 + 0x2b8) = v1_3;
        int128_t var_1b0_1;
        *(arg1 + 0x2c8) = var_1b0_1;
        *(arg1 + 0x2d8) = var_1a0_1;
        void* x0_10 = *(arg1 + 0x2f0);
        int32_t x8_28;
        if (x0_10 == &arg1[0xbe])
        {
            x8_28 = v0_3;
        }
        else
        {
            cv::fastFree(x0_10);
            *(arg1 + 0x2f0) = &arg1[0xbe];
            *(arg1 + 0x2e8) = &arg1[0xac];
            x8_28 = *s[4];
            x0_10 = &arg1[0xbe];
        }
        if (x8_28 > 2)
        {
            *(arg1 + 0x2e8) = var_190_1;
            var_190_1 = x24_1;
            var_188_1 = &var_180;
        }
        else
        {
            *x0_10 = *var_188_1;
            *(x0_10 + 8) = var_188_1[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_32 = *s[4];
    *var_1a0_1[8] = 0;
    __builtin_memset(&s_1, 0, 0x20);
    if (x8_32 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(var_190_1 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < *s[4]);
    }
    if (var_188_1 != &var_180)
    {
        cv::fastFree(var_188_1);
    }
    int64_t x8_34 = *(arg1 + 0x208);
    int64_t x24_2 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_2 = x24_2;
    int64_t* var_188_2 = &var_180;
    var_180 = 0;
    int64_t var_178_2 = 0;
    var_1e8 = x8_34;
    int128_t v0_4;
    int128_t v1_4;
    v0_4 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_2;
    if (&arg1[0xc2] == &s)
    {
        int64_t x8_43 = *var_1a0_2[8];
        if (x8_43 != 0)
        {
            int32_t temp0_7;
            int32_t i_8;
            do
            {
                temp0_7 = __ldaxr((x8_43 + 0x14));
                i_8 = __stlxr((temp0_7 - 1), (x8_43 + 0x14));
            } while (i_8 != 0);
            if (temp0_7 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_35 = *(arg1 + 0x340);
        if (x8_35 != 0)
        {
            int32_t temp0_6;
            int32_t i_9;
            do
            {
                temp0_6 = __ldaxr((x8_35 + 0x14));
                i_9 = __stlxr((temp0_6 - 1), (x8_35 + 0x14));
            } while (i_9 != 0);
            if (temp0_6 == 1)
            {
                v0_4 = cv::Mat::deallocate();
            }
        }
        v0_4 = 0;
        *v0_4[8] = 0;
        *(arg1 + 0x340) = 0;
        __builtin_memset(&arg1[0xc6], 0, 0x20);
        if (arg1[0xc3] >= 1)
        {
            int64_t x9_23 = *(arg1 + 0x348);
            int64_t i_10 = 0;
            do
            {
                *(x9_23 + (i_10 << 2)) = 0;
                i_10 = (i_10 + 1);
            } while (i_10 < arg1[0xc3]);
        }
        v0_4 = s;
        v1_4 = s_1;
        *(arg1 + 0x308) = v0_4;
        *(arg1 + 0x318) = v1_4;
        int128_t var_1b0_2;
        *(arg1 + 0x328) = var_1b0_2;
        *(arg1 + 0x338) = var_1a0_2;
        void* x0_14 = *(arg1 + 0x350);
        int32_t x8_42;
        if (x0_14 == &arg1[0xd6])
        {
            x8_42 = v0_4;
        }
        else
        {
            cv::fastFree(x0_14);
            *(arg1 + 0x350) = &arg1[0xd6];
            *(arg1 + 0x348) = &arg1[0xc4];
            x8_42 = *s[4];
            x0_14 = &arg1[0xd6];
        }
        if (x8_42 > 2)
        {
            *(arg1 + 0x348) = var_190_2;
            var_190_2 = x24_2;
            var_188_2 = &var_180;
        }
        else
        {
            *x0_14 = *var_188_2;
            *(x0_14 + 8) = var_188_2[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_46 = *s[4];
    *var_1a0_2[8] = 0;
    __builtin_memset(&s_1, 0, 0x20);
    if (x8_46 >= 1)
    {
        int64_t i_11 = 0;
        do
        {
            *(var_190_2 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < *s[4]);
    }
    if (var_188_2 != &var_180)
    {
        cv::fastFree(var_188_2);
    }
    int64_t x8_48 = *(arg1 + 0x208);
    int64_t x24_3 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_3 = x24_3;
    int64_t* var_188_3 = &var_180;
    var_180 = 0;
    int64_t var_178_3 = 0;
    var_1e8 = x8_48;
    int128_t v0_5;
    int128_t v1_5;
    v0_5 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_3;
    if (&arg1[0xc2] == &s)
    {
        int64_t x8_57 = *var_1a0_3[8];
        if (x8_57 != 0)
        {
            int32_t temp0_9;
            int32_t i_12;
            do
            {
                temp0_9 = __ldaxr((x8_57 + 0x14));
                i_12 = __stlxr((temp0_9 - 1), (x8_57 + 0x14));
            } while (i_12 != 0);
            if (temp0_9 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_49 = *(arg1 + 0x340);
        if (x8_49 != 0)
        {
            int32_t temp0_8;
            int32_t i_13;
            do
            {
                temp0_8 = __ldaxr((x8_49 + 0x14));
                i_13 = __stlxr((temp0_8 - 1), (x8_49 + 0x14));
            } while (i_13 != 0);
            if (temp0_8 == 1)
            {
                v0_5 = cv::Mat::deallocate();
            }
        }
        v0_5 = 0;
        *v0_5[8] = 0;
        *(arg1 + 0x340) = 0;
        __builtin_memset(&arg1[0xc6], 0, 0x20);
        if (arg1[0xc3] >= 1)
        {
            int64_t x8_52 = *(arg1 + 0x348);
            int64_t i_14 = 0;
            do
            {
                *(x8_52 + (i_14 << 2)) = 0;
                i_14 = (i_14 + 1);
            } while (i_14 < arg1[0xc3]);
        }
        v0_5 = s;
        v1_5 = s_1;
        *(arg1 + 0x308) = v0_5;
        *(arg1 + 0x318) = v1_5;
        int128_t var_1b0_3;
        *(arg1 + 0x328) = var_1b0_3;
        *(arg1 + 0x338) = var_1a0_3;
        void* x0_18 = *(arg1 + 0x350);
        int32_t x8_56;
        if (x0_18 == &arg1[0xd6])
        {
            x8_56 = v0_5;
        }
        else
        {
            cv::fastFree(x0_18);
            *(arg1 + 0x350) = &arg1[0xd6];
            *(arg1 + 0x348) = &arg1[0xc4];
            x8_56 = *s[4];
        }
        if (x8_56 > 2)
        {
            *(arg1 + 0x348) = var_190_3;
            var_190_3 = x24_3;
            var_188_3 = &var_180;
        }
        else
        {
            *(arg1 + 0x358) = *var_188_3;
            *(arg1 + 0x360) = var_188_3[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_60 = *s[4];
    *var_1a0_3[8] = 0;
    __builtin_memset(&s_1, 0, 0x20);
    if (x8_60 >= 1)
    {
        int64_t i_15 = 0;
        do
        {
            *(var_190_3 + (i_15 << 2)) = 0;
            i_15 = (i_15 + 1);
        } while (i_15 < *s[4]);
    }
    if (var_188_3 != &var_180)
    {
        cv::fastFree(var_188_3);
    }
    cv::Mat::ones(arg1[0x82], arg1[0x83], 0);
    *(*s + 0x18)();
    int128_t v0_6;
    int128_t v1_6;
    int128_t v3;
    v0_6 = cv::MatExpr::~MatExpr();
    int64_t x9_36 = arg1[0x82];
    int64_t x8_64 = arg1[0x83];
    if (x9_36 >= 1)
    {
        int64_t x10_19 = 0;
        do
        {
            if (x8_64 >= 1)
            {
                int32_t x14_1 = arg1[5];
                int64_t i_16 = 0;
                v0_6 = vcvts_f32_s32(x10_19);
                do
                {
                    if (x14_1 <= 3)
                    {
                        if (((x14_1 == 0 || x14_1 == 2) || x14_1 == 3))
                        {
                            v1_6 = arg1[2];
                            v1_6 = (vcvts_f32_s32(i_16) - v1_6);
                            /* unimplemented  {fneg s1, s1} */;
                        }
                        if (x14_1 == 1)
                        {
                            v1_6 = arg1[2];
                            v1_6 = (vcvts_f32_s32(i_16) - v1_6);
                        }
                        v1_6 = (v1_6 / *arg1);
                        int64_t x16_3 = (i_16 << 2);
                        *((*(arg1 + 0x2b8) + (x10_19 * **(arg1 + 0x2f0))) + x16_3) = v1_6;
                        v1_6 = arg1[3];
                        v1_6 = (v0_6 - v1_6);
                        v1_6 = (v1_6 / arg1[1]);
                        *((*(arg1 + 0x318) + (x10_19 * **(arg1 + 0x350))) + x16_3) = v1_6;
                    }
                    i_16 = (i_16 + 1);
                } while (i_16 < x8_64);
            }
            x10_19 = (x10_19 + 1);
        } while (x10_19 < x9_36);
    }
    int64_t i_17 = 0;
    int64_t x10_20 = 0x32;
    int32_t x16_4 = x8_64;
    do
    {
        if (x16_4 != 0)
        {
            int64_t x12_1 = 0;
            int64_t x13_1 = 0;
            int64_t x15_8 = x16_4;
            do
            {
                if (((i_17 + x13_1) < 0x32 || ((i_17 + x13_1) >= 0x32 && (x10_20 + x13_1) > x15_8)))
                {
                    (*(arg1 + 0x438) + (**(arg1 + 0x470) * i_17))[(x12_1 >> 0x20)] = 0;
                    x8_64 = arg1[0x83];
                }
                x13_1 = (x13_1 + 1);
                x15_8 = x8_64;
                x12_1 = (x12_1 + 0x100000000);
                x16_4 = x8_64;
            } while (x13_1 < x15_8);
        }
        i_17 = (i_17 + 1);
        x10_20 = (x10_20 - 1);
    } while (i_17 != 0x32);
    uint64_t x9_37 = arg1[0x82];
    if (x9_37 != 0)
    {
        int64_t x10_21 = 0;
        int32_t x14_3 = x8_64;
        do
        {
            if (x14_3 != 0)
            {
                int64_t x9_38 = 0;
                int64_t i_18 = 0;
                do
                {
                    int64_t x15_12 = (arg1[0x84] << 1);
                    if ((i_18 < x15_12 || (i_18 >= x15_12 && i_18 > (x14_3 - x15_12))))
                    {
                        (*(arg1 + 0x438) + (**(arg1 + 0x470) * x10_21))[(x9_38 >> 0x20)] = 0;
                        x8_64 = arg1[0x83];
                    }
                    i_18 = (i_18 + 1);
                    x9_38 = (x9_38 + 0x100000000);
                    x14_3 = x8_64;
                } while (i_18 < x8_64);
            }
            x9_37 = arg1[0x82];
            x10_21 = (x10_21 + 1);
        } while (x10_21 < x9_37);
    }
    if (*(arg2 + 0x10) != 0)
    {
        uint64_t x10_23 = *(arg2 + 4);
        int64_t x13_3;
        if (x10_23 >= 3)
        {
            void* x11_5 = *(arg2 + 0x40);
            int64_t i_50;
            if (x10_23 != 3)
            {
                i_50 = (x10_23 & 0xfffffffc);
                v1_6 = 1;
                *v1_6[8] = 1;
                void* x13_4 = (x11_5 + 8);
                int64_t i_47 = i_50;
                v0_6 = v1_6;
                int64_t i_19;
                do
                {
                    *(x13_4 - 8);
                    v3 = *x13_4;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_7 = v1_6;
                    int64_t x0_23 = (v0_6 * v1_6);
                    int64_t x15_14 = (v1_6 * v0_6);
                    v1_6 = (v1_6 * v0_6);
                    int64_t x16_9 = (v0_6 * x2_7);
                    v0_6 = x0_23;
                    i_19 = i_47;
                    i_47 = (i_47 - 4);
                    *v1_6[8] = x15_14;
                    *v0_6[8] = x16_9;
                    x13_4 = (x13_4 + 0x10);
                } while (i_19 != 4);
                x13_3 = ((v0_6 * v1_6) * (v0_6 * v1_6));
            }
            else
            {
                i_50 = 0;
                x13_3 = 1;
            }
            if ((x10_23 == 3 || (x10_23 != 3 && i_50 != x10_23)))
            {
                int64_t i_48 = (x10_23 - i_50);
                void* x11_6 = (x11_5 + (i_50 << 2));
                int64_t i_20;
                do
                {
                    int64_t x12_3 = *x11_6;
                    x11_6 = (x11_6 + 4);
                    i_20 = i_48;
                    i_48 = (i_48 - 1);
                    x13_3 = (x13_3 * x12_3);
                } while (i_20 != 1);
            }
            if (x10_23 == 0)
            {
                goto label_2b904;
            }
        }
        else
        {
            x13_3 = (*(arg2 + 0xc) * *(arg2 + 8));
            if (x10_23 == 0)
            {
                goto label_2b904;
            }
        }
        if (x13_3 == 0)
        {
            goto label_2b904;
        }
        if ((*arg2 & 0xff8) != 0)
        {
            cv::Mat* var_1c8_1 = arg2;
            int64_t var_1c0_3 = 0;
            cv::Mat* var_1e0_1 = arg2;
            int64_t var_1d8_1 = 0;
            var_1e8 = 0x2010000;
            s = 0x1010000;
            cv::cvtColor(&s, &var_1e8, 6, 0);
        }
        v0_6 = 0.0;
        cv::operator>(arg2, v0_6);
        *(*s + 0x18)();
        cv::MatExpr::~MatExpr();
        cv::operator&(&arg1[0x10a], arg2);
        *(*s + 0x18)();
        v0_6 = cv::MatExpr::~MatExpr();
    }
    else
    {
    label_2b904:
        int64_t i_21 = (x9_37 - arg1[0x7f]);
        if (i_21 < x9_37)
        {
            do
            {
                if (x8_64 != 0)
                {
                    int64_t x9_39 = 0;
                    int64_t x12_4 = 0;
                    do
                    {
                        x12_4 = (x12_4 + 1);
                        (*(arg1 + 0x438) + (**(arg1 + 0x470) * i_21))[(x9_39 >> 0x20)] = 0;
                        x8_64 = arg1[0x83];
                        x9_39 = (x9_39 + 0x100000000);
                    } while (x12_4 < x8_64);
                    x9_37 = arg1[0x82];
                }
                i_21 = (i_21 + 1);
            } while (i_21 < x9_37);
        }
    }
    void* var_1c8_2 = &arg1[0x10a];
    int64_t s_2 = 0;
    var_1e8 = 0x2010000;
    s = 0x81010000;
    void* var_1e0_2 = &arg1[0x122];
    int64_t var_1d8_2 = 0;
    int32_t x9_41 = arg1[0x84];
    uint64_t x8_80 = **(arg1 + 0x468);
    int32_t var_1f0 = (*(x8_80 + 4) / x9_41);
    int32_t var_1ec = (x8_80 / x9_41);
    v0_6 = 0.0;
    v1_6 = 0.0;
    cv::resize(&s, &var_1e8, &var_1f0, 1, v0_6, v1_6);
    int32_t x11_8 = arg1[0x82];
    int64_t x9_42 = arg1[0x83];
    if (x11_8 >= 1)
    {
        int32_t x12_5 = arg1[0x84];
        int64_t x8_82 = 0;
        int32_t x10_27 = (x9_42 / x12_5);
        if (x9_42 >= 1)
        {
            goto label_2b9ec;
        }
        while (true)
        {
            x8_82 = (x8_82 + 1);
            if (x8_82 >= x11_8)
            {
                break;
            }
            x12_5 = arg1[0x84];
            if (x9_42 >= 1)
            {
            label_2b9ec:
                int32_t x14_10 = (x8_82 / x12_5);
                int64_t x11_9 = 0;
                int32_t x13_9 = (x8_82 % x12_5);
                int64_t x15_18 = (*(arg1 + 0x258) + (**(arg1 + 0x290) * x8_82));
            label_2ba10:
                int32_t x9_45 = (x11_9 / x12_5);
                *(x15_18 + (x11_9 << 2)) = (x11_9 + (x12_5 * ((x13_9 + (x12_5 * ((x10_27 * x14_10) + x9_45))) - x9_45)));
                x9_42 = arg1[0x83];
                x11_9 = (x11_9 + 1);
                if (x11_9 < x9_42)
                {
                    break;
                }
                x11_8 = arg1[0x82];
            }
        }
        if (x8_82 < x11_8)
        {
            x12_5 = arg1[0x84];
            goto label_2ba10;
        }
    }
    int64_t x27_2 = (&s | 8);
    s = 0x42ff0000;
    var_1e8 = x11_8;
    *var_1e8[4] = x9_42;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_4 = x27_2;
    int64_t* var_188_4 = &var_180;
    var_180 = 0;
    int64_t var_178_4 = 0;
    int128_t v0_7;
    int128_t v1_7;
    v0_7 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_4;
    if (&arg1[0x13a] == &s)
    {
        int64_t x8_91 = *var_1a0_4[8];
        if (x8_91 != 0)
        {
            int32_t temp0_14;
            int32_t i_22;
            do
            {
                temp0_14 = __ldaxr((x8_91 + 0x14));
                i_22 = __stlxr((temp0_14 - 1), (x8_91 + 0x14));
            } while (i_22 != 0);
            if (temp0_14 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_83 = *(arg1 + 0x520);
        if (x8_83 != 0)
        {
            int32_t temp0_13;
            int32_t i_23;
            do
            {
                temp0_13 = __ldaxr((x8_83 + 0x14));
                i_23 = __stlxr((temp0_13 - 1), (x8_83 + 0x14));
            } while (i_23 != 0);
            if (temp0_13 == 1)
            {
                v0_7 = cv::Mat::deallocate();
            }
        }
        v0_7 = 0;
        *v0_7[8] = 0;
        *(arg1 + 0x520) = 0;
        __builtin_memset(&arg1[0x13e], 0, 0x20);
        if (arg1[0x13b] >= 1)
        {
            int64_t x8_86 = *(arg1 + 0x528);
            int64_t i_24 = 0;
            do
            {
                *(x8_86 + (i_24 << 2)) = 0;
                i_24 = (i_24 + 1);
            } while (i_24 < arg1[0x13b]);
        }
        v0_7 = s;
        v1_7 = s_2;
        *(arg1 + 0x4e8) = v0_7;
        *(arg1 + 0x4f8) = v1_7;
        int128_t var_1b0_4;
        *(arg1 + 0x508) = var_1b0_4;
        *(arg1 + 0x518) = var_1a0_4;
        void* x0_32 = *(arg1 + 0x530);
        int32_t x8_90;
        if (x0_32 == &arg1[0x14e])
        {
            x8_90 = v0_7;
        }
        else
        {
            cv::fastFree(x0_32);
            *(arg1 + 0x530) = &arg1[0x14e];
            *(arg1 + 0x528) = &arg1[0x13c];
            x8_90 = *s[4];
            x0_32 = &arg1[0x14e];
        }
        if (x8_90 > 2)
        {
            *(arg1 + 0x528) = var_190_4;
            var_190_4 = x27_2;
            var_188_4 = &var_180;
        }
        else
        {
            *x0_32 = *var_188_4;
            *(x0_32 + 8) = var_188_4[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_94 = *s[4];
    *var_1a0_4[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_94 >= 1)
    {
        int64_t i_25 = 0;
        do
        {
            *(var_190_4 + (i_25 << 2)) = 0;
            i_25 = (i_25 + 1);
        } while (i_25 < *s[4]);
    }
    if (var_188_4 != &var_180)
    {
        cv::fastFree(var_188_4);
    }
    int64_t x8_96 = *(arg1 + 0x208);
    int64_t x27_3 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_5 = x27_3;
    int64_t* var_188_5 = &var_180;
    var_180 = 0;
    int64_t var_178_5 = 0;
    var_1e8 = x8_96;
    int128_t v0_8;
    int128_t v1_8;
    v0_8 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_5;
    if (&arg1[0x152] == &s)
    {
        int64_t x8_105 = *var_1a0_5[8];
        if (x8_105 != 0)
        {
            int32_t temp0_16;
            int32_t i_26;
            do
            {
                temp0_16 = __ldaxr((x8_105 + 0x14));
                i_26 = __stlxr((temp0_16 - 1), (x8_105 + 0x14));
            } while (i_26 != 0);
            if (temp0_16 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_97 = *(arg1 + 0x580);
        if (x8_97 != 0)
        {
            int32_t temp0_15;
            int32_t i_27;
            do
            {
                temp0_15 = __ldaxr((x8_97 + 0x14));
                i_27 = __stlxr((temp0_15 - 1), (x8_97 + 0x14));
            } while (i_27 != 0);
            if (temp0_15 == 1)
            {
                v0_8 = cv::Mat::deallocate();
            }
        }
        v0_8 = 0;
        *v0_8[8] = 0;
        *(arg1 + 0x580) = 0;
        __builtin_memset(&arg1[0x156], 0, 0x20);
        if (arg1[0x153] >= 1)
        {
            int64_t x9_58 = *(arg1 + 0x588);
            int64_t i_28 = 0;
            do
            {
                *(x9_58 + (i_28 << 2)) = 0;
                i_28 = (i_28 + 1);
            } while (i_28 < arg1[0x153]);
        }
        v0_8 = s;
        v1_8 = s_2;
        *(arg1 + 0x548) = v0_8;
        *(arg1 + 0x558) = v1_8;
        int128_t var_1b0_5;
        *(arg1 + 0x568) = var_1b0_5;
        *(arg1 + 0x578) = var_1a0_5;
        void* x0_36 = *(arg1 + 0x590);
        int32_t x8_104;
        if (x0_36 == &arg1[0x166])
        {
            x8_104 = v0_8;
        }
        else
        {
            cv::fastFree(x0_36);
            *(arg1 + 0x590) = &arg1[0x166];
            *(arg1 + 0x588) = &arg1[0x154];
            x8_104 = *s[4];
            x0_36 = &arg1[0x166];
        }
        if (x8_104 > 2)
        {
            *(arg1 + 0x588) = var_190_5;
            var_190_5 = x27_3;
            var_188_5 = &var_180;
        }
        else
        {
            *x0_36 = *var_188_5;
            *(x0_36 + 8) = var_188_5[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_108 = *s[4];
    *var_1a0_5[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_108 >= 1)
    {
        int64_t i_29 = 0;
        do
        {
            *(var_190_5 + (i_29 << 2)) = 0;
            i_29 = (i_29 + 1);
        } while (i_29 < *s[4]);
    }
    if (var_188_5 != &var_180)
    {
        cv::fastFree(var_188_5);
    }
    int64_t x8_110 = *(arg1 + 0x208);
    int64_t x27_4 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_6 = x27_4;
    int64_t* var_188_6 = &var_180;
    var_180 = 0;
    int64_t var_178_6 = 0;
    var_1e8 = x8_110;
    int128_t v0_9;
    int128_t v1_9;
    v0_9 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_6;
    if (&arg1[0x16a] == &s)
    {
        int64_t x8_119 = *var_1a0_6[8];
        if (x8_119 != 0)
        {
            int32_t temp0_18;
            int32_t i_30;
            do
            {
                temp0_18 = __ldaxr((x8_119 + 0x14));
                i_30 = __stlxr((temp0_18 - 1), (x8_119 + 0x14));
            } while (i_30 != 0);
            if (temp0_18 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_111 = *(arg1 + 0x5e0);
        if (x8_111 != 0)
        {
            int32_t temp0_17;
            int32_t i_31;
            do
            {
                temp0_17 = __ldaxr((x8_111 + 0x14));
                i_31 = __stlxr((temp0_17 - 1), (x8_111 + 0x14));
            } while (i_31 != 0);
            if (temp0_17 == 1)
            {
                v0_9 = cv::Mat::deallocate();
            }
        }
        v0_9 = 0;
        *v0_9[8] = 0;
        *(arg1 + 0x5e0) = 0;
        __builtin_memset(&arg1[0x16e], 0, 0x20);
        if (arg1[0x16b] >= 1)
        {
            int64_t x8_114 = *(arg1 + 0x5e8);
            int64_t i_32 = 0;
            do
            {
                *(x8_114 + (i_32 << 2)) = 0;
                i_32 = (i_32 + 1);
            } while (i_32 < arg1[0x16b]);
        }
        v0_9 = s;
        v1_9 = s_2;
        *(arg1 + 0x5a8) = v0_9;
        *(arg1 + 0x5b8) = v1_9;
        int128_t var_1b0_6;
        *(arg1 + 0x5c8) = var_1b0_6;
        *(arg1 + 0x5d8) = var_1a0_6;
        void* x0_40 = *(arg1 + 0x5f0);
        int32_t x8_118;
        if (x0_40 == &arg1[0x17e])
        {
            x8_118 = v0_9;
        }
        else
        {
            cv::fastFree(x0_40);
            *(arg1 + 0x5f0) = &arg1[0x17e];
            *(arg1 + 0x5e8) = &arg1[0x16c];
            x8_118 = *s[4];
            x0_40 = &arg1[0x17e];
        }
        if (x8_118 > 2)
        {
            *(arg1 + 0x5e8) = var_190_6;
            var_190_6 = x27_4;
            var_188_6 = &var_180;
        }
        else
        {
            *x0_40 = *var_188_6;
            *(x0_40 + 8) = var_188_6[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_122 = *s[4];
    *var_1a0_6[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_122 >= 1)
    {
        int64_t i_33 = 0;
        do
        {
            *(var_190_6 + (i_33 << 2)) = 0;
            i_33 = (i_33 + 1);
        } while (i_33 < *s[4]);
    }
    if (var_188_6 != &var_180)
    {
        cv::fastFree(var_188_6);
    }
    int64_t x8_124 = *(arg1 + 0x208);
    int64_t x23_2 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_7 = x23_2;
    int64_t* var_188_7 = &var_180;
    var_180 = 0;
    int64_t var_178_7 = 0;
    var_1e8 = x8_124;
    int128_t v0_10;
    int128_t v1_10;
    v0_10 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_7;
    if (&arg1[0x182] == &s)
    {
        int64_t x8_133 = *var_1a0_7[8];
        if (x8_133 != 0)
        {
            int32_t temp0_20;
            int32_t i_34;
            do
            {
                temp0_20 = __ldaxr((x8_133 + 0x14));
                i_34 = __stlxr((temp0_20 - 1), (x8_133 + 0x14));
            } while (i_34 != 0);
            if (temp0_20 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_125 = *(arg1 + 0x640);
        if (x8_125 != 0)
        {
            int32_t temp0_19;
            int32_t i_35;
            do
            {
                temp0_19 = __ldaxr((x8_125 + 0x14));
                i_35 = __stlxr((temp0_19 - 1), (x8_125 + 0x14));
            } while (i_35 != 0);
            if (temp0_19 == 1)
            {
                v0_10 = cv::Mat::deallocate();
            }
        }
        v0_10 = 0;
        *v0_10[8] = 0;
        *(arg1 + 0x640) = 0;
        __builtin_memset(&arg1[0x186], 0, 0x20);
        if (arg1[0x183] >= 1)
        {
            int64_t x8_128 = *(arg1 + 0x648);
            int64_t i_36 = 0;
            do
            {
                *(x8_128 + (i_36 << 2)) = 0;
                i_36 = (i_36 + 1);
            } while (i_36 < arg1[0x183]);
        }
        v0_10 = s;
        v1_10 = s_2;
        *(arg1 + 0x608) = v0_10;
        *(arg1 + 0x618) = v1_10;
        int128_t var_1b0_7;
        *(arg1 + 0x628) = var_1b0_7;
        *(arg1 + 0x638) = var_1a0_7;
        void* x0_44 = *(arg1 + 0x650);
        int32_t x8_132;
        if (x0_44 == &arg1[0x196])
        {
            x8_132 = v0_10;
        }
        else
        {
            cv::fastFree(x0_44);
            *(arg1 + 0x650) = &arg1[0x196];
            *(arg1 + 0x648) = &arg1[0x184];
            x8_132 = *s[4];
            x0_44 = &arg1[0x196];
        }
        if (x8_132 > 2)
        {
            *(arg1 + 0x648) = var_190_7;
            var_190_7 = x23_2;
            var_188_7 = &var_180;
        }
        else
        {
            *x0_44 = *var_188_7;
            *(x0_44 + 8) = var_188_7[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_136 = *s[4];
    *var_1a0_7[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_136 >= 1)
    {
        int64_t i_37 = 0;
        do
        {
            *(var_190_7 + (i_37 << 2)) = 0;
            i_37 = (i_37 + 1);
        } while (i_37 < *s[4]);
    }
    if (var_188_7 != &var_180)
    {
        cv::fastFree(var_188_7);
    }
    int64_t x8_138 = *(arg1 + 0x208);
    int64_t x22_5 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_8 = x22_5;
    int64_t* var_188_8 = &var_180;
    var_180 = 0;
    int64_t var_178_8 = 0;
    var_1e8 = x8_138;
    int128_t v0_11;
    int128_t v1_11;
    v0_11 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_8;
    if (&arg1[0xda] == &s)
    {
        int64_t x8_147 = *var_1a0_8[8];
        if (x8_147 != 0)
        {
            int32_t temp0_22;
            int32_t i_38;
            do
            {
                temp0_22 = __ldaxr((x8_147 + 0x14));
                i_38 = __stlxr((temp0_22 - 1), (x8_147 + 0x14));
            } while (i_38 != 0);
            if (temp0_22 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_139 = *(arg1 + 0x3a0);
        if (x8_139 != 0)
        {
            int32_t temp0_21;
            int32_t i_39;
            do
            {
                temp0_21 = __ldaxr((x8_139 + 0x14));
                i_39 = __stlxr((temp0_21 - 1), (x8_139 + 0x14));
            } while (i_39 != 0);
            if (temp0_21 == 1)
            {
                v0_11 = cv::Mat::deallocate();
            }
        }
        v0_11 = 0;
        *v0_11[8] = 0;
        *(arg1 + 0x3a0) = 0;
        __builtin_memset(&arg1[0xde], 0, 0x20);
        if (arg1[0xdb] >= 1)
        {
            int64_t x8_142 = *(arg1 + 0x3a8);
            int64_t i_40 = 0;
            do
            {
                *(x8_142 + (i_40 << 2)) = 0;
                i_40 = (i_40 + 1);
            } while (i_40 < arg1[0xdb]);
        }
        v0_11 = s;
        v1_11 = s_2;
        *(arg1 + 0x368) = v0_11;
        *(arg1 + 0x378) = v1_11;
        int128_t var_1b0_8;
        *(arg1 + 0x388) = var_1b0_8;
        *(arg1 + 0x398) = var_1a0_8;
        void* x0_48 = *(arg1 + 0x3b0);
        int32_t x8_146;
        if (x0_48 == &arg1[0xee])
        {
            x8_146 = v0_11;
        }
        else
        {
            cv::fastFree(x0_48);
            *(arg1 + 0x3b0) = &arg1[0xee];
            *(arg1 + 0x3a8) = &arg1[0xdc];
            x8_146 = *s[4];
            x0_48 = &arg1[0xee];
        }
        if (x8_146 > 2)
        {
            *(arg1 + 0x3a8) = var_190_8;
            var_190_8 = x22_5;
            var_188_8 = &var_180;
        }
        else
        {
            *x0_48 = *var_188_8;
            *(x0_48 + 8) = var_188_8[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_150 = *s[4];
    *var_1a0_8[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_150 >= 1)
    {
        int64_t i_41 = 0;
        do
        {
            *(var_190_8 + (i_41 << 2)) = 0;
            i_41 = (i_41 + 1);
        } while (i_41 < *s[4]);
    }
    if (var_188_8 != &var_180)
    {
        cv::fastFree(var_188_8);
    }
    int64_t x8_152 = *(arg1 + 0x208);
    int64_t x23_3 = (&s | 8);
    s = 0x42ff0000;
    __builtin_memset(&*s[4], 0, 0x3c);
    int64_t var_190_9 = x23_3;
    int64_t* var_188_9 = &var_180;
    var_180 = 0;
    int64_t var_178_9 = 0;
    var_1e8 = x8_152;
    int128_t v0_12;
    int128_t v1_12;
    v0_12 = cv::Mat::create(&s, &*nullptr->ident.signature[2], &var_1e8);
    int128_t var_1a0_9;
    if (&arg1[0xf2] == &s)
    {
        int64_t x8_161 = *var_1a0_9[8];
        if (x8_161 != 0)
        {
            int32_t temp0_24;
            int32_t i_42;
            do
            {
                temp0_24 = __ldaxr((x8_161 + 0x14));
                i_42 = __stlxr((temp0_24 - 1), (x8_161 + 0x14));
            } while (i_42 != 0);
            if (temp0_24 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_153 = *(arg1 + 0x400);
        if (x8_153 != 0)
        {
            int32_t temp0_23;
            int32_t i_43;
            do
            {
                temp0_23 = __ldaxr((x8_153 + 0x14));
                i_43 = __stlxr((temp0_23 - 1), (x8_153 + 0x14));
            } while (i_43 != 0);
            if (temp0_23 == 1)
            {
                v0_12 = cv::Mat::deallocate();
            }
        }
        v0_12 = 0;
        *v0_12[8] = 0;
        *(arg1 + 0x400) = 0;
        __builtin_memset(&arg1[0xf6], 0, 0x20);
        if (arg1[0xf3] >= 1)
        {
            int64_t x8_156 = *(arg1 + 0x408);
            int64_t i_44 = 0;
            do
            {
                *(x8_156 + (i_44 << 2)) = 0;
                i_44 = (i_44 + 1);
            } while (i_44 < arg1[0xf3]);
        }
        v0_12 = s;
        v1_12 = s_2;
        *(arg1 + 0x3c8) = v0_12;
        *(arg1 + 0x3d8) = v1_12;
        int128_t var_1b0_9;
        *(arg1 + 0x3e8) = var_1b0_9;
        *(arg1 + 0x3f8) = var_1a0_9;
        void* x0_52 = *(arg1 + 0x410);
        int32_t x8_160;
        if (x0_52 == &arg1[0x106])
        {
            x8_160 = v0_12;
        }
        else
        {
            cv::fastFree(x0_52);
            *(arg1 + 0x410) = &arg1[0x106];
            *(arg1 + 0x408) = &arg1[0xf4];
            x8_160 = *s[4];
            x0_52 = &arg1[0x106];
        }
        if (x8_160 > 2)
        {
            *(arg1 + 0x408) = var_190_9;
            var_190_9 = x23_3;
            var_188_9 = &var_180;
        }
        else
        {
            *x0_52 = *var_188_9;
            *(x0_52 + 8) = var_188_9[1];
        }
        s = 0x42ff0000;
        __builtin_memset((&s | 4), 0, 0x3c);
    }
    int32_t x8_164 = *s[4];
    *var_1a0_9[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_164 >= 1)
    {
        int64_t i_45 = 0;
        do
        {
            *(var_190_9 + (i_45 << 2)) = 0;
            i_45 = (i_45 + 1);
        } while (i_45 < *s[4]);
    }
    if (var_188_9 != &var_180)
    {
        cv::fastFree(var_188_9);
    }
    int32_t i_49 = 0x64;
    int32_t i_46;
    do
    {
        *s[2] = 0;
        s = 0;
        int32_t x0_54 = rand();
        int32_t x8_168 = (((x0_54 * 0x80808081) >> 0x20) + x0_54);
        s = (x0_54 + ((x8_168 >> 7) + (x8_168 >> 0x1f)));
        int32_t x0_55 = rand();
        int32_t x8_173 = (((x0_55 * 0x80808081) >> 0x20) + x0_55);
        *s[1] = (x0_55 + ((x8_173 >> 7) + (x8_173 >> 0x1f)));
        int32_t x0_56 = rand();
        int32_t x8_178 = (((x0_56 * 0x80808081) >> 0x20) + x0_56);
        *s[2] = (x0_56 + ((x8_178 >> 7) + (x8_178 >> 0x1f)));
        char* x8_181 = *(arg1 + 0x670);
        if (x8_181 == *(arg1 + 0x678))
        {
            std::__ndk1::vector<cv::Vec<uint8_t, 3>, std::__ndk1::allocator<cv::Vec<uint8_t, 3> > >::__push_back_slow_path<cv::Vec<uint8_t, 3> const&>(&arg1[0x19a]);
        }
        else
        {
            *x8_181 = s;
            x8_181[1] = *s[1];
            x8_181[2] = *s[2];
            *(arg1 + 0x670) = (*(arg1 + 0x670) + 3);
        }
        i_46 = i_49;
        i_49 = (i_49 - 1);
    } while (i_46 != 1);
    **(arg1 + 0x668) = 0;
    *(*(arg1 + 0x668) + 1) = 0;
    *(*(arg1 + 0x668) + 2) = 0xff;
    *(*(arg1 + 0x668) + 3) = 0xff;
    *(*(arg1 + 0x668) + 4) = 0;
    *(*(arg1 + 0x668) + 5) = 0xcc;
    *(*(arg1 + 0x668) + 6) = 0xff;
    *(*(arg1 + 0x668) + 7) = 0x64;
    *(*(arg1 + 0x668) + 8) = 0;
    *(*(arg1 + 0x668) + 9) = 0;
    *(*(arg1 + 0x668) + 0xa) = 0x99;
    *(*(arg1 + 0x668) + 0xb) = 0xff;
    *(*(arg1 + 0x668) + 0x96) = 0xb2;
    *(*(arg1 + 0x668) + 0x97) = 0xff;
    *(*(arg1 + 0x668) + 0x98) = 0;
    *(*(arg1 + 0x668) + 0x99) = 0xff;
    *(*(arg1 + 0x668) + 0x9a) = 0;
    *(*(arg1 + 0x668) + 0x9b) = 0x33;
    *(*(arg1 + 0x668) + 0x9c) = 0;
    *(*(arg1 + 0x668) + 0x9d) = 0xff;
    *(*(arg1 + 0x668) + 0x9e) = 0x33;
    *(*(arg1 + 0x668) + 0x9f) = 0x99;
    *(*(arg1 + 0x668) + 0xa0) = 0;
    *(*(arg1 + 0x668) + 0xa1) = 0xff;
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

int64_t feasibal_region::ground_process::getExtrinsicFromPlane(void* arg1, int32_t* arg2, float arg3, int32_t arg4 @ v1, int32_t arg5 @ v2, int128_t arg6 @ v3, double arg7, int32_t arg8 @ v5, int64_t arg9 @ x22)
{
    int64_t var_30 = arg9;
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    arg5 = *arg2;
    arg4 = arg2[1];
    arg3 = arg2[2];
    /* unimplemented  {fabs s4, s2} */;
    /* unimplemented  {fabs s5, s1} */;
    arg7 = (arg7 + arg8);
    /* unimplemented  {fabs s5, s0} */;
    arg7 = (arg7 + arg8);
    int64_t x0_14;
    int32_t var_250;
    int128_t s_1;
    int64_t* s_2;
    int128_t s_3;
    int64_t* s_4;
    if (!(arg7 <= 0.10000000000000001))
    {
        var_250 = 0x42ff0000;
        int32_t var_b8_1 = 0x42ff0000;
        int32_t var_c8 = arg5;
        int32_t var_c4_1 = arg4;
        __builtin_memset(&s_1, 0, 0x3c);
        void* var_210_1 = &*s_1[4];
        int64_t var_200;
        int64_t* var_208_1 = &var_200;
        __builtin_memset(&s_3, 0, 0x3c);
        var_200 = 0;
        int64_t var_1f8_1 = 0;
        void* var_78_1 = &*s_3[4];
        int64_t var_68;
        int64_t* var_70_1 = &var_68;
        var_68 = 0;
        int64_t var_60_1 = 0;
        float var_c0_1 = arg3;
        int32_t var_bc_1 = arg2[3];
        feasibal_region::ground_process::GetCameraPlaneRT_(arg1, &var_c8, &var_250, arg3);
        int64_t* s_5 = s_2;
        int64_t var_100_1 = 0;
        int64_t var_f0_1 = 0;
        int32_t var_e0_1 = 0x3f800000;
        int64_t var_d4_1 = 0;
        int64_t var_dc_1 = 0;
        int32_t var_cc_1 = 0x3f800000;
        int64_t* s_6 = s_4;
        int64_t v0;
        v0 = *s_5;
        int64_t x11 = *var_208_1;
        int64_t x10_1 = *var_70_1;
        int32_t var_108_1 = v0;
        void* x12_2 = (s_5 + x11);
        void* x13_1 = (s_6 + x10_1);
        int64_t x14_1 = (x10_1 << 1);
        v0 = *s_6;
        *(arg1 + 0x680) = v0;
        void* x15_1 = (s_6 + x14_1);
        v0 = s_5[1];
        int32_t var_f8_1 = v0;
        v0 = s_6[1];
        *(arg1 + 0x690) = v0;
        v0 = s_5[2];
        int32_t var_e8_1 = v0;
        v0 = s_6[2];
        *(arg1 + 0x6a0) = v0;
        v0 = s_5[3];
        *var_dc_1[4] = v0;
        void* x9 = (s_6 + (x14_1 + x10_1));
        v0 = s_6[3];
        *(arg1 + 0x6b0) = v0;
        v0 = *x12_2;
        int32_t var_104_1 = v0;
        v0 = *x13_1;
        *(arg1 + 0x684) = v0;
        v0 = *(x12_2 + 8);
        int32_t var_f4_1 = v0;
        v0 = *(x13_1 + 8);
        *(arg1 + 0x694) = v0;
        v0 = *(x12_2 + 0x10);
        int32_t var_e4_1 = v0;
        v0 = *(x13_1 + 0x10);
        *(arg1 + 0x6a4) = v0;
        int64_t x12_3 = (x11 << 1);
        v0 = *(x12_2 + 0x18);
        var_d4_1 = v0;
        void* x13_2 = (s_5 + x12_3);
        void* x8_2 = (s_5 + (x12_3 + x11));
        v0 = *(x13_1 + 0x18);
        *(arg1 + 0x6b4) = v0;
        v0 = *x13_2;
        var_100_1 = v0;
        int64_t v1;
        v1 = *x15_1;
        *(arg1 + 0x688) = v1;
        v1 = *(x13_2 + 8);
        var_f0_1 = v1;
        int64_t v2;
        v2 = *(x15_1 + 8);
        *(arg1 + 0x698) = v2;
        v2 = *(x13_2 + 0x10);
        int32_t var_e0_2 = v2;
        v2 = *(x15_1 + 0x10);
        *(arg1 + 0x6a8) = v2;
        v2 = *(x13_2 + 0x18);
        *var_d4_1[4] = v2;
        v2 = *(x15_1 + 0x18);
        *(arg1 + 0x6b8) = v2;
        v2 = *x8_2;
        *var_100_1[4] = v2;
        int64_t v3;
        v3 = *x9;
        *(arg1 + 0x68c) = v3;
        v3 = *(x8_2 + 8);
        *var_f0_1[4] = v3;
        int64_t v4;
        v4 = *(x9 + 8);
        *(arg1 + 0x69c) = v4;
        v4 = *(x8_2 + 0x10);
        var_dc_1 = v4;
        int64_t v5;
        v5 = *(x9 + 0x10);
        *(arg1 + 0x6ac) = v5;
        v5 = *(x8_2 + 0x18);
        int32_t var_cc_2 = v5;
        uint32_t x9_1 = *(arg1 + 0x3c);
        int64_t v6_1;
        v6_1 = *(x9 + 0x18);
        *(arg1 + 0x6bc) = v6_1;
        *(arg1 + 0x6c8) = v0;
        *(arg1 + 0x6cc) = v2;
        *(arg1 + 0x6c0) = var_108_1;
        *(arg1 + 0x6d8) = v1;
        *(arg1 + 0x6dc) = v3;
        *(arg1 + 0x6d0) = var_f8_1;
        *(arg1 + 0x6e0) = var_e8_1;
        *(arg1 + 0x6ec) = v4;
        *(arg1 + 0x6e8) = var_e0_2;
        *(arg1 + 0x6f0) = var_dc_1;
        *(arg1 + 0x6fc) = v5;
        *(arg1 + 0x6f8) = *var_d4_1[4];
        int128_t var_88_1;
        int64_t x8_9;
        if (x9_1 == 0)
        {
            *(arg1 + 0x700) = 1;
            x8_9 = *var_88_1[8];
        }
        else
        {
            x8_9 = *var_88_1[8];
        }
        if (((x9_1 == 0 && x8_9 != 0) || (x9_1 != 0 && x8_9 != 0)))
        {
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_9 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_9 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_88_1[8] = 0;
        __builtin_memset(&s_4, 0, 0x20);
        if (s_3 >= 1)
        {
            int64_t i_1 = 0;
            do
            {
                *(var_78_1 + (i_1 << 2)) = 0;
                i_1 = (i_1 + 1);
            } while (i_1 < s_3);
        }
        if (var_70_1 != &var_68)
        {
            cv::fastFree(var_70_1);
        }
        int128_t var_220_1;
        int64_t x8_19 = *var_220_1[8];
        if (x8_19 != 0)
        {
            int32_t temp0_3;
            int32_t i_2;
            do
            {
                temp0_3 = __ldaxr((x8_19 + 0x14));
                i_2 = __stlxr((temp0_3 - 1), (x8_19 + 0x14));
            } while (i_2 != 0);
            if (temp0_3 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_220_1[8] = 0;
        __builtin_memset(&s_2, 0, 0x20);
        if (s_1 >= 1)
        {
            int64_t i_3 = 0;
            do
            {
                *(var_210_1 + (i_3 << 2)) = 0;
                i_3 = (i_3 + 1);
            } while (i_3 < s_1);
        }
        if (var_208_1 != &var_200)
        {
            cv::fastFree(var_208_1);
        }
        x0_14 = 0;
    }
    else
    {
        char* x20_1;
        if ((*data_6fdf0 & 1) == 0)
        {
            x20_1 = &*(data_6fdf0 + 1);
        }
        else
        {
            x20_1 = *(data_6fdfa + 6);
        }
        int32_t var_270 = data_6fde8;
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        size_t x0_1 = strlen(x20_1);
        char var_288;
        void* var_258;
        if (x0_1 < -0x10)
        {
            int64_t x0_15 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            int64_t x19_4 = _Unwind_Resume(x0_15);
            void* var_278;
            if ((var_288 & 1) != 0)
            {
                operator delete(var_278);
            }
            if ((((var_288 & 1) == 0 && (s & 1) != 0) || ((var_288 & 1) != 0 && (s & 1) != 0)))
            {
                operator delete(var_258);
                int128_t var_88;
                int64_t x8_28 = *var_88[8];
                x19_4 = _Unwind_Resume(x19_4);
                if (x8_28 != 0)
                {
                    int32_t temp0_4;
                    int32_t i_4;
                    do
                    {
                        temp0_4 = __ldaxr((x8_28 + 0x14));
                        i_4 = __stlxr((temp0_4 - 1), (x8_28 + 0x14));
                    } while (i_4 != 0);
                    if (temp0_4 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                *var_88[8] = 0;
                bool cond:1_1 = s_3 < 1;
                __builtin_memset(&s_4, 0, 0x20);
                if (!(cond:1_1))
                {
                    int64_t i_5 = 0;
                    do
                    {
                        int64_t var_78;
                        *(var_78 + (i_5 << 2)) = 0;
                        i_5 = (i_5 + 1);
                    } while (i_5 < s_3);
                }
                void* var_70;
                if (var_70 != arg9)
                {
                    cv::fastFree(var_70);
                }
                int128_t var_220;
                int64_t x8_32 = *var_220[8];
                if (x8_32 != 0)
                {
                    int32_t temp0_5;
                    int32_t i_6;
                    do
                    {
                        temp0_5 = __ldaxr((x8_32 + 0x14));
                        i_6 = __stlxr((temp0_5 - 1), (x8_32 + 0x14));
                    } while (i_6 != 0);
                    if (temp0_5 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int32_t x8_34 = s_1;
                *var_220[8] = 0;
                __builtin_memset(&s_2, 0, 0x20);
                if (x8_34 >= 1)
                {
                    int64_t i_7 = 0;
                    do
                    {
                        int64_t var_210;
                        *(var_210 + (i_7 << 2)) = 0;
                        i_7 = (i_7 + 1);
                    } while (i_7 < s_1);
                }
                void* var_208;
                if (var_208 != x20_1)
                {
                    cv::fastFree(var_208);
                }
            }
            sub_20ac4(_Unwind_Resume(x19_4));
            /* no return */
        }
        void* x21_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x22 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x22);
            x21_1 = x0_3;
            size_t var_260_1 = x0_1;
            var_258 = x0_3;
            s = (x22 | 1);
        }
        else
        {
            x21_1 = &*s[1];
            s = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x21_1, x20_1, x0_1);
        }
        *(x21_1 + x0_1) = 0;
        int32_t x0_6 = g3::logLevel(&var_270);
        int32_t x19_2;
        if ((x0_6 & 1) == 0)
        {
            x19_2 = 0;
            if ((s & 1) != 0)
            {
            label_2d0a8:
                operator delete(var_258);
                if ((x19_2 & 1) != 0)
                {
                    goto label_2d0d4;
                }
            }
        }
        else
        {
            var_288 = 0xc;
            int32_t var_287;
            __builtin_strncpy(&var_287, "region", 0x17);
            x19_2 = g3::logTag(&var_288);
            if ((var_288 & 1) != 0)
            {
                void* var_278_1;
                operator delete(var_278_1);
                if ((s & 1) != 0)
                {
                    goto label_2d0a8;
                }
            }
            else if ((s & 1) != 0)
            {
                goto label_2d0a8;
            }
        }
        if (((((x0_6 & 1) == 0 && (s & 1) == 0) || (x0_6 & 1) != 0) && (x19_2 & 1) != 0))
        {
        label_2d0d4:
            LogCapture::LogCapture(&var_250, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        x0_14 = 1;
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_14;
}

void sub_2d160(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t feasibal_region::ground_process::getPlaneFromExtrinsic(void* arg1, int64_t* arg2, int32_t* arg3)
{
    int64_t v4 = *(arg1 + 0x690);
    int64_t v2;
    v2 = (*(arg1 + 0x680) * 0f);
    *v2[4] = (*v2[4] * 0f);
    int64_t v3;
    v3 = (v4 * 0f);
    *v3[4] = (*v4[4] * 0f);
    v4 = *(arg1 + 0x698);
    int64_t v5 = *(arg1 + 0x6a0);
    int32_t v0 = 0f;
    v2 = (v2 + v3);
    *v2[4] = (*v2[4] + *v3[4]);
    v3 = *(arg1 + 0x6a8);
    v4 = (v4 * v0);
    v4 = ((*(arg1 + 0x688) * v0) + v4);
    v2 = (v5 + v2);
    *v2[4] = (*v5[4] + *v2[4]);
    v3 = (v3 + v4);
    int64_t v1;
    v1 = (*(arg1 + 0x6b0) + v2);
    *v1[4] = (*v1[4] + *v2[4]);
    v3 = (*(arg1 + 0x6b8) + v3);
    v2 = (v1 * v1);
    *v2[4] = (*v1[4] * *v1[4]);
    v4 = (v3 * v3);
    /* unimplemented  {faddp s2, v2.2s} */;
    v2 = (v2 + v4);
    v4 = 0x3f800000;
    /* unimplemented  {fsqrt s2, s2} */;
    v4 = (1f / v2);
    v2 = (v1 * v4);
    *v2[4] = (*v1[4] * v4);
    v1 = (v3 * v4);
    *arg2 = v2;
    arg2[1] = v1;
    if (!(v1 <= 0f))
    {
        /* unimplemented  {fneg v2.2s, v2.2s} */;
        /* unimplemented  {fneg s1, s1} */;
        *arg2 = v2;
        arg2[1] = v1;
    }
    v1 = *(arg1 + 0x6c0);
    v2 = *(arg1 + 0x6d0);
    v3 = *(arg1 + 0x6c4);
    v4 = *(arg1 + 0x6d4);
    v5 = *(arg1 + 0x6c8);
    v1 = (v1 * v0);
    v2 = (v2 * v0);
    v3 = (v3 * v0);
    v4 = (v4 * v0);
    v1 = (v1 + v2);
    v2 = *(arg1 + 0x6e0);
    v3 = (v3 + v4);
    v4 = *(arg1 + 0x6e4);
    v5 = (v5 * v0);
    v0 = (v5 + (*(arg1 + 0x6d8) * v0));
    v5 = *(arg1 + 0x6e8);
    v1 = (v2 + v1);
    v2 = *(arg1 + 0x6f4);
    v3 = (v4 + v3);
    v4 = *(arg1 + 0x6f8);
    v2 = (v2 + v3);
    v0 = (v4 + (v5 + v0));
    v1 = (*(arg1 + 0x6f0) + v1);
    v2 = (v2 * v2);
    v1 = (v1 * v1);
    v0 = (v1 + (v2 + (v0 * v0)));
    /* unimplemented  {fsqrt s0, s0} */;
    /* unimplemented  {fabs s0, s0} */;
    *arg3 = v0;
    int32_t x9 = arg2[1];
    *(arg1 + 0x704) = *arg2;
    *(arg1 + 0x70c) = x9;
    *(arg1 + 0x710) = v0;
    int32_t x9_1 = arg2[1];
    int32_t x10_1 = *arg3;
    *(arg1 + 0x714) = *arg2;
    *(arg1 + 0x71c) = x9_1;
    *(arg1 + 0x720) = x10_1;
    return 0;
}

int64_t feasibal_region::ground_process::set_calib(void* arg1, int128_t* arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    uint32_t x8_1 = *(arg1 + 0x700);
    int64_t x0_10;
    if ((x8_1 != 0 && *(arg1 + 0x701) == 0))
    {
        int64_t x0_9 = *(arg1 + 0x200);
        int128_t var_90 = *(arg1 + 0x680);
        int128_t var_80_1 = *(arg1 + 0x690);
        int128_t var_70_1 = *(arg1 + 0x6a0);
        int128_t var_60_1 = *(arg1 + 0x6b0);
        int128_t var_1f0_1 = *arg2;
        CAPE::set_extrinsic(x0_9, &var_90);
        x0_10 = 0;
        *(arg1 + 0x701) = 1;
    }
    if ((x8_1 == 0 || (x8_1 != 0 && *(arg1 + 0x701) != 0)))
    {
        char* x20_1;
        if ((*data_6fdf0 & 1) == 0)
        {
            x20_1 = &*(data_6fdf0 + 1);
        }
        else
        {
            x20_1 = *(data_6fdfa + 6);
        }
        int32_t var_210 = data_6fde8;
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        size_t x0_1 = strlen(x20_1);
        char var_228;
        void* var_1f8;
        if (x0_1 < -0x10)
        {
            int64_t x0_14 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            int64_t x0_16 = _Unwind_Resume(x0_14);
            void* var_218;
            if ((var_228 & 1) != 0)
            {
                operator delete(var_218);
            }
            if ((((var_228 & 1) == 0 && (s & 1) == 0) || ((var_228 & 1) != 0 && (s & 1) == 0)))
            {
                _Unwind_Resume(x0_16);
            }
            operator delete(var_1f8);
            /* tailcall */
            return std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::tellg(_Unwind_Resume(x0_16));
        }
        void* x21_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x22_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x22_1);
            x21_1 = x0_3;
            size_t var_200_1 = x0_1;
            var_1f8 = x0_3;
            s = (x22_1 | 1);
        }
        else
        {
            x21_1 = &*s[1];
            s = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x21_1, x20_1, x0_1);
        }
        *(x21_1 + x0_1) = 0;
        int32_t x0_6 = g3::logLevel(&var_210);
        int32_t x19_3;
        if ((x0_6 & 1) == 0)
        {
            x19_3 = 0;
            if ((s & 1) != 0)
            {
            label_2d564:
                operator delete(var_1f8);
                if ((x19_3 & 1) != 0)
                {
                    goto label_2d590;
                }
            }
        }
        else
        {
            var_228 = 0xc;
            int32_t var_227;
            __builtin_strncpy(&var_227, "region", 0x17);
            x19_3 = g3::logTag(&var_228);
            if ((var_228 & 1) != 0)
            {
                void* var_218_1;
                operator delete(var_218_1);
                if ((s & 1) != 0)
                {
                    goto label_2d564;
                }
            }
            else if ((s & 1) != 0)
            {
                goto label_2d564;
            }
        }
        if (((((x0_6 & 1) == 0 && (s & 1) == 0) || (x0_6 & 1) != 0) && (x19_3 & 1) != 0))
        {
        label_2d590:
            void var_1d8;
            LogCapture::LogCapture(&var_1d8, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        x0_10 = 1;
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_10;
}

int64_t std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::tellg(int64_t* arg1)
{
    int64_t x8_1 = *(*arg1 - 0x18);
    void* x0 = (arg1 + x8_1);
    if (*(x0 + 0x20) != 0)
    {
        std::__ndk1::ios_base::clear(x0);
    }
    if ((*(x0 + 0x20) == 0 && *(x0 + 0x88) != 0))
    {
        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
        x8_1 = *(*arg1 - 0x18);
    }
    int64_t x0_3;
    if ((*(x0 + 0x20) != 0 || ((*(x0 + 0x20) == 0 && *(x0 + 0x88) != 0) && *((arg1 + x8_1) + 0x20) != 0)))
    {
        x0_3 = 0;
    }
    if ((*(x0 + 0x20) == 0 && (*(x0 + 0x88) == 0 || (*(x0 + 0x88) != 0 && *((arg1 + x8_1) + 0x20) == 0))))
    {
        x0_3 = *(**((arg1 + x8_1) + 0x28) + 0x20)();
    }
    return x0_3;
}

int64_t sub_2d6c0(void* arg1, int64_t* arg2 @ x19, int64_t arg3, int64_t arg4)
{
    __cxa_begin_catch(arg1);
    *(*arg2 - 0x18);
    std::__ndk1::ios_base::__set_badbit_and_consider_rethrow();
    __cxa_end_catch();
    return 0;
}

void sub_2d6e0(int64_t arg1) __noreturn
{
    __cxa_end_catch();
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

int64_t std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x17] = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

double feasibal_region::norm_vec(int64_t* arg1)
{
    double v0 = *arg1;
    double v1 = arg1[1];
    double v2 = arg1[2];
    return vsqrt_f64((((v0 * v0) + (v1 * v1)) + (v2 * v2)));
}

double feasibal_region::dot_vec(int64_t* arg1, int64_t* arg2)
{
    uint128_t v1;
    v1 = *arg2;
    int128_t v2 = *(arg1 + 8);
    int128_t v3 = *(arg2 + 8);
    double v0 = (*arg1 * v1);
    v1 = (v2 * v3);
    *v1[8] = (*v2[8] * *v3[8]);
    v0 = (v0 + v1);
    v1 = vdupd_laneq_s64(v1, 1);
    return (v0 + v1);
}

int64_t* feasibal_region::rotationMatrixFromAxisAndAngle(int64_t* arg1, double arg2, int32_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    double v13 = *arg1;
    double v11 = arg1[1];
    double v10 = arg1[2];
    double var_1e0;
    double var_1d8;
    sincos(&var_1d8, &var_1e0, arg2);
    double v9 = var_1e0;
    double v0 = var_1d8;
    *arg3 = 0x42ff0000;
    int32_t var_180 = 0x42ff0000;
    int128_t s_1;
    __builtin_memset(&s_1, 0, 0x3c);
    *(arg3 + 4) = {0};
    __builtin_memset(&arg3[5], 0, 0x2c);
    *(arg3 + 0x40) = &arg3[2];
    *(arg3 + 0x50) = 0;
    *(arg3 + 0x58) = 0;
    void* var_140 = &*s_1[4];
    int64_t var_130;
    int64_t* var_138 = &var_130;
    var_130 = 0;
    int64_t var_128 = 0;
    *(arg3 + 0x48) = &arg3[0x14];
    int32_t* var_1a8 = 0x300000003;
    int128_t v1;
    int128_t v2;
    int128_t v3;
    v1 = cv::Mat::create(&var_180, &*nullptr->ident.signature[2], &var_1a8);
    uint64_t x10 = s_1;
    var_1a8 = &var_180;
    int64_t x8_2;
    if (x10 < 1)
    {
        x8_2 = 0;
    }
    else
    {
        x8_2 = var_138[(x10 - 1)];
    }
    uint32_t x9_2 = *var_180[1];
    double* s;
    __builtin_memset(&s, 0, 0x18);
    int64_t s_8;
    int64_t var_188_1;
    int64_t s_2;
    if ((x9_2 & 0x40) != 0)
    {
        int64_t s_5 = s_2;
        s_8 = s_5;
        int64_t x13_1;
        int32_t var_178;
        int32_t var_174;
        if (x10 < 3)
        {
            x13_1 = (var_174 * var_178);
        }
        else
        {
            int64_t i_10;
            if (x10 != 3)
            {
                i_10 = (x10 & 0xfffffffc);
                v1 = 1;
                *v1[8] = 1;
                void* x13_2 = (var_140 + 8);
                int64_t i_9 = i_10;
                int128_t v0_1 = v1;
                int64_t i;
                do
                {
                    v2 = *(x13_2 - 8);
                    v3 = *x13_2;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_2 = v1;
                    int64_t x0_3 = (v0_1 * v1);
                    int64_t x15_2 = (v1 * v0_1);
                    v1 = (v1 * v0_1);
                    int64_t x16_3 = (v0_1 * x2_2);
                    v0_1 = x0_3;
                    i = i_9;
                    i_9 = (i_9 - 4);
                    *v1[8] = x15_2;
                    *v0_1[8] = x16_3;
                    x13_2 = (x13_2 + 0x10);
                } while (i != 4);
                x13_1 = ((v0_1 * v1) * (v0_1 * v1));
            }
            else
            {
                i_10 = 0;
                x13_1 = 1;
            }
            if ((x10 == 3 || (x10 != 3 && i_10 != x10)))
            {
                int64_t i_8 = (x10 - i_10);
                void* x11_3 = (var_140 + (i_10 << 2));
                int64_t i_1;
                do
                {
                    int64_t x12_1 = *x11_3;
                    x11_3 = (x11_3 + 4);
                    i_1 = i_8;
                    i_8 = (i_8 - 1);
                    x13_1 = (x13_1 * x12_1);
                } while (i_1 != 1);
            }
        }
        var_188_1 = (s_5 + (x13_1 * x8_2));
    }
    cv::MatConstIterator::seek(&var_1a8, false);
    double v8 = (1.0 / vsqrt_f64((((v13 * v13) + (v11 * v11)) + (v10 * v10))));
    v13 = (v13 * v8);
    double* s_4 = s;
    double v12 = (1.0 - v9);
    *s_4 = (v9 + (v12 * (v13 * v13)));
    int32_t* x1_2 = var_1a8;
    if (x1_2 != 0)
    {
        void* s_9 = (s_4 + x8_2);
        void* s_13 = s_9;
        if (s_9 >= var_188_1)
        {
            cv::MatConstIterator::seek(&var_1a8, true);
            x1_2 = var_1a8;
        }
        else
        {
            s_4 = s_9;
        }
    }
    v11 = (v11 * v8);
    double v14 = (v10 * v8);
    double* s_7 = s_4;
    int64_t s_12 = s_8;
    v8 = (v0 * v14);
    double v15 = (v12 * (v13 * v11));
    double v0_2 = (v9 + (v12 * (v14 * v14)));
    int32_t* var_1d0 = x1_2;
    *s_4 = (v15 - v8);
    if (x1_2 == 0)
    {
        *s_4 = v0_2;
    }
    else
    {
        double* s_10 = (s_4 + x8_2);
        double var_1f8_1 = v0_2;
        double* s_11 = s_10;
        if (s_10 >= var_188_1)
        {
            cv::MatConstIterator::seek(&var_1d0, true);
            s_10 = s_4;
            x1_2 = var_1d0;
        }
        double v1_1 = (v12 * (v13 * v14));
        v10 = (v0 * v11);
        *s_10 = (v10 + v1_1);
        double* s_14;
        if (x1_2 == 0)
        {
            s_14 = s_10;
        }
        else
        {
            s_14 = (s_10 + x8_2);
            double* s_15 = s_14;
            if (s_14 >= var_188_1)
            {
                cv::MatConstIterator::seek(&var_1d0, true);
                s_14 = s_10;
                x1_2 = var_1d0;
            }
        }
        *s_14 = (v8 + v15);
        double* s_16;
        if (x1_2 == 0)
        {
            s_16 = s_14;
        }
        else
        {
            s_16 = (s_14 + x8_2);
            double* s_17 = s_16;
            if (s_16 >= var_188_1)
            {
                cv::MatConstIterator::seek(&var_1d0, true);
                s_16 = s_14;
                x1_2 = var_1d0;
            }
        }
        *s_16 = (v9 + (v12 * (v11 * v11)));
        double* s_18;
        if (x1_2 == 0)
        {
            s_18 = s_16;
        }
        else
        {
            s_18 = (s_16 + x8_2);
            double* s_19 = s_18;
            if (s_18 >= var_188_1)
            {
                cv::MatConstIterator::seek(&var_1d0, true);
                s_18 = s_16;
                x1_2 = var_1d0;
            }
        }
        v9 = (v12 * (v11 * v14));
        v8 = (v0 * v13);
        *s_18 = (v9 - v8);
        double* s_20;
        if (x1_2 == 0)
        {
            s_20 = s_18;
        }
        else
        {
            s_20 = (s_18 + x8_2);
            double* s_21 = s_20;
            if (s_20 >= var_188_1)
            {
                cv::MatConstIterator::seek(&var_1d0, true);
                s_20 = s_18;
                x1_2 = var_1d0;
            }
        }
        *s_20 = (v1_1 - v10);
        double* s_22;
        if (x1_2 == 0)
        {
            s_22 = s_20;
        }
        else
        {
            s_22 = (s_20 + x8_2);
            double* s_23 = s_22;
            if (s_22 >= var_188_1)
            {
                cv::MatConstIterator::seek(&var_1d0, true);
                s_22 = s_20;
                x1_2 = var_1d0;
            }
        }
        *s_22 = (v8 + v9);
        double* s_24;
        if (x1_2 == 0)
        {
            s_24 = s_22;
        }
        else
        {
            v0_2 = var_1f8_1;
            s_24 = (s_22 + x8_2);
            double* s_25 = s_24;
            if (s_24 >= var_188_1)
            {
                cv::MatConstIterator::seek(&var_1d0, true);
                s_24 = s_22;
                x1_2 = var_1d0;
            }
        }
        if ((x1_2 == 0 || (x1_2 != 0 && s_24 >= var_188_1)))
        {
            v0_2 = var_1f8_1;
        }
        *s_24 = v0_2;
        if (x1_2 != 0)
        {
            void* x8_8 = (s_24 + x8_2);
            void* var_1c0_7 = x8_8;
            if (x8_8 >= var_188_1)
            {
                double* s_26 = s_24;
                cv::MatConstIterator::seek(&var_1d0, true);
            }
        }
    }
    int32_t var_120;
    int64_t x28 = (&var_120 | 8);
    int128_t s_3;
    __builtin_memset(&s_3, 0, 0x3c);
    int64_t var_e0 = x28;
    int64_t var_d0;
    int64_t* var_d8 = &var_d0;
    var_d0 = 0;
    int64_t var_c8 = 0;
    var_120 = 0x42ff0006;
    int128_t v0_3;
    int128_t s_6;
    int128_t v2_2;
    int128_t v3_1;
    v0_3 = cv::Mat_<double>::operator=(&var_120);
    int128_t var_f0;
    if (&var_120 == arg3)
    {
        int64_t x8_14 = *var_f0[8];
        if (x8_14 != 0)
        {
            int32_t temp0_3;
            int32_t i_2;
            do
            {
                temp0_3 = __ldaxr((x8_14 + 0x14));
                i_2 = __stlxr((temp0_3 - 1), (x8_14 + 0x14));
            } while (i_2 != 0);
            if (temp0_3 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_9 = *(arg3 + 0x38);
        if (x8_9 != 0)
        {
            int32_t temp0_2;
            int32_t i_3;
            do
            {
                temp0_2 = __ldaxr((x8_9 + 0x14));
                i_3 = __stlxr((temp0_2 - 1), (x8_9 + 0x14));
            } while (i_3 != 0);
            if (temp0_2 == 1)
            {
                v0_3 = cv::Mat::deallocate();
            }
        }
        int32_t x8_11 = arg3[1];
        v0_3 = 0;
        *v0_3[8] = 0;
        *(arg3 + 0x38) = 0;
        __builtin_memset(&arg3[4], 0, 0x20);
        if (x8_11 >= 1)
        {
            int64_t x8_12 = *(arg3 + 0x40);
            int64_t i_4 = 0;
            do
            {
                *(x8_12 + (i_4 << 2)) = 0;
                i_4 = (i_4 + 1);
            } while (i_4 < arg3[1]);
        }
        void* x0_16 = *(arg3 + 0x48);
        v0_3 = var_120;
        s_6 = s_3;
        *arg3 = v0_3;
        *(arg3 + 0x10) = s_6;
        int128_t var_10c;
        *(arg3 + 0x20) = var_10c;
        *(arg3 + 0x30) = var_f0;
        int32_t x8_13;
        if (x0_16 == &arg3[0x14])
        {
            x8_13 = v0_3;
        }
        else
        {
            cv::fastFree(x0_16);
            x8_13 = s_3;
            *(arg3 + 0x40) = &arg3[2];
            *(arg3 + 0x48) = &arg3[0x14];
        }
        if (x8_13 > 2)
        {
            v0_3 = var_e0;
            var_e0 = x28;
            var_d8 = &var_d0;
            *(arg3 + 0x40) = v0_3;
        }
        else
        {
            *(arg3 + 0x50) = *var_d8;
            *(arg3 + 0x58) = var_d8[1];
        }
        var_120 = 0x42ff0000;
        __builtin_memset((&var_120 | 4), 0, 0x3c);
    }
    int32_t x8_17 = s_3;
    *var_f0[8] = 0;
    __builtin_memset(&*s_3[0xc], 0, 0x20);
    if (x8_17 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(var_e0 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < s_3);
    }
    if (var_d8 != &var_d0)
    {
        cv::fastFree(var_d8);
    }
    int128_t var_150;
    int64_t x8_19 = *var_150[8];
    if (x8_19 != 0)
    {
        int32_t temp0_4;
        int32_t i_6;
        do
        {
            temp0_4 = __ldaxr((x8_19 + 0x14));
            i_6 = __stlxr((temp0_4 - 1), (x8_19 + 0x14));
        } while (i_6 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_21 = s_1;
    *var_150[8] = 0;
    __builtin_memset(&s_2, 0, 0x20);
    if (x8_21 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(var_140 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < s_1);
    }
    int64_t* x0_18 = var_138;
    if (x0_18 != &var_130)
    {
        x0_18 = cv::fastFree(x0_18);
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_18;
}

int64_t feasibal_region::ground_process::GetCameraPlaneRT(int64_t arg1, int32_t* arg2, int128_t* arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9, double arg10, int128_t arg11 @ v7)
{
    double v15;
    double var_a0 = v15;
    int64_t v14;
    int64_t var_98 = v14;
    double v11;
    double var_80 = v11;
    double v9;
    double var_70 = v9;
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    arg5 = *arg2;
    arg4 = arg2[1];
    if (arg4 >= 0f)
    {
        arg11 = *(arg2 + 8);
    }
    else
    {
        *(arg2 + 8);
        /* unimplemented  {fneg s1, s1} */;
        /* unimplemented  {fneg s0, s0} */;
        /* unimplemented  {fneg v7.2s, v2.2s} */;
    }
    arg6 = (arg5 * arg5);
    arg7 = (arg4 * arg4);
    arg8 = (arg11 * arg11);
    double v12 = arg5;
    arg5 = (arg6 + arg7);
    arg5 = (arg5 + arg8);
    double v13 = arg4;
    arg7 = (1.0 / vsqrt_f64(arg5));
    double v16 = arg11;
    arg5 = (arg7 * v12);
    arg6 = (arg7 * v13);
    double v10 = (arg7 * v16);
    double v8 = ((arg5 * arg5) + (arg6 * arg6));
    arg7 = (v10 + -1.0);
    if (!(vsqrt_f64((v8 + (arg7 * arg7))) < 9.9999999999999995e-07))
    {
        arg7 = 0.0;
        arg8 = (v10 * arg7);
        v15 = (arg5 * arg7);
        v9 = (arg6 * arg7);
        arg6 = (arg6 - arg8);
        arg5 = (arg8 - arg5);
        arg8 = (v15 - v9);
        arg4 = (1.0 / (vsqrt_f64(((arg8 * arg8) + ((arg6 * arg6) + (arg5 * arg5)))) + 2.2250738585072014e-308));
        v11 = (arg5 * arg4);
        arg6 = (arg6 * arg4);
        arg4 = (arg8 * arg4);
        double v0 = acos((((arg4 * arg7) + (arg6 + (v11 * arg7))) / (vsqrt_f64(((arg4 * arg4) + ((arg6 * arg6) + (v11 * v11)))) + 2.2250738585072014e-308)));
        double temp0_4 = vneg_f64(v0);
        if (v11 > 0.0)
        {
            v11 = temp0_4;
        }
        else
        {
            v11 = v0;
        }
        int64_t var_128_1 = 0;
        int64_t var_130 = 0;
        int64_t var_120_1 = 0x3ff0000000000000;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_130, v11);
        int64_t var_1a0_1 = 0;
        int64_t var_1a8 = 0;
        int64_t var_198_1 = 0x3ff0000000000000;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_1a8, -3.1415926535897931);
        double v0_4 = acos((((v10 + (v15 + v9)) / vsqrt_f64(((v10 * v10) + v8))) + 2.2250738585072014e-308));
        int64_t var_220 = 0x3ff0000000000000;
        int64_t var_210_1 = 0;
        int64_t var_218_1 = 0;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_220, vneg_f64(v0_4));
        void var_208;
        cv::Mat var_190;
        cv::operator*(&var_208, &var_190);
        int32_t var_540;
        cv::Mat var_118;
        cv::operator*(&var_540, &var_118);
        int64_t* var_3e0;
        int64_t* x0_5 = var_3e0;
        int128_t v0_5;
        v0_5 = 0;
        *v0_5[8] = 0;
        int32_t var_280 = 0x42ff0000;
        int128_t s_18;
        __builtin_memset(&s_18, 0, 0x3c);
        void* var_240_1 = &*s_18[4];
        int64_t var_230;
        int64_t* var_238_1 = &var_230;
        int64_t var_228_1 = 0;
        var_230 = 0;
        *(*x0_5 + 0x18)(v0_5);
        cv::MatExpr::~MatExpr();
        cv::MatExpr::~MatExpr();
        int64_t var_5b8 = 0x3ff0000000000000;
        int64_t var_5a8_1 = 0;
        int64_t var_5b0_1 = 0;
        v10 = 3.1415926535897931;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_5b8, v10);
        int64_t var_628_1 = 0;
        int64_t var_630 = 0;
        int64_t var_620_1 = 0x3ff0000000000000;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_630, -1.5707963267948966);
        cv::Mat var_618;
        void var_5a0;
        cv::operator*(&var_5a0, &var_618);
        cv::operator*(&var_540, &var_280);
        *(*var_3e0 + 0x18)();
        cv::MatExpr::~MatExpr();
        cv::MatExpr::~MatExpr();
        var_540 = 0x42ff0000;
        int128_t s_12;
        __builtin_memset(&s_12, 0, 0x3c);
        void* var_500_1 = &*s_12[4];
        int64_t var_4f0;
        int64_t* var_4f8_1 = &var_4f0;
        int64_t var_4e8_1 = 0;
        var_4f0 = 0;
        int64_t var_950 = 0x100000003;
        int128_t v1_2;
        int128_t v2;
        int128_t v3;
        v1_2 = cv::Mat::create(&var_540, &*nullptr->ident.signature[2], &var_950);
        uint64_t x10_1 = s_12;
        int32_t* var_6f0 = &var_540;
        int64_t x8_6;
        if (x10_1 < 1)
        {
            x8_6 = 0;
        }
        else
        {
            x8_6 = var_4f8_1[(x10_1 - 1)];
        }
        uint32_t x9_2 = *var_540[1];
        void* s_8;
        __builtin_memset(&s_8, 0, 0x18);
        int64_t s_50;
        int64_t var_6d0_1;
        int64_t s_13;
        if ((x9_2 & 0x40) != 0)
        {
            int64_t s_31 = s_13;
            s_50 = s_31;
            int64_t x13_1;
            int32_t var_538;
            int32_t var_534;
            if (x10_1 < 3)
            {
                x13_1 = (var_534 * var_538);
            }
            else
            {
                int64_t i_54;
                if (x10_1 != 3)
                {
                    i_54 = (x10_1 & 0xfffffffc);
                    v1_2 = 1;
                    *v1_2[8] = 1;
                    void* x13_2 = (var_500_1 + 8);
                    int64_t i_50 = i_54;
                    int128_t v0_8 = v1_2;
                    int64_t i;
                    do
                    {
                        v2 = *(x13_2 - 8);
                        v3 = *x13_2;
                        /* unimplemented  {sxtl v0.2d, v2.2s} */;
                        /* unimplemented  {sxtl v1.2d, v3.2s} */;
                        int64_t x2_2 = v1_2;
                        int64_t x0_13 = (v0_8 * v1_2);
                        int64_t x15_2 = (v1_2 * v0_8);
                        v1_2 = (v1_2 * v0_8);
                        int64_t x16_3 = (v0_8 * x2_2);
                        v0_8 = x0_13;
                        i = i_50;
                        i_50 = (i_50 - 4);
                        *v1_2[8] = x15_2;
                        *v0_8[8] = x16_3;
                        x13_2 = (x13_2 + 0x10);
                    } while (i != 4);
                    x13_1 = ((v0_8 * v1_2) * (v0_8 * v1_2));
                }
                else
                {
                    i_54 = 0;
                    x13_1 = 1;
                }
                if ((x10_1 == 3 || (x10_1 != 3 && i_54 != x10_1)))
                {
                    int64_t i_46 = (x10_1 - i_54);
                    void* x11_3 = (var_500_1 + (i_54 << 2));
                    int64_t i_1;
                    do
                    {
                        int64_t x12_1 = *x11_3;
                        x11_3 = (x11_3 + 4);
                        i_1 = i_46;
                        i_46 = (i_46 - 1);
                        x13_1 = (x13_1 * x12_1);
                    } while (i_1 != 1);
                }
            }
            var_6d0_1 = (s_31 + (x13_1 * x8_6));
        }
        cv::MatConstIterator::seek(&var_6f0, false);
        int64_t* s_39 = s_8;
        *s_39 = 0;
        int32_t* x21_1 = var_6f0;
        if (x21_1 != 0)
        {
            void* s_24 = (s_39 + x8_6);
            s_8 = s_24;
            if (s_24 >= var_6d0_1)
            {
                s_8 = s_39;
                cv::MatConstIterator::seek(&var_6f0, true);
                x21_1 = var_6f0;
                s_39 = s_8;
            }
            else
            {
                s_39 = s_24;
            }
        }
        double v1_3 = (v13 * v13);
        uint128_t v3_1;
        v3_1 = vdups_laneq_s32(arg11, 1);
        int64_t s_75 = s_50;
        /* unimplemented  {fabs s1, s3} */;
        v9 = (v1_3 / vsqrt_f64((((v12 * v12) + v1_3) + (v16 * v16))));
        int32_t* var_768 = x21_1;
        int64_t* s_7 = s_39;
        *s_39 = 0;
        if (x21_1 == 0)
        {
            *s_39 = (vneg_f64(v9) / cos(v0_4));
        }
        else
        {
            int64_t* s_40 = (s_39 + x8_6);
            s_7 = s_40;
            if (s_40 >= var_6d0_1)
            {
                s_7 = s_39;
                cv::MatConstIterator::seek(&var_768, true);
                s_40 = s_7;
                x21_1 = var_768;
            }
            *s_40 = (vneg_f64(v9) / cos(v0_4));
            if (x21_1 != 0)
            {
                void* s_25 = (s_40 + x8_6);
                s_7 = s_25;
                if (s_25 >= var_6d0_1)
                {
                    s_7 = s_40;
                    cv::MatConstIterator::seek(&var_768, true);
                }
            }
        }
        int64_t x3;
        int64_t var_9b8_1 = x3;
        int64_t x25_1 = (&var_3e0 | 8);
        __builtin_memset(&*var_3e0[4], 0, 0x3c);
        int64_t var_390;
        int64_t* var_398_1 = &var_390;
        int64_t var_388_1 = 0;
        var_390 = 0;
        var_3e0 = 0x42ff0006;
        int128_t v0_13;
        int128_t v1_4;
        int128_t v2_2;
        v0_13 = cv::Mat_<double>::operator=(&var_3e0);
        v2_2 = var_3e0;
        int128_t s_23;
        int128_t s_9 = s_23;
        int128_t var_3cc;
        int128_t var_670_1 = var_3cc;
        int128_t var_690 = v2_2;
        int128_t var_3b0;
        int128_t var_660_1 = var_3b0;
        int64_t var_650_1 = (&var_690 | 8);
        int128_t var_990_1;
        int64_t var_640;
        var_990_1 = &var_640;
        int64_t* var_648_1 = &var_640;
        int64_t var_638_1 = 0;
        var_640 = 0;
        int64_t* x0_19;
        if (v2_2 > 2)
        {
            x0_19 = &var_390;
            int64_t* var_398_2 = &var_390;
            int64_t var_3a0_2 = x25_1;
            var_650_1 = x25_1;
        }
        else
        {
            x0_19 = var_398_1;
            var_640 = *x0_19;
            int64_t var_638_2 = x0_19[1];
        }
        v0_13 = 0;
        *v0_13[8] = 0;
        var_3e0 = 0x42ff0000;
        __builtin_memset((&var_3e0 | 4), 0, 0x34);
        *var_3b0[8] = 0;
        int128_t s_14;
        __builtin_memset(&s_14, 0, 0x20);
        if (x0_19 != &var_390)
        {
            cv::fastFree(x0_19);
        }
        int128_t var_510;
        int64_t x8_11 = *var_510[8];
        if (x8_11 != 0)
        {
            int32_t temp0_11;
            int32_t i_2;
            do
            {
                temp0_11 = __ldaxr((x8_11 + 0x14));
                i_2 = __stlxr((temp0_11 - 1), (x8_11 + 0x14));
            } while (i_2 != 0);
            if (temp0_11 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        v0_13 = 0;
        *v0_13[8] = 0;
        *var_510[8] = 0;
        __builtin_memset(&s_13, 0, 0x20);
        if (s_12 >= 1)
        {
            int64_t i_3 = 0;
            do
            {
                *(var_500_1 + (i_3 << 2)) = 0;
                i_3 = (i_3 + 1);
            } while (i_3 < s_12);
        }
        if (var_4f8_1 != &var_4f0)
        {
            cv::fastFree(var_4f8_1);
        }
        int64_t var_700_1 = 0;
        int64_t var_708 = 0;
        int64_t var_6f8_1 = 0x3ff0000000000000;
        v0_13 = vneg_f64(v11);
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_708, v0_13);
        int64_t var_778_1 = 0;
        int64_t var_780 = 0;
        int64_t var_770_1 = 0x3ff0000000000000;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_780, v10);
        int64_t var_7f8 = 0x3ff0000000000000;
        int64_t var_7f0_1 = 0;
        int64_t var_7e8_1 = 0;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_7f8, v0_4);
        cv::operator*(&var_6f0, &var_768);
        cv::Mat var_7e0;
        cv::operator*(&var_540, &var_7e0);
        int64_t* x0_26 = var_3e0;
        int128_t v0_16;
        v0_16 = 0;
        *v0_16[8] = 0;
        int32_t var_858 = 0x42ff0000;
        int128_t s_4;
        __builtin_memset(&s_4, 0, 0x3c);
        void* var_818_1 = &*s_4[4];
        int64_t var_808;
        int64_t* var_810_1 = &var_808;
        var_808 = 0;
        int64_t var_800_1 = 0;
        *(*x0_26 + 0x18)(v0_16);
        cv::MatExpr::~MatExpr();
        cv::MatExpr::~MatExpr();
        int32_t var_8c0 = 0x42ff0000;
        int128_t s_3;
        __builtin_memset(&s_3, 0, 0x3c);
        void* var_880_1 = &*s_3[4];
        int64_t var_870;
        int64_t* var_878_1 = &var_870;
        var_870 = 0;
        int64_t var_868_1 = 0;
        var_950 = 0x400000004;
        int128_t v1_5;
        int128_t v2_3;
        int128_t v3_2;
        v1_5 = cv::Mat::create(&var_8c0, &*nullptr->ident.signature[2], &var_950);
        uint64_t x10_9 = s_3;
        int64_t* s_5;
        int64_t x21_2 = *s_5;
        int32_t* var_920 = &var_8c0;
        int64_t x8_19;
        if (x10_9 < 1)
        {
            x8_19 = 0;
        }
        else
        {
            x8_19 = var_878_1[(x10_9 - 1)];
        }
        uint32_t x9_11 = *var_8c0[1];
        int64_t var_918 = x8_19;
        void* s_2;
        __builtin_memset(&s_2, 0, 0x18);
        int64_t var_908_1;
        int64_t var_900_1;
        if ((x9_11 & 0x40) != 0)
        {
            int64_t x9_12 = *s_3[0xc];
            var_908_1 = x9_12;
            int64_t x13_5;
            if (x10_9 < 3)
            {
                x13_5 = (*s_3[8] * *s_3[4]);
            }
            else
            {
                int64_t i_55;
                if (x10_9 != 3)
                {
                    i_55 = (x10_9 & 0xfffffffc);
                    v1_5 = 1;
                    *v1_5[8] = 1;
                    void* x13_6 = (var_880_1 + 8);
                    int64_t i_51 = i_55;
                    int128_t v0_17 = v1_5;
                    int64_t i_4;
                    do
                    {
                        v2_3 = *(x13_6 - 8);
                        v3_2 = *x13_6;
                        /* unimplemented  {sxtl v0.2d, v2.2s} */;
                        /* unimplemented  {sxtl v1.2d, v3.2s} */;
                        int64_t x2_9 = v1_5;
                        int64_t x0_29 = (v0_17 * v1_5);
                        int64_t x15_6 = (v1_5 * v0_17);
                        v1_5 = (v1_5 * v0_17);
                        int64_t x16_7 = (v0_17 * x2_9);
                        v0_17 = x0_29;
                        i_4 = i_51;
                        i_51 = (i_51 - 4);
                        *v1_5[8] = x15_6;
                        *v0_17[8] = x16_7;
                        x13_6 = (x13_6 + 0x10);
                    } while (i_4 != 4);
                    x13_5 = ((v0_17 * v1_5) * (v0_17 * v1_5));
                }
                else
                {
                    i_55 = 0;
                    x13_5 = 1;
                }
                if ((x10_9 == 3 || (x10_9 != 3 && i_55 != x10_9)))
                {
                    int64_t i_47 = (x10_9 - i_55);
                    void* x11_6 = (var_880_1 + (i_55 << 2));
                    int64_t i_5;
                    do
                    {
                        int64_t x12_2 = *x11_6;
                        x11_6 = (x11_6 + 4);
                        i_5 = i_47;
                        i_47 = (i_47 - 1);
                        x13_5 = (x13_5 * x12_2);
                    } while (i_5 != 1);
                }
            }
            var_900_1 = (x9_12 + (x13_5 * x8_19));
        }
        cv::MatConstIterator::seek(&var_920, false);
        int64_t* s_26 = s_2;
        *s_26 = x21_2;
        int32_t* x1_9 = var_920;
        if (x1_9 != 0)
        {
            void* s_32 = (s_26 + var_918);
            s_2 = s_32;
            if (s_32 >= var_900_1)
            {
                s_2 = s_26;
                cv::MatConstIterator::seek(&var_920, true);
                x1_9 = var_920;
                s_26 = s_2;
            }
            else
            {
                s_26 = s_32;
            }
        }
        int64_t x9_14 = var_918;
        int64_t* s_37 = s_5;
        int32_t** var_948 = x1_9;
        int64_t* s_46 = s_26;
        int64_t var_930_1 = var_908_1;
        *s_26 = s_37[1];
        if (x1_9 == 0)
        {
            *s_26 = 0;
        }
        else
        {
            void* s_51 = (s_26 + x9_14);
            void* s_70 = s_51;
            if (s_51 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_37 = s_5;
                s_51 = s_26;
                x1_9 = var_948;
            }
            *s_51 = s_37[2];
            void* s_58;
            if (x1_9 == 0)
            {
                s_58 = s_51;
                *s_58 = 0;
            }
            else
            {
                s_58 = (s_51 + x9_14);
                void* s_71 = s_58;
                if (s_58 >= var_900_1)
                {
                    cv::MatConstIterator::seek(&var_948, true);
                    s_58 = s_51;
                    x1_9 = var_948;
                }
                *s_58 = 0;
            }
            if ((x1_9 == 0 || (x1_9 != 0 && x1_9 != 0)))
            {
                s_26 = (s_58 + x9_14);
                int64_t* s_47 = s_26;
                if (s_26 >= var_900_1)
                {
                    cv::MatConstIterator::seek(&var_948, true);
                    s_26 = s_58;
                    x1_9 = var_948;
                }
            }
            if ((x1_9 == 0 || x1_9 == 0))
            {
                s_26 = s_58;
            }
        }
        int64_t* s_33 = s_5;
        *s_26 = *(s_33 + *var_810_1);
        int64_t* s_59;
        if (x1_9 == 0)
        {
            s_59 = s_26;
        }
        else
        {
            s_59 = (s_26 + x9_14);
            int64_t* s_72 = s_59;
            if (s_59 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_33 = s_5;
                s_59 = s_26;
                x1_9 = var_948;
            }
        }
        *s_59 = *((s_33 + *var_810_1) + 8);
        int64_t* s_76;
        if (x1_9 == 0)
        {
            s_76 = s_59;
        }
        else
        {
            s_76 = (s_59 + x9_14);
            int64_t* s_85 = s_76;
            if (s_76 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_33 = s_5;
                s_76 = s_59;
                x1_9 = var_948;
            }
        }
        *s_76 = *((s_33 + *var_810_1) + 0x10);
        int64_t* s_86;
        if (x1_9 == 0)
        {
            s_86 = s_76;
            *s_86 = 0;
        }
        else
        {
            s_86 = (s_76 + x9_14);
            int64_t* s_93 = s_86;
            if (s_86 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_86 = s_76;
                x1_9 = var_948;
            }
            *s_86 = 0;
        }
        int64_t* s_95;
        if ((x1_9 == 0 || (x1_9 != 0 && x1_9 != 0)))
        {
            s_95 = (s_86 + x9_14);
            int64_t* s_99 = s_95;
            if (s_95 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_95 = s_86;
                x1_9 = var_948;
            }
        }
        if ((x1_9 == 0 || x1_9 == 0))
        {
            s_95 = s_86;
        }
        int64_t* s_27 = s_5;
        *s_95 = *(s_27 + (*var_810_1 << 1));
        int64_t* s_100;
        if (x1_9 == 0)
        {
            s_100 = s_95;
        }
        else
        {
            s_100 = (s_95 + x9_14);
            int64_t* s_105 = s_100;
            if (s_100 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_27 = s_5;
                s_100 = s_95;
                x1_9 = var_948;
            }
        }
        *s_100 = *((s_27 + (*var_810_1 << 1)) + 8);
        int64_t* s_107;
        if (x1_9 == 0)
        {
            s_107 = s_100;
        }
        else
        {
            s_107 = (s_100 + x9_14);
            int64_t* s_111 = s_107;
            if (s_107 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_27 = s_5;
                s_107 = s_100;
                x1_9 = var_948;
            }
        }
        *s_107 = *((s_27 + (*var_810_1 << 1)) + 0x10);
        int64_t* s_112;
        if (x1_9 == 0)
        {
            s_112 = s_107;
            *s_112 = 0;
        }
        else
        {
            s_112 = (s_107 + x9_14);
            int64_t* s_117 = s_112;
            if (s_112 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_112 = s_107;
                x1_9 = var_948;
            }
            *s_112 = 0;
        }
        int64_t* s_119;
        if ((x1_9 == 0 || (x1_9 != 0 && x1_9 != 0)))
        {
            s_119 = (s_112 + x9_14);
            int64_t* s_124 = s_119;
            if (s_119 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_119 = s_112;
                x1_9 = var_948;
            }
            *s_119 = 0;
        }
        if ((x1_9 == 0 || x1_9 == 0))
        {
            s_119 = s_112;
            *s_119 = 0;
        }
        int64_t* s_125;
        if (((x1_9 == 0 || x1_9 == 0) || ((x1_9 == 0 || (x1_9 != 0 && x1_9 != 0)) && x1_9 != 0)))
        {
            s_125 = (s_119 + x9_14);
            int64_t* s_128 = s_125;
            if (s_125 >= var_900_1)
            {
                cv::MatConstIterator::seek(&var_948, true);
                s_125 = s_119;
                x1_9 = var_948;
            }
            *s_125 = 0;
            if (x1_9 != 0)
            {
                goto label_2ee5c;
            }
            goto label_2eeec;
        }
        if (((x1_9 == 0 || x1_9 == 0) || ((x1_9 == 0 || (x1_9 != 0 && x1_9 != 0)) && x1_9 == 0)))
        {
            s_125 = s_119;
            *s_125 = 0;
            int64_t* s_129;
            if (x1_9 != 0)
            {
            label_2ee5c:
                s_129 = (s_125 + x9_14);
                int64_t* s_132 = s_129;
                if (s_129 >= var_900_1)
                {
                    cv::MatConstIterator::seek(&var_948, true);
                    s_129 = s_125;
                    x1_9 = var_948;
                }
                *s_129 = 0;
                if (x1_9 != 0)
                {
                    goto label_2ee98;
                }
                goto label_2eef8;
            }
        label_2eeec:
            s_129 = s_125;
            *s_129 = 0;
            int64_t* s_133;
            if (x1_9 == 0)
            {
            label_2eef8:
                s_133 = s_129;
            }
            else
            {
            label_2ee98:
                s_133 = (s_129 + x9_14);
                int64_t* s_137 = s_133;
                if (s_133 >= var_900_1)
                {
                    cv::MatConstIterator::seek(&var_948, true);
                    s_133 = s_129;
                    x1_9 = var_948;
                }
            }
            *s_133 = 0x3ff0000000000000;
            if (x1_9 != 0)
            {
                void* x9_29 = (s_133 + x9_14);
                void* var_938_15 = x9_29;
                if (x9_29 >= var_900_1)
                {
                    int64_t* s_138 = s_133;
                    cv::MatConstIterator::seek(&var_948, true);
                }
            }
            int64_t x25_2 = (&var_3e0 | 8);
            __builtin_memset(&*var_3e0[4], 0, 0x3c);
            int64_t* var_398_3 = &var_390;
            int64_t var_388_2 = 0;
            var_390 = 0;
            var_3e0 = 0x42ff0006;
            int128_t v0_18;
            int128_t v1_6;
            int128_t v2_4;
            v0_18 = cv::Mat_<double>::operator=(&var_3e0);
            v2_4 = var_3e0;
            s_13 = s_14;
            int128_t var_3cc_1;
            int128_t var_52c = var_3cc_1;
            var_540 = v2_4;
            int128_t var_3b0_1;
            int128_t var_510_1 = var_3b0_1;
            int64_t var_500_2 = (&var_540 | 8);
            int64_t* var_4f8_2 = &var_4f0;
            int64_t var_4e8_2 = 0;
            var_4f0 = 0;
            int64_t* x0_48;
            if (v2_4 > 2)
            {
                x0_48 = &var_390;
                int64_t* var_398_4 = &var_390;
                int64_t var_3a0_4 = x25_2;
                var_500_2 = x25_2;
            }
            else
            {
                x0_48 = var_398_3;
                var_4f0 = *x0_48;
                int64_t var_4e8_3 = x0_48[1];
            }
            var_3e0 = 0x42ff0000;
            __builtin_memset((&var_3e0 | 4), 0, 0x34);
            *var_3b0_1[8] = 0;
            int128_t s_15;
            __builtin_memset(&s_15, 0, 0x20);
            if (x0_48 != &var_390)
            {
                cv::fastFree(x0_48);
            }
            int128_t var_890;
            int64_t x8_38 = *var_890[8];
            if (x8_38 != 0)
            {
                int32_t temp0_13;
                int32_t i_6;
                do
                {
                    temp0_13 = __ldaxr((x8_38 + 0x14));
                    i_6 = __stlxr((temp0_13 - 1), (x8_38 + 0x14));
                } while (i_6 != 0);
                if (temp0_13 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_890[8] = 0;
            __builtin_memset(&*s_3[0xc], 0, 0x20);
            if (s_3 >= 1)
            {
                int64_t i_7 = 0;
                do
                {
                    *(var_880_1 + (i_7 << 2)) = 0;
                    i_7 = (i_7 + 1);
                } while (i_7 < s_3);
            }
            if (var_878_1 != &var_870)
            {
                cv::fastFree(var_878_1);
            }
            var_920 = 0x42ff0000;
            __builtin_memset(&*var_920[4], 0, 0x3c);
            int64_t* var_8e0_1 = &var_918;
            int64_t var_8d0;
            int64_t* var_8d8_1 = &var_8d0;
            var_8d0 = 0;
            int64_t var_8c8_1 = 0;
            var_950 = 0x400000004;
            int128_t v1_7;
            int128_t v2_5;
            int128_t v3_3;
            v1_7 = cv::Mat::create(&var_920, &*nullptr->ident.signature[2], &var_950);
            uint64_t x10_35 = *var_920[4];
            var_948 = &var_920;
            int64_t x8_43;
            if (x10_35 < 1)
            {
                x8_43 = 0;
            }
            else
            {
                x8_43 = var_8d8_1[(x10_35 - 1)];
            }
            uint32_t x9_34 = *var_920[1];
            int64_t* s;
            __builtin_memset(&s, 0, 0x18);
            void* s_48;
            int64_t var_928_2;
            if ((x9_34 & 0x40) != 0)
            {
                void* s_34 = s_2;
                s_48 = s_34;
                int64_t x13_9;
                if (x10_35 < 3)
                {
                    x13_9 = (*var_918[4] * var_918);
                }
                else
                {
                    int64_t i_56;
                    if (x10_35 != 3)
                    {
                        i_56 = (x10_35 & 0xfffffffc);
                        v1_7 = 1;
                        *v1_7[8] = 1;
                        void* x13_10 = &var_8e0_1[1];
                        int64_t i_52 = i_56;
                        int128_t v0_19 = v1_7;
                        int64_t i_8;
                        do
                        {
                            v2_5 = *(x13_10 - 8);
                            v3_3 = *x13_10;
                            /* unimplemented  {sxtl v0.2d, v2.2s} */;
                            /* unimplemented  {sxtl v1.2d, v3.2s} */;
                            int64_t x2_29 = v1_7;
                            int64_t x0_52 = (v0_19 * v1_7);
                            int64_t x15_10 = (v1_7 * v0_19);
                            v1_7 = (v1_7 * v0_19);
                            int64_t x16_11 = (v0_19 * x2_29);
                            v0_19 = x0_52;
                            i_8 = i_52;
                            i_52 = (i_52 - 4);
                            *v1_7[8] = x15_10;
                            *v0_19[8] = x16_11;
                            x13_10 = (x13_10 + 0x10);
                        } while (i_8 != 4);
                        x13_9 = ((v0_19 * v1_7) * (v0_19 * v1_7));
                    }
                    else
                    {
                        i_56 = 0;
                        x13_9 = 1;
                    }
                    if ((x10_35 == 3 || (x10_35 != 3 && i_56 != x10_35)))
                    {
                        int64_t i_48 = (x10_35 - i_56);
                        void* x11_14 = (var_8e0_1 + (i_56 << 2));
                        int64_t i_9;
                        do
                        {
                            int64_t x12_5 = *x11_14;
                            x11_14 = (x11_14 + 4);
                            i_9 = i_48;
                            i_48 = (i_48 - 1);
                            x13_9 = (x13_9 * x12_5);
                        } while (i_9 != 1);
                    }
                }
                var_928_2 = (s_34 + (x13_9 * x8_43));
            }
            cv::MatConstIterator::seek(&var_948, false);
            int64_t* s_28 = s;
            *s_28 = 0x3ff0000000000000;
            int32_t** x1_12 = var_948;
            if (x1_12 != 0)
            {
                void* s_52 = (s_28 + x8_43);
                void* s_73 = s_52;
                if (s_52 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_948, true);
                    x1_12 = var_948;
                }
                else
                {
                    s_28 = s_52;
                }
            }
            int32_t** var_978 = x1_12;
            int64_t* s_42 = s_28;
            void* s_68 = s_48;
            *s_28 = 0;
            if (x1_12 == 0)
            {
                *s_28 = 0;
            }
            else
            {
                void* s_53 = (s_28 + x8_43);
                void* s_62 = s_53;
                if (s_53 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_978, true);
                    s_53 = s_28;
                    x1_12 = var_978;
                }
                *s_53 = 0;
                void* s_77;
                if (x1_12 == 0)
                {
                    s_77 = s_53;
                }
                else
                {
                    s_77 = (s_53 + x8_43);
                    void* s_81 = s_77;
                    if (s_77 >= var_928_2)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_77 = s_53;
                        x1_12 = var_978;
                    }
                }
                *s_77 = vneg_f64(*s_9);
                void* s_87;
                if (x1_12 == 0)
                {
                    s_87 = s_77;
                    *s_87 = 0;
                }
                else
                {
                    s_87 = (s_77 + x8_43);
                    void* s_90 = s_87;
                    if (s_87 >= var_928_2)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_87 = s_77;
                        x1_12 = var_978;
                    }
                    *s_87 = 0;
                }
                void* s_78;
                if ((x1_12 == 0 || (x1_12 != 0 && x1_12 != 0)))
                {
                    s_78 = (s_87 + x8_43);
                    void* s_82 = s_78;
                    if (s_78 >= var_928_2)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_78 = s_87;
                        x1_12 = var_978;
                    }
                }
                if ((x1_12 == 0 || x1_12 == 0))
                {
                    s_78 = s_87;
                }
                *s_78 = 0x3ff0000000000000;
                void* s_54;
                if (x1_12 == 0)
                {
                    s_54 = s_78;
                    *s_54 = 0;
                }
                else
                {
                    s_54 = (s_78 + x8_43);
                    void* s_63 = s_54;
                    if (s_54 >= var_928_2)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_54 = s_78;
                        x1_12 = var_978;
                    }
                    *s_54 = 0;
                }
                if ((x1_12 == 0 || (x1_12 != 0 && x1_12 != 0)))
                {
                    s_28 = (s_54 + x8_43);
                    int64_t* s_43 = s_28;
                    if (s_28 >= var_928_2)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_28 = s_54;
                        x1_12 = var_978;
                    }
                }
                if ((x1_12 == 0 || x1_12 == 0))
                {
                    s_28 = s_54;
                }
            }
            *s_28 = vneg_f64(*(s_9 + *var_648_1));
            int64_t* s_55;
            if (x1_12 == 0)
            {
                s_55 = s_28;
                *s_55 = 0;
            }
            else
            {
                s_55 = (s_28 + x8_43);
                int64_t* s_64 = s_55;
                if (s_55 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_978, true);
                    s_55 = s_28;
                    x1_12 = var_978;
                }
                *s_55 = 0;
            }
            int64_t* s_79;
            if ((x1_12 == 0 || (x1_12 != 0 && x1_12 != 0)))
            {
                s_79 = (s_55 + x8_43);
                int64_t* s_83 = s_79;
                if (s_79 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_978, true);
                    s_79 = s_55;
                    x1_12 = var_978;
                }
                *s_79 = 0;
            }
            if ((x1_12 == 0 || x1_12 == 0))
            {
                s_79 = s_55;
                *s_79 = 0;
            }
            int64_t* s_88;
            if (((x1_12 == 0 || x1_12 == 0) || ((x1_12 == 0 || (x1_12 != 0 && x1_12 != 0)) && x1_12 != 0)))
            {
                s_88 = (s_79 + x8_43);
                int64_t* s_91 = s_88;
                if (s_88 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_978, true);
                    s_88 = s_79;
                    x1_12 = var_978;
                }
            }
            if (((x1_12 == 0 || x1_12 == 0) || ((x1_12 == 0 || (x1_12 != 0 && x1_12 != 0)) && x1_12 == 0)))
            {
                s_88 = s_79;
            }
            *s_88 = 0x3ff0000000000000;
            int64_t* s_94;
            if (x1_12 == 0)
            {
                s_94 = s_88;
            }
            else
            {
                s_94 = (s_88 + x8_43);
                int64_t* s_97 = s_94;
                if (s_94 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_978, true);
                    s_94 = s_88;
                    x1_12 = var_978;
                }
            }
            *s_94 = vneg_f64(*(s_9 + (*var_648_1 << 1)));
            int64_t* s_101;
            if (x1_12 == 0)
            {
                s_101 = s_94;
                *s_101 = 0;
            }
            else
            {
                s_101 = (s_94 + x8_43);
                int64_t* s_103 = s_101;
                if (s_101 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_978, true);
                    s_101 = s_94;
                    x1_12 = var_978;
                }
                *s_101 = 0;
            }
            int64_t* s_106;
            if ((x1_12 == 0 || (x1_12 != 0 && x1_12 != 0)))
            {
                s_106 = (s_101 + x8_43);
                int64_t* s_109 = s_106;
                if (s_106 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_978, true);
                    s_106 = s_101;
                    x1_12 = var_978;
                }
                *s_106 = 0;
            }
            if ((x1_12 == 0 || x1_12 == 0))
            {
                s_106 = s_101;
                *s_106 = 0;
            }
            int64_t* s_114;
            if (((x1_12 == 0 || x1_12 == 0) || ((x1_12 == 0 || (x1_12 != 0 && x1_12 != 0)) && x1_12 != 0)))
            {
                s_114 = (s_106 + x8_43);
                int64_t* s_115 = s_114;
                if (s_114 >= var_928_2)
                {
                    cv::MatConstIterator::seek(&var_978, true);
                    s_114 = s_106;
                    x1_12 = var_978;
                }
                *s_114 = 0;
                if (x1_12 != 0)
                {
                    goto label_2f618;
                }
                goto label_2f66c;
            }
            if (((x1_12 == 0 || x1_12 == 0) || ((x1_12 == 0 || (x1_12 != 0 && x1_12 != 0)) && x1_12 == 0)))
            {
                s_114 = s_106;
                *s_114 = 0;
                int64_t* s_118;
                if (x1_12 == 0)
                {
                label_2f66c:
                    s_118 = s_114;
                }
                else
                {
                label_2f618:
                    s_118 = (s_114 + x8_43);
                    int64_t* s_121 = s_118;
                    if (s_118 >= var_928_2)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_118 = s_114;
                        x1_12 = var_978;
                    }
                }
                *s_118 = 0x3ff0000000000000;
                if (x1_12 != 0)
                {
                    void* x9_50 = (s_118 + x8_43);
                    void* var_968_15 = x9_50;
                    if (x9_50 >= var_928_2)
                    {
                        int64_t* s_122 = s_118;
                        cv::MatConstIterator::seek(&var_978, true);
                    }
                }
                int64_t x25_3 = (&var_3e0 | 8);
                __builtin_memset(&*var_3e0[4], 0, 0x3c);
                int64_t* var_398_5 = &var_390;
                int64_t var_388_3 = 0;
                var_390 = 0;
                var_3e0 = 0x42ff0006;
                int128_t v0_21;
                int128_t v1_8;
                int128_t v2_6;
                v0_21 = cv::Mat_<double>::operator=(&var_3e0);
                v2_6 = var_3e0;
                s_3 = s_15;
                int128_t var_3cc_2;
                int128_t var_8ac = var_3cc_2;
                var_8c0 = v2_6;
                int128_t var_3b0_2;
                int128_t var_890_1 = var_3b0_2;
                int64_t var_880_2 = (&var_8c0 | 8);
                int64_t* var_878_2 = &var_870;
                var_870 = 0;
                int64_t var_868_2 = 0;
                int64_t* x0_71;
                if (v2_6 > 2)
                {
                    x0_71 = &var_390;
                    int64_t* var_398_6 = &var_390;
                    int64_t var_3a0_6 = x25_3;
                    var_880_2 = x25_3;
                }
                else
                {
                    x0_71 = var_398_5;
                    var_870 = *x0_71;
                    int64_t var_868_3 = x0_71[1];
                }
                var_3e0 = 0x42ff0000;
                __builtin_memset((&var_3e0 | 4), 0, 0x34);
                *var_3b0_2[8] = 0;
                int128_t s_16;
                __builtin_memset(&s_16, 0, 0x20);
                if (x0_71 != &var_390)
                {
                    cv::fastFree(x0_71);
                }
                int128_t var_8f0;
                int64_t x8_52 = *var_8f0[8];
                if (x8_52 != 0)
                {
                    int32_t temp0_17;
                    int32_t i_10;
                    do
                    {
                        temp0_17 = __ldaxr((x8_52 + 0x14));
                        i_10 = __stlxr((temp0_17 - 1), (x8_52 + 0x14));
                    } while (i_10 != 0);
                    if (temp0_17 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int32_t x8_54 = *var_920[4];
                *var_8f0[8] = 0;
                __builtin_memset(&s_2, 0, 0x20);
                if (x8_54 >= 1)
                {
                    int64_t i_11 = 0;
                    do
                    {
                        *(var_8e0_1 + (i_11 << 2)) = 0;
                        i_11 = (i_11 + 1);
                    } while (i_11 < *var_920[4]);
                }
                if (var_8d8_1 != &var_8d0)
                {
                    cv::fastFree(var_8d8_1);
                }
                var_920 = 0x42ff0000;
                __builtin_memset(&*var_920[4], 0, 0x3c);
                int64_t* var_8e0_2 = &var_918;
                int64_t* var_8d8_2 = &var_8d0;
                var_8d0 = 0;
                int64_t var_8c8_2 = 0;
                var_950 = 0x400000004;
                int128_t v1_9;
                int128_t v2_7;
                int128_t v3_4;
                v1_9 = cv::Mat::create(&var_920, &*nullptr->ident.signature[2], &var_950);
                uint64_t x10_61 = *var_920[4];
                int64_t* s_19;
                int64_t x23_1 = *s_19;
                var_948 = &var_920;
                int64_t x8_58;
                if (x10_61 < 1)
                {
                    x8_58 = 0;
                }
                else
                {
                    x8_58 = var_8d8_2[(x10_61 - 1)];
                }
                uint32_t x9_55 = *var_920[1];
                int64_t* s_1;
                __builtin_memset(&s_1, 0, 0x18);
                void* s_49;
                int64_t var_928_3;
                if ((x9_55 & 0x40) != 0)
                {
                    void* s_35 = s_2;
                    s_49 = s_35;
                    int64_t x13_13;
                    if (x10_61 < 3)
                    {
                        x13_13 = (*var_918[4] * var_918);
                    }
                    else
                    {
                        int64_t i_57;
                        if (x10_61 != 3)
                        {
                            i_57 = (x10_61 & 0xfffffffc);
                            v1_9 = 1;
                            *v1_9[8] = 1;
                            void* x13_14 = &var_8e0_2[1];
                            int64_t i_53 = i_57;
                            int128_t v0_22 = v1_9;
                            int64_t i_12;
                            do
                            {
                                v2_7 = *(x13_14 - 8);
                                v3_4 = *x13_14;
                                /* unimplemented  {sxtl v0.2d, v2.2s} */;
                                /* unimplemented  {sxtl v1.2d, v3.2s} */;
                                int64_t x2_49 = v1_9;
                                int64_t x0_75 = (v0_22 * v1_9);
                                int64_t x15_14 = (v1_9 * v0_22);
                                v1_9 = (v1_9 * v0_22);
                                int64_t x16_15 = (v0_22 * x2_49);
                                v0_22 = x0_75;
                                i_12 = i_53;
                                i_53 = (i_53 - 4);
                                *v1_9[8] = x15_14;
                                *v0_22[8] = x16_15;
                                x13_14 = (x13_14 + 0x10);
                            } while (i_12 != 4);
                            x13_13 = ((v0_22 * v1_9) * (v0_22 * v1_9));
                        }
                        else
                        {
                            i_57 = 0;
                            x13_13 = 1;
                        }
                        if ((x10_61 == 3 || (x10_61 != 3 && i_57 != x10_61)))
                        {
                            int64_t i_49 = (x10_61 - i_57);
                            void* x11_18 = (var_8e0_2 + (i_57 << 2));
                            int64_t i_13;
                            do
                            {
                                int64_t x12_6 = *x11_18;
                                x11_18 = (x11_18 + 4);
                                i_13 = i_49;
                                i_49 = (i_49 - 1);
                                x13_13 = (x13_13 * x12_6);
                            } while (i_13 != 1);
                        }
                    }
                    var_928_3 = (s_35 + (x13_13 * x8_58));
                }
                cv::MatConstIterator::seek(&var_948, false);
                int64_t* s_29 = s_1;
                *s_29 = x23_1;
                int32_t** x1_15 = var_948;
                if (x1_15 != 0)
                {
                    void* s_56 = (s_29 + x8_58);
                    void* s_74 = s_56;
                    if (s_56 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_948, true);
                        x1_15 = var_948;
                    }
                    else
                    {
                        s_29 = s_56;
                    }
                }
                int64_t* s_38 = s_19;
                var_978 = x1_15;
                int64_t* s_44 = s_29;
                void* s_69 = s_49;
                *s_29 = s_38[1];
                if (x1_15 == 0)
                {
                    *s_29 = s_38[2];
                    *s_29 = *s_9;
                }
                else
                {
                    void* s_57 = (s_29 + x8_58);
                    void* s_65 = s_57;
                    if (s_57 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_38 = s_19;
                        s_57 = s_29;
                        x1_15 = var_978;
                    }
                    *s_57 = s_38[2];
                    void* s_60;
                    if (x1_15 == 0)
                    {
                        s_60 = s_57;
                    }
                    else
                    {
                        s_60 = (s_57 + x8_58);
                        void* s_66 = s_60;
                        if (s_60 >= var_928_3)
                        {
                            cv::MatConstIterator::seek(&var_978, true);
                            s_60 = s_57;
                            x1_15 = var_978;
                        }
                    }
                    *s_60 = *s_9;
                    if (x1_15 == 0)
                    {
                        s_29 = s_60;
                    }
                    else
                    {
                        s_29 = (s_60 + x8_58);
                        int64_t* s_45 = s_29;
                        if (s_29 >= var_928_3)
                        {
                            cv::MatConstIterator::seek(&var_978, true);
                            s_29 = s_60;
                            x1_15 = var_978;
                        }
                    }
                }
                int64_t* s_36 = s_19;
                *s_29 = *(s_36 + *var_238_1);
                int64_t* s_61;
                if (x1_15 == 0)
                {
                    s_61 = s_29;
                }
                else
                {
                    s_61 = (s_29 + x8_58);
                    int64_t* s_67 = s_61;
                    if (s_61 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_36 = s_19;
                        s_61 = s_29;
                        x1_15 = var_978;
                    }
                }
                *s_61 = *((s_36 + *var_238_1) + 8);
                int64_t* s_80;
                if (x1_15 == 0)
                {
                    s_80 = s_61;
                }
                else
                {
                    s_80 = (s_61 + x8_58);
                    int64_t* s_84 = s_80;
                    if (s_80 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_36 = s_19;
                        s_80 = s_61;
                        x1_15 = var_978;
                    }
                }
                *s_80 = *((s_36 + *var_238_1) + 0x10);
                int64_t* s_89;
                if (x1_15 == 0)
                {
                    s_89 = s_80;
                }
                else
                {
                    s_89 = (s_80 + x8_58);
                    int64_t* s_92 = s_89;
                    if (s_89 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_89 = s_80;
                        x1_15 = var_978;
                    }
                }
                *s_89 = *(s_9 + *var_648_1);
                int64_t* s_96;
                if (x1_15 == 0)
                {
                    s_96 = s_89;
                }
                else
                {
                    s_96 = (s_89 + x8_58);
                    int64_t* s_98 = s_96;
                    if (s_96 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_96 = s_89;
                        x1_15 = var_978;
                    }
                }
                int64_t* s_30 = s_19;
                *s_96 = *(s_30 + (*var_238_1 << 1));
                int64_t* s_102;
                if (x1_15 == 0)
                {
                    s_102 = s_96;
                }
                else
                {
                    s_102 = (s_96 + x8_58);
                    int64_t* s_104 = s_102;
                    if (s_102 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_30 = s_19;
                        s_102 = s_96;
                        x1_15 = var_978;
                    }
                }
                *s_102 = *((s_30 + (*var_238_1 << 1)) + 8);
                int64_t* s_108;
                if (x1_15 == 0)
                {
                    s_108 = s_102;
                }
                else
                {
                    s_108 = (s_102 + x8_58);
                    int64_t* s_110 = s_108;
                    if (s_108 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_30 = s_19;
                        s_108 = s_102;
                        x1_15 = var_978;
                    }
                }
                *s_108 = *((s_30 + (*var_238_1 << 1)) + 0x10);
                int64_t* s_113;
                if (x1_15 == 0)
                {
                    s_113 = s_108;
                }
                else
                {
                    s_113 = (s_108 + x8_58);
                    int64_t* s_116 = s_113;
                    if (s_113 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_113 = s_108;
                        x1_15 = var_978;
                    }
                }
                *s_113 = *(s_9 + (*var_648_1 << 1));
                int64_t* s_120;
                if (x1_15 == 0)
                {
                    s_120 = s_113;
                    *s_120 = 0;
                }
                else
                {
                    s_120 = (s_113 + x8_58);
                    int64_t* s_123 = s_120;
                    if (s_120 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_120 = s_113;
                        x1_15 = var_978;
                    }
                    *s_120 = 0;
                }
                int64_t* s_126;
                if ((x1_15 == 0 || (x1_15 != 0 && x1_15 != 0)))
                {
                    s_126 = (s_120 + x8_58);
                    int64_t* s_127 = s_126;
                    if (s_126 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_126 = s_120;
                        x1_15 = var_978;
                    }
                    *s_126 = 0;
                }
                if ((x1_15 == 0 || x1_15 == 0))
                {
                    s_126 = s_120;
                    *s_126 = 0;
                }
                int64_t* s_130;
                if (((x1_15 == 0 || x1_15 == 0) || ((x1_15 == 0 || (x1_15 != 0 && x1_15 != 0)) && x1_15 != 0)))
                {
                    s_130 = (s_126 + x8_58);
                    int64_t* s_131 = s_130;
                    if (s_130 >= var_928_3)
                    {
                        cv::MatConstIterator::seek(&var_978, true);
                        s_130 = s_126;
                        x1_15 = var_978;
                    }
                    *s_130 = 0;
                    if (x1_15 != 0)
                    {
                        goto label_2fdf4;
                    }
                    goto label_2fe48;
                }
                if (((x1_15 == 0 || x1_15 == 0) || ((x1_15 == 0 || (x1_15 != 0 && x1_15 != 0)) && x1_15 == 0)))
                {
                    s_130 = s_126;
                    *s_130 = 0;
                    int64_t* s_134;
                    if (x1_15 == 0)
                    {
                    label_2fe48:
                        s_134 = s_130;
                    }
                    else
                    {
                    label_2fdf4:
                        s_134 = (s_130 + x8_58);
                        int64_t* s_135 = s_134;
                        if (s_134 >= var_928_3)
                        {
                            cv::MatConstIterator::seek(&var_978, true);
                            s_134 = s_130;
                            x1_15 = var_978;
                        }
                    }
                    *s_134 = 0x3ff0000000000000;
                    if (x1_15 != 0)
                    {
                        void* x9_79 = (s_134 + x8_58);
                        void* var_968_30 = x9_79;
                        if (x9_79 >= var_928_3)
                        {
                            int64_t* s_136 = s_134;
                            cv::MatConstIterator::seek(&var_978, true);
                        }
                    }
                    int64_t x25_4 = (&var_3e0 | 8);
                    __builtin_memset(&*var_3e0[4], 0, 0x3c);
                    int64_t var_3a0_7 = x25_4;
                    int64_t* var_398_7 = &var_390;
                    int64_t var_388_4 = 0;
                    var_390 = 0;
                    var_3e0 = 0x42ff0006;
                    int128_t v0_23;
                    int128_t s_41;
                    v0_23 = cv::Mat_<double>::operator=(&var_3e0);
                    int128_t var_3b0_3;
                    if (&var_3e0 == arg3)
                    {
                        int64_t x8_88 = *var_3b0_3[8];
                        if (x8_88 != 0)
                        {
                            int32_t temp0_19;
                            int32_t i_14;
                            do
                            {
                                temp0_19 = __ldaxr((x8_88 + 0x14));
                                i_14 = __stlxr((temp0_19 - 1), (x8_88 + 0x14));
                            } while (i_14 != 0);
                            if (temp0_19 == 1)
                            {
                                cv::Mat::deallocate();
                            }
                        }
                    }
                    else
                    {
                        int64_t x8_82 = *(arg3 + 0x38);
                        if (x8_82 != 0)
                        {
                            int32_t temp0_18;
                            int32_t i_15;
                            do
                            {
                                temp0_18 = __ldaxr((x8_82 + 0x14));
                                i_15 = __stlxr((temp0_18 - 1), (x8_82 + 0x14));
                            } while (i_15 != 0);
                            if (temp0_18 == 1)
                            {
                                v0_23 = cv::Mat::deallocate();
                            }
                        }
                        int32_t x8_84 = *(arg3 + 4);
                        v0_23 = 0;
                        *v0_23[8] = 0;
                        *(arg3 + 0x38) = 0;
                        __builtin_memset(&arg3[1], 0, 0x20);
                        if (x8_84 >= 1)
                        {
                            int64_t x8_85 = arg3[4];
                            int64_t i_16 = 0;
                            do
                            {
                                *(x8_85 + (i_16 << 2)) = 0;
                                i_16 = (i_16 + 1);
                            } while (i_16 < *(arg3 + 4));
                        }
                        v0_23 = var_3e0;
                        s_41 = s_16;
                        void* x0_95 = *(arg3 + 0x48);
                        *arg3 = v0_23;
                        arg3[1] = s_41;
                        int128_t var_3cc_3;
                        arg3[2] = var_3cc_3;
                        arg3[3] = var_3b0_3;
                        int32_t x8_87;
                        if (x0_95 == &arg3[5])
                        {
                            x8_87 = v0_23;
                        }
                        else
                        {
                            cv::fastFree(x0_95);
                            arg3[4] = (arg3 + 8);
                            *(arg3 + 0x48) = &arg3[5];
                            x8_87 = *var_3e0[4];
                            x0_95 = &arg3[5];
                        }
                        if (x8_87 > 2)
                        {
                            arg3[4] = var_3a0_7;
                            var_398_7 = &var_390;
                            var_3a0_7 = x25_4;
                        }
                        else
                        {
                            *x0_95 = *var_398_7;
                            *(x0_95 + 8) = var_398_7[1];
                        }
                        var_3e0 = 0x42ff0000;
                        __builtin_memset((&var_3e0 | 4), 0, 0x3c);
                    }
                    *var_3b0_3[8] = 0;
                    int128_t s_17;
                    __builtin_memset(&s_17, 0, 0x20);
                    if (*var_3e0[4] >= 1)
                    {
                        int64_t i_17 = 0;
                        do
                        {
                            *(var_3a0_7 + (i_17 << 2)) = 0;
                            i_17 = (i_17 + 1);
                        } while (i_17 < *var_3e0[4]);
                    }
                    if (var_398_7 != &var_390)
                    {
                        cv::fastFree(var_398_7);
                    }
                    int128_t var_8f0_1;
                    int64_t x8_93 = *var_8f0_1[8];
                    if (x8_93 != 0)
                    {
                        int32_t temp0_20;
                        int32_t i_18;
                        do
                        {
                            temp0_20 = __ldaxr((x8_93 + 0x14));
                            i_18 = __stlxr((temp0_20 - 1), (x8_93 + 0x14));
                        } while (i_18 != 0);
                        if (temp0_20 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int32_t x8_95 = *var_920[4];
                    *var_8f0_1[8] = 0;
                    __builtin_memset(&s_2, 0, 0x20);
                    if (x8_95 >= 1)
                    {
                        int64_t i_19 = 0;
                        do
                        {
                            *(var_8e0_2 + (i_19 << 2)) = 0;
                            i_19 = (i_19 + 1);
                        } while (i_19 < *var_920[4]);
                    }
                    if (var_8d8_2 != &var_8d0)
                    {
                        cv::fastFree(var_8d8_2);
                    }
                    cv::operator*(&var_540, &var_8c0);
                    *(*var_3e0 + 0x18)();
                    cv::MatExpr::~MatExpr();
                    int64_t x8_99 = *var_890_1[8];
                    if (x8_99 != 0)
                    {
                        int32_t temp0_21;
                        int32_t i_20;
                        do
                        {
                            temp0_21 = __ldaxr((x8_99 + 0x14));
                            i_20 = __stlxr((temp0_21 - 1), (x8_99 + 0x14));
                        } while (i_20 != 0);
                        if (temp0_21 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_890_1[8] = 0;
                    __builtin_memset(&*s_3[0xc], 0, 0x20);
                    if (s_3 >= 1)
                    {
                        int64_t i_21 = 0;
                        do
                        {
                            *(var_880_2 + (i_21 << 2)) = 0;
                            i_21 = (i_21 + 1);
                        } while (i_21 < s_3);
                    }
                    if (var_878_2 != &var_870)
                    {
                        cv::fastFree(var_878_2);
                    }
                    int64_t x8_104 = *var_510_1[8];
                    if (x8_104 != 0)
                    {
                        int32_t temp0_22;
                        int32_t i_22;
                        do
                        {
                            temp0_22 = __ldaxr((x8_104 + 0x14));
                            i_22 = __stlxr((temp0_22 - 1), (x8_104 + 0x14));
                        } while (i_22 != 0);
                        if (temp0_22 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_510_1[8] = 0;
                    __builtin_memset(&s_13, 0, 0x20);
                    if (s_12 >= 1)
                    {
                        int64_t i_23 = 0;
                        do
                        {
                            *(var_500_2 + (i_23 << 2)) = 0;
                            i_23 = (i_23 + 1);
                        } while (i_23 < s_12);
                    }
                    if (var_4f8_2 != &var_4f0)
                    {
                        cv::fastFree(var_4f8_2);
                    }
                    int128_t var_828;
                    int64_t x8_110 = *var_828[8];
                    if (x8_110 != 0)
                    {
                        int32_t temp0_23;
                        int32_t i_24;
                        do
                        {
                            temp0_23 = __ldaxr((x8_110 + 0x14));
                            i_24 = __stlxr((temp0_23 - 1), (x8_110 + 0x14));
                        } while (i_24 != 0);
                        if (temp0_23 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_828[8] = 0;
                    __builtin_memset(&s_5, 0, 0x20);
                    if (s_4 >= 1)
                    {
                        int64_t i_25 = 0;
                        do
                        {
                            *(var_818_1 + (i_25 << 2)) = 0;
                            i_25 = (i_25 + 1);
                        } while (i_25 < s_4);
                    }
                    if (var_810_1 != &var_808)
                    {
                        cv::fastFree(var_810_1);
                    }
                    int64_t var_7a8;
                    if (var_7a8 != 0)
                    {
                        int32_t temp0_24;
                        int32_t i_26;
                        do
                        {
                            temp0_24 = __ldaxr((var_7a8 + 0x14));
                            i_26 = __stlxr((temp0_24 - 1), (var_7a8 + 0x14));
                        } while (i_26 != 0);
                        if (temp0_24 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_7a8_1 = 0;
                    int128_t s_6;
                    __builtin_memset(&s_6, 0, 0x20);
                    int32_t var_7dc;
                    if (var_7dc >= 1)
                    {
                        int64_t i_27 = 0;
                        do
                        {
                            int64_t var_7a0;
                            *(var_7a0 + (i_27 << 2)) = 0;
                            i_27 = (i_27 + 1);
                        } while (i_27 < var_7dc);
                    }
                    void* var_798;
                    void var_790;
                    if (var_798 != &var_790)
                    {
                        cv::fastFree(var_798);
                    }
                    int64_t var_730;
                    if (var_730 != 0)
                    {
                        int32_t temp0_25;
                        int32_t i_28;
                        do
                        {
                            temp0_25 = __ldaxr((var_730 + 0x14));
                            i_28 = __stlxr((temp0_25 - 1), (var_730 + 0x14));
                        } while (i_28 != 0);
                        if (temp0_25 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_730_1 = 0;
                    __builtin_memset(&s_7, 0, 0x20);
                    if (*var_768[4] >= 1)
                    {
                        int64_t i_29 = 0;
                        do
                        {
                            int64_t var_728;
                            *(var_728 + (i_29 << 2)) = 0;
                            i_29 = (i_29 + 1);
                        } while (i_29 < *var_768[4]);
                    }
                    void* var_720;
                    void var_718;
                    if (var_720 != &var_718)
                    {
                        cv::fastFree(var_720);
                    }
                    int64_t var_6b8;
                    if (var_6b8 != 0)
                    {
                        int32_t temp0_26;
                        int32_t i_30;
                        do
                        {
                            temp0_26 = __ldaxr((var_6b8 + 0x14));
                            i_30 = __stlxr((temp0_26 - 1), (var_6b8 + 0x14));
                        } while (i_30 != 0);
                        if (temp0_26 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_6b8_1 = 0;
                    __builtin_memset(&s_8, 0, 0x20);
                    if (*var_6f0[4] >= 1)
                    {
                        int64_t i_31 = 0;
                        do
                        {
                            int64_t var_6b0;
                            *(var_6b0 + (i_31 << 2)) = 0;
                            i_31 = (i_31 + 1);
                        } while (i_31 < *var_6f0[4]);
                    }
                    void* var_6a8;
                    void var_6a0;
                    if (var_6a8 != &var_6a0)
                    {
                        cv::fastFree(var_6a8);
                    }
                    int64_t x8_127 = *var_660_1[8];
                    if (x8_127 != 0)
                    {
                        int32_t temp0_27;
                        int32_t i_32;
                        do
                        {
                            temp0_27 = __ldaxr((x8_127 + 0x14));
                            i_32 = __stlxr((temp0_27 - 1), (x8_127 + 0x14));
                        } while (i_32 != 0);
                        if (temp0_27 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_660_1[8] = 0;
                    __builtin_memset(&s_9, 0, 0x20);
                    if (*var_690[4] >= 1)
                    {
                        int64_t i_33 = 0;
                        do
                        {
                            *(var_650_1 + (i_33 << 2)) = 0;
                            i_33 = (i_33 + 1);
                        } while (i_33 < *var_690[4]);
                    }
                    if (var_648_1 != var_990_1)
                    {
                        cv::fastFree(var_648_1);
                    }
                    int64_t var_5e0;
                    if (var_5e0 != 0)
                    {
                        int32_t temp0_28;
                        int32_t i_34;
                        do
                        {
                            temp0_28 = __ldaxr((var_5e0 + 0x14));
                            i_34 = __stlxr((temp0_28 - 1), (var_5e0 + 0x14));
                        } while (i_34 != 0);
                        if (temp0_28 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_5e0_1 = 0;
                    int128_t s_10;
                    __builtin_memset(&s_10, 0, 0x20);
                    int32_t var_614;
                    if (var_614 >= 1)
                    {
                        int64_t i_35 = 0;
                        do
                        {
                            int64_t var_5d8;
                            *(var_5d8 + (i_35 << 2)) = 0;
                            i_35 = (i_35 + 1);
                        } while (i_35 < var_614);
                    }
                    void* var_5d0;
                    void var_5c8;
                    if (var_5d0 != &var_5c8)
                    {
                        cv::fastFree(var_5d0);
                    }
                    int64_t var_568;
                    if (var_568 != 0)
                    {
                        int32_t temp0_29;
                        int32_t i_36;
                        do
                        {
                            temp0_29 = __ldaxr((var_568 + 0x14));
                            i_36 = __stlxr((temp0_29 - 1), (var_568 + 0x14));
                        } while (i_36 != 0);
                        if (temp0_29 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_568_1 = 0;
                    int128_t s_11;
                    __builtin_memset(&s_11, 0, 0x20);
                    int32_t var_59c;
                    if (var_59c >= 1)
                    {
                        int64_t i_37 = 0;
                        do
                        {
                            int64_t var_560;
                            *(var_560 + (i_37 << 2)) = 0;
                            i_37 = (i_37 + 1);
                        } while (i_37 < var_59c);
                    }
                    void* var_558;
                    void var_550;
                    if (var_558 != &var_550)
                    {
                        cv::fastFree(var_558);
                    }
                    int128_t var_250;
                    int64_t x8_141 = *var_250[8];
                    if (x8_141 != 0)
                    {
                        int32_t temp0_30;
                        int32_t i_38;
                        do
                        {
                            temp0_30 = __ldaxr((x8_141 + 0x14));
                            i_38 = __stlxr((temp0_30 - 1), (x8_141 + 0x14));
                        } while (i_38 != 0);
                        if (temp0_30 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_250[8] = 0;
                    __builtin_memset(&s_19, 0, 0x20);
                    if (s_18 >= 1)
                    {
                        int64_t i_39 = 0;
                        do
                        {
                            *(var_240_1 + (i_39 << 2)) = 0;
                            i_39 = (i_39 + 1);
                        } while (i_39 < s_18);
                    }
                    if (var_238_1 != &var_230)
                    {
                        cv::fastFree(var_238_1);
                    }
                    int64_t var_1d0;
                    if (var_1d0 != 0)
                    {
                        int32_t temp0_31;
                        int32_t i_40;
                        do
                        {
                            temp0_31 = __ldaxr((var_1d0 + 0x14));
                            i_40 = __stlxr((temp0_31 - 1), (var_1d0 + 0x14));
                        } while (i_40 != 0);
                        if (temp0_31 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_1d0_1 = 0;
                    int128_t s_20;
                    __builtin_memset(&s_20, 0, 0x20);
                    int32_t var_204;
                    if (var_204 >= 1)
                    {
                        int64_t i_41 = 0;
                        do
                        {
                            int64_t var_1c8;
                            *(var_1c8 + (i_41 << 2)) = 0;
                            i_41 = (i_41 + 1);
                        } while (i_41 < var_204);
                    }
                    void* var_1c0;
                    void var_1b8;
                    if (var_1c0 != &var_1b8)
                    {
                        cv::fastFree(var_1c0);
                    }
                    int64_t var_158;
                    if (var_158 != 0)
                    {
                        int32_t temp0_32;
                        int32_t i_42;
                        do
                        {
                            temp0_32 = __ldaxr((var_158 + 0x14));
                            i_42 = __stlxr((temp0_32 - 1), (var_158 + 0x14));
                        } while (i_42 != 0);
                        if (temp0_32 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_158_1 = 0;
                    int128_t s_21;
                    __builtin_memset(&s_21, 0, 0x20);
                    int32_t var_18c;
                    if (var_18c >= 1)
                    {
                        int64_t i_43 = 0;
                        do
                        {
                            int64_t var_150;
                            *(var_150 + (i_43 << 2)) = 0;
                            i_43 = (i_43 + 1);
                        } while (i_43 < var_18c);
                    }
                    void* var_148;
                    void var_140;
                    if (var_148 != &var_140)
                    {
                        cv::fastFree(var_148);
                    }
                    int64_t var_e0;
                    if (var_e0 != 0)
                    {
                        int32_t temp0_33;
                        int32_t i_44;
                        do
                        {
                            temp0_33 = __ldaxr((var_e0 + 0x14));
                            i_44 = __stlxr((temp0_33 - 1), (var_e0 + 0x14));
                        } while (i_44 != 0);
                        if (temp0_33 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_e0_1 = 0;
                    int128_t s_22;
                    __builtin_memset(&s_22, 0, 0x20);
                    int32_t var_114;
                    if (var_114 >= 1)
                    {
                        int64_t i_45 = 0;
                        do
                        {
                            int64_t var_d8;
                            *(var_d8 + (i_45 << 2)) = 0;
                            i_45 = (i_45 + 1);
                        } while (i_45 < var_114);
                    }
                    void* var_d0;
                    void var_c8;
                    if (var_d0 != &var_c8)
                    {
                        cv::fastFree(var_d0);
                    }
                }
            }
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

int64_t feasibal_region::ground_process::GetCameraPlaneRT_(void* arg1, int32_t* arg2, int128_t* arg3, double arg4, double arg5, double arg6, double arg7, double arg8, double arg9, double arg10, int128_t arg11 @ v7)
{
    double v13;
    double var_90 = v13;
    int64_t v12;
    int64_t var_88 = v12;
    double v11;
    double var_80 = v11;
    double v10;
    double var_78 = v10;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    arg5 = *arg2;
    arg4 = arg2[1];
    if (arg4 >= 0f)
    {
        arg11 = *(arg2 + 8);
    }
    else
    {
        *(arg2 + 8);
        /* unimplemented  {fneg s1, s1} */;
        /* unimplemented  {fneg s0, s0} */;
        /* unimplemented  {fneg v7.2s, v2.2s} */;
    }
    arg6 = (arg5 * arg5);
    arg7 = (arg4 * arg4);
    arg8 = (arg11 * arg11);
    arg6 = (arg6 + arg7);
    arg6 = (arg6 + arg8);
    arg8 = (1.0 / vsqrt_f64(arg6));
    arg5 = (arg8 * arg5);
    arg6 = (arg8 * arg4);
    double v8 = (arg8 * arg11);
    double v9 = ((arg5 * arg5) + (arg6 * arg6));
    arg7 = (v8 + -1.0);
    if (!(vsqrt_f64((v9 + (arg7 * arg7))) < 9.9999999999999995e-07))
    {
        arg7 = 0.0;
        arg8 = (v8 * arg7);
        v10 = (arg5 * arg7);
        v11 = (arg6 * arg7);
        arg6 = (arg6 - arg8);
        arg5 = (arg8 - arg5);
        arg8 = (v10 - v11);
        arg4 = (1.0 / (vsqrt_f64(((arg8 * arg8) + ((arg6 * arg6) + (arg5 * arg5)))) + 2.2250738585072014e-308));
        v13 = (arg5 * arg4);
        arg6 = (arg6 * arg4);
        arg4 = (arg8 * arg4);
        int32_t x19_1 = -0x4036f025;
        double v0 = acos((((arg4 * arg7) + (arg6 + (v13 * arg7))) / (vsqrt_f64(((arg4 * arg4) + ((arg6 * arg6) + (v13 * v13)))) + 2.2250738585072014e-308)));
        double temp0_4 = vneg_f64(v0);
        double v2 = (v10 + v11);
        if (v13 > 0.0)
        {
            v10 = temp0_4;
        }
        else
        {
            v10 = v0;
        }
        double v0_1 = acos((((v8 + v2) / vsqrt_f64(((v8 * v8) + v9))) + 2.2250738585072014e-308));
        int32_t var_108 = 0x42ff0000;
        int128_t s_16;
        __builtin_memset(&s_16, 0, 0x3c);
        void* var_c8_1 = &*s_16[4];
        int64_t var_b8;
        int64_t* var_c0_1 = &var_b8;
        var_b8 = 0;
        int64_t var_b0_1 = 0;
        int64_t var_750 = 0x300000003;
        cv::Mat* x0_1;
        uint128_t v0_2;
        x0_1 = cv::Mat::create(&var_108, &*nullptr->ident.signature[2], &var_750);
        v0_2 = (v0_1 + 3.1415926535897931);
        v0_2 = v0_2;
        int32_t var_118;
        if (*(arg1 + 0x14) != 1)
        {
            x19_1 = -0x3fb6f025;
            var_118 = v0_2;
            float var_114_2 = v10;
        }
        else
        {
            var_118 = v0_2;
            int32_t var_114_1 = 0;
        }
        v0_2 = vdups_laneq_s32(arg11, 1);
        /* unimplemented  {fabs s0, s0} */;
        int32_t var_110_1 = x19_1;
        int64_t var_128_1 = 0;
        int32_t var_120_1 = v0_2;
        feasibal_region::ground_process::getTFMatrix(x0_1, &var_118);
        int32_t var_168;
        double v0_3;
        v0_3 = var_168;
        double* x9_1 = *s_16[0xc];
        int64_t x8_3 = *var_c0_1;
        *x9_1 = v0_3;
        int32_t var_158;
        v0_3 = var_158;
        void* x10_1 = (x9_1 + x8_3);
        void* x8_4 = (x9_1 + (x8_3 << 1));
        x9_1[1] = v0_3;
        int32_t var_148;
        v0_3 = var_148;
        x9_1[2] = v0_3;
        int32_t var_164;
        v0_3 = var_164;
        int128_t var_790_1;
        var_790_1 = &*s_16[0xc];
        *x10_1 = v0_3;
        int32_t var_154;
        v0_3 = var_154;
        *(x10_1 + 8) = v0_3;
        int32_t var_144;
        v0_3 = var_144;
        *(x10_1 + 0x10) = v0_3;
        int32_t var_160;
        v0_3 = var_160;
        *x8_4 = v0_3;
        int32_t var_150;
        v0_3 = var_150;
        *(x8_4 + 8) = v0_3;
        int32_t var_140;
        v0_3 = var_140;
        *(x8_4 + 0x10) = v0_3;
        int32_t var_660 = 0x42ff0000;
        int128_t s_4;
        __builtin_memset(&s_4, 0, 0x3c);
        void* var_620_1 = &*s_4[4];
        int64_t var_610;
        int64_t* var_618_1 = &var_610;
        var_610 = 0;
        int64_t var_608_1 = 0;
        var_750 = 0x100000003;
        int128_t v1_2;
        int128_t v2_1;
        int128_t v3_1;
        v1_2 = cv::Mat::create(&var_660, &*nullptr->ident.signature[2], &var_750);
        uint64_t x10_2 = s_4;
        int32_t var_138;
        v11 = var_138;
        int32_t* var_230 = &var_660;
        int64_t x8_6;
        if (x10_2 < 1)
        {
            x8_6 = 0;
        }
        else
        {
            x8_6 = var_618_1[(x10_2 - 1)];
        }
        uint32_t x9_3 = *var_660[1];
        double* s_14;
        __builtin_memset(&s_14, 0, 0x18);
        int64_t s_5;
        int64_t s_40;
        int64_t var_210_1;
        if ((x9_3 & 0x40) != 0)
        {
            int64_t s_23 = s_5;
            s_40 = s_23;
            int64_t x13_1;
            int32_t var_658;
            int32_t var_654;
            if (x10_2 < 3)
            {
                x13_1 = (var_654 * var_658);
            }
            else
            {
                int64_t i_44;
                if (x10_2 != 3)
                {
                    i_44 = (x10_2 & 0xfffffffc);
                    v1_2 = 1;
                    *v1_2[8] = 1;
                    void* x13_2 = (var_620_1 + 8);
                    int64_t i_40 = i_44;
                    int128_t v0_4 = v1_2;
                    int64_t i;
                    do
                    {
                        v2_1 = *(x13_2 - 8);
                        v3_1 = *x13_2;
                        /* unimplemented  {sxtl v0.2d, v2.2s} */;
                        /* unimplemented  {sxtl v1.2d, v3.2s} */;
                        int64_t x2_3 = v1_2;
                        int64_t x0_4 = (v0_4 * v1_2);
                        int64_t x15_2 = (v1_2 * v0_4);
                        v1_2 = (v1_2 * v0_4);
                        int64_t x16_3 = (v0_4 * x2_3);
                        v0_4 = x0_4;
                        i = i_40;
                        i_40 = (i_40 - 4);
                        *v1_2[8] = x15_2;
                        *v0_4[8] = x16_3;
                        x13_2 = (x13_2 + 0x10);
                    } while (i != 4);
                    x13_1 = ((v0_4 * v1_2) * (v0_4 * v1_2));
                }
                else
                {
                    i_44 = 0;
                    x13_1 = 1;
                }
                if ((x10_2 == 3 || (x10_2 != 3 && i_44 != x10_2)))
                {
                    int64_t i_36 = (x10_2 - i_44);
                    void* x11_3 = (var_620_1 + (i_44 << 2));
                    int64_t i_1;
                    do
                    {
                        int64_t x12_1 = *x11_3;
                        x11_3 = (x11_3 + 4);
                        i_1 = i_36;
                        i_36 = (i_36 - 1);
                        x13_1 = (x13_1 * x12_1);
                    } while (i_1 != 1);
                }
            }
            var_210_1 = (s_23 + (x13_1 * x8_6));
        }
        cv::MatConstIterator::seek(&var_230, false);
        double* s_17 = s_14;
        *s_17 = v11;
        int32_t* x1_2 = var_230;
        if (x1_2 != 0)
        {
            void* s_24 = (s_17 + x8_6);
            s_14 = s_24;
            if (s_24 >= var_210_1)
            {
                s_14 = s_17;
                cv::MatConstIterator::seek(&var_230, true);
                x1_2 = var_230;
                s_17 = s_14;
            }
            else
            {
                s_17 = s_24;
            }
        }
        int32_t var_134;
        double v0_5;
        v0_5 = var_134;
        int32_t* var_2a8 = x1_2;
        double* s_13 = s_17;
        int64_t s_65 = s_40;
        *s_17 = v0_5;
        int32_t var_130;
        if (x1_2 == 0)
        {
            v0_5 = var_130;
            *s_17 = v0_5;
        }
        else
        {
            double* s_25 = (s_17 + x8_6);
            s_13 = s_25;
            if (s_25 >= var_210_1)
            {
                s_13 = s_17;
                cv::MatConstIterator::seek(&var_2a8, true);
                s_25 = s_13;
                x1_2 = var_2a8;
            }
            v0_5 = var_130;
            *s_25 = v0_5;
            if (x1_2 != 0)
            {
                void* s_18 = (s_25 + x8_6);
                s_13 = s_18;
                if (s_18 >= var_210_1)
                {
                    s_13 = s_25;
                    cv::MatConstIterator::seek(&var_2a8, true);
                }
            }
        }
        int32_t var_500;
        int64_t x27_1 = (&var_500 | 8);
        int64_t x3;
        int64_t var_7c0_1 = x3;
        int128_t s_6;
        __builtin_memset(&s_6, 0, 0x3c);
        int64_t var_4b0;
        int64_t* var_4b8_1 = &var_4b0;
        int64_t var_4a8_1 = 0;
        var_4b0 = 0;
        var_500 = 0x42ff0006;
        int128_t v0_6;
        int128_t v1_3;
        int128_t v2_2;
        v0_6 = cv::Mat_<double>::operator=(&var_500);
        v1_3 = var_500;
        int128_t s_15 = s_6;
        int128_t var_1d0 = v1_3;
        int128_t var_4ec;
        int128_t var_1b0_1 = var_4ec;
        int128_t var_4d0;
        int128_t var_1a0_1 = var_4d0;
        int64_t var_190_1 = (&var_1d0 | 8);
        int64_t var_180;
        int64_t* var_188_1 = &var_180;
        int64_t var_178_1 = 0;
        var_180 = 0;
        int64_t* x0_10;
        if (v1_3 > 2)
        {
            x0_10 = &var_4b0;
            int64_t* var_4b8_2 = &var_4b0;
            int64_t var_4c0_2 = x27_1;
            var_190_1 = x27_1;
        }
        else
        {
            x0_10 = var_4b8_1;
            var_180 = *x0_10;
            int64_t var_178_2 = x0_10[1];
        }
        v0_6 = 0;
        *v0_6[8] = 0;
        var_500 = 0x42ff0000;
        __builtin_memset((&var_500 | 4), 0, 0x34);
        *var_4d0[8] = 0;
        __builtin_memset(&*s_6[0xc], 0, 0x20);
        if (x0_10 != &var_4b0)
        {
            cv::fastFree(x0_10);
        }
        int128_t var_630;
        int64_t x8_9 = *var_630[8];
        if (x8_9 != 0)
        {
            int32_t temp0_7;
            int32_t i_2;
            do
            {
                temp0_7 = __ldaxr((x8_9 + 0x14));
                i_2 = __stlxr((temp0_7 - 1), (x8_9 + 0x14));
            } while (i_2 != 0);
            if (temp0_7 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        v0_6 = 0;
        *v0_6[8] = 0;
        *var_630[8] = 0;
        __builtin_memset(&s_5, 0, 0x20);
        if (s_4 >= 1)
        {
            int64_t i_3 = 0;
            do
            {
                *(var_620_1 + (i_3 << 2)) = 0;
                i_3 = (i_3 + 1);
            } while (i_3 < s_4);
        }
        if (var_618_1 != &var_610)
        {
            cv::fastFree(var_618_1);
        }
        int64_t var_240_1 = 0;
        int64_t var_248 = 0;
        int64_t var_238_1 = 0x3ff0000000000000;
        v0_6 = vneg_f64(v10);
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_248, v0_6);
        int64_t var_2b8_1 = 0;
        int64_t var_2c0 = 0;
        int64_t var_2b0_1 = 0x3ff0000000000000;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_2c0, 3.1415926535897931);
        int64_t var_338 = 0x3ff0000000000000;
        int64_t var_328_1 = 0;
        int64_t var_330_1 = 0;
        feasibal_region::rotationMatrixFromAxisAndAngle(&var_338, v0_1);
        cv::operator*(&var_230, &var_2a8);
        cv::Mat var_320;
        cv::operator*(&var_660, &var_320);
        int64_t* x0_17 = var_500;
        int128_t v0_9;
        v0_9 = 0;
        *v0_9[8] = 0;
        int32_t var_398 = 0x42ff0000;
        int128_t s_10;
        __builtin_memset(&s_10, 0, 0x3c);
        void* var_358_1 = &*s_10[4];
        int64_t var_348;
        int64_t* var_350_1 = &var_348;
        int64_t var_340_1 = 0;
        var_348 = 0;
        *(*x0_17 + 0x18)(v0_9);
        cv::MatExpr::~MatExpr();
        cv::MatExpr::~MatExpr();
        int32_t var_6c0 = 0x42ff0000;
        int128_t s_3;
        __builtin_memset(&s_3, 0, 0x3c);
        void* var_680_1 = &*s_3[4];
        int64_t var_670;
        int64_t* var_678_1 = &var_670;
        var_670 = 0;
        int64_t var_668_1 = 0;
        var_750 = 0x400000004;
        int128_t v1_4;
        int128_t v2_3;
        int128_t v3_2;
        v1_4 = cv::Mat::create(&var_6c0, &*nullptr->ident.signature[2], &var_750);
        uint64_t x10_13 = s_3;
        int64_t* s_11;
        int64_t x24_1 = *s_11;
        int32_t* var_720 = &var_6c0;
        int64_t x8_17;
        if (x10_13 < 1)
        {
            x8_17 = 0;
        }
        else
        {
            x8_17 = var_678_1[(x10_13 - 1)];
        }
        uint32_t x9_10 = *var_6c0[1];
        int64_t var_718 = x8_17;
        void* s_2;
        __builtin_memset(&s_2, 0, 0x18);
        int64_t var_708_1;
        int64_t var_700_1;
        if ((x9_10 & 0x40) != 0)
        {
            int64_t x9_11 = *s_3[0xc];
            var_708_1 = x9_11;
            int64_t x13_5;
            if (x10_13 < 3)
            {
                x13_5 = (*s_3[8] * *s_3[4]);
            }
            else
            {
                int64_t i_45;
                if (x10_13 != 3)
                {
                    i_45 = (x10_13 & 0xfffffffc);
                    v1_4 = 1;
                    *v1_4[8] = 1;
                    void* x13_6 = (var_680_1 + 8);
                    int64_t i_41 = i_45;
                    int128_t v0_10 = v1_4;
                    int64_t i_4;
                    do
                    {
                        v2_3 = *(x13_6 - 8);
                        v3_2 = *x13_6;
                        /* unimplemented  {sxtl v0.2d, v2.2s} */;
                        /* unimplemented  {sxtl v1.2d, v3.2s} */;
                        int64_t x2_10 = v1_4;
                        int64_t x0_20 = (v0_10 * v1_4);
                        int64_t x15_6 = (v1_4 * v0_10);
                        v1_4 = (v1_4 * v0_10);
                        int64_t x16_7 = (v0_10 * x2_10);
                        v0_10 = x0_20;
                        i_4 = i_41;
                        i_41 = (i_41 - 4);
                        *v1_4[8] = x15_6;
                        *v0_10[8] = x16_7;
                        x13_6 = (x13_6 + 0x10);
                    } while (i_4 != 4);
                    x13_5 = ((v0_10 * v1_4) * (v0_10 * v1_4));
                }
                else
                {
                    i_45 = 0;
                    x13_5 = 1;
                }
                if ((x10_13 == 3 || (x10_13 != 3 && i_45 != x10_13)))
                {
                    int64_t i_37 = (x10_13 - i_45);
                    void* x11_7 = (var_680_1 + (i_45 << 2));
                    int64_t i_5;
                    do
                    {
                        int64_t x12_2 = *x11_7;
                        x11_7 = (x11_7 + 4);
                        i_5 = i_37;
                        i_37 = (i_37 - 1);
                        x13_5 = (x13_5 * x12_2);
                    } while (i_5 != 1);
                }
            }
            var_700_1 = (x9_11 + (x13_5 * x8_17));
        }
        cv::MatConstIterator::seek(&var_720, false);
        int64_t* s_19 = s_2;
        *s_19 = x24_1;
        int32_t* x1_7 = var_720;
        if (x1_7 != 0)
        {
            void* s_26 = (s_19 + var_718);
            s_2 = s_26;
            if (s_26 >= var_700_1)
            {
                s_2 = s_19;
                cv::MatConstIterator::seek(&var_720, true);
                x1_7 = var_720;
                s_19 = s_2;
            }
            else
            {
                s_19 = s_26;
            }
        }
        int64_t x9_13 = var_718;
        int64_t* s_30 = s_11;
        int32_t** var_748 = x1_7;
        int64_t* s_36 = s_19;
        int64_t var_730_1 = var_708_1;
        *s_19 = s_30[1];
        if (x1_7 == 0)
        {
            *s_19 = 0;
        }
        else
        {
            void* s_41 = (s_19 + x9_13);
            void* s_60 = s_41;
            if (s_41 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_30 = s_11;
                s_41 = s_19;
                x1_7 = var_748;
            }
            *s_41 = s_30[2];
            void* s_48;
            if (x1_7 == 0)
            {
                s_48 = s_41;
                *s_48 = 0;
            }
            else
            {
                s_48 = (s_41 + x9_13);
                void* s_61 = s_48;
                if (s_48 >= var_700_1)
                {
                    cv::MatConstIterator::seek(&var_748, true);
                    s_48 = s_41;
                    x1_7 = var_748;
                }
                *s_48 = 0;
            }
            if ((x1_7 == 0 || (x1_7 != 0 && x1_7 != 0)))
            {
                s_19 = (s_48 + x9_13);
                int64_t* s_37 = s_19;
                if (s_19 >= var_700_1)
                {
                    cv::MatConstIterator::seek(&var_748, true);
                    s_19 = s_48;
                    x1_7 = var_748;
                }
            }
            if ((x1_7 == 0 || x1_7 == 0))
            {
                s_19 = s_48;
            }
        }
        int64_t* s_27 = s_11;
        *s_19 = *(s_27 + *var_350_1);
        int64_t* s_49;
        if (x1_7 == 0)
        {
            s_49 = s_19;
        }
        else
        {
            s_49 = (s_19 + x9_13);
            int64_t* s_62 = s_49;
            if (s_49 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_27 = s_11;
                s_49 = s_19;
                x1_7 = var_748;
            }
        }
        *s_49 = *((s_27 + *var_350_1) + 8);
        int64_t* s_66;
        if (x1_7 == 0)
        {
            s_66 = s_49;
        }
        else
        {
            s_66 = (s_49 + x9_13);
            int64_t* s_75 = s_66;
            if (s_66 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_27 = s_11;
                s_66 = s_49;
                x1_7 = var_748;
            }
        }
        *s_66 = *((s_27 + *var_350_1) + 0x10);
        int64_t* s_76;
        if (x1_7 == 0)
        {
            s_76 = s_66;
            *s_76 = 0;
        }
        else
        {
            s_76 = (s_66 + x9_13);
            int64_t* s_83 = s_76;
            if (s_76 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_76 = s_66;
                x1_7 = var_748;
            }
            *s_76 = 0;
        }
        int64_t* s_86;
        if ((x1_7 == 0 || (x1_7 != 0 && x1_7 != 0)))
        {
            s_86 = (s_76 + x9_13);
            int64_t* s_89 = s_86;
            if (s_86 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_86 = s_76;
                x1_7 = var_748;
            }
        }
        if ((x1_7 == 0 || x1_7 == 0))
        {
            s_86 = s_76;
        }
        int64_t* s_20 = s_11;
        *s_86 = *(s_20 + (*var_350_1 << 1));
        int64_t* s_90;
        if (x1_7 == 0)
        {
            s_90 = s_86;
        }
        else
        {
            s_90 = (s_86 + x9_13);
            int64_t* s_95 = s_90;
            if (s_90 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_20 = s_11;
                s_90 = s_86;
                x1_7 = var_748;
            }
        }
        *s_90 = *((s_20 + (*var_350_1 << 1)) + 8);
        int64_t* s_98;
        if (x1_7 == 0)
        {
            s_98 = s_90;
        }
        else
        {
            s_98 = (s_90 + x9_13);
            int64_t* s_101 = s_98;
            if (s_98 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_20 = s_11;
                s_98 = s_90;
                x1_7 = var_748;
            }
        }
        *s_98 = *((s_20 + (*var_350_1 << 1)) + 0x10);
        int64_t* s_102;
        if (x1_7 == 0)
        {
            s_102 = s_98;
            *s_102 = 0;
        }
        else
        {
            s_102 = (s_98 + x9_13);
            int64_t* s_107 = s_102;
            if (s_102 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_102 = s_98;
                x1_7 = var_748;
            }
            *s_102 = 0;
        }
        int64_t* s_109;
        if ((x1_7 == 0 || (x1_7 != 0 && x1_7 != 0)))
        {
            s_109 = (s_102 + x9_13);
            int64_t* s_114 = s_109;
            if (s_109 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_109 = s_102;
                x1_7 = var_748;
            }
            *s_109 = 0;
        }
        if ((x1_7 == 0 || x1_7 == 0))
        {
            s_109 = s_102;
            *s_109 = 0;
        }
        int64_t* s_115;
        if (((x1_7 == 0 || x1_7 == 0) || ((x1_7 == 0 || (x1_7 != 0 && x1_7 != 0)) && x1_7 != 0)))
        {
            s_115 = (s_109 + x9_13);
            int64_t* s_118 = s_115;
            if (s_115 >= var_700_1)
            {
                cv::MatConstIterator::seek(&var_748, true);
                s_115 = s_109;
                x1_7 = var_748;
            }
            *s_115 = 0;
            if (x1_7 != 0)
            {
                goto label_321a4;
            }
            goto label_32234;
        }
        if (((x1_7 == 0 || x1_7 == 0) || ((x1_7 == 0 || (x1_7 != 0 && x1_7 != 0)) && x1_7 == 0)))
        {
            s_115 = s_109;
            *s_115 = 0;
            int64_t* s_119;
            if (x1_7 != 0)
            {
            label_321a4:
                s_119 = (s_115 + x9_13);
                int64_t* s_122 = s_119;
                if (s_119 >= var_700_1)
                {
                    cv::MatConstIterator::seek(&var_748, true);
                    s_119 = s_115;
                    x1_7 = var_748;
                }
                *s_119 = 0;
                if (x1_7 != 0)
                {
                    goto label_321e0;
                }
                goto label_32240;
            }
        label_32234:
            s_119 = s_115;
            *s_119 = 0;
            int64_t* s_123;
            if (x1_7 == 0)
            {
            label_32240:
                s_123 = s_119;
            }
            else
            {
            label_321e0:
                s_123 = (s_119 + x9_13);
                int64_t* s_127 = s_123;
                if (s_123 >= var_700_1)
                {
                    cv::MatConstIterator::seek(&var_748, true);
                    s_123 = s_119;
                    x1_7 = var_748;
                }
            }
            *s_123 = 0x3ff0000000000000;
            if (x1_7 != 0)
            {
                void* x9_28 = (s_123 + x9_13);
                void* var_738_15 = x9_28;
                if (x9_28 >= var_700_1)
                {
                    int64_t* s_128 = s_123;
                    cv::MatConstIterator::seek(&var_748, true);
                }
            }
            int64_t x27_2 = (&var_500 | 8);
            int128_t s_7;
            __builtin_memset(&s_7, 0, 0x3c);
            int64_t* var_4b8_3 = &var_4b0;
            int64_t var_4a8_2 = 0;
            var_4b0 = 0;
            var_500 = 0x42ff0006;
            int128_t v0_11;
            int128_t v1_5;
            int128_t v2_4;
            v0_11 = cv::Mat_<double>::operator=(&var_500);
            v2_4 = var_500;
            s_5 = s_7;
            int128_t var_4ec_1;
            int128_t var_64c = var_4ec_1;
            var_660 = v2_4;
            int128_t var_4d0_1;
            int128_t var_630_1 = var_4d0_1;
            int64_t var_620_2 = (&var_660 | 8);
            int64_t* var_618_2 = &var_610;
            var_610 = 0;
            int64_t var_608_2 = 0;
            int64_t* x0_39;
            if (v2_4 > 2)
            {
                x0_39 = &var_4b0;
                int64_t* var_4b8_4 = &var_4b0;
                int64_t var_4c0_4 = x27_2;
                var_620_2 = x27_2;
            }
            else
            {
                x0_39 = var_4b8_3;
                var_610 = *x0_39;
                int64_t var_608_3 = x0_39[1];
            }
            var_500 = 0x42ff0000;
            __builtin_memset((&var_500 | 4), 0, 0x34);
            *var_4d0_1[8] = 0;
            __builtin_memset(&*s_7[0xc], 0, 0x20);
            if (x0_39 != &var_4b0)
            {
                cv::fastFree(x0_39);
            }
            int128_t var_690;
            int64_t x8_36 = *var_690[8];
            if (x8_36 != 0)
            {
                int32_t temp0_9;
                int32_t i_6;
                do
                {
                    temp0_9 = __ldaxr((x8_36 + 0x14));
                    i_6 = __stlxr((temp0_9 - 1), (x8_36 + 0x14));
                } while (i_6 != 0);
                if (temp0_9 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_690[8] = 0;
            __builtin_memset(&*s_3[0xc], 0, 0x20);
            if (s_3 >= 1)
            {
                int64_t i_7 = 0;
                do
                {
                    *(var_680_1 + (i_7 << 2)) = 0;
                    i_7 = (i_7 + 1);
                } while (i_7 < s_3);
            }
            if (var_678_1 != &var_670)
            {
                cv::fastFree(var_678_1);
            }
            var_720 = 0x42ff0000;
            __builtin_memset(&*var_720[4], 0, 0x3c);
            int64_t* var_6e0_1 = &var_718;
            int64_t var_6d0;
            int64_t* var_6d8_1 = &var_6d0;
            var_6d0 = 0;
            int64_t var_6c8_1 = 0;
            var_750 = 0x400000004;
            int128_t v1_6;
            int128_t v2_5;
            int128_t v3_3;
            v1_6 = cv::Mat::create(&var_720, &*nullptr->ident.signature[2], &var_750);
            uint64_t x10_39 = *var_720[4];
            var_748 = &var_720;
            int64_t x8_41;
            if (x10_39 < 1)
            {
                x8_41 = 0;
            }
            else
            {
                x8_41 = var_6d8_1[(x10_39 - 1)];
            }
            uint32_t x9_33 = *var_720[1];
            int64_t* s;
            __builtin_memset(&s, 0, 0x18);
            void* s_38;
            int64_t var_728_2;
            if ((x9_33 & 0x40) != 0)
            {
                void* s_28 = s_2;
                s_38 = s_28;
                int64_t x13_9;
                if (x10_39 < 3)
                {
                    x13_9 = (*var_718[4] * var_718);
                }
                else
                {
                    int64_t i_46;
                    if (x10_39 != 3)
                    {
                        i_46 = (x10_39 & 0xfffffffc);
                        v1_6 = 1;
                        *v1_6[8] = 1;
                        void* x13_10 = &var_6e0_1[1];
                        int64_t i_42 = i_46;
                        int128_t v0_12 = v1_6;
                        int64_t i_8;
                        do
                        {
                            v2_5 = *(x13_10 - 8);
                            v3_3 = *x13_10;
                            /* unimplemented  {sxtl v0.2d, v2.2s} */;
                            /* unimplemented  {sxtl v1.2d, v3.2s} */;
                            int64_t x2_30 = v1_6;
                            int64_t x0_43 = (v0_12 * v1_6);
                            int64_t x15_10 = (v1_6 * v0_12);
                            v1_6 = (v1_6 * v0_12);
                            int64_t x16_11 = (v0_12 * x2_30);
                            v0_12 = x0_43;
                            i_8 = i_42;
                            i_42 = (i_42 - 4);
                            *v1_6[8] = x15_10;
                            *v0_12[8] = x16_11;
                            x13_10 = (x13_10 + 0x10);
                        } while (i_8 != 4);
                        x13_9 = ((v0_12 * v1_6) * (v0_12 * v1_6));
                    }
                    else
                    {
                        i_46 = 0;
                        x13_9 = 1;
                    }
                    if ((x10_39 == 3 || (x10_39 != 3 && i_46 != x10_39)))
                    {
                        int64_t i_38 = (x10_39 - i_46);
                        void* x11_15 = (var_6e0_1 + (i_46 << 2));
                        int64_t i_9;
                        do
                        {
                            int64_t x12_5 = *x11_15;
                            x11_15 = (x11_15 + 4);
                            i_9 = i_38;
                            i_38 = (i_38 - 1);
                            x13_9 = (x13_9 * x12_5);
                        } while (i_9 != 1);
                    }
                }
                var_728_2 = (s_28 + (x13_9 * x8_41));
            }
            cv::MatConstIterator::seek(&var_748, false);
            int64_t* s_21 = s;
            *s_21 = 0x3ff0000000000000;
            int32_t** x1_10 = var_748;
            if (x1_10 != 0)
            {
                void* s_42 = (s_21 + x8_41);
                void* s_63 = s_42;
                if (s_42 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_748, true);
                    x1_10 = var_748;
                }
                else
                {
                    s_21 = s_42;
                }
            }
            int32_t** var_778 = x1_10;
            int64_t* s_32 = s_21;
            void* s_58 = s_38;
            *s_21 = 0;
            if (x1_10 == 0)
            {
                *s_21 = 0;
            }
            else
            {
                void* s_43 = (s_21 + x8_41);
                void* s_52 = s_43;
                if (s_43 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_778, true);
                    s_43 = s_21;
                    x1_10 = var_778;
                }
                *s_43 = 0;
                void* s_67;
                if (x1_10 == 0)
                {
                    s_67 = s_43;
                }
                else
                {
                    s_67 = (s_43 + x8_41);
                    void* s_71 = s_67;
                    if (s_67 >= var_728_2)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_67 = s_43;
                        x1_10 = var_778;
                    }
                }
                *s_67 = vneg_f64(*s_15);
                void* s_77;
                if (x1_10 == 0)
                {
                    s_77 = s_67;
                    *s_77 = 0;
                }
                else
                {
                    s_77 = (s_67 + x8_41);
                    void* s_80 = s_77;
                    if (s_77 >= var_728_2)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_77 = s_67;
                        x1_10 = var_778;
                    }
                    *s_77 = 0;
                }
                void* s_68;
                if ((x1_10 == 0 || (x1_10 != 0 && x1_10 != 0)))
                {
                    s_68 = (s_77 + x8_41);
                    void* s_72 = s_68;
                    if (s_68 >= var_728_2)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_68 = s_77;
                        x1_10 = var_778;
                    }
                }
                if ((x1_10 == 0 || x1_10 == 0))
                {
                    s_68 = s_77;
                }
                *s_68 = 0x3ff0000000000000;
                void* s_44;
                if (x1_10 == 0)
                {
                    s_44 = s_68;
                    *s_44 = 0;
                }
                else
                {
                    s_44 = (s_68 + x8_41);
                    void* s_53 = s_44;
                    if (s_44 >= var_728_2)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_44 = s_68;
                        x1_10 = var_778;
                    }
                    *s_44 = 0;
                }
                if ((x1_10 == 0 || (x1_10 != 0 && x1_10 != 0)))
                {
                    s_21 = (s_44 + x8_41);
                    int64_t* s_33 = s_21;
                    if (s_21 >= var_728_2)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_21 = s_44;
                        x1_10 = var_778;
                    }
                }
                if ((x1_10 == 0 || x1_10 == 0))
                {
                    s_21 = s_44;
                }
            }
            *s_21 = vneg_f64(*(s_15 + *var_188_1));
            int64_t* s_45;
            if (x1_10 == 0)
            {
                s_45 = s_21;
                *s_45 = 0;
            }
            else
            {
                s_45 = (s_21 + x8_41);
                int64_t* s_54 = s_45;
                if (s_45 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_778, true);
                    s_45 = s_21;
                    x1_10 = var_778;
                }
                *s_45 = 0;
            }
            int64_t* s_69;
            if ((x1_10 == 0 || (x1_10 != 0 && x1_10 != 0)))
            {
                s_69 = (s_45 + x8_41);
                int64_t* s_73 = s_69;
                if (s_69 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_778, true);
                    s_69 = s_45;
                    x1_10 = var_778;
                }
                *s_69 = 0;
            }
            if ((x1_10 == 0 || x1_10 == 0))
            {
                s_69 = s_45;
                *s_69 = 0;
            }
            int64_t* s_78;
            if (((x1_10 == 0 || x1_10 == 0) || ((x1_10 == 0 || (x1_10 != 0 && x1_10 != 0)) && x1_10 != 0)))
            {
                s_78 = (s_69 + x8_41);
                int64_t* s_81 = s_78;
                if (s_78 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_778, true);
                    s_78 = s_69;
                    x1_10 = var_778;
                }
            }
            if (((x1_10 == 0 || x1_10 == 0) || ((x1_10 == 0 || (x1_10 != 0 && x1_10 != 0)) && x1_10 == 0)))
            {
                s_78 = s_69;
            }
            *s_78 = 0x3ff0000000000000;
            int64_t* s_84;
            if (x1_10 == 0)
            {
                s_84 = s_78;
            }
            else
            {
                s_84 = (s_78 + x8_41);
                int64_t* s_87 = s_84;
                if (s_84 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_778, true);
                    s_84 = s_78;
                    x1_10 = var_778;
                }
            }
            *s_84 = vneg_f64(*(s_15 + (*var_188_1 << 1)));
            int64_t* s_91;
            if (x1_10 == 0)
            {
                s_91 = s_84;
                *s_91 = 0;
            }
            else
            {
                s_91 = (s_84 + x8_41);
                int64_t* s_93 = s_91;
                if (s_91 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_778, true);
                    s_91 = s_84;
                    x1_10 = var_778;
                }
                *s_91 = 0;
            }
            int64_t* s_96;
            if ((x1_10 == 0 || (x1_10 != 0 && x1_10 != 0)))
            {
                s_96 = (s_91 + x8_41);
                int64_t* s_99 = s_96;
                if (s_96 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_778, true);
                    s_96 = s_91;
                    x1_10 = var_778;
                }
                *s_96 = 0;
            }
            if ((x1_10 == 0 || x1_10 == 0))
            {
                s_96 = s_91;
                *s_96 = 0;
            }
            int64_t* s_104;
            if (((x1_10 == 0 || x1_10 == 0) || ((x1_10 == 0 || (x1_10 != 0 && x1_10 != 0)) && x1_10 != 0)))
            {
                s_104 = (s_96 + x8_41);
                int64_t* s_105 = s_104;
                if (s_104 >= var_728_2)
                {
                    cv::MatConstIterator::seek(&var_778, true);
                    s_104 = s_96;
                    x1_10 = var_778;
                }
                *s_104 = 0;
                if (x1_10 != 0)
                {
                    goto label_32958;
                }
                goto label_329ac;
            }
            if (((x1_10 == 0 || x1_10 == 0) || ((x1_10 == 0 || (x1_10 != 0 && x1_10 != 0)) && x1_10 == 0)))
            {
                s_104 = s_96;
                *s_104 = 0;
                int64_t* s_108;
                if (x1_10 == 0)
                {
                label_329ac:
                    s_108 = s_104;
                }
                else
                {
                label_32958:
                    s_108 = (s_104 + x8_41);
                    int64_t* s_111 = s_108;
                    if (s_108 >= var_728_2)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_108 = s_104;
                        x1_10 = var_778;
                    }
                }
                *s_108 = 0x3ff0000000000000;
                if (x1_10 != 0)
                {
                    void* x9_49 = (s_108 + x8_41);
                    void* var_768_15 = x9_49;
                    if (x9_49 >= var_728_2)
                    {
                        int64_t* s_112 = s_108;
                        cv::MatConstIterator::seek(&var_778, true);
                    }
                }
                int64_t x27_3 = (&var_500 | 8);
                int128_t s_8;
                __builtin_memset(&s_8, 0, 0x3c);
                int64_t* var_4b8_5 = &var_4b0;
                int64_t var_4a8_3 = 0;
                var_4b0 = 0;
                var_500 = 0x42ff0006;
                int128_t v0_14;
                int128_t v1_7;
                int128_t v2_6;
                v0_14 = cv::Mat_<double>::operator=(&var_500);
                v2_6 = var_500;
                s_3 = s_8;
                int128_t var_4ec_2;
                int128_t var_6ac = var_4ec_2;
                var_6c0 = v2_6;
                int128_t var_4d0_2;
                int128_t var_690_1 = var_4d0_2;
                int64_t var_680_2 = (&var_6c0 | 8);
                int64_t* var_678_2 = &var_670;
                var_670 = 0;
                int64_t var_668_2 = 0;
                int64_t* x0_62;
                if (v2_6 > 2)
                {
                    x0_62 = &var_4b0;
                    int64_t* var_4b8_6 = &var_4b0;
                    int64_t var_4c0_6 = x27_3;
                    var_680_2 = x27_3;
                }
                else
                {
                    x0_62 = var_4b8_5;
                    var_670 = *x0_62;
                    int64_t var_668_3 = x0_62[1];
                }
                var_500 = 0x42ff0000;
                __builtin_memset((&var_500 | 4), 0, 0x34);
                *var_4d0_2[8] = 0;
                __builtin_memset(&*s_8[0xc], 0, 0x20);
                if (x0_62 != &var_4b0)
                {
                    cv::fastFree(x0_62);
                }
                int128_t var_6f0;
                int64_t x8_50 = *var_6f0[8];
                if (x8_50 != 0)
                {
                    int32_t temp0_13;
                    int32_t i_10;
                    do
                    {
                        temp0_13 = __ldaxr((x8_50 + 0x14));
                        i_10 = __stlxr((temp0_13 - 1), (x8_50 + 0x14));
                    } while (i_10 != 0);
                    if (temp0_13 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int32_t x8_52 = *var_720[4];
                *var_6f0[8] = 0;
                __builtin_memset(&s_2, 0, 0x20);
                if (x8_52 >= 1)
                {
                    int64_t i_11 = 0;
                    do
                    {
                        *(var_6e0_1 + (i_11 << 2)) = 0;
                        i_11 = (i_11 + 1);
                    } while (i_11 < *var_720[4]);
                }
                if (var_6d8_1 != &var_6d0)
                {
                    cv::fastFree(var_6d8_1);
                }
                var_720 = 0x42ff0000;
                __builtin_memset(&*var_720[4], 0, 0x3c);
                int64_t* var_6e0_2 = &var_718;
                int64_t* var_6d8_2 = &var_6d0;
                var_6d0 = 0;
                int64_t var_6c8_2 = 0;
                var_750 = 0x400000004;
                int128_t v1_8;
                int128_t v2_7;
                int128_t v3_4;
                v1_8 = cv::Mat::create(&var_720, &*nullptr->ident.signature[2], &var_750);
                uint64_t x10_65 = *var_720[4];
                int64_t x25_1 = **s_16[0xc];
                var_748 = &var_720;
                int64_t x8_56;
                if (x10_65 < 1)
                {
                    x8_56 = 0;
                }
                else
                {
                    x8_56 = var_6d8_2[(x10_65 - 1)];
                }
                uint32_t x9_54 = *var_720[1];
                int64_t* s_1;
                __builtin_memset(&s_1, 0, 0x18);
                void* s_39;
                int64_t var_728_3;
                if ((x9_54 & 0x40) != 0)
                {
                    void* s_29 = s_2;
                    s_39 = s_29;
                    int64_t x13_13;
                    if (x10_65 < 3)
                    {
                        x13_13 = (*var_718[4] * var_718);
                    }
                    else
                    {
                        int64_t i_47;
                        if (x10_65 != 3)
                        {
                            i_47 = (x10_65 & 0xfffffffc);
                            v1_8 = 1;
                            *v1_8[8] = 1;
                            void* x13_14 = &var_6e0_2[1];
                            int64_t i_43 = i_47;
                            int128_t v0_15 = v1_8;
                            int64_t i_12;
                            do
                            {
                                v2_7 = *(x13_14 - 8);
                                v3_4 = *x13_14;
                                /* unimplemented  {sxtl v0.2d, v2.2s} */;
                                /* unimplemented  {sxtl v1.2d, v3.2s} */;
                                int64_t x2_50 = v1_8;
                                int64_t x0_66 = (v0_15 * v1_8);
                                int64_t x15_14 = (v1_8 * v0_15);
                                v1_8 = (v1_8 * v0_15);
                                int64_t x16_15 = (v0_15 * x2_50);
                                v0_15 = x0_66;
                                i_12 = i_43;
                                i_43 = (i_43 - 4);
                                *v1_8[8] = x15_14;
                                *v0_15[8] = x16_15;
                                x13_14 = (x13_14 + 0x10);
                            } while (i_12 != 4);
                            x13_13 = ((v0_15 * v1_8) * (v0_15 * v1_8));
                        }
                        else
                        {
                            i_47 = 0;
                            x13_13 = 1;
                        }
                        if ((x10_65 == 3 || (x10_65 != 3 && i_47 != x10_65)))
                        {
                            int64_t i_39 = (x10_65 - i_47);
                            void* x11_19 = (var_6e0_2 + (i_47 << 2));
                            int64_t i_13;
                            do
                            {
                                int64_t x12_6 = *x11_19;
                                x11_19 = (x11_19 + 4);
                                i_13 = i_39;
                                i_39 = (i_39 - 1);
                                x13_13 = (x13_13 * x12_6);
                            } while (i_13 != 1);
                        }
                    }
                    var_728_3 = (s_29 + (x13_13 * x8_56));
                }
                cv::MatConstIterator::seek(&var_748, false);
                int64_t* s_22 = s_1;
                *s_22 = x25_1;
                int32_t** x1_13 = var_748;
                if (x1_13 != 0)
                {
                    void* s_46 = (s_22 + x8_56);
                    void* s_64 = s_46;
                    if (s_46 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_748, true);
                        x1_13 = var_748;
                    }
                    else
                    {
                        s_22 = s_46;
                    }
                }
                void* x10_68 = *s_16[0xc];
                var_778 = x1_13;
                int64_t* s_34 = s_22;
                void* s_59 = s_39;
                *s_22 = *(x10_68 + 8);
                if (x1_13 == 0)
                {
                    *s_22 = *(x10_68 + 0x10);
                    *s_22 = *s_15;
                }
                else
                {
                    void* s_47 = (s_22 + x8_56);
                    void* s_55 = s_47;
                    if (s_47 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        x10_68 = *s_16[0xc];
                        s_47 = s_22;
                        x1_13 = var_778;
                    }
                    *s_47 = *(x10_68 + 0x10);
                    void* s_50;
                    if (x1_13 == 0)
                    {
                        s_50 = s_47;
                    }
                    else
                    {
                        s_50 = (s_47 + x8_56);
                        void* s_56 = s_50;
                        if (s_50 >= var_728_3)
                        {
                            cv::MatConstIterator::seek(&var_778, true);
                            s_50 = s_47;
                            x1_13 = var_778;
                        }
                    }
                    *s_50 = *s_15;
                    if (x1_13 == 0)
                    {
                        s_22 = s_50;
                    }
                    else
                    {
                        s_22 = (s_50 + x8_56);
                        int64_t* s_35 = s_22;
                        if (s_22 >= var_728_3)
                        {
                            cv::MatConstIterator::seek(&var_778, true);
                            s_22 = s_50;
                            x1_13 = var_778;
                        }
                    }
                }
                int64_t* x9_63 = (*s_16[0xc] + *var_c0_1);
                *s_22 = *x9_63;
                int64_t* s_51;
                if (x1_13 == 0)
                {
                    s_51 = s_22;
                }
                else
                {
                    s_51 = (s_22 + x8_56);
                    int64_t* s_57 = s_51;
                    if (s_51 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_51 = s_22;
                        x1_13 = var_778;
                        x9_63 = (*s_16[0xc] + *var_c0_1);
                    }
                }
                *s_51 = x9_63[1];
                int64_t* s_70;
                if (x1_13 == 0)
                {
                    s_70 = s_51;
                }
                else
                {
                    s_70 = (s_51 + x8_56);
                    int64_t* s_74 = s_70;
                    if (s_70 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        x1_13 = var_778;
                        s_70 = s_51;
                        x9_63 = (*s_16[0xc] + *var_c0_1);
                    }
                }
                *s_70 = x9_63[2];
                int64_t* s_79;
                if (x1_13 == 0)
                {
                    s_79 = s_70;
                }
                else
                {
                    s_79 = (s_70 + x8_56);
                    int64_t* s_82 = s_79;
                    if (s_79 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_79 = s_70;
                        x1_13 = var_778;
                    }
                }
                *s_79 = *(s_15 + *var_188_1);
                int64_t* s_85;
                if (x1_13 == 0)
                {
                    s_85 = s_79;
                }
                else
                {
                    s_85 = (s_79 + x8_56);
                    int64_t* s_88 = s_85;
                    if (s_85 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_85 = s_79;
                        x1_13 = var_778;
                    }
                }
                int64_t* x8_76 = (*s_16[0xc] + (*var_c0_1 << 1));
                *s_85 = *x8_76;
                int64_t* s_92;
                if (x1_13 == 0)
                {
                    s_92 = s_85;
                }
                else
                {
                    s_92 = (s_85 + x8_56);
                    int64_t* s_94 = s_92;
                    if (s_92 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_92 = s_85;
                        x1_13 = var_778;
                        x8_76 = (*s_16[0xc] + (*var_c0_1 << 1));
                    }
                }
                *s_92 = x8_76[1];
                int64_t* s_97;
                if (x1_13 == 0)
                {
                    s_97 = s_92;
                }
                else
                {
                    s_97 = (s_92 + x8_56);
                    int64_t* s_100 = s_97;
                    if (s_97 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_97 = s_92;
                        x1_13 = var_778;
                        x8_76 = (*s_16[0xc] + (*var_c0_1 << 1));
                    }
                }
                *s_97 = x8_76[2];
                int64_t* s_103;
                if (x1_13 == 0)
                {
                    s_103 = s_97;
                }
                else
                {
                    s_103 = (s_97 + x8_56);
                    int64_t* s_106 = s_103;
                    if (s_103 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_103 = s_97;
                        x1_13 = var_778;
                    }
                }
                *s_103 = *(s_15 + (*var_188_1 << 1));
                int64_t* s_110;
                if (x1_13 == 0)
                {
                    s_110 = s_103;
                    *s_110 = 0;
                }
                else
                {
                    s_110 = (s_103 + x8_56);
                    int64_t* s_113 = s_110;
                    if (s_110 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_110 = s_103;
                        x1_13 = var_778;
                    }
                    *s_110 = 0;
                }
                int64_t* s_116;
                if ((x1_13 == 0 || (x1_13 != 0 && x1_13 != 0)))
                {
                    s_116 = (s_110 + x8_56);
                    int64_t* s_117 = s_116;
                    if (s_116 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_116 = s_110;
                        x1_13 = var_778;
                    }
                    *s_116 = 0;
                }
                if ((x1_13 == 0 || x1_13 == 0))
                {
                    s_116 = s_110;
                    *s_116 = 0;
                }
                int64_t* s_120;
                if (((x1_13 == 0 || x1_13 == 0) || ((x1_13 == 0 || (x1_13 != 0 && x1_13 != 0)) && x1_13 != 0)))
                {
                    s_120 = (s_116 + x8_56);
                    int64_t* s_121 = s_120;
                    if (s_120 >= var_728_3)
                    {
                        cv::MatConstIterator::seek(&var_778, true);
                        s_120 = s_116;
                        x1_13 = var_778;
                    }
                    *s_120 = 0;
                    if (x1_13 != 0)
                    {
                        goto label_33134;
                    }
                    goto label_33188;
                }
                if (((x1_13 == 0 || x1_13 == 0) || ((x1_13 == 0 || (x1_13 != 0 && x1_13 != 0)) && x1_13 == 0)))
                {
                    s_120 = s_116;
                    *s_120 = 0;
                    int64_t* s_124;
                    if (x1_13 == 0)
                    {
                    label_33188:
                        s_124 = s_120;
                    }
                    else
                    {
                    label_33134:
                        s_124 = (s_120 + x8_56);
                        int64_t* s_125 = s_124;
                        if (s_124 >= var_728_3)
                        {
                            cv::MatConstIterator::seek(&var_778, true);
                            s_124 = s_120;
                            x1_13 = var_778;
                        }
                    }
                    *s_124 = 0x3ff0000000000000;
                    if (x1_13 != 0)
                    {
                        void* x9_80 = (s_124 + x8_56);
                        void* var_768_30 = x9_80;
                        if (x9_80 >= var_728_3)
                        {
                            int64_t* s_126 = s_124;
                            cv::MatConstIterator::seek(&var_778, true);
                        }
                    }
                    int64_t x27_4 = (&var_500 | 8);
                    int128_t s_9;
                    __builtin_memset(&s_9, 0, 0x3c);
                    int64_t var_4c0_7 = x27_4;
                    int64_t* var_4b8_7 = &var_4b0;
                    int64_t var_4a8_4 = 0;
                    var_4b0 = 0;
                    var_500 = 0x42ff0006;
                    int128_t v0_16;
                    int128_t s_31;
                    v0_16 = cv::Mat_<double>::operator=(&var_500);
                    int128_t var_4d0_3;
                    if (&var_500 == arg3)
                    {
                        int64_t x8_91 = *var_4d0_3[8];
                        if (x8_91 != 0)
                        {
                            int32_t temp0_15;
                            int32_t i_14;
                            do
                            {
                                temp0_15 = __ldaxr((x8_91 + 0x14));
                                i_14 = __stlxr((temp0_15 - 1), (x8_91 + 0x14));
                            } while (i_14 != 0);
                            if (temp0_15 == 1)
                            {
                                cv::Mat::deallocate();
                            }
                        }
                    }
                    else
                    {
                        int64_t x8_85 = *(arg3 + 0x38);
                        if (x8_85 != 0)
                        {
                            int32_t temp0_14;
                            int32_t i_15;
                            do
                            {
                                temp0_14 = __ldaxr((x8_85 + 0x14));
                                i_15 = __stlxr((temp0_14 - 1), (x8_85 + 0x14));
                            } while (i_15 != 0);
                            if (temp0_14 == 1)
                            {
                                v0_16 = cv::Mat::deallocate();
                            }
                        }
                        int32_t x8_87 = *(arg3 + 4);
                        v0_16 = 0;
                        *v0_16[8] = 0;
                        *(arg3 + 0x38) = 0;
                        __builtin_memset(&arg3[1], 0, 0x20);
                        if (x8_87 >= 1)
                        {
                            int64_t x8_88 = arg3[4];
                            int64_t i_16 = 0;
                            do
                            {
                                *(x8_88 + (i_16 << 2)) = 0;
                                i_16 = (i_16 + 1);
                            } while (i_16 < *(arg3 + 4));
                        }
                        v0_16 = var_500;
                        s_31 = s_9;
                        void* x0_86 = *(arg3 + 0x48);
                        *arg3 = v0_16;
                        arg3[1] = s_31;
                        int128_t var_4ec_3;
                        arg3[2] = var_4ec_3;
                        arg3[3] = var_4d0_3;
                        int32_t x8_90;
                        if (x0_86 == &arg3[5])
                        {
                            x8_90 = v0_16;
                        }
                        else
                        {
                            cv::fastFree(x0_86);
                            arg3[4] = (arg3 + 8);
                            *(arg3 + 0x48) = &arg3[5];
                            x8_90 = s_9;
                            x0_86 = &arg3[5];
                        }
                        if (x8_90 > 2)
                        {
                            arg3[4] = var_4c0_7;
                            var_4b8_7 = &var_4b0;
                            var_4c0_7 = x27_4;
                        }
                        else
                        {
                            *x0_86 = *var_4b8_7;
                            *(x0_86 + 8) = var_4b8_7[1];
                        }
                        var_500 = 0x42ff0000;
                        __builtin_memset((&var_500 | 4), 0, 0x3c);
                    }
                    *var_4d0_3[8] = 0;
                    __builtin_memset(&*s_9[0xc], 0, 0x20);
                    if (s_9 >= 1)
                    {
                        int64_t i_17 = 0;
                        do
                        {
                            *(var_4c0_7 + (i_17 << 2)) = 0;
                            i_17 = (i_17 + 1);
                        } while (i_17 < s_9);
                    }
                    if (var_4b8_7 != &var_4b0)
                    {
                        cv::fastFree(var_4b8_7);
                    }
                    int128_t var_6f0_1;
                    int64_t x8_96 = *var_6f0_1[8];
                    if (x8_96 != 0)
                    {
                        int32_t temp0_16;
                        int32_t i_18;
                        do
                        {
                            temp0_16 = __ldaxr((x8_96 + 0x14));
                            i_18 = __stlxr((temp0_16 - 1), (x8_96 + 0x14));
                        } while (i_18 != 0);
                        if (temp0_16 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int32_t x8_98 = *var_720[4];
                    *var_6f0_1[8] = 0;
                    __builtin_memset(&s_2, 0, 0x20);
                    if (x8_98 >= 1)
                    {
                        int64_t i_19 = 0;
                        do
                        {
                            *(var_6e0_2 + (i_19 << 2)) = 0;
                            i_19 = (i_19 + 1);
                        } while (i_19 < *var_720[4]);
                    }
                    if (var_6d8_2 != &var_6d0)
                    {
                        cv::fastFree(var_6d8_2);
                    }
                    cv::operator*(&var_660, &var_6c0);
                    *(*var_500 + 0x18)();
                    cv::MatExpr::~MatExpr();
                    int64_t x8_102 = *var_690_1[8];
                    if (x8_102 != 0)
                    {
                        int32_t temp0_17;
                        int32_t i_20;
                        do
                        {
                            temp0_17 = __ldaxr((x8_102 + 0x14));
                            i_20 = __stlxr((temp0_17 - 1), (x8_102 + 0x14));
                        } while (i_20 != 0);
                        if (temp0_17 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_690_1[8] = 0;
                    __builtin_memset(&*s_3[0xc], 0, 0x20);
                    if (s_3 >= 1)
                    {
                        int64_t i_21 = 0;
                        do
                        {
                            *(var_680_2 + (i_21 << 2)) = 0;
                            i_21 = (i_21 + 1);
                        } while (i_21 < s_3);
                    }
                    if (var_678_2 != &var_670)
                    {
                        cv::fastFree(var_678_2);
                    }
                    int64_t x8_106 = *var_630_1[8];
                    if (x8_106 != 0)
                    {
                        int32_t temp0_18;
                        int32_t i_22;
                        do
                        {
                            temp0_18 = __ldaxr((x8_106 + 0x14));
                            i_22 = __stlxr((temp0_18 - 1), (x8_106 + 0x14));
                        } while (i_22 != 0);
                        if (temp0_18 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_630_1[8] = 0;
                    __builtin_memset(&s_5, 0, 0x20);
                    if (s_4 >= 1)
                    {
                        int64_t i_23 = 0;
                        do
                        {
                            *(var_620_2 + (i_23 << 2)) = 0;
                            i_23 = (i_23 + 1);
                        } while (i_23 < s_4);
                    }
                    if (var_618_2 != &var_610)
                    {
                        cv::fastFree(var_618_2);
                    }
                    int128_t var_368;
                    int64_t x8_112 = *var_368[8];
                    if (x8_112 != 0)
                    {
                        int32_t temp0_19;
                        int32_t i_24;
                        do
                        {
                            temp0_19 = __ldaxr((x8_112 + 0x14));
                            i_24 = __stlxr((temp0_19 - 1), (x8_112 + 0x14));
                        } while (i_24 != 0);
                        if (temp0_19 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_368[8] = 0;
                    __builtin_memset(&s_11, 0, 0x20);
                    if (s_10 >= 1)
                    {
                        int64_t i_25 = 0;
                        do
                        {
                            *(var_358_1 + (i_25 << 2)) = 0;
                            i_25 = (i_25 + 1);
                        } while (i_25 < s_10);
                    }
                    if (var_350_1 != &var_348)
                    {
                        cv::fastFree(var_350_1);
                    }
                    int64_t var_2e8;
                    if (var_2e8 != 0)
                    {
                        int32_t temp0_20;
                        int32_t i_26;
                        do
                        {
                            temp0_20 = __ldaxr((var_2e8 + 0x14));
                            i_26 = __stlxr((temp0_20 - 1), (var_2e8 + 0x14));
                        } while (i_26 != 0);
                        if (temp0_20 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_2e8_1 = 0;
                    int128_t s_12;
                    __builtin_memset(&s_12, 0, 0x20);
                    int32_t var_31c;
                    if (var_31c >= 1)
                    {
                        int64_t i_27 = 0;
                        do
                        {
                            int64_t var_2e0;
                            *(var_2e0 + (i_27 << 2)) = 0;
                            i_27 = (i_27 + 1);
                        } while (i_27 < var_31c);
                    }
                    void* var_2d8;
                    void var_2d0;
                    if (var_2d8 != &var_2d0)
                    {
                        cv::fastFree(var_2d8);
                    }
                    int64_t var_270;
                    if (var_270 != 0)
                    {
                        int32_t temp0_21;
                        int32_t i_28;
                        do
                        {
                            temp0_21 = __ldaxr((var_270 + 0x14));
                            i_28 = __stlxr((temp0_21 - 1), (var_270 + 0x14));
                        } while (i_28 != 0);
                        if (temp0_21 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_270_1 = 0;
                    __builtin_memset(&s_13, 0, 0x20);
                    if (*var_2a8[4] >= 1)
                    {
                        int64_t i_29 = 0;
                        do
                        {
                            int64_t var_268;
                            *(var_268 + (i_29 << 2)) = 0;
                            i_29 = (i_29 + 1);
                        } while (i_29 < *var_2a8[4]);
                    }
                    void* var_260;
                    void var_258;
                    if (var_260 != &var_258)
                    {
                        cv::fastFree(var_260);
                    }
                    int64_t var_1f8;
                    if (var_1f8 != 0)
                    {
                        int32_t temp0_22;
                        int32_t i_30;
                        do
                        {
                            temp0_22 = __ldaxr((var_1f8 + 0x14));
                            i_30 = __stlxr((temp0_22 - 1), (var_1f8 + 0x14));
                        } while (i_30 != 0);
                        if (temp0_22 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    int64_t var_1f8_1 = 0;
                    __builtin_memset(&s_14, 0, 0x20);
                    if (*var_230[4] >= 1)
                    {
                        int64_t i_31 = 0;
                        do
                        {
                            int64_t var_1f0;
                            *(var_1f0 + (i_31 << 2)) = 0;
                            i_31 = (i_31 + 1);
                        } while (i_31 < *var_230[4]);
                    }
                    void* var_1e8;
                    void var_1e0;
                    if (var_1e8 != &var_1e0)
                    {
                        cv::fastFree(var_1e8);
                    }
                    int64_t x8_129 = *var_1a0_1[8];
                    if (x8_129 != 0)
                    {
                        int32_t temp0_23;
                        int32_t i_32;
                        do
                        {
                            temp0_23 = __ldaxr((x8_129 + 0x14));
                            i_32 = __stlxr((temp0_23 - 1), (x8_129 + 0x14));
                        } while (i_32 != 0);
                        if (temp0_23 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_1a0_1[8] = 0;
                    __builtin_memset(&s_15, 0, 0x20);
                    if (*var_1d0[4] >= 1)
                    {
                        int64_t i_33 = 0;
                        do
                        {
                            *(var_190_1 + (i_33 << 2)) = 0;
                            i_33 = (i_33 + 1);
                        } while (i_33 < *var_1d0[4]);
                    }
                    if (var_188_1 != &var_180)
                    {
                        cv::fastFree(var_188_1);
                    }
                    int128_t var_d8;
                    int64_t x8_135 = *var_d8[8];
                    if (x8_135 != 0)
                    {
                        int32_t temp0_24;
                        int32_t i_34;
                        do
                        {
                            temp0_24 = __ldaxr((x8_135 + 0x14));
                            i_34 = __stlxr((temp0_24 - 1), (x8_135 + 0x14));
                        } while (i_34 != 0);
                        if (temp0_24 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_d8[8] = 0;
                    __builtin_memset(var_790_1, 0, 0x20);
                    if (s_16 >= 1)
                    {
                        int64_t i_35 = 0;
                        do
                        {
                            *(var_c8_1 + (i_35 << 2)) = 0;
                            i_35 = (i_35 + 1);
                        } while (i_35 < s_16);
                    }
                    if (var_c0_1 != &var_b8)
                    {
                        cv::fastFree(var_c0_1);
                    }
                }
            }
        }
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

int64_t feasibal_region::ground_process::getTFMatrix(int64_t arg1, int32_t* arg2, int64_t* arg3, float* arg4 @ x8)
{
    int64_t v9;
    v9 = arg2[1];
    int64_t v13;
    v13 = *arg2;
    float var_68;
    int32_t var_64;
    sincosf(&var_64, &var_68, (arg2[2] * 0.5f));
    int64_t v11;
    v11 = var_68;
    int64_t v10;
    v10 = var_64;
    int64_t v8;
    v8 = 0f;
    int64_t v12;
    v12 = (v10 * v8);
    float var_70;
    float var_6c;
    sincosf(&var_6c, &var_70, (v9 * 0.5f));
    float v1 = var_70;
    float v0_2 = var_6c;
    float v2 = (v0_2 * v8);
    float v4 = (v0_2 * v12);
    float v5 = (v1 * v12);
    float v3 = (v1 * v11);
    float v7 = (v2 * v12);
    float v16 = (v10 * v2);
    v2 = (v11 * v2);
    v11 = ((v16 + ((v0_2 * v11) + v5)) - v7);
    v12 = ((v4 + ((v1 * v10) + v2)) - v7);
    v9 = (((v3 - v7) - v4) - v16);
    v10 = ((v7 + (v2 + v5)) - (v0_2 * v10));
    float var_58;
    float var_54;
    int64_t x0_3;
    int64_t v0_3;
    x0_3 = sincosf(&var_54, &var_58, (v13 * 0.5f));
    v0_3 = var_58;
    float v1_1 = var_54;
    arg4[3] = 0;
    float v3_1 = (v1_1 * v8);
    float v7_1 = (v0_3 * v10);
    float v4_1 = (v0_3 * v9);
    float v16_1 = (v0_3 * v11);
    v0_3 = (v0_3 * v12);
    float v6_1 = ((v1_1 * v9) + v7_1);
    v7_1 = (v3_1 * v9);
    float v17 = (v3_1 * v11);
    float v18 = (v3_1 * v12);
    v3_1 = (v3_1 * v10);
    v0_3 = (v0_3 + v7_1);
    v0_3 = (v3_1 + v0_3);
    v6_1 = ((v17 + v6_1) - v18);
    v3_1 = (((v1_1 * v12) + (v7_1 + v16_1)) - v3_1);
    v0_3 = (v0_3 - (v1_1 * v11));
    v4_1 = (((v4_1 - (v1_1 * v10)) - v17) - v18);
    v1_1 = (v6_1 + v6_1);
    float v5_1 = (v3_1 + v3_1);
    v7_1 = (v0_3 + v0_3);
    v16_1 = (v4_1 * v1_1);
    v1_1 = (v6_1 * v1_1);
    v17 = (v4_1 * v5_1);
    v4_1 = (v4_1 * v7_1);
    v18 = (v6_1 * v5_1);
    v6_1 = (v6_1 * v7_1);
    v5_1 = (v3_1 * v5_1);
    v3_1 = (v3_1 * v7_1);
    v0_3 = (v0_3 * v7_1);
    v7_1 = (v5_1 + v0_3);
    float v19 = (v18 - v4_1);
    float v20 = (v6_1 + v17);
    v4_1 = (v18 + v4_1);
    v0_3 = (v1_1 + v0_3);
    v18 = (v3_1 - v16_1);
    v1_1 = (v1_1 + v5_1);
    v6_1 = (v6_1 - v17);
    v3_1 = (v3_1 + v16_1);
    v5_1 = (1f - v7_1);
    v0_3 = (1f - v0_3);
    v1_1 = (1f - v1_1);
    float v2_1 = (v4_1 * v8);
    v16_1 = (v18 * v8);
    v17 = (v20 * v8);
    v20 = (v20 + v16_1);
    v18 = (v18 + v17);
    v16_1 = (v17 + v16_1);
    v17 = (v5_1 + v2_1);
    v5_1 = (v5_1 * v8);
    v7_1 = (v19 * v8);
    v4_1 = (v4_1 + v5_1);
    v2_1 = (v2_1 + v5_1);
    v5_1 = (v0_3 * v8);
    v0_3 = (v7_1 + v0_3);
    v19 = (v19 + v5_1);
    v5_1 = (v7_1 + v5_1);
    v7_1 = (v1_1 * v8);
    v20 = (v20 + v7_1);
    v7_1 = (v18 + v7_1);
    v18 = (v6_1 * v8);
    v1_1 = (v1_1 + v16_1);
    v16_1 = (v3_1 * v8);
    v0_3 = (v16_1 + v0_3);
    arg4[7] = 0;
    arg4[0xb] = 0;
    arg4[0xf] = 0x3f800000;
    arg4[8] = v20;
    arg4[9] = v7_1;
    arg4[0xa] = v1_1;
    *arg4 = (v18 + v17);
    arg4[1] = (v18 + v4_1);
    arg4[2] = (v6_1 + v2_1);
    arg4[4] = (v16_1 + v19);
    arg4[5] = v0_3;
    arg4[6] = (v3_1 + v5_1);
    v0_3 = (*arg3 + 0f);
    *v0_3[4] = (*v0_3[4] + 0f);
    v1_1 = (arg3[1] + v8);
    *(arg4 + 0x30) = v0_3;
    arg4[0xe] = v1_1;
    return x0_3;
}

int64_t feasibal_region::rotationMatrixFromAxisAndAngle(int32_t* arg1, float arg2, float* arg3 @ x8)
{
    int64_t v8;
    v8 = *arg1;
    int64_t v9;
    v9 = arg1[1];
    int64_t v10;
    v10 = arg1[2];
    float var_38;
    float var_34;
    int64_t x0_1 = sincosf(&var_34, &var_38, arg2);
    float v1 = var_38;
    float v0 = var_34;
    float v2 = (1f - v1);
    float v5 = (v2 * v8);
    float v6 = (v2 * v9);
    float v3 = (v0 * v8);
    float v4 = (v0 * v9);
    v0 = (v0 * v10);
    float v7 = (v9 * v5);
    float v16 = (v5 * v10);
    float v17 = (v6 * v10);
    arg3[2] = (v16 - v4);
    arg3[3] = (v7 - v0);
    *arg3 = (v1 + (v8 * v5));
    arg3[1] = (v7 + v0);
    arg3[6] = (v4 + v16);
    arg3[7] = (v17 - v3);
    arg3[4] = (v1 + (v9 * v6));
    arg3[5] = (v3 + v17);
    arg3[8] = (v1 + (v10 * (v2 * v10)));
    return x0_1;
}

int64_t feasibal_region::ground_process::getExtrinsicFromYPR(cv::Mat* arg1, cv::Mat* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    int128_t v0;
    int128_t v1;
    v0 = feasibal_region::ground_process::getTFMatrix(arg1, arg2);
    float var_68;
    *(arg1 + 0x6c0) = var_68;
    float var_64;
    *(arg1 + 0x6c4) = var_64;
    int64_t var_60;
    v0 = var_60;
    *(arg1 + 0x6c8) = v0;
    float var_58;
    *(arg1 + 0x6d0) = var_58;
    float var_54;
    *(arg1 + 0x6d4) = var_54;
    int64_t var_50;
    v1 = var_50;
    *(arg1 + 0x6d8) = v1;
    double v4 = vzip1_f32(v0, v1);
    float var_48;
    *(arg1 + 0x6e0) = var_48;
    float var_44;
    *(arg1 + 0x6e4) = var_44;
    int64_t var_40;
    *(arg1 + 0x6e8) = var_40;
    float var_38;
    *(arg1 + 0x6f0) = var_38;
    float var_34;
    *(arg1 + 0x6f4) = var_34;
    float v3 = var_38;
    /* unimplemented  {fnmul s16, s5, s16} */;
    /* unimplemented  {fnmul s18, s5, s18} */;
    /* unimplemented  {fnmul s5, s5, s19} */;
    *(arg1 + 0x6a0) = v4;
    *(arg1 + 0x6a8) = var_40;
    v4 = (var_64 - (v3 * var_68));
    int64_t var_30;
    v0 = (v0 * var_30);
    v1 = (v1 * var_30);
    int64_t v2;
    v2 = (var_40 * var_30);
    v0 = (v4 - v0);
    v1 = ((var_54 - (v3 * var_58)) - v1);
    v2 = ((var_34 - (v3 * var_48)) - v2);
    *(arg1 + 0x680) = var_68;
    *(arg1 + 0x690) = var_64;
    *(arg1 + 0x684) = var_58;
    *(arg1 + 0x694) = var_54;
    *(arg1 + 0x688) = var_48;
    *(arg1 + 0x698) = var_44;
    *(arg1 + 0x68c) = 0;
    *(arg1 + 0x69c) = 0;
    *(arg1 + 0x6ac) = 0;
    *(arg1 + 0x6bc) = 0x3f800000;
    *(arg1 + 0x6f8) = var_30;
    *(arg1 + 0x6b0) = v0;
    *(arg1 + 0x6b4) = v1;
    *(arg1 + 0x6b8) = v2;
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

float feasibal_region::ground_process::getVectorAngle(int64_t arg1, int32_t* arg2, int32_t* arg3)
{
    double v1;
    v1 = *arg3;
    uint128_t v2;
    v2 = *(arg2 + 4);
    int64_t v3 = *(arg3 + 4);
    float v0 = (*arg2 * v1);
    v1 = 0xbf800000;
    v2 = (v2 * v3);
    *v2[4] = (*v2[4] * *v3[4]);
    v0 = (v0 + v2);
    v2 = vdups_laneq_s32(v2, 1);
    /* unimplemented  {fabs s2, s0} */;
    v1 = (v2 + -1f);
    /* unimplemented  {fabs s1, s1} */;
    if (!(v1 >= 0.0001))
    {
        return 0f;
    }
    float v0_1 = acosf((v0 + v2));
    double v3_1 = v0_1;
    double v1_1;
    v1_1 = (v3_1 + -1.5707963267948966);
    if (v3_1 > 1.5707963267948966)
    {
        v0_1 = v1_1;
    }
    /* unimplemented  {fabs s0, s0} */;
    return v0_1;
}

int64_t* feasibal_region::ground_process::getPlanePoints(int64_t arg1, int32_t* arg2, int64_t* arg3 @ x8)
{
    __builtin_memset(arg3, 0, 0x18);
    int64_t* x0 = operator new(0x30);
    arg3[1] = &x0[6];
    arg3[2] = &x0[6];
    *arg3 = x0;
    *(x0 + 0x24) = 0x4416000044160000;
    *x0 = 0x44160000c4160000;
    *(x0 + 0xc) = -0x3be9ffff3bd10000;
    x0[3] = -0x3be9ffffbbea0000;
    float v0 = *arg2;
    float v1 = arg2[1];
    float v2 = arg2[2];
    float v3 = arg2[3];
    float v7 = (v0 * -600f);
    float v4 = (v1 * -600f);
    v1 = (v1 * 600f);
    v0 = (v0 * 600f);
    /* unimplemented  {fneg s1, s1} */;
    /* unimplemented  {fneg s3, s5} */;
    /* unimplemented  {fneg s4, s4} */;
    /* unimplemented  {fneg s0, s0} */;
    x0[1] = ((v3 + (v7 + v1)) / v2);
    *(x0 + 0x14) = (v3 / v2);
    x0[4] = ((v3 + (v0 + v4)) / v2);
    *(x0 + 0x2c) = ((v3 + (v0 + v1)) / v2);
    return x0;
}

int64_t* feasibal_region::depth2color(int64_t arg1, cv::Mat* arg2, double arg3, double arg4)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x10 = *(x21 + 0x28);
    int128_t s;
    __builtin_memset(&s, 0, 0x3c);
    int32_t var_a8 = 0x42ff0000;
    void* var_68 = &*s[4];
    int64_t var_58;
    int64_t* var_60 = &var_58;
    var_58 = 0;
    int64_t var_50 = 0;
    int32_t* var_b8 = &var_a8;
    int64_t var_b0 = 0;
    int32_t var_c0 = 0x2010000;
    /* unimplemented  {fnmul d1, d0, d1} */;
    cv::Mat::convertTo(arg2, &var_c0, (255.0 / (arg3 - arg4)), arg4);
    int32_t* var_b8_1 = &var_a8;
    int64_t var_b0_1 = 0;
    int64_t var_d0 = arg1;
    int64_t var_c8 = 0;
    int32_t var_d8 = 0x2010000;
    var_c0 = 0x1010000;
    cv::applyColorMap(&var_c0, &var_d8, 2);
    int128_t var_78;
    int64_t x8_1 = *var_78[8];
    if (x8_1 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *var_78[8] = 0;
    bool cond:0 = s < 1;
    __builtin_memset(&*s[0xc], 0, 0x20);
    if (!(cond:0))
    {
        int64_t i_1 = 0;
        do
        {
            *(var_68 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < s);
    }
    int64_t* x0_2 = var_60;
    if (x0_2 != &var_58)
    {
        x0_2 = cv::fastFree(x0_2);
    }
    if (*(x21 + 0x28) != x10)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int128_t feasibal_region::ground_process::getExtrinsic(void* arg1, int128_t* arg2 @ x8)
{
    *arg2 = *(arg1 + 0x6c0);
    arg2[1] = *(arg1 + 0x6d0);
    arg2[2] = *(arg1 + 0x6e0);
    int128_t v0 = *(arg1 + 0x6f0);
    arg2[3] = v0;
    return v0;
}

int64_t feasibal_region::ground_process::run(cv::Mat* arg1, cv::Mat* arg2, cv::Mat* arg3, int64_t* arg4 @ x27)
{
    int64_t* var_58 = arg4;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int32_t x8_1 = *(arg2 + 8);
    int32_t x9 = *(arg1 + 0x208);
    int64_t* var_448;
    int128_t s_6;
    int128_t var_250;
    void* var_240;
    int64_t* var_238;
    int128_t s_8;
    int128_t var_1f0;
    int64_t var_1e0;
    int64_t* var_1d8;
    float var_1c0;
    int64_t x0_89;
    int32_t* x26;
    if ((x8_1 != x9 || (x8_1 == x9 && *(arg2 + 0xc) != *(arg1 + 0x20c))))
    {
        x26 = &data_6fde8;
        int64_t* x22_1;
        if ((*data_6fdf0 & 1) == 0)
        {
            x22_1 = &*(data_6fdf0 + 1);
        }
        else
        {
            x22_1 = *(data_6fdfa + 6);
        }
        int32_t var_310 = data_6fde8;
        int64_t s_4;
        __builtin_memset(&s_4, 0, 0x18);
        size_t x0_4 = strlen(x22_1);
        int32_t var_348;
        int64_t s_3;
        size_t x0_15;
        char* x20_4;
        if (x0_4 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* var_2f8_1;
            void* x23_1;
            if (x0_4 >= 0x17)
            {
                uint64_t x24_1 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
                void* x0_6 = operator new(x24_1);
                x23_1 = x0_6;
                size_t var_300_1 = x0_4;
                var_2f8_1 = x0_6;
                s_4 = (x24_1 | 1);
            }
            else
            {
                x23_1 = &*s_4[1];
                s_4 = (x0_4 << 1);
            }
            if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
            {
                memcpy(x23_1, x22_1, x0_4);
            }
            *(x23_1 + x0_4) = 0;
            int32_t x0_9 = g3::logLevel(&var_310);
            int32_t x20_3;
            if ((x0_9 & 1) == 0)
            {
                x20_3 = 0;
                if ((s_4 & 1) != 0)
                {
                label_34c14:
                    operator delete(var_2f8_1);
                    if ((x20_3 & 1) != 0)
                    {
                        goto label_34c40;
                    }
                }
            }
            else
            {
                char var_328 = 0xc;
                int32_t var_327;
                __builtin_strncpy(&var_327, "region", 0x17);
                x20_3 = g3::logTag(&var_328);
                if ((var_328 & 1) != 0)
                {
                    void* var_318;
                    operator delete(var_318);
                    if ((s_4 & 1) != 0)
                    {
                        goto label_34c14;
                    }
                }
                else if ((s_4 & 1) != 0)
                {
                    goto label_34c14;
                }
            }
            if (((((x0_9 & 1) == 0 && (s_4 & 1) == 0) || (x0_9 & 1) != 0) && (x20_3 & 1) != 0))
            {
            label_34c40:
                LogCapture::LogCapture(&var_1c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                *(arg2 + 8);
                *(arg2 + 0xc);
                *(arg1 + 0x208);
                *(arg1 + 0x20c);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
            if ((*data_6fdf0 & 1) == 0)
            {
                x20_4 = &*(data_6fdf0 + 1);
            }
            else
            {
                x20_4 = *(data_6fdfa + 6);
            }
            var_348 = data_6fde8;
            __builtin_memset(&s_3, 0, 0x18);
            x0_15 = strlen(x20_4);
        }
        if ((x0_4 < -0x10 || (x0_4 >= -0x10 && x0_15 < -0x10)))
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_35970:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_35978:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_35980:
            int64_t x0_96 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            int64_t x8_139 = *var_250[8];
            if (x8_139 != 0)
            {
                int32_t temp0_14;
                int32_t i;
                do
                {
                    temp0_14 = __ldaxr((x8_139 + 0x14));
                    i = __stlxr((temp0_14 - 1), (x8_139 + 0x14));
                } while (i != 0);
                if (temp0_14 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_250[8] = 0;
            __builtin_memset(&x26[4], 0, 0x20);
            if (s_6 >= 1)
            {
                int64_t i_1 = 0;
                do
                {
                    *(var_240 + (i_1 << 2)) = 0;
                    i_1 = (i_1 + 1);
                } while (i_1 < s_6);
            }
            if (var_238 != arg4)
            {
                cv::fastFree(var_238);
            }
            int64_t x8_143 = *var_1f0[8];
            if (x8_143 != 0)
            {
                int32_t temp0_15;
                int32_t i_2;
                do
                {
                    temp0_15 = __ldaxr((x8_143 + 0x14));
                    i_2 = __stlxr((temp0_15 - 1), (x8_143 + 0x14));
                } while (i_2 != 0);
                if (temp0_15 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_1f0[8] = 0;
            __builtin_memset(&x26[0x1c], 0, 0x20);
            if (s_8 >= 1)
            {
                int64_t i_3 = 0;
                do
                {
                    *(var_1e0 + (i_3 << 2)) = 0;
                    i_3 = (i_3 + 1);
                } while (i_3 < s_8);
            }
            if (var_1d8 != var_448)
            {
                cv::fastFree(var_1d8);
            }
            sub_20ac4(_Unwind_Resume(x0_96));
            /* no return */
        }
        if ((x0_4 >= -0x10 && x0_15 >= -0x10))
        {
            void* var_330_1;
            void* x21_1;
            if (x0_15 >= 0x17)
            {
                uint64_t x22_2 = ((x0_15 + 0x10) & 0xfffffffffffffff0);
                void* x0_17 = operator new(x22_2);
                x21_1 = x0_17;
                size_t var_338_1 = x0_15;
                var_330_1 = x0_17;
                s_3 = (x22_2 | 1);
            }
            else
            {
                x21_1 = &*s_3[1];
                s_3 = (x0_15 << 1);
            }
            if ((x0_15 >= 0x17 || (x0_15 < 0x17 && x0_15 != 0)))
            {
                memcpy(x21_1, x20_4, x0_15);
            }
            *(x21_1 + x0_15) = 0;
            int32_t x0_20 = g3::logLevel(&var_348);
            int32_t x19_2;
            if ((x0_20 & 1) == 0)
            {
                x19_2 = 0;
                if ((s_3 & 1) != 0)
                {
                label_34d5c:
                    operator delete(var_330_1);
                    if ((x19_2 & 1) != 0)
                    {
                        goto label_34d88;
                    }
                }
            }
            else
            {
                char var_360 = 0xc;
                int32_t var_35f;
                __builtin_strncpy(&var_35f, "region", 0x17);
                x19_2 = g3::logTag(&var_360);
                if ((var_360 & 1) != 0)
                {
                    void* var_350;
                    operator delete(var_350);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_34d5c;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_34d5c;
                }
            }
            if (((((x0_20 & 1) == 0 && (s_3 & 1) == 0) || (x0_20 & 1) != 0) && (x19_2 & 1) != 0))
            {
            label_34d88:
                LogCapture::LogCapture(&var_1c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
            x0_89 = 1;
        }
    }
    if ((x8_1 == x9 && *(arg2 + 0xc) == *(arg1 + 0x20c)))
    {
        int32_t var_280;
        x26 = &var_280;
        *(arg1 + 0xa98) = *(arg2 + 0xc0);
        *(arg1 + 0xa9c) = *(arg2 + 0xc4);
        *(arg1 + 0xaa0) = *(arg2 + 0xc8);
        int32_t var_220 = 0x42ff0000;
        __builtin_memset(&s_8, 0, 0x3c);
        var_1e0 = (&var_220 | 8);
        int64_t var_1d0;
        var_448 = &var_1d0;
        var_1d8 = &var_1d0;
        int64_t var_1c8_1 = 0;
        var_1d0 = 0;
        int64_t var_1b0_1 = 0;
        var_1c0 = 9.4774232e-38f;
        int32_t* var_1b8_1 = &var_220;
        cv::Mat::copyTo(arg2);
        int64_t var_1b0_2 = 0;
        int32_t* var_278_1 = &var_220;
        int64_t s_7 = 0;
        var_280 = 0x2010000;
        var_1c0 = 2.3693558e-38f;
        int32_t* var_1b8_2 = &var_220;
        cv::medianBlur(&var_1c0, &var_280, 3);
        if ((arg1 + 0x890) != arg2)
        {
            int64_t x8_7 = *(arg2 + 0x38);
            if (x8_7 != 0)
            {
                int32_t i_4;
                do
                {
                    i_4 = __stlxr((__ldaxr((x8_7 + 0x14)) + 1), (x8_7 + 0x14));
                } while (i_4 != 0);
            }
            int64_t x8_9 = *(arg1 + 0x8c8);
            if (x8_9 != 0)
            {
                int32_t temp0_2;
                int32_t i_5;
                do
                {
                    temp0_2 = __ldaxr((x8_9 + 0x14));
                    i_5 = __stlxr((temp0_2 - 1), (x8_9 + 0x14));
                } while (i_5 != 0);
                if (temp0_2 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int32_t x8_11 = *(arg1 + 0x894);
            int128_t v0_1;
            v0_1 = 0;
            *v0_1[8] = 0;
            *(arg1 + 0x8c8) = 0;
            __builtin_memset((arg1 + 0x8a0), 0, 0x20);
            int64_t x10_3;
            if (x8_11 <= 0)
            {
                *(arg1 + 0x890) = *arg2;
            }
            else
            {
                int64_t x8_12 = *(arg1 + 0x8d0);
                int64_t x9_6 = 0;
                do
                {
                    *(x8_12 + (x9_6 << 2)) = 0;
                    x10_3 = *(arg1 + 0x894);
                    x9_6 = (x9_6 + 1);
                } while (x9_6 < x10_3);
                *(arg1 + 0x890) = *arg2;
            }
            int32_t x8_31;
            if ((x8_11 <= 0 || (x8_11 > 0 && x10_3 <= 2)))
            {
                x8_31 = *(arg2 + 4);
                if (x8_31 <= 2)
                {
                    *(arg1 + 0x894) = x8_31;
                    int64_t* x10_6 = *(arg1 + 0x8d8);
                    *(arg1 + 0x898) = *(arg2 + 8);
                    int64_t* x8_33 = *(arg2 + 0x48);
                    *x10_6 = *x8_33;
                    x10_6[1] = x8_33[1];
                }
            }
            if ((((x8_11 <= 0 || (x8_11 > 0 && x10_3 <= 2)) && x8_31 > 2) || (x8_11 > 0 && x10_3 > 2)))
            {
                cv::Mat::copySize((arg1 + 0x890));
            }
            *(arg1 + 0x8a0) = *(arg2 + 0x10);
            *(arg1 + 0x8b0) = *(arg2 + 0x20);
            *(arg1 + 0x8c0) = *(arg2 + 0x30);
        }
        var_1c0 = 2.3693558e-38f;
        int64_t var_230;
        arg4 = &var_230;
        var_280 = 0x42ff0000;
        int64_t var_1b0_3 = 0;
        __builtin_memset(&s_6, 0, 0x3c);
        var_240 = &*s_6[4];
        var_238 = &var_230;
        int64_t var_228_1 = 0;
        var_230 = 0;
        int32_t var_1b8_3 = &var_220;
        double var_370;
        double var_368;
        cv::minMaxLoc(&var_1c0, &var_368, &var_370, nullptr, nullptr, cv::noArray());
        var_370 = 3000.0;
        var_368 = 0.0;
        int128_t v0_3;
        int128_t s_9;
        int128_t v2_1;
        v0_3 = feasibal_region::depth2color(&var_280, &var_220, 0.0, 3000.0);
        if ((arg1 + 0x8f0) != &var_280)
        {
            int64_t x8_35 = *var_250[8];
            if (x8_35 != 0)
            {
                int32_t i_6;
                do
                {
                    i_6 = __stlxr((__ldaxr((x8_35 + 0x14)) + 1), (x8_35 + 0x14));
                } while (i_6 != 0);
            }
            int64_t x8_37 = *(arg1 + 0x928);
            if (x8_37 != 0)
            {
                int32_t temp0_5;
                int32_t i_7;
                do
                {
                    temp0_5 = __ldaxr((x8_37 + 0x14));
                    i_7 = __stlxr((temp0_5 - 1), (x8_37 + 0x14));
                } while (i_7 != 0);
                if (temp0_5 == 1)
                {
                    v0_3 = cv::Mat::deallocate();
                }
            }
            int32_t x8_39 = *(arg1 + 0x8f4);
            v0_3 = 0;
            *v0_3[8] = 0;
            *(arg1 + 0x928) = 0;
            __builtin_memset((arg1 + 0x900), 0, 0x20);
            int64_t x10_9;
            if (x8_39 <= 0)
            {
                *(arg1 + 0x8f0) = var_280;
            }
            else
            {
                int64_t x8_40 = *(arg1 + 0x930);
                int64_t x9_13 = 0;
                do
                {
                    *(x8_40 + (x9_13 << 2)) = 0;
                    x10_9 = *(arg1 + 0x8f4);
                    x9_13 = (x9_13 + 1);
                } while (x9_13 < x10_9);
                *(arg1 + 0x8f0) = var_280;
            }
            int32_t x8_43;
            if ((x8_39 <= 0 || (x8_39 > 0 && x10_9 <= 2)))
            {
                x8_43 = s_6;
                if (x8_43 <= 2)
                {
                    *(arg1 + 0x8f4) = x8_43;
                    int64_t* x10_10 = *(arg1 + 0x938);
                    *(arg1 + 0x8f8) = var_278_1;
                    *x10_10 = *var_238;
                    x10_10[1] = var_238[1];
                }
            }
            if ((((x8_39 <= 0 || (x8_39 > 0 && x10_9 <= 2)) && x8_43 > 2) || (x8_39 > 0 && x10_9 > 2)))
            {
                v0_3 = cv::Mat::copySize((arg1 + 0x8f0));
            }
            *(arg1 + 0x900) = s_7;
            int128_t var_260;
            *(arg1 + 0x910) = var_260;
            *(arg1 + 0x920) = var_250;
        }
        v0_3 = var_220;
        s_9 = s_8;
        int64_t x8_47 = *var_1f0[8];
        int128_t var_2e0 = v0_3;
        int128_t s_10 = s_9;
        int128_t var_20c;
        int128_t var_2c0_1 = var_20c;
        int64_t var_2b0_1 = var_1f0;
        int64_t var_290;
        int64_t* var_298_1 = &var_290;
        var_290 = 0;
        int64_t var_288_1 = 0;
        if (x8_47 != 0)
        {
            int32_t i_8;
            do
            {
                i_8 = __stlxr((__ldaxr((x8_47 + 0x14)) + 1), (x8_47 + 0x14));
            } while (i_8 != 0);
        }
        if (((x8_47 == 0 && v0_3 <= 2) || (x8_47 != 0 && s_8 <= 2)))
        {
            *var_298_1 = *var_1d8;
            var_298_1[1] = var_1d8[1];
        }
        if (((x8_47 == 0 && v0_3 > 2) || (x8_47 != 0 && s_8 > 2)))
        {
            *var_2e0[4] = 0;
            cv::Mat::copySize(&var_2e0);
        }
        feasibal_region::ground_process::pointCloudProcess(arg1);
        if (x8_47 != 0)
        {
            int32_t temp0_7;
            int32_t i_9;
            do
            {
                temp0_7 = __ldaxr((x8_47 + 0x14));
                i_9 = __stlxr((temp0_7 - 1), (x8_47 + 0x14));
            } while (i_9 != 0);
            if (temp0_7 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int64_t var_2a8_2 = 0;
        int128_t s_5;
        __builtin_memset(&s_5, 0, 0x20);
        if (*var_2e0[4] >= 1)
        {
            int64_t i_10 = 0;
            do
            {
                *((&var_2e0 | 8) + (i_10 << 2)) = 0;
                i_10 = (i_10 + 1);
            } while (i_10 < *var_2e0[4]);
        }
        if (var_298_1 != &var_290)
        {
            cv::fastFree(var_298_1);
        }
        feasibal_region::ground_process::planeProcess();
        feasibal_region::ground_process::groundProcess();
        int128_t v0_4;
        if ((*(arg1 + 0x10) == 0 && *(arg1 + 0x950) != 0))
        {
            *(arg1 + 0x714) = *(arg1 + 0x704);
            int32_t x0_45;
            x0_45 = feasibal_region::ground_process::getExtrinsicFromPlane(arg1);
            if (x0_45 == 0)
            {
                v0_4 = *(arg1 + 0x724);
                int128_t var_390_1 = v0_4;
                int32_t x0_47;
                x0_47 = feasibal_region::ground_process::set_calib(arg1, v0_4);
                if (x0_47 == 0)
                {
                    int32_t var_374;
                    feasibal_region::ground_process::getPlaneFromExtrinsic(arg1, &var_1c0, &var_374);
                    v0_4 = var_374;
                    /* unimplemented  {fabd s1, s0, s1} */;
                    if (!(*(arg1 + 0x888) >= 20f))
                    {
                        int64_t var_2f0_1 = var_1c0;
                        int32_t var_2e8_1 = var_1b8_3;
                        CAPE::updateDefaultPlane(*(arg1 + 0x200), v0_4);
                        *(arg1 + 0x10) = 1;
                    }
                }
            }
        }
        if ((arg3 + 0x18) != (arg1 + 0x970))
        {
            *(arg1 + 0x978);
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>((arg3 + 0x18), *(arg1 + 0x970));
        }
        if ((arg3 + 0x30) != (arg1 + 0x988))
        {
            *(arg1 + 0x990);
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>((arg3 + 0x30), *(arg1 + 0x988));
        }
        if ((arg3 + 0x48) != (arg1 + 0x9a0))
        {
            *(arg1 + 0x9a8);
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>((arg3 + 0x48), *(arg1 + 0x9a0));
        }
        if ((arg3 + 0x60) != (arg1 + 0x9b8))
        {
            *(arg1 + 0x9c0);
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>((arg3 + 0x60), *(arg1 + 0x9b8));
        }
        if (arg3 != (arg1 + 0x958))
        {
            *(arg1 + 0x960);
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(arg3, *(arg1 + 0x958));
        }
        *(arg3 + 0x8c) = *(arg1 + 0x9d4);
        *(arg3 + 0x78) = *(arg1 + 0x704);
        *(arg3 + 0x88) = *(arg1 + 0x950);
        *(arg3 + 0x90) = *(arg1 + 0x9d8);
        if ((arg3 + 0xd8) != (arg1 + 0x7c8))
        {
            int64_t x8_67 = *(arg1 + 0x800);
            if (x8_67 != 0)
            {
                int32_t i_11;
                do
                {
                    i_11 = __stlxr((__ldaxr((x8_67 + 0x14)) + 1), (x8_67 + 0x14));
                } while (i_11 != 0);
            }
            int64_t x8_69 = *(arg3 + 0x110);
            if (x8_69 != 0)
            {
                int32_t temp0_9;
                int32_t i_12;
                do
                {
                    temp0_9 = __ldaxr((x8_69 + 0x14));
                    i_12 = __stlxr((temp0_9 - 1), (x8_69 + 0x14));
                } while (i_12 != 0);
                if (temp0_9 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int32_t x8_71 = *(arg3 + 0xdc);
            v0_4 = 0;
            *v0_4[8] = 0;
            *(arg3 + 0x110) = 0;
            __builtin_memset((arg3 + 0xe8), 0, 0x20);
            int64_t x10_17;
            if (x8_71 <= 0)
            {
                *(arg3 + 0xd8) = *(arg1 + 0x7c8);
            }
            else
            {
                int64_t x8_72 = *(arg3 + 0x118);
                int64_t x9_26 = 0;
                do
                {
                    *(x8_72 + (x9_26 << 2)) = 0;
                    x10_17 = *(arg3 + 0xdc);
                    x9_26 = (x9_26 + 1);
                } while (x9_26 < x10_17);
                *(arg3 + 0xd8) = *(arg1 + 0x7c8);
            }
            int32_t x8_79;
            if ((x8_71 <= 0 || (x8_71 > 0 && x10_17 <= 2)))
            {
                x8_79 = *(arg1 + 0x7cc);
                if (x8_79 <= 2)
                {
                    *(arg3 + 0xdc) = x8_79;
                    int64_t* x10_18 = *(arg3 + 0x120);
                    *(arg3 + 0xe0) = *(arg1 + 0x7d0);
                    int64_t* x8_81 = *(arg1 + 0x810);
                    *x10_18 = *x8_81;
                    x10_18[1] = x8_81[1];
                }
            }
            if ((((x8_71 <= 0 || (x8_71 > 0 && x10_17 <= 2)) && x8_79 > 2) || (x8_71 > 0 && x10_17 > 2)))
            {
                cv::Mat::copySize((arg3 + 0xd8));
            }
            *(arg3 + 0xe8) = *(arg1 + 0x7d8);
            *(arg3 + 0xf8) = *(arg1 + 0x7e8);
            *(arg3 + 0x108) = *(arg1 + 0x7f8);
        }
        *(arg3 + 0x138) = *(arg1 + 0x114);
        if ((arg3 + 0x140) != (arg1 + 0x428))
        {
            int64_t x8_88 = *(arg1 + 0x460);
            if (x8_88 != 0)
            {
                int32_t i_13;
                do
                {
                    i_13 = __stlxr((__ldaxr((x8_88 + 0x14)) + 1), (x8_88 + 0x14));
                } while (i_13 != 0);
            }
            int64_t x8_90 = *(arg3 + 0x178);
            if (x8_90 != 0)
            {
                int32_t temp0_11;
                int32_t i_14;
                do
                {
                    temp0_11 = __ldaxr((x8_90 + 0x14));
                    i_14 = __stlxr((temp0_11 - 1), (x8_90 + 0x14));
                } while (i_14 != 0);
                if (temp0_11 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int32_t x8_92 = *(arg3 + 0x144);
            v0_4 = 0;
            *v0_4[8] = 0;
            *(arg3 + 0x178) = 0;
            __builtin_memset((arg3 + 0x150), 0, 0x20);
            int64_t x10_21;
            if (x8_92 <= 0)
            {
                *(arg3 + 0x140) = *(arg1 + 0x428);
            }
            else
            {
                int64_t x8_93 = *(arg3 + 0x180);
                int64_t x9_33 = 0;
                do
                {
                    *(x8_93 + (x9_33 << 2)) = 0;
                    x10_21 = *(arg3 + 0x144);
                    x9_33 = (x9_33 + 1);
                } while (x9_33 < x10_21);
                *(arg3 + 0x140) = *(arg1 + 0x428);
            }
            int32_t x8_96;
            if ((x8_92 <= 0 || (x8_92 > 0 && x10_21 <= 2)))
            {
                x8_96 = *(arg1 + 0x42c);
                if (x8_96 <= 2)
                {
                    *(arg3 + 0x144) = x8_96;
                    int64_t* x10_22 = *(arg3 + 0x188);
                    *(arg3 + 0x148) = *(arg1 + 0x430);
                    int64_t* x8_98 = *(arg1 + 0x470);
                    *x10_22 = *x8_98;
                    x10_22[1] = x8_98[1];
                }
            }
            if ((((x8_92 <= 0 || (x8_92 > 0 && x10_21 <= 2)) && x8_96 > 2) || (x8_92 > 0 && x10_21 > 2)))
            {
                cv::Mat::copySize((arg3 + 0x140));
            }
            *(arg3 + 0x150) = *(arg1 + 0x438);
            *(arg3 + 0x160) = *(arg1 + 0x448);
            *(arg3 + 0x170) = *(arg1 + 0x458);
        }
        cv::Mat* x21;
        if ((*data_6fdf0 & 1) == 0)
        {
            x21 = &*(data_6fdf0 + 1);
        }
        else
        {
            x21 = *(data_6fdfa + 6);
        }
        int32_t var_3b0 = data_6fde8;
        int64_t s_2;
        __builtin_memset(&s_2, 0, 0x18);
        size_t x0_54 = strlen(x21);
        if (x0_54 < -0x10)
        {
            goto label_35970;
        }
        void* var_398_1;
        void* x22_5;
        if (x0_54 >= 0x17)
        {
            uint64_t x23_2 = ((x0_54 + 0x10) & 0xfffffffffffffff0);
            void* x0_56 = operator new(x23_2);
            x22_5 = x0_56;
            size_t var_3a0_1 = x0_54;
            var_398_1 = x0_56;
            s_2 = (x23_2 | 1);
        }
        else
        {
            x22_5 = &*s_2[1];
            s_2 = (x0_54 << 1);
        }
        if ((x0_54 >= 0x17 || (x0_54 < 0x17 && x0_54 != 0)))
        {
            memcpy(x22_5, x21, x0_54);
        }
        *(x22_5 + x0_54) = 0;
        int32_t x0_59 = g3::logLevel(&var_3b0);
        int32_t x20_6;
        if ((x0_59 & 1) == 0)
        {
            x20_6 = 0;
            if ((s_2 & 1) != 0)
            {
            label_355e0:
                operator delete(var_398_1);
                if ((x20_6 & 1) != 0)
                {
                    goto label_3554c;
                }
            }
        }
        else
        {
            char var_3c8 = 0xc;
            int32_t var_3c7;
            __builtin_strncpy(&var_3c7, "region", 0x17);
            x20_6 = g3::logTag(&var_3c8);
            if ((var_3c8 & 1) != 0)
            {
                void* var_3b8;
                operator delete(var_3b8);
                if ((s_2 & 1) != 0)
                {
                    goto label_355e0;
                }
            }
            else if ((s_2 & 1) != 0)
            {
                goto label_355e0;
            }
        }
        if (((((x0_59 & 1) == 0 && (s_2 & 1) == 0) || (x0_59 & 1) != 0) && (x20_6 & 1) != 0))
        {
        label_3554c:
            LogCapture::LogCapture(&var_1c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            *(arg1 + 0x950);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        if ((((((((x0_59 & 1) == 0 && (s_2 & 1) == 0) || (x0_59 & 1) != 0) && (x20_6 & 1) == 0) || ((x0_59 & 1) == 0 && (s_2 & 1) != 0)) && *(arg1 + 0x10) == 0) || (((((x0_59 & 1) == 0 && (s_2 & 1) == 0) || (x0_59 & 1) != 0) && (x20_6 & 1) != 0) && *(arg1 + 0x10) == 0)))
        {
            char* x20_7;
            if ((*data_6fdf0 & 1) != 0)
            {
                x20_7 = *(data_6fdfa + 6);
                goto label_35598;
            }
            x20_7 = &*(data_6fdf0 + 1);
        label_35598:
            int32_t var_420 = data_6fde8;
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            size_t x0_64 = strlen(x20_7);
            if (x0_64 < -0x10)
            {
                goto label_35980;
            }
            void* var_408_1;
            void* x21_5;
            if (x0_64 >= 0x17)
            {
                uint64_t x22_7 = ((x0_64 + 0x10) & 0xfffffffffffffff0);
                void* x0_79 = operator new(x22_7);
                x21_5 = x0_79;
                size_t var_410_1 = x0_64;
                var_408_1 = x0_79;
                s = (x22_7 | 1);
            }
            else
            {
                x21_5 = &*s[1];
                s = (x0_64 << 1);
            }
            if ((x0_64 >= 0x17 || (x0_64 < 0x17 && x0_64 != 0)))
            {
                memcpy(x21_5, x20_7, x0_64);
            }
            *(x21_5 + x0_64) = 0;
            int32_t x19_6;
            if ((g3::logLevel(&var_420) & 1) == 0)
            {
                x19_6 = 0;
                if ((s & 1) != 0)
                {
                label_357d4:
                    operator delete(var_408_1);
                    if ((x19_6 & 1) != 0)
                    {
                        goto label_35800;
                    }
                    goto label_3581c;
                }
            }
            else
            {
                char var_438 = 0xc;
                int32_t var_437;
                __builtin_strncpy(&var_437, "region", 0x17);
                x19_6 = g3::logTag(&var_438);
                if ((var_438 & 1) != 0)
                {
                    void* var_428;
                    operator delete(var_428);
                    if ((s & 1) != 0)
                    {
                        goto label_357d4;
                    }
                }
                else if ((s & 1) != 0)
                {
                    goto label_357d4;
                }
            }
            if ((x19_6 & 1) == 0)
            {
                goto label_3581c;
            }
        label_35800:
            LogCapture::LogCapture(&var_1c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
        label_35818:
            LogCapture::~LogCapture();
        label_3581c:
            int64_t x8_127 = *var_250[8];
            if (x8_127 != 0)
            {
                int32_t temp0_12;
                int32_t i_15;
                do
                {
                    temp0_12 = __ldaxr((x8_127 + 0x14));
                    i_15 = __stlxr((temp0_12 - 1), (x8_127 + 0x14));
                } while (i_15 != 0);
                if (temp0_12 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_250[8] = 0;
            __builtin_memset(&s_7, 0, 0x20);
            if (s_6 >= 1)
            {
                int64_t i_16 = 0;
                do
                {
                    *(var_240 + (i_16 << 2)) = 0;
                    i_16 = (i_16 + 1);
                } while (i_16 < s_6);
            }
            if (var_238 != &var_230)
            {
                cv::fastFree(var_238);
            }
            int64_t x8_131 = *var_1f0[8];
            if (x8_131 != 0)
            {
                int32_t temp0_13;
                int32_t i_17;
                do
                {
                    temp0_13 = __ldaxr((x8_131 + 0x14));
                    i_17 = __stlxr((temp0_13 - 1), (x8_131 + 0x14));
                } while (i_17 != 0);
                if (temp0_13 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            *var_1f0[8] = 0;
            __builtin_memset(&*s_8[0xc], 0, 0x20);
            if (s_8 >= 1)
            {
                int64_t i_18 = 0;
                do
                {
                    *(var_1e0 + (i_18 << 2)) = 0;
                    i_18 = (i_18 + 1);
                } while (i_18 < s_8);
            }
            if (var_1d8 != var_448)
            {
                cv::fastFree(var_1d8);
            }
            x0_89 = 0;
        }
        if ((((((((x0_59 & 1) == 0 && (s_2 & 1) == 0) || (x0_59 & 1) != 0) && (x20_6 & 1) == 0) || ((x0_59 & 1) == 0 && (s_2 & 1) != 0)) && *(arg1 + 0x10) != 0) || (((((x0_59 & 1) == 0 && (s_2 & 1) == 0) || (x0_59 & 1) != 0) && (x20_6 & 1) != 0) && *(arg1 + 0x10) != 0)))
        {
            char* x20_8;
            if ((*data_6fdf0 & 1) == 0)
            {
                x20_8 = &*(data_6fdf0 + 1);
            label_35614:
                int32_t var_3e8 = data_6fde8;
                int64_t s_1;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_67 = strlen(x20_8);
                if (x0_67 < -0x10)
                {
                    goto label_35978;
                }
                void* var_3d0_1;
                void* x21_6;
                if (x0_67 >= 0x17)
                {
                    uint64_t x22_6 = ((x0_67 + 0x10) & 0xfffffffffffffff0);
                    void* x0_69 = operator new(x22_6);
                    x21_6 = x0_69;
                    size_t var_3d8_1 = x0_67;
                    var_3d0_1 = x0_69;
                    s_1 = (x22_6 | 1);
                }
                else
                {
                    x21_6 = &*s_1[1];
                    s_1 = (x0_67 << 1);
                }
                if ((x0_67 >= 0x17 || (x0_67 < 0x17 && x0_67 != 0)))
                {
                    memcpy(x21_6, x20_8, x0_67);
                }
                *(x21_6 + x0_67) = 0;
                int32_t x19_5;
                if ((g3::logLevel(&var_3e8) & 1) == 0)
                {
                    x19_5 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_356e4:
                        operator delete(var_3d0_1);
                        if ((x19_5 & 1) == 0)
                        {
                            goto label_3581c;
                        }
                        goto label_35710;
                    }
                }
                else
                {
                    char var_400 = 0xc;
                    int32_t var_3ff;
                    __builtin_strncpy(&var_3ff, "region", 0x17);
                    x19_5 = g3::logTag(&var_400);
                    if ((var_400 & 1) != 0)
                    {
                        void* var_3f0;
                        operator delete(var_3f0);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_356e4;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_356e4;
                    }
                }
                if ((x19_5 & 1) == 0)
                {
                    goto label_3581c;
                }
            label_35710:
                LogCapture::LogCapture(&var_1c0, "region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                LogCapture::capturef();
                goto label_35818;
            }
            x20_8 = *(data_6fdfa + 6);
            goto label_35614;
        }
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_89;
}

void sub_35988(int64_t arg1, int64_t arg2 @ x27, int64_t arg3, int32_t arg4, int64_t arg5, int64_t arg6, void* arg7, int32_t arg8, int64_t arg9, int64_t arg10, void* arg11) __noreturn
{
    LogCapture::~LogCapture();
    if (arg5 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg5 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg5 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg5 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg4 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg4);
    }
    if (arg7 != arg2)
    {
        cv::fastFree(arg7);
    }
    if (arg9 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg9 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg9 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg9 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg8 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg10 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg8);
    }
    if (arg11 != arg3)
    {
        cv::fastFree(arg11);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_35990(int64_t arg1, int64_t arg2 @ x27, int64_t arg3, char arg4, void* arg5, char arg6, void* arg7, int32_t arg8, int64_t arg9, int64_t arg10, void* arg11, int32_t arg12, int64_t arg13, int64_t arg14, void* arg15) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    int64_t x8_2;
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        x8_2 = arg9;
        if (x8_2 != 0)
        {
        label_35c20:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x8_2 = arg9;
        if (x8_2 != 0)
        {
            goto label_35c20;
        }
    }
    arg9 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg8 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg10 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg8);
    }
    if (arg11 != arg2)
    {
        cv::fastFree(arg11);
    }
    if (arg13 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg13 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg13 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg13 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg12 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg14 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg12);
    }
    if (arg15 != arg3)
    {
        cv::fastFree(arg15);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_359b8(int64_t arg1, int64_t arg2 @ x27, int64_t arg3, char arg4, void* arg5, char arg6, void* arg7, int32_t arg8, int64_t arg9, int64_t arg10, void* arg11, int32_t arg12, int64_t arg13, int64_t arg14, void* arg15) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    int64_t x8_2;
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        x8_2 = arg9;
        if (x8_2 != 0)
        {
        label_35c20:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x8_2 = arg9;
        if (x8_2 != 0)
        {
            goto label_35c20;
        }
    }
    arg9 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg8 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg10 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg8);
    }
    if (arg11 != arg2)
    {
        cv::fastFree(arg11);
    }
    if (arg13 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg13 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg13 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg13 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg12 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg14 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg12);
    }
    if (arg15 != arg3)
    {
        cv::fastFree(arg15);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_359d8(int64_t arg1, int64_t arg2 @ x27, int64_t arg3, char arg4, void* arg5, int32_t arg6, int64_t arg7, int64_t arg8, void* arg9, int32_t arg10, int64_t arg11, int64_t arg12, void* arg13) __noreturn
{
    int64_t x8_1;
    if ((arg4 & 1) == 0)
    {
        x8_1 = arg7;
    }
    else
    {
        operator delete(arg5);
        x8_1 = arg7;
    }
    if ((((arg4 & 1) == 0 && x8_1 != 0) || ((arg4 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg7 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg6 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg8 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg6);
    }
    if (arg9 != arg2)
    {
        cv::fastFree(arg9);
    }
    if (arg11 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg11 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg11 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg11 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg10 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg12 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg10);
    }
    if (arg13 != arg3)
    {
        cv::fastFree(arg13);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_35a08(int64_t arg1, int64_t arg2 @ x27, int64_t arg3, char arg4, void* arg5, char arg6, void* arg7, int32_t arg8, int64_t arg9, int64_t arg10, void* arg11, int32_t arg12, int64_t arg13, int64_t arg14, void* arg15) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    int64_t x8_2;
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        x8_2 = arg9;
        if (x8_2 != 0)
        {
        label_35c20:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        x8_2 = arg9;
        if (x8_2 != 0)
        {
            goto label_35c20;
        }
    }
    arg9 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg8 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg10 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg8);
    }
    if (arg11 != arg2)
    {
        cv::fastFree(arg11);
    }
    if (arg13 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg13 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg13 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg13 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg12 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg14 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg12);
    }
    if (arg15 != arg3)
    {
        cv::fastFree(arg15);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_35a28(int64_t arg1, int64_t arg2, int32_t arg3, int64_t arg4, int64_t arg5, void* arg6) __noreturn
{
    if (arg4 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg4 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg4 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg4 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg3 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg5 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg3);
    }
    if (arg6 != arg2)
    {
        cv::fastFree(arg6);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_35a2c(int64_t arg1, int64_t arg2 @ x27, int64_t arg3, char arg4, void* arg5, int32_t arg6, int64_t arg7, int64_t arg8, void* arg9, int32_t arg10, int64_t arg11, int64_t arg12, void* arg13) __noreturn
{
    int64_t x8_1;
    if ((arg4 & 1) == 0)
    {
        x8_1 = arg7;
    }
    else
    {
        operator delete(arg5);
        x8_1 = arg7;
    }
    if ((((arg4 & 1) == 0 && x8_1 != 0) || ((arg4 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg7 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg6 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg8 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg6);
    }
    if (arg9 != arg2)
    {
        cv::fastFree(arg9);
    }
    if (arg11 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg11 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg11 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg11 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg10 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg12 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg10);
    }
    if (arg13 != arg3)
    {
        cv::fastFree(arg13);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_35a40(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_35a6c(int64_t arg1, int64_t arg2 @ x21, int64_t arg3 @ x27, int64_t arg4, int32_t arg5, int64_t arg6, int64_t arg7, void* arg8, int32_t arg9, int64_t arg10, int64_t arg11, void* arg12, int32_t arg13, int64_t arg14, int64_t arg15, void* arg16) __noreturn
{
    if (arg6 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg6 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg6 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg6 = 0;
    int64_t s;
    __builtin_memset(s, 0, 0x20);
    if (arg5 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg7 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg5);
    }
    if (arg8 != arg2)
    {
        cv::fastFree(arg8);
    }
    if (arg10 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg10 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg10 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg10 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg9 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg11 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg9);
    }
    if (arg12 != arg3)
    {
        cv::fastFree(arg12);
    }
    if (arg14 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg14 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg14 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg14 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg13 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg15 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg13);
    }
    if (arg16 != arg4)
    {
        cv::fastFree(arg16);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_35ae0(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_35af4(int64_t arg1, int64_t arg2, int32_t arg3, int64_t arg4, int64_t arg5, void* arg6) __noreturn
{
    if (arg4 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg4 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg4 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg4 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg3 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg5 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg3);
    }
    if (arg6 != arg2)
    {
        cv::fastFree(arg6);
    }
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void sub_35b6c(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t feasibal_region::ground_process::pointCloudProcess(void* arg1, int128_t* arg2)
{
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    int128_t v0 = *arg2;
    int128_t v1 = arg2[1];
    int128_t var_d0 = v0;
    int16_t* var_c0 = v1;
    int128_t var_b0 = arg2[2];
    int64_t var_a0 = arg2[3];
    int64_t x8_3 = *(arg2 + 0x38);
    int64_t var_80;
    int64_t* var_88 = &var_80;
    var_80 = 0;
    int64_t var_78 = 0;
    if (x8_3 != 0)
    {
        int32_t i;
        do
        {
            i = __stlxr((__ldaxr((x8_3 + 0x14)) + 1), (x8_3 + 0x14));
        } while (i != 0);
    }
    if (((x8_3 == 0 && v0 <= 2) || (x8_3 != 0 && *(arg2 + 4) <= 2)))
    {
        int64_t* x8_6 = *(arg2 + 0x48);
        *var_88 = *x8_6;
        var_88[1] = x8_6[1];
    }
    if (((x8_3 == 0 && v0 > 2) || (x8_3 != 0 && *(arg2 + 4) > 2)))
    {
        *var_d0[4] = 0;
        v0 = cv::Mat::copySize(&var_d0);
    }
    uint64_t x8_9 = *var_d0[8];
    if (x8_9 >= 1)
    {
        uint64_t i_7 = *var_d0[0xc];
        int64_t x11_1 = *(arg1 + 0x230);
        int32_t* x12_1 = *(arg1 + 0x2b8);
        int32_t* x13_1 = *(arg1 + 0x318);
        char* x14_1 = *(arg1 + 0x438);
        int16_t* x15_1 = var_c0;
        int32_t* x16_1 = *(arg1 + 0x258);
        int64_t x17_2 = **(arg1 + 0x2f0);
        int64_t x0_2 = **(arg1 + 0x350);
        int64_t x1_2 = **(arg1 + 0x470);
        int64_t x2_2 = *var_88;
        int64_t x3_2 = **(arg1 + 0x290);
        int32_t x5_1 = (x8_9 * i_7);
        int64_t x9_4 = 0;
        int64_t x4_1 = (x11_1 + (x5_1 << 2));
        int64_t x5_2 = (x11_1 + (x5_1 << 3));
        do
        {
            int16_t* x6_1 = x15_1;
            int32_t* x7_1 = x16_1;
            char* x24_1 = x14_1;
            uint64_t i_6 = i_7;
            int32_t* x26_1 = x12_1;
            int32_t* x27_1 = x13_1;
            if (i_7 >= 1)
            {
                uint64_t i_1;
                do
                {
                    uint64_t x22_1 = *x7_1;
                    int32_t* x22_4;
                    int32_t x28_2;
                    int32_t* x28_3;
                    int32_t* x30_1;
                    if (*x24_1 == 0)
                    {
                        uint64_t x22_3 = (x22_1 << 2);
                        x28_3 = (x11_1 + x22_3);
                        x30_1 = (x4_1 + x22_3);
                        x22_4 = (x5_2 + x22_3);
                        *x28_3 = 0;
                        *x30_1 = 0;
                        *x22_4 = 0;
                    }
                    else
                    {
                        x28_2 = *x6_1;
                        if (x28_2 <= 0)
                        {
                            uint64_t x22_5 = (x22_1 << 2);
                            x28_3 = (x11_1 + x22_5);
                            x30_1 = (x4_1 + x22_5);
                            x22_4 = (x5_2 + x22_5);
                        }
                    }
                    if ((*x24_1 == 0 || (*x24_1 != 0 && x28_2 <= 0)))
                    {
                        *x28_3 = 0;
                        *x30_1 = 0;
                        *x22_4 = 0;
                    }
                    if ((*x24_1 != 0 && x28_2 > 0))
                    {
                        v0 = *x26_1;
                        v1 = *x27_1;
                        float temp0_2 = vcvts_f32_s32(x28_2);
                        uint64_t x22_2 = (x22_1 << 2);
                        v0 = (v0 * temp0_2);
                        v1 = (v1 * temp0_2);
                        *(x11_1 + x22_2) = v0;
                        *(x4_1 + x22_2) = v1;
                        *(x5_2 + x22_2) = temp0_2;
                    }
                    x27_1 = &x27_1[1];
                    x26_1 = &x26_1[1];
                    i_1 = i_6;
                    i_6 = (i_6 - 1);
                    x24_1 = &x24_1[1];
                    x7_1 = &x7_1[1];
                    x6_1 = &x6_1[1];
                } while (i_1 != 1);
            }
            x9_4 = (x9_4 + 1);
            x13_1 = (x13_1 + x0_2);
            x12_1 = (x12_1 + x17_2);
            x14_1 = &x14_1[x1_2];
            x16_1 = (x16_1 + x3_2);
            x15_1 = (x15_1 + x2_2);
        } while (x9_4 != x8_9);
    }
    if (x8_3 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_3 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_3 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    v0 = 0;
    *v0[8] = 0;
    int64_t var_98_1 = 0;
    int128_t s;
    __builtin_memset(&s, 0, 0x20);
    if (*var_d0[4] >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *((&var_d0 | 8) + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *var_d0[4]);
    }
    if (var_88 != &var_80)
    {
        cv::fastFree(var_88);
    }
    if ((arg1 + 0xa30) != arg2)
    {
        int64_t x8_14 = *(arg2 + 0x38);
        if (x8_14 != 0)
        {
            int32_t i_4;
            do
            {
                i_4 = __stlxr((__ldaxr((x8_14 + 0x14)) + 1), (x8_14 + 0x14));
            } while (i_4 != 0);
        }
        int64_t x8_16 = *(arg1 + 0xa68);
        if (x8_16 != 0)
        {
            int32_t temp0_6;
            int32_t i_5;
            do
            {
                temp0_6 = __ldaxr((x8_16 + 0x14));
                i_5 = __stlxr((temp0_6 - 1), (x8_16 + 0x14));
            } while (i_5 != 0);
            if (temp0_6 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int32_t x8_18 = *(arg1 + 0xa34);
        v0 = 0;
        *v0[8] = 0;
        *(arg1 + 0xa68) = 0;
        __builtin_memset((arg1 + 0xa40), 0, 0x20);
        int64_t x10_7;
        if (x8_18 <= 0)
        {
            *(arg1 + 0xa30) = *arg2;
        }
        else
        {
            int64_t x8_19 = *(arg1 + 0xa70);
            int64_t x9_11 = 0;
            do
            {
                *(x8_19 + (x9_11 << 2)) = 0;
                x10_7 = *(arg1 + 0xa34);
                x9_11 = (x9_11 + 1);
            } while (x9_11 < x10_7);
            *(arg1 + 0xa30) = *arg2;
        }
        int32_t x8_22;
        if ((x8_18 <= 0 || (x8_18 > 0 && x10_7 <= 2)))
        {
            x8_22 = *(arg2 + 4);
            if (x8_22 <= 2)
            {
                *(arg1 + 0xa34) = x8_22;
                int64_t* x10_8 = *(arg1 + 0xa78);
                *(arg1 + 0xa38) = *(arg2 + 8);
                int64_t* x8_24 = *(arg2 + 0x48);
                *x10_8 = *x8_24;
                x10_8[1] = x8_24[1];
            }
        }
        if ((((x8_18 <= 0 || (x8_18 > 0 && x10_7 <= 2)) && x8_22 > 2) || (x8_18 > 0 && x10_7 > 2)))
        {
            cv::Mat::copySize((arg1 + 0xa30));
        }
        *(arg1 + 0xa40) = arg2[1];
        *(arg1 + 0xa50) = arg2[2];
        *(arg1 + 0xa60) = arg2[3];
    }
    if (*(x8 + 0x28) != x8_1)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

int64_t feasibal_region::ground_process::planeProcess(void* arg1, int128_t arg2 @ v8)
{
    int64_t v10;
    int64_t var_80 = v10;
    int64_t v9;
    int64_t var_70 = v9;
    int64_t var_68 = arg2;
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    int32_t s_9;
    __builtin_memset(&s_9, 0, 0x1c);
    int128_t var_340 = data_547b0;
    int32_t var_344 = 0;
    int64_t var_358;
    gettimeofday(&var_358, 0);
    void* var_328;
    int128_t s_21;
    int128_t v1;
    s_21 = CAPE::process_modify_opt(*(arg1 + 0x200), (arg1 + 0x230), &s_9, (arg1 + 0x768), &var_328, &var_340);
    int128_t s_11;
    int32_t var_1dc;
    int128_t var_1b0;
    int64_t var_1a0;
    int64_t* var_198;
    int128_t var_190;
    int64_t x9_5;
    int64_t var_1a8;
    if ((arg1 + 0x828) == &s_11)
    {
        x9_5 = var_1a8;
    }
    else
    {
        int64_t x8_2 = *(arg1 + 0x860);
        if (x8_2 != 0)
        {
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                s_21 = cv::Mat::deallocate();
            }
        }
        s_21 = 0;
        *s_21[8] = 0;
        *(arg1 + 0x860) = 0;
        __builtin_memset((arg1 + 0x838), 0, 0x20);
        if (*(arg1 + 0x82c) >= 1)
        {
            int64_t x9_4 = *(arg1 + 0x868);
            int64_t i_1 = 0;
            do
            {
                *(x9_4 + (i_1 << 2)) = 0;
                i_1 = (i_1 + 1);
            } while (i_1 < *(arg1 + 0x82c));
        }
        s_21 = s_11;
        *(arg1 + 0x828) = s_21;
        int128_t var_1d0;
        *(arg1 + 0x838) = var_1d0;
        int128_t var_1c0;
        *(arg1 + 0x848) = var_1c0;
        *(arg1 + 0x858) = var_1b0;
        void* x0_3 = *(arg1 + 0x870);
        int32_t x8_9;
        if (x0_3 == (arg1 + 0x878))
        {
            x8_9 = s_21;
        }
        else
        {
            cv::fastFree(x0_3);
            *(arg1 + 0x870) = (arg1 + 0x878);
            *(arg1 + 0x868) = (arg1 + 0x830);
            x8_9 = var_1dc;
            x0_3 = (arg1 + 0x878);
        }
        if (x8_9 > 2)
        {
            *(arg1 + 0x868) = var_1a0;
            var_198 = &var_190;
            var_1a0 = (&s_11 | 8);
        }
        else
        {
            *x0_3 = *var_198;
            *(x0_3 + 8) = var_198[1];
        }
        x9_5 = 0;
        s_11 = 0x42ff0000;
        __builtin_memset((&s_11 | 4), 0, 0x3c);
    }
    char var_180;
    *(arg1 + 0x950) = var_180;
    if (x9_5 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x9_5 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x9_5 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int64_t var_1a8_1 = 0;
    int128_t s_12;
    __builtin_memset(&s_12, 0, 0x20);
    if (var_1dc >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(var_1a0 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < var_1dc);
    }
    if (var_198 != &var_190)
    {
        cv::fastFree(var_198);
    }
    int64_t var_368;
    gettimeofday(&var_368, 0);
    uint32_t x8_16 = *data_6fdf0;
    char* x10_6 = *(data_6fdfa + 6);
    int64_t x26 = var_368;
    int64_t x21_1 = var_358;
    int32_t var_388 = data_6fde8;
    char* x23_1;
    if ((x8_16 & 1) == 0)
    {
        x23_1 = &*(data_6fdf0 + 1);
    }
    else
    {
        x23_1 = x10_6;
    }
    int64_t s_8;
    __builtin_memset(&s_8, 0, 0x18);
    size_t x0_7 = strlen(x23_1);
    if (x0_7 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_370_1;
        void* x24_1;
        if (x0_7 >= 0x17)
        {
            uint64_t x25_1 = ((x0_7 + 0x10) & 0xfffffffffffffff0);
            void* x0_9 = operator new(x25_1);
            x24_1 = x0_9;
            var_370_1 = x0_9;
            s_8 = (x25_1 | 1);
            size_t var_378_1 = x0_7;
        }
        else
        {
            x24_1 = &*s_8[1];
            s_8 = (x0_7 << 1);
        }
        if ((x0_7 >= 0x17 || (x0_7 < 0x17 && x0_7 != 0)))
        {
            memcpy(x24_1, x23_1, x0_7);
        }
        *(x24_1 + x0_7) = 0;
        int32_t x0_12;
        int128_t v0_1;
        int128_t v1_1;
        double v3_1;
        x0_12 = g3::logLevel(&var_388);
        int32_t x22_2;
        if ((x0_12 & 1) == 0)
        {
            x22_2 = 0;
            if ((s_8 & 1) != 0)
            {
            label_36438:
                v0_1 = operator delete(var_370_1);
                if ((x22_2 & 1) != 0)
                {
                    goto label_36464;
                }
            }
        }
        else
        {
            int64_t var_398_1 = 0;
            int64_t var_398_2;
            __builtin_strncpy(&var_398_2, "l_region", 0x10);
            int64_t var_3a0 = 0;
            var_3a0 = 0x1e;
            __builtin_strncpy(&*var_3a0[1], "feasibal", 8);
            void* var_390;
            var_390 = 0;
            int32_t x0_14;
            x0_14 = g3::logTag(&var_3a0);
            x22_2 = x0_14;
            if ((var_3a0 & 1) != 0)
            {
                v0_1 = operator delete(var_390);
                if ((s_8 & 1) != 0)
                {
                    goto label_36438;
                }
            }
            else if ((s_8 & 1) != 0)
            {
                goto label_36438;
            }
        }
        if (((((x0_12 & 1) == 0 && (s_8 & 1) == 0) || (x0_12 & 1) != 0) && (x22_2 & 1) != 0))
        {
        label_36464:
            LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            int64_t var_360;
            int64_t var_350;
            double v0_2;
            v0_2 = ((vcvtd_f64_s64((x26 - x21_1)) * 1000.0) + (vcvtd_f64_s64((var_360 - var_350)) / 1000.0));
            LogCapture::capturef();
            v0_1 = LogCapture::~LogCapture();
        }
        int128_t* x8_24 = *(arg1 + 0x738);
        int64_t x9_13 = *(arg1 + 0x750);
        *(arg1 + 0x740) = x8_24;
        *(arg1 + 0x758) = x9_13;
        uint64_t s_19 = s_9;
        if (s_19 >= 1)
        {
            int64_t x20_3 = 0;
            int64_t x21_2 = 1;
            while (true)
            {
                void* x10_7 = (var_328 + x20_3);
                int32_t x9_15 = *(x10_7 + 0x50);
                s_11 = x9_15;
                int32_t x11_2 = *(x10_7 + 0x54);
                int32_t x11_3 = *(x10_7 + 0x58);
                int32_t x10_8 = *(x10_7 + 0x5c);
                if (x8_24 >= *(arg1 + 0x748))
                {
                    v0_1 = std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 4, 1, 0, 4, 1> >((arg1 + 0x738));
                }
                else
                {
                    *x8_24 = s_11;
                    *x8_24 = x9_15;
                    *(x8_24 + 4) = x11_2;
                    *(x8_24 + 8) = x11_3;
                    *(x8_24 + 0xc) = x10_8;
                    *(arg1 + 0x740) = (*(arg1 + 0x740) + 0x10);
                }
                void* x9_19 = (var_328 + x20_3);
                int32_t x8_28 = *(x9_19 + 0x44);
                s_11 = x8_28;
                var_1dc = *(x9_19 + 0x48);
                int32_t x9_20 = *(x9_19 + 0x4c);
                int64_t* x9_21 = *(arg1 + 0x758);
                if (x9_21 >= *(arg1 + 0x760))
                {
                    v0_1 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> >((arg1 + 0x750));
                }
                else
                {
                    *x9_21 = s_11;
                    x9_21[1] = x9_20;
                    *x9_21 = x8_28;
                    *(x9_21 + 4) = var_1dc;
                    x9_21[1] = x9_20;
                    *(arg1 + 0x758) = (*(arg1 + 0x758) + 0xc);
                }
                s_19 = s_9;
                if (x21_2 >= s_19)
                {
                    break;
                }
                x8_24 = *(arg1 + 0x740);
                x20_3 = (x20_3 + 0xa8);
                x21_2 = (x21_2 + 1);
            }
        }
        v3_1 = *(arg1 + 0xaac);
        v0_1 = 0x43480000;
        char s_3;
        void* var_4b8;
        void* x20_7;
        if (!(v3_1 >= 200f))
        {
            v0_1 = *(arg1 + 0xaa0);
            v1_1 = *(arg1 + 0xa98);
            int32_t v2_1 = *(arg1 + 0xa9c);
            /* unimplemented  {fabd s3, s3, s0} */;
            if (!(v3_1 > 0.017500000000000002))
            {
                v3_1 = *(arg1 + 0xaa4);
                /* unimplemented  {fabd s3, s3, s1} */;
                /* unimplemented  {fabd s4, s4, s2} */;
                v3_1 = (v3_1 + *(arg1 + 0xaa8));
            }
            if ((v3_1 > 0.017500000000000002 || (!(v3_1 > 0.017500000000000002) && v3_1 > 0.050000000000000003)))
            {
                int32_t x8_43 = *(arg1 + 0xa00);
                uint32_t x10_14 = *(arg1 + 0x950);
                *(arg1 + 0xaa4) = v1_1;
                *(arg1 + 0xaa8) = v2_1;
                *(arg1 + 0xaac) = v0_1;
                *(arg1 + 0xa00) = (x8_43 + 1);
                if (x10_14 != 0)
                {
                    v0_1 = std::__ndk1::vector<float, std::__ndk1::allocator<float> >::insert((arg1 + 0x9e8), *(arg1 + 0x9e8));
                    int64_t x8_46 = *(arg1 + 0x9f0);
                    if (((x8_46 - *(arg1 + 0x9e8)) >> 2) >= 0x47)
                    {
                        *(arg1 + 0x9f0) = (x8_46 - 4);
                    }
                    int32_t var_17c;
                    v0_1 = var_17c;
                    if (!(v0_1 <= 0f))
                    {
                        v0_1 = std::__ndk1::vector<float, std::__ndk1::allocator<float> >::insert((arg1 + 0xa10), *(arg1 + 0xa10));
                        int64_t x8_48 = *(arg1 + 0xa18);
                        if (((x8_48 - *(arg1 + 0xa10)) >> 2) >= 0xb)
                        {
                            *(arg1 + 0xa18) = (x8_48 - 4);
                        }
                    }
                    int32_t x8_50 = *(arg1 + 0xa00);
                    *(arg1 + 0xa28) = 0;
                    *(arg1 + 0xa08) = 0;
                    if (x8_50 >= 0x2bd)
                    {
                        goto label_36890;
                    }
                }
                else if (s_19 == 0)
                {
                    v0_1 = *(arg1 + 0xa04);
                    v1_1 = 1;
                    *v1_1[4] = 1;
                    *(arg1 + 0xa04) = (v0_1 + v1_1);
                    if ((x8_43 + 1) >= 0x2bd)
                    {
                    label_36890:
                        v0_1 = 0;
                        *v0_1[8] = 0;
                        *(arg1 + 0xa00) = 0;
                    }
                }
                else
                {
                    *(arg1 + 0xa28) = (*(arg1 + 0xa28) + 1);
                    if ((x8_43 + 1) >= 0x2bd)
                    {
                        goto label_36890;
                    }
                }
                int64_t x9_29 = *(arg1 + 0xa18);
                int32_t* x10_15 = *(arg1 + 0xa10);
                v9 = 0f;
                v10 = 0f;
                int64_t x8_52 = ((x9_29 - x10_15) >> 2);
                if (x8_52 >= 5)
                {
                    v0_1 = 0.0;
                    if (x10_15 != x9_29)
                    {
                        do
                        {
                            v1_1 = *x10_15;
                            x10_15 = &x10_15[1];
                            v1_1 = v1_1;
                            v0_1 = (v0_1 + v1_1);
                        } while (x9_29 != x10_15);
                    }
                    v0_1 = v0_1;
                    v1_1 = vcvth_f16_u16(x8_52);
                    v10 = (v0_1 / v1_1);
                }
                int64_t x9_30 = *(arg1 + 0x9f0);
                int32_t* x10_16 = *(arg1 + 0x9e8);
                int64_t x8_54 = ((x9_30 - x10_16) >> 2);
                if (x8_54 >= 0x23)
                {
                    v0_1 = 0.0;
                    if (x10_16 != x9_30)
                    {
                        do
                        {
                            v1_1 = *x10_16;
                            x10_16 = &x10_16[1];
                            v1_1 = v1_1;
                            v0_1 = (v0_1 + v1_1);
                        } while (x9_30 != x10_16);
                    }
                    v0_1 = v0_1;
                    v1_1 = vcvth_f16_u16(x8_54);
                    v9 = (v0_1 / v1_1);
                }
                int32_t x8_55 = *(arg1 + 0xa04);
                int32_t x8_56 = *(arg1 + 0xa08);
                int32_t x20_8;
                if (v9 < 1200f)
                {
                    x20_8 = 1;
                }
                else
                {
                    x20_8 = 0;
                }
                int32_t x8_57 = *(arg1 + 0xa28);
                int32_t x28_1;
                if (v9 > 10f)
                {
                    x28_1 = 1;
                }
                else
                {
                    x28_1 = 0;
                }
                char* x23_4;
                if ((*data_6fdf0 & 1) == 0)
                {
                    x23_4 = &*(data_6fdf0 + 1);
                }
                else
                {
                    x23_4 = *(data_6fdfa + 6);
                }
                int32_t var_3f8 = data_6fde8;
                int64_t s_6;
                __builtin_memset(&s_6, 0, 0x18);
                size_t x0_34 = strlen(x23_4);
                if (x0_34 < -0x10)
                {
                    goto label_37f30;
                }
                void* var_3e0_1;
                void* x24_2;
                if (x0_34 >= 0x17)
                {
                    uint64_t x25_2 = ((x0_34 + 0x10) & 0xfffffffffffffff0);
                    void* x0_37 = operator new(x25_2);
                    x24_2 = x0_37;
                    var_3e0_1 = x0_37;
                    s_6 = (x25_2 | 1);
                    size_t var_3e8_1 = x0_34;
                }
                else
                {
                    x24_2 = &*s_6[1];
                    s_6 = (x0_34 << 1);
                }
                if ((x0_34 >= 0x17 || (x0_34 < 0x17 && x0_34 != 0)))
                {
                    memcpy(x24_2, x23_4, x0_34);
                }
                *(x24_2 + x0_34) = 0;
                int32_t x22_6;
                if ((g3::logLevel(&var_3f8) & 1) != 0)
                {
                    int64_t var_408_1 = 0;
                    int64_t var_408_2;
                    __builtin_strncpy(&var_408_2, "l_region", 0x10);
                    int64_t var_410 = 0;
                    var_410 = 0x1e;
                    __builtin_strncpy(&*var_410[1], "feasibal", 8);
                    void* var_400;
                    var_400 = 0;
                    x22_6 = g3::logTag(&var_410);
                    if ((var_410 & 1) != 0)
                    {
                        operator delete(var_400);
                        if ((s_6 & 1) == 0)
                        {
                            goto label_36a6c;
                        }
                        goto label_36a88;
                    }
                    if ((s_6 & 1) == 0)
                    {
                        goto label_36a6c;
                    }
                    goto label_36a88;
                }
                x22_6 = 0;
                if ((s_6 & 1) == 0)
                {
                label_36a6c:
                    arg2 = v10;
                    if ((x22_6 & 1) != 0)
                    {
                    label_36ab8:
                        LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                        *(arg1 + 0xa04);
                        *(arg1 + 0xa08);
                        *(arg1 + 0xa28);
                        int128_t v1_4;
                        v1_4 = v9;
                        LogCapture::capturef();
                        LogCapture::~LogCapture();
                    }
                }
                else
                {
                label_36a88:
                    operator delete(var_3e0_1);
                    arg2 = v10;
                    if ((x22_6 & 1) != 0)
                    {
                        goto label_36ab8;
                    }
                }
                char* x23_5;
                if ((*data_6fdf0 & 1) == 0)
                {
                    x23_5 = &*(data_6fdf0 + 1);
                }
                else
                {
                    x23_5 = *(data_6fdfa + 6);
                }
                int32_t var_430 = data_6fde8;
                int64_t s_5;
                __builtin_memset(&s_5, 0, 0x18);
                size_t x0_46 = strlen(x23_5);
                if (x0_46 < -0x10)
                {
                    goto label_37f38;
                }
                void* var_418_1;
                if (x0_46 >= 0x17)
                {
                    uint64_t x25_3 = ((x0_46 + 0x10) & 0xfffffffffffffff0);
                    void* x0_48 = operator new(x25_3);
                    x24_1 = x0_48;
                    size_t var_420_1 = x0_46;
                    var_418_1 = x0_48;
                    s_5 = (x25_3 | 1);
                }
                else
                {
                    x24_1 = &*s_5[1];
                    s_5 = (x0_46 << 1);
                }
                if ((x0_46 >= 0x17 || (x0_46 < 0x17 && x0_46 != 0)))
                {
                    memcpy(x24_1, x23_5, x0_46);
                }
                *(x24_1 + x0_46) = 0;
                int32_t x0_51 = g3::logLevel(&var_430);
                int64_t var_448;
                void* var_438_1;
                int32_t x23_6;
                if ((x0_51 & 1) == 0)
                {
                    x23_6 = 0;
                }
                else
                {
                    var_448 = 0;
                    int64_t var_440_1 = 0;
                    var_448 = 0x1e;
                    var_438_1 = nullptr;
                    __builtin_strncpy(&*var_448[1], "feasibal_region", 0x10);
                    x23_6 = g3::logTag(&var_448);
                }
                if ((((x0_51 & 1) == 0 || ((x0_51 & 1) != 0 && (var_448 & 1) == 0)) && (s_5 & 1) != 0))
                {
                label_36bf0:
                    operator delete(var_418_1);
                }
                if (((x0_51 & 1) != 0 && (var_448 & 1) != 0))
                {
                    operator delete(var_438_1);
                    if ((s_5 & 1) != 0)
                    {
                        goto label_36bf0;
                    }
                }
                void* s_17 = (arg1 + 0x778);
                if ((x23_6 & 1) != 0)
                {
                    LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                }
                int32_t x8_76;
                if (arg2 > 1.1499999999999999)
                {
                    x8_76 = 1;
                }
                else
                {
                    x8_76 = 0;
                }
                int128_t var_2e0;
                int32_t var_1d8;
                if (x8_57 > 0x46)
                {
                label_36cc0:
                    int32_t x8_79 = *(arg1 + 0xa90);
                    *(arg1 + 0xa90) = (x8_79 + 1);
                    if (x8_79 >= 0x2bc)
                    {
                        *(arg1 + 0xa90) = 0;
                        *(s_17 + 0x28c) = 0;
                        int64_t x8_81 = *(arg1 + 0xa10);
                        int64_t x9_35 = *(arg1 + 0x9e8);
                        *(arg1 + 0xa28) = 0;
                        *(arg1 + 0xa18) = x8_81;
                        *(arg1 + 0x9f0) = x9_35;
                    }
                    if (*(arg1 + 0x9e1) != 0)
                    {
                        __builtin_memset(&s_11, 0, 0x100);
                        int64_t x20_9 = 0;
                        int64_t var_460 = 0;
                        int64_t var_458_1 = 0;
                        __builtin_strncpy(&var_460, "*/sdcard/pudu/picture/", 0x18);
                        char x8_83 = 0x2f;
                        while (true)
                        {
                            uint32_t x9_36 = x8_83;
                            *(&s_11 + x20_9) = x8_83;
                            if ((((x9_36 == 0x5c || x9_36 == 0x2f) && access(&s_11, 0) == 0xffffffff) && mkdir(&s_11, 0x1ed) == 0xffffffff))
                            {
                                char* x23_7;
                                if ((*data_6fdf0 & 1) == 0)
                                {
                                    x23_7 = &*(data_6fdf0 + 1);
                                }
                                else
                                {
                                    x23_7 = *(data_6fdfa + 6);
                                }
                                int32_t var_480 = data_6fde8;
                                int64_t s_4;
                                __builtin_memset(&s_4, 0, 0x18);
                                size_t x0_65 = strlen(x23_7);
                                if (x0_65 < -0x10)
                                {
                                    goto label_37f68;
                                }
                                void* var_468_1;
                                if (x0_65 >= 0x17)
                                {
                                    uint64_t x25_5 = ((x0_65 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_73 = operator new(x25_5);
                                    x24_1 = x0_73;
                                    size_t var_470_1 = x0_65;
                                    var_468_1 = x0_73;
                                    s_4 = (x25_5 | 1);
                                }
                                else
                                {
                                    x24_1 = &*s_4[1];
                                    s_4 = (x0_65 << 1);
                                }
                                if ((x0_65 >= 0x17 || (x0_65 < 0x17 && x0_65 != 0)))
                                {
                                    memcpy(x24_1, x23_7, x0_65);
                                }
                                *(x24_1 + x0_65) = 0;
                                int32_t x0_76 = g3::logLevel(&var_480);
                                int32_t x22_11;
                                if ((x0_76 & 1) == 0)
                                {
                                    x22_11 = 0;
                                    if ((s_4 & 1) != 0)
                                    {
                                    label_36fa8:
                                        operator delete(var_468_1);
                                        if ((x22_11 & 1) != 0)
                                        {
                                            goto label_36fd4;
                                        }
                                    }
                                }
                                else
                                {
                                    int64_t var_498 = 0;
                                    int64_t var_490_1 = 0;
                                    var_498 = 0x1e;
                                    void* var_488_1 = nullptr;
                                    __builtin_strncpy(&*var_498[1], "feasibal_region", 0x10);
                                    x22_11 = g3::logTag(&var_498);
                                    if ((var_498 & 1) != 0)
                                    {
                                        operator delete(var_488_1);
                                        if ((s_4 & 1) != 0)
                                        {
                                            goto label_36fa8;
                                        }
                                    }
                                    else if ((s_4 & 1) != 0)
                                    {
                                        goto label_36fa8;
                                    }
                                }
                                if (((((x0_76 & 1) == 0 && (s_4 & 1) == 0) || (x0_76 & 1) != 0) && (x22_11 & 1) != 0))
                                {
                                label_36fd4:
                                    LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                                    LogCapture::capturef();
                                    LogCapture::~LogCapture();
                                }
                                goto label_36dc0;
                            }
                            if ((x20_9 + 1) >= 0x15)
                            {
                                break;
                            }
                            x8_83 = (&var_460 | 2)[x20_9];
                            x20_9 = (x20_9 + 1);
                        }
                    label_36dc0:
                        if (*(arg1 + 0xb30) == 0)
                        {
                            int64_t x0_61 = fopen("/sdcard/pudu/picture/record.txt", "a");
                            *(arg1 + 0xb30) = x0_61;
                            if (x0_61 == 0)
                            {
                                void* x0_66 = ((arg1 + 0xab0) + *(*(arg1 + 0xab0) - 0x18));
                                *(x0_66 + 0x20);
                                std::__ndk1::ios_base::clear(x0_66);
                            }
                            else
                            {
                                void* x8_85 = *(arg1 + 0xab0);
                                *(arg1 + 0xb50) = 0x11;
                                std::__ndk1::ios_base::clear(((arg1 + 0xab0) + *(x8_85 - 0x18)));
                            }
                            FILE* x25_4 = *(arg1 + 0xb30);
                            int32_t x0_70;
                            if (x25_4 != 0)
                            {
                                x24_1 = *(*(arg1 + 0xab8) + 0x30)((arg1 + 0xab8));
                                x0_70 = fclose(x25_4);
                                if (x0_70 == 0)
                                {
                                    void* x8_102 = *(arg1 + 0xab8);
                                    *(arg1 + 0xb30) = 0;
                                    *(x8_102 + 0x18)((arg1 + 0xab8), 0, 0);
                                }
                                else
                                {
                                    *(*(arg1 + 0xab8) + 0x18)((arg1 + 0xab8), 0, 0);
                                }
                            }
                            if ((((x25_4 != 0 && x0_70 != 0) || x25_4 == 0) || ((x25_4 != 0 && x0_70 == 0) && x24_1 != 0)))
                            {
                                void* x0_82 = ((arg1 + 0xab0) + *(*(arg1 + 0xab0) - 0x18));
                                *(x0_82 + 0x20);
                                std::__ndk1::ios_base::clear(x0_82);
                            }
                            if (*(arg1 + 0xb30) == 0)
                            {
                                int64_t x0_83 = fopen("/sdcard/pudu/picture/record.txt", &data_54c5f);
                                *(arg1 + 0xb30) = x0_83;
                                if (x0_83 == 0)
                                {
                                    void* x0_85 = ((arg1 + 0xab0) + *(*(arg1 + 0xab0) - 0x18));
                                    *(x0_85 + 0x20);
                                    std::__ndk1::ios_base::clear(x0_85);
                                }
                                else
                                {
                                    void* x8_108 = *(arg1 + 0xab0);
                                    *(arg1 + 0xb50) = 0x18;
                                    std::__ndk1::ios_base::clear(((arg1 + 0xab0) + *(x8_108 - 0x18)));
                                }
                            }
                            goto label_3708c;
                        }
                    label_3708c:
                        int64_t var_4a0 = 0;
                        int64_t s_10;
                        __builtin_memset(&s_10, 0, 0x118);
                        var_4a0 = time(nullptr);
                        strftime(&s_10, 0x18, "%Y%m%d%H%M%S", localtime(&var_4a0));
                        void var_4b0;
                        gettimeofday(&var_4b0, 0);
                        sprintf();
                        __builtin_memset(&s_3, 0, 0x18);
                        size_t x0_92 = strlen(&var_2e0);
                        if (x0_92 < -0x10)
                        {
                            goto label_37f48;
                        }
                        void* x24_3;
                        if (x0_92 >= 0x17)
                        {
                            uint64_t x25_6 = ((x0_92 + 0x10) & 0xfffffffffffffff0);
                            void* x0_94 = operator new(x25_6);
                            x24_3 = x0_94;
                            uint64_t var_4c0_1 = x0_92;
                            var_4b8 = x0_94;
                            s_3 = (x25_6 | 1);
                        }
                        else
                        {
                            x24_3 = (&s_3 | 1);
                            s_3 = (x0_92 << 1);
                        }
                        if ((x0_92 >= 0x17 || (x0_92 < 0x17 && x0_92 != 0)))
                        {
                            memcpy(x24_3, &var_2e0, x0_92);
                        }
                        int64_t var_4a8;
                        uint64_t x8_117 = ((var_4a8 * 0x20c49ba5e353f7cf) >> 0x40);
                        *(x24_3 + x0_92) = 0;
                        std::__ndk1::to_string(((x8_117 >> 7) + (x8_117 >> 0x3f)));
                        uint64_t x12_1 = (&s_3 | 1);
                        uint64_t x2_11;
                        if ((s_3 & 1) == 0)
                        {
                            x2_11 = x12_1;
                        }
                        else
                        {
                            x2_11 = var_4b8;
                        }
                        char* s_14 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_11, nullptr, x2_11);
                        uint64_t x8_120 = *(s_14 + 8);
                        void* x20_10 = *(s_14 + 0x10);
                        char s_20 = *s_14;
                        int64_t var_310 = *(s_14 + 1);
                        __builtin_memset(s_14, 0, 0x18);
                        if ((s_3 & 1) == 0)
                        {
                            s_3 = 0;
                        }
                        else
                        {
                            *var_4b8 = 0;
                            int64_t var_4c0_2 = 0;
                            if ((s_3 & 1) != 0)
                            {
                                operator delete(var_4b8);
                                s_3 = 0;
                            }
                        }
                        int64_t x9_44 = var_310;
                        uint32_t x10_21 = s_11;
                        s_3 = s_20;
                        int64_t var_309_2 = 0;
                        var_4b8 = x20_10;
                        int64_t var_4c7_1 = x9_44;
                        var_310 = 0;
                        if ((x10_21 & 1) != 0)
                        {
                            operator delete(s_12);
                        }
                        if (*(arg1 + 0xc00) != 0)
                        {
                            uint32_t x0_100 = ((arg1 + 0xab0) + *(*(arg1 + 0xab0) - 0x18));
                            if ((*(arg1 + 0xbf8) >> 3) < 0xc35)
                            {
                                std::__ndk1::ios_base::clear(x0_100);
                                s_11 = 0;
                                var_1d8 = (arg1 + 0xab0);
                                int64_t* x9_51 = (*(arg1 + 0xab0) - 0x18);
                                int64_t x8_136 = *x9_51;
                                void* x11_11 = ((arg1 + 0xab0) + x8_136);
                                int32_t x10_23 = *(x11_11 + 0x20);
                                if (x10_23 == 0)
                                {
                                    if (*(x11_11 + 0x88) != 0)
                                    {
                                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
                                        x9_51 = (*(arg1 + 0xab0) - 0x18);
                                    }
                                    s_11 = 1;
                                    x8_136 = *x9_51;
                                    x10_23 = *(((arg1 + 0xab0) + x8_136) + 0x20);
                                }
                                if (((x10_23 & 5) == 0 && *(**(((arg1 + 0xab0) + x8_136) + 0x28) + 0x20)() == -1))
                                {
                                    void* x0_106 = ((arg1 + 0xab0) + *(*(arg1 + 0xab0) - 0x18));
                                    *(x0_106 + 0x20);
                                    std::__ndk1::ios_base::clear(x0_106);
                                }
                            }
                            else
                            {
                                std::__ndk1::ios_base::clear(x0_100);
                                s_11 = 0;
                                var_1d8 = (arg1 + 0xab0);
                                int64_t* x9_48 = (*(arg1 + 0xab0) - 0x18);
                                int64_t x8_128 = *x9_48;
                                void* x11_10 = ((arg1 + 0xab0) + x8_128);
                                int32_t x10_22 = *(x11_10 + 0x20);
                                if (x10_22 == 0)
                                {
                                    if (*(x11_10 + 0x88) != 0)
                                    {
                                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
                                        x9_48 = (*(arg1 + 0xab0) - 0x18);
                                    }
                                    s_11 = 1;
                                    x8_128 = *x9_48;
                                    x10_22 = *(((arg1 + 0xab0) + x8_128) + 0x20);
                                }
                                if (((x10_22 & 5) == 0 && *(**(((arg1 + 0xab0) + x8_128) + 0x28) + 0x28)() == -1))
                                {
                                    void* x0_103 = ((arg1 + 0xab0) + *(*(arg1 + 0xab0) - 0x18));
                                    *(x0_103 + 0x20);
                                    std::__ndk1::ios_base::clear(x0_103);
                                }
                            }
                            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
                        }
                        uint32_t x0_111 = *(arg1 + 0xbfc);
                        *(arg1 + 0xc00) = 0;
                        if ((x0_111 >> 3) >= 0xc35)
                        {
                            std::__ndk1::ios_base::clear(((arg1 + 0xab0) + *(*(arg1 + 0xab0) - 0x18)));
                            s_11 = 0;
                            var_1d8 = (arg1 + 0xab0);
                            int64_t* x9_54 = (*(arg1 + 0xab0) - 0x18);
                            int64_t x8_147 = *x9_54;
                            void* x11_12 = ((arg1 + 0xab0) + x8_147);
                            int32_t x10_24 = *(x11_12 + 0x20);
                            if (x10_24 == 0)
                            {
                                if (*(x11_12 + 0x88) != 0)
                                {
                                    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
                                    x9_54 = (*(arg1 + 0xab0) - 0x18);
                                }
                                s_11 = 1;
                                x8_147 = *x9_54;
                                x10_24 = *(((arg1 + 0xab0) + x8_147) + 0x20);
                            }
                            if (((x10_24 & 5) == 0 && *(**(((arg1 + 0xab0) + x8_147) + 0x28) + 0x20)() == -1))
                            {
                                void* x0_110 = ((arg1 + 0xab0) + *(*(arg1 + 0xab0) - 0x18));
                                *(x0_110 + 0x20);
                                std::__ndk1::ios_base::clear(x0_110);
                            }
                            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
                            x0_111 = 0;
                            *(arg1 + 0xbfc) = 0;
                        }
                        std::__ndk1::to_string(x0_111);
                        char s_2;
                        int128_t* s_15;
                        int128_t v0_5;
                        s_15 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::insert(&s_2, nullptr, "/sdcard/pudu/picture/ar_");
                        s_12 = s_15[1];
                        s_11 = *s_15;
                        __builtin_memset(s_15, 0, 0x18);
                        int128_t* s_16;
                        int128_t v0_6;
                        s_16 = std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(&s_11, ".png");
                        char* x8_156 = s_16[1];
                        var_310 = *s_16;
                        __builtin_memset(s_16, 0, 0x18);
                        if ((s_11 & 1) != 0)
                        {
                            operator delete(s_12);
                        }
                        void* var_4d0;
                        if ((s_2 & 1) != 0)
                        {
                            operator delete(var_4d0);
                        }
                        uint64_t x8_159 = var_310;
                        int32_t temp5_1 = (x8_159 & 1);
                        char* x1_29;
                        if (temp5_1 == 0)
                        {
                            x1_29 = (&var_310 | 1);
                        }
                        else
                        {
                            x1_29 = x8_156;
                        }
                        uint64_t x2_13;
                        if (temp5_1 == 0)
                        {
                            x2_13 = (x8_159 >> 1);
                        }
                        else
                        {
                            x2_13 = var_309_2;
                        }
                        cv::Mat* x0_118 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >((arg1 + 0xab0), x1_29, x2_13), &data_54bb4, 1);
                        uint64_t s_18 = s_3;
                        int32_t temp6_1 = (s_18 & 1);
                        uint64_t x2_14;
                        if (temp6_1 == 0)
                        {
                            x2_14 = (s_18 >> 1);
                        }
                        else
                        {
                            x2_14 = x8_120;
                        }
                        void* x1_30;
                        if (temp6_1 == 0)
                        {
                            x1_30 = x12_1;
                        }
                        else
                        {
                            x1_30 = var_4b8;
                        }
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_118, x1_30, x2_14), &data_54bb4, 1);
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(*(arg1 + 0xa98)), " ", 1);
                        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(*(arg1 + 0xa9c)), " ", 1);
                        int64_t* x0_122 = std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(*(arg1 + 0xaa0));
                        *(*x0_122 - 0x18);
                        std::__ndk1::ios_base::getloc();
                        *(*std::__ndk1::locale::use_facet(&s_11) + 0x38)();
                        std::__ndk1::locale::~locale();
                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::put(x0_122);
                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
                        char* x23_11;
                        if ((*data_6fdf0 & 1) == 0)
                        {
                            x23_11 = &*(data_6fdf0 + 1);
                        }
                        else
                        {
                            x23_11 = *(data_6fdfa + 6);
                        }
                        int32_t var_500 = data_6fde8;
                        int64_t s_1;
                        __builtin_memset(&s_1, 0, 0x18);
                        size_t x0_130 = strlen(x23_11);
                        if (x0_130 < -0x10)
                        {
                            goto label_37f50;
                        }
                        void* var_4e8_1;
                        void* x24_4;
                        if (x0_130 >= 0x17)
                        {
                            uint64_t x25_7 = ((x0_130 + 0x10) & 0xfffffffffffffff0);
                            void* x0_132 = operator new(x25_7);
                            x24_4 = x0_132;
                            size_t var_4f0_1 = x0_130;
                            var_4e8_1 = x0_132;
                            s_1 = (x25_7 | 1);
                        }
                        else
                        {
                            x24_4 = &*s_1[1];
                            s_1 = (x0_130 << 1);
                        }
                        if ((x0_130 >= 0x17 || (x0_130 < 0x17 && x0_130 != 0)))
                        {
                            memcpy(x24_4, x23_11, x0_130);
                        }
                        *(x24_4 + x0_130) = 0;
                        int32_t x0_135 = g3::logLevel(&var_500);
                        int32_t x22_14;
                        if ((x0_135 & 1) == 0)
                        {
                            x22_14 = 0;
                            if ((s_1 & 1) != 0)
                            {
                            label_37708:
                                operator delete(var_4e8_1);
                                if ((x22_14 & 1) != 0)
                                {
                                    goto label_37734;
                                }
                            }
                        }
                        else
                        {
                            int64_t var_518 = 0;
                            int64_t var_510_1 = 0;
                            var_518 = 0x1e;
                            void* var_508_1 = nullptr;
                            __builtin_strncpy(&*var_518[1], "feasibal_region", 0x10);
                            x22_14 = g3::logTag(&var_518);
                            if ((var_518 & 1) != 0)
                            {
                                operator delete(var_508_1);
                                if ((s_1 & 1) != 0)
                                {
                                    goto label_37708;
                                }
                            }
                            else if ((s_1 & 1) != 0)
                            {
                                goto label_37708;
                            }
                        }
                        if (((((x0_135 & 1) == 0 && (s_1 & 1) == 0) || (x0_135 & 1) != 0) && (x22_14 & 1) != 0))
                        {
                        label_37734:
                            LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                            *(arg1 + 0xa98);
                            *(arg1 + 0xa9c);
                            *(arg1 + 0xaa0);
                            LogCapture::capturef();
                            LogCapture::~LogCapture();
                        }
                        s_12 = 0;
                        s_11 = 0x1010000;
                        __builtin_memset(&s_2, 0, 0x18);
                        var_1d8 = (arg1 + 0xa30);
                        cv::imwrite(&var_310, &s_11, &s_2);
                        void* x0_141 = s_2;
                        if (x0_141 != 0)
                        {
                            void* var_4d8_1 = x0_141;
                            operator delete(x0_141);
                        }
                        if ((var_310 & 1) != 0)
                        {
                            operator delete(x8_156);
                        }
                        if ((s_3 & 1) != 0)
                        {
                            operator delete(var_4b8);
                        }
                    }
                    if (*(arg1 + 0x9e0) != 0)
                    {
                        *(arg1 + 0x740) = *(arg1 + 0x738);
                        int64_t var_528_1 = 0;
                        void* var_520_1 = nullptr;
                        char* x23_12;
                        if ((*data_6fdf0 & 1) == 0)
                        {
                            x23_12 = &*(data_6fdf0 + 1);
                        }
                        else
                        {
                            x23_12 = *(data_6fdfa + 6);
                        }
                        int32_t var_538 = data_6fde8;
                        int64_t var_530 = 0;
                        size_t x0_145 = strlen(x23_12);
                        if (x0_145 < -0x10)
                        {
                            goto label_37f58;
                        }
                        void* x24_5;
                        if (x0_145 >= 0x17)
                        {
                            uint64_t x25_8 = ((x0_145 + 0x10) & 0xfffffffffffffff0);
                            void* x0_149 = operator new(x25_8);
                            s_17 = (arg1 + 0x778);
                            x24_5 = x0_149;
                            size_t var_528_2 = x0_145;
                            var_520_1 = x0_149;
                            var_530 = (x25_8 | 1);
                        }
                        else
                        {
                            x24_5 = &*var_530[1];
                            var_530 = (x0_145 << 1);
                        }
                        if ((x0_145 >= 0x17 || (x0_145 < 0x17 && x0_145 != 0)))
                        {
                            memcpy(x24_5, x23_12, x0_145);
                        }
                        *(x24_5 + x0_145) = 0;
                        int32_t x22_17;
                        if ((g3::logLevel(&var_538) & 1) == 0)
                        {
                            x22_17 = 0;
                            if ((var_530 & 1) != 0)
                            {
                            label_37958:
                                operator delete(var_520_1);
                                if ((x22_17 & 1) == 0)
                                {
                                    goto label_37a94;
                                }
                                goto label_37984;
                            }
                        }
                        else
                        {
                            int64_t var_550 = 0;
                            int64_t var_548_1 = 0;
                            var_550 = 0x1e;
                            void* var_540_1 = nullptr;
                            __builtin_strncpy(&*var_550[1], "feasibal_region", 0x10);
                            x22_17 = g3::logTag(&var_550);
                            if ((var_550 & 1) != 0)
                            {
                                operator delete(var_540_1);
                                if ((var_530 & 1) != 0)
                                {
                                    goto label_37958;
                                }
                            }
                            else if ((var_530 & 1) != 0)
                            {
                                goto label_37958;
                            }
                        }
                        if ((x22_17 & 1) == 0)
                        {
                            goto label_37a94;
                        }
                    label_37984:
                        LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                        LogCapture::capturef();
                        goto label_37a88;
                    }
                    char* x23_13;
                    if ((*data_6fdf0 & 1) == 0)
                    {
                        x23_13 = &*(data_6fdf0 + 1);
                    }
                    else
                    {
                        x23_13 = *(data_6fdfa + 6);
                    }
                    int32_t var_570 = data_6fde8;
                    int64_t s;
                    __builtin_memset(&s, 0, 0x18);
                    size_t x0_147 = strlen(x23_13);
                    if (x0_147 < -0x10)
                    {
                        goto label_37f60;
                    }
                    void* var_558_1;
                    void* x24_6;
                    if (x0_147 >= 0x17)
                    {
                        uint64_t x25_9 = ((x0_147 + 0x10) & 0xfffffffffffffff0);
                        void* x0_158 = operator new(x25_9);
                        s_17 = (arg1 + 0x778);
                        x24_6 = x0_158;
                        size_t var_560_1 = x0_147;
                        var_558_1 = x0_158;
                        s = (x25_9 | 1);
                    }
                    else
                    {
                        x24_6 = &*s[1];
                        s = (x0_147 << 1);
                    }
                    if ((x0_147 >= 0x17 || (x0_147 < 0x17 && x0_147 != 0)))
                    {
                        memcpy(x24_6, x23_13, x0_147);
                    }
                    *(x24_6 + x0_147) = 0;
                    int32_t x22_18;
                    if ((g3::logLevel(&var_570) & 1) == 0)
                    {
                        x22_18 = 0;
                        if ((s & 1) != 0)
                        {
                        label_37a44:
                            operator delete(var_558_1);
                            if ((x22_18 & 1) != 0)
                            {
                                goto label_37a70;
                            }
                            goto label_37a94;
                        }
                    }
                    else
                    {
                        int64_t var_588 = 0;
                        int64_t var_580_1 = 0;
                        var_588 = 0x1e;
                        void* var_578_1 = nullptr;
                        __builtin_strncpy(&*var_588[1], "feasibal_region", 0x10);
                        x22_18 = g3::logTag(&var_588);
                        if ((var_588 & 1) != 0)
                        {
                            operator delete(var_578_1);
                            if ((s & 1) != 0)
                            {
                                goto label_37a44;
                            }
                        }
                        else if ((s & 1) != 0)
                        {
                            goto label_37a44;
                        }
                    }
                    if ((x22_18 & 1) == 0)
                    {
                        goto label_37a94;
                    }
                label_37a70:
                    LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                    LogCapture::capturef();
                label_37a88:
                    LogCapture::~LogCapture();
                label_37a94:
                    *(arg1 + 0xbfc) = (*(arg1 + 0xbfc) + 1);
                    if (*(arg1 + 0xa94) != 0)
                    {
                        goto label_37afc;
                    }
                }
                else
                {
                    if (x8_56 > 0x46)
                    {
                        goto label_36cc0;
                    }
                    if (x8_55 > 0x15e)
                    {
                        goto label_36cc0;
                    }
                    if ((x8_76 | (x20_8 & x28_1)) != 0)
                    {
                        goto label_36cc0;
                    }
                    if (*(arg1 + 0xa94) != 0)
                    {
                    label_37afc:
                        *(arg1 + 0x740) = *(arg1 + 0x738);
                        int64_t var_598_1 = 0;
                        void* var_590_1 = nullptr;
                        char* x23_14;
                        if ((*data_6fdf0 & 1) == 0)
                        {
                            x23_14 = &*(data_6fdf0 + 1);
                        }
                        else
                        {
                            x23_14 = *(data_6fdfa + 6);
                        }
                        int32_t var_5a8 = data_6fde8;
                        int64_t var_5a0 = 0;
                        size_t x0_167 = strlen(x23_14);
                        if (x0_167 < -0x10)
                        {
                            goto label_37f40;
                        }
                        void* x24_7;
                        if (x0_167 >= 0x17)
                        {
                            uint64_t x25_10 = ((x0_167 + 0x10) & 0xfffffffffffffff0);
                            void* x0_169 = operator new(x25_10);
                            s_17 = (arg1 + 0x778);
                            x24_7 = x0_169;
                            size_t var_598_2 = x0_167;
                            var_590_1 = x0_169;
                            var_5a0 = (x25_10 | 1);
                        }
                        else
                        {
                            x24_7 = &*var_5a0[1];
                            var_5a0 = (x0_167 << 1);
                        }
                        if ((x0_167 >= 0x17 || (x0_167 < 0x17 && x0_167 != 0)))
                        {
                            memcpy(x24_7, x23_14, x0_167);
                        }
                        *(x24_7 + x0_167) = 0;
                        int32_t x0_172 = g3::logLevel(&var_5a8);
                        int32_t x22_20;
                        if ((x0_172 & 1) == 0)
                        {
                            x22_20 = 0;
                            if ((var_5a0 & 1) != 0)
                            {
                            label_37bf0:
                                operator delete(var_590_1);
                                if ((x22_20 & 1) != 0)
                                {
                                    goto label_37c1c;
                                }
                            }
                        }
                        else
                        {
                            int64_t var_5c0 = 0;
                            int64_t var_5b8_1 = 0;
                            var_5c0 = 0x1e;
                            void* var_5b0_1 = nullptr;
                            __builtin_strncpy(&*var_5c0[1], "feasibal_region", 0x10);
                            x22_20 = g3::logTag(&var_5c0);
                            if ((var_5c0 & 1) != 0)
                            {
                                operator delete(var_5b0_1);
                                if ((var_5a0 & 1) != 0)
                                {
                                    goto label_37bf0;
                                }
                            }
                            else if ((var_5a0 & 1) != 0)
                            {
                                goto label_37bf0;
                            }
                        }
                        if (((((x0_172 & 1) == 0 && (var_5a0 & 1) == 0) || (x0_172 & 1) != 0) && (x22_20 & 1) != 0))
                        {
                        label_37c1c:
                            LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                            LogCapture::capturef();
                            LogCapture::~LogCapture();
                        }
                        goto label_37c40;
                    }
                }
                int32_t x8_197;
                if (x8_57 > 0x46)
                {
                    x8_197 = 1;
                }
                else
                {
                    x8_197 = 0;
                }
                int32_t x9_61;
                if (x8_56 > 0x46)
                {
                    x9_61 = 1;
                }
                else
                {
                    x9_61 = 0;
                }
                int32_t x10_31;
                if (x8_55 > 0x15e)
                {
                    x10_31 = 1;
                }
                else
                {
                    x10_31 = 0;
                }
                int32_t x11_19;
                if (v10 != 0f)
                {
                    x11_19 = 1;
                }
                else
                {
                    x11_19 = 0;
                }
                int32_t x12_2;
                if (!(v9 != 0f))
                {
                    x12_2 = 0;
                    goto label_37adc;
                }
                x12_2 = 1;
            label_37adc:
                int32_t x8_199 = ((x10_31 & (x11_19 & x12_2)) & (x9_61 & x8_197));
                *(arg1 + 0xa94) = x8_199;
                if (x8_199 == 1)
                {
                    goto label_37afc;
                }
            label_37c40:
                var_2e0 = 0;
                int128_t s_22;
                int128_t s_23;
                s_22 = cv::Mat_<uint8_t>::Mat_(&s_11, *(arg1 + 0x208), *(arg1 + 0x20c));
                if ((arg1 + 0x768) != &s_11)
                {
                    int64_t x8_208 = *(arg1 + 0x7a0);
                    if (x8_208 != 0)
                    {
                        int32_t temp0_8;
                        int32_t i_4;
                        do
                        {
                            temp0_8 = __ldaxr((x8_208 + 0x14));
                            i_4 = __stlxr((temp0_8 - 1), (x8_208 + 0x14));
                        } while (i_4 != 0);
                        if (temp0_8 == 1)
                        {
                            s_22 = cv::Mat::deallocate();
                        }
                    }
                    s_22 = 0;
                    *s_22[8] = 0;
                    *(arg1 + 0x7a0) = 0;
                    __builtin_memset(s_17, 0, 0x20);
                    if (*(arg1 + 0x76c) >= 1)
                    {
                        int64_t x8_211 = *(arg1 + 0x7a8);
                        int64_t i_5 = 0;
                        do
                        {
                            *(x8_211 + (i_5 << 2)) = 0;
                            i_5 = (i_5 + 1);
                        } while (i_5 < *(arg1 + 0x76c));
                    }
                    s_22 = s_11;
                    s_23 = s_12;
                    *(arg1 + 0x768) = s_22;
                    *s_17 = s_23;
                    int128_t var_1c0_1;
                    *(arg1 + 0x788) = var_1c0_1;
                    *(arg1 + 0x798) = var_1b0;
                    void* x0_179 = *(arg1 + 0x7b0);
                    int32_t x8_215;
                    if (x0_179 == (arg1 + 0x7b8))
                    {
                        x8_215 = s_22;
                    }
                    else
                    {
                        s_22 = cv::fastFree(x0_179);
                        *(arg1 + 0x7b0) = (arg1 + 0x7b8);
                        *(arg1 + 0x7a8) = (arg1 + 0x770);
                        x8_215 = var_1dc;
                        x0_179 = (arg1 + 0x7b8);
                    }
                    if (x8_215 > 2)
                    {
                        *(arg1 + 0x7a8) = var_1a0;
                        var_198 = &var_190;
                        var_1a0 = (&s_11 | 8);
                    }
                    else
                    {
                        *x0_179 = *var_198;
                        *(x0_179 + 8) = var_198[1];
                    }
                    s_22 = 0;
                    *s_22[8] = 0;
                    s_11 = 0x42ff0000;
                    __builtin_memset((&s_11 | 4), 0, 0x3c);
                }
                else if (var_1a8_1 != 0)
                {
                    int32_t temp0_9;
                    int32_t i_6;
                    do
                    {
                        temp0_9 = __ldaxr((var_1a8_1 + 0x14));
                        i_6 = __stlxr((temp0_9 - 1), (var_1a8_1 + 0x14));
                    } while (i_6 != 0);
                    if (temp0_9 == 1)
                    {
                        s_22 = cv::Mat::deallocate();
                    }
                }
                s_22 = 0;
                *s_22[8] = 0;
                int64_t var_1a8_2 = 0;
                int128_t s_13;
                __builtin_memset(&s_13, 0, 0x20);
                if (var_1dc >= 1)
                {
                    int64_t i_7 = 0;
                    do
                    {
                        *(var_1a0 + (i_7 << 2)) = 0;
                        i_7 = (i_7 + 1);
                    } while (i_7 < var_1dc);
                }
                if (var_198 != &var_190)
                {
                    s_22 = cv::fastFree(var_198);
                }
                s_11 = 0x1010000;
                s_13 = 0;
                int128_t var_2d0;
                var_2d0 = 0;
                *var_2e0[8] = (arg1 + 0x768);
                var_1d8 = (arg1 + 0x7c8);
                var_2e0 = 0x82010000;
                s_22 = **(arg1 + 0x7a8);
                uint64_t var_5c8 = _byteswap(s_22);
                s_23 = 0.0;
                cv::resize(&s_11, &var_2e0, &var_5c8, 1, 0.0, s_23);
                x20_7 = var_328;
                if (x20_7 != 0)
                {
                    goto label_37e40;
                }
            }
        }
        if ((v3_1 >= 200f || ((!(v3_1 >= 200f) && !(v3_1 > 0.017500000000000002)) && !(v3_1 > 0.050000000000000003))))
        {
            char* x21_3;
            if ((*data_6fdf0 & 1) == 0)
            {
                x21_3 = &*(data_6fdf0 + 1);
            }
            else
            {
                x21_3 = *(data_6fdfa + 6);
            }
            int32_t var_3c0 = data_6fde8;
            int64_t s_7;
            __builtin_memset(&s_7, 0, 0x18);
            size_t x0_20 = strlen(x21_3);
            int64_t var_320;
            if (x0_20 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_37f30:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_37f38:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_37f40:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_37f48:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_37f50:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_37f58:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_37f60:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_37f68:
                int64_t x0_197 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
                void* x21_6;
                if ((s_3 & 1) != 0)
                {
                    operator delete(var_4b8);
                    x21_6 = var_328;
                }
                else
                {
                    x21_6 = var_328;
                }
                void* x0_200;
                if ((((s_3 & 1) != 0 && x21_6 != 0) || ((s_3 & 1) == 0 && x21_6 != 0)))
                {
                    int64_t x20_12 = var_320;
                    if (x20_12 == x21_6)
                    {
                        goto label_3844c;
                    }
                    do
                    {
                        x20_12 = (x20_12 - 0xa8);
                        PlaneSeg::~PlaneSeg();
                    } while (x21_6 != x20_12);
                    x0_200 = var_328;
                    goto label_3843c;
                }
                if ((((s_3 & 1) != 0 && x21_6 == 0) || ((s_3 & 1) == 0 && x21_6 == 0)))
                {
                    while (true)
                    {
                        _Unwind_Resume(x0_197);
                    label_3844c:
                        x0_200 = x21_6;
                    label_3843c:
                        void* var_320_2 = x21_6;
                        operator delete(x0_200);
                    }
                }
            }
            else
            {
                void* var_3a8_1;
                void* x22_4;
                if (x0_20 >= 0x17)
                {
                    uint64_t x23_3 = ((x0_20 + 0x10) & 0xfffffffffffffff0);
                    void* x0_22 = operator new(x23_3);
                    x22_4 = x0_22;
                    var_3a8_1 = x0_22;
                    s_7 = (x23_3 | 1);
                    size_t var_3b0_1 = x0_20;
                }
                else
                {
                    x22_4 = &*s_7[1];
                    s_7 = (x0_20 << 1);
                }
                if ((x0_20 >= 0x17 || (x0_20 < 0x17 && x0_20 != 0)))
                {
                    memcpy(x22_4, x21_3, x0_20);
                }
                *(x22_4 + x0_20) = 0;
                int32_t x20_5;
                if ((g3::logLevel(&var_3c0) & 1) == 0)
                {
                    x20_5 = 0;
                    if ((s_7 & 1) != 0)
                    {
                    label_367a8:
                        operator delete(var_3a8_1);
                        if ((x20_5 & 1) == 0)
                        {
                            goto label_367b0;
                        }
                        goto label_3675c;
                    }
                }
                else
                {
                    int64_t var_3d0_1 = 0;
                    int64_t var_3d0_2;
                    __builtin_strncpy(&var_3d0_2, "l_region", 0x10);
                    int64_t var_3d8 = 0;
                    var_3d8 = 0x1e;
                    __builtin_strncpy(&*var_3d8[1], "feasibal", 8);
                    void* var_3c8;
                    var_3c8 = 0;
                    x20_5 = g3::logTag(&var_3d8);
                    if ((var_3d8 & 1) != 0)
                    {
                        operator delete(var_3c8);
                        if ((s_7 & 1) != 0)
                        {
                            goto label_367a8;
                        }
                    }
                    else if ((s_7 & 1) != 0)
                    {
                        goto label_367a8;
                    }
                }
                void* x20_6;
                if ((x20_5 & 1) == 0)
                {
                label_367b0:
                    x20_6 = (arg1 + 0xaa8);
                }
                else
                {
                label_3675c:
                    LogCapture::LogCapture(&s_11, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
                    *(arg1 + 0xaa4);
                    *(arg1 + 0xaa8);
                    *(arg1 + 0xaac);
                    LogCapture::capturef();
                    x20_6 = (arg1 + 0xaa8);
                    LogCapture::~LogCapture();
                }
                int32_t x9_22 = *(arg1 + 0xa9c);
                *(arg1 + 0xaa4) = *(arg1 + 0xa98);
                *x20_6 = x9_22;
                *(arg1 + 0xaac) = *(arg1 + 0xaa0);
                x20_7 = var_328;
                if (x20_7 != 0)
                {
                label_37e40:
                    int64_t x19_1 = var_320;
                    void* x0_183;
                    if (x19_1 == x20_7)
                    {
                        x0_183 = x20_7;
                    }
                    else
                    {
                        do
                        {
                            x19_1 = (x19_1 - 0xa8);
                            PlaneSeg::~PlaneSeg();
                        } while (x20_7 != x19_1);
                        x0_183 = var_328;
                    }
                    void* var_320_1 = x20_7;
                    operator delete(x0_183);
                }
            }
        }
        if (*(x8 + 0x28) == x8_1)
        {
            arg2 = var_68;
            return 0;
        }
    }
    __stack_chk_fail();
    /* no return */
}

void sub_37f78(int64_t arg1, void* arg2, void* arg3) __noreturn
{
    LogCapture::~LogCapture();
    void* x0_1;
    if (arg2 != 0)
    {
        void* x20_1 = arg3;
        if (x20_1 == arg2)
        {
            goto label_3844c;
        }
        do
        {
            x20_1 = (x20_1 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (arg2 != x20_1);
        x0_1 = arg2;
        goto label_3843c;
    }
    while (true)
    {
        _Unwind_Resume(arg1);
    label_3844c:
        x0_1 = arg2;
    label_3843c:
        arg3 = arg2;
        operator delete(x0_1);
    }
}

void sub_37f7c(int64_t arg1, void* arg2, void* arg3) __noreturn
{
    void* x0_1;
    if (arg2 != 0)
    {
        void* x20_1 = arg3;
        if (x20_1 == arg2)
        {
            goto label_3844c;
        }
        do
        {
            x20_1 = (x20_1 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (arg2 != x20_1);
        x0_1 = arg2;
        goto label_3843c;
    }
    while (true)
    {
        _Unwind_Resume(arg1);
    label_3844c:
        x0_1 = arg2;
    label_3843c:
        arg3 = arg2;
        operator delete(x0_1);
    }
}

void sub_37f80(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_37fc0(int64_t arg1, char arg2, void* arg3, void* arg4, void* arg5) __noreturn
{
    void* x21;
    if ((arg2 & 1) == 0)
    {
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg3);
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg5;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_2 = arg4;
    while (true)
    {
        arg5 = x21;
        operator delete(x0_2);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_2 = x21;
    }
}

void sub_37ff4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_38014(int64_t arg1, char arg2, void* arg3, void* arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    LogCapture::~LogCapture();
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    void* x21;
    if ((arg2 & 1) == 0)
    {
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg3);
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg5;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg4;
    while (true)
    {
        arg5 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_3803c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, void* arg8, void* arg9, char arg10, void* arg11) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        if ((arg10 & 1) != 0)
        {
            goto label_383d0;
        }
    }
    if (((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)) && (arg10 & 1) != 0))
    {
    label_383d0:
        operator delete(arg11);
    }
    void* x21;
    if ((arg6 & 1) == 0)
    {
        x21 = arg8;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg7);
        x21 = arg8;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg9;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_5 = arg8;
    while (true)
    {
        arg9 = x21;
        operator delete(x0_5);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_5 = x21;
    }
}

void sub_38064(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_38088(int64_t arg1, char arg2, void* arg3, void* arg4, void* arg5) __noreturn
{
    void* x21;
    if ((arg2 & 1) == 0)
    {
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg3);
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg5;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_2 = arg4;
    while (true)
    {
        arg5 = x21;
        operator delete(x0_2);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_2 = x21;
    }
}

void sub_380b4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7, char arg8, void* arg9) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg8 & 1) != 0) || ((arg2 & 1) != 0 && (arg8 & 1) != 0)))
    {
        operator delete(arg9);
    }
    void* x21;
    if ((arg4 & 1) == 0)
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_4 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_4);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_4 = x21;
    }
}

void sub_380d4(int64_t arg1, char arg2, void* arg3, void* arg4, void* arg5) __noreturn
{
    void* x21;
    if ((arg2 & 1) == 0)
    {
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg3);
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg5;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_2 = arg4;
    while (true)
    {
        arg5 = x21;
        operator delete(x0_2);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_2 = x21;
    }
}

void sub_380e8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7, char arg8, void* arg9) __noreturn
{
    if ((arg8 & 1) != 0)
    {
        operator delete(arg9);
    }
    if ((((arg8 & 1) == 0 && (arg2 & 1) != 0) || ((arg8 & 1) != 0 && (arg2 & 1) != 0)))
    {
        operator delete(arg3);
    }
    void* x21;
    if ((arg4 & 1) == 0)
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_4 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_4);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_4 = x21;
    }
}

void sub_38108(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((arg4 & 1) == 0)
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_3811c(int64_t arg1, char arg2, void* arg3, void* arg4, void* arg5) __noreturn
{
    void* x21;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        x21 = arg4;
    }
    else
    {
        x21 = arg4;
    }
    void* x0_2;
    if ((((arg2 & 1) != 0 && x21 != 0) || ((arg2 & 1) == 0 && x21 != 0)))
    {
        void* x20_1 = arg5;
        if (x20_1 == x21)
        {
            goto label_3844c;
        }
        do
        {
            x20_1 = (x20_1 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (x21 != x20_1);
        x0_2 = arg4;
        goto label_3843c;
    }
    if ((((arg2 & 1) != 0 && x21 == 0) || ((arg2 & 1) == 0 && x21 == 0)))
    {
        while (true)
        {
            _Unwind_Resume(arg1);
        label_3844c:
            x0_2 = x21;
        label_3843c:
            arg5 = x21;
            operator delete(x0_2);
        }
    }
}

void sub_38148(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_38180(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_381a8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_381c8(int64_t arg1, void* arg2, void* arg3, int32_t arg4, int64_t arg5, int64_t arg6, void* arg7) __noreturn
{
    if (arg5 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg5 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg5 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg5 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg4 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg4);
    }
    if (arg7 != &arg_480)
    {
        cv::fastFree(arg7);
    }
    void* x0_2;
    if (arg2 != 0)
    {
        void* x20_1 = arg3;
        if (x20_1 == arg2)
        {
            goto label_3844c;
        }
        do
        {
            x20_1 = (x20_1 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (arg2 != x20_1);
        x0_2 = arg2;
        goto label_3843c;
    }
    while (true)
    {
        _Unwind_Resume(arg1);
    label_3844c:
        x0_2 = arg2;
    label_3843c:
        arg3 = arg2;
        operator delete(x0_2);
    }
}

void sub_38248(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_3828c(int64_t arg1, char arg2, void* arg3, void* arg4, void* arg5) __noreturn
{
    void* x21;
    if ((arg2 & 1) == 0)
    {
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg3);
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg5;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_2 = arg4;
    while (true)
    {
        arg5 = x21;
        operator delete(x0_2);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_2 = x21;
    }
}

void sub_382a0(int64_t arg1, char arg2, void* arg3, void* arg4, void* arg5) __noreturn
{
    void* x21;
    if ((arg2 & 1) == 0)
    {
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg3);
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg5;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_2 = arg4;
    while (true)
    {
        arg5 = x21;
        operator delete(x0_2);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_2 = x21;
    }
}

void sub_382bc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_38300(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7) __noreturn
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x21;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x21 = arg6;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg7;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_3 = arg6;
    while (true)
    {
        arg7 = x21;
        operator delete(x0_3);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_3 = x21;
    }
}

void sub_38324(int64_t arg1, void* arg2, void* arg3, int32_t arg4, int64_t arg5, int64_t arg6, void* arg7) __noreturn
{
    if (arg5 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg5 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg5 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg5 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg4 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg6 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg4);
    }
    if (arg7 != &arg_480)
    {
        cv::fastFree(arg7);
    }
    void* x0_2;
    if (arg2 != 0)
    {
        void* x20_1 = arg3;
        if (x20_1 == arg2)
        {
            goto label_3844c;
        }
        do
        {
            x20_1 = (x20_1 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (arg2 != x20_1);
        x0_2 = arg2;
        goto label_3843c;
    }
    while (true)
    {
        _Unwind_Resume(arg1);
    label_3844c:
        x0_2 = arg2;
    label_3843c:
        arg3 = arg2;
        operator delete(x0_2);
    }
}

void sub_383a4(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_383bc(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_383e4(int64_t arg1, char arg2, void* arg3, void* arg4, void* arg5) __noreturn
{
    void* x21;
    if ((arg2 & 1) == 0)
    {
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    else
    {
        operator delete(arg3);
        x21 = arg4;
        if (x21 == 0)
        {
            goto label_38448;
        }
    }
    void* x20_1 = arg5;
    if (x20_1 == x21)
    {
        goto label_3844c;
    }
    do
    {
        x20_1 = (x20_1 - 0xa8);
        PlaneSeg::~PlaneSeg();
    } while (x21 != x20_1);
    void* x0_2 = arg4;
    while (true)
    {
        arg5 = x21;
        operator delete(x0_2);
    label_38448:
        _Unwind_Resume(arg1);
    label_3844c:
        x0_2 = x21;
    }
}

uint64_t feasibal_region::ground_process::groundProcess(cv::Mat* arg1, int64_t arg2 @ v13)
{
    int64_t v15;
    int64_t var_a0 = v15;
    int64_t v14;
    int64_t var_98 = v14;
    int64_t var_90 = arg2;
    int64_t v12;
    int64_t var_88 = v12;
    int64_t v11;
    int64_t var_80 = v11;
    int64_t v10;
    int64_t var_78 = v10;
    int64_t v9;
    int64_t var_70 = v9;
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    int64_t x9 = *(arg1 + 0x970);
    int32_t x25 = *(arg1 + 0x114);
    int64_t x10 = *(arg1 + 0x988);
    *(arg1 + 0x960) = *(arg1 + 0x958);
    *(arg1 + 0x978) = x9;
    int64_t x9_1 = *(arg1 + 0x9b8);
    int64_t v8;
    v8 = *(arg1 + 0x90);
    uint64_t x20 = (x25 * x25);
    *(arg1 + 0x990) = x10;
    *(arg1 + 0x9a8) = *(arg1 + 0x9a0);
    *(arg1 + 0x9c0) = x9_1;
    int128_t* var_270;
    Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(&var_270, x20, x20);
    bool var_3c0 = x20;
    double v0;
    double v1;
    v0 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(&var_270, x20);
    int64_t var_268;
    int64_t x9_3;
    if (var_268 < 0)
    {
        x9_3 = (var_268 + 3);
    }
    else
    {
        x9_3 = var_268;
    }
    int64_t x10_1 = (x9_3 & 0xfffffffffffffffc);
    if (var_268 >= 4)
    {
        int64_t x11_1 = 0;
        int64_t x12_1 = 0;
        do
        {
            x12_1 = (x12_1 + 4);
            int64_t* x13_2 = (var_270 + x11_1);
            x11_1 = (x11_1 + 0x10);
            *x13_2 = 0;
            x13_2[1] = 0;
        } while (x12_1 < x10_1);
    }
    if (x10_1 < var_268)
    {
        v0 = memset((var_270 + (x10_1 << 2)), 0, ((var_268 << 2) - ((x9_3 >> 2) << 4)));
    }
    int32_t* x11_3 = *(arg1 + 0x738);
    int32_t x19_1;
    if (*(arg1 + 0x740) == x11_3)
    {
    label_38f9c:
        int32_t x8_42 = *(arg1 + 0x9dc);
        *(arg1 + 0x9d4) = 0;
        *(arg1 + 0x9dc) = (x8_42 + 1);
        x19_1 = -1;
    label_39a4c:
        free(var_270);
        if (*(x28 + 0x28) == x8)
        {
            return x19_1;
        }
    label_39aa4:
        __stack_chk_fail();
        /* no return */
    }
    int32_t x8_6 = *x11_3;
    int32_t x9_5 = x11_3[1];
    int32_t var_280 = x8_6;
    int32_t var_27c_1 = x9_5;
    float x10_2 = x11_3[2];
    int32_t x11_4 = x11_3[3];
    float var_278_1 = x10_2;
    int32_t x26_1;
    if (*(arg1 + 0x950) == 0)
    {
        x8_6 = *(arg1 + 0x704);
        *(arg1 + 0x9d4) = 1;
        var_280 = x8_6;
        x9_5 = *(arg1 + 0x708);
        var_27c_1 = x9_5;
        v0 = *(arg1 + 0x70c);
        var_278_1 = v0;
        x26_1 = (*(arg1 + 0x9dc) + 1);
        *(arg1 + 0x9dc) = x26_1;
        x10_2 = v0;
    }
    else
    {
        x26_1 = 0;
        *(arg1 + 0x710) = x11_4;
        *(arg1 + 0x9dc) = 0;
        *(arg1 + 0x704) = x8_6;
        *(arg1 + 0x708) = x9_5;
        *(arg1 + 0x70c) = x10_2;
        *(arg1 + 0x9d4) = 2;
    }
    v0 = x8_6;
    v1 = x9_5;
    int32_t v2_1 = x10_2;
    float v3_1 = *(arg1 + 0x714);
    float v4_1 = *(arg1 + 0x718);
    float v5_1 = *(arg1 + 0x71c);
    float v6_1 = (((v0 * v0) + (v1 * v1)) + (v2_1 * v2_1));
    /* unimplemented  {fsqrt s6, s6} */;
    v0 = (v0 / v6_1);
    v1 = (v1 / v6_1);
    v2_1 = (v2_1 / v6_1);
    v6_1 = (((v3_1 * v3_1) + (v4_1 * v4_1)) + (v5_1 * v5_1));
    /* unimplemented  {fsqrt s6, s6} */;
    v0 = ((v3_1 / v6_1) * v0);
    v1 = ((v4_1 / v6_1) * v1);
    v0 = (v0 + v1);
    v0 = (((v5_1 / v6_1) * v2_1) + v0);
    /* unimplemented  {fabs s1, s0} */;
    v1 = (v1 + -1f);
    /* unimplemented  {fabs s1, s1} */;
    v11 = 0f;
    bool cond:3_1 = v1 < 0.0001;
    v1 = 0f;
    if (!(cond:3_1))
    {
        v0 = acosf(v0);
        double v3_2 = v0;
        v1 = (3.1415926535897931 - v3_2);
        if (v3_2 > 1.5707963267948966)
        {
            v0 = v1;
        }
        else
        {
            v0 = v0;
        }
        /* unimplemented  {fabs s1, s0} */;
    }
    v0 = 0x43340000;
    *(arg1 + 0x9d8) = v1;
    v0 = (v1 * 180f);
    v0 = (v0 / 3.1415899999999999);
    if ((FCMP_UO(v0, v0)))
    {
        v11 = v0;
    }
    else
    {
        v11 = v11;
    }
    char* x22_1;
    if ((*data_6fdf0 & 1) == 0)
    {
        x22_1 = &*(data_6fdf0 + 1);
    }
    else
    {
        x22_1 = *(data_6fdfa + 6);
    }
    int32_t var_2a0 = data_6fde8;
    int64_t s_4;
    __builtin_memset(&s_4, 0, 0x18);
    size_t x0_4 = strlen(x22_1);
    void* s_2;
    void* var_2e8;
    cv::Mat* var_2d0;
    int64_t* s_3;
    void* s_5;
    if (x0_4 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_39ab4:
        int64_t x0_64 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        void* s_15 = s_5;
        void* s_16;
        if (s_15 != 0)
        {
            void* s_33 = s_15;
            operator delete(s_15);
            s_16 = s_2;
        }
        else
        {
            s_16 = s_2;
        }
        if (((s_15 != 0 && s_16 != 0) || (s_15 == 0 && s_16 != 0)))
        {
            void* s_31 = s_16;
            operator delete(s_16);
        }
        void* x0_65 = var_2e8;
        if (x0_65 != 0)
        {
            operator delete(x0_65);
        }
        cv::Mat* x20_11 = var_2d0;
        cv::Mat* x0_67;
        if (x20_11 != 0)
        {
            int64_t* s_21 = s_3;
            if (s_21 == x20_11)
            {
                goto label_39d98;
            }
            int64_t* s_36 = s_21;
            do
            {
                s_36 = &s_36[-3];
                void* x0_66 = *s_36;
                if (x0_66 != 0)
                {
                    s_21[-2] = x0_66;
                    operator delete(x0_66);
                }
                s_21 = s_36;
            } while (x20_11 != s_36);
            x0_67 = var_2d0;
            goto label_39d80;
        }
        while (true)
        {
            free(var_270);
            _Unwind_Resume(x0_64);
        label_39d98:
            x0_67 = x20_11;
        label_39d80:
            cv::Mat* var_2c8_1 = x20_11;
            operator delete(x0_67);
        }
    }
    else
    {
        void* var_288_1;
        void* x23_1;
        if (x0_4 >= 0x17)
        {
            uint64_t x24_1 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
            void* x0_6 = operator new(x24_1);
            x23_1 = x0_6;
            size_t var_290_1 = x0_4;
            var_288_1 = x0_6;
            s_4 = (x24_1 | 1);
        }
        else
        {
            x23_1 = &*s_4[1];
            s_4 = (x0_4 << 1);
        }
        if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
        {
            memcpy(x23_1, x22_1, x0_4);
        }
        *(x23_1 + x0_4) = 0;
        int32_t x0_9;
        cv::Mat* x1_3;
        cv::Mat* x7_1;
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_2;
        int128_t v3_3;
        int128_t v4_2;
        int128_t v5_2;
        int128_t v7_2;
        x0_9 = g3::logLevel(&var_2a0);
        int32_t x21_2;
        if ((x0_9 & 1) == 0)
        {
            x21_2 = 0;
            if ((s_4 & 1) != 0)
            {
            label_38824:
                x1_3 = operator delete(var_288_1);
                if ((x21_2 & 1) != 0)
                {
                    goto label_387e8;
                }
            }
        }
        else
        {
            int64_t var_2b8 = 0;
            int64_t var_2b0_1 = 0;
            var_2b8 = 0x1e;
            void* var_2a8_1 = nullptr;
            __builtin_strncpy(&*var_2b8[1], "feasibal_region", 0x10);
            int32_t x0_11;
            x0_11 = g3::logTag(&var_2b8);
            x21_2 = x0_11;
            if ((var_2b8 & 1) != 0)
            {
                x1_3 = operator delete(var_2a8_1);
                if ((s_4 & 1) != 0)
                {
                    goto label_38824;
                }
            }
            else if ((s_4 & 1) != 0)
            {
                goto label_38824;
            }
        }
        int64_t* s_7;
        if ((((((x0_9 & 1) == 0 && (s_4 & 1) == 0) || (x0_9 & 1) != 0) && (x21_2 & 1) == 0) || ((x0_9 & 1) == 0 && (s_4 & 1) != 0)))
        {
            if (x26_1 > 5)
            {
            label_3885c:
                int32_t x10_6 = *(arg1 + 0x714);
                *(arg1 + 0x9d4) = 1;
                int32_t x9_7 = *(arg1 + 0x718);
                v0_1 = *(arg1 + 0x71c);
                v1_1 = x10_6;
                var_280 = x10_6;
                v2_2 = x9_7;
                var_27c_1 = x9_7;
                var_278_1 = v0_1;
            }
            else
            {
            label_38834:
                /* unimplemented  {fabs s0, s11} */;
                v1_1 = 0x41800000;
                if (v0_1 > 16f)
                {
                    goto label_3885c;
                }
                v1_1 = var_280;
                v2_2 = var_27c_1;
                v0_1 = var_278_1;
            }
            /* unimplemented  {fabs s1, s1} */;
            /* unimplemented  {fabs s2, s2} */;
            v1_1 = (v1_1 + v2_2);
            /* unimplemented  {fabs s0, s0} */;
            v0_1 = (v1_1 + v0_1);
            v0_1 = v0_1;
            if (v0_1 <= 0.0001)
            {
                goto label_38f9c;
            }
            __builtin_memset(&s_2, 0, 0x48);
            int32_t x8_14 = *(arg1 + 0x7d0);
            void* s_6;
            int32_t var_238;
            void* x27_1;
            if (x8_14 <= 0)
            {
                x27_1 = (arg1 + 0x9d4);
            }
            else
            {
                v1_1 = *(arg1 + 0x38);
                uint64_t x24_2 = *(arg1 + 0x7d4);
                v0_1 = 0x41200000;
                int64_t i = 0;
                x27_1 = (arg1 + 0x9d4);
                v12 = (v8 * 10f);
                arg2 = (v8 * v1_1);
                do
                {
                    if (x24_2 >= 1)
                    {
                        int64_t x26_2 = 0;
                        do
                        {
                            int32_t* x9_26 = ((*(arg1 + 0x838) + (**(arg1 + 0x870) * i)) + (x26_2 << 4));
                            v0_1 = x9_26[3];
                            if ((!(v0_1 < 0f) && *((*(arg1 + 0x498) + (**(arg1 + 0x4d0) * i)) + x26_2) != 0))
                            {
                                int32_t x8_34 = *x9_26;
                                int32_t x10_14 = x9_26[1];
                                int32_t x9_27 = x9_26[2];
                                int32_t* x9_28;
                                if ((*((*(arg1 + 0x7d8) + (**(arg1 + 0x810) * i)) + x26_2) == 1 && *x27_1 != 1))
                                {
                                    s_7 = x8_34;
                                    *s_7[4] = x10_14;
                                    var_238 = x9_27;
                                    x9_28 = *(arg1 + 0x960);
                                    if (x9_28 == *(arg1 + 0x968))
                                    {
                                        x1_3 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>((arg1 + 0x958));
                                    }
                                    else
                                    {
                                    label_38f58:
                                        *x9_28 = x8_34;
                                        x9_28[1] = *s_7[4];
                                        x9_28[2] = var_238;
                                        *(arg1 + 0x960) = &x9_28[3];
                                    }
                                }
                                if ((*((*(arg1 + 0x7d8) + (**(arg1 + 0x810) * i)) + x26_2) != 1 || (*((*(arg1 + 0x7d8) + (**(arg1 + 0x810) * i)) + x26_2) == 1 && *x27_1 == 1)))
                                {
                                    if (v0_1 <= 1.5f)
                                    {
                                        v3_3 = var_280;
                                        v0_1 = var_27c_1;
                                        v1_1 = var_278_1;
                                        v4_2 = x8_34;
                                        v5_2 = x10_14;
                                        v2_2 = x11_4;
                                        v4_2 = (v3_3 * v4_2);
                                        v5_2 = (v0_1 * v5_2);
                                        v4_2 = (v4_2 + v5_2);
                                        v5_2 = x9_27;
                                        v5_2 = (v1_1 * v5_2);
                                        v5_2 = (v5_2 + v2_2);
                                        v4_2 = (v4_2 + v5_2);
                                        /* unimplemented  {fabs s4, s4} */;
                                        int40_t var_22c;
                                        if (!(v4_2 <= v12))
                                        {
                                            int32_t var_c8 = v3_3;
                                            int32_t var_c4_1 = v0_1;
                                            int32_t var_c0_1 = v1_1;
                                            int32_t var_bc_1 = v2_2;
                                            int128_t* var_310;
                                            Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(&var_310, var_268, var_268);
                                            int128_t v0_3;
                                            int128_t v1_2;
                                            v0_3 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(&var_310, var_268);
                                            int64_t var_308;
                                            int64_t x9_30;
                                            if (var_308 < 0)
                                            {
                                                x9_30 = (var_308 + 3);
                                            }
                                            else
                                            {
                                                x9_30 = var_308;
                                            }
                                            int64_t x9_31 = (x9_30 & 0xfffffffffffffffc);
                                            if (var_308 >= 4)
                                            {
                                                int64_t x10_16 = 0;
                                                int64_t x11_13 = 0;
                                                do
                                                {
                                                    x11_13 = (x11_13 + 4);
                                                    *(var_310 + x10_16) = *(var_270 + x10_16);
                                                    x10_16 = (x10_16 + 0x10);
                                                } while (x11_13 < x9_31);
                                            }
                                            int64_t x12_5 = (var_308 - x9_31);
                                            if (var_308 > x9_31)
                                            {
                                                int128_t* x10_17 = var_270;
                                                int128_t* x11_14 = var_310;
                                                if (x12_5 >= 8)
                                                {
                                                    int64_t x14_1 = (x9_31 << 2);
                                                    int64_t x13_4 = (var_308 << 2);
                                                    void* x15_1 = (x11_14 + x14_1);
                                                    void* x14_2 = (x10_17 + x14_1);
                                                    if ((x15_1 < (x10_17 + x13_4) && x14_2 < (x11_14 + x13_4)))
                                                    {
                                                        goto label_38cdc;
                                                    }
                                                    int64_t j_23 = (x12_5 & 0xfffffffffffffff8);
                                                    void* x14_3 = (x14_2 + 0x10);
                                                    x9_31 = (x9_31 + j_23);
                                                    void* x15_2 = (x15_1 + 0x10);
                                                    int64_t j_17 = j_23;
                                                    int64_t j;
                                                    do
                                                    {
                                                        v0_3 = *(x14_3 - 0x10);
                                                        v1_2 = *x14_3;
                                                        x14_3 = (x14_3 + 0x20);
                                                        j = j_17;
                                                        j_17 = (j_17 - 8);
                                                        *(x15_2 - 0x10) = v0_3;
                                                        *x15_2 = v1_2;
                                                        x15_2 = (x15_2 + 0x20);
                                                    } while (j != 8);
                                                    if (x12_5 != j_23)
                                                    {
                                                        goto label_38cdc;
                                                    }
                                                }
                                                else
                                                {
                                                label_38cdc:
                                                    int64_t x12_6 = (x9_31 << 2);
                                                    int64_t j_11 = (var_308 - x9_31);
                                                    void* x9_32 = (x11_14 + x12_6);
                                                    void* x10_18 = (x10_17 + x12_6);
                                                    int64_t j_1;
                                                    do
                                                    {
                                                        int32_t x11_15 = *x10_18;
                                                        x10_18 = (x10_18 + 4);
                                                        j_1 = j_11;
                                                        j_11 = (j_11 - 1);
                                                        *x9_32 = x11_15;
                                                        x9_32 = (x9_32 + 4);
                                                    } while (j_1 != 1);
                                                }
                                            }
                                            feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(arg1, &var_c8, &var_310, (x26_2 + (x24_2 * i)), var_3c0, 1, v8);
                                            int128_t* x0_24 = var_310;
                                            int64_t* s_27 = s_7;
                                            __builtin_memset(&s_7, 0, 0x18);
                                            x1_3 = free(x0_24);
                                            if (*var_22c[4] != 0)
                                            {
                                                x1_3 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >((arg1 + 0x970), *(arg1 + 0x978), s_27);
                                            }
                                            if (s_27 != 0)
                                            {
                                                x1_3 = operator delete(s_27);
                                            }
                                        }
                                        else if (!(v4_2 <= arg2))
                                        {
                                            __builtin_memset(&s_5, 0, 0x18);
                                            int32_t var_d8 = v3_3;
                                            int32_t var_d4_1 = v0_1;
                                            int32_t var_d0_1 = v1_1;
                                            int32_t var_cc_1 = v2_2;
                                            int128_t* var_320;
                                            Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(&var_320, var_268, var_268);
                                            int128_t v0_5;
                                            int128_t v1_3;
                                            v0_5 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(&var_320, var_268);
                                            int64_t var_318;
                                            int64_t x9_34;
                                            if (var_318 < 0)
                                            {
                                                x9_34 = (var_318 + 3);
                                            }
                                            else
                                            {
                                                x9_34 = var_318;
                                            }
                                            int64_t x9_35 = (x9_34 & 0xfffffffffffffffc);
                                            if (var_318 >= 4)
                                            {
                                                int64_t x10_20 = 0;
                                                int64_t x11_16 = 0;
                                                do
                                                {
                                                    x11_16 = (x11_16 + 4);
                                                    *(var_320 + x10_20) = *(var_270 + x10_20);
                                                    x10_20 = (x10_20 + 0x10);
                                                } while (x11_16 < x9_35);
                                            }
                                            int64_t x12_8 = (var_318 - x9_35);
                                            if (var_318 > x9_35)
                                            {
                                                int128_t* x10_21 = var_270;
                                                int128_t* x11_17 = var_320;
                                                if (x12_8 >= 8)
                                                {
                                                    int64_t x14_4 = (x9_35 << 2);
                                                    int64_t x13_7 = (var_318 << 2);
                                                    void* x15_3 = (x11_17 + x14_4);
                                                    void* x14_5 = (x10_21 + x14_4);
                                                    if ((x15_3 < (x10_21 + x13_7) && x14_5 < (x11_17 + x13_7)))
                                                    {
                                                        goto label_38e84;
                                                    }
                                                    int64_t j_24 = (x12_8 & 0xfffffffffffffff8);
                                                    void* x14_6 = (x14_5 + 0x10);
                                                    x9_35 = (x9_35 + j_24);
                                                    void* x15_4 = (x15_3 + 0x10);
                                                    int64_t j_18 = j_24;
                                                    int64_t j_2;
                                                    do
                                                    {
                                                        v0_5 = *(x14_6 - 0x10);
                                                        v1_3 = *x14_6;
                                                        x14_6 = (x14_6 + 0x20);
                                                        j_2 = j_18;
                                                        j_18 = (j_18 - 8);
                                                        *(x15_4 - 0x10) = v0_5;
                                                        *x15_4 = v1_3;
                                                        x15_4 = (x15_4 + 0x20);
                                                    } while (j_2 != 8);
                                                    if (x12_8 != j_24)
                                                    {
                                                        goto label_38e84;
                                                    }
                                                }
                                                else
                                                {
                                                label_38e84:
                                                    int64_t x12_9 = (x9_35 << 2);
                                                    int64_t j_12 = (var_318 - x9_35);
                                                    void* x9_36 = (x11_17 + x12_9);
                                                    void* x10_22 = (x10_21 + x12_9);
                                                    int64_t j_3;
                                                    do
                                                    {
                                                        int32_t x11_18 = *x10_22;
                                                        x10_22 = (x10_22 + 4);
                                                        j_3 = j_12;
                                                        j_12 = (j_12 - 1);
                                                        *x9_36 = x11_18;
                                                        x9_36 = (x9_36 + 4);
                                                    } while (j_3 != 1);
                                                }
                                            }
                                            feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(arg1, &var_d8, &var_320, (x26_2 + (x24_2 * i)), var_3c0, 1, v8);
                                            void* s_10 = s_5;
                                            if (s_10 != 0)
                                            {
                                                void* s_32 = s_10;
                                                operator delete(s_10);
                                                __builtin_memset(&s_5, 0, 0x18);
                                            }
                                            int128_t v0_7 = s_7;
                                            int128_t* x0_31 = var_320;
                                            __builtin_memset(&s_7, 0, 0x18);
                                            s_5 = v0_7;
                                            int64_t var_230;
                                            int64_t var_250_1 = var_230;
                                            x1_3 = free(x0_31);
                                            int64_t var_2e0_1;
                                            int64_t x8_15 = var_2e0_1;
                                            int64_t var_2d8;
                                            if (x8_15 == (var_2d8 << 6))
                                            {
                                                if ((x8_15 + 1) < 0)
                                                {
                                                    goto label_39aa0;
                                                }
                                                x1_3 = std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(&var_2e8);
                                                x8_15 = var_2e0_1;
                                            }
                                            var_2e0_1 = (x8_15 + 1);
                                            void* x9_12 = var_2e8;
                                            uint64_t x10_7 = (x8_15 >> 6);
                                            int64_t x8_16 = (1 << x8_15);
                                            int64_t x8_17;
                                            if (*var_22c[4] == 0)
                                            {
                                                x8_17 = (*(x9_12 + (x10_7 << 3)) & !(x8_16));
                                            }
                                            else
                                            {
                                                x8_17 = (*(x9_12 + (x10_7 << 3)) | x8_16);
                                            }
                                            *(x9_12 + (x10_7 << 3)) = x8_17;
                                            int64_t var_2c0;
                                            if (s_3 == var_2c0)
                                            {
                                                x1_3 = std::__ndk1::vector<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::allocator<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > > > >::__push_back_slow_path<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > > const&>(&var_2d0);
                                            }
                                            else
                                            {
                                                __builtin_memset(s_3, 0, 0x18);
                                                void* s_22 = s_5;
                                                void* s_17 = s_6;
                                                void* x0_16 = (s_17 - s_22);
                                                if (s_17 != s_22)
                                                {
                                                    int64_t x20_1 = ((x0_16 >> 2) * -0x5555555555555555);
                                                    if (x20_1 >= 0x1555555555555556)
                                                    {
                                                        std::__ndk1::__vector_base_common<true>::__throw_length_error();
                                                    label_39aa0:
                                                        std::__ndk1::__vector_base_common<true>::__throw_length_error();
                                                        goto label_39aa4;
                                                    }
                                                    void* x0_17;
                                                    x0_17 = operator new(x0_16);
                                                    *s_3 = x0_17;
                                                    s_3[1] = x0_17;
                                                    s_3[2] = (x0_17 + (x20_1 * 0xc));
                                                    void* s_23 = s_5;
                                                    void* s_18 = s_6;
                                                    if (s_23 != s_18)
                                                    {
                                                        uint64_t x9_16 = (((s_18 - 0xc) - s_23) / 0xc);
                                                        uint64_t x9_18;
                                                        int32_t* x9_21;
                                                        void* s_34;
                                                        if ((x9_16 + 1) >= 8)
                                                        {
                                                            x9_18 = (x9_16 * 0xc);
                                                            if ((x0_17 >= ((s_23 + x9_18) + 0xc) || (x0_17 < ((s_23 + x9_18) + 0xc) && ((x0_17 + x9_18) + 0xc) <= s_23)))
                                                            {
                                                                int64_t j_22 = ((x9_16 + 1) & 0x3ffffffffffffff8);
                                                                int64_t x11_10 = (j_22 * 0xc);
                                                                x9_21 = (x0_17 + x11_10);
                                                                s_34 = (s_23 + x11_10);
                                                                int64_t j_16 = j_22;
                                                                int64_t j_4;
                                                                do
                                                                {
                                                                    v1_1 = *(s_23 + 0x10);
                                                                    v2_2 = *(s_23 + 0x20);
                                                                    v3_3 = *(s_23 + 0x30);
                                                                    v4_2 = *(s_23 + 0x40);
                                                                    v5_2 = *(s_23 + 0x50);
                                                                    j_4 = j_16;
                                                                    j_16 = (j_16 - 8);
                                                                    *x0_17 = *s_23;
                                                                    *(x0_17 + 0x10) = v1_1;
                                                                    *(x0_17 + 0x20) = v2_2;
                                                                    *(x0_17 + 0x30) = v3_3;
                                                                    *(x0_17 + 0x40) = v4_2;
                                                                    *(x0_17 + 0x50) = v5_2;
                                                                    x0_17 = (x0_17 + 0x60);
                                                                    s_23 = (s_23 + 0x60);
                                                                } while (j_4 != 8);
                                                                if ((x9_16 + 1) != j_22)
                                                                {
                                                                    goto label_38a48;
                                                                }
                                                            }
                                                        }
                                                        if (((x9_16 + 1) < 8 || (((x9_16 + 1) >= 8 && x0_17 < ((s_23 + x9_18) + 0xc)) && ((x0_17 + x9_18) + 0xc) > s_23)))
                                                        {
                                                            x9_21 = x0_17;
                                                            s_34 = s_23;
                                                        label_38a48:
                                                            do
                                                            {
                                                                *x9_21 = *s_34;
                                                                x9_21[1] = *(s_34 + 4);
                                                                int32_t x10_10 = *(s_34 + 8);
                                                                s_34 = (s_34 + 0xc);
                                                                x9_21[2] = x10_10;
                                                                x9_21 = &x9_21[3];
                                                            } while (s_34 != s_18);
                                                        }
                                                        s_3[1] = x9_21;
                                                    }
                                                }
                                                s_3 = &s_3[3];
                                            }
                                            void* var_2f8_1;
                                            int32_t* x8_23 = var_2f8_1;
                                            s_7 = i;
                                            *s_7[4] = x26_2;
                                            int64_t var_2f0;
                                            void* s_9;
                                            if (x8_23 >= var_2f0)
                                            {
                                                x1_3 = std::__ndk1::vector<cv::Point_<int32_t>, std::__ndk1::allocator<cv::Point_<int32_t> > >::__push_back_slow_path<cv::Point_<int32_t> >(&s_2);
                                                s_9 = s_5;
                                            }
                                            else
                                            {
                                                *x8_23 = i;
                                                x8_23[1] = *s_7[4];
                                                var_2f8_1 = &x8_23[2];
                                                s_9 = s_5;
                                            }
                                            if (((x8_23 >= var_2f0 && s_9 != 0) || (x8_23 < var_2f0 && s_9 != 0)))
                                            {
                                                s_6 = s_9;
                                                x1_3 = operator delete(s_9);
                                            }
                                        }
                                        else
                                        {
                                            s_7 = x8_34;
                                            *s_7[4] = x10_14;
                                            var_238 = x9_27;
                                            x9_28 = *(arg1 + 0x960);
                                            if (x9_28 != *(arg1 + 0x968))
                                            {
                                                goto label_38f58;
                                            }
                                            x1_3 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>((arg1 + 0x958));
                                        }
                                    }
                                    else
                                    {
                                        s_7 = x8_34;
                                        *s_7[4] = x10_14;
                                        var_238 = x9_27;
                                        x9_28 = *(arg1 + 0x960);
                                        if (x9_28 != *(arg1 + 0x968))
                                        {
                                            goto label_38f58;
                                        }
                                        x1_3 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>((arg1 + 0x958));
                                    }
                                }
                            }
                            x24_2 = *(arg1 + 0x7d4);
                            x26_2 = (x26_2 + 1);
                        } while (x26_2 < x24_2);
                        x8_14 = *(arg1 + 0x7d0);
                    }
                    i = (i + 1);
                } while (i < x8_14);
            }
            if (*x27_1 == 1)
            {
                std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::insert((arg1 + 0x738), *(arg1 + 0x738));
                s_5 = 0x3ff0000000000000;
                __builtin_memset(&s_6, 0, 0x11);
                cv::operator+((arg1 + 0x7c8), &s_5);
                *(*s_7 + 0x18)();
                x1_3 = cv::MatExpr::~MatExpr();
            }
            int64_t x8_48 = *(arg1 + 0x740);
            void* x21_4 = *(arg1 + 0x738);
            int32_t* s_1;
            __builtin_memset(&s_1, 0, 0x18);
            int64_t x24_4 = ((x8_48 - x21_4) >> 4);
            int64_t i_5 = (x24_4 - 1);
            if (x24_4 != 1)
            {
                if ((i_5 >> 0x3e) != 0)
                {
                    goto label_39ab4;
                }
                int64_t x23_3 = (i_5 << 2);
                int32_t* s_11 = operator new(x23_3);
                void* x25_2 = &s_11[i_5];
                int32_t* s_37 = s_11;
                s_1 = s_11;
                void* var_328_1 = x25_2;
                x1_3 = memset(s_11, 0, x23_3);
                void* var_330_1 = x25_2;
                if (x24_4 >= 2)
                {
                    v0_1 = var_280;
                    v1_1 = var_27c_1;
                    v2_2 = var_278_1;
                    v3_3 = (v0_1 * v0_1);
                    v4_2 = (v1_1 * v1_1);
                    v3_3 = (v3_3 + v4_2);
                    v4_2 = (v2_2 * v2_2);
                    v3_3 = (v3_3 + v4_2);
                    /* unimplemented  {fsqrt s3, s3} */;
                    arg2 = (v0_1 / v3_3);
                    v14 = (v1_1 / v3_3);
                    v15 = (v2_2 / v3_3);
                    void* x21_5 = (x21_4 + 0x18);
                    int64_t i_1;
                    do
                    {
                        v0_1 = *(x21_5 - 8);
                        v1_1 = *(x21_5 - 4);
                        v2_2 = *x21_5;
                        v3_3 = (v0_1 * v0_1);
                        v4_2 = (v1_1 * v1_1);
                        v3_3 = (v3_3 + v4_2);
                        v4_2 = (v2_2 * v2_2);
                        v3_3 = (v3_3 + v4_2);
                        /* unimplemented  {fsqrt s3, s3} */;
                        v0_1 = (v0_1 / v3_3);
                        v1_1 = (v1_1 / v3_3);
                        v2_2 = (v2_2 / v3_3);
                        v0_1 = (v0_1 * arg2);
                        v1_1 = (v1_1 * v14);
                        v0_1 = (v0_1 + v1_1);
                        v1_1 = (v2_2 * v15);
                        v0_1 = (v1_1 + v0_1);
                        /* unimplemented  {fabs s1, s0} */;
                        v1_1 = (v1_1 + -1f);
                        /* unimplemented  {fabs s1, s1} */;
                        v1_1 = v1_1;
                        bool cond:12_1 = v1_1 < 0.0001;
                        v1_1 = 0f;
                        if (!(cond:12_1))
                        {
                            v0_1 = acosf(v0_1);
                            v1_1 = v0_1;
                            v2_2 = (3.1415926535897931 - v1_1);
                            v2_2 = v2_2;
                            if (v1_1 > 1.5707963267948966)
                            {
                                v0_1 = v2_2;
                            }
                            else
                            {
                                v0_1 = v0_1;
                            }
                            /* unimplemented  {fabs s1, s0} */;
                        }
                        *s_37 = v1_1;
                        s_37 = &s_37[1];
                        i_1 = i_5;
                        i_5 = (i_5 - 1);
                        x21_5 = (x21_5 + 0x10);
                    } while (i_1 != 1);
                }
            }
            v0_1 = 0;
            *v0_1[8] = 0;
            s_7 = 0x42ff0000;
            int64_t var_1f0;
            int64_t* x21_6 = &var_1f0;
            __builtin_memset(&*s_7[4], 0, 0x3c);
            int32_t* var_200_1 = &var_238;
            int64_t* var_1f8_1 = &var_1f0;
            int64_t var_1e8_1 = 0;
            var_1f0 = 0;
            v0_1 = *(arg1 + 0x7d0);
            v2_2 = 0x3fe999999999999a;
            v1_1 = 0x3fd0000000000000;
            /* unimplemented  {sxtl v0.2d, v0.2s} */;
            /* unimplemented  {scvtf d0, d0} */;
            v1_1 = (v0_1 * 0.25);
            v2_2 = (v0_1 * 0.80000000000000004);
            v0_1 = *(arg1 + 0x7d4);
            int32_t temp0_1 = vcvt_s64_f64(v1_1);
            int32_t temp0_2 = vcvt_s64_f64(v2_2);
            cv::Mat* s;
            __builtin_memset(&s, 0, 0x18);
            if (temp0_1 < temp0_2)
            {
                v1_1 = 0x3feb333333333333;
                v2_2 = 0x3fc3333333333333;
                /* unimplemented  {sxtl v0.2d, v0.2s} */;
                /* unimplemented  {scvtf d0, d0} */;
                v1_1 = (v0_1 * 0.84999999999999998);
                v0_1 = (v0_1 * 0.14999999999999999);
                int64_t x9_39 = temp0_2;
                int64_t x24_5 = temp0_1;
                int64_t x23_4 = vcvt_s64_f64(v1_1);
                int64_t x27_2 = vcvt_s64_f64(v0_1);
                int64_t* x28_1 = (&s_5 | 4);
                void* var_348_1;
                do
                {
                    if (x23_4 > x27_2)
                    {
                        int64_t x21_7 = x24_5;
                        int64_t x26_3 = x23_4;
                        do
                        {
                            int64_t* x9_41 = *(arg1 + 0x810);
                            void* x10_26 = *(arg1 + 0x7d8);
                            int64_t x8_52 = x26_3;
                            if (*((x10_26 + (*x9_41 * x21_7)) + x8_52) == 0)
                            {
                                x28_1[1] = 0;
                                *x28_1 = 0;
                                s_5 = x21_7;
                                int64_t x9_42 = *x9_41;
                                int64_t x12_10 = (x21_7 + 1);
                                int64_t x11_22 = (x8_52 + (x21_7 * x9_42));
                                char* x13_9 = (x10_26 + x11_22);
                                while (*x13_9 == 0)
                                {
                                    x12_10 = (x12_10 - 1);
                                    x13_9 = &x13_9[-(x9_42)];
                                    if (x12_10 < 1)
                                    {
                                        break;
                                    }
                                }
                                int32_t x12_12;
                                if ((x12_10 - 1) > temp0_1)
                                {
                                    x12_12 = (x12_10 - 1);
                                }
                                else
                                {
                                    x12_12 = -1;
                                }
                                void* x11_23 = (x10_26 + x11_22);
                                int64_t x10_27 = x21_7;
                                *s_5[4] = x12_12;
                                while (*x11_23 == 0)
                                {
                                    x10_27 = (x10_27 + 1);
                                    x11_23 = (x11_23 + x9_42);
                                    if (x10_27 >= *(arg1 + 0x7d0))
                                    {
                                        break;
                                    }
                                }
                                int32_t x9_43;
                                if (x10_27 < (x9_39 - 3))
                                {
                                    x9_43 = x10_27;
                                }
                                else
                                {
                                    x9_43 = -1;
                                }
                                s_6 = x9_43;
                                *s_6[4] = x8_52;
                                if (((x12_12 & 0x80000000) == 0 && (x9_43 & 0x80000000) == 0))
                                {
                                    int32_t* x8_53 = var_348_1;
                                    int64_t var_340;
                                    if (x8_53 == var_340)
                                    {
                                        x1_3 = std::__ndk1::vector<cv::Vec<int32_t, 4>, std::__ndk1::allocator<cv::Vec<int32_t, 4> > >::__push_back_slow_path<cv::Vec<int32_t, 4> const&>(&s);
                                    }
                                    else
                                    {
                                        *x8_53 = x21_7;
                                        x8_53[1] = *s_5[4];
                                        x8_53[2] = s_6;
                                        x8_53[3] = *s_6[4];
                                        var_348_1 = &x8_53[4];
                                    }
                                }
                            }
                            x26_3 = (x26_3 - 1);
                        } while (x26_3 > x27_2);
                    }
                    x24_5 = (x24_5 + 1);
                } while (x24_5 < x9_39);
                cv::Mat* s_19 = s;
                x21_6 = &var_1f0;
                if (var_348_1 != s_19)
                {
                    int64_t i_2 = 0;
                    do
                    {
                        void* x8_55 = (s_19 + (i_2 << 4));
                        int64_t x10_29 = *(arg1 + 0x838);
                        int64_t x25_4 = *(x8_55 + 8);
                        int64_t x28_2 = *(x8_55 + 0xc);
                        int64_t x9_50 = **(arg1 + 0x870);
                        int64_t x27_3 = *x8_55;
                        int64_t x23_5 = *(x8_55 + 4);
                        int64_t x8_56 = (x28_2 << 4);
                        int32_t* x13_12 = ((x10_29 + (x9_50 * x27_3)) + x8_56);
                        int32_t* x14_8 = ((x10_29 + (x9_50 * x23_5)) + x8_56);
                        int32_t* x12_16 = ((x10_29 + (x9_50 * x25_4)) + x8_56);
                        v1_1 = x13_12[2];
                        v0_1 = x14_8[2];
                        v2_2 = x12_16[2];
                        int32_t x11_25 = *x13_12;
                        float x10_30 = x13_12[1];
                        int32_t x9_52 = *x14_8;
                        float x8_57 = x14_8[1];
                        /* unimplemented  {fabd s3, s1, s0} */;
                        /* unimplemented  {fabd s4, s1, s2} */;
                        /* unimplemented  {fabd s5, s0, s2} */;
                        int32_t x13_13;
                        if (v3_3 <= v4_2)
                        {
                            x13_13 = 1;
                        }
                        else
                        {
                            x13_13 = 0;
                        }
                        int32_t x14_9;
                        if (v3_3 <= v5_2)
                        {
                            x14_9 = 1;
                        }
                        else
                        {
                            x14_9 = 0;
                        }
                        bool v_1;
                        bool z_1;
                        bool n_1;
                        if (v4_2 > v5_2)
                        {
                            (v4_2 - v3_3);
                            v_1 = /* v_1 = unimplemented  {fccmp s4, s3, #0x4, gt} */;
                            z_1 = v4_2 == v3_3;
                            n_1 = /* n_1 = unimplemented  {fccmp s4, s3, #0x4, gt} */;
                        }
                        else
                        {
                            n_1 = false;
                            z_1 = true;
                            v_1 = false;
                        }
                        int32_t x13_16;
                        if ((z_1 || n_1 != v_1))
                        {
                            x13_16 = ((((x14_9 | x13_13) & 1) << 0x1f) >> 0x1f);
                        }
                        else
                        {
                            x13_16 = 1;
                        }
                        int32_t x14_10;
                        if (v5_2 > v3_3)
                        {
                            x14_10 = 1;
                        }
                        else
                        {
                            x14_10 = 0;
                        }
                        int32_t x15_6;
                        if (v5_2 > v4_2)
                        {
                            x15_6 = 1;
                        }
                        else
                        {
                            x15_6 = 0;
                        }
                        int32_t x16_3;
                        if ((x14_10 & x15_6) != 0)
                        {
                            x16_3 = 2;
                        }
                        else
                        {
                            x16_3 = x13_16;
                        }
                        int32_t v6_2;
                        if (x16_3 == 0)
                        {
                            v5_2 = x11_25;
                            v6_2 = x10_30;
                            v3_3 = x9_52;
                            v4_2 = x8_57;
                        }
                        else
                        {
                            int32_t x13_17 = *x12_16;
                            int32_t x12_17 = x12_16[1];
                            if (x16_3 == 1)
                            {
                                v3_3 = x13_17;
                                v4_2 = x12_17;
                                if ((x14_10 & x15_6) == 0)
                                {
                                    v5_2 = x11_25;
                                    v6_2 = x10_30;
                                }
                            }
                            else
                            {
                                v4_2 = 0f;
                                v3_3 = 0f;
                                v7_2 = 0f;
                                v5_2 = 0f;
                                v6_2 = 0f;
                                v1_1 = 0f;
                            }
                            if (x16_3 == 2)
                            {
                                v3_3 = x13_17;
                                v4_2 = x12_17;
                            }
                            if ((x16_3 == 2 || (x16_3 == 1 && (x14_10 & x15_6) != 0)))
                            {
                                v5_2 = x9_52;
                                v6_2 = x8_57;
                            }
                        }
                        /* unimplemented  {fabd s13, s1, s7} */;
                        v0_1 = (v5_2 - v3_3);
                        v1_1 = (v6_2 - v4_2);
                        v0_1 = (v0_1 * v0_1);
                        v1_1 = (v1_1 * v1_1);
                        v0_1 = (v0_1 + v1_1);
                        /* unimplemented  {fsqrt s0, s0} */;
                        v0_1 = v0_1;
                        v0_1 = (v0_1 + 9.9999999999999995e-08);
                        v0_1 = v0_1;
                        v0_1 = (arg2 / v0_1);
                        x1_3 = atanf(v0_1);
                        if (!(arg2 > 35f))
                        {
                            v0_1 = v0_1;
                            v0_1 = (v0_1 * 57.299999999999997);
                            v0_1 = v0_1;
                        }
                        if ((arg2 > 35f || (!(arg2 > 35f) && !(v0_1 <= 8f))))
                        {
                            int32_t x20_5 = *(arg1 + 0x7d4);
                            int128_t var_360 = var_280;
                            int128_t* var_370;
                            Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(&var_370, var_268, var_268);
                            int128_t v0_8;
                            int128_t v1_4;
                            v0_8 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(&var_370, var_268);
                            int64_t var_368;
                            int64_t x9_54;
                            if (var_368 < 0)
                            {
                                x9_54 = (var_368 + 3);
                            }
                            else
                            {
                                x9_54 = var_368;
                            }
                            int64_t x9_55 = (x9_54 & 0xfffffffffffffffc);
                            if (var_368 >= 4)
                            {
                                int64_t x10_31 = 0;
                                int64_t x11_26 = 0;
                                do
                                {
                                    x11_26 = (x11_26 + 4);
                                    *(var_370 + x10_31) = *(var_270 + x10_31);
                                    x10_31 = (x10_31 + 0x10);
                                } while (x11_26 < x9_55);
                            }
                            int64_t x12_19 = (var_368 - x9_55);
                            if (var_368 > x9_55)
                            {
                                int128_t* x10_32 = var_270;
                                int128_t* x11_27 = var_370;
                                if (x12_19 >= 8)
                                {
                                    int64_t x14_12 = (x9_55 << 2);
                                    int64_t x13_19 = (var_368 << 2);
                                    void* x15_7 = (x11_27 + x14_12);
                                    void* x14_13 = (x10_32 + x14_12);
                                    if ((x15_7 < (x10_32 + x13_19) && x14_13 < (x11_27 + x13_19)))
                                    {
                                        goto label_395c4;
                                    }
                                    int64_t j_25 = (x12_19 & 0xfffffffffffffff8);
                                    void* x14_14 = (x14_13 + 0x10);
                                    x9_55 = (x9_55 + j_25);
                                    void* x15_8 = (x15_7 + 0x10);
                                    int64_t j_19 = j_25;
                                    int64_t j_5;
                                    do
                                    {
                                        v0_8 = *(x14_14 - 0x10);
                                        v1_4 = *x14_14;
                                        x14_14 = (x14_14 + 0x20);
                                        j_5 = j_19;
                                        j_19 = (j_19 - 8);
                                        *(x15_8 - 0x10) = v0_8;
                                        *x15_8 = v1_4;
                                        x15_8 = (x15_8 + 0x20);
                                    } while (j_5 != 8);
                                    if (x12_19 != j_25)
                                    {
                                        goto label_395c4;
                                    }
                                }
                                else
                                {
                                label_395c4:
                                    int64_t x12_20 = (x9_55 << 2);
                                    int64_t j_13 = (var_368 - x9_55);
                                    void* x9_56 = (x11_27 + x12_20);
                                    void* x10_33 = (x10_32 + x12_20);
                                    int64_t j_6;
                                    do
                                    {
                                        int32_t x11_28 = *x10_33;
                                        x10_33 = (x10_33 + 4);
                                        j_6 = j_13;
                                        j_13 = (j_13 - 1);
                                        *x9_56 = x11_28;
                                        x9_56 = (x9_56 + 4);
                                    } while (j_6 != 1);
                                }
                            }
                            feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(arg1, &var_360, &var_370, (x28_2 + (x20_5 * x23_5)), var_3c0, 1, v8);
                            int128_t* x0_41 = var_370;
                            void* s_24 = s_5;
                            __builtin_memset(&s_5, 0, 0x18);
                            free(x0_41);
                            char var_248;
                            if (var_248 != 0)
                            {
                                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >((arg1 + 0x970), *(arg1 + 0x978), s_24);
                            }
                            if (s_24 != 0)
                            {
                                operator delete(s_24);
                            }
                            int32_t x20_7 = *(arg1 + 0x7d4);
                            int128_t var_380 = var_280;
                            int128_t* var_390;
                            Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(&var_390, var_268, var_268);
                            int128_t v0_11;
                            int128_t v1_5;
                            v0_11 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(&var_390, var_268);
                            int64_t var_388;
                            int64_t x9_58;
                            if (var_388 < 0)
                            {
                                x9_58 = (var_388 + 3);
                            }
                            else
                            {
                                x9_58 = var_388;
                            }
                            int64_t x9_59 = (x9_58 & 0xfffffffffffffffc);
                            if (var_388 >= 4)
                            {
                                int64_t x10_34 = 0;
                                int64_t x11_29 = 0;
                                do
                                {
                                    x11_29 = (x11_29 + 4);
                                    *(var_390 + x10_34) = *(var_270 + x10_34);
                                    x10_34 = (x10_34 + 0x10);
                                } while (x11_29 < x9_59);
                            }
                            int64_t x12_22 = (var_388 - x9_59);
                            if (var_388 > x9_59)
                            {
                                int128_t* x10_35 = var_270;
                                int128_t* x11_30 = var_390;
                                if (x12_22 >= 8)
                                {
                                    int64_t x14_15 = (x9_59 << 2);
                                    int64_t x13_22 = (var_388 << 2);
                                    void* x15_9 = (x11_30 + x14_15);
                                    void* x14_16 = (x10_35 + x14_15);
                                    if ((x15_9 < (x10_35 + x13_22) && x14_16 < (x11_30 + x13_22)))
                                    {
                                        goto label_39730;
                                    }
                                    int64_t j_26 = (x12_22 & 0xfffffffffffffff8);
                                    void* x14_17 = (x14_16 + 0x10);
                                    x9_59 = (x9_59 + j_26);
                                    void* x15_10 = (x15_9 + 0x10);
                                    int64_t j_20 = j_26;
                                    int64_t j_7;
                                    do
                                    {
                                        v0_11 = *(x14_17 - 0x10);
                                        v1_5 = *x14_17;
                                        x14_17 = (x14_17 + 0x20);
                                        j_7 = j_20;
                                        j_20 = (j_20 - 8);
                                        *(x15_10 - 0x10) = v0_11;
                                        *x15_10 = v1_5;
                                        x15_10 = (x15_10 + 0x20);
                                    } while (j_7 != 8);
                                    if (x12_22 != j_26)
                                    {
                                        goto label_39730;
                                    }
                                }
                                else
                                {
                                label_39730:
                                    int64_t x12_23 = (x9_59 << 2);
                                    int64_t j_14 = (var_388 - x9_59);
                                    void* x9_60 = (x11_30 + x12_23);
                                    void* x10_36 = (x10_35 + x12_23);
                                    int64_t j_8;
                                    do
                                    {
                                        int32_t x11_31 = *x10_36;
                                        x10_36 = (x10_36 + 4);
                                        j_8 = j_14;
                                        j_14 = (j_14 - 1);
                                        *x9_60 = x11_31;
                                        x9_60 = (x9_60 + 4);
                                    } while (j_8 != 1);
                                }
                            }
                            feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(arg1, &var_380, &var_390, (x28_2 + (x20_7 * x27_3)), var_3c0, 1, v8);
                            int128_t* x0_47 = var_390;
                            void* s_25 = s_5;
                            __builtin_memset(&s_5, 0, 0x18);
                            free(x0_47);
                            if (var_248 != 0)
                            {
                                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >((arg1 + 0x970), *(arg1 + 0x978), s_25);
                            }
                            if (s_25 != 0)
                            {
                                operator delete(s_25);
                            }
                            int32_t x20_9 = *(arg1 + 0x7d4);
                            int128_t var_3a0 = var_280;
                            int128_t* var_3b0;
                            Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(&var_3b0, var_268, var_268);
                            int128_t v0_14;
                            int128_t v1_6;
                            v0_14 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(&var_3b0, var_268);
                            int64_t var_3a8;
                            int64_t x9_62;
                            if (var_3a8 < 0)
                            {
                                x9_62 = (var_3a8 + 3);
                            }
                            else
                            {
                                x9_62 = var_3a8;
                            }
                            int64_t x9_63 = (x9_62 & 0xfffffffffffffffc);
                            if (var_3a8 >= 4)
                            {
                                int64_t x10_37 = 0;
                                int64_t x11_32 = 0;
                                do
                                {
                                    x11_32 = (x11_32 + 4);
                                    *(var_3b0 + x10_37) = *(var_270 + x10_37);
                                    x10_37 = (x10_37 + 0x10);
                                } while (x11_32 < x9_63);
                            }
                            int64_t x12_25 = (var_3a8 - x9_63);
                            if (var_3a8 > x9_63)
                            {
                                int128_t* x10_38 = var_270;
                                int128_t* x11_33 = var_3b0;
                                if (x12_25 >= 8)
                                {
                                    int64_t x14_18 = (x9_63 << 2);
                                    int64_t x13_25 = (var_3a8 << 2);
                                    void* x15_11 = (x11_33 + x14_18);
                                    void* x14_19 = (x10_38 + x14_18);
                                    if ((x15_11 < (x10_38 + x13_25) && x14_19 < (x11_33 + x13_25)))
                                    {
                                        goto label_3989c;
                                    }
                                    int64_t j_27 = (x12_25 & 0xfffffffffffffff8);
                                    void* x14_20 = (x14_19 + 0x10);
                                    x9_63 = (x9_63 + j_27);
                                    void* x15_12 = (x15_11 + 0x10);
                                    int64_t j_21 = j_27;
                                    int64_t j_9;
                                    do
                                    {
                                        v0_14 = *(x14_20 - 0x10);
                                        v1_6 = *x14_20;
                                        x14_20 = (x14_20 + 0x20);
                                        j_9 = j_21;
                                        j_21 = (j_21 - 8);
                                        *(x15_12 - 0x10) = v0_14;
                                        *x15_12 = v1_6;
                                        x15_12 = (x15_12 + 0x20);
                                    } while (j_9 != 8);
                                    if (x12_25 != j_27)
                                    {
                                        goto label_3989c;
                                    }
                                }
                                else
                                {
                                label_3989c:
                                    int64_t x12_26 = (x9_63 << 2);
                                    int64_t j_15 = (var_3a8 - x9_63);
                                    void* x9_64 = (x11_33 + x12_26);
                                    void* x10_39 = (x10_38 + x12_26);
                                    int64_t j_10;
                                    do
                                    {
                                        int32_t x11_34 = *x10_39;
                                        x10_39 = (x10_39 + 4);
                                        j_10 = j_15;
                                        j_15 = (j_15 - 1);
                                        *x9_64 = x11_34;
                                        x9_64 = (x9_64 + 4);
                                    } while (j_10 != 1);
                                }
                            }
                            feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(arg1, &var_3a0, &var_3b0, (x28_2 + (x20_9 * x25_4)), var_3c0, 1, v8);
                            int128_t* x0_53 = var_3b0;
                            void* s_26 = s_5;
                            __builtin_memset(&s_5, 0, 0x18);
                            x1_3 = free(x0_53);
                            if (var_248 != 0)
                            {
                                x1_3 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >((arg1 + 0x970), *(arg1 + 0x978), s_26);
                            }
                            if (s_26 != 0)
                            {
                                x1_3 = operator delete(s_26);
                            }
                        }
                        s_19 = s;
                        i_2 = (i_2 + 1);
                    } while (i_2 < ((var_348_1 - s_19) >> 4));
                }
            }
            feasibal_region::ground_process::processSlopeBasePlane(arg1, x1_3, &var_280, &s_1, &var_2d0, &var_2e8, &s_2, x7_1);
            cv::Mat* s_12 = s;
            if (s_12 != 0)
            {
                cv::Mat* s_28 = s_12;
                operator delete(s_12);
            }
            int128_t var_210;
            int64_t x8_61 = *var_210[8];
            if (x8_61 != 0)
            {
                int32_t temp0_5;
                int32_t i_3;
                do
                {
                    temp0_5 = __ldaxr((x8_61 + 0x14));
                    i_3 = __stlxr((temp0_5 - 1), (x8_61 + 0x14));
                } while (i_3 != 0);
                if (temp0_5 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int32_t x8_63 = *s_7[4];
            *var_210[8] = 0;
            int128_t s_8;
            __builtin_memset(&s_8, 0, 0x20);
            if (x8_63 >= 1)
            {
                int64_t i_4 = 0;
                do
                {
                    var_200_1[i_4] = 0;
                    i_4 = (i_4 + 1);
                } while (i_4 < *s_7[4]);
            }
            if (var_1f8_1 != x21_6)
            {
                cv::fastFree(var_1f8_1);
            }
            int32_t* s_13 = s_1;
            if (s_13 != 0)
            {
                int32_t* s_29 = s_13;
                operator delete(s_13);
            }
            void* s_14 = s_2;
            if (s_14 != 0)
            {
                void* s_30 = s_14;
                operator delete(s_14);
            }
            void* x0_58 = var_2e8;
            if (x0_58 != 0)
            {
                operator delete(x0_58);
            }
            cv::Mat* x19_2 = var_2d0;
            if (x19_2 != 0)
            {
                int64_t* s_20 = s_3;
                cv::Mat* x0_60;
                if (s_20 == x19_2)
                {
                    x0_60 = x19_2;
                }
                else
                {
                    int64_t* s_35 = s_20;
                    do
                    {
                        s_35 = &s_35[-3];
                        void* x0_59 = *s_35;
                        if (x0_59 != 0)
                        {
                            s_20[-2] = x0_59;
                            operator delete(x0_59);
                        }
                        s_20 = s_35;
                    } while (x19_2 != s_35);
                    x0_60 = var_2d0;
                }
                cv::Mat* var_2c8 = x19_2;
                operator delete(x0_60);
            }
            x19_1 = 0;
            goto label_39a4c;
        }
        if (((((x0_9 & 1) == 0 && (s_4 & 1) == 0) || (x0_9 & 1) != 0) && (x21_2 & 1) != 0))
        {
        label_387e8:
            LogCapture::LogCapture(&s_7, "feasibal_region", &data_6fde8, &data_54bb5, &nullptr->ident.version);
            int128_t v0_2;
            v0_2 = v11;
            LogCapture::capturef();
            x1_3 = LogCapture::~LogCapture();
            if (x26_1 > 5)
            {
                goto label_3885c;
            }
            goto label_38834;
        }
    }
}

void sub_39abc(int64_t arg1, int64_t* arg2 @ x24, void* arg3, void* arg4, int64_t* arg5, int64_t* arg6, int64_t arg7, void* arg8) __noreturn
{
    void* x0 = *arg2;
    void* x0_1;
    if (x0 == 0)
    {
        x0_1 = arg8;
    }
    else
    {
        arg2[1] = x0;
        operator delete(x0);
        x0_1 = arg8;
    }
    void* x0_2;
    if (((x0 == 0 && x0_1 == 0) || (x0 != 0 && x0_1 == 0)))
    {
        x0_2 = arg3;
        if (x0_2 != 0)
        {
        label_39d34:
            arg_f8 = x0_2;
            operator delete(x0_2);
        }
    }
    if (((x0 == 0 && x0_1 != 0) || (x0 != 0 && x0_1 != 0)))
    {
        arg_198 = x0_1;
        operator delete(x0_1);
        x0_2 = arg3;
        if (x0_2 != 0)
        {
            goto label_39d34;
        }
    }
    if (arg4 != 0)
    {
        operator delete(arg4);
    }
    int64_t* x0_5;
    if (arg5 != 0)
    {
        int64_t* x8_1 = arg6;
        if (x8_1 == arg5)
        {
            goto label_39d98;
        }
        int64_t* x21_1 = x8_1;
        do
        {
            x21_1 = &x21_1[-3];
            void* x0_4 = *x21_1;
            if (x0_4 != 0)
            {
                x8_1[-2] = x0_4;
                operator delete(x0_4);
            }
            x8_1 = x21_1;
        } while (arg5 != x21_1);
        x0_5 = arg5;
        goto label_39d80;
    }
    while (true)
    {
        free(arg7);
        _Unwind_Resume(arg1);
    label_39d98:
        x0_5 = arg5;
    label_39d80:
        arg6 = arg5;
        operator delete(x0_5);
    }
}

void sub_39ad8(int64_t arg1, void* arg2, void* arg3, int64_t* arg4, int64_t* arg5, int64_t arg6) __noreturn
{
    if (arg2 != 0)
    {
        arg_f8 = arg2;
        operator delete(arg2);
    }
    if (arg3 != 0)
    {
        operator delete(arg3);
    }
    int64_t* x0_3;
    if (arg4 != 0)
    {
        int64_t* x8_1 = arg5;
        if (x8_1 == arg4)
        {
            goto label_39d98;
        }
        int64_t* x21_1 = x8_1;
        do
        {
            x21_1 = &x21_1[-3];
            void* x0_2 = *x21_1;
            if (x0_2 != 0)
            {
                x8_1[-2] = x0_2;
                operator delete(x0_2);
            }
            x8_1 = x21_1;
        } while (arg4 != x21_1);
        x0_3 = arg4;
        goto label_39d80;
    }
    while (true)
    {
        free(arg6);
        _Unwind_Resume(arg1);
    label_39d98:
        x0_3 = arg4;
    label_39d80:
        arg5 = arg4;
        operator delete(x0_3);
    }
}

void sub_39af8(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t sub_39c0c(int64_t arg1, int64_t arg2, void* arg3, void* arg4, int64_t* arg5, int64_t* arg6, int64_t arg7, int64_t arg8)
{
    free(arg2);
    if (arg8 != 0)
    {
        arg_198 = arg8;
        /* tailcall */
        return sub_39ce8(arg8);
    }
    if (arg3 != 0)
    {
        arg_f8 = arg3;
        operator delete(arg3);
    }
    if (arg4 != 0)
    {
        operator delete(arg4);
    }
    int64_t* x0_6;
    if (arg5 != 0)
    {
        int64_t* x8_2 = arg6;
        if (x8_2 == arg5)
        {
            goto label_39d98;
        }
        int64_t* x21_1 = x8_2;
        do
        {
            x21_1 = &x21_1[-3];
            void* x0_5 = *x21_1;
            if (x0_5 != 0)
            {
                x8_2[-2] = x0_5;
                operator delete(x0_5);
            }
            x8_2 = x21_1;
        } while (arg5 != x21_1);
        x0_6 = arg5;
        goto label_39d80;
    }
    while (true)
    {
        free(arg7);
        _Unwind_Resume(arg1);
    label_39d98:
        x0_6 = arg5;
    label_39d80:
        arg6 = arg5;
        operator delete(x0_6);
    }
}

void sub_39cd8(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void sub_39d08(int64_t arg1, int64_t arg2, void* arg3, void* arg4, int64_t* arg5, int64_t* arg6, int64_t arg7) __noreturn
{
    free(arg2);
    if (arg3 != 0)
    {
        arg_f8 = arg3;
        operator delete(arg3);
    }
    if (arg4 != 0)
    {
        operator delete(arg4);
    }
    int64_t* x0_4;
    if (arg5 != 0)
    {
        int64_t* x8_1 = arg6;
        if (x8_1 == arg5)
        {
            goto label_39d98;
        }
        int64_t* x21_1 = x8_1;
        do
        {
            x21_1 = &x21_1[-3];
            void* x0_3 = *x21_1;
            if (x0_3 != 0)
            {
                x8_1[-2] = x0_3;
                operator delete(x0_3);
            }
            x8_1 = x21_1;
        } while (arg5 != x21_1);
        x0_4 = arg5;
        goto label_39d80;
    }
    while (true)
    {
        free(arg7);
        _Unwind_Resume(arg1);
    label_39d98:
        x0_4 = arg5;
    label_39d80:
        arg6 = arg5;
        operator delete(x0_4);
    }
}

float feasibal_region::ground_process::getVectorAngle(int64_t arg1, int32_t* arg2, int32_t* arg3)
{
    float v0 = *arg2;
    double v1;
    v1 = arg2[1];
    float v3 = *arg3;
    float v4 = arg3[1];
    float v2 = arg2[2];
    float v5 = arg3[2];
    float v6 = (((v0 * v0) + (v1 * v1)) + (v2 * v2));
    float v7 = (((v3 * v3) + (v4 * v4)) + (v5 * v5));
    /* unimplemented  {fsqrt s6, s6} */;
    /* unimplemented  {fsqrt s7, s7} */;
    v1 = (v1 / v6);
    v1 = (v1 * (v4 / v7));
    v0 = ((((v0 / v6) * (v3 / v7)) + v1) + ((v2 / v6) * (v5 / v7)));
    /* unimplemented  {fabs s1, s0} */;
    v1 = (v1 + -1f);
    /* unimplemented  {fabs s1, s1} */;
    if (!(v1 >= 0.0001))
    {
        return 0f;
    }
    float v0_1 = acosf(v0);
    double v3_1 = v0_1;
    double v1_1;
    v1_1 = (3.1415926535897931 - v3_1);
    if (v3_1 > 1.5707963267948966)
    {
        v0_1 = v1_1;
    }
    /* unimplemented  {fabs s0, s0} */;
    return v0_1;
}

uint64_t feasibal_region::ground_process::getCellBelongPlaneCloudPoints(void* arg1, int32_t* arg2, int64_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7 @ v0, cv::Mat** arg8 @ x8)
{
    int64_t v9;
    int64_t var_70 = v9;
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    __builtin_memset(arg8, 0, 0x18);
    int64_t x8_2 = *(arg1 + 0x230);
    int64_t x28 = *(arg1 + 0x238);
    int32_t x22 = *arg2;
    int32_t x25 = arg2[1];
    int32_t x23 = arg2[2];
    int32_t x26 = arg2[3];
    uint64_t i_2;
    uint128_t v0;
    uint128_t v1;
    uint128_t v2;
    uint128_t v3;
    uint128_t v4;
    uint128_t v5;
    uint128_t v6;
    int128_t v16;
    int128_t v17;
    int128_t v18;
    int128_t v19;
    i_2 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(arg3, arg5);
    int64_t x9 = *(arg3 + 8);
    int32_t x8_3 = (arg5 * arg4);
    int64_t x24_1 = x8_3;
    int64_t x10 = (x9 & 0xfffffffffffffffc);
    int64_t x13 = (x28 << 1);
    if (x10 >= 1)
    {
        v0 = x22;
        v1 = x25;
        v2 = x23;
        v3 = x26;
        int64_t x11_1 = 0;
        int64_t x12_1 = 0;
        v0 = vdupq_laneq_s32(v0, 0);
        v1 = vdupq_laneq_s32(v1, 0);
        v2 = vdupq_laneq_s32(v2, 0);
        v3 = vdupq_laneq_s32(v3, 0);
        do
        {
            v4 = (v0 * *((x8_2 + (x8_3 << 2)) + x11_1));
            *v4[4] = (*v0[4] * *v4[4]);
            *v4[8] = (*v0[8] * *v4[8]);
            *v4[0xc] = (*v0[0xc] * *v4[0xc]);
            v5 = (v1 * *((x8_2 + ((x28 + x24_1) << 2)) + x11_1));
            *v5[4] = (*v1[4] * *v5[4]);
            *v5[8] = (*v1[8] * *v5[8]);
            *v5[0xc] = (*v1[0xc] * *v5[0xc]);
            v6 = (v2 * *((x8_2 + ((x13 + x24_1) << 2)) + x11_1));
            *v6[4] = (*v2[4] * *v6[4]);
            *v6[8] = (*v2[8] * *v6[8]);
            *v6[0xc] = (*v2[0xc] * *v6[0xc]);
            v4 = (v4 + v5);
            *v4[4] = (*v4[4] + *v5[4]);
            *v4[8] = (*v4[8] + *v5[8]);
            *v4[0xc] = (*v4[0xc] + *v5[0xc]);
            v4 = (v4 + v6);
            *v4[4] = (*v4[4] + *v6[4]);
            *v4[8] = (*v4[8] + *v6[8]);
            *v4[0xc] = (*v4[0xc] + *v6[0xc]);
            x12_1 = (x12_1 + 4);
            v4 = (v3 + v4);
            *v4[4] = (*v3[4] + *v4[4]);
            *v4[8] = (*v3[8] + *v4[8]);
            *v4[0xc] = (*v3[0xc] + *v4[0xc]);
            *(*arg3 + x11_1) = v4;
            x11_1 = (x11_1 + 0x10);
        } while (x12_1 < x10);
    }
    int64_t x12_2 = (x9 - x10);
    if (x9 > x10)
    {
        int64_t x11_2 = *arg3;
        v0 = x22;
        v1 = x25;
        v2 = x23;
        v3 = x26;
        if (x12_2 > 7)
        {
            int64_t x14_3 = (x11_2 + (x10 << 2));
            int64_t x16_3 = (x11_2 + (x9 << 2));
            int32_t x13_8;
            if (x14_3 < (x8_2 + (((x9 + x13) + x24_1) << 2)))
            {
                x13_8 = 1;
            }
            else
            {
                x13_8 = 0;
            }
            int32_t x15_6;
            if ((x8_2 + (((x10 + x13) + x24_1) << 2)) < x16_3)
            {
                x15_6 = 1;
            }
            else
            {
                x15_6 = 0;
            }
            i_2 = (x13_8 & x15_6);
            int32_t x13_9;
            if (x14_3 < (x8_2 + (((x28 + x9) + x24_1) << 2)))
            {
                x13_9 = 1;
            }
            else
            {
                x13_9 = 0;
            }
            int32_t x15_7;
            if ((x8_2 + (((x28 + x10) + x24_1) << 2)) < x16_3)
            {
                x15_7 = 1;
            }
            else
            {
                x15_7 = 0;
            }
            int32_t x14_4;
            if (x14_3 < (x8_2 + ((x9 + x24_1) << 2)))
            {
                x14_4 = 1;
            }
            else
            {
                x14_4 = 0;
            }
            int32_t x16_4;
            if ((x8_2 + ((x10 + x24_1) << 2)) < x16_3)
            {
                x16_4 = 1;
            }
            else
            {
                x16_4 = 0;
            }
            if ((i_2 & 1) != 0)
            {
                goto label_39fb0;
            }
            if (((x13_9 & x15_7) & 1) != 0)
            {
                goto label_39fb0;
            }
            if (((x14_4 & x16_4) & 1) != 0)
            {
                goto label_39fb0;
            }
            uint64_t i_4 = (x12_2 & 0xfffffffffffffff8);
            void* x17_5 = (x8_2 + ((x10 + x24_1) << 2));
            void* x14_6 = ((x11_2 + (x10 << 2)) + 0x10);
            void* x16_6 = (x8_2 + (((x28 + x10) + x24_1) << 2));
            v4 = vdupq_laneq_s32(v0, 0);
            v5 = vdupq_laneq_s32(v1, 0);
            v6 = vdupq_laneq_s32(v2, 0);
            uint128_t v7_1 = vdupq_laneq_s32(v3, 0);
            x10 = (x10 + i_4);
            void* x15_9 = (x17_5 + 0x10);
            void* x16_7 = (x16_6 + 0x10);
            i_2 = i_4;
            uint64_t i;
            do
            {
                void* x1_3 = (x15_9 + (x28 << 3));
                i = i_2;
                i_2 = (i_2 - 8);
                v16 = (*(x15_9 - 0x10) * v4);
                *v16[4] = (*v16[4] * *v4[4]);
                *v16[8] = (*v16[8] * *v4[8]);
                *v16[0xc] = (*v16[0xc] * *v4[0xc]);
                v18 = (*(x16_7 - 0x10) * v5);
                *v18[4] = (*v18[4] * *v5[4]);
                *v18[8] = (*v18[8] * *v5[8]);
                *v18[0xc] = (*v18[0xc] * *v5[0xc]);
                v17 = (*x15_9 * v4);
                *v17[4] = (*v17[4] * *v4[4]);
                *v17[8] = (*v17[8] * *v4[8]);
                *v17[0xc] = (*v17[0xc] * *v4[0xc]);
                v19 = (*x16_7 * v5);
                *v19[4] = (*v19[4] * *v5[4]);
                *v19[8] = (*v19[8] * *v5[8]);
                *v19[0xc] = (*v19[0xc] * *v5[0xc]);
                v16 = (v16 + v18);
                *v16[4] = (*v16[4] + *v18[4]);
                *v16[8] = (*v16[8] + *v18[8]);
                *v16[0xc] = (*v16[0xc] + *v18[0xc]);
                v17 = (v17 + v19);
                *v17[4] = (*v17[4] + *v19[4]);
                *v17[8] = (*v17[8] + *v19[8]);
                *v17[0xc] = (*v17[0xc] + *v19[0xc]);
                x15_9 = (x15_9 + 0x20);
                x16_7 = (x16_7 + 0x20);
                v18 = (*(x1_3 - 0x10) * v6);
                *v18[4] = (*v18[4] * *v6[4]);
                *v18[8] = (*v18[8] * *v6[8]);
                *v18[0xc] = (*v18[0xc] * *v6[0xc]);
                v19 = (*x1_3 * v6);
                *v19[4] = (*v19[4] * *v6[4]);
                *v19[8] = (*v19[8] * *v6[8]);
                *v19[0xc] = (*v19[0xc] * *v6[0xc]);
                v16 = (v16 + v18);
                *v16[4] = (*v16[4] + *v18[4]);
                *v16[8] = (*v16[8] + *v18[8]);
                *v16[0xc] = (*v16[0xc] + *v18[0xc]);
                v17 = (v17 + v19);
                *v17[4] = (*v17[4] + *v19[4]);
                *v17[8] = (*v17[8] + *v19[8]);
                *v17[0xc] = (*v17[0xc] + *v19[0xc]);
                v16 = (v16 + v7_1);
                *v16[4] = (*v16[4] + *v7_1[4]);
                *v16[8] = (*v16[8] + *v7_1[8]);
                *v16[0xc] = (*v16[0xc] + *v7_1[0xc]);
                v17 = (v17 + v7_1);
                *v17[4] = (*v17[4] + *v7_1[4]);
                *v17[8] = (*v17[8] + *v7_1[8]);
                *v17[0xc] = (*v17[0xc] + *v7_1[0xc]);
                *(x14_6 - 0x10) = v16;
                *x14_6 = v17;
                x14_6 = (x14_6 + 0x20);
            } while (i != 8);
            if (x12_2 != i_4)
            {
                goto label_39fb0;
            }
        }
        else
        {
        label_39fb0:
            int64_t i_3 = (x9 - x10);
            int32_t* x11_3 = (x11_2 + (x10 << 2));
            int32_t* x10_1 = (x8_2 + ((x10 + x24_1) << 2));
            int32_t* x13_3 = (x8_2 + (((x10 + x28) + x24_1) << 2));
            int64_t i_1;
            do
            {
                v4 = *x10_1;
                v5 = *x13_3;
                x13_3 = &x13_3[1];
                v6 = x10_1[(x28 * 2)];
                i_1 = i_3;
                i_3 = (i_3 - 1);
                v4 = (v4 * v0);
                v5 = (v5 * v1);
                v6 = (v6 * v2);
                v4 = (v4 + v5);
                v4 = (v4 + v6);
                v4 = (v4 + v3);
                *x11_3 = v4;
                x11_3 = &x11_3[1];
                x10_1 = &x10_1[1];
            } while (i_1 != 1);
        }
    }
    if (arg5 >= 1)
    {
        int64_t x22_1 = 0;
        do
        {
            v0 = *(*arg3 + (x22_1 << 2));
            v0 = (v0 * v0);
            if (!(v0 >= arg7))
            {
                int64_t x8_6 = *(arg1 + 0x230);
                int64_t x9_2 = *(arg1 + 0x238);
                int64_t x10_2 = (x8_6 + (x24_1 << 2));
                v0 = *((x10_2 + (x9_2 << 3)) + (x22_1 << 2));
                /* unimplemented  {fabs s1, s0} */;
                v1 = v1;
                if (!(v1 < 0.0001))
                {
                    int32_t x11_5 = *(x10_2 + (x22_1 << 2));
                    int32_t* x10_3 = arg8[1];
                    int32_t var_88_1 = x11_5;
                    int32_t x8_7 = *(x8_6 + (((x24_1 + x22_1) + x9_2) << 2));
                    if (x10_3 == arg8[2])
                    {
                        i_2 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(arg8);
                    }
                    else
                    {
                        *x10_3 = x11_5;
                        x10_3[1] = x8_7;
                        x10_3[2] = v0;
                        arg8[1] = &x10_3[3];
                    }
                }
            }
            x22_1 = (x22_1 + arg6);
        } while ((x24_1 + x22_1) < (x8_3 + arg5));
    }
    if (*(x8 + 0x28) != x8_1)
    {
        __stack_chk_fail();
        /* no return */
    }
    return i_2;
}

void* feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(void* arg1, int32_t* arg2, int64_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7, int32_t arg8 @ v0, int64_t* arg9 @ x8)
{
    int64_t v9;
    int64_t var_70 = v9;
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    cv::Mat* s;
    __builtin_memset(&s, 0, 0x18);
    int64_t x27 = *(arg1 + 0x230);
    void* x28 = *(arg1 + 0x238);
    int32_t x23 = *arg2;
    int32_t x26 = arg2[1];
    int32_t x19 = arg2[2];
    int32_t x20 = arg2[3];
    void* i_3;
    uint128_t v0;
    uint128_t v1;
    uint128_t v2;
    uint128_t v3;
    uint128_t v4;
    uint128_t v5;
    uint128_t v6;
    int128_t v16;
    int128_t v17;
    int128_t v18;
    int128_t v19;
    i_3 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(arg3, arg5);
    int64_t x9 = *(arg3 + 8);
    int32_t x8_2 = (arg5 * arg4);
    int64_t x25_1 = x8_2;
    int64_t x13 = (x28 << 1);
    void* x10 = (x9 & 0xfffffffffffffffc);
    if (x10 >= 1)
    {
        v0 = x23;
        v1 = x26;
        v2 = x19;
        v3 = x20;
        int64_t x11_1 = 0;
        int64_t x12_1 = 0;
        v0 = vdupq_laneq_s32(v0, 0);
        v1 = vdupq_laneq_s32(v1, 0);
        v2 = vdupq_laneq_s32(v2, 0);
        v3 = vdupq_laneq_s32(v3, 0);
        do
        {
            v4 = (v0 * *((x27 + (x8_2 << 2)) + x11_1));
            *v4[4] = (*v0[4] * *v4[4]);
            *v4[8] = (*v0[8] * *v4[8]);
            *v4[0xc] = (*v0[0xc] * *v4[0xc]);
            v5 = (v1 * *((x27 + ((x28 + x25_1) << 2)) + x11_1));
            *v5[4] = (*v1[4] * *v5[4]);
            *v5[8] = (*v1[8] * *v5[8]);
            *v5[0xc] = (*v1[0xc] * *v5[0xc]);
            v6 = (v2 * *((x27 + ((x13 + x25_1) << 2)) + x11_1));
            *v6[4] = (*v2[4] * *v6[4]);
            *v6[8] = (*v2[8] * *v6[8]);
            *v6[0xc] = (*v2[0xc] * *v6[0xc]);
            v4 = (v4 + v5);
            *v4[4] = (*v4[4] + *v5[4]);
            *v4[8] = (*v4[8] + *v5[8]);
            *v4[0xc] = (*v4[0xc] + *v5[0xc]);
            v4 = (v4 + v6);
            *v4[4] = (*v4[4] + *v6[4]);
            *v4[8] = (*v4[8] + *v6[8]);
            *v4[0xc] = (*v4[0xc] + *v6[0xc]);
            x12_1 = (x12_1 + 4);
            v4 = (v3 + v4);
            *v4[4] = (*v3[4] + *v4[4]);
            *v4[8] = (*v3[8] + *v4[8]);
            *v4[0xc] = (*v3[0xc] + *v4[0xc]);
            *(*arg3 + x11_1) = v4;
            x11_1 = (x11_1 + 0x10);
        } while (x12_1 < x10);
    }
    void* x12_2 = (x9 - x10);
    if (x9 > x10)
    {
        int64_t x11_2 = *arg3;
        v0 = x23;
        v1 = x26;
        v2 = x19;
        v3 = x20;
        if (x12_2 > 7)
        {
            int64_t x14_4 = (x11_2 + (x10 << 2));
            int64_t x16_3 = (x11_2 + (x9 << 2));
            int32_t x13_8;
            if (x14_4 < (x27 + (((x9 + x13) + x25_1) << 2)))
            {
                x13_8 = 1;
            }
            else
            {
                x13_8 = 0;
            }
            int32_t x15_6;
            if ((x27 + (((x10 + x13) + x25_1) << 2)) < x16_3)
            {
                x15_6 = 1;
            }
            else
            {
                x15_6 = 0;
            }
            i_3 = (x13_8 & x15_6);
            int32_t x13_9;
            if (x14_4 < (x27 + (((x28 + x9) + x25_1) << 2)))
            {
                x13_9 = 1;
            }
            else
            {
                x13_9 = 0;
            }
            int32_t x15_7;
            if ((x27 + (((x28 + x10) + x25_1) << 2)) < x16_3)
            {
                x15_7 = 1;
            }
            else
            {
                x15_7 = 0;
            }
            int32_t x14_5;
            if (x14_4 < (x27 + ((x9 + x25_1) << 2)))
            {
                x14_5 = 1;
            }
            else
            {
                x14_5 = 0;
            }
            int32_t x16_4;
            if ((x27 + ((x10 + x25_1) << 2)) < x16_3)
            {
                x16_4 = 1;
            }
            else
            {
                x16_4 = 0;
            }
            if ((i_3 & 1) != 0)
            {
                goto label_3a394;
            }
            if (((x13_9 & x15_7) & 1) != 0)
            {
                goto label_3a394;
            }
            if (((x14_5 & x16_4) & 1) != 0)
            {
                goto label_3a394;
            }
            void* i_8 = (x12_2 & 0xfffffffffffffff8);
            void* x17_5 = (x27 + ((x10 + x25_1) << 2));
            void* x14_7 = ((x11_2 + (x10 << 2)) + 0x10);
            void* x16_6 = (x27 + (((x28 + x10) + x25_1) << 2));
            v4 = vdupq_laneq_s32(v0, 0);
            v5 = vdupq_laneq_s32(v1, 0);
            v6 = vdupq_laneq_s32(v2, 0);
            uint128_t v7_1 = vdupq_laneq_s32(v3, 0);
            x10 = (x10 + i_8);
            void* x15_9 = (x17_5 + 0x10);
            void* x16_7 = (x16_6 + 0x10);
            i_3 = i_8;
            void* i;
            do
            {
                void* x1_3 = (x15_9 + (x28 << 3));
                i = i_3;
                i_3 = (i_3 - 8);
                v16 = (*(x15_9 - 0x10) * v4);
                *v16[4] = (*v16[4] * *v4[4]);
                *v16[8] = (*v16[8] * *v4[8]);
                *v16[0xc] = (*v16[0xc] * *v4[0xc]);
                v18 = (*(x16_7 - 0x10) * v5);
                *v18[4] = (*v18[4] * *v5[4]);
                *v18[8] = (*v18[8] * *v5[8]);
                *v18[0xc] = (*v18[0xc] * *v5[0xc]);
                v17 = (*x15_9 * v4);
                *v17[4] = (*v17[4] * *v4[4]);
                *v17[8] = (*v17[8] * *v4[8]);
                *v17[0xc] = (*v17[0xc] * *v4[0xc]);
                v19 = (*x16_7 * v5);
                *v19[4] = (*v19[4] * *v5[4]);
                *v19[8] = (*v19[8] * *v5[8]);
                *v19[0xc] = (*v19[0xc] * *v5[0xc]);
                v16 = (v16 + v18);
                *v16[4] = (*v16[4] + *v18[4]);
                *v16[8] = (*v16[8] + *v18[8]);
                *v16[0xc] = (*v16[0xc] + *v18[0xc]);
                v17 = (v17 + v19);
                *v17[4] = (*v17[4] + *v19[4]);
                *v17[8] = (*v17[8] + *v19[8]);
                *v17[0xc] = (*v17[0xc] + *v19[0xc]);
                x15_9 = (x15_9 + 0x20);
                x16_7 = (x16_7 + 0x20);
                v18 = (*(x1_3 - 0x10) * v6);
                *v18[4] = (*v18[4] * *v6[4]);
                *v18[8] = (*v18[8] * *v6[8]);
                *v18[0xc] = (*v18[0xc] * *v6[0xc]);
                v19 = (*x1_3 * v6);
                *v19[4] = (*v19[4] * *v6[4]);
                *v19[8] = (*v19[8] * *v6[8]);
                *v19[0xc] = (*v19[0xc] * *v6[0xc]);
                v16 = (v16 + v18);
                *v16[4] = (*v16[4] + *v18[4]);
                *v16[8] = (*v16[8] + *v18[8]);
                *v16[0xc] = (*v16[0xc] + *v18[0xc]);
                v17 = (v17 + v19);
                *v17[4] = (*v17[4] + *v19[4]);
                *v17[8] = (*v17[8] + *v19[8]);
                *v17[0xc] = (*v17[0xc] + *v19[0xc]);
                v16 = (v16 + v7_1);
                *v16[4] = (*v16[4] + *v7_1[4]);
                *v16[8] = (*v16[8] + *v7_1[8]);
                *v16[0xc] = (*v16[0xc] + *v7_1[0xc]);
                v17 = (v17 + v7_1);
                *v17[4] = (*v17[4] + *v7_1[4]);
                *v17[8] = (*v17[8] + *v7_1[8]);
                *v17[0xc] = (*v17[0xc] + *v7_1[0xc]);
                *(x14_7 - 0x10) = v16;
                *x14_7 = v17;
                x14_7 = (x14_7 + 0x20);
            } while (i != 8);
            if (x12_2 != i_8)
            {
                goto label_3a394;
            }
        }
        else
        {
        label_3a394:
            void* i_4 = (x9 - x10);
            int32_t* x11_3 = (x11_2 + (x10 << 2));
            int32_t* x10_1 = (x27 + ((x10 + x25_1) << 2));
            int32_t* x13_3 = (x27 + (((x10 + x28) + x25_1) << 2));
            void* i_1;
            do
            {
                v4 = *x10_1;
                v5 = *x13_3;
                x13_3 = &x13_3[1];
                v6 = x10_1[(x28 * 2)];
                i_1 = i_4;
                i_4 = (i_4 - 1);
                v4 = (v4 * v0);
                v5 = (v5 * v1);
                v6 = (v6 * v2);
                v4 = (v4 + v5);
                v4 = (v4 + v6);
                v4 = (v4 + v3);
                *x11_3 = v4;
                x11_3 = &x11_3[1];
                x10_1 = &x10_1[1];
            } while (i_1 != 1);
        }
    }
    void* var_98_1;
    int32_t x24_1;
    if (arg5 <= 0)
    {
        x24_1 = 1;
    }
    else
    {
        v1 = 0x3fee666666666666;
        v0 = arg8;
        v0 = (v0 * 0.94999999999999996);
        v0 = v0;
        int64_t x27_1 = 0;
        v9 = (v0 * v0);
        x24_1 = 1;
        do
        {
            v1 = *(*arg3 + (x27_1 << 2));
            v0 = (v1 * v1);
            if (!(v9 >= v0))
            {
                int64_t x8_5 = *(arg1 + 0x230);
                int64_t x9_1 = *(arg1 + 0x238);
                int64_t x10_2 = (x8_5 + (x25_1 << 2));
                v0 = *((x10_2 + (x9_1 << 3)) + (x27_1 << 2));
                /* unimplemented  {fabs s2, s0} */;
                v2 = v2;
                if (!(v2 < 0.0001))
                {
                    int32_t x11_6 = *(x10_2 + (x27_1 << 2));
                    int32_t* x10_3 = var_98_1;
                    int32_t var_88_1 = x11_6;
                    int32_t x8_6 = *(x8_5 + (((x25_1 + x27_1) + x9_1) << 2));
                    int32_t x14_3;
                    if (v1 < 0f)
                    {
                        x14_3 = 1;
                    }
                    else
                    {
                        x14_3 = 0;
                    }
                    if ((x14_3 & arg6) != 0)
                    {
                        x24_1 = 0;
                    }
                    int32_t var_80_1 = v0;
                    int64_t var_90;
                    if (x10_3 == var_90)
                    {
                        i_3 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(&s);
                    }
                    else
                    {
                        *x10_3 = x11_6;
                        x10_3[1] = x8_6;
                        x10_3[2] = var_80_1;
                        var_98_1 = &x10_3[3];
                    }
                }
            }
            x27_1 = (x27_1 + arg7);
        } while ((x25_1 + x27_1) < (x8_2 + arg5));
    }
    cv::Mat* s_2 = s;
    void* x21_1 = (var_98_1 - s_2);
    __builtin_memset(arg9, 0, 0x18);
    if (var_98_1 != s_2)
    {
        int64_t x19_2 = ((x21_1 >> 2) * -0x5555555555555555);
        if (x19_2 >= 0x1555555555555556)
        {
            int64_t x0_9 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* x8_20 = *arg9;
            cv::Mat* s_1;
            if (x8_20 != 0)
            {
                while (true)
                {
                    arg9[1] = x8_20;
                    operator delete(x8_20);
                    s_1 = s;
                    if (s_1 != 0)
                    {
                        break;
                    }
                label_3a7b8:
                    x8_20 = _Unwind_Resume(x0_9);
                }
            }
            else
            {
                s_1 = s;
                if (s_1 == 0)
                {
                    goto label_3a7b8;
                }
            }
            cv::Mat* s_4 = s_1;
            operator delete(s_1);
            uint64_t x0_13;
            int32_t* x1_4;
            int64_t x2_3;
            int32_t x3;
            int32_t x4;
            int32_t x5;
            cv::Mat** x8_21;
            int32_t v0_2;
            x0_13 = _Unwind_Resume(x0_9);
            /* tailcall */
            return feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(x0_13, x1_4, x2_3, x3, x4, x5, v0_2, x8_21);
        }
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_1;
        int128_t v3_1;
        int128_t v4_1;
        int128_t v5_1;
        i_3 = operator new(x21_1);
        *arg9 = i_3;
        arg9[1] = i_3;
        arg9[2] = (i_3 + (x19_2 * 0xc));
        if (s_2 != var_98_1)
        {
            uint64_t x8_14 = ((x21_1 - 0xc) / 0xc);
            int32_t* i_6;
            void* s_5;
            if (((x8_14 + 1) < 8 || (((x8_14 + 1) >= 8 && i_3 < (s_2 + (0xc + (x8_14 * 0xc)))) && (i_3 + (0xc + (x8_14 * 0xc))) > s_2)))
            {
                i_6 = i_3;
                s_5 = s_2;
            label_3a5b8:
                do
                {
                    *i_6 = *s_5;
                    i_6[1] = *(s_5 + 4);
                    int32_t x10_7 = *(s_5 + 8);
                    s_5 = (s_5 + 0xc);
                    i_6[2] = x10_7;
                    i_6 = &i_6[3];
                } while (s_5 != var_98_1);
            }
            if (((x8_14 + 1) >= 8 && (i_3 >= (s_2 + (0xc + (x8_14 * 0xc))) || (i_3 < (s_2 + (0xc + (x8_14 * 0xc))) && (i_3 + (0xc + (x8_14 * 0xc))) <= s_2))))
            {
                int64_t i_7 = ((x8_14 + 1) & 0x3ffffffffffffff8);
                int64_t x9_6 = (i_7 * 0xc);
                i_6 = (i_3 + x9_6);
                s_5 = (s_2 + x9_6);
                int64_t i_5 = i_7;
                cv::Mat* s_6 = s_2;
                int64_t i_2;
                do
                {
                    v1_1 = *(s_6 + 0x10);
                    v2_1 = *(s_6 + 0x20);
                    v3_1 = *(s_6 + 0x30);
                    v4_1 = *(s_6 + 0x40);
                    v5_1 = *(s_6 + 0x50);
                    i_2 = i_5;
                    i_5 = (i_5 - 8);
                    *i_3 = *s_6;
                    *(i_3 + 0x10) = v1_1;
                    *(i_3 + 0x20) = v2_1;
                    *(i_3 + 0x30) = v3_1;
                    *(i_3 + 0x40) = v4_1;
                    *(i_3 + 0x50) = v5_1;
                    i_3 = (i_3 + 0x60);
                    s_6 = (s_6 + 0x60);
                } while (i_2 != 8);
                if ((x8_14 + 1) != i_7)
                {
                    goto label_3a5b8;
                }
            }
            arg9[1] = i_6;
        }
    }
    arg9[3] = x24_1;
    if (s_2 != 0)
    {
        cv::Mat* s_3 = s_2;
        i_3 = operator delete(s_2);
    }
    if (*(x8 + 0x28) != x8_1)
    {
        __stack_chk_fail();
        /* no return */
    }
    return i_3;
}

int64_t sub_3a7d8(int64_t arg1, void* arg2, void* arg3)
{
    void* i = arg3;
    if (i == 0)
    {
        do
        {
            void* x8_2 = _Unwind_Resume(arg1);
            *(arg2 + 8) = x8_2;
            operator delete(x8_2);
            i = arg3;
        } while (i == 0);
    }
    i_1 = i;
    operator delete(i);
    uint64_t x0_1;
    int32_t* x1;
    int64_t x2;
    int32_t x3;
    int32_t x4;
    int32_t x5;
    cv::Mat** x8_1;
    int32_t v0;
    x0_1 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(x0_1, x1, x2, x3, x4, x5, v0, x8_1);
}

uint64_t feasibal_region::ground_process::getCellNotBelongPlaneCloudPoints(void* arg1, int32_t* arg2, int64_t arg3, int32_t arg4, int32_t arg5, int32_t arg6, int32_t arg7 @ v0, cv::Mat** arg8 @ x8)
{
    int64_t v9;
    int64_t var_70 = v9;
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    __builtin_memset(arg8, 0, 0x18);
    int64_t x8_2 = *(arg1 + 0x230);
    int64_t x28 = *(arg1 + 0x238);
    int32_t x22 = *arg2;
    int32_t x25 = arg2[1];
    int32_t x23 = arg2[2];
    int32_t x26 = arg2[3];
    uint64_t i_2;
    uint128_t v0;
    uint128_t v1;
    uint128_t v2;
    uint128_t v3;
    uint128_t v4;
    uint128_t v5;
    uint128_t v6;
    int128_t v16;
    int128_t v17;
    int128_t v18;
    int128_t v19;
    i_2 = Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(arg3, arg5);
    int64_t x9 = *(arg3 + 8);
    int32_t x8_3 = (arg5 * arg4);
    int64_t x24_1 = x8_3;
    int64_t x10 = (x9 & 0xfffffffffffffffc);
    int64_t x13 = (x28 << 1);
    if (x10 >= 1)
    {
        v0 = x22;
        v1 = x25;
        v2 = x23;
        v3 = x26;
        int64_t x11_1 = 0;
        int64_t x12_1 = 0;
        v0 = vdupq_laneq_s32(v0, 0);
        v1 = vdupq_laneq_s32(v1, 0);
        v2 = vdupq_laneq_s32(v2, 0);
        v3 = vdupq_laneq_s32(v3, 0);
        do
        {
            v4 = (v0 * *((x8_2 + (x8_3 << 2)) + x11_1));
            *v4[4] = (*v0[4] * *v4[4]);
            *v4[8] = (*v0[8] * *v4[8]);
            *v4[0xc] = (*v0[0xc] * *v4[0xc]);
            v5 = (v1 * *((x8_2 + ((x28 + x24_1) << 2)) + x11_1));
            *v5[4] = (*v1[4] * *v5[4]);
            *v5[8] = (*v1[8] * *v5[8]);
            *v5[0xc] = (*v1[0xc] * *v5[0xc]);
            v6 = (v2 * *((x8_2 + ((x13 + x24_1) << 2)) + x11_1));
            *v6[4] = (*v2[4] * *v6[4]);
            *v6[8] = (*v2[8] * *v6[8]);
            *v6[0xc] = (*v2[0xc] * *v6[0xc]);
            v4 = (v4 + v5);
            *v4[4] = (*v4[4] + *v5[4]);
            *v4[8] = (*v4[8] + *v5[8]);
            *v4[0xc] = (*v4[0xc] + *v5[0xc]);
            v4 = (v4 + v6);
            *v4[4] = (*v4[4] + *v6[4]);
            *v4[8] = (*v4[8] + *v6[8]);
            *v4[0xc] = (*v4[0xc] + *v6[0xc]);
            x12_1 = (x12_1 + 4);
            v4 = (v3 + v4);
            *v4[4] = (*v3[4] + *v4[4]);
            *v4[8] = (*v3[8] + *v4[8]);
            *v4[0xc] = (*v3[0xc] + *v4[0xc]);
            *(*arg3 + x11_1) = v4;
            x11_1 = (x11_1 + 0x10);
        } while (x12_1 < x10);
    }
    int64_t x12_2 = (x9 - x10);
    if (x9 > x10)
    {
        int64_t x11_2 = *arg3;
        v0 = x22;
        v1 = x25;
        v2 = x23;
        v3 = x26;
        if (x12_2 > 7)
        {
            int64_t x14_3 = (x11_2 + (x10 << 2));
            int64_t x16_3 = (x11_2 + (x9 << 2));
            int32_t x13_8;
            if (x14_3 < (x8_2 + (((x9 + x13) + x24_1) << 2)))
            {
                x13_8 = 1;
            }
            else
            {
                x13_8 = 0;
            }
            int32_t x15_6;
            if ((x8_2 + (((x10 + x13) + x24_1) << 2)) < x16_3)
            {
                x15_6 = 1;
            }
            else
            {
                x15_6 = 0;
            }
            i_2 = (x13_8 & x15_6);
            int32_t x13_9;
            if (x14_3 < (x8_2 + (((x28 + x9) + x24_1) << 2)))
            {
                x13_9 = 1;
            }
            else
            {
                x13_9 = 0;
            }
            int32_t x15_7;
            if ((x8_2 + (((x28 + x10) + x24_1) << 2)) < x16_3)
            {
                x15_7 = 1;
            }
            else
            {
                x15_7 = 0;
            }
            int32_t x14_4;
            if (x14_3 < (x8_2 + ((x9 + x24_1) << 2)))
            {
                x14_4 = 1;
            }
            else
            {
                x14_4 = 0;
            }
            int32_t x16_4;
            if ((x8_2 + ((x10 + x24_1) << 2)) < x16_3)
            {
                x16_4 = 1;
            }
            else
            {
                x16_4 = 0;
            }
            if ((i_2 & 1) != 0)
            {
                goto label_3a934;
            }
            if (((x13_9 & x15_7) & 1) != 0)
            {
                goto label_3a934;
            }
            if (((x14_4 & x16_4) & 1) != 0)
            {
                goto label_3a934;
            }
            uint64_t i_4 = (x12_2 & 0xfffffffffffffff8);
            void* x17_5 = (x8_2 + ((x10 + x24_1) << 2));
            void* x14_6 = ((x11_2 + (x10 << 2)) + 0x10);
            void* x16_6 = (x8_2 + (((x28 + x10) + x24_1) << 2));
            v4 = vdupq_laneq_s32(v0, 0);
            v5 = vdupq_laneq_s32(v1, 0);
            v6 = vdupq_laneq_s32(v2, 0);
            uint128_t v7_1 = vdupq_laneq_s32(v3, 0);
            x10 = (x10 + i_4);
            void* x15_9 = (x17_5 + 0x10);
            void* x16_7 = (x16_6 + 0x10);
            i_2 = i_4;
            uint64_t i;
            do
            {
                void* x1_3 = (x15_9 + (x28 << 3));
                i = i_2;
                i_2 = (i_2 - 8);
                v16 = (*(x15_9 - 0x10) * v4);
                *v16[4] = (*v16[4] * *v4[4]);
                *v16[8] = (*v16[8] * *v4[8]);
                *v16[0xc] = (*v16[0xc] * *v4[0xc]);
                v18 = (*(x16_7 - 0x10) * v5);
                *v18[4] = (*v18[4] * *v5[4]);
                *v18[8] = (*v18[8] * *v5[8]);
                *v18[0xc] = (*v18[0xc] * *v5[0xc]);
                v17 = (*x15_9 * v4);
                *v17[4] = (*v17[4] * *v4[4]);
                *v17[8] = (*v17[8] * *v4[8]);
                *v17[0xc] = (*v17[0xc] * *v4[0xc]);
                v19 = (*x16_7 * v5);
                *v19[4] = (*v19[4] * *v5[4]);
                *v19[8] = (*v19[8] * *v5[8]);
                *v19[0xc] = (*v19[0xc] * *v5[0xc]);
                v16 = (v16 + v18);
                *v16[4] = (*v16[4] + *v18[4]);
                *v16[8] = (*v16[8] + *v18[8]);
                *v16[0xc] = (*v16[0xc] + *v18[0xc]);
                v17 = (v17 + v19);
                *v17[4] = (*v17[4] + *v19[4]);
                *v17[8] = (*v17[8] + *v19[8]);
                *v17[0xc] = (*v17[0xc] + *v19[0xc]);
                x15_9 = (x15_9 + 0x20);
                x16_7 = (x16_7 + 0x20);
                v18 = (*(x1_3 - 0x10) * v6);
                *v18[4] = (*v18[4] * *v6[4]);
                *v18[8] = (*v18[8] * *v6[8]);
                *v18[0xc] = (*v18[0xc] * *v6[0xc]);
                v19 = (*x1_3 * v6);
                *v19[4] = (*v19[4] * *v6[4]);
                *v19[8] = (*v19[8] * *v6[8]);
                *v19[0xc] = (*v19[0xc] * *v6[0xc]);
                v16 = (v16 + v18);
                *v16[4] = (*v16[4] + *v18[4]);
                *v16[8] = (*v16[8] + *v18[8]);
                *v16[0xc] = (*v16[0xc] + *v18[0xc]);
                v17 = (v17 + v19);
                *v17[4] = (*v17[4] + *v19[4]);
                *v17[8] = (*v17[8] + *v19[8]);
                *v17[0xc] = (*v17[0xc] + *v19[0xc]);
                v16 = (v16 + v7_1);
                *v16[4] = (*v16[4] + *v7_1[4]);
                *v16[8] = (*v16[8] + *v7_1[8]);
                *v16[0xc] = (*v16[0xc] + *v7_1[0xc]);
                v17 = (v17 + v7_1);
                *v17[4] = (*v17[4] + *v7_1[4]);
                *v17[8] = (*v17[8] + *v7_1[8]);
                *v17[0xc] = (*v17[0xc] + *v7_1[0xc]);
                *(x14_6 - 0x10) = v16;
                *x14_6 = v17;
                x14_6 = (x14_6 + 0x20);
            } while (i != 8);
            if (x12_2 != i_4)
            {
                goto label_3a934;
            }
        }
        else
        {
        label_3a934:
            int64_t i_3 = (x9 - x10);
            int32_t* x11_3 = (x11_2 + (x10 << 2));
            int32_t* x10_1 = (x8_2 + ((x10 + x24_1) << 2));
            int32_t* x13_3 = (x8_2 + (((x10 + x28) + x24_1) << 2));
            int64_t i_1;
            do
            {
                v4 = *x10_1;
                v5 = *x13_3;
                x13_3 = &x13_3[1];
                v6 = x10_1[(x28 * 2)];
                i_1 = i_3;
                i_3 = (i_3 - 1);
                v4 = (v4 * v0);
                v5 = (v5 * v1);
                v6 = (v6 * v2);
                v4 = (v4 + v5);
                v4 = (v4 + v6);
                v4 = (v4 + v3);
                *x11_3 = v4;
                x11_3 = &x11_3[1];
                x10_1 = &x10_1[1];
            } while (i_1 != 1);
        }
    }
    if (arg5 >= 1)
    {
        v1 = 0x3fee666666666666;
        v0 = arg7;
        v0 = (v0 * 0.94999999999999996);
        v0 = v0;
        int64_t x22_1 = 0;
        v9 = (v0 * v0);
        do
        {
            v0 = *(*arg3 + (x22_1 << 2));
            v0 = (v0 * v0);
            if (!(v9 >= v0))
            {
                int64_t x8_6 = *(arg1 + 0x230);
                int64_t x9_1 = *(arg1 + 0x238);
                int64_t x10_3 = (x8_6 + (x24_1 << 2));
                v0 = *((x10_3 + (x9_1 << 3)) + (x22_1 << 2));
                /* unimplemented  {fabs s1, s0} */;
                v1 = v1;
                if (!(v1 < 0.0001))
                {
                    int32_t x11_5 = *(x10_3 + (x22_1 << 2));
                    int32_t* x10_4 = arg8[1];
                    int32_t var_88_1 = x11_5;
                    int32_t x8_7 = *(x8_6 + (((x24_1 + x22_1) + x9_1) << 2));
                    if (x10_4 == arg8[2])
                    {
                        i_2 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>(arg8);
                    }
                    else
                    {
                        *x10_4 = x11_5;
                        x10_4[1] = x8_7;
                        x10_4[2] = v0;
                        arg8[1] = &x10_4[3];
                    }
                }
            }
            x22_1 = (x22_1 + arg6);
        } while ((x24_1 + x22_1) < (x8_3 + arg5));
    }
    if (*(x8 + 0x28) != x8_1)
    {
        __stack_chk_fail();
        /* no return */
    }
    return i_2;
}

int64_t feasibal_region::ground_process::showPtOnImage(void* arg1)
{
    double v8;
    double var_70 = v8;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int32_t var_e8 = 0x42ff0000;
    int128_t s_9;
    __builtin_memset(&s_9, 0, 0x3c);
    void* var_a8 = &*s_9[4];
    int64_t var_98;
    int64_t* var_a0 = &var_98;
    var_98 = 0;
    int64_t var_90 = 0;
    int64_t var_2f8 = 0;
    int32_t var_308 = 0x2010000;
    int32_t* var_300 = &var_e8;
    cv::Mat::copyTo((arg1 + 0x8f0));
    int32_t var_148 = 0x42ff0000;
    int128_t s_8;
    __builtin_memset(&s_8, 0, 0x3c);
    void* var_108 = &*s_8[4];
    int64_t var_f8;
    int64_t* var_100 = &var_f8;
    int64_t var_f0 = 0;
    var_f8 = 0;
    var_308 = 0x300000003;
    cv::Mat::create(&var_148, &*nullptr->ident.signature[2], &var_308);
    double v0;
    v0 = *(arg1 + 0x64);
    double* x9 = *s_8[0xc];
    int64_t x8_2 = *var_100;
    *x9 = v0;
    v0 = *(arg1 + 0x70);
    void* x10 = (x9 + x8_2);
    void* x8_3 = (x9 + (x8_2 << 1));
    x9[1] = v0;
    v0 = *(arg1 + 0x7c);
    x9[2] = v0;
    v0 = *(arg1 + 0x68);
    *x10 = v0;
    v0 = *(arg1 + 0x74);
    *(x10 + 8) = v0;
    v0 = *(arg1 + 0x80);
    *(x10 + 0x10) = v0;
    v0 = *(arg1 + 0x6c);
    *x8_3 = v0;
    v0 = *(arg1 + 0x78);
    *(x8_3 + 8) = v0;
    v0 = *(arg1 + 0x84);
    *(x8_3 + 0x10) = v0;
    cv::Mat::eye(3, 3, 6);
    int64_t* x0_2 = var_308;
    int128_t v0_1;
    v0_1 = 0;
    *v0_1[8] = 0;
    int32_t var_1a8 = 0x42ff0000;
    int128_t s_6;
    __builtin_memset(&s_6, 0, 0x3c);
    void* var_168 = &*s_6[4];
    int64_t var_158;
    int64_t* var_160 = &var_158;
    int64_t var_150 = 0;
    var_158 = 0;
    *(*x0_2 + 0x18)(v0_1);
    cv::MatExpr::~MatExpr();
    cv::Mat::zeros(1, 3, 6);
    int64_t* x0_3 = var_308;
    int128_t v0_2;
    v0_2 = 0;
    *v0_2[8] = 0;
    int32_t var_368 = 0x42ff0000;
    int128_t s_4;
    __builtin_memset(&s_4, 0, 0x3c);
    void* var_328 = &*s_4[4];
    int64_t var_318;
    int64_t* var_320 = &var_318;
    var_318 = 0;
    int64_t var_310 = 0;
    *(*x0_3 + 0x18)(v0_2);
    cv::MatExpr::~MatExpr();
    void* s_1;
    __builtin_memset(&s_1, 0, 0x18);
    cv::Mat::zeros(5, 1, 6);
    int64_t* x0_4 = var_308;
    int128_t v0_3;
    v0_3 = 0;
    *v0_3[8] = 0;
    int32_t var_3c8 = 0x42ff0000;
    int128_t s_2;
    __builtin_memset(&s_2, 0, 0x3c);
    void* var_388 = &*s_2[4];
    int64_t var_378;
    int64_t* var_380 = &var_378;
    var_378 = 0;
    int64_t var_370 = 0;
    *(*x0_4 + 0x18)(v0_3);
    cv::MatExpr::~MatExpr();
    var_308 = 0x81030015;
    int32_t* var_3e8 = &var_1a8;
    int32_t* var_438 = &var_368;
    int32_t* var_450 = &var_148;
    int64_t var_2f8_1 = 0;
    int64_t x1;
    int64_t var_300_1 = x1;
    int64_t var_3e0 = 0;
    int32_t var_3f0 = 0x1010000;
    int64_t var_430 = 0;
    int32_t s = 0x1010000;
    int64_t var_448 = 0;
    int32_t var_458 = 0x1010000;
    int64_t var_460 = 0;
    int32_t var_470 = 0x1010000;
    int32_t* var_468 = &var_3c8;
    int32_t var_488 = 0x8203000d;
    int64_t* var_480 = &s_1;
    int64_t var_478 = 0;
    cv::projectPoints(&var_308, &var_3f0, &s, &var_458, &var_470, &var_488, cv::noArray(), 0.0);
    int64_t var_420;
    size_t x0_11;
    if (var_420 != s_1)
    {
        int64_t x28_1 = 0;
        int64_t i = 0;
        int128_t var_4c0;
        __builtin_memcpy(&var_4c0, "\x00\x00\x00\x00\x00\xe0\x6f\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xe0\x6f\x40", 0x20);
        do
        {
            sprintf();
            void* s_12 = s_1;
            int32_t* var_438_1 = &var_e8;
            int64_t var_430_1 = 0;
            s = 0x3010000;
            int32_t* x21_1 = (s_12 + x28_1);
            int32_t x0_7 = lrintf(*x21_1);
            int32_t x0_8;
            int128_t v0_7;
            x0_8 = lrintf(x21_1[1]);
            int32_t var_490 = x0_7;
            int32_t var_48c_1 = x0_8;
            int128_t var_4b0;
            var_3f0 = var_4b0;
            var_3e0 = var_4c0;
            cv::circle(&s, &var_490, 1, &var_3f0, 2, 8, 0);
            int32_t* var_3e8_1 = &var_e8;
            var_3e0 = 0;
            var_3f0 = 0x3010000;
            __builtin_memset(&s, 0, 0x18);
            x0_11 = strlen(&var_308);
            if (x0_11 < -0x10)
            {
                break;
            }
            void* var_430_2;
            char* x22_1;
            if (x0_11 >= 0x17)
            {
                uint64_t x23_1 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
                void* x0_13 = operator new(x23_1);
                x22_1 = x0_13;
                size_t var_438_2 = x0_11;
                var_430_2 = x0_13;
                s = (x23_1 | 1);
            }
            else
            {
                x22_1 = (&s | 1);
                s = (x0_11 << 1);
            }
            if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
            {
                memcpy(x22_1, &var_308, x0_11);
            }
            void* s_13 = s_1;
            x22_1[x0_11] = 0;
            void* x21_4 = (s_13 + x28_1);
            int32_t x0_15 = lrintf(*x21_4);
            int32_t x0_16;
            int128_t v0_10;
            x0_16 = lrintf(*(x21_4 + 4));
            int32_t var_498 = x0_15;
            int32_t var_494_1 = x0_16;
            int128_t var_410 = var_4b0;
            int64_t var_400_1 = 0;
            int64_t var_3f8_1 = 0;
            cv::putText(&var_3f0, &s, &var_498, 1, &var_410, 1, 8, false, 1.0);
            if ((s & 1) != 0)
            {
                operator delete(var_430_2);
            }
            i = (i + 1);
            x28_1 = (x28_1 + 8);
        } while (i < ((var_420 - s_1) >> 3));
        if (x0_11 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
    }
    if ((var_420 == s_1 || (var_420 != s_1 && x0_11 >= -0x10)))
    {
        var_308 = 0;
        int64_t var_300_2 = 0;
        var_3f0 = 0x1010000;
        var_308 = 0xe;
        void* var_2f8_2 = nullptr;
        int64_t var_3e0_1 = 0;
        __builtin_strcpy(&*var_308[1], "vis_img");
        int32_t* var_3e8_2 = &var_e8;
        cv::imshow(&var_308, &var_3f0);
        if ((var_308 & 1) != 0)
        {
            operator delete(var_2f8_2);
        }
        cv::waitKey(1);
        int128_t var_398;
        int64_t x8_19 = *var_398[8];
        if (x8_19 != 0)
        {
            int32_t temp0_1;
            int32_t i_1;
            do
            {
                temp0_1 = __ldaxr((x8_19 + 0x14));
                i_1 = __stlxr((temp0_1 - 1), (x8_19 + 0x14));
            } while (i_1 != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_398[8] = 0;
        int128_t s_3;
        __builtin_memset(&s_3, 0, 0x20);
        if (s_2 >= 1)
        {
            int64_t i_2 = 0;
            do
            {
                *(var_388 + (i_2 << 2)) = 0;
                i_2 = (i_2 + 1);
            } while (i_2 < s_2);
        }
        if (var_380 != &var_378)
        {
            cv::fastFree(var_380);
        }
        void* s_11 = s_1;
        if (s_11 != 0)
        {
            void* s_14 = s_11;
            operator delete(s_11);
        }
        int128_t var_338;
        int64_t x8_24 = *var_338[8];
        if (x8_24 != 0)
        {
            int32_t temp0_3;
            int32_t i_3;
            do
            {
                temp0_3 = __ldaxr((x8_24 + 0x14));
                i_3 = __stlxr((temp0_3 - 1), (x8_24 + 0x14));
            } while (i_3 != 0);
            if (temp0_3 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_338[8] = 0;
        int128_t s_5;
        __builtin_memset(&s_5, 0, 0x20);
        if (s_4 >= 1)
        {
            int64_t i_4 = 0;
            do
            {
                *(var_328 + (i_4 << 2)) = 0;
                i_4 = (i_4 + 1);
            } while (i_4 < s_4);
        }
        if (var_320 != &var_318)
        {
            cv::fastFree(var_320);
        }
        int128_t var_178;
        int64_t x8_29 = *var_178[8];
        if (x8_29 != 0)
        {
            int32_t temp0_4;
            int32_t i_5;
            do
            {
                temp0_4 = __ldaxr((x8_29 + 0x14));
                i_5 = __stlxr((temp0_4 - 1), (x8_29 + 0x14));
            } while (i_5 != 0);
            if (temp0_4 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_178[8] = 0;
        int128_t s_7;
        __builtin_memset(&s_7, 0, 0x20);
        if (s_6 >= 1)
        {
            int64_t i_6 = 0;
            do
            {
                *(var_168 + (i_6 << 2)) = 0;
                i_6 = (i_6 + 1);
            } while (i_6 < s_6);
        }
        if (var_160 != &var_158)
        {
            cv::fastFree(var_160);
        }
        int128_t var_118;
        int64_t x8_34 = *var_118[8];
        if (x8_34 != 0)
        {
            int32_t temp0_5;
            int32_t i_7;
            do
            {
                temp0_5 = __ldaxr((x8_34 + 0x14));
                i_7 = __stlxr((temp0_5 - 1), (x8_34 + 0x14));
            } while (i_7 != 0);
            if (temp0_5 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_118[8] = 0;
        __builtin_memset(&*s_8[0xc], 0, 0x20);
        if (s_8 >= 1)
        {
            int64_t i_8 = 0;
            do
            {
                *(var_108 + (i_8 << 2)) = 0;
                i_8 = (i_8 + 1);
            } while (i_8 < s_8);
        }
        if (var_100 != &var_f8)
        {
            cv::fastFree(var_100);
        }
        int128_t var_b8;
        int64_t x8_40 = *var_b8[8];
        if (x8_40 != 0)
        {
            int32_t temp0_6;
            int32_t i_9;
            do
            {
                temp0_6 = __ldaxr((x8_40 + 0x14));
                i_9 = __stlxr((temp0_6 - 1), (x8_40 + 0x14));
            } while (i_9 != 0);
            if (temp0_6 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_b8[8] = 0;
        bool cond:4_1 = s_9 < 1;
        int128_t s_10;
        __builtin_memset(&s_10, 0, 0x20);
        if (!(cond:4_1))
        {
            int64_t i_10 = 0;
            do
            {
                *(var_a8 + (i_10 << 2)) = 0;
                i_10 = (i_10 + 1);
            } while (i_10 < s_9);
        }
        if (var_a0 != &var_98)
        {
            cv::fastFree(var_a0);
        }
        if (*(x24 + 0x28) == x8)
        {
            return 0;
        }
    }
    __stack_chk_fail();
    /* no return */
}

uint32_t feasibal_region::get_neighbourhood_plane_idx(void* arg1, int32_t arg2, int64_t arg3)
{
    int64_t x9 = 0;
    int32_t x17 = 0;
    bool cond:0_1;
    do
    {
        int32_t i_1 = (arg2 - x17);
        int32_t x15_1 = (x17 + arg2);
        if (i_1 < x15_1)
        {
            int64_t i = i_1;
            int64_t x17_1 = (arg3 - x17);
            int64_t x4_2 = (x17 + arg3);
            do
            {
                if (x17_1 < x4_2)
                {
                    int64_t x6_1 = ((arg3 << 0x20) - ((x9 << 0x1f) & 0xffffffff00000000));
                    int64_t x7_1 = x17_1;
                    do
                    {
                        if ((i < *(arg1 + 8) && x7_1 < *(arg1 + 0xc)))
                        {
                            uint32_t x0_4 = *((*(arg1 + 0x10) + (**(arg1 + 0x48) * i)) + (x6_1 >> 0x20));
                            if (x0_4 != 0)
                            {
                                return x0_4;
                            }
                        }
                        x7_1 = (x7_1 + 1);
                        x6_1 = (x6_1 + 0x100000000);
                    } while (x7_1 < x4_2);
                }
                i = (i + 1);
            } while (i < x15_1);
        }
        cond:0_1 = x9 <= 9;
        x9 = (x9 + 1);
        x17 = ((x9 >> 1) & 0x7fffffff);
    } while (cond:0_1);
    return -1;
}

int64_t feasibal_region::ground_process::processSlopeBasePlane(void* arg1, int64_t arg2, int32_t* arg3, int64_t* arg4, int64_t* arg5, int64_t* arg6, int64_t* arg7)
{
    int64_t v15;
    int64_t var_a0 = v15;
    int64_t v14;
    int64_t var_98 = v14;
    double v12;
    double var_88 = v12;
    int64_t v11;
    int64_t var_80 = v11;
    int64_t v10;
    int64_t var_78 = v10;
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    int64_t v8;
    v8 = *(arg1 + 0x90);
    int64_t v9;
    v9 = *(arg1 + 0x38);
    int64_t v13;
    v13 = *(arg1 + 0x24);
    int64_t x26 = (*(arg1 + 0x740) - *(arg1 + 0x738));
    int64_t x8_2 = (x26 >> 4);
    void* s;
    __builtin_memset(&s, 0, 0x18);
    int64_t* var_f0;
    int64_t* var_e8;
    void* var_d0_1;
    if (x8_2 != 1)
    {
        if (((x8_2 - 1) >> 0x3d) == 0)
        {
            void* s_1 = operator new(((x8_2 - 1) << 3));
            void* x27_1 = (s_1 + ((x8_2 - 1) << 3));
            s = s_1;
            void* var_c8_1 = x27_1;
            memset(s_1, 0, ((x26 >> 1) - 8));
            var_d0_1 = x27_1;
        }
        else
        {
            int64_t x0_15 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            int64_t* x20_2 = var_f0;
            int64_t* x0_17;
            if (x20_2 != 0)
            {
                int64_t* x8_39 = var_e8;
                if (x8_39 == x20_2)
                {
                    goto label_3c224;
                }
                int64_t* x21_2 = x8_39;
                do
                {
                    x21_2 = &x21_2[-3];
                    void* x0_16 = *x21_2;
                    if (x0_16 != 0)
                    {
                        x8_39[-2] = x0_16;
                        operator delete(x0_16);
                    }
                    x8_39 = x21_2;
                } while (x20_2 != x21_2);
                x0_17 = var_f0;
                goto label_3c204;
            }
            while (true)
            {
                void* s_3 = s;
                if (s_3 != 0)
                {
                    void* s_6 = s_3;
                    operator delete(s_3);
                }
                _Unwind_Resume(x0_15);
            label_3c224:
                x0_17 = x20_2;
            label_3c204:
                int64_t* var_e8_2 = x20_2;
                operator delete(x0_17);
            }
        }
    }
    double v0;
    double v1;
    double v2;
    v0 = std::__ndk1::vector<std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::allocator<std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> > > >::vector(&var_f0);
    int64_t x8_5 = *arg7;
    float var_c0;
    int32_t var_bc;
    if (arg7[1] != x8_5)
    {
        /* unimplemented  {fmin s2, s13, s10} */;
        int64_t i = 0;
        v9 = (v8 * v9);
        v12 = 0x41700000;
        v14 = ((v2 * 3.1415926535897931) / 180.0);
        do
        {
            int64_t* x8_6 = (x8_5 + (i << 3));
            int64_t x11_4 = *(arg1 + 0x7d8);
            int64_t x12_1 = *x8_6;
            int64_t x13_1 = *(x8_6 + 4);
            int64_t x14_1 = **(arg1 + 0x810);
            v2 = *arg3;
            v1 = arg3[1];
            v0 = arg3[3];
            uint32_t x6 = *((x11_4 + (x14_1 * x12_1)) + x13_1);
            int32_t* x9_4 = ((*(arg1 + 0x838) + (**(arg1 + 0x870) * x12_1)) + (x13_1 << 4));
            float x8_9 = *x9_4;
            int32_t x10_2 = x9_4[1];
            float x9_5 = x9_4[2];
            if (x6 != 0)
            {
            label_3bcb4:
                int64_t x11_5 = *arg4;
                v2 = (v2 * x8_9);
                v15 = x10_2;
                v1 = (v1 * v15);
                v1 = (v2 + v1);
                uint64_t x26_2 = (x6 - 2);
                /* unimplemented  {fabs s13, s0} */;
                v0 = v12;
                if (x26_2 < ((arg4[1] - x11_5) >> 2))
                {
                    v0 = *(x11_5 + (x26_2 << 2));
                    if (!(v0 >= 0.0872664601f))
                    {
                        int64_t* x8_14 = var_f0;
                        var_c0 = i;
                        int32_t* x10_3 = *((x8_14 + (x26_2 * 0x18)) + 8);
                        if (x10_3 >= *((x8_14 + (x26_2 * 0x18)) + 0x10))
                        {
                            v0 = std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t>((x8_14 + (x26_2 * 0x18)));
                        }
                        else
                        {
                            *x10_3 = i;
                            *((x8_14 + (x26_2 * 0x18)) + 8) = &x10_3[1];
                        }
                        v0 = *(arg1 + 0x1c);
                        /* unimplemented  {fabs s1, s15} */;
                        v0 = (((v1 * 0.5) / v0) + 1.0);
                        v0 = (v8 * v0);
                        void* s_4 = s;
                        v0 = vcvts_f32_u32(vcvts_u32_f32(v0));
                        if (v13 <= v0)
                        {
                            void* x8_21 = (s_4 + (x26_2 << 3));
                            *(x8_21 + 4) = (*(x8_21 + 4) + 1);
                        }
                        else
                        {
                            uint64_t x9_16 = (x26_2 << 3);
                            *(s_4 + x9_16) = (*(s_4 + x9_16) + 1);
                        }
                    }
                }
                if ((x26_2 >= ((arg4[1] - x11_5) >> 2) || (x26_2 < ((arg4[1] - x11_5) >> 2) && v0 >= 0.0872664601f)))
                {
                    float var_b8_1;
                    float* x9_11;
                    if (!(v0 >= v14))
                    {
                        var_c0 = x8_9;
                        var_bc = x10_2;
                        var_b8_1 = x9_5;
                        x9_11 = *(arg1 + 0x960);
                        if (x9_11 == *(arg1 + 0x968))
                        {
                            v0 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>((arg1 + 0x958));
                        }
                    }
                    if (((v0 >= v14 && v0 >= 10f) && !(v13 >= v9)))
                    {
                        var_c0 = x8_9;
                        var_bc = x10_2;
                        var_b8_1 = x9_5;
                        x9_11 = *(arg1 + 0x960);
                    }
                    if (((!(v0 >= v14) && x9_11 != *(arg1 + 0x968)) || (((v0 >= v14 && v0 >= 10f) && !(v13 >= v9)) && x9_11 != *(arg1 + 0x968))))
                    {
                        *x9_11 = x8_9;
                        x9_11[1] = var_bc;
                        x9_11[2] = var_b8_1;
                        *(arg1 + 0x960) = &x9_11[3];
                    }
                    if (v0 >= v14)
                    {
                        if (v0 >= 10f)
                        {
                            if ((!(v13 >= v9) && x9_11 == *(arg1 + 0x968)))
                            {
                                v0 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>((arg1 + 0x958));
                            }
                            if ((v13 >= v9 && (*(*arg6 + ((i >> 3) & 0x1ffffffffffffff8)) & (1 << i)) != 0))
                            {
                                int64_t* x8_25 = (*arg5 + (i * 0x18));
                                x8_25[1];
                                v0 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1> const*> >((arg1 + 0x970), *(arg1 + 0x978), *x8_25);
                            }
                        }
                        else if ((*(*arg6 + ((i >> 3) & 0x1ffffffffffffff8)) & (1 << i)) != 0)
                        {
                            int64_t* x8_20 = (*arg5 + (i * 0x18));
                            x8_20[1];
                            v0 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1> const*> >((arg1 + 0x988), *(arg1 + 0x990), *x8_20);
                        }
                    }
                }
            }
            else
            {
                int64_t x15_2 = 0;
                int32_t x4 = 0;
                bool cond:2_1;
                do
                {
                    int32_t j_4 = (x12_1 - x4);
                    int32_t x1_1 = (x4 + x12_1);
                    if (j_4 < x1_1)
                    {
                        int64_t x3 = (x13_1 - x4);
                        int64_t j = j_4;
                        int64_t x5_1 = (x4 + x13_1);
                        do
                        {
                            if (x3 < x5_1)
                            {
                                int64_t x26_1 = ((x13_1 << 0x20) - ((x15_2 << 0x1f) & 0xffffffff00000000));
                                int64_t x30_1 = x3;
                                do
                                {
                                    if ((j < *(arg1 + 0x7d0) && x30_1 < *(arg1 + 0x7d4)))
                                    {
                                        x6 = *((x11_4 + (j * x14_1)) + (x26_1 >> 0x20));
                                        if (x6 != 0)
                                        {
                                            break;
                                        }
                                    }
                                    x30_1 = (x30_1 + 1);
                                    x26_1 = (x26_1 + 0x100000000);
                                } while (x30_1 < x5_1);
                                if (((j < *(arg1 + 0x7d0) && x30_1 < *(arg1 + 0x7d4)) && x6 != 0))
                                {
                                    if (x6 != 1)
                                    {
                                        goto label_3bcb4;
                                    }
                                    goto label_3bc88;
                                }
                            }
                            j = (j + 1);
                        } while (j < x1_1);
                    }
                    cond:2_1 = x15_2 < 0xa;
                    x15_2 = (x15_2 + 1);
                    x4 = ((x15_2 >> 1) & 0x7fffffff);
                } while (cond:2_1);
            label_3bc88:
                if ((*(*arg6 + ((i >> 3) & 0x1ffffffffffffff8)) & (1 << i)) != 0)
                {
                    int64_t* x8_13 = (*arg5 + (i * 0x18));
                    x8_13[1];
                    v0 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1> const*> >((arg1 + 0x970), *(arg1 + 0x978), *x8_13);
                }
            }
            x8_5 = *arg7;
            i = (i + 1);
        } while (i < ((arg7[1] - x8_5) >> 3));
    }
    void* s_2 = s;
    if (var_d0_1 != s_2)
    {
        int64_t i_1 = 0;
        do
        {
            int32_t* x8_27 = (s_2 + (i_1 << 3));
            uint32_t x9_24 = *x8_27;
            uint32_t x10_10 = (x8_27[1] + x9_24);
            if (x10_10 >= 2)
            {
                if (x10_10 <= 0xa)
                {
                    int64_t* x8_32 = var_f0;
                    int64_t* x9_32 = (x8_32 + (i_1 * 0x18));
                    if (x9_32[1] != *x9_32)
                    {
                        int64_t j_1 = 0;
                        int64_t* x9_37;
                        do
                        {
                            uint64_t x9_36 = *(x8_32[(i_1 * 3)] + (j_1 << 2));
                            if (((1 << x9_36) & *(*arg6 + ((x9_36 >> 3) & 0x1ffffff8))) != 0)
                            {
                                int64_t* x8_34 = (*arg5 + (x9_36 * 0x18));
                                x8_34[1];
                                v0 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1> const*> >((arg1 + 0x9a0), *(arg1 + 0x9a8), *x8_34);
                                x8_32 = var_f0;
                            }
                            x9_37 = (x8_32 + (i_1 * 0x18));
                            j_1 = (j_1 + 1);
                        } while (j_1 < ((x9_37[1] - *x9_37) >> 2));
                    }
                }
                else
                {
                    int64_t* x8_29 = var_f0;
                    v1 = vcvts_f32_u32(x10_10);
                    v0 = vcvts_f32_s32(x9_24);
                    v0 = (v0 / v1);
                    int64_t* x10_11 = (x8_29 + (i_1 * 0x18));
                    int64_t x9_25 = *x10_11;
                    int64_t x10_12 = x10_11[1];
                    if (v0 <= 0.69999999999999996)
                    {
                        if (x10_12 != x9_25)
                        {
                            int64_t j_2 = 0;
                            int64_t* x9_48;
                            do
                            {
                                int64_t* x9_43 = (*arg7 + (*(x8_29[(i_1 * 3)] + (j_2 << 2)) << 3));
                                double* x9_45 = ((*(arg1 + 0x838) + (**(arg1 + 0x870) * *x9_43)) + (*(x9_43 + 4) << 4));
                                v0 = *x9_45;
                                int32_t x9_46 = x9_45[1];
                                var_c0 = v0;
                                int32_t* x9_47 = *(arg1 + 0x960);
                                if (x9_47 == *(arg1 + 0x968))
                                {
                                    v0 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 3, 1, 0, 3, 1> const&>((arg1 + 0x958));
                                    x8_29 = var_f0;
                                }
                                else
                                {
                                    *x9_47 = v0;
                                    x9_47[1] = var_bc;
                                    x9_47[2] = x9_46;
                                    *(arg1 + 0x960) = &x9_47[3];
                                }
                                x9_48 = (x8_29 + (i_1 * 0x18));
                                j_2 = (j_2 + 1);
                            } while (j_2 < ((x9_48[1] - *x9_48) >> 2));
                        }
                    }
                    else if (x10_12 != x9_25)
                    {
                        int64_t j_3 = 0;
                        int64_t* x9_29;
                        do
                        {
                            uint64_t x9_28 = *(x8_29[(i_1 * 3)] + (j_3 << 2));
                            if (((1 << x9_28) & *(*arg6 + ((x9_28 >> 3) & 0x1ffffff8))) != 0)
                            {
                                int64_t* x8_31 = (*arg5 + (x9_28 * 0x18));
                                x8_31[1];
                                v0 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1> const*> >((arg1 + 0x9a0), *(arg1 + 0x9a8), *x8_31);
                                x8_29 = var_f0;
                            }
                            x9_29 = (x8_29 + (i_1 * 0x18));
                            j_3 = (j_3 + 1);
                        } while (j_3 < ((x9_29[1] - *x9_29) >> 2));
                    }
                }
            }
            s_2 = s;
            i_1 = (i_1 + 1);
        } while (i_1 < ((var_d0_1 - s_2) >> 3));
    }
    int64_t* x19_1 = var_f0;
    if (x19_1 != 0)
    {
        int64_t* x8_37 = var_e8;
        int64_t* x0_13;
        if (x8_37 == x19_1)
        {
            x0_13 = x19_1;
        }
        else
        {
            int64_t* x20_1 = x8_37;
            do
            {
                x20_1 = &x20_1[-3];
                void* x0_12 = *x20_1;
                if (x0_12 != 0)
                {
                    x8_37[-2] = x0_12;
                    operator delete(x0_12);
                }
                x8_37 = x20_1;
            } while (x19_1 != x20_1);
            x0_13 = var_f0;
        }
        int64_t* var_e8_1 = x19_1;
        operator delete(x0_13);
        s_2 = s;
    }
    if (s_2 != 0)
    {
        void* s_5 = s_2;
        operator delete(s_2);
    }
    if (*(x28 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

void std::__ndk1::vector<std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >, std::__ndk1::allocator<std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> > > >::vector(int64_t* arg1, int64_t arg2)
{
    __builtin_memset(arg1, 0, 0x18);
    if (arg2 != 0)
    {
        int64_t i_1 = arg2;
        int64_t* x19_1 = arg1;
        if (arg2 >= 0xaaaaaaaaaaaaaab)
        {
            int64_t x0_2 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* x21 = *x19_1;
            void* x0_4;
            if (x21 != 0)
            {
                int64_t* x8_3 = x19_1[1];
                if (x8_3 == x21)
                {
                    goto label_3c304;
                }
                int64_t* x22_1 = x8_3;
                do
                {
                    x22_1 = &x22_1[-3];
                    void* x0_3 = *x22_1;
                    if (x0_3 != 0)
                    {
                        x8_3[-2] = x0_3;
                        operator delete(x0_3);
                    }
                    x8_3 = x22_1;
                } while (x21 != x22_1);
                x0_4 = *x19_1;
                goto label_3c2f4;
            }
            while (true)
            {
                _Unwind_Resume(x0_2);
            label_3c304:
                x0_4 = x21;
            label_3c2f4:
                x19_1[1] = x21;
                operator delete(x0_4);
            }
        }
        else
        {
            arg1 = operator new((i_1 * 0x18));
            int64_t* s = arg1;
            *x19_1 = arg1;
            x19_1[1] = arg1;
            x19_1[2] = (arg1 + (i_1 * 0x18));
            int64_t i;
            do
            {
                __builtin_memset(s, 0, 0x18);
                i = i_1;
                i_1 = (i_1 - 1);
                s = (x19_1[1] + 0x18);
                x19_1[1] = s;
            } while (i != 1);
        }
    }
}

void* std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1> const*> >(int64_t* arg1, void* arg2, int32_t* arg3, int32_t* arg4)
{
    void* x25 = (arg4 - arg3);
    void* x19 = arg2;
    int64_t x8_1;
    int64_t x10_2;
    void* x24_2;
    void* x26_1;
    if (x25 >= 1)
    {
        x26_1 = arg1[1];
        x8_1 = arg1[2];
        void* x20_1 = *arg1;
        int64_t x28_1 = (x19 - x20_1);
        x10_2 = ((x25 >> 2) * -0x5555555555555555);
        int32_t* x22_1 = arg3;
        int64_t x1 = ((x28_1 >> 2) * -0x5555555555555555);
        int128_t v0;
        int128_t v1;
        int128_t v2;
        int128_t v3;
        int128_t v4;
        int128_t v5;
        if (x10_2 <= (((x8_1 - x26_1) >> 2) * -0x5555555555555555))
        {
            void* x12_12 = (x26_1 - x19);
            int64_t x11_10 = ((x12_12 >> 2) * -0x5555555555555555);
            int32_t* x8_13;
            int32_t* x11_11;
            if (x10_2 <= x11_10)
            {
                x11_11 = x26_1;
                x8_13 = arg4;
            }
            else
            {
                x8_13 = (x22_1 + (x11_10 * 0xc));
                if (x8_13 == arg4)
                {
                    x11_11 = x26_1;
                }
                else
                {
                    int64_t x13_5 = !(x11_10);
                    uint64_t x13_9;
                    int32_t* x13_12;
                    if (((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) >= 8)
                    {
                        x13_9 = (((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc);
                        if ((x26_1 >= ((x22_1 + ((x11_10 + x13_9) * 0xc)) + 0xc) || (x26_1 < ((x22_1 + ((x11_10 + x13_9) * 0xc)) + 0xc) && x8_13 >= ((x26_1 + (x13_9 * 0xc)) + 0xc))))
                        {
                            int64_t i_14 = (((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) & 0x3ffffffffffffff8);
                            int64_t x13_22 = (i_14 * 0xc);
                            x11_11 = (x26_1 + x13_22);
                            x13_12 = (x8_13 + x13_22);
                            void* x16_5 = ((x22_1 + (x11_10 * 0xc)) + 0x30);
                            int64_t i_10 = i_14;
                            void* x0_4 = x26_1;
                            int64_t i;
                            do
                            {
                                v1 = *(x16_5 - 0x20);
                                v2 = *(x16_5 - 0x10);
                                v3 = *x16_5;
                                v4 = *(x16_5 + 0x10);
                                v5 = *(x16_5 + 0x20);
                                i = i_10;
                                i_10 = (i_10 - 8);
                                *x0_4 = *(x16_5 - 0x30);
                                *(x0_4 + 0x10) = v1;
                                *(x0_4 + 0x20) = v2;
                                *(x0_4 + 0x30) = v3;
                                *(x0_4 + 0x40) = v4;
                                *(x0_4 + 0x50) = v5;
                                x0_4 = (x0_4 + 0x60);
                                x16_5 = (x16_5 + 0x60);
                            } while (i != 8);
                            if (((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) != i_14)
                            {
                                goto label_3c600;
                            }
                        }
                    }
                    if ((((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) < 8 || ((((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) >= 8 && x26_1 < ((x22_1 + ((x11_10 + x13_9) * 0xc)) + 0xc)) && x8_13 < ((x26_1 + (x13_9 * 0xc)) + 0xc))))
                    {
                        x11_11 = x26_1;
                        x13_12 = x8_13;
                    label_3c600:
                        do
                        {
                            *x11_11 = *x13_12;
                            x11_11[1] = x13_12[1];
                            int32_t x14_9 = x13_12[2];
                            x13_12 = &x13_12[3];
                            x11_11[2] = x14_9;
                            x11_11 = &x11_11[3];
                        } while (x13_12 != arg4);
                    }
                    arg1[1] = x11_11;
                }
            }
            if (((x10_2 <= x11_10 || ((x10_2 > x11_10 && x8_13 == arg4) && x12_12 >= 1)) || ((x10_2 > x11_10 && x8_13 != arg4) && x12_12 >= 1)))
            {
                int64_t x10_10 = (x10_2 * 0xc);
                void* x12_13 = (x11_11 - x10_10);
                void* x10_11 = (x11_11 - (x19 + x10_10));
                if (x12_13 < x26_1)
                {
                    int32_t* x13_14 = x11_11;
                    do
                    {
                        int64_t x15_1 = *x12_13;
                        x13_14[2] = *(x12_13 + 8);
                        *x13_14 = x15_1;
                        *x13_14 = *x12_13;
                        x13_14[1] = *(x12_13 + 4);
                        int32_t x14_13 = *(x12_13 + 8);
                        x12_13 = (x12_13 + 0xc);
                        x13_14[2] = x14_13;
                        x13_14 = (arg1[1] + 0xc);
                        arg1[1] = x13_14;
                    } while (x12_13 < x26_1);
                }
                if (x10_11 != 0)
                {
                    int64_t i_1 = ((x10_11 >> 2) * 4);
                    void* x10_13 = (x11_11 - 4);
                    do
                    {
                        void* x11_12 = (x19 + i_1);
                        int32_t x13_16 = *(x11_12 - 0xc);
                        i_1 = (i_1 - 0xc);
                        *(x11_12 - 0xc) = *(x10_13 - 8);
                        *(x10_13 - 8) = x13_16;
                        int32_t x13_17 = *(x11_12 - 8);
                        *(x11_12 - 8) = *(x10_13 - 4);
                        *(x10_13 - 4) = x13_17;
                        int32_t x13_18 = *(x11_12 - 4);
                        *(x11_12 - 4) = *x10_13;
                        *x10_13 = x13_18;
                        x10_13 = (x10_13 - 0xc);
                    } while (i_1 != 0);
                }
                if (x8_13 != x22_1)
                {
                    uint64_t x11_13 = (((x8_13 - x22_1) - 0xc) / 0xc);
                    void* x10_14 = x19;
                    if ((x11_13 + 1) < 8)
                    {
                    label_3c7a4:
                        do
                        {
                            *x10_14 = *x22_1;
                            *(x10_14 + 4) = x22_1[1];
                            int32_t x9_13 = x22_1[2];
                            x22_1 = &x22_1[3];
                            *(x10_14 + 8) = x9_13;
                            x10_14 = (x10_14 + 0xc);
                        } while (x22_1 != x8_13);
                    }
                    else
                    {
                        if (x19 < ((x22_1 + (x11_13 * 0xc)) + 0xc))
                        {
                            x10_14 = x19;
                            if (x22_1 < ((x20_1 + ((x1 + x11_13) * 0xc)) + 0xc))
                            {
                                goto label_3c7a4;
                            }
                        }
                        int64_t i_12 = ((x11_13 + 1) & 0x3ffffffffffffff8);
                        int64_t x13_20 = (i_12 * 0xc);
                        int32_t* x12_19 = x22_1;
                        x10_14 = (x19 + x13_20);
                        x22_1 = (x22_1 + x13_20);
                        void* x13_21 = ((x20_1 + (x1 * 0xc)) + 0x30);
                        int64_t i_8 = i_12;
                        int64_t i_2;
                        do
                        {
                            v0 = *x12_19;
                            v1 = *(x12_19 + 0x10);
                            v2 = *(x12_19 + 0x20);
                            v3 = *(x12_19 + 0x30);
                            v4 = *(x12_19 + 0x40);
                            v5 = *(x12_19 + 0x50);
                            x12_19 = &x12_19[0x18];
                            i_2 = i_8;
                            i_8 = (i_8 - 8);
                            *(x13_21 - 0x20) = v1;
                            *(x13_21 - 0x10) = v2;
                            *(x13_21 - 0x30) = v0;
                            *(x13_21 + 0x10) = v4;
                            *(x13_21 + 0x20) = v5;
                            *x13_21 = v3;
                            x13_21 = (x13_21 + 0x60);
                        } while (i_2 != 8);
                        if ((x11_13 + 1) != i_12)
                        {
                            goto label_3c7a4;
                        }
                    }
                }
            }
        }
        else
        {
            int64_t x27_1 = 0x1555555555555555;
            int64_t x9_3 = (x10_2 - (((x26_1 - x20_1) >> 2) * 0x5555555555555555));
            if (x9_3 > 0x1555555555555555)
            {
                int64_t x0_6;
                void* x1_1;
                int32_t* x2;
                int64_t* x8_17;
                x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
                /* tailcall */
                return feasibal_region::ground_process::imageScore(x0_6, x1_1, x2, x8_17);
            }
            int64_t x8_4 = (((x8_1 - x20_1) >> 2) * -0x5555555555555555);
            struct Elf64_Header* const x0_1;
            if (x8_4 <= 0xaaaaaaaaaaaaaa9)
            {
                int64_t x8_5 = (x8_4 << 1);
                if (x8_5 < x9_3)
                {
                    x27_1 = x9_3;
                }
                else
                {
                    x27_1 = x8_5;
                }
                if (x27_1 == 0)
                {
                    x0_1 = nullptr;
                }
            }
            if ((x8_4 > 0xaaaaaaaaaaaaaa9 || (x8_4 <= 0xaaaaaaaaaaaaaa9 && x27_1 != 0)))
            {
                x0_1 = operator new((x27_1 * 0xc));
            }
            x24_2 = (x0_1 + (x1 * 0xc));
            int32_t* x8_7 = x24_2;
            if (x22_1 != arg4)
            {
                uint64_t x11_4 = ((x25 - 0xc) / 0xc);
                x8_7 = x24_2;
                if ((x11_4 + 1) < 8)
                {
                label_3c4c4:
                    do
                    {
                        *x8_7 = *x22_1;
                        x8_7[1] = x22_1[1];
                        int32_t x10_6 = x22_1[2];
                        x22_1 = &x22_1[3];
                        x8_7[2] = x10_6;
                        x8_7 = &x8_7[3];
                    } while (x22_1 != arg4);
                }
                else
                {
                    if (x24_2 < ((x22_1 + (x11_4 * 0xc)) + 0xc))
                    {
                        x8_7 = x24_2;
                        if (x22_1 < (&*x0_1->ident[9][3] + ((x1 + x11_4) * 0xc)))
                        {
                            goto label_3c4c4;
                        }
                    }
                    int64_t i_11 = ((x11_4 + 1) & 0x3ffffffffffffff8);
                    int64_t x13_2 = (i_11 * 0xc);
                    int128_t* x12_4 = x22_1;
                    x8_7 = (x24_2 + x13_2);
                    x22_1 = (x22_1 + x13_2);
                    void* x13_3 = (&x0_1->flags + (x1 * 0xc));
                    int64_t i_7 = i_11;
                    int64_t i_3;
                    do
                    {
                        v0 = *x12_4;
                        v1 = x12_4[1];
                        v2 = x12_4[2];
                        v3 = x12_4[3];
                        v4 = x12_4[4];
                        v5 = x12_4[5];
                        x12_4 = &x12_4[6];
                        i_3 = i_7;
                        i_7 = (i_7 - 8);
                        *(x13_3 - 0x20) = v1;
                        *(x13_3 - 0x10) = v2;
                        *(x13_3 - 0x30) = v0;
                        *(x13_3 + 0x10) = v4;
                        *(x13_3 + 0x20) = v5;
                        *x13_3 = v3;
                        x13_3 = (x13_3 + 0x60);
                    } while (i_3 != 8);
                    if ((x11_4 + 1) != i_11)
                    {
                        goto label_3c4c4;
                    }
                }
            }
            void* x10_8 = x24_2;
            if (x28_1 != 0)
            {
                int64_t i_6 = (x1 * 0xc);
                int64_t i_4;
                do
                {
                    void* x11_6 = (x20_1 + i_6);
                    void* x13_4 = (x0_1 + i_6);
                    i_4 = i_6;
                    i_6 = (i_6 - 0xc);
                    *(x13_4 - 0xc) = *(x11_6 - 0xc);
                    *(x13_4 - 8) = *(x11_6 - 8);
                    *(x13_4 - 4) = *(x11_6 - 4);
                } while (i_4 != 0xc);
                x10_8 = (x0_1 + i_6);
            }
            int32_t* x11_9;
            if (x26_1 == x19)
            {
                x11_9 = x8_7;
            }
            else
            {
                int64_t x11_8 = !(x1);
                if (((((x26_1 + (x11_8 * 0xc)) - x20_1) / 0xc) + 1) >= 8)
                {
                    uint64_t x11_18 = (((x26_1 + (x11_8 * 0xc)) - x20_1) / 0xc);
                    if ((x8_7 < ((x20_1 + ((x1 + x11_18) * 0xc)) + 0xc) && x19 < ((x8_7 + (x11_18 * 0xc)) + 0xc)))
                    {
                        x11_9 = x8_7;
                        goto label_3c888;
                    }
                    int64_t i_13 = (((((x26_1 + (x11_8 * 0xc)) - x20_1) / 0xc) + 1) & 0x3ffffffffffffff8);
                    int64_t x14_19 = (i_13 * 0xc);
                    x11_9 = (x8_7 + x14_19);
                    x19 = (x19 + x14_19);
                    void* x14_20 = ((x20_1 + (x1 * 0xc)) + 0x30);
                    int64_t i_9 = i_13;
                    int64_t i_5;
                    do
                    {
                        v1 = *(x14_20 - 0x20);
                        v2 = *(x14_20 - 0x10);
                        v3 = *x14_20;
                        v4 = *(x14_20 + 0x10);
                        v5 = *(x14_20 + 0x20);
                        i_5 = i_9;
                        i_9 = (i_9 - 8);
                        *x8_7 = *(x14_20 - 0x30);
                        *(x8_7 + 0x10) = v1;
                        *(x8_7 + 0x20) = v2;
                        *(x8_7 + 0x30) = v3;
                        *(x8_7 + 0x40) = v4;
                        *(x8_7 + 0x50) = v5;
                        x8_7 = &x8_7[0x18];
                        x14_20 = (x14_20 + 0x60);
                    } while (i_5 != 8);
                    if (((((x26_1 + (x11_8 * 0xc)) - x20_1) / 0xc) + 1) != i_13)
                    {
                        goto label_3c888;
                    }
                }
                else
                {
                    x11_9 = x8_7;
                label_3c888:
                    do
                    {
                        *x11_9 = *x19;
                        x11_9[1] = *(x19 + 4);
                        int32_t x8_16 = *(x19 + 8);
                        x19 = (x19 + 0xc);
                        x11_9[2] = x8_16;
                        x11_9 = &x11_9[3];
                    } while (x19 != x26_1);
                }
            }
            *arg1 = x10_8;
            arg1[1] = x11_9;
            arg1[2] = (x0_1 + (x27_1 * 0xc));
            if (x20_1 != 0)
            {
                operator delete(x20_1);
            }
        }
    }
    if ((x25 < 1 || (x25 >= 1 && x10_2 <= (((x8_1 - x26_1) >> 2) * -0x5555555555555555))))
    {
        x24_2 = x19;
    }
    return x24_2;
}

void feasibal_region::ground_process::imageScore(int64_t arg1, void* arg2, int32_t* arg3, int64_t* arg4 @ x8)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int64_t x8_1 = *arg3;
    __builtin_memset(arg4, 0, 0x18);
    void* x8_2;
    int32_t* x19;
    void* x20;
    void* x21;
    void* x23_2;
    void* x26;
    void* x27;
    uint128_t v0;
    int128_t v2;
    int128_t v3;
    if ((x8_1 + 1) == 0)
    {
        x27 = nullptr;
        x23_2 = nullptr;
        x26 = nullptr;
        x19 = nullptr;
        x20 = nullptr;
        x21 = nullptr;
        x8_2 = nullptr;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x30);
    }
    else
    {
        if (((x8_1 + 1) & 0x80000000) != 0)
        {
            int64_t x0_9 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* var_98;
            void* x0_10;
            void* var_80;
            if (var_98 != 0)
            {
                void* var_90_3 = var_98;
                operator delete(var_98);
                x0_10 = var_80;
            }
            else
            {
                x0_10 = var_80;
            }
            void* x0_12;
            if (((var_98 != 0 && x0_10 == 0) || (var_98 == 0 && x0_10 == 0)))
            {
                x0_12 = *arg4;
                if (x0_12 != 0)
                {
                label_3cc70:
                    arg4[1] = x0_12;
                    operator delete(x0_12);
                }
            }
            if (((var_98 != 0 && x0_10 != 0) || (var_98 == 0 && x0_10 != 0)))
            {
                void* var_78_3 = x0_10;
                operator delete(x0_10);
                x0_12 = *arg4;
                if (x0_12 != 0)
                {
                    goto label_3cc70;
                }
            }
            int64_t* x0_14;
            void* x1;
            int32_t* x2_5;
            int32_t* x3_1;
            x0_14 = _Unwind_Resume(x0_9);
            /* tailcall */
            return std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >(x0_14, x1, x2_5, x3_1);
        }
        int64_t x24_1 = ((x8_1 + 1) << 2);
        int32_t* x0_1 = operator new(x24_1);
        x26 = &x0_1[(x8_1 + 1)];
        x19 = x0_1;
        *arg4 = x0_1;
        arg4[2] = x26;
        memset(x0_1, 0, x24_1);
        arg4[1] = x26;
        int64_t s_2;
        __builtin_memset(&s_2, 0, 0x18);
        void* x0_3 = operator new(x24_1);
        x27 = (x0_3 + x24_1);
        x20 = x0_3;
        void* var_80_1 = x0_3;
        void* var_70_1 = x27;
        memset(x0_3, 0, x24_1);
        void* var_78_1 = x27;
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        void* x0_5 = operator new(x24_1);
        void* x23_1 = (x0_5 + ((x8_1 + 1) << 2));
        x21 = x0_5;
        void* var_98_1 = x0_5;
        void* var_88_1 = x23_1;
        arg1 = memset(x0_5, 0, x24_1);
        void* var_90_1 = x23_1;
        x23_2 = x20;
        x8_2 = x21;
    }
    int32_t x13 = *(arg2 + 0xc);
    v2 = 0x3fe199999999999a;
    v0 = 0x3fd0000000000000;
    int64_t x9_1 = *(arg2 + 8);
    v3 = vcvt_f64_s64(x13);
    v0 = (v3 * 0.25);
    v2 = (vcvt_f64_s64(x9_1) * 0.55000000000000004);
    int32_t temp0_2 = vcvt_s64_f64(v0);
    int32_t temp0_3 = vcvt_s64_f64((v3 * 0.75));
    int32_t temp0_4 = vcvt_s64_f64(v2);
    if (x9_1 != 0)
    {
        int64_t x14_1 = 0;
        int32_t x2_3 = x13;
        do
        {
            if (x2_3 != 0)
            {
                int64_t x2_4 = 0;
                int64_t i = 0;
                void* x4_3 = (*(arg2 + 0x10) + (**(arg2 + 0x48) * x14_1));
                do
                {
                    uint64_t x5_3 = *(x4_3 + (x2_4 >> 0x20));
                    if ((x5_3 != 0 && (x14_1 < x9_1 && (x14_1 > temp0_4 && (i < temp0_3 && (i > temp0_2 && ((x27 - x23_2) >> 2) > x5_3))))))
                    {
                        uint64_t x5_4 = (x5_3 << 2);
                        *(x23_2 + x5_4) = (*(x23_2 + x5_4) + 1);
                    }
                    i = (i + 1);
                    x2_4 = (x2_4 + 0x100000000);
                } while (i < x13);
                x2_3 = x13;
            }
            x14_1 = (x14_1 + 1);
        } while (x14_1 < x9_1);
    }
    if (x26 != x19)
    {
        int64_t x9_3 = ((x26 - x19) >> 2);
        int64_t x11_2;
        if (x9_3 > 1)
        {
            x11_2 = x9_3;
        }
        else
        {
            x11_2 = 1;
        }
        v0 = vcvts_f32_s32((((1 - temp0_2) + temp0_3) * ((x9_1 + 1) - temp0_4)));
        int64_t i_3;
        if (x11_2 > 7)
        {
            i_3 = (x11_2 & 0xfffffffffffffff8);
            vdupq_laneq_s32(v0, 0);
            void* x12_2 = (x23_2 + 0x10);
            void* x13_1 = &x19[4];
            int64_t i_2 = i_3;
            int64_t i_1;
            do
            {
                v2 = *(x12_2 - 0x10);
                v3 = *x12_2;
                x12_2 = (x12_2 + 0x20);
                i_1 = i_2;
                i_2 = (i_2 - 8);
                v2 = vcvt_f32_u32(v2);
                v3 = vcvt_f32_u32(v3);
                /* unimplemented  {fdiv v2.4s, v2.4s, v1.4s} */;
                /* unimplemented  {fdiv v3.4s, v3.4s, v1.4s} */;
                *(x13_1 - 0x10) = v2;
                *x13_1 = v3;
                x13_1 = (x13_1 + 0x20);
            } while (i_1 != 8);
        }
        else
        {
            i_3 = 0;
        }
        if ((x11_2 <= 7 || (x11_2 > 7 && x11_2 != i_3)))
        {
            do
            {
                int64_t x11_3 = (i_3 << 2);
                double v1;
                v1 = *(x23_2 + x11_3);
                i_3 = (i_3 + 1);
                v1 = vcvts_f32_u32(v1);
                v1 = (v1 / v0);
                *(x19 + x11_3) = v1;
            } while (x9_3 > i_3);
        }
    }
    if (x8_2 != 0)
    {
        void* var_90_2 = x8_2;
        operator delete(x21);
    }
    if (x23_2 != 0)
    {
        void* var_78_2 = x23_2;
        operator delete(x20);
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void* std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >(int64_t* arg1, void* arg2, int32_t* arg3, int32_t* arg4)
{
    void* x25 = (arg4 - arg3);
    void* x19 = arg2;
    int64_t x8_1;
    int64_t x10_2;
    void* x24_2;
    void* x26_1;
    if (x25 >= 1)
    {
        x26_1 = arg1[1];
        x8_1 = arg1[2];
        void* x20_1 = *arg1;
        int64_t x28_1 = (x19 - x20_1);
        x10_2 = ((x25 >> 2) * -0x5555555555555555);
        int32_t* x22_1 = arg3;
        int64_t x1 = ((x28_1 >> 2) * -0x5555555555555555);
        int128_t v0;
        int128_t v1;
        int128_t v2;
        int128_t v3;
        int128_t v4;
        int128_t v5;
        if (x10_2 <= (((x8_1 - x26_1) >> 2) * -0x5555555555555555))
        {
            void* x12_12 = (x26_1 - x19);
            int64_t x11_10 = ((x12_12 >> 2) * -0x5555555555555555);
            int32_t* x8_13;
            int32_t* x11_11;
            if (x10_2 <= x11_10)
            {
                x11_11 = x26_1;
                x8_13 = arg4;
            }
            else
            {
                x8_13 = (x22_1 + (x11_10 * 0xc));
                if (x8_13 == arg4)
                {
                    x11_11 = x26_1;
                }
                else
                {
                    int64_t x13_5 = !(x11_10);
                    uint64_t x13_9;
                    int32_t* x13_12;
                    if (((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) >= 8)
                    {
                        x13_9 = (((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc);
                        if ((x26_1 >= ((x22_1 + ((x11_10 + x13_9) * 0xc)) + 0xc) || (x26_1 < ((x22_1 + ((x11_10 + x13_9) * 0xc)) + 0xc) && x8_13 >= ((x26_1 + (x13_9 * 0xc)) + 0xc))))
                        {
                            int64_t i_14 = (((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) & 0x3ffffffffffffff8);
                            int64_t x13_22 = (i_14 * 0xc);
                            x11_11 = (x26_1 + x13_22);
                            x13_12 = (x8_13 + x13_22);
                            void* x16_5 = ((x22_1 + (x11_10 * 0xc)) + 0x30);
                            int64_t i_10 = i_14;
                            void* x0_4 = x26_1;
                            int64_t i;
                            do
                            {
                                v1 = *(x16_5 - 0x20);
                                v2 = *(x16_5 - 0x10);
                                v3 = *x16_5;
                                v4 = *(x16_5 + 0x10);
                                v5 = *(x16_5 + 0x20);
                                i = i_10;
                                i_10 = (i_10 - 8);
                                *x0_4 = *(x16_5 - 0x30);
                                *(x0_4 + 0x10) = v1;
                                *(x0_4 + 0x20) = v2;
                                *(x0_4 + 0x30) = v3;
                                *(x0_4 + 0x40) = v4;
                                *(x0_4 + 0x50) = v5;
                                x0_4 = (x0_4 + 0x60);
                                x16_5 = (x16_5 + 0x60);
                            } while (i != 8);
                            if (((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) != i_14)
                            {
                                goto label_3cf8c;
                            }
                        }
                    }
                    if ((((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) < 8 || ((((((arg4 + (x13_5 * 0xc)) - x22_1) / 0xc) + 1) >= 8 && x26_1 < ((x22_1 + ((x11_10 + x13_9) * 0xc)) + 0xc)) && x8_13 < ((x26_1 + (x13_9 * 0xc)) + 0xc))))
                    {
                        x11_11 = x26_1;
                        x13_12 = x8_13;
                    label_3cf8c:
                        do
                        {
                            *x11_11 = *x13_12;
                            x11_11[1] = x13_12[1];
                            int32_t x14_9 = x13_12[2];
                            x13_12 = &x13_12[3];
                            x11_11[2] = x14_9;
                            x11_11 = &x11_11[3];
                        } while (x13_12 != arg4);
                    }
                    arg1[1] = x11_11;
                }
            }
            if (((x10_2 <= x11_10 || ((x10_2 > x11_10 && x8_13 == arg4) && x12_12 >= 1)) || ((x10_2 > x11_10 && x8_13 != arg4) && x12_12 >= 1)))
            {
                int64_t x10_10 = (x10_2 * 0xc);
                void* x12_13 = (x11_11 - x10_10);
                void* x10_11 = (x11_11 - (x19 + x10_10));
                if (x12_13 < x26_1)
                {
                    int32_t* x13_14 = x11_11;
                    do
                    {
                        int64_t x15_1 = *x12_13;
                        x13_14[2] = *(x12_13 + 8);
                        *x13_14 = x15_1;
                        *x13_14 = *x12_13;
                        x13_14[1] = *(x12_13 + 4);
                        int32_t x14_13 = *(x12_13 + 8);
                        x12_13 = (x12_13 + 0xc);
                        x13_14[2] = x14_13;
                        x13_14 = (arg1[1] + 0xc);
                        arg1[1] = x13_14;
                    } while (x12_13 < x26_1);
                }
                if (x10_11 != 0)
                {
                    int64_t i_1 = ((x10_11 >> 2) * 4);
                    void* x10_13 = (x11_11 - 4);
                    do
                    {
                        void* x11_12 = (x19 + i_1);
                        int32_t x13_16 = *(x11_12 - 0xc);
                        i_1 = (i_1 - 0xc);
                        *(x11_12 - 0xc) = *(x10_13 - 8);
                        *(x10_13 - 8) = x13_16;
                        int32_t x13_17 = *(x11_12 - 8);
                        *(x11_12 - 8) = *(x10_13 - 4);
                        *(x10_13 - 4) = x13_17;
                        int32_t x13_18 = *(x11_12 - 4);
                        *(x11_12 - 4) = *x10_13;
                        *x10_13 = x13_18;
                        x10_13 = (x10_13 - 0xc);
                    } while (i_1 != 0);
                }
                if (x8_13 != x22_1)
                {
                    uint64_t x11_13 = (((x8_13 - x22_1) - 0xc) / 0xc);
                    void* x10_14 = x19;
                    if ((x11_13 + 1) < 8)
                    {
                    label_3d130:
                        do
                        {
                            *x10_14 = *x22_1;
                            *(x10_14 + 4) = x22_1[1];
                            int32_t x9_13 = x22_1[2];
                            x22_1 = &x22_1[3];
                            *(x10_14 + 8) = x9_13;
                            x10_14 = (x10_14 + 0xc);
                        } while (x22_1 != x8_13);
                    }
                    else
                    {
                        if (x19 < ((x22_1 + (x11_13 * 0xc)) + 0xc))
                        {
                            x10_14 = x19;
                            if (x22_1 < ((x20_1 + ((x1 + x11_13) * 0xc)) + 0xc))
                            {
                                goto label_3d130;
                            }
                        }
                        int64_t i_12 = ((x11_13 + 1) & 0x3ffffffffffffff8);
                        int64_t x13_20 = (i_12 * 0xc);
                        int32_t* x12_19 = x22_1;
                        x10_14 = (x19 + x13_20);
                        x22_1 = (x22_1 + x13_20);
                        void* x13_21 = ((x20_1 + (x1 * 0xc)) + 0x30);
                        int64_t i_8 = i_12;
                        int64_t i_2;
                        do
                        {
                            v0 = *x12_19;
                            v1 = *(x12_19 + 0x10);
                            v2 = *(x12_19 + 0x20);
                            v3 = *(x12_19 + 0x30);
                            v4 = *(x12_19 + 0x40);
                            v5 = *(x12_19 + 0x50);
                            x12_19 = &x12_19[0x18];
                            i_2 = i_8;
                            i_8 = (i_8 - 8);
                            *(x13_21 - 0x20) = v1;
                            *(x13_21 - 0x10) = v2;
                            *(x13_21 - 0x30) = v0;
                            *(x13_21 + 0x10) = v4;
                            *(x13_21 + 0x20) = v5;
                            *x13_21 = v3;
                            x13_21 = (x13_21 + 0x60);
                        } while (i_2 != 8);
                        if ((x11_13 + 1) != i_12)
                        {
                            goto label_3d130;
                        }
                    }
                }
            }
        }
        else
        {
            int64_t x27_1 = 0x1555555555555555;
            int64_t x9_3 = (x10_2 - (((x26_1 - x20_1) >> 2) * 0x5555555555555555));
            if (x9_3 > 0x1555555555555555)
            {
                int64_t* x0_6;
                void* x1_1;
                int32_t* x2;
                x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
                /* tailcall */
                return std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::insert(x0_6, x1_1, x2);
            }
            int64_t x8_4 = (((x8_1 - x20_1) >> 2) * -0x5555555555555555);
            struct Elf64_Header* const x0_1;
            if (x8_4 <= 0xaaaaaaaaaaaaaa9)
            {
                int64_t x8_5 = (x8_4 << 1);
                if (x8_5 < x9_3)
                {
                    x27_1 = x9_3;
                }
                else
                {
                    x27_1 = x8_5;
                }
                if (x27_1 == 0)
                {
                    x0_1 = nullptr;
                }
            }
            if ((x8_4 > 0xaaaaaaaaaaaaaa9 || (x8_4 <= 0xaaaaaaaaaaaaaa9 && x27_1 != 0)))
            {
                x0_1 = operator new((x27_1 * 0xc));
            }
            x24_2 = (x0_1 + (x1 * 0xc));
            int32_t* x8_7 = x24_2;
            if (x22_1 != arg4)
            {
                uint64_t x11_4 = ((x25 - 0xc) / 0xc);
                x8_7 = x24_2;
                if ((x11_4 + 1) < 8)
                {
                label_3ce50:
                    do
                    {
                        *x8_7 = *x22_1;
                        x8_7[1] = x22_1[1];
                        int32_t x10_6 = x22_1[2];
                        x22_1 = &x22_1[3];
                        x8_7[2] = x10_6;
                        x8_7 = &x8_7[3];
                    } while (x22_1 != arg4);
                }
                else
                {
                    if (x24_2 < ((x22_1 + (x11_4 * 0xc)) + 0xc))
                    {
                        x8_7 = x24_2;
                        if (x22_1 < (&*x0_1->ident[9][3] + ((x1 + x11_4) * 0xc)))
                        {
                            goto label_3ce50;
                        }
                    }
                    int64_t i_11 = ((x11_4 + 1) & 0x3ffffffffffffff8);
                    int64_t x13_2 = (i_11 * 0xc);
                    int128_t* x12_4 = x22_1;
                    x8_7 = (x24_2 + x13_2);
                    x22_1 = (x22_1 + x13_2);
                    void* x13_3 = (&x0_1->flags + (x1 * 0xc));
                    int64_t i_7 = i_11;
                    int64_t i_3;
                    do
                    {
                        v0 = *x12_4;
                        v1 = x12_4[1];
                        v2 = x12_4[2];
                        v3 = x12_4[3];
                        v4 = x12_4[4];
                        v5 = x12_4[5];
                        x12_4 = &x12_4[6];
                        i_3 = i_7;
                        i_7 = (i_7 - 8);
                        *(x13_3 - 0x20) = v1;
                        *(x13_3 - 0x10) = v2;
                        *(x13_3 - 0x30) = v0;
                        *(x13_3 + 0x10) = v4;
                        *(x13_3 + 0x20) = v5;
                        *x13_3 = v3;
                        x13_3 = (x13_3 + 0x60);
                    } while (i_3 != 8);
                    if ((x11_4 + 1) != i_11)
                    {
                        goto label_3ce50;
                    }
                }
            }
            void* x10_8 = x24_2;
            if (x28_1 != 0)
            {
                int64_t i_6 = (x1 * 0xc);
                int64_t i_4;
                do
                {
                    void* x11_6 = (x20_1 + i_6);
                    void* x13_4 = (x0_1 + i_6);
                    i_4 = i_6;
                    i_6 = (i_6 - 0xc);
                    *(x13_4 - 0xc) = *(x11_6 - 0xc);
                    *(x13_4 - 8) = *(x11_6 - 8);
                    *(x13_4 - 4) = *(x11_6 - 4);
                } while (i_4 != 0xc);
                x10_8 = (x0_1 + i_6);
            }
            int32_t* x11_9;
            if (x26_1 == x19)
            {
                x11_9 = x8_7;
            }
            else
            {
                int64_t x11_8 = !(x1);
                if (((((x26_1 + (x11_8 * 0xc)) - x20_1) / 0xc) + 1) >= 8)
                {
                    uint64_t x11_18 = (((x26_1 + (x11_8 * 0xc)) - x20_1) / 0xc);
                    if ((x8_7 < ((x20_1 + ((x1 + x11_18) * 0xc)) + 0xc) && x19 < ((x8_7 + (x11_18 * 0xc)) + 0xc)))
                    {
                        x11_9 = x8_7;
                        goto label_3d214;
                    }
                    int64_t i_13 = (((((x26_1 + (x11_8 * 0xc)) - x20_1) / 0xc) + 1) & 0x3ffffffffffffff8);
                    int64_t x14_19 = (i_13 * 0xc);
                    x11_9 = (x8_7 + x14_19);
                    x19 = (x19 + x14_19);
                    void* x14_20 = ((x20_1 + (x1 * 0xc)) + 0x30);
                    int64_t i_9 = i_13;
                    int64_t i_5;
                    do
                    {
                        v1 = *(x14_20 - 0x20);
                        v2 = *(x14_20 - 0x10);
                        v3 = *x14_20;
                        v4 = *(x14_20 + 0x10);
                        v5 = *(x14_20 + 0x20);
                        i_5 = i_9;
                        i_9 = (i_9 - 8);
                        *x8_7 = *(x14_20 - 0x30);
                        *(x8_7 + 0x10) = v1;
                        *(x8_7 + 0x20) = v2;
                        *(x8_7 + 0x30) = v3;
                        *(x8_7 + 0x40) = v4;
                        *(x8_7 + 0x50) = v5;
                        x8_7 = &x8_7[0x18];
                        x14_20 = (x14_20 + 0x60);
                    } while (i_5 != 8);
                    if (((((x26_1 + (x11_8 * 0xc)) - x20_1) / 0xc) + 1) != i_13)
                    {
                        goto label_3d214;
                    }
                }
                else
                {
                    x11_9 = x8_7;
                label_3d214:
                    do
                    {
                        *x11_9 = *x19;
                        x11_9[1] = *(x19 + 4);
                        int32_t x8_16 = *(x19 + 8);
                        x19 = (x19 + 0xc);
                        x11_9[2] = x8_16;
                        x11_9 = &x11_9[3];
                    } while (x19 != x26_1);
                }
            }
            *arg1 = x10_8;
            arg1[1] = x11_9;
            arg1[2] = (x0_1 + (x27_1 * 0xc));
            if (x20_1 != 0)
            {
                operator delete(x20_1);
            }
        }
    }
    if ((x25 < 1 || (x25 >= 1 && x10_2 <= (((x8_1 - x26_1) >> 2) * -0x5555555555555555))))
    {
        x24_2 = x19;
    }
    return x24_2;
}

void* std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::insert(int64_t* arg1, void* arg2, int32_t* arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    void* x19 = arg2;
    int64_t x23 = *arg1;
    int128_t* x9 = arg1[1];
    int64_t x8_1 = arg1[2];
    int64_t x24 = ((arg2 - x23) >> 4);
    if (x9 >= x8_1)
    {
        void* var_80;
        if (((((x9 - x23) >> 4) + 1) >> 0x3c) != 0)
        {
            int64_t x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            int64_t var_78;
            int64_t x9_20 = var_78;
            int64_t var_70;
            int64_t x8_22 = var_70;
            void* x0_8;
            if (x8_22 != x9_20)
            {
                while (true)
                {
                    int64_t var_70_5 = (x8_22 + (!(((x8_22 - 0x10) - x9_20)) & 0xfffffffffffffff0));
                    x0_8 = var_80;
                    if (x0_8 != 0)
                    {
                        break;
                    }
                label_3d6bc:
                    x8_22 = _Unwind_Resume(x0_7);
                }
            }
            else
            {
                x0_8 = var_80;
                if (x0_8 == 0)
                {
                    goto label_3d6bc;
                }
            }
            operator delete(x0_8);
            void* x0_11;
            void* x1_1;
            float v0_2;
            float v1_2;
            int32_t v2_2;
            int32_t v3_2;
            int32_t v4_2;
            float v5_2;
            x0_11 = _Unwind_Resume(x0_7);
            /* tailcall */
            return feasibal_region::ground_process::optimizeOrganizePointCloudByCell(x0_11, x1_1, v0_2, v1_2, v2_2, v3_2, v4_2, v5_2);
        }
        int64_t x10_5 = (x8_1 - x23);
        void* x0_2;
        int64_t x26_1;
        if (0x7ffffffffffffff <= (x10_5 >> 4))
        {
            int64_t var_68_2 = 0;
            void* var_60_2 = &arg1[2];
            x26_1 = 0xfffffffffffffff;
        }
        else
        {
            int64_t x10_6 = (x10_5 >> 3);
            if (x10_6 < (((x9 - x23) >> 4) + 1))
            {
                x26_1 = (((x9 - x23) >> 4) + 1);
            }
            else
            {
                x26_1 = x10_6;
            }
            int64_t var_68_1 = 0;
            void* var_60_1 = &arg1[2];
            if (x26_1 == 0)
            {
                x0_2 = nullptr;
            }
            else if ((x26_1 >> 0x3c) != 0)
            {
                sub_20e70();
                /* no return */
            }
        }
        if ((0x7ffffffffffffff <= (x10_5 >> 4) || (0x7ffffffffffffff > (x10_5 >> 4) && x26_1 != 0)))
        {
            x0_2 = operator new((x26_1 << 4));
        }
        void* x8_10 = (x0_2 + (x24 << 4));
        var_80 = x0_2;
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_1;
        int128_t v3_1;
        int128_t v4_1;
        int128_t v5_1;
        int128_t v6_1;
        int128_t v7_1;
        v0_1 = sub_406e0(&var_80, arg3);
        void* x0_4 = *arg1;
        void* x9_10 = x8_10;
        if (x0_4 != x19)
        {
            void* x9_11 = (x8_10 - 8);
            void* x10_7 = x19;
            do
            {
                x10_7 = (x10_7 - 0x10);
                *(x9_11 - 8) = *x10_7;
                *(x9_11 - 4) = *(x10_7 + 4);
                *x9_11 = *(x10_7 + 8);
                *(x9_11 + 4) = *(x10_7 + 0xc);
                x9_11 = (x9_11 - 0x10);
            } while (x0_4 != x10_7);
            x9_10 = (x8_10 + (!(((x19 - 0x10) - x0_4)) & 0xfffffffffffffff0));
            void* var_78_2 = x9_10;
        }
        int64_t x8_15 = arg1[1];
        void* x10_10;
        if (x8_15 == x19)
        {
            x10_10 = x8_10;
        }
        else
        {
            uint64_t x12_12 = (((x8_15 + (!(x24) << 4)) - x23) >> 4);
            void* x11_8 = ((x8_15 - 0x10) - x19);
            void* x12_13;
            if ((x12_12 + 1) < 8)
            {
                x12_13 = x8_10;
            label_3d600:
                do
                {
                    *x12_13 = *x19;
                    *(x12_13 + 4) = *(x19 + 4);
                    *(x12_13 + 8) = *(x19 + 8);
                    int32_t x13_9 = *(x19 + 0xc);
                    x19 = (x19 + 0x10);
                    *(x12_13 + 0xc) = x13_9;
                    x12_13 = (x12_13 + 0x10);
                } while (x19 != x8_15);
            }
            else
            {
                if (x8_10 < ((x23 + ((x24 + x12_12) << 4)) + 0x10))
                {
                    x12_13 = x8_10;
                    if (x19 < ((x8_10 + (x12_12 << 4)) + 0x10))
                    {
                        goto label_3d600;
                    }
                }
                int64_t i_3 = ((x12_12 + 1) & 0x1ffffffffffffff8);
                int64_t x17_1 = (i_3 << 4);
                void* x15_1 = (x8_10 + 0x40);
                x12_13 = (x8_10 + x17_1);
                x19 = (x19 + x17_1);
                void* x16_2 = ((x23 + (x24 << 4)) + 0x40);
                int64_t i_2 = i_3;
                int64_t i;
                do
                {
                    v0_1 = *(x16_2 - 0x40);
                    v1_1 = *(x16_2 - 0x30);
                    v3_1 = *(x16_2 - 0x10);
                    v4_1 = *x16_2;
                    v5_1 = *(x16_2 + 0x10);
                    v6_1 = *(x16_2 + 0x20);
                    v7_1 = *(x16_2 + 0x30);
                    i = i_2;
                    i_2 = (i_2 - 8);
                    *(x15_1 - 0x20) = *(x16_2 - 0x20);
                    *(x15_1 - 0x10) = v3_1;
                    *(x15_1 - 0x40) = v0_1;
                    *(x15_1 - 0x30) = v1_1;
                    *(x15_1 + 0x20) = v6_1;
                    *(x15_1 + 0x30) = v7_1;
                    *x15_1 = v4_1;
                    *(x15_1 + 0x10) = v5_1;
                    x15_1 = (x15_1 + 0x80);
                    x16_2 = (x16_2 + 0x80);
                } while (i != 8);
                if ((x12_12 + 1) != i_3)
                {
                    goto label_3d600;
                }
            }
            x10_10 = ((x8_10 + (x11_8 & 0xfffffffffffffff0)) + 0x10);
            void* var_70_2 = x10_10;
        }
        *arg1 = x9_10;
        arg1[1] = x10_10;
        void* var_78_3 = x0_4;
        int64_t var_70_3 = x8_15;
        int64_t x10_12 = arg1[2];
        arg1[2] = (x0_2 + (x26_1 << 4));
        int64_t var_68_4 = x10_12;
        var_80 = x0_4;
        if (x8_15 != x0_4)
        {
            int64_t var_70_4 = (x8_15 + (!(((x8_15 - 0x10) - x0_4)) & 0xfffffffffffffff0));
        }
        if (x0_4 != 0)
        {
            operator delete(x0_4);
        }
        x19 = x8_10;
    }
    else if (x19 == x9)
    {
        void* x10_9 = (x23 + (x24 << 4));
        *x19 = *arg3;
        *(x10_9 + 4) = arg3[1];
        *(x10_9 + 8) = arg3[2];
        *(x10_9 + 0xc) = arg3[3];
        arg1[1] = (x19 + 0x10);
    }
    else
    {
        int128_t* x11_1 = (x9 - 0x10);
        int64_t x10_1 = (x9 - (x19 + 0x10));
        int128_t* x8_3 = x9;
        if (x11_1 < x9)
        {
            do
            {
                *x8_3 = *x11_1;
                *x8_3 = *x11_1;
                *(x8_3 + 4) = *(x11_1 + 4);
                *(x8_3 + 8) = *(x11_1 + 8);
                int32_t x12_4 = *(x11_1 + 0xc);
                x11_1 = &x11_1[1];
                *(x8_3 + 0xc) = x12_4;
                x8_3 = (arg1[1] + 0x10);
                arg1[1] = x8_3;
            } while (x11_1 < x9);
        }
        if (x10_1 != 0)
        {
            int64_t i_1 = ((x10_1 >> 4) << 4);
            void* x9_1 = (x9 - 8);
            do
            {
                void* x11_2 = (x19 + i_1);
                int32_t x13_1 = *(x11_2 - 0x10);
                i_1 = (i_1 - 0x10);
                *(x11_2 - 0x10) = *(x9_1 - 8);
                *(x9_1 - 8) = x13_1;
                int32_t x13_2 = *(x11_2 - 0xc);
                *(x11_2 - 0xc) = *(x9_1 - 4);
                *(x9_1 - 4) = x13_2;
                int32_t x13_3 = *(x11_2 - 8);
                *(x11_2 - 8) = *x9_1;
                *x9_1 = x13_3;
                int32_t x13_4 = *(x11_2 - 4);
                *(x11_2 - 4) = *(x9_1 + 4);
                *(x9_1 + 4) = x13_4;
                x9_1 = (x9_1 - 0x10);
            } while (i_1 != 0);
        }
        int32_t* x8_5;
        if (x8_3 > arg3)
        {
            x8_5 = &arg3[4];
        }
        else
        {
            x8_5 = arg3;
        }
        int32_t* x8_6;
        if (x19 > arg3)
        {
            x8_6 = arg3;
        }
        else
        {
            x8_6 = x8_5;
        }
        void* x10_3 = (x23 + (x24 << 4));
        *x19 = *x8_6;
        *(x10_3 + 4) = x8_6[1];
        *(x10_3 + 8) = x8_6[2];
        *(x10_3 + 0xc) = x8_6[3];
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

int64_t feasibal_region::ground_process::optimizeOrganizePointCloudByCell(void* arg1, void* arg2, float arg3, float arg4, int32_t arg5 @ v2, int32_t arg6 @ v3, int32_t arg7 @ v4, float arg8)
{
    uint64_t x8 = *(arg2 + 8);
    if (x8 >= 1)
    {
        uint64_t i_2 = *(arg2 + 0xc);
        int64_t x11_1 = *(arg1 + 0x230);
        int32_t* x12_1 = *(arg1 + 0x2b8);
        int32_t* x13_1 = *(arg1 + 0x318);
        char* x14_1 = *(arg1 + 0x438);
        int16_t* x15_1 = *(arg2 + 0x10);
        int32_t* x16_1 = *(arg1 + 0x258);
        int64_t x17_2 = **(arg1 + 0x2f0);
        int64_t x0 = **(arg1 + 0x350);
        int64_t x1 = **(arg1 + 0x470);
        int64_t x2_2 = **(arg2 + 0x48);
        int64_t x3_2 = **(arg1 + 0x290);
        int32_t x6_1 = (x8 * i_2);
        int64_t x9_1 = 0;
        int64_t x4_2 = (x11_1 + (x6_1 << 2));
        int32_t* x5_2 = (x11_1 + (x6_1 << 3));
        do
        {
            uint64_t i_1 = i_2;
            int16_t* x7_1 = x15_1;
            int32_t* x19_1 = x16_1;
            char* x20_1 = x14_1;
            int32_t* x21_1 = x12_1;
            int32_t* x22_1 = x13_1;
            if (i_2 >= 1)
            {
                uint64_t i;
                do
                {
                    uint64_t x23_1 = *x19_1;
                    if (*x20_1 == 0)
                    {
                        uint64_t x24_2 = (x23_1 << 2);
                        arg8 = -1f;
                        *(x11_1 + x24_2) = 0;
                        *(x4_2 + x24_2) = 0;
                        *(x5_2 + x24_2) = 0;
                    }
                    else
                    {
                        arg5 = *x7_1;
                        /* unimplemented  {sxtl v2.4s, v2.4h} */;
                        /* unimplemented  {scvtf s5, s2} */;
                    }
                    arg5 = 0f;
                    arg6 = 0f;
                    arg7 = 0f;
                    if (!(arg8 <= arg3))
                    {
                        arg7 = arg8;
                        arg5 = (arg8 * *x21_1);
                        arg6 = (arg8 * *x22_1);
                    }
                    uint64_t x23_2 = (x23_1 << 2);
                    x22_1 = &x22_1[1];
                    x21_1 = &x21_1[1];
                    x20_1 = &x20_1[1];
                    x19_1 = &x19_1[1];
                    i = i_1;
                    i_1 = (i_1 - 1);
                    x7_1 = &x7_1[1];
                    *(x11_1 + x23_2) = arg5;
                    *(x4_2 + x23_2) = arg6;
                    *(x5_2 + x23_2) = arg7;
                } while (i != 1);
            }
            x9_1 = (x9_1 + 1);
            x13_1 = (x13_1 + x0);
            x12_1 = (x12_1 + x17_2);
            x14_1 = &x14_1[x1];
            x16_1 = (x16_1 + x3_2);
            x15_1 = (x15_1 + x2_2);
        } while (x9_1 != x8);
    }
    return 0;
}

int64_t feasibal_region::createDirectory(char* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    uint64_t x8_1 = *arg1;
    uint32_t x9;
    if ((x8_1 & 1) != 0)
    {
        x9 = *(arg1 + 8);
    }
    else
    {
        x9 = (x8_1 >> 1);
    }
    int128_t s;
    __builtin_memset(&s, 0, 0x100);
    int32_t x0_3;
    if (x9 >= 1)
    {
        int64_t x21_1 = 0;
        void* x9_1 = &arg1[1];
        if ((x8_1 & 1) == 0)
        {
            goto label_3d8cc;
        }
        while (true)
        {
            x9_1 = *(arg1 + 0x10);
        label_3d8cc:
            uint32_t x8_3 = *(x9_1 + x21_1);
            *(&s + x21_1) = x8_3;
            if (((x8_3 == 0x5c || x8_3 == 0x2f) && access(&s, 0) == 0xffffffff))
            {
                x0_3 = mkdir(&s, 0x1ed);
                if (x0_3 == 0xffffffff)
                {
                    goto label_3d924;
                }
            }
            x21_1 = (x21_1 + 1);
            if (x21_1 >= x9)
            {
                break;
            }
            x9_1 = &arg1[1];
            if ((*arg1 & 1) == 0)
            {
                goto label_3d8cc;
            }
        }
    }
    x0_3 = 0;
label_3d924:
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_3;
}

int32_t* std::__ndk1::vector<float, std::__ndk1::allocator<float> >::insert(int64_t* arg1, int32_t* arg2, int32_t* arg3)
{
    int64_t x22 = *arg1;
    int32_t* x8 = arg1[1];
    int64_t x9 = arg1[2];
    int32_t* x21 = arg3;
    int32_t* x19 = arg2;
    void* x27 = (arg2 - x22);
    int64_t x24 = (x27 >> 2);
    if (x8 >= x9)
    {
        int64_t x26_1;
        if (((((x8 - x22) >> 2) + 1) >> 0x3e) != 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
        else
        {
            int64_t x9_3 = (x9 - x22);
            void* x23_1;
            if (0x1fffffffffffffff <= (x9_3 >> 2))
            {
                x26_1 = 0x3fffffffffffffff;
            }
            else
            {
                int64_t x9_4 = (x9_3 >> 1);
                if (x9_4 < (((x8 - x22) >> 2) + 1))
                {
                    x26_1 = (((x8 - x22) >> 2) + 1);
                }
                else
                {
                    x26_1 = x9_4;
                }
                if (x26_1 == 0)
                {
                    x23_1 = nullptr;
                }
                else if ((x26_1 >> 0x3e) != 0)
                {
                    sub_20e70();
                    /* no return */
                }
            }
            if ((0x1fffffffffffffff <= (x9_3 >> 2) || (0x1fffffffffffffff > (x9_3 >> 2) && x26_1 != 0)))
            {
                x23_1 = operator new((x26_1 << 2));
            }
            int32_t* x25_1 = (x23_1 + (x24 << 2));
            void* x26_2 = (x23_1 + (x26_1 << 2));
            if (x24 != x26_1)
            {
            label_3dbb0:
                void* x2_1 = (x19 - x22);
                *x25_1 = *x21;
                void* x21_2 = &x25_1[1];
                void* x23_2 = (x25_1 - x2_1);
                if (x2_1 >= 1)
                {
                    memcpy(x23_2, x22, x2_1);
                }
                size_t x22_1 = (arg1[1] - x19);
                if (x22_1 >= 1)
                {
                    memcpy(x21_2, x19, x22_1);
                    x21_2 = (x21_2 + x22_1);
                }
                void* x0_9 = *arg1;
                *arg1 = x23_2;
                arg1[1] = x21_2;
                arg1[2] = x26_2;
                if (x0_9 != 0)
                {
                    operator delete(x0_9);
                }
                x19 = x25_1;
            }
            else
            {
                if (x27 >= 1)
                {
                    int64_t x8_6;
                    if ((x24 + 1) < 0)
                    {
                        x8_6 = (x24 + 2);
                    }
                    else
                    {
                        x8_6 = (x24 + 1);
                    }
                    x25_1 = (x25_1 - ((x8_6 << 1) & 0xfffffffffffffffc));
                    goto label_3dbb0;
                }
                int64_t x24_1;
                if (x27 != 0)
                {
                    x24_1 = (x27 >> 1);
                }
                else
                {
                    x24_1 = 1;
                }
                int64_t x0_4;
                if (x24_1 == 0)
                {
                    x0_4 = 0;
                }
                if ((x24_1 != 0 && (x24_1 >> 0x3e) == 0))
                {
                    x0_4 = operator new((x24_1 << 2));
                }
                if ((x24_1 == 0 || (x24_1 != 0 && (x24_1 >> 0x3e) == 0)))
                {
                    x25_1 = (x0_4 + ((x24_1 >> 2) << 2));
                    x26_2 = (x0_4 + (x24_1 << 2));
                    if (x23_1 != 0)
                    {
                        operator delete(x23_1);
                        x22 = *arg1;
                    }
                    goto label_3dbb0;
                }
            }
        }
        if ((((((x8 - x22) >> 2) + 1) >> 0x3e) != 0 || (((((x8 - x22) >> 2) + 1) >> 0x3e) == 0 && x24 == x26_1)))
        {
            sub_20e70();
            /* no return */
        }
    }
    else if (x19 == x8)
    {
        *x19 = *x21;
        arg1[1] = &x19[1];
    }
    else
    {
        int32_t* x10_1 = (x8 - 4);
        size_t x2 = (x8 - &x19[1]);
        int64_t x9_2 = (x2 >> 2);
        if (x10_1 < x8)
        {
            int64_t x13_2 = !(x22);
            int32_t* x13_3;
            if ((((&x8[(-(x9_2) - x24)] + x13_2) >> 2) + 1) > 7)
            {
                uint64_t x13_5 = ((&x8[(-(x9_2) - x24)] + x13_2) >> 2);
                int64_t x15_1 = (x9_2 + x24);
                if (x8 < ((x22 + ((x15_1 + x13_5) << 2)) + 4))
                {
                    x13_3 = x8;
                    if (x10_1 < &x8[(x13_5 + 1)])
                    {
                        goto label_3db44;
                    }
                }
                int64_t i_2 = ((((&x8[(-(x9_2) - x24)] + x13_2) >> 2) + 1) & 0x7ffffffffffffff8);
                int64_t x16_1 = (i_2 << 2);
                int128_t* x15_2 = ((x22 + (x15_1 << 2)) + 0x10);
                x13_3 = (x8 + x16_1);
                x10_1 = (x10_1 + x16_1);
                void* x16_2 = &x8[4];
                int64_t i_1 = i_2;
                int64_t i;
                do
                {
                    int128_t v0 = x15_2[-1];
                    int128_t v1 = *x15_2;
                    x15_2 = &x15_2[2];
                    i = i_1;
                    i_1 = (i_1 - 8);
                    *(x16_2 - 0x10) = v0;
                    *x16_2 = v1;
                    x16_2 = (x16_2 + 0x20);
                } while (i != 8);
                if ((((&x8[(-(x9_2) - x24)] + x13_2) >> 2) + 1) != i_2)
                {
                    goto label_3db44;
                }
            }
            else
            {
                x13_3 = x8;
            label_3db44:
                do
                {
                    int32_t x12_3 = *x10_1;
                    x10_1 = &x10_1[1];
                    *x13_3 = x12_3;
                    x13_3 = &x13_3[1];
                } while (x10_1 < x8);
            }
            arg1[1] = &x8[((((x8 - (x9_2 << 2)) + !(x19)) >> 2) + 1)];
        }
        if (x2 != 0)
        {
            memmove((x8 - (x9_2 << 2)), x19, x2);
        }
        if ((x19 <= x21 && arg1[1] > x21))
        {
            x21 = &x21[1];
        }
        *x19 = *x21;
    }
    return x19;
}

int64_t cv::Mat_<uint8_t>::Mat_(int32_t* arg1, int32_t arg2, int32_t arg3, char* arg4)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    *arg1 = 0x42ff0000;
    *(arg1 + 4) = {0};
    __builtin_memset(&arg1[5], 0, 0x2c);
    *(arg1 + 0x50) = 0;
    *(arg1 + 0x58) = 0;
    *(arg1 + 0x40) = &arg1[2];
    *(arg1 + 0x48) = &arg1[0x14];
    int32_t var_68 = arg2;
    int32_t var_64 = arg3;
    cv::Mat::create(arg1, &*nullptr->ident.signature[2], &var_68);
    uint64_t v0;
    v0 = *arg4;
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    var_68 = vcvt_f64_u64(v0);
    int64_t x0_1 = cv::Mat::operator=(arg1);
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int64_t feasibal_region::ground_process::viewDreamVis() __pure
{
    return 0;
}

int64_t* feasibal_region::ground_process::drawResult(void* arg1, void* arg2, void* arg3, int32_t arg4, int128_t* arg5 @ x8)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int32_t var_e0 = 0x42ff0000;
    int128_t s;
    __builtin_memset(&s, 0, 0x3c);
    int64_t var_90;
    int64_t* var_98 = &var_90;
    var_90 = 0;
    int64_t var_88 = 0;
    int64_t s_1 = *(arg1 + 0x208);
    cv::Mat::create(&var_e0, &*nullptr->ident.signature[2], &s_1);
    __builtin_memset(&s_1, 0, 0x18);
    cv::Mat::operator=(&var_e0);
    int32_t x9_1 = *(arg1 + 0x208);
    if (x9_1 >= 1)
    {
        int64_t x14_1 = *(arg1 + 0x20c);
        int64_t i = 0;
        do
        {
            if (x14_1 >= 1)
            {
                int64_t x9_2 = 0;
                int64_t x10_1 = 0;
                int64_t x11_2 = (*s[0xc] + (*var_98 * i));
                void* x12_3 = (*(arg3 + 0x10) + (**(arg3 + 0x48) * i));
                void* x13_2 = (*(arg2 + 0x10) + (**(arg2 + 0x48) * i));
                do
                {
                    uint64_t x14_4 = *(x12_3 + x10_1);
                    uint8_t x14_9;
                    int32_t x15_11;
                    if (x14_4 == 0)
                    {
                        char* x14_10 = (x13_2 + x9_2);
                        *(x11_2 + x9_2) = *x14_10;
                        *(x11_2 + (x9_2 + 1)) = x14_10[1];
                        x14_9 = x14_10[2];
                        x15_11 = x9_2;
                    }
                    else
                    {
                        char* x16_2 = (x13_2 + x9_2);
                        *(x11_2 + x9_2) = ((*x16_2 >> 1) + (*(*(arg1 + 0x668) + ((x14_4 * 3) - 3)) >> 1));
                        *(x11_2 + (x9_2 + 1)) = ((x16_2[1] >> 1) + (*((*(arg1 + 0x668) + ((x14_4 * 3) - 3)) + 1) >> 1));
                        x15_11 = (x10_1 * 3);
                        x14_9 = ((x16_2[2] >> 1) + (*((*(arg1 + 0x668) + ((x14_4 * 3) - 3)) + 2) >> 1));
                    }
                    *((x11_2 + x15_11) + 2) = x14_9;
                    x14_1 = *(arg1 + 0x20c);
                    x10_1 = (x10_1 + 1);
                    x9_2 = (x9_2 + 3);
                } while (x10_1 < x14_1);
                x9_1 = *(arg1 + 0x208);
            }
            i = (i + 1);
        } while (i < x9_1);
    }
    s_1 = 0xc;
    __builtin_strncpy(&*s_1[1], "seg_rz", 0x17);
    int32_t var_f8 = 0x81010010;
    int64_t var_e8 = 0;
    int32_t* var_f0 = &var_e0;
    cv::imshow(&s_1, &var_f8);
    void* var_70;
    if ((s_1 & 1) != 0)
    {
        operator delete(var_70);
    }
    int128_t v0;
    int128_t s_2;
    int128_t v2;
    v0 = cv::waitKey(arg4);
    v0 = var_e0;
    s_2 = s;
    int128_t var_b0;
    int64_t x8_3 = *var_b0[8];
    *arg5 = v0;
    arg5[1] = s_2;
    int128_t var_cc;
    arg5[2] = var_cc;
    arg5[3] = var_b0;
    arg5[5] = 0;
    arg5[4] = (arg5 + 8);
    *(arg5 + 0x48) = &arg5[5];
    *(arg5 + 0x38) = x8_3;
    *(arg5 + 0x58) = 0;
    if (x8_3 != 0)
    {
        int32_t i_1;
        do
        {
            i_1 = __stlxr((__ldaxr((x8_3 + 0x14)) + 1), (x8_3 + 0x14));
        } while (i_1 != 0);
    }
    int64_t x8_8;
    if (((x8_3 == 0 && v0 <= 2) || (x8_3 != 0 && s <= 2)))
    {
        int64_t* x10_5 = *(arg5 + 0x48);
        *x10_5 = *var_98;
        x10_5[1] = var_98[1];
        x8_8 = *var_b0[8];
        if (x8_8 != 0)
        {
        label_3e050:
            int32_t temp0_2;
            int32_t i_2;
            do
            {
                temp0_2 = __ldaxr((x8_8 + 0x14));
                i_2 = __stlxr((temp0_2 - 1), (x8_8 + 0x14));
            } while (i_2 != 0);
            if (temp0_2 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if (((x8_3 == 0 && v0 > 2) || (x8_3 != 0 && s > 2)))
    {
        *(arg5 + 4) = 0;
        cv::Mat::copySize(arg5);
        x8_8 = *var_b0[8];
        if (x8_8 != 0)
        {
            goto label_3e050;
        }
    }
    *var_b0[8] = 0;
    __builtin_memset(&*s[0xc], 0, 0x20);
    if (s >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *((&var_e0 | 8) + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < s);
    }
    int64_t* x0_7 = var_98;
    if (x0_7 != &var_90)
    {
        x0_7 = cv::fastFree(x0_7);
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_7;
}

void feasibal_region::ground_process::organizePointCloudByCell(int32_t* arg1, int64_t* arg2, int64_t* arg3, void* arg4)
{
    uint64_t x8 = *(arg4 + 8);
    if (x8 >= 1)
    {
        uint64_t i_2 = *(arg4 + 0xc);
        int32_t* x14_1 = *arg3;
        int32_t* x12_1 = *(arg4 + 0x10);
        int64_t x13_1 = *arg2;
        int64_t x15_2 = **(arg4 + 0x48);
        int32_t x1 = (x8 * i_2);
        int32_t x9_1 = 0;
        int64_t x10_1 = 0;
        do
        {
            if (i_2 >= 1)
            {
                int32_t* x3 = (x13_1 + (x9_1 << 2));
                uint64_t i_1 = i_2;
                int32_t* x5_1 = x12_1;
                uint64_t i;
                do
                {
                    int64_t x6_1 = *x5_1;
                    x5_1 = &x5_1[1];
                    i = i_1;
                    i_1 = (i_1 - 1);
                    int64_t x6_2 = (x6_1 << 2);
                    *(x14_1 + x6_2) = *x3;
                    *(&x14_1[x1] + x6_2) = x3[x1];
                    int32_t x7_3 = x3[((x1 << 0x20) >> 0x1f)];
                    x3 = &x3[1];
                    *(&x14_1[(x1 * 2)] + x6_2) = x7_3;
                } while (i != 1);
            }
            x10_1 = (x10_1 + 1);
            x9_1 = (x9_1 + (i_2 & !((i_2 >> 0x1f))));
            x12_1 = (x12_1 + x15_2);
        } while (x10_1 != x8);
    }
}

int64_t feasibal_region::ground_process::projectPointCloud(int64_t arg1, void* arg2, void* arg3, void* arg4, cv::Mat* arg5, cv::Mat* arg6, int64_t* arg7, double arg8, float arg9, float arg10, float arg11, int64_t arg12 @ v4)
{
    void tpidr_el0;
    uint64_t x8 = _ReadStatusReg(tpidr_el0);
    int64_t x8_1 = *(x8 + 0x28);
    uint64_t x26 = *(arg2 + 8);
    uint64_t i_2 = *(arg2 + 0xc);
    int64_t var_1f0 = 0;
    int32_t var_200 = 0x1010000;
    void* var_1f8 = arg2;
    int64_t var_350 = 0;
    int32_t var_360 = 0x1010000;
    void* var_358 = arg4;
    cv::Mat* var_378 = arg5;
    int64_t var_370 = 0;
    int32_t var_380 = 0x2010000;
    cv::divide(&var_200, &var_360, &var_380, 0xffffffff, 1.0);
    cv::Mat* var_378_1 = arg6;
    int64_t var_370_1 = 0;
    var_380 = 0x2010000;
    int64_t var_1f0_1 = 0;
    var_200 = 0x1010000;
    void* var_1f8_1 = arg3;
    int64_t var_350_1 = 0;
    var_360 = 0x1010000;
    void* var_358_1 = arg4;
    cv::divide(&var_200, &var_360, &var_380, 0xffffffff, 1.0);
    cv::operator*(arg5, arg8);
    var_380 = arg10;
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    cv::operator+(&var_360, &var_380);
    *(*var_200 + 0x18)();
    cv::MatExpr::~MatExpr();
    cv::MatExpr::~MatExpr();
    cv::operator*(arg6, arg9);
    var_380 = arg11;
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    cv::operator+(&var_360, &var_380);
    *(*var_200 + 0x18)();
    cv::MatExpr::~MatExpr();
    int64_t x0_8 = cv::MatExpr::~MatExpr();
    if (x26 >= 1)
    {
        int64_t x14_1 = *arg7;
        int64_t x15_1 = arg7[1];
        int32_t* x9_1 = *(arg2 + 0x10);
        int32_t* x10_1 = *(arg3 + 0x10);
        int32_t* x11_1 = *(arg4 + 0x10);
        int32_t* x12_1 = *(arg5 + 0x10);
        float* x13_1 = *(arg6 + 0x10);
        int64_t x16_2 = **(arg2 + 0x48);
        int64_t x17_2 = **(arg3 + 0x48);
        x0_8 = **(arg4 + 0x48);
        int64_t x1_5 = **(arg5 + 0x48);
        int64_t x2_3 = **(arg6 + 0x48);
        int64_t x8_6 = 0;
        float temp0_1 = vcvts_f32_s32(i_2);
        float temp0_2 = vcvts_f32_s32(x26);
        do
        {
            uint64_t i_1 = i_2;
            int32_t* x5 = x11_1;
            int32_t* x6 = x12_1;
            float* x7_1 = x13_1;
            int32_t* x19_1 = x9_1;
            int32_t* x20_1 = x10_1;
            if (i_2 >= 1)
            {
                int32_t i;
                do
                {
                    float v2 = *x5;
                    if (!(v2 <= arg12))
                    {
                        double v3;
                        v3 = *x6;
                        if (!(v3 <= 0f))
                        {
                            float v4 = *x7_1;
                            if ((!(v4 <= 0f) && (!(v3 >= temp0_1) && !(v4 >= temp0_2))))
                            {
                                /* unimplemented  {frintm s4, s4} */;
                                int32_t x21_1 = *x19_1;
                                v3 = (v3 + (v4 * temp0_1));
                                uint32_t temp0_3 = vcvts_s32_f32(v3);
                                *(x14_1 + (temp0_3 << 2)) = x21_1;
                                int64_t x22_2 = temp0_3;
                                *(x14_1 + ((x15_1 + x22_2) << 2)) = *x20_1;
                                *(x14_1 + (((x15_1 << 1) + x22_2) << 2)) = v2;
                            }
                        }
                    }
                    x20_1 = &x20_1[1];
                    x19_1 = &x19_1[1];
                    x7_1 = &x7_1[1];
                    x6 = &x6[1];
                    i = i_1;
                    i_1 = (i_1 - 1);
                    x5 = &x5[1];
                } while (i != 1);
            }
            x8_6 = (x8_6 + 1);
            x10_1 = (x10_1 + x17_2);
            x9_1 = (x9_1 + x16_2);
            x13_1 = (x13_1 + x2_3);
            x12_1 = (x12_1 + x1_5);
            x11_1 = (x11_1 + x0_8);
        } while (x8_6 != x26);
    }
    if (*(x8 + 0x28) != x8_1)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_8;
}

void feasibal_region::ground_process::fillPointCloud(int64_t arg1, void* arg2, void* arg3, void* arg4, int64_t* arg5, int64_t arg6 @ v0)
{
    uint64_t x8 = *(arg2 + 8);
    if (x8 >= 1)
    {
        int64_t x10_1 = *(arg2 + 0xc);
        int32_t* x14_1 = *arg5;
        int64_t x15_1 = arg5[1];
        int32_t* x11_1 = *(arg2 + 0x10);
        int32_t* x12_1 = *(arg3 + 0x10);
        int32_t* x13_1 = *(arg4 + 0x10);
        int64_t x16_2 = **(arg2 + 0x48);
        int64_t x17_2 = **(arg3 + 0x48);
        arg1 = **(arg4 + 0x48);
        int64_t x9_1 = 0;
        do
        {
            int64_t i_1 = (x10_1 & 0xffffffff);
            int32_t* x5_1 = x14_1;
            int32_t* x6_1 = x13_1;
            int32_t* x7_1 = x11_1;
            int32_t* x19_1 = x12_1;
            if (x10_1 >= 1)
            {
                int64_t i;
                do
                {
                    float v1 = *x6_1;
                    if (!(v1 <= arg6))
                    {
                        *x5_1 = *x7_1;
                        x5_1[x15_1] = *x19_1;
                        x5_1[(x15_1 * 2)] = v1;
                    }
                    x19_1 = &x19_1[1];
                    x7_1 = &x7_1[1];
                    x6_1 = &x6_1[1];
                    i = i_1;
                    i_1 = (i_1 - 1);
                    x5_1 = &x5_1[1];
                } while (i != 1);
            }
            x9_1 = (x9_1 + 1);
            x12_1 = (x12_1 + x17_2);
            x11_1 = (x11_1 + x16_2);
            x13_1 = (x13_1 + arg1);
            x14_1 = &x14_1[x10_1];
        } while (x9_1 != x8);
    }
}

int64_t virtual_thunk_to_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> >::~basic_ofstream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    *x19 = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(x19 + 0xb0) = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::~basic_ostream(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::~basic_ostream(void* arg1)
{
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t virtual_thunk_to_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::~basic_ostream()(int64_t* arg1)
{
    *(*arg1 - 0x18);
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t virtual_thunk_to_std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::~basic_ostream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> >::~basic_ofstream(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x16] = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t virtual_thunk_to_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> >::~basic_ofstream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    *x19 = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(x19 + 0xb0) = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf(void** arg1)
{
    FILE* x20 = arg1[0xf];
    *arg1 = (_vtable_for_std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> > + 0x10);
    if (x20 != 0)
    {
        std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::sync();
        if (fclose(x20) == 0)
        {
            arg1[0xf] = 0;
        }
        *(*arg1 + 0x18)(arg1, 0, 0);
    }
    if (arg1[0x14] != 0)
    {
        void* x0_4 = arg1[8];
        if (x0_4 != 0)
        {
            operator delete[](x0_4);
        }
    }
    if (*(arg1 + 0xa1) != 0)
    {
        void* x0_5 = arg1[0xd];
        if (x0_5 != 0)
        {
            operator delete[](x0_5);
        }
    }
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t sub_3e88c(void* arg1, int64_t* arg2 @ x19, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7)
{
    __cxa_begin_catch(arg1);
    __cxa_end_catch();
    if (arg2[0x14] != 0)
    {
        void* x0_1 = arg2[8];
        if (x0_1 != 0)
        {
            operator delete[](x0_1);
        }
    }
    if (*(arg2 + 0xa1) != 0)
    {
        void* x0_2 = arg2[0xd];
        if (x0_2 != 0)
        {
            operator delete[](x0_2);
        }
    }
    *arg2 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t sub_3e894(void* arg1, int64_t* arg2 @ x19, FILE* arg3 @ x20, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8)
{
    fclose(arg3);
    __cxa_begin_catch(arg1);
    __cxa_end_catch();
    if (arg2[0x14] != 0)
    {
        void* x0_2 = arg2[8];
        if (x0_2 != 0)
        {
            operator delete[](x0_2);
        }
    }
    if (*(arg2 + 0xa1) != 0)
    {
        void* x0_3 = arg2[0xd];
        if (x0_3 != 0)
        {
            operator delete[](x0_3);
        }
    }
    *arg2 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

void sub_3e8b0(void* arg1) __noreturn
{
    std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf();
    sub_20ac4(arg1);
    /* no return */
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf(void* arg1)
{
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return operator delete(arg1);
}

void* std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::imbue(int64_t* arg1, cv::Mat* arg2)
{
    *(*arg1 + 0x30)();
    int64_t* x0_1 = std::__ndk1::locale::use_facet(arg2);
    arg1[0x10] = x0_1;
    uint32_t x20_1 = *(arg1 + 0xa2);
    void* x0_2 = *(*x0_1 + 0x38)();
    int32_t x8_4 = (x0_2 & 1);
    *(arg1 + 0xa2) = x8_4;
    if (x20_1 != x8_4)
    {
        uint32_t x8_5 = arg1[0x14];
        __builtin_memset(&arg1[2], 0, 0x30);
        if ((x0_2 & 1) == 0)
        {
            int64_t x8_7;
            if (x8_5 == 0)
            {
                x8_7 = arg1[8];
                if (x8_7 != &arg1[0xb])
                {
                    uint64_t x0_4 = arg1[0xc];
                    *(arg1 + 0xa1) = 0;
                    arg1[0xd] = x8_7;
                    arg1[0xe] = x0_4;
                    x0_2 = operator new[](x0_4);
                    arg1[8] = x0_2;
                    arg1[0x14] = 1;
                }
            }
            if ((x8_5 != 0 || (x8_5 == 0 && x8_7 == &arg1[0xb])))
            {
                uint64_t x0_3 = arg1[0xc];
                arg1[0xe] = x0_3;
                x0_2 = operator new[](x0_3);
                arg1[0xd] = x0_2;
                *(arg1 + 0xa1) = 1;
            }
        }
        else
        {
            if (x8_5 != 0)
            {
                x0_2 = arg1[8];
                if (x0_2 != 0)
                {
                    x0_2 = operator delete[](x0_2);
                }
            }
            char x8_6 = *(arg1 + 0xa1);
            int64_t x9_1 = arg1[0xd];
            int64_t x10_1 = arg1[0xe];
            *(arg1 + 0xa1) = 0;
            arg1[0xe] = 0;
            arg1[0x14] = x8_6;
            arg1[0xc] = x10_1;
            arg1[0xd] = 0;
            arg1[8] = x9_1;
        }
    }
    return x0_2;
}

void* std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::setbuf(void* arg1, int64_t arg2, uint64_t arg3)
{
    uint32_t x8 = *(arg1 + 0xa0);
    __builtin_memset((arg1 + 0x10), 0, 0x30);
    if (x8 != 0)
    {
        void* x0 = *(arg1 + 0x40);
        if (x0 != 0)
        {
            operator delete[](x0);
        }
    }
    if (*(arg1 + 0xa1) != 0)
    {
        void* x0_1 = *(arg1 + 0x68);
        if (x0_1 != 0)
        {
            operator delete[](x0_1);
        }
    }
    *(arg1 + 0x60) = arg3;
    uint32_t x22;
    if (arg3 >= 9)
    {
        x22 = *(arg1 + 0xa2);
        if ((arg2 == 0 || (arg2 != 0 && x22 == 0)))
        {
            *(arg1 + 0x40) = operator new[](arg3);
            *(arg1 + 0xa0) = 1;
            if (x22 != 0)
            {
                goto label_3ea68;
            }
        }
        if ((arg2 != 0 && x22 != 0))
        {
            *(arg1 + 0x40) = arg2;
            *(arg1 + 0xa0) = 0;
        label_3ea68:
            *(arg1 + 0xa1) = 0;
            *(arg1 + 0x68) = 0;
            *(arg1 + 0x70) = 0;
        }
    }
    else
    {
        uint32_t x22_1 = *(arg1 + 0xa2);
        *(arg1 + 0x40) = (arg1 + 0x58);
        *(arg1 + 0x60) = 8;
        *(arg1 + 0xa0) = 0;
        if (x22_1 != 0)
        {
            goto label_3ea68;
        }
    }
    if ((arg3 < 9 || (arg3 >= 9 && (arg2 == 0 || (arg2 != 0 && x22 == 0)))))
    {
        uint64_t x0_5;
        if (arg3 > 8)
        {
            x0_5 = arg3;
        }
        else
        {
            x0_5 = 8;
        }
        *(arg1 + 0x70) = x0_5;
        if ((arg2 == 0 || (arg2 != 0 && x0_5 < 8)))
        {
            *(arg1 + 0x68) = operator new[](x0_5);
            *(arg1 + 0xa1) = 1;
        }
        if ((arg2 != 0 && x0_5 >= 8))
        {
            *(arg1 + 0x68) = arg2;
            *(arg1 + 0xa1) = 0;
        }
    }
    return arg1;
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::seekoff(int64_t* arg1, int64_t arg2, int32_t arg3)
{
    int64_t* x0 = arg1[0x10];
    if (x0 == 0)
    {
        sub_3f59c();
        /* no return */
    }
    int32_t x0_1 = *(*x0 + 0x30)();
    int64_t x8_2 = arg1[0xf];
    if (x8_2 != 0)
    {
        if ((arg2 == 0 || (arg2 != 0 && x0_1 >= 1)))
        {
            x8_2 = 0;
            if ((*(*arg1 + 0x30)(arg1) == 0 && arg3 <= 2))
            {
                off_t x1_1;
                if (x0_1 > 0)
                {
                    x1_1 = (x0_1 * arg2);
                }
                else
                {
                    x1_1 = 0;
                }
                if (fseeko(arg1[0xf], x1_1, arg3) != 0)
                {
                    goto label_3eb64;
                }
                ftello(arg1[0xf]);
                x8_2 = arg1[0x11];
            }
        }
        if ((arg2 != 0 && x0_1 < 1))
        {
        label_3eb64:
            x8_2 = 0;
        }
    }
    return x8_2;
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::seekpos(int64_t* arg1, int64_t arg2, off_t arg3)
{
    int32_t x0;
    int32_t x0_2;
    int64_t x20_1;
    if (arg1[0xf] != 0)
    {
        x20_1 = arg2;
        x0 = *(*arg1 + 0x30)();
        if (x0 == 0)
        {
            x0_2 = fseeko(arg1[0xf], arg3, 0);
            if (x0_2 == 0)
            {
                arg1[0x11] = x20_1;
            }
        }
    }
    if (((arg1[0xf] == 0 || (arg1[0xf] != 0 && x0 != 0)) || ((arg1[0xf] != 0 && x0 == 0) && x0_2 != 0)))
    {
        x20_1 = 0;
    }
    return x20_1;
}

uint64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::sync(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int32_t x20_2;
    if (arg1[0xf] == 0)
    {
    label_3edc0:
        x20_2 = 0;
    }
    else
    {
        int64_t* x0 = arg1[0x10];
        if (x0 == 0)
        {
            sub_3f59c();
            /* no return */
        }
        int32_t x8_2 = *(arg1 + 0x9c);
        if ((x8_2 & 0x10) != 0)
        {
            int32_t x0_2;
            if (arg1[6] != arg1[5])
            {
                x20_2 = -1;
                x0_2 = *(*arg1 + 0x68)(arg1, 0xffffffff);
            }
            if ((arg1[6] == arg1[5] || (arg1[6] != arg1[5] && x0_2 != 0xffffffff)))
            {
                int32_t i;
                int64_t x0_5;
                size_t x22_1;
                do
                {
                    i = *(*arg1[0x10] + 0x28)();
                    int64_t x0_4 = arg1[8];
                    int64_t var_50;
                    x22_1 = (var_50 - x0_4);
                    x0_5 = fwrite(x0_4, 1, x22_1, arg1[0xf]);
                    if (x0_5 != x22_1)
                    {
                        break;
                    }
                } while (i == 1);
                if (x0_5 != x22_1)
                {
                    goto label_3ed98;
                }
                if (i == 2)
                {
                    goto label_3ed98;
                }
                if (fflush(arg1[0xf]) == 0)
                {
                    goto label_3edc0;
                }
                goto label_3ed98;
            }
        }
        else
        {
            if ((x8_2 & 8) == 0)
            {
                goto label_3edc0;
            }
            int64_t x8_3 = arg1[0x12];
            int64_t x20_1;
            int32_t x21_1;
            if (*(arg1 + 0xa2) != 0)
            {
                x21_1 = 0;
                x20_1 = (arg1[4] - arg1[3]);
            }
            else
            {
                int32_t x0_8 = *(*x0 + 0x30)();
                x20_1 = (arg1[0xa] - arg1[9]);
                if (x0_8 >= 1)
                {
                    x21_1 = 0;
                    x20_1 = (x20_1 + ((arg1[4] - arg1[3]) * x0_8));
                }
                else if (arg1[3] == arg1[4])
                {
                    x21_1 = 0;
                }
                else
                {
                    int32_t x0_10 = *(*arg1[0x10] + 0x40)();
                    x21_1 = 1;
                    x20_1 = (((arg1[9] + x20_1) - x0_10) - arg1[8]);
                }
            }
            if (fseeko(arg1[0xf], -(x20_1), 1) == 0)
            {
                if (x21_1 != 0)
                {
                    arg1[0x11] = x8_3;
                }
                int64_t x8_22 = arg1[8];
                *(arg1 + 0x9c) = 0;
                __builtin_memset(&arg1[2], 0, 0x18);
                arg1[9] = x8_22;
                arg1[0xa] = x8_22;
                goto label_3edc0;
            }
        label_3ed98:
            x20_2 = -1;
        }
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_2;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::showmanyc() __pure
{
    return 0;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::xsgetn(int64_t* arg1, char* arg2, int64_t arg3)
{
    int64_t x19;
    if (arg3 < 1)
    {
        x19 = 0;
    }
    else
    {
        char* x21_1 = arg2;
        x19 = 0;
        do
        {
            int64_t x1 = arg1[3];
            int64_t x8_1 = arg1[4];
            size_t x23_1;
            if (x1 < x8_1)
            {
                size_t x8_2 = (x8_1 - x1);
                size_t x9_1 = (arg3 - x19);
                size_t x8_3;
                if (x9_1 < x8_2)
                {
                    x8_3 = x9_1;
                }
                else
                {
                    x8_3 = x8_2;
                }
                if (x8_3 < 0x7fffffff)
                {
                    x23_1 = x8_3;
                }
                else
                {
                    x23_1 = 0x7fffffff;
                }
                if (x23_1 != 0)
                {
                    memcpy(x21_1, x1, x23_1);
                    x1 = arg1[3];
                }
                x21_1 = &x21_1[x23_1];
                arg1[3] = (x1 + x23_1);
            }
            else
            {
                int32_t x0_2 = *(*arg1 + 0x50)(arg1, x1);
                if (x0_2 == 0xffffffff)
                {
                    break;
                }
                *x21_1 = x0_2;
                x21_1 = &x21_1[1];
                x23_1 = 1;
            }
            x19 = (x23_1 + x19);
        } while (x19 < arg3);
    }
    return x19;
}

uint64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::underflow(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    uint64_t x0;
    if (arg1[0xf] == 0)
    {
        x0 = 0xffffffff;
    }
    else
    {
        char* x8_6;
        int32_t x9_2;
        if ((*(arg1 + 0x9c) & 8) != 0)
        {
            x8_6 = arg1[3];
            x9_2 = 0;
        }
        else
        {
            uint32_t x8_3 = *(arg1 + 0xa2);
            __builtin_memset(&arg1[5], 0, 0x18);
            int64_t x9_1;
            if (x8_3 == 0)
            {
                x9_1 = 0x70;
            }
            else
            {
                x9_1 = 0x60;
            }
            int64_t x8_4;
            if (x8_3 == 0)
            {
                x8_4 = 0x68;
            }
            else
            {
                x8_4 = 0x40;
            }
            void* x10_1 = *(arg1 + x8_4);
            int64_t x8_5 = *(arg1 + x9_1);
            *(arg1 + 0x9c) = 8;
            x9_2 = 1;
            x8_6 = (x10_1 + x8_5);
            arg1[2] = x10_1;
            arg1[3] = x8_6;
            arg1[4] = x8_6;
        }
        void var_4c;
        if ((((*(arg1 + 0x9c) & 8) != 0 && x8_6 == 0) || ((*(arg1 + 0x9c) & 8) == 0 && x8_6 == 0)))
        {
            x8_6 = (&var_4c | 1);
            arg1[2] = &var_4c;
            arg1[3] = x8_6;
            arg1[4] = x8_6;
            if (x9_2 == 0)
            {
                goto label_3ef90;
            }
            goto label_3ef50;
        }
        if ((((*(arg1 + 0x9c) & 8) != 0 && x8_6 != 0) || ((*(arg1 + 0x9c) & 8) == 0 && x8_6 != 0)))
        {
            size_t x20_1;
            if (x9_2 == 0)
            {
            label_3ef90:
                int64_t x9_4 = arg1[4];
                int64_t x10_3 = (x9_4 - arg1[2]);
                int64_t x10_4;
                if (x10_3 < 0)
                {
                    x10_4 = (x10_3 + 1);
                }
                else
                {
                    x10_4 = x10_3;
                }
                size_t x10_5 = (x10_4 >> 1);
                if (x10_5 < 4)
                {
                    x20_1 = x10_5;
                }
                else
                {
                    x20_1 = 4;
                }
                if (x8_6 == x9_4)
                {
                    goto label_3efc0;
                }
                goto label_3ef5c;
            }
        label_3ef50:
            x20_1 = 0;
            void* x24_1;
            if (x8_6 != arg1[4])
            {
            label_3ef5c:
                x0 = *x8_6;
                x24_1 = &arg1[2];
            }
            else
            {
            label_3efc0:
                x24_1 = &arg1[2];
                memmove(*x24_1, (x8_6 - x20_1), x20_1);
                char* x8_11;
                void* x9_6;
                if (*(x24_1 + 0x92) == 0)
                {
                    int64_t x1_2 = arg1[9];
                    int64_t x9_7 = arg1[0xa];
                    if (x9_7 != x1_2)
                    {
                        memmove(arg1[8], x1_2, (x9_7 - x1_2));
                        x1_2 = arg1[9];
                        x9_7 = arg1[0xa];
                    }
                    int64_t x8_12 = arg1[8];
                    int64_t x0_5 = (x8_12 + (x9_7 - x1_2));
                    arg1[9] = x0_5;
                    int64_t x9_9;
                    if (x8_12 == &arg1[0xb])
                    {
                        x9_9 = 8;
                    }
                    else
                    {
                        x9_9 = arg1[0xc];
                    }
                    int64_t x10_7 = arg1[0x11];
                    int64_t x8_13 = (x8_12 + x9_9);
                    size_t x11_1 = (x8_13 - x0_5);
                    int64_t x9_10 = arg1[0xe];
                    FILE* x3_2 = arg1[0xf];
                    arg1[0xa] = x8_13;
                    arg1[0x12] = x10_7;
                    size_t x8_14 = (x9_10 - x20_1);
                    size_t x2_4;
                    if (x11_1 < x8_14)
                    {
                        x2_4 = x11_1;
                    }
                    else
                    {
                        x2_4 = x8_14;
                    }
                    int64_t x0_6 = fread(x0_5, 1, x2_4, x3_2);
                    if (x0_6 == 0)
                    {
                        goto label_3f100;
                    }
                    int64_t* x0_7 = arg1[0x10];
                    if (x0_7 == 0)
                    {
                        sub_3f59c();
                        /* no return */
                    }
                    arg1[0xa] = (arg1[9] + x0_6);
                    if (*(*x0_7 + 0x20)() != 3)
                    {
                        void* var_58;
                        x9_6 = var_58;
                        x8_11 = (*x24_1 + x20_1);
                        if (x9_6 == x8_11)
                        {
                            goto label_3f100;
                        }
                        goto label_3f0f4;
                    }
                    x8_11 = arg1[8];
                    x9_6 = arg1[0xa];
                    arg1[2] = x8_11;
                    goto label_3f0f4;
                }
                int64_t x9_5 = arg1[2];
                int64_t x0_3 = fread((x9_5 + x20_1), 1, ((arg1[4] - x20_1) - x9_5), arg1[0xf]);
                if (x0_3 == 0)
                {
                label_3f100:
                    x0 = 0xffffffff;
                }
                else
                {
                    x8_11 = (arg1[2] + x20_1);
                    x9_6 = &x8_11[x0_3];
                label_3f0f4:
                    arg1[3] = x8_11;
                    arg1[4] = x9_6;
                    x0 = *x8_11;
                }
            }
            if (*x24_1 == &var_4c)
            {
                __builtin_memset(&arg1[2], 0, 0x18);
            }
        }
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

uint32_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::uflow(int64_t* arg1)
{
    uint32_t x0 = *(*arg1 + 0x48)();
    if (x0 != 0xffffffff)
    {
        char* x8_2 = arg1[3];
        arg1[3] = &x8_2[1];
        x0 = *x8_2;
    }
    return x0;
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::pbackfail(void* arg1, int32_t arg2)
{
    if (*(arg1 + 0x78) != 0)
    {
        void* x9 = *(arg1 + 0x18);
        if (*(arg1 + 0x10) < x9)
        {
            char x0 = arg2;
            if (arg2 == 0xffffffff)
            {
                *(arg1 + 0x18) = (x9 - 1);
                return 0;
            }
            char* x9_1;
            if ((*(arg1 + 0x98) & 0x10) != 0)
            {
                x9_1 = (x9 - 1);
            }
            else
            {
                x9_1 = (x9 - 1);
            }
            if (((*(arg1 + 0x98) & 0x10) != 0 || ((*(arg1 + 0x98) & 0x10) == 0 && *x9_1 == x0)))
            {
                *(arg1 + 0x18) = x9_1;
                *x9_1 = x0;
                return x0;
            }
        }
    }
    return 0xffffffff;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::xsputn(int64_t* arg1, char* arg2, int64_t arg3)
{
    int64_t x21;
    if (arg3 < 1)
    {
        x21 = 0;
    }
    else
    {
        char* x20_1 = arg2;
        x21 = 0;
        while (true)
        {
            int64_t x0 = arg1[6];
            int64_t x8_1 = arg1[7];
            if (x0 >= x8_1)
            {
                if (*(*arg1 + 0x68)(arg1, *x20_1) == 0xffffffff)
                {
                    break;
                }
                x20_1 = &x20_1[1];
                x21 = (x21 + 1);
                if (x21 >= arg3)
                {
                    break;
                }
            }
            else
            {
                size_t x8_2 = (x8_1 - x0);
                size_t x9_1 = (arg3 - x21);
                size_t x23_1;
                if (x9_1 < x8_2)
                {
                    x23_1 = x9_1;
                }
                else
                {
                    x23_1 = x8_2;
                }
                if (x23_1 != 0)
                {
                    memcpy(x0, x20_1, x23_1);
                    x0 = arg1[6];
                }
                x20_1 = &x20_1[x23_1];
                x21 = (x23_1 + x21);
                arg1[6] = (x0 + x23_1);
                if (x21 >= arg3)
                {
                    break;
                }
            }
        }
    }
    return x21;
}

uint64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::overflow(void* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    uint64_t x0_2;
    if (*(arg1 + 0x78) == 0)
    {
    label_3f4c0:
        x0_2 = 0xffffffff;
    }
    else
    {
        int64_t x2_1;
        void* x25_2;
        int64_t x26_1;
        void* x27_2;
        if ((*(arg1 + 0x9c) & 0x10) != 0)
        {
            x25_2 = (arg1 + 0x28);
            x2_1 = *x25_2;
            x27_2 = (x25_2 + 0x10);
            x26_1 = *x27_2;
        }
        else
        {
            int64_t x8_3 = *(arg1 + 0x60);
            __builtin_memset((arg1 + 0x10), 0, 0x18);
            if (x8_3 < 9)
            {
                x25_2 = (arg1 + 0x28);
                *x25_2 = 0;
                x2_1 = 0;
                x26_1 = 0;
                x27_2 = (x25_2 + 0x10);
                *x27_2 = 0;
                *(x25_2 + 8) = 0;
            }
            else
            {
                if (*(arg1 + 0xa2) == 0)
                {
                    x2_1 = *(arg1 + 0x68);
                    x8_3 = *(arg1 + 0x70);
                }
                else
                {
                    x2_1 = *(arg1 + 0x40);
                }
                x26_1 = ((x2_1 + x8_3) - 1);
                x25_2 = (arg1 + 0x28);
                *(arg1 + 0x28) = x2_1;
                *(arg1 + 0x30) = x2_1;
                x27_2 = (arg1 + 0x38);
                *(arg1 + 0x38) = x26_1;
            }
            *(arg1 + 0x9c) = 0x10;
        }
        void* x3_1 = *(arg1 + 0x30);
        int64_t x28_1 = x2_1;
        if (arg2 != 0xffffffff)
        {
            if (x3_1 == 0)
            {
                void var_6c;
                x3_1 = &var_6c;
                *(arg1 + 0x28) = &var_6c;
                *(arg1 + 0x30) = &var_6c;
                *(arg1 + 0x38) = (&var_6c | 1);
            }
            *x3_1 = arg2;
            x2_1 = *(arg1 + 0x28);
            x3_1 = (*(arg1 + 0x30) + 1);
            *(arg1 + 0x30) = x3_1;
        }
        void* x21_1 = (x3_1 - x2_1);
        if (x3_1 != x2_1)
        {
            int64_t x0;
            FILE* x3_2;
            if (*(arg1 + 0xa2) != 0)
            {
                x3_2 = *(arg1 + 0x78);
                x0 = x2_1;
            }
            else
            {
                int64_t x5_1 = *(arg1 + 0x40);
                int64_t* x0_3 = *(arg1 + 0x80);
                int64_t var_80;
                int64_t x8_10;
                int32_t i;
                if (x0_3 != 0)
                {
                    int32_t i_1 = *(*x0_3 + 0x18)();
                    x8_10 = *(arg1 + 0x28);
                    if (var_80 == x8_10)
                    {
                        goto label_3f4c0;
                    }
                    i = i_1;
                    int64_t x0_5;
                    int64_t* x0_6;
                    size_t x23_1;
                    while (i != 3)
                    {
                        if (i > 1)
                        {
                            break;
                        }
                        int64_t x0_4 = *(arg1 + 0x40);
                        x23_1 = (x5_1 - x0_4);
                        x0_5 = fwrite(x0_4, 1, x23_1, *(arg1 + 0x78));
                        if (x0_5 != x23_1)
                        {
                            break;
                        }
                        if (i != 1)
                        {
                            break;
                        }
                        int64_t x3_4 = *(arg1 + 0x30);
                        *x25_2 = var_80;
                        *x27_2 = x3_4;
                        x0_6 = *(arg1 + 0x80);
                        *(arg1 + 0x30) = x3_4;
                        if (x0_6 == 0)
                        {
                            break;
                        }
                        int32_t i_2 = *(*x0_6 + 0x18)();
                        x8_10 = *(arg1 + 0x28);
                        i = i_2;
                        if (var_80 == x8_10)
                        {
                            break;
                        }
                    }
                    if (i == 3)
                    {
                        x3_2 = *(arg1 + 0x78);
                        x0 = x8_10;
                        x21_1 = (*(arg1 + 0x30) - x8_10);
                    }
                    else if (!(((x0_5 == x23_1 && i == 1) && x0_6 == 0)))
                    {
                        if ((i != 3 && i > 1))
                        {
                            goto label_3f4c0;
                        }
                        goto label_3f3d0;
                    }
                }
                if ((x0_3 == 0 || ((x0_3 != 0 && var_80 != x8_10) && i != 3)))
                {
                    sub_3f59c();
                    /* no return */
                }
            }
            if (fwrite(x0, 1, x21_1, x3_2) != x21_1)
            {
                goto label_3f4c0;
            }
        label_3f3d0:
            *(arg1 + 0x30) = x28_1;
            *x25_2 = x28_1;
            *x27_2 = x26_1;
        }
        if (arg2 == 0xffffffff)
        {
            x0_2 = 0;
        }
        else
        {
            x0_2 = arg2;
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_2;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::~basic_streambuf(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::~locale();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::imbue() __pure
{
    return;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::setbuf() __pure
{
    return;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::seekoff() __pure
{
    return 0;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::seekpos() __pure
{
    return 0;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::sync() __pure
{
    return 0;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::underflow() __pure
{
    return 0xffffffff;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::pbackfail() __pure
{
    return 0xffffffff;
}

int64_t std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> >::overflow() __pure
{
    return 0xffffffff;
}

void sub_3f59c() __noreturn
{
    void* thrown_exception = __cxa_allocate_exception(8);
    std::bad_cast::bad_cast();
    __cxa_throw(thrown_exception, _typeinfo_for_std::bad_cast, std::bad_cast::~bad_cast);
    /* no return */
}

int64_t virtual_thunk_to_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    *x19 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(x19 + 0xb8) = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::~basic_istream(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::~basic_istream(void* arg1)
{
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t virtual_thunk_to_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::~basic_istream()(int64_t* arg1)
{
    *(*arg1 - 0x18);
    /* tailcall */
    return std::__ndk1::ios_base::~ios_base();
}

int64_t virtual_thunk_to_std::__ndk1::basic_istream<char, std::__ndk1::char_traits<char> >::~basic_istream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    arg1[0x17] = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(arg1);
}

int64_t virtual_thunk_to_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> >::~basic_ifstream()(int64_t* arg1)
{
    void* x19 = (arg1 + *(*arg1 - 0x18));
    *x19 = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(x19 + 0xb8) = (_vtable_for_std::__ndk1::basic_ifstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    /* tailcall */
    return operator delete(x19);
}

int64_t std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::basic_filebuf(void** arg1)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    *arg1 = (_vtable_for_std::__ndk1::basic_streambuf<char, std::__ndk1::char_traits<char> > + 0x10);
    std::__ndk1::locale::locale();
    __builtin_memset(&arg1[2], 0, 0x48);
    __builtin_memset(&arg1[0x10], 0, 0x23);
    *arg1 = (_vtable_for_std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> > + 0x10);
    __builtin_memset(&arg1[0xc], 0, 0x20);
    void var_50;
    std::__ndk1::locale::locale(&var_50);
    int32_t x0_3 = std::__ndk1::locale::has_facet(&var_50);
    std::__ndk1::locale::~locale();
    if ((x0_3 & 1) != 0)
    {
        std::__ndk1::locale::locale(&var_50);
        arg1[0x10] = std::__ndk1::locale::use_facet(&var_50);
        std::__ndk1::locale::~locale();
        *(arg1 + 0xa2) = (*(*arg1[0x10] + 0x38)() & 1);
    }
    int64_t x0_10 = *(*arg1 + 0x18)(arg1, 0, 0x1000);
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_10;
}

int64_t* std::__ndk1::getline<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(int64_t* arg1, char* arg2, char arg3)
{
    void* x8 = *arg1;
    void* x0 = (arg1 + *(x8 - 0x18));
    if (*(x0 + 0x20) != 0)
    {
        std::__ndk1::ios_base::clear(x0);
    }
    else
    {
        if (*(x0 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8 = *arg1;
        }
        if ((*(x0 + 0x88) == 0 || (*(x0 + 0x88) != 0 && *((arg1 + *(x8 - 0x18)) + 0x20) == 0)))
        {
            if ((*arg2 & 1) != 0)
            {
                **(arg2 + 0x10) = 0;
                *(arg2 + 8) = 0;
            }
            else
            {
                *arg2 = 0;
            }
            int64_t x22_1 = 0;
            while (true)
            {
                int64_t* x0_2 = *(&arg1[5] + *(x8 - 0x18));
                char* x8_2 = x0_2[3];
                uint32_t x8_3;
                if (x8_2 != x0_2[4])
                {
                    x0_2[3] = &x8_2[1];
                    x8_3 = *x8_2;
                }
                else
                {
                    uint32_t x0_3 = *(*x0_2 + 0x50)();
                    x8_3 = x0_3;
                    if ((x0_3 == 0xffffffff && x22_1 != 0))
                    {
                        break;
                    }
                }
                if ((x8_3 & 0xff) == arg3)
                {
                    break;
                }
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(arg2);
                if (((*arg2 & 1) != 0 && *(arg2 + 8) == -0x11))
                {
                    break;
                }
                x8 = *arg1;
                x22_1 = (x22_1 - 1);
            }
            void* x0_5 = (arg1 + *(*arg1 - 0x18));
            *(x0_5 + 0x20);
            std::__ndk1::ios_base::clear(x0_5);
        }
    }
    return arg1;
}

int64_t* sub_3f9c8(void* arg1, int64_t* arg2 @ x19, int64_t arg3, int64_t arg4, int64_t arg5, int64_t arg6, int64_t arg7, int64_t arg8)
{
    __cxa_begin_catch(arg1);
    *(*arg2 - 0x18);
    std::__ndk1::ios_base::__set_badbit_and_consider_rethrow();
    __cxa_end_catch();
    return arg2;
}

void sub_3f9f0(int64_t arg1) __noreturn
{
    __cxa_end_catch();
    sub_20ac4(_Unwind_Resume(arg1));
    /* no return */
}

void std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::push_back(char* arg1, char arg2)
{
    uint64_t x8 = *arg1;
    size_t x21;
    uint64_t x25;
    if ((x8 & 1) == 0)
    {
        x25 = (x8 >> 1);
        x21 = 0x16;
    }
    else
    {
        x25 = *(arg1 + 8);
        x21 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    void* x23;
    if ((((x8 & 1) == 0 && x25 != 0x16) || ((x8 & 1) != 0 && x25 != x21)))
    {
        if ((x8 & 1) == 0)
        {
            *arg1 = ((x25 << 1) + 2);
            x23 = &arg1[1];
        label_3fb04:
            void* x8_8 = (x23 + x25);
            *x8_8 = arg2;
            *(x8_8 + 1) = 0;
            return;
        }
        x23 = *(arg1 + 0x10);
    label_3fb00:
        *(arg1 + 8) = (x25 + 1);
        goto label_3fb04;
    }
    if ((((x8 & 1) == 0 && x25 == 0x16) || ((x8 & 1) != 0 && x25 == x21)))
    {
        if (x21 == -0x11)
        {
            int64_t* x0_4;
            int64_t x1_1;
            int64_t x2_2;
            x0_4 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(x0_4, x1_1, x2_2);
        }
        void* x22_1;
        if ((x8 & 1) != 0)
        {
            x22_1 = *(arg1 + 0x10);
        }
        else
        {
            x22_1 = &arg1[1];
        }
        uint64_t x24_1;
        if (x21 > 0x7fffffffffffffe6)
        {
            x24_1 = -0x11;
        }
        else
        {
            int64_t x9_3 = (x21 << 1);
            int64_t x8_4;
            if ((x21 + 1) < x9_3)
            {
                x8_4 = x9_3;
            }
            else
            {
                x8_4 = (x21 + 1);
            }
            if (x8_4 >= 0x17)
            {
                x24_1 = ((x8_4 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x24_1 = 0x17;
            }
        }
        void* x0_1 = operator new(x24_1);
        x23 = x0_1;
        memcpy(x0_1, x22_1, x21);
        if (x21 != 0x16)
        {
            operator delete(x22_1);
        }
        *(arg1 + 0x10) = x23;
        *arg1 = (x24_1 | 1);
        goto label_3fb00;
    }
}

void Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    if (((arg2 == 0 || (arg2 != 0 && arg3 == 0)) || ((arg2 != 0 && arg3 != 0) && (0x7fffffffffffffff / arg3) >= arg2)))
    {
        int64_t x22_1 = (arg3 * arg2);
        if ((arg1[2] * arg1[1]) == x22_1)
        {
            goto label_3fc10;
        }
        free(*arg1);
        int64_t x8_5;
        if (x22_1 == 0)
        {
            x8_5 = 0;
        label_3fc0c:
            *arg1 = x8_5;
        label_3fc10:
            arg1[1] = arg2;
            arg1[2] = arg3;
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return;
        }
        if ((x22_1 >> 0x3e) == 0)
        {
            int64_t x22_2 = (x22_1 << 2);
            int64_t var_50;
            int32_t x9_2;
            if (posix_memalign(&var_50, 0x10, x22_2) == 0)
            {
                x8_5 = var_50;
                if (x8_5 == 0)
                {
                    x9_2 = 1;
                }
                else
                {
                    x9_2 = 0;
                }
                if (x22_2 == 0)
                {
                    goto label_3fc0c;
                }
            }
            else
            {
                x8_5 = 0;
                x9_2 = 1;
                var_50 = 0;
                if (x22_2 == 0)
                {
                    goto label_3fc0c;
                }
            }
            if (x9_2 == 0)
            {
                goto label_3fc0c;
            }
        }
    }
    void* thrown_exception = __cxa_allocate_exception(8);
    std::bad_alloc::bad_alloc();
    __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
    /* no return */
}

void* std::__ndk1::vector<cv::Vec<uint8_t, 3>, std::__ndk1::allocator<cv::Vec<uint8_t, 3> > >::__push_back_slow_path<cv::Vec<uint8_t, 3> const&>(int64_t* arg1, char* arg2)
{
    void* x20 = *arg1;
    char* x22 = arg1[1];
    int64_t x23 = ((x22 - x20) * -0x5555555555555555);
    if ((x23 + 1) >= 0x5555555555555556)
    {
        int64_t* x0_5;
        int64_t x1_1;
        int64_t x2_1;
        x0_5 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(x0_5, x1_1, x2_1);
    }
    int64_t x9 = ((arg1[2] - x20) * -0x5555555555555555);
    int64_t x24;
    if (x9 > 0x2aaaaaaaaaaaaaa9)
    {
        x24 = 0x5555555555555555;
    }
    else
    {
        int64_t x9_1 = (x9 << 1);
        if (x9_1 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_1;
        }
    }
    void* x0;
    if ((x9 > 0x2aaaaaaaaaaaaaa9 || (x9 <= 0x2aaaaaaaaaaaaaa9 && x24 != 0)))
    {
        x0 = operator new((x24 * 3));
    }
    if ((x9 <= 0x2aaaaaaaaaaaaaa9 && x24 == 0))
    {
        x0 = nullptr;
    }
    char* x8_3 = (x0 + (x23 * 3));
    *x8_3 = *arg2;
    x8_3[1] = arg2[1];
    x8_3[2] = arg2[2];
    if (x22 != x20)
    {
        do
        {
            x22 = &x22[-3];
            x8_3 = &x8_3[-3];
            *x8_3 = *x22;
            x8_3[1] = x22[1];
            x8_3[2] = x22[2];
        } while (x20 != x22);
        x20 = *arg1;
    }
    *arg1 = x8_3;
    arg1[1] = &x8_3[3];
    arg1[2] = (x0 + (x24 * 3));
    if (x20 == 0)
    {
        return x0;
    }
    /* tailcall */
    return operator delete(x20);
}

void Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    if (((arg2 == 0 || (arg2 != 0 && arg3 == 0)) || ((arg2 != 0 && arg3 != 0) && (0x7fffffffffffffff / arg3) >= arg2)))
    {
        int64_t x21_1 = (arg3 * arg2);
        if (arg1[1] == x21_1)
        {
            goto label_3fe34;
        }
        free(*arg1);
        int64_t x8_4;
        if (x21_1 == 0)
        {
            x8_4 = 0;
        label_3fe30:
            *arg1 = x8_4;
        label_3fe34:
            arg1[1] = arg2;
            if (*(x22 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return;
        }
        if ((x21_1 >> 0x3e) == 0)
        {
            int64_t x21_2 = (x21_1 << 2);
            int64_t var_40;
            int32_t x9_1;
            if (posix_memalign(&var_40, 0x10, x21_2) == 0)
            {
                x8_4 = var_40;
                if (x8_4 == 0)
                {
                    x9_1 = 1;
                }
                else
                {
                    x9_1 = 0;
                }
                if (x21_2 == 0)
                {
                    goto label_3fe30;
                }
            }
            else
            {
                x8_4 = 0;
                x9_1 = 1;
                var_40 = 0;
                if (x21_2 == 0)
                {
                    goto label_3fe30;
                }
            }
            if (x9_1 == 0)
            {
                goto label_3fe30;
            }
        }
    }
    void* thrown_exception = __cxa_allocate_exception(8);
    std::bad_alloc::bad_alloc();
    __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
    /* no return */
}

void Eigen::DenseStorage<float, -1, -1, 1, 0>::DenseStorage(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t* x20 = arg1;
    int64_t x8_2;
    if (arg2 == 0)
    {
        x8_2 = 0;
    }
    else
    {
        int32_t x9_1;
        int64_t x21_1;
        if ((arg2 >> 0x3e) == 0)
        {
            x21_1 = (arg2 << 2);
            int64_t var_40;
            arg1 = posix_memalign(&var_40, 0x10, x21_1);
            if (arg1 == 0)
            {
                x8_2 = var_40;
                if (x8_2 == 0)
                {
                    x9_1 = 1;
                }
                else
                {
                    x9_1 = 0;
                }
            }
            else
            {
                x8_2 = 0;
                x9_1 = 1;
                var_40 = 0;
            }
        }
        if (((arg2 >> 0x3e) != 0 || (((arg2 >> 0x3e) == 0 && ((arg1 != 0 && x21_1 != 0) || (arg1 == 0 && x21_1 != 0))) && x9_1 != 0)))
        {
            void* thrown_exception = __cxa_allocate_exception(8);
            std::bad_alloc::bad_alloc();
            __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
            /* no return */
        }
    }
    *x20 = x8_2;
    x20[1] = arg3;
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::reserve(void* arg1, int64_t arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    if (arg2 > (*(arg1 + 0x10) << 6))
    {
        void* s;
        __builtin_memset(&s, 0, 0x18);
        if ((arg2 & 0xffffffff80000000) != 0)
        {
            int64_t x0_3 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* s_1 = s;
            if (s_1 != 0)
            {
                operator delete(s_1);
            }
            int64_t* x0_6;
            int64_t* x1_1;
            int64_t* x2;
            x0_6 = _Unwind_Resume(x0_3);
            /* tailcall */
            return std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(x0_6, x1_1, x2);
        }
        void* x19_1 = arg1;
        s = operator new(((((arg2 - 1) >> 6) + 1) << 3));
        int64_t var_68_1 = 0;
        int64_t x8_4 = *x19_1;
        int64_t x9_1 = *(x19_1 + 8);
        int32_t var_40_1 = 0;
        int64_t var_48 = x8_4;
        int64_t var_58_1 = (x8_4 + ((x9_1 >> 3) & 0x1ffffffffffffff8));
        int32_t var_50_1 = (x9_1 & 0x3f);
        int128_t v0_1;
        int128_t v1_1;
        v0_1 = std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(&s, &var_48);
        v1_1 = *x19_1;
        *x19_1 = s;
        s = v1_1;
        int64_t x9_3 = *(x19_1 + 0x10);
        arg1 = v1_1;
        *(x19_1 + 0x10) = (((arg2 - 1) >> 6) + 1);
        int64_t var_60_2 = x9_3;
        if (arg1 != 0)
        {
            operator delete(arg1);
        }
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >::__construct_at_end<std::__ndk1::__bit_iterator<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false, 0ul> >(int64_t* arg1, int64_t* arg2, int64_t* arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int64_t* x19 = *arg2;
    uint64_t x23 = arg2[1];
    int64_t x8_1 = *arg3;
    uint64_t x9 = arg3[1];
    int64_t x10 = arg1[1];
    int64_t x24 = ((x9 - x23) + ((x8_1 - x19) << 3));
    int64_t x12_1 = (x24 + x10);
    arg1[1] = x12_1;
    int64_t* x11_3;
    if ((x10 == 0 || (x10 != 0 && ((x12_1 - 1) ^ (x10 - 1)) > 0x3f)))
    {
        x11_3 = *arg1;
        if (x12_1 > 0x40)
        {
            *(x11_3 + (((x12_1 - 1) >> 3) & 0x1ffffffffffffff8)) = 0;
        }
        else
        {
            *x11_3 = 0;
        }
    }
    if ((x10 != 0 && ((x12_1 - 1) ^ (x10 - 1)) <= 0x3f))
    {
        x11_3 = *arg1;
    }
    int32_t x10_1 = (x10 & 0x3f);
    void* x20 = (x11_3 + ((x10 >> 3) & 0x1ffffffffffffff8));
    if (x23 != x10_1)
    {
        int64_t var_78 = x8_1;
        int64_t* var_68 = x19;
        int32_t var_60_1 = x23;
        int32_t var_70_1 = x9;
        void* var_88 = x20;
        int32_t var_80_1 = x10_1;
        std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(&var_68, &var_78, &var_88);
    }
    else
    {
        if (x24 >= 1)
        {
            if (x23 != 0)
            {
                uint64_t x8_2 = (0x40 - x23);
                int64_t x11_4;
                if (x24 < x8_2)
                {
                    x11_4 = x24;
                }
                else
                {
                    x11_4 = x8_2;
                }
                int64_t x10_2 = *x19;
                x19 = &x19[1];
                x24 = (x24 - x11_4);
                int64_t x11_5 = (x11_4 + x23);
                int64_t x8_5 = ((-1 >> (x8_2 - x11_4)) & (-1 << x23));
                int64_t x12_9;
                if (x11_5 < 0)
                {
                    x12_9 = (x11_5 + 0x3f);
                }
                else
                {
                    x12_9 = x11_5;
                }
                int64_t x9_2 = (x12_9 >> 6);
                *x20 = ((*x20 & !(x8_5)) | (x10_2 & x8_5));
                x20 = (x20 + (x9_2 << 3));
                x23 = (x11_5 - (x9_2 << 6));
            }
            int64_t x26_1;
            if (x24 < 0)
            {
                x26_1 = (x24 + 0x3f);
            }
            else
            {
                x26_1 = x24;
            }
            int64_t x25_1 = (x26_1 >> 6);
            size_t x21_1 = (x25_1 << 3);
            memmove(x20, x19, x21_1);
            int64_t x8_10 = (x24 - (x26_1 & 0xffffffffffffffc0));
            x20 = (x20 + x21_1);
            if (x8_10 >= 1)
            {
                uint64_t x9_4 = (-1 >> -(x8_10));
                x23 = x8_10;
                *x20 = ((*x20 & !(x9_4)) | (x19[x25_1] & x9_4));
            }
        }
        void* var_98_1 = x20;
        int32_t var_90_1 = x23;
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void std::__ndk1::__copy_unaligned<std::__ndk1::vector<bool, std::__ndk1::allocator<bool> >, false>(int64_t* arg1, int64_t* arg2, int64_t* arg3, int64_t* arg4 @ x8)
{
    int64_t* x12 = *arg1;
    uint64_t x11 = arg1[1];
    int64_t i_1 = ((arg2[1] + ((*arg2 - x12) << 3)) - x11);
    int32_t x11_5;
    if (i_1 <= 0)
    {
        x11_5 = arg3[1];
    }
    else
    {
        int32_t* x10_2;
        if (x11 == 0)
        {
            x10_2 = &arg3[1];
            x11_5 = *x10_2;
        }
        else
        {
            uint64_t i_6 = (0x40 - x11);
            x10_2 = &arg3[1];
            uint64_t x17_1 = *x10_2;
            uint64_t i_2;
            if (i_1 < i_6)
            {
                i_2 = i_1;
            }
            else
            {
                i_2 = i_6;
            }
            int64_t* x1 = *arg3;
            uint64_t i_7 = (0x40 - x17_1);
            int64_t x12_2 = (((-1 >> (i_6 - i_2)) & (-1 << x11)) & *x12);
            uint64_t i_5;
            if (i_2 > i_7)
            {
                i_5 = i_7;
            }
            else
            {
                i_5 = i_2;
            }
            uint64_t x6_1;
            if (x17_1 > x11)
            {
                x6_1 = (x12_2 << (x17_1 - x11));
            }
            else
            {
                x6_1 = (x12_2 >> (x11 - x17_1));
            }
            uint64_t x15_8 = (i_2 - i_5);
            x11_5 = ((x17_1 + i_5) & 0x3f);
            i_1 = (i_1 - i_2);
            void* x16_4 = (x1 + (((i_5 + x17_1) >> 3) & 0x1ffffffffffffff8));
            *x1 = ((*x1 & !(((-1 >> (i_7 - i_5)) & (-1 << x17_1)))) | x6_1);
            *arg3 = x16_4;
            *x10_2 = x11_5;
            if (x15_8 >= 1)
            {
                *x16_4 = ((x12_2 >> (i_5 + arg1[1])) | (*x16_4 & !((-1 >> -(x15_8)))));
                x11_5 = x15_8;
                *x10_2 = x15_8;
            }
            x12 = (*arg1 + 8);
            *arg1 = x12;
        }
        uint64_t x13_3 = x11_5;
        int64_t x14_2 = (-1 << x13_3);
        if (i_1 >= 0x40)
        {
            int64_t i = i_1;
            do
            {
                int64_t* x3_1 = *arg3;
                int64_t x12_5 = *x12;
                i = (i - 0x40);
                *x3_1 = ((*x3_1 & !(x14_2)) | (x12_5 << x13_3));
                *arg3 = &x3_1[1];
                x3_1[1] = ((x3_1[1] & x14_2) | (x12_5 >> (0x40 - x11_5)));
                x12 = (*arg1 + 8);
                *arg1 = x12;
            } while (i > 0x3f);
            i_1 = (i_1 & 0x3f);
        }
        if (i_1 >= 1)
        {
            int64_t* x3_3 = *arg3;
            uint64_t i_4 = (0x40 - x11_5);
            int64_t i_3;
            if (i_1 > i_4)
            {
                i_3 = i_4;
            }
            else
            {
                i_3 = i_1;
            }
            int64_t x15_11 = (*x12 & (-1 >> -(i_1)));
            int64_t x9_2 = (i_1 - i_3);
            x11_5 = ((x11_5 + i_3) & 0x3f);
            void* x13_5 = (x3_3 + (((i_3 + x13_3) >> 3) & 0x1ffffffffffffff8));
            *x3_3 = ((*x3_3 & !(((-1 >> (i_4 - i_3)) & x14_2))) | (x15_11 << x13_3));
            *arg3 = x13_5;
            arg3[1] = x11_5;
            if (x9_2 >= 1)
            {
                *x13_5 = ((*x13_5 & !((-1 >> -(x9_2)))) | (x15_11 >> i_3));
                x11_5 = x9_2;
                *x10_2 = x9_2;
            }
        }
    }
    arg4[1] = x11_5;
    *arg4 = *arg3;
}

void* std::__ndk1::vector<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >, std::__ndk1::allocator<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > > > >::__push_back_slow_path<std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > > const&>(int64_t* arg1, void* arg2 @ x22)
{
    void* var_30 = arg2;
    int64_t x9 = *arg1;
    int64_t x20 = (((arg1[1] - x9) >> 3) * -0x5555555555555555);
    int64_t x23 = 0xaaaaaaaaaaaaaaa;
    if ((x20 + 1) > 0xaaaaaaaaaaaaaaa)
    {
        int64_t x0_7 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        if (arg2 != 0)
        {
            operator delete(arg2);
        }
        int64_t* x0_10;
        int64_t* x1_1;
        x0_10 = _Unwind_Resume(x0_7);
        /* tailcall */
        return std::__ndk1::vector<cv::Point_<int32_t>, std::__ndk1::allocator<cv::Point_<int32_t> > >::__push_back_slow_path<cv::Point_<int32_t> >(x0_10, x1_1);
    }
    int64_t x9_3 = (((arg1[2] - x9) >> 3) * -0x5555555555555555);
    int64_t x22;
    if (x9_3 <= 0x555555555555554)
    {
        int64_t x9_4 = (x9_3 << 1);
        if (x9_4 < (x20 + 1))
        {
            x23 = (x20 + 1);
        }
        else
        {
            x23 = x9_4;
        }
        if (x23 == 0)
        {
            x22 = 0;
        }
    }
    if ((x9_3 > 0x555555555555554 || (x9_3 <= 0x555555555555554 && x23 != 0)))
    {
        x22 = operator new((x23 * 0x18));
    }
    cv::Mat* x20_1 = (x22 + (x20 * 0x18));
    void* x0_3;
    int128_t v0;
    x0_3 = std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::vector(x20_1);
    int64_t* __saved_x1_1 = *arg1;
    void* x12 = arg1[1];
    void* x9_5 = (x20_1 + 0x18);
    int64_t* __saved_x1;
    if (x12 == __saved_x1_1)
    {
        __saved_x1 = __saved_x1_1;
    }
    else
    {
        int64_t i = 0;
        do
        {
            void* x13_1 = (x20_1 + i);
            void* x14_1 = (x12 + i);
            __builtin_memset((x13_1 - 0x18), 0, 0x18);
            i = (i - 0x18);
            *(x13_1 - 0x18) = *(x14_1 - 0x18);
            *(x13_1 - 8) = *(x14_1 - 8);
            __builtin_memset((x14_1 - 0x18), 0, 0x18);
        } while ((__saved_x1_1 - x12) != i);
        __saved_x1 = *arg1;
        __saved_x1_1 = arg1[1];
        x20_1 = (x20_1 + i);
    }
    *arg1 = x20_1;
    arg1[1] = x9_5;
    arg1[2] = (x22 + (x23 * 0x18));
    if (__saved_x1_1 != __saved_x1)
    {
        int64_t* __saved_x1_2 = __saved_x1_1;
        do
        {
            __saved_x1_2 = &__saved_x1_2[-3];
            x0_3 = *__saved_x1_2;
            if (x0_3 != 0)
            {
                __saved_x1_1[-2] = x0_3;
                x0_3 = operator delete(x0_3);
            }
            __saved_x1_1 = __saved_x1_2;
        } while (__saved_x1 != __saved_x1_2);
    }
    if (__saved_x1 == 0)
    {
        return x0_3;
    }
    /* tailcall */
    return operator delete(__saved_x1);
}

int64_t std::__ndk1::vector<cv::Point_<int32_t>, std::__ndk1::allocator<cv::Point_<int32_t> > >::__push_back_slow_path<cv::Point_<int32_t> >(int64_t* arg1, int64_t* arg2)
{
    void* x20 = *arg1;
    int32_t* x22 = arg1[1];
    int64_t x23 = ((x22 - x20) >> 3);
    if (((x23 + 1) >> 0x3d) != 0)
    {
        int64_t* x0_6;
        int32_t* x1_1;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return sub_406e0(x0_6, x1_1);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t x0_2;
    int64_t x24;
    if (0xffffffffffffffe < (x9_2 >> 3))
    {
        x24 = 0x1fffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 2);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3d) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    if ((0xffffffffffffffe < (x9_2 >> 3) || (0xffffffffffffffe >= (x9_2 >> 3) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 3));
    }
    int64_t* x10 = (x0_2 + (x23 << 3));
    *x10 = *arg2;
    if (x22 != x20)
    {
        void* x11_2 = ((x22 - 8) - x20);
        void* x12_1 = (x10 - 4);
        do
        {
            x22 = &x22[-2];
            *(x12_1 - 4) = *x22;
            *x12_1 = x22[1];
            x12_1 = (x12_1 - 8);
        } while (x20 != x22);
        x10 = (x10 + (!(x11_2) & 0xfffffffffffffff8));
    }
    *arg1 = x10;
    arg1[1] = &x10[1];
    arg1[2] = (x0_2 + (x24 << 3));
    if (x20 == 0)
    {
        return x0_2;
    }
    /* tailcall */
    return operator delete(x20);
}

void sub_406e0(int64_t* arg1, int32_t* arg2)
{
    void* x22 = arg1[2];
    int64_t x8 = arg1[3];
    int64_t* x19 = arg1;
    void* x10 = x22;
    if (x22 == x8)
    {
        void* x21_1 = *x19;
        int32_t* x23_1 = x19[1];
        if (x23_1 > x21_1)
        {
            int64_t x8_1 = ((x23_1 - x21_1) >> 4);
            int64_t x8_2;
            if ((x8_1 + 1) < 0)
            {
                x8_2 = (x8_1 + 2);
            }
            else
            {
                x8_2 = (x8_1 + 1);
            }
            int64_t x9_3 = (x8_2 >> 1);
            void* x8_3 = (x23_1 - (x9_3 << 4));
            x10 = x8_3;
            if (x23_1 != x22)
            {
                void* x9_5 = ((x22 - 0x10) - x23_1);
                do
                {
                    int32_t* x11_1 = &x23_1[(-(x9_3) * 4)];
                    int32_t x13_1 = *x23_1;
                    *x23_1 = *x11_1;
                    int32_t x12_2 = x11_1[1];
                    *x11_1 = x13_1;
                    int32_t x13_2 = x23_1[1];
                    x23_1[1] = x12_2;
                    int32_t x12_3 = x11_1[2];
                    x11_1[1] = x13_2;
                    int32_t x13_3 = x23_1[2];
                    x23_1[2] = x12_3;
                    int32_t x12_4 = x11_1[3];
                    x11_1[2] = x13_3;
                    int32_t x13_4 = x23_1[3];
                    x23_1[3] = x12_4;
                    x23_1 = &x23_1[4];
                    x11_1[3] = x13_4;
                } while (x22 != x23_1);
                x10 = ((x8_3 + (x9_5 & 0xfffffffffffffff0)) + 0x10);
            }
            x19[1] = x8_3;
            x19[2] = x10;
        }
        else
        {
            int64_t x24_1;
            if (x8 != x21_1)
            {
                x24_1 = ((x8 - x21_1) >> 3);
            }
            else
            {
                x24_1 = 1;
            }
            if (x24_1 == 0)
            {
                arg1 = nullptr;
            }
            else
            {
                if ((x24_1 >> 0x3c) != 0)
                {
                    sub_20e70();
                    /* no return */
                }
                int128_t v0;
                arg1 = operator new((x24_1 << 4));
            }
            uint64_t x10_4 = (x24_1 >> 2);
            void* x9_8 = &arg1[(x10_4 * 2)];
            if (x23_1 == x22)
            {
                x10 = x9_8;
            }
            else
            {
                int64_t x10_6 = ((x10_4 + (((x22 - 0x10) - x23_1) >> 4)) + 1);
                void* x11_4 = x9_8;
                do
                {
                    *x11_4 = *x23_1;
                    *x11_4 = *x23_1;
                    *(x11_4 + 4) = x23_1[1];
                    *(x11_4 + 8) = x23_1[2];
                    int32_t x12_8 = x23_1[3];
                    x23_1 = &x23_1[4];
                    *(x11_4 + 0xc) = x12_8;
                    x11_4 = (x11_4 + 0x10);
                } while (x23_1 != x22);
                x21_1 = *x19;
                x10 = &arg1[(x10_6 * 2)];
            }
            *x19 = arg1;
            x19[1] = x9_8;
            x19[2] = x10;
            x19[3] = &arg1[(x24_1 * 2)];
            if (x21_1 != 0)
            {
                operator delete(x21_1);
                x10 = x19[2];
            }
        }
    }
    *x10 = *arg2;
    *(x10 + 4) = arg2[1];
    *(x10 + 8) = arg2[2];
    *(x10 + 0xc) = arg2[3];
    x19[2] = (x10 + 0x10);
}

int64_t std::__ndk1::vector<cv::Vec<int32_t, 4>, std::__ndk1::allocator<cv::Vec<int32_t, 4> > >::__push_back_slow_path<cv::Vec<int32_t, 4> const&>(int64_t* arg1, int128_t* arg2)
{
    void* x20 = *arg1;
    int32_t* x22 = arg1[1];
    int64_t x23 = ((x22 - x20) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_6;
        int128_t* x1_1;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 4, 1, 0, 4, 1> >(x0_6, x1_1);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    int128_t v0;
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    int128_t* x10 = (x0_2 + (x23 << 4));
    *x10 = *arg2;
    if (x22 != x20)
    {
        void* x11_2 = ((x22 - 0x10) - x20);
        void* x12_1 = (x10 - 8);
        do
        {
            x22 = &x22[-4];
            *(x12_1 - 8) = *x22;
            *(x12_1 - 4) = x22[1];
            *x12_1 = x22[2];
            *(x12_1 + 4) = x22[3];
            x12_1 = (x12_1 - 0x10);
        } while (x20 != x22);
        x10 = (x10 + (!(x11_2) & 0xfffffffffffffff0));
    }
    *arg1 = x10;
    arg1[1] = &x10[1];
    arg1[2] = (x0_2 + (x24 << 4));
    if (x20 == 0)
    {
        return x0_2;
    }
    /* tailcall */
    return operator delete(x20);
}

int64_t std::__ndk1::vector<Eigen::Matrix<float, 4, 1, 0, 4, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 4, 1, 0, 4, 1> > >::__push_back_slow_path<Eigen::Matrix<float, 4, 1, 0, 4, 1> >(int64_t* arg1, int128_t* arg2)
{
    void* x20 = *arg1;
    int32_t* x22 = arg1[1];
    int64_t x23 = ((x22 - x20) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        /* tailcall */
        return feasibal_region::feasibal_region::feasibal_region(std::__ndk1::__vector_base_common<true>::__throw_length_error());
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    int128_t v0;
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    int128_t* x9_4 = (x0_2 + (x23 << 4));
    *x9_4 = *arg2;
    *x9_4 = *arg2;
    if (x22 != x20)
    {
        void* x11_2 = ((x22 - 0x10) - x20);
        void* x12_1 = (x9_4 - 8);
        do
        {
            x22 = &x22[-4];
            *(x12_1 - 8) = *x22;
            *(x12_1 - 4) = x22[1];
            *x12_1 = x22[2];
            *(x12_1 + 4) = x22[3];
            x12_1 = (x12_1 - 0x10);
        } while (x20 != x22);
        x9_4 = (x9_4 + (!(x11_2) & 0xfffffffffffffff0));
    }
    *arg1 = x9_4;
    arg1[1] = &x9_4[1];
    arg1[2] = (x0_2 + (x24 << 4));
    if (x20 == 0)
    {
        return x0_2;
    }
    /* tailcall */
    return operator delete(x20);
}

int64_t feasibal_region::feasibal_region::feasibal_region(int128_t* arg1)
{
    int128_t v0 = data_54dc0;
    __builtin_memset(&arg1[1], 0, 0x18);
    *(arg1 + 0x28) = 0x3fecbc6a7ef9db23;
    *arg1 = v0;
    feasibal_region::PreParamInfo::PreParamInfo();
    __builtin_memset((arg1 + 0x258), 0, 0x18);
    __builtin_memset(&arg1[0x22], 0, 0x32);
    int64_t x0_1;
    int128_t v0_1;
    x0_1 = operator new(0x30);
    v0_1 = data_54dd0;
    *(arg1 + 0x268) = x0_1;
    *(arg1 + 0x258) = v0_1;
    __builtin_strncpy(x0_1, "/sdcard/pudu/config/PreParamInfo.config", 0x28);
    arg1[0x27] = 0;
    return x0_1;
}

uint64_t feasibal_region::feasibal_region::WriteCameraParam(int64_t arg1, int32_t arg2, cv::Mat* arg3)
{
    int64_t* x28;
    int64_t* var_40 = x28;
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    void var_1c8;
    cv::FileStorage::FileStorage(&var_1c8, arg2, &*nullptr->ident.signature[1]);
    void* var_180;
    if ((s_1 & 1) != 0)
    {
        operator delete(var_180);
    }
    int32_t x19_1;
    if ((cv::FileStorage::isOpened() & 1) != 0)
    {
        __builtin_memset(&s_1, 0, 0x18);
        s_1 = 0x1a;
        __builtin_strncpy(&*s_1[1], "camera_matrix", 0xe);
        int64_t* x0_4 = cv::operator<<(&var_1c8, &s_1);
        void* var_180_1;
        if ((s_1 & 1) != 0)
        {
            operator delete(var_180_1);
        }
        int32_t x0_7 = *(*x0_4 + 0x18)(x0_4);
        if (((x0_7 & 1) != 0 && x0_4[1] != 6))
        {
            cv::write(x0_4, &x0_4[2], arg3);
            if ((x0_4[1] & 4) != 0)
            {
                x19_1 = 0;
                x0_4[1] = 6;
                goto label_40e14;
            }
        }
        if (((x0_7 & 1) == 0 || ((x0_7 & 1) != 0 && x0_4[1] != 6)))
        {
            x19_1 = 0;
        label_40e14:
            cv::FileStorage::~FileStorage();
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return x19_1;
        }
    }
    else
    {
        char* x20_1;
        if ((*data_6ffc0 & 1) == 0)
        {
            x20_1 = &*(data_6ffc0 + 1);
        }
        else
        {
            x20_1 = *(data_6ffca + 6);
        }
        int32_t var_1e8 = data_6ffb8;
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        size_t x0_10 = strlen(x20_1);
        if (x0_10 >= -0x10)
        {
            void* var_1d0_1;
            void* x21_1;
            if (x0_10 >= 0x17)
            {
                uint64_t x22_1 = ((x0_10 + 0x10) & 0xfffffffffffffff0);
                void* x0_12 = operator new(x22_1);
                x21_1 = x0_12;
                size_t var_1d8_1 = x0_10;
                var_1d0_1 = x0_12;
                s = (x22_1 | 1);
            }
            else
            {
                x21_1 = &*s[1];
                s = (x0_10 << 1);
            }
            if ((x0_10 >= 0x17 || (x0_10 < 0x17 && x0_10 != 0)))
            {
                memcpy(x21_1, x20_1, x0_10);
            }
            *(x21_1 + x0_10) = 0;
            int32_t x19_3;
            if ((g3::logLevel(&var_1e8) & 1) == 0)
            {
                x19_3 = 0;
                if ((s & 1) != 0)
                {
                label_40de0:
                    operator delete(var_1d0_1);
                    if ((x19_3 & 1) == 0)
                    {
                        goto label_40de8;
                    }
                    goto label_40dac;
                }
            }
            else
            {
                char var_200 = 0xc;
                int32_t var_1ff;
                __builtin_strncpy(&var_1ff, "region", 0x17);
                x19_3 = g3::logTag(&var_200);
                if ((var_200 & 1) != 0)
                {
                    void* var_1f0;
                    operator delete(var_1f0);
                    if ((s & 1) != 0)
                    {
                        goto label_40de0;
                    }
                }
                else if ((s & 1) != 0)
                {
                    goto label_40de0;
                }
            }
            if ((x19_3 & 1) == 0)
            {
            label_40de8:
                x19_1 = -1;
            }
            else
            {
            label_40dac:
                LogCapture::LogCapture(&s_1, "region", &data_6ffb8, &data_54bb5, &nullptr->ident.version);
                LogCapture::capturef();
                LogCapture::~LogCapture();
                x19_1 = -1;
            }
            goto label_40e14;
        }
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    void* x0_22;
    int128_t v0;
    x0_22 = operator new(0x20);
    s_1 = data_53eb0;
    __builtin_strncpy(x0_22, "No element name has been given", 0x1f);
    int64_t x0_23 = cv::error(0xfffffffe, &s_1, "operator<<", "D:/project/MirRGBDApp/RGBDLib/sr…", 0x4b7);
    if ((s_1 & 1) != 0)
    {
        operator delete(x0_22);
    }
    cv::FileStorage::~FileStorage();
    int64_t* x27;
    /* tailcall */
    return feasibal_region::feasibal_region::readParam(_Unwind_Resume(x0_23), x23, x27, x28);
}

int64_t sub_40eb8(int64_t arg1)
{
    cv::FileStorage::~FileStorage();
    int64_t* x23;
    int64_t* x27;
    int64_t* x28;
    /* tailcall */
    return feasibal_region::feasibal_region::readParam(_Unwind_Resume(arg1), x23, x27, x28);
}

int64_t sub_40ebc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    cv::FileStorage::~FileStorage();
    int64_t* x23;
    int64_t* x27;
    int64_t* x28;
    /* tailcall */
    return feasibal_region::feasibal_region::readParam(_Unwind_Resume(arg1), x23, x27, x28);
}

int64_t sub_40edc(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    cv::FileStorage::~FileStorage();
    int64_t* x23;
    int64_t* x27;
    int64_t* x28;
    /* tailcall */
    return feasibal_region::feasibal_region::readParam(_Unwind_Resume(arg1), x23, x27, x28);
}

uint64_t feasibal_region::feasibal_region::readParam(cv::Mat* arg1, int64_t* arg2 @ x23, int64_t* arg3 @ x27, int64_t* arg4 @ x28)
{
    double v12;
    double var_90 = v12;
    double v11;
    double var_80 = v11;
    double v10;
    double var_78 = v10;
    double v9;
    double var_70 = v9;
    double v8;
    double var_68 = v8;
    int64_t* var_60 = arg4;
    int64_t* var_58 = arg3;
    int32_t* x26;
    int32_t* var_50 = x26;
    int32_t* x24;
    int32_t* var_40 = x24;
    int64_t* var_38 = arg2;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int64_t s_14;
    __builtin_memset(&s_14, 0, 0x18);
    cv::Mat var_410;
    int32_t x1;
    cv::FileStorage::FileStorage(&var_410, x1, nullptr);
    void* var_1e0;
    if ((s_14 & 1) != 0)
    {
        operator delete(var_1e0);
    }
    int32_t x0_2 = cv::FileStorage::isOpened();
    int64_t* var_4d0;
    int64_t* var_4c8;
    int32_t var_430;
    int64_t s_2;
    int32_t s_3;
    int64_t var_398;
    void* var_390;
    int64_t* var_388;
    int32_t s_5;
    int64_t var_338;
    void* var_330;
    int64_t* var_328;
    int32_t s_7;
    int64_t var_2d8;
    void* var_2d0;
    int64_t* var_2c8;
    int32_t s_9;
    int64_t var_278;
    void* var_270;
    int64_t* var_268;
    int64_t s_11;
    int64_t var_218;
    int64_t* var_210;
    int64_t* var_208;
    size_t x0_99;
    size_t x0_101;
    size_t x0_121;
    int32_t x19_7;
    char* x20_1;
    if ((x0_2 & 1) != 0)
    {
        int32_t var_2b0;
        x24 = &var_2b0;
        __builtin_memset(&s_11, 0, 0x18);
        __builtin_strncpy(&s_11, "(use_static_extrinsic", 0x16);
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, &var_2b0, 0);
            char x8_3;
            if (var_2b0 != 0)
            {
                x8_3 = 1;
            }
            else
            {
                x8_3 = 0;
            }
            *(arg1 + 0x30) = x8_3;
        }
        void* var_240;
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240);
        }
        __builtin_memset(&s_11, 0, 0x18);
        void* x0_8;
        int128_t v0_1;
        x0_8 = operator new(0x20);
        s_11 = data_54de0;
        __builtin_strncpy(x0_8, "use_static_camera_matrix", 0x19);
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, &var_2b0, 0);
            char x8_6;
            if (var_2b0 != 0)
            {
                x8_6 = 1;
            }
            else
            {
                x8_6 = 0;
            }
            *(arg1 + 0x251) = x8_6;
        }
        if ((s_11 & 1) != 0)
        {
            operator delete(x0_8);
        }
        __builtin_memset(&s_14, 0, 0x18);
        s_14 = 0x12;
        __builtin_strcpy(&*s_14[1], "mask_file");
        feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, &s_14, (arg1 + 0x200));
        void* var_1e0_1;
        if ((s_14 & 1) != 0)
        {
            operator delete(var_1e0_1);
        }
        s_11 = 0;
        s_11 = 0x12;
        int64_t var_248 = 0;
        void* var_240_2 = nullptr;
        __builtin_strcpy(&*s_11[1], "near_edge");
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x21c), 0);
        }
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_2);
        }
        __builtin_memset(&s_11, 0, 0x18);
        __builtin_strcpy(&s_11, "\nlamda");
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x58), 0f);
        }
        void* var_240_3;
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_3);
        }
        __builtin_memset(&s_11, 0, 0x18);
        s_11 = 4;
        *s_11[1] = 0x7a64;  {  // {"rIS2_EEED2Ev"}}
        *s_11[3] = 0;
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x48), 0f);
        }
        void* var_240_4;
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_4);
        }
        __builtin_memset(&s_11, 0, 0x18);
        s_11 = 0x10;
        __builtin_strncpy(&*s_11[1], "region_x", 9);
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x38), 0f);
        }
        void* var_240_5;
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_5);
        }
        __builtin_memset(&s_11, 0, 0x18);
        s_11 = 0x10;
        __builtin_strncpy(&*s_11[1], "region_y", 9);
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x3c), 0f);
        }
        void* var_240_6;
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_6);
        }
        __builtin_memset(&s_11, 0, 0x18);
        __builtin_strncpy(&s_11, "$angular_resolution", 0x14);
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x44), 0f);
        }
        void* var_240_7;
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_7);
        }
        s_11 = 0;
        s_11 = 0x16;
        var_248 = 0;
        void* var_240_8 = nullptr;
        __builtin_strcpy(&*s_11[1], "image_width");
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x13c), 0);
        }
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_8);
        }
        s_11 = 0;
        s_11 = 0x16;
        var_248 = 0;
        void* var_240_9 = nullptr;
        __builtin_strcpy(&*s_11[1], "image_hight");
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x138), 0);
        }
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_9);
        }
        __builtin_memset(&s_11, 0, 0x18);
        s_11 = 0x14;
        __builtin_strncpy(&*s_11[1], "patch_size", 0xb);
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, (arg1 + 0x134), 0);
        }
        void* var_240_10;
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_10);
        }
        s_11 = 0;
        s_11 = 0x12;
        var_248 = 0;
        void* var_240_11 = nullptr;
        __builtin_strcpy(&*s_11[1], "hand_hold");
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, &var_2b0, 0);
            char x8_19;
            if (var_2b0 != 0)
            {
                x8_19 = 1;
            }
            else
            {
                x8_19 = 0;
            }
            *(arg1 + 0x5c) = x8_19;
        }
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_11);
        }
        __builtin_memset(&s_11, 0, 0x18);
        s_11 = 0x1e;
        __builtin_strncpy(&*s_11[1], "invaild_discard", 0x10);
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, &var_2b0, 0);
            char x8_22;
            if (var_2b0 != 0)
            {
                x8_22 = 1;
            }
            else
            {
                x8_22 = 0;
            }
            *(arg1 + 0x218) = x8_22;
        }
        void* var_240_12;
        if ((s_11 & 1) != 0)
        {
            operator delete(var_240_12);
        }
        __builtin_memset(&s_11, 0, 0x18);
        s_11 = 0x18;
        __builtin_strncpy(&*s_11[1], "record_mdata", 0xd);
        cv::FileStorage::operator[](&var_410);
        if (cv::FileNode::type() != 0)
        {
            cv::FileStorage::operator[](&var_410);
            cv::read(&s_14, &var_2b0, 0);
            char x8_25;
            if (var_2b0 != 0)
            {
                x8_25 = 1;
            }
            else
            {
                x8_25 = 0;
            }
            *(arg1 + 0x219) = x8_25;
        }
        int32_t var_3d0;
        x26 = &var_3d0;
        void* s_12;
        if ((s_11 & 1) != 0)
        {
            operator delete(s_12);
        }
        s_11 = 0x42ff0000;
        __builtin_memset(&*s_11[4], 0, 0x3c);
        var_2b0 = 0x42ff0000;
        __builtin_memset(&s_9, 0, 0x3c);
        int64_t s_13;
        arg2 = &s_13;
        var_210 = &var_248;
        var_208 = &s_13;
        __builtin_memset(&s_13, 0, 0x30);
        void var_2a8;
        var_270 = &var_2a8;
        int64_t var_260;
        var_4c8 = &var_260;
        var_268 = &var_260;
        int64_t var_258_1 = 0;
        var_260 = 0;
        int64_t var_3d8 = 0x300000003;
        cv::Mat::create(&var_2b0, &*nullptr->ident.signature[2], &var_3d8);
        cv::Mat::operator=(&var_2b0);
        int32_t var_310 = 0x42ff0000;
        __builtin_memset(&s_14, 0, 0x20);
        __builtin_memset(&s_7, 0, 0x3c);
        void var_308;
        var_2d0 = &var_308;
        int64_t var_2c0;
        var_4d0 = &var_2c0;
        var_2c8 = &var_2c0;
        int64_t var_2b8_1 = 0;
        var_2c0 = 0;
        var_3d8 = 0x300000003;
        cv::Mat::create(&var_310, &*nullptr->ident.signature[2], &var_3d8);
        cv::Mat::operator=(&var_310);
        int32_t var_370 = 0x42ff0000;
        __builtin_memset(&s_14, 0, 0x20);
        __builtin_memset(&s_5, 0, 0x3c);
        int64_t var_320;
        arg3 = &var_320;
        void var_368;
        var_330 = &var_368;
        var_328 = &var_320;
        var_320 = 0;
        int64_t var_318_1 = 0;
        var_3d8 = 0x400000004;
        cv::Mat::create(&var_370, &*nullptr->ident.signature[2], &var_3d8);
        cv::Mat::operator=(&var_370);
        var_3d0 = 0x42ff0000;
        __builtin_memset(&s_14, 0, 0x20);
        __builtin_memset(&s_3, 0, 0x3c);
        int64_t var_380;
        arg4 = &var_380;
        void var_3c8;
        var_390 = &var_3c8;
        var_388 = &var_380;
        var_380 = 0;
        int64_t var_378_1 = 0;
        var_3d8 = 0x400000004;
        cv::Mat::create(&var_3d0, &*nullptr->ident.signature[2], &var_3d8);
        cv::Mat::operator=(&var_3d0);
        __builtin_memset(&s_14, 0, 0x18);
        s_14 = 0x1a;
        __builtin_strncpy(&*s_14[1], "obstacle_size", 0xe);
        feasibal_region::feasibal_region::attemtpRead<cv::Mat>(arg1, &s_14, &s_11);
        void* var_1e0_2;
        if ((s_14 & 1) != 0)
        {
            operator delete(var_1e0_2);
        }
        __builtin_memset(&s_14, 0, 0x18);
        s_14 = 0x1a;
        __builtin_strncpy(&*s_14[1], "camera_matrix", 0xe);
        feasibal_region::feasibal_region::attemtpRead<cv::Mat>(arg1, &s_14, &var_2b0);
        void* var_1e0_3;
        if ((s_14 & 1) != 0)
        {
            operator delete(var_1e0_3);
        }
        __builtin_memset(&s_14, 0, 0x18);
        __builtin_strcpy(&s_14, "\"camera_matrix_rgb");
        feasibal_region::feasibal_region::attemtpRead<cv::Mat>(arg1, &s_14, &var_310);
        void* var_1e0_4;
        if ((s_14 & 1) != 0)
        {
            operator delete(var_1e0_4);
        }
        __builtin_memset(&s_14, 0, 0x18);
        s_14 = 0x5202;  {  // {"v3Mat6createEiPKii"}}
        *s_14[2] = 0;
        feasibal_region::feasibal_region::attemtpRead<cv::Mat>(arg1, &s_14, (arg1 + 0x140));
        void* var_1e0_5;
        if ((s_14 & 1) != 0)
        {
            operator delete(var_1e0_5);
        }
        __builtin_memset(&s_14, 0, 0x18);
        s_14 = 0x5402;  {  // {"ileStorageERKNSt6__ndk112basic_s…"}}
        *s_14[2] = 0;
        feasibal_region::feasibal_region::attemtpRead<cv::Mat>(arg1, &s_14, (arg1 + 0x1a0));
        void* var_1e0_6;
        if ((s_14 & 1) != 0)
        {
            operator delete(var_1e0_6);
        }
        __builtin_memset(&s_14, 0, 0x18);
        s_14 = 6;
        *s_14[1] = 0x637254;
        feasibal_region::feasibal_region::attemtpRead<cv::Mat>(arg1, &s_14, &var_370);
        void* var_1e0_7;
        if ((s_14 & 1) != 0)
        {
            operator delete(var_1e0_7);
        }
        __builtin_memset(&s_14, 0, 0x18);
        s_14 = 6;
        *s_14[1] = 0x726754;
        int128_t v0_7;
        double v1_1;
        int128_t v2_1;
        v0_7 = feasibal_region::feasibal_region::attemtpRead<cv::Mat>(arg1, &s_14, &var_3d0);
        void* var_1e0_8;
        if ((s_14 & 1) != 0)
        {
            v0_7 = operator delete(var_1e0_8);
        }
        if ((*var_210 * *(var_210 + 4)) == 3)
        {
            void* s_15 = s_12;
            /* unimplemented  {fcvtn v0.2s, v0.2d} */;
            v1_1 = *(s_15 + 0x10);
            *(arg1 + 0xa8) = *s_15;
            *(arg1 + 0xb0) = v1_1;
        }
        v0_7 = *(arg1 + 0x13c);
        int64_t* s_10;
        int64_t* s_16 = s_10;
        v2_1 = 0x4084000000000000;
        /* unimplemented  {sxtl v0.2d, v0.2s} */;
        /* unimplemented  {scvtf d0, d0} */;
        v0_7 = (v0_7 / 640.0);
        v2_1 = s_16[2];
        v0_7 = v0_7;
        v8 = v0_7;
        v0_7 = (*s_16 * v8);
        v2_1 = (v2_1 * v8);
        v1_1 = *(arg1 + 0x138);
        *s_16 = v0_7;
        s_16[2] = v2_1;
        int64_t x9_1 = *var_268;
        v0_7 = 0x407e000000000000;
        /* unimplemented  {sxtl v1.2d, v1.2s} */;
        void* x11_1 = (s_16 + x9_1);
        /* unimplemented  {scvtf d1, d1} */;
        v2_1 = *(x11_1 + 8);
        v0_7 = (v1_1 / 480.0);
        v0_7 = v0_7;
        double v3_1 = v0_7;
        v0_7 = (v2_1 * v3_1);
        *v0_7[8] = (*v2_1[8] * v3_1);
        *(x11_1 + 8) = v0_7;
        int64_t* s_8;
        int64_t* s_19 = s_8;
        v0_7 = *s_19;
        v0_7 = (v0_7 * v8);
        v1_1 = (s_19[2] * v8);
        *s_19 = v0_7;
        s_19[2] = v1_1;
        int64_t x12_2 = *var_2c8;
        void* x13_1 = (s_19 + x12_2);
        v0_7 = *(x13_1 + 8);
        v2_1 = *(x13_1 + 0x10);
        v1_1 = (v0_7 * v3_1);
        v0_7 = (v2_1 * v3_1);
        *(x13_1 + 8) = v1_1;
        *(x13_1 + 0x10) = v0_7;
        if ((*var_270 * *(var_270 + 4)) == 9)
        {
            v2_1 = *s_16;
            v1_1 = v1_1;
            v0_7 = v0_7;
            v2_1 = v2_1;
            *(arg1 + 0x60) = v2_1;
            v2_1 = *s_19;
            v2_1 = v2_1;
            *(arg1 + 0x84) = v2_1;
            v2_1 = s_16[1];
            v2_1 = v2_1;
            *(arg1 + 0x6c) = v2_1;
            v2_1 = s_19[1];
            v2_1 = v2_1;
            *(arg1 + 0x90) = v2_1;
            v2_1 = s_16[2];
            v2_1 = v2_1;
            *(arg1 + 0x78) = v2_1;
            v2_1 = s_19[2];
            v2_1 = v2_1;
            *(arg1 + 0x9c) = v2_1;
            v2_1 = *(s_16 + x9_1);
            void* x8_37 = (s_16 + (x9_1 << 1));
            void* x9_2 = (s_19 + (x12_2 << 1));
            v2_1 = v2_1;
            *(arg1 + 0x64) = v2_1;
            v2_1 = *(s_19 + x12_2);
            v2_1 = v2_1;
            *(arg1 + 0x88) = v2_1;
            v2_1 = *(x11_1 + 8);
            *(arg1 + 0x94) = v1_1;
            v1_1 = v2_1;
            *(arg1 + 0x70) = v1_1;
            v1_1 = *(x11_1 + 0x10);
            *(arg1 + 0xa0) = v0_7;
            v0_7 = v1_1;
            *(arg1 + 0x7c) = v0_7;
            v0_7 = *x8_37;
            v0_7 = v0_7;
            *(arg1 + 0x68) = v0_7;
            v0_7 = *x9_2;
            v0_7 = v0_7;
            *(arg1 + 0x8c) = v0_7;
            v0_7 = *(x8_37 + 8);
            v0_7 = v0_7;
            *(arg1 + 0x74) = v0_7;
            v0_7 = *(x9_2 + 8);
            v0_7 = v0_7;
            *(arg1 + 0x98) = v0_7;
            v0_7 = *(x8_37 + 0x10);
            v0_7 = v0_7;
            *(arg1 + 0x80) = v0_7;
            v0_7 = *(x9_2 + 0x10);
            v0_7 = v0_7;
            *(arg1 + 0xa4) = v0_7;
        }
        int64_t* s_6;
        if ((*var_330 * *(var_330 + 4)) == 0x10)
        {
            int64_t* s_17 = s_6;
            v0_7 = *s_17;
            int64_t x9_5 = *var_328;
            v0_7 = v0_7;
            *(arg1 + 0xb4) = v0_7;
            v0_7 = s_17[1];
            void* x10 = (s_17 + x9_5);
            v0_7 = v0_7;
            *(arg1 + 0xc4) = v0_7;
            v0_7 = s_17[2];
            v0_7 = v0_7;
            *(arg1 + 0xd4) = v0_7;
            v0_7 = s_17[3];
            v0_7 = v0_7;
            *(arg1 + 0xe4) = v0_7;
            v0_7 = *x10;
            v0_7 = v0_7;
            *(arg1 + 0xb8) = v0_7;
            v0_7 = *(x10 + 8);
            v0_7 = v0_7;
            *(arg1 + 0xc8) = v0_7;
            v0_7 = *(x10 + 0x10);
            v0_7 = v0_7;
            *(arg1 + 0xd8) = v0_7;
            v0_7 = *(x10 + 0x18);
            int64_t x10_1 = (x9_5 << 1);
            void* x11_2 = (s_17 + x10_1);
            v0_7 = v0_7;
            *(arg1 + 0xe8) = v0_7;
            v0_7 = *x11_2;
            void* x8_41 = (s_17 + (x10_1 + x9_5));
            v0_7 = v0_7;
            *(arg1 + 0xbc) = v0_7;
            v0_7 = *(x11_2 + 8);
            v0_7 = v0_7;
            *(arg1 + 0xcc) = v0_7;
            v0_7 = *(x11_2 + 0x10);
            v0_7 = v0_7;
            *(arg1 + 0xdc) = v0_7;
            v0_7 = *(x11_2 + 0x18);
            v0_7 = v0_7;
            *(arg1 + 0xec) = v0_7;
            v0_7 = *x8_41;
            v0_7 = v0_7;
            *(arg1 + 0xc0) = v0_7;
            v0_7 = *(x8_41 + 8);
            v0_7 = v0_7;
            *(arg1 + 0xd0) = v0_7;
            v0_7 = *(x8_41 + 0x10);
            v0_7 = v0_7;
            *(arg1 + 0xe0) = v0_7;
            v0_7 = *(x8_41 + 0x18);
            v0_7 = v0_7;
            *(arg1 + 0xf0) = v0_7;
        }
        int64_t* s_4;
        if ((*var_390 * *(var_390 + 4)) == 0x10)
        {
            int64_t* s_18 = s_4;
            v0_7 = *s_18;
            int64_t x9_9 = *var_388;
            v0_7 = v0_7;
            *(arg1 + 0xf4) = v0_7;
            v0_7 = s_18[1];
            void* x10_2 = (s_18 + x9_9);
            v0_7 = v0_7;
            *(arg1 + 0x104) = v0_7;
            v0_7 = s_18[2];
            v0_7 = v0_7;
            *(arg1 + 0x114) = v0_7;
            v0_7 = s_18[3];
            v0_7 = v0_7;
            *(arg1 + 0x124) = v0_7;
            v0_7 = *x10_2;
            v0_7 = v0_7;
            *(arg1 + 0xf8) = v0_7;
            v0_7 = *(x10_2 + 8);
            v0_7 = v0_7;
            *(arg1 + 0x108) = v0_7;
            v0_7 = *(x10_2 + 0x10);
            v0_7 = v0_7;
            *(arg1 + 0x118) = v0_7;
            v0_7 = *(x10_2 + 0x18);
            int64_t x10_3 = (x9_9 << 1);
            void* x11_3 = (s_18 + x10_3);
            v0_7 = v0_7;
            *(arg1 + 0x128) = v0_7;
            v0_7 = *x11_3;
            void* x8_45 = (s_18 + (x10_3 + x9_9));
            v0_7 = v0_7;
            *(arg1 + 0xfc) = v0_7;
            v0_7 = *(x11_3 + 8);
            v0_7 = v0_7;
            *(arg1 + 0x10c) = v0_7;
            v0_7 = *(x11_3 + 0x10);
            v0_7 = v0_7;
            *(arg1 + 0x11c) = v0_7;
            v0_7 = *(x11_3 + 0x18);
            v0_7 = v0_7;
            *(arg1 + 0x12c) = v0_7;
            v0_7 = *x8_45;
            v0_7 = v0_7;
            *(arg1 + 0x100) = v0_7;
            v0_7 = *(x8_45 + 8);
            v0_7 = v0_7;
            *(arg1 + 0x110) = v0_7;
            v0_7 = *(x8_45 + 0x10);
            v0_7 = v0_7;
            *(arg1 + 0x120) = v0_7;
            v0_7 = *(x8_45 + 0x18);
            v0_7 = v0_7;
            *(arg1 + 0x130) = v0_7;
        }
        char* x21_1;
        if ((*data_6ff40 & 1) == 0)
        {
            x21_1 = &*(data_6ff40 + 1);
        }
        else
        {
            x21_1 = *(data_6ff4a + 6);
        }
        int32_t var_468 = data_6ff38;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x18);
        x0_99 = strlen(x21_1);
        if (x0_99 < -0x10)
        {
            int64_t* var_4f8_2 = &s_13;
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* var_450_1;
            void* x22_2;
            if (x0_99 >= 0x17)
            {
                uint64_t x23 = ((x0_99 + 0x10) & 0xfffffffffffffff0);
                void* x0_112 = operator new(x23);
                arg2 = &s_13;
                x22_2 = x0_112;
                size_t var_458_1 = x0_99;
                var_450_1 = x0_112;
                s_1 = (x23 | 1);
            }
            else
            {
                x22_2 = &*s_1[1];
                s_1 = (x0_99 << 1);
            }
            if ((x0_99 >= 0x17 || (x0_99 < 0x17 && x0_99 != 0)))
            {
                memcpy(x22_2, x21_1, x0_99);
            }
            *(x22_2 + x0_99) = 0;
            int32_t x0_115 = g3::logLevel(&var_468);
            int32_t x19_4;
            if ((x0_115 & 1) == 0)
            {
                x19_4 = 0;
                if ((s_1 & 1) != 0)
                {
                label_420c8:
                    operator delete(var_450_1);
                    if ((x19_4 & 1) != 0)
                    {
                        goto label_420f4;
                    }
                }
            }
            else
            {
                char var_480 = 0xc;
                int32_t var_47f;
                __builtin_strncpy(&var_47f, "region", 0x17);
                x19_4 = g3::logTag(&var_480);
                if ((var_480 & 1) != 0)
                {
                    void* var_470;
                    operator delete(var_470);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_420c8;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_420c8;
                }
            }
            if (((((x0_115 & 1) == 0 && (s_1 & 1) == 0) || (x0_115 & 1) != 0) && (x19_4 & 1) != 0))
            {
            label_420f4:
                LogCapture::LogCapture(&s_14, "region", &data_6ff38, &data_54bb5, &nullptr->ident.version);
                *(arg1 + 0x48);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
            int64_t* s_20 = s_10;
            v11 = *s_20;
            void* x8_62 = (s_20 + *var_268);
            *(x8_62 + 8);
            v10 = *(x8_62 + 0x10);
            v9 = s_20[2];
            char* x20_2;
            if ((*data_6ff40 & 1) == 0)
            {
                x20_2 = &*(data_6ff40 + 1);
            }
            else
            {
                x20_2 = *(data_6ff4a + 6);
            }
            int32_t var_4a0 = data_6ff38;
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            x0_121 = strlen(x20_2);
            if (x0_121 >= -0x10)
            {
                void* var_488_1;
                void* x21_3;
                if (x0_121 >= 0x17)
                {
                    uint64_t x22_4 = ((x0_121 + 0x10) & 0xfffffffffffffff0);
                    void* x0_123 = operator new(x22_4);
                    x21_3 = x0_123;
                    size_t var_490_1 = x0_121;
                    var_488_1 = x0_123;
                    s = (x22_4 | 1);
                }
                else
                {
                    x21_3 = &*s[1];
                    s = (x0_121 << 1);
                }
                if ((x0_121 >= 0x17 || (x0_121 < 0x17 && x0_121 != 0)))
                {
                    memcpy(x21_3, x20_2, x0_121);
                }
                *(x21_3 + x0_121) = 0;
                int32_t x19_6;
                if ((g3::logLevel(&var_4a0) & 1) == 0)
                {
                    x19_6 = 0;
                    if ((s & 1) != 0)
                    {
                    label_422a8:
                        operator delete(var_488_1);
                        if ((x19_6 & 1) == 0)
                        {
                            goto label_422b0;
                        }
                        goto label_4223c;
                    }
                }
                else
                {
                    char var_4b8 = 0xc;
                    int32_t var_4b7;
                    __builtin_strncpy(&var_4b7, "region", 0x17);
                    x19_6 = g3::logTag(&var_4b8);
                    if ((var_4b8 & 1) != 0)
                    {
                        void* var_4a8;
                        operator delete(var_4a8);
                        if ((s & 1) != 0)
                        {
                            goto label_422a8;
                        }
                    }
                    else if ((s & 1) != 0)
                    {
                        goto label_422a8;
                    }
                }
                int64_t x8_69;
                if ((x19_6 & 1) == 0)
                {
                label_422b0:
                    x8_69 = var_398;
                    if (x8_69 != 0)
                    {
                    label_422c8:
                        int32_t temp0_1;
                        int32_t i;
                        do
                        {
                            temp0_1 = __ldaxr((x8_69 + 0x14));
                            i = __stlxr((temp0_1 - 1), (x8_69 + 0x14));
                        } while (i != 0);
                        if (temp0_1 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                }
                else
                {
                label_4223c:
                    LogCapture::LogCapture(&s_14, "region", &data_6ff38, &data_54bb5, &nullptr->ident.version);
                    double v0_9;
                    v0_9 = (v11 / v8);
                    double v1_2;
                    v1_2 = (v9 / v3_1);
                    double v3_2;
                    v3_2 = (v10 / v3_1);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                    x8_69 = var_398;
                    if (x8_69 != 0)
                    {
                        goto label_422c8;
                    }
                }
                int64_t var_398_1 = 0;
                __builtin_memset(&s_4, 0, 0x20);
                if (s_3 >= 1)
                {
                    int64_t i_1 = 0;
                    do
                    {
                        *(var_390 + (i_1 << 2)) = 0;
                        i_1 = (i_1 + 1);
                    } while (i_1 < s_3);
                }
                if (var_388 != &var_380)
                {
                    cv::fastFree(var_388);
                }
                if (var_338 != 0)
                {
                    int32_t temp0_2;
                    int32_t i_2;
                    do
                    {
                        temp0_2 = __ldaxr((var_338 + 0x14));
                        i_2 = __stlxr((temp0_2 - 1), (var_338 + 0x14));
                    } while (i_2 != 0);
                    if (temp0_2 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int64_t var_338_1 = 0;
                __builtin_memset(&s_6, 0, 0x20);
                if (s_5 >= 1)
                {
                    int64_t i_3 = 0;
                    do
                    {
                        *(var_330 + (i_3 << 2)) = 0;
                        i_3 = (i_3 + 1);
                    } while (i_3 < s_5);
                }
                if (var_328 != &var_320)
                {
                    cv::fastFree(var_328);
                }
                if (var_2d8 != 0)
                {
                    int32_t temp0_3;
                    int32_t i_4;
                    do
                    {
                        temp0_3 = __ldaxr((var_2d8 + 0x14));
                        i_4 = __stlxr((temp0_3 - 1), (var_2d8 + 0x14));
                    } while (i_4 != 0);
                    if (temp0_3 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int64_t var_2d8_1 = 0;
                __builtin_memset(&s_8, 0, 0x20);
                if (s_7 >= 1)
                {
                    int64_t i_5 = 0;
                    do
                    {
                        *(var_2d0 + (i_5 << 2)) = 0;
                        i_5 = (i_5 + 1);
                    } while (i_5 < s_7);
                }
                if (var_2c8 != var_4d0)
                {
                    cv::fastFree(var_2c8);
                }
                if (var_278 != 0)
                {
                    int32_t temp0_4;
                    int32_t i_6;
                    do
                    {
                        temp0_4 = __ldaxr((var_278 + 0x14));
                        i_6 = __stlxr((temp0_4 - 1), (var_278 + 0x14));
                    } while (i_6 != 0);
                    if (temp0_4 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int64_t var_278_1 = 0;
                __builtin_memset(&s_10, 0, 0x20);
                if (s_9 >= 1)
                {
                    int64_t i_7 = 0;
                    do
                    {
                        *(var_270 + (i_7 << 2)) = 0;
                        i_7 = (i_7 + 1);
                    } while (i_7 < s_9);
                }
                if (var_268 != var_4c8)
                {
                    cv::fastFree(var_268);
                }
                if (var_218 != 0)
                {
                    int32_t temp0_5;
                    int32_t i_8;
                    do
                    {
                        temp0_5 = __ldaxr((var_218 + 0x14));
                        i_8 = __stlxr((temp0_5 - 1), (var_218 + 0x14));
                    } while (i_8 != 0);
                    if (temp0_5 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int64_t var_218_1 = 0;
                __builtin_memset(&s_12, 0, 0x20);
                if (*s_11[4] >= 1)
                {
                    int64_t i_9 = 0;
                    do
                    {
                        *(var_210 + (i_9 << 2)) = 0;
                        i_9 = (i_9 + 1);
                    } while (i_9 < *s_11[4]);
                }
                if (var_208 != arg2)
                {
                    cv::fastFree(var_208);
                }
                x19_7 = 0;
            }
        }
    }
    else
    {
        if ((*data_6ffc0 & 1) == 0)
        {
            x20_1 = &*(data_6ffc0 + 1);
        }
        else
        {
            x20_1 = *(data_6ffca + 6);
        }
        var_430 = data_6ffb8;
        __builtin_memset(&s_2, 0, 0x18);
        x0_101 = strlen(x20_1);
    }
    if ((((x0_2 & 1) != 0 && x0_99 < -0x10) || ((x0_2 & 1) == 0 && x0_101 < -0x10)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    if (((((x0_2 & 1) != 0 && x0_99 < -0x10) || ((x0_2 & 1) == 0 && x0_101 < -0x10)) || (((x0_2 & 1) != 0 && x0_99 >= -0x10) && x0_121 < -0x10)))
    {
        int64_t x0_142 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        LogCapture::~LogCapture();
        if (var_398 != 0)
        {
            int32_t temp0_6;
            int32_t i_10;
            do
            {
                temp0_6 = __ldaxr((var_398 + 0x14));
                i_10 = __stlxr((temp0_6 - 1), (var_398 + 0x14));
            } while (i_10 != 0);
            if (temp0_6 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int64_t var_398_2 = 0;
        __builtin_memset(&x26[4], 0, 0x20);
        if (s_3 >= 1)
        {
            int64_t i_11 = 0;
            do
            {
                *(var_390 + (i_11 << 2)) = 0;
                i_11 = (i_11 + 1);
            } while (i_11 < s_3);
        }
        if (var_388 != arg4)
        {
            cv::fastFree(var_388);
        }
        if (var_338 != 0)
        {
            int32_t temp0_8;
            int32_t i_12;
            do
            {
                temp0_8 = __ldaxr((var_338 + 0x14));
                i_12 = __stlxr((temp0_8 - 1), (var_338 + 0x14));
            } while (i_12 != 0);
            if (temp0_8 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int64_t var_338_2 = 0;
        __builtin_memset(&x26[0x1c], 0, 0x20);
        if (s_5 >= 1)
        {
            int64_t i_13 = 0;
            do
            {
                *(var_330 + (i_13 << 2)) = 0;
                i_13 = (i_13 + 1);
            } while (i_13 < s_5);
        }
        if (var_328 != arg3)
        {
            cv::fastFree(var_328);
        }
        if (var_2d8 != 0)
        {
            int32_t temp0_9;
            int32_t i_14;
            do
            {
                temp0_9 = __ldaxr((var_2d8 + 0x14));
                i_14 = __stlxr((temp0_9 - 1), (var_2d8 + 0x14));
            } while (i_14 != 0);
            if (temp0_9 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int64_t var_2d8_2 = 0;
        __builtin_memset(&x26[0x34], 0, 0x20);
        if (s_7 >= 1)
        {
            int64_t i_15 = 0;
            do
            {
                *(var_2d0 + (i_15 << 2)) = 0;
                i_15 = (i_15 + 1);
            } while (i_15 < s_7);
        }
        if (var_2c8 != var_4d0)
        {
            cv::fastFree(var_2c8);
        }
        if (var_278 != 0)
        {
            int32_t temp0_10;
            int32_t i_16;
            do
            {
                temp0_10 = __ldaxr((var_278 + 0x14));
                i_16 = __stlxr((temp0_10 - 1), (var_278 + 0x14));
            } while (i_16 != 0);
            if (temp0_10 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int64_t var_278_2 = 0;
        __builtin_memset(&x24[4], 0, 0x20);
        if (s_9 >= 1)
        {
            int64_t i_17 = 0;
            do
            {
                *(var_270 + (i_17 << 2)) = 0;
                i_17 = (i_17 + 1);
            } while (i_17 < s_9);
        }
        if (var_268 != var_4c8)
        {
            cv::fastFree(var_268);
        }
        if (var_218 != 0)
        {
            int32_t temp0_11;
            int32_t i_18;
            do
            {
                temp0_11 = __ldaxr((var_218 + 0x14));
                i_18 = __stlxr((temp0_11 - 1), (var_218 + 0x14));
            } while (i_18 != 0);
            if (temp0_11 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int64_t var_218_2 = 0;
        __builtin_memset(&x24[0x1c], 0, 0x20);
        if (*s_11[4] >= 1)
        {
            int64_t i_19 = 0;
            do
            {
                *(var_210 + (i_19 << 2)) = 0;
                i_19 = (i_19 + 1);
            } while (i_19 < *s_11[4]);
        }
        if (var_208 != arg2)
        {
            cv::fastFree(var_208);
        }
        cv::FileStorage::~FileStorage();
        int64_t x0_149;
        int64_t x1_29;
        cv::Mat* x2_16;
        cv::Mat* x3_5;
        x0_149 = _Unwind_Resume(x0_142);
        /* tailcall */
        return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_149, x1_29, x2_16, x3_5);
    }
    if (((x0_2 & 1) == 0 && x0_101 >= -0x10))
    {
        void* var_418_1;
        void* x21_2;
        if (x0_101 >= 0x17)
        {
            uint64_t x22_3 = ((x0_101 + 0x10) & 0xfffffffffffffff0);
            void* x0_103 = operator new(x22_3);
            x21_2 = x0_103;
            size_t var_420_1 = x0_101;
            var_418_1 = x0_103;
            s_2 = (x22_3 | 1);
        }
        else
        {
            x21_2 = &*s_2[1];
            s_2 = (x0_101 << 1);
        }
        if ((x0_101 >= 0x17 || (x0_101 < 0x17 && x0_101 != 0)))
        {
            memcpy(x21_2, x20_1, x0_101);
        }
        *(x21_2 + x0_101) = 0;
        int32_t x0_106 = g3::logLevel(&var_430);
        int32_t x19_3;
        if ((x0_106 & 1) == 0)
        {
            x19_3 = 0;
            if ((s_2 & 1) != 0)
            {
            label_41fd8:
                operator delete(var_418_1);
                if ((x19_3 & 1) != 0)
                {
                    goto label_42004;
                }
            }
        }
        else
        {
            char var_448 = 0xc;
            int32_t var_447;
            __builtin_strncpy(&var_447, "region", 0x17);
            x19_3 = g3::logTag(&var_448);
            if ((var_448 & 1) != 0)
            {
                void* var_438;
                operator delete(var_438);
                if ((s_2 & 1) != 0)
                {
                    goto label_41fd8;
                }
            }
            else if ((s_2 & 1) != 0)
            {
                goto label_41fd8;
            }
        }
        if (((((x0_106 & 1) == 0 && (s_2 & 1) == 0) || (x0_106 & 1) != 0) && (x19_3 & 1) != 0))
        {
        label_42004:
            LogCapture::LogCapture(&s_14, "region", &data_6ffb8, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        x19_7 = -1;
    }
    if (((((x0_2 & 1) != 0 && x0_99 >= -0x10) && x0_121 >= -0x10) || ((x0_2 & 1) == 0 && x0_101 >= -0x10)))
    {
        cv::FileStorage::~FileStorage();
        if (*(x25 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        return x19_7;
    }
}

int64_t sub_42588(int64_t arg1, int64_t arg2 @ x23, int64_t arg3 @ x27, int64_t arg4 @ x28, int64_t arg5, int64_t arg6, int32_t arg7, int64_t arg8, int64_t arg9, void* arg10, int32_t arg11, int64_t arg12, int64_t arg13, void* arg14, int32_t arg15, int64_t arg16, int64_t arg17, void* arg18, int32_t arg19, int64_t arg20, int64_t arg21, void* arg22, int32_t arg23, int64_t arg24, int64_t arg25, void* arg26)
{
    if (arg8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg8 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg8 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg7 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg9 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg7);
    }
    if (arg10 != arg4)
    {
        cv::fastFree(arg10);
    }
    if (arg12 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg12 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg12 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg12 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg11 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg13 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg11);
    }
    if (arg14 != arg3)
    {
        cv::fastFree(arg14);
    }
    if (arg16 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg16 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg16 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg16 = 0;
    __builtin_memset((x26 + 0xd0), 0, 0x20);
    if (arg15 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg17 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg15);
    }
    if (arg18 != arg5)
    {
        cv::fastFree(arg18);
    }
    if (arg20 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((arg20 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (arg20 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg20 = 0;
    int64_t x24;
    __builtin_memset((x24 + 0x10), 0, 0x20);
    if (arg19 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg21 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg19);
    }
    if (arg22 != arg6)
    {
        cv::fastFree(arg22);
    }
    if (arg24 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((arg24 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (arg24 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg24 = 0;
    __builtin_memset((x24 + 0x70), 0, 0x20);
    if (arg23 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg25 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg23);
    }
    if (arg26 != arg2)
    {
        cv::fastFree(arg26);
    }
    cv::FileStorage::~FileStorage();
    int64_t x0_6;
    int64_t x1;
    cv::Mat* x2;
    cv::Mat* x3;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_6, x1, x2, x3);
}

int64_t sub_42590(int64_t arg1, int64_t arg2 @ x23, int64_t arg3 @ x27, int64_t arg4 @ x28, int64_t arg5, int64_t arg6, char arg7, void* arg8, char arg9, void* arg10, int32_t arg11, int64_t arg12, int64_t arg13, void* arg14, int32_t arg15, int64_t arg16, int64_t arg17, void* arg18, int32_t arg19, int64_t arg20, int64_t arg21, void* arg22, int32_t arg23, int64_t arg24, int64_t arg25, void* arg26, int32_t arg27, int64_t arg28, int64_t arg29, void* arg30)
{
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    int64_t x8_2;
    if ((((arg7 & 1) == 0 && (arg9 & 1) == 0) || ((arg7 & 1) != 0 && (arg9 & 1) == 0)))
    {
        x8_2 = arg12;
        if (x8_2 != 0)
        {
        label_426d8:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg7 & 1) == 0 && (arg9 & 1) != 0) || ((arg7 & 1) != 0 && (arg9 & 1) != 0)))
    {
        operator delete(arg10);
        x8_2 = arg12;
        if (x8_2 != 0)
        {
            goto label_426d8;
        }
    }
    arg12 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg11 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg13 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg11);
    }
    if (arg14 != arg4)
    {
        cv::fastFree(arg14);
    }
    if (arg16 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg16 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg16 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg16 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg15 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg17 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg15);
    }
    if (arg18 != arg3)
    {
        cv::fastFree(arg18);
    }
    if (arg20 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg20 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg20 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg20 = 0;
    __builtin_memset((x26 + 0xd0), 0, 0x20);
    if (arg19 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg21 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg19);
    }
    if (arg22 != arg5)
    {
        cv::fastFree(arg22);
    }
    if (arg24 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((arg24 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (arg24 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg24 = 0;
    int64_t x24;
    __builtin_memset((x24 + 0x10), 0, 0x20);
    if (arg23 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg25 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg23);
    }
    if (arg26 != arg6)
    {
        cv::fastFree(arg26);
    }
    if (arg28 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((arg28 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (arg28 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg28 = 0;
    __builtin_memset((x24 + 0x70), 0, 0x20);
    if (arg27 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg29 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg27);
    }
    if (arg30 != arg2)
    {
        cv::fastFree(arg30);
    }
    cv::FileStorage::~FileStorage();
    int64_t x0_8;
    int64_t x1;
    cv::Mat* x2;
    cv::Mat* x3;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_8, x1, x2, x3);
}

int64_t sub_425e8(int64_t arg1, int64_t arg2 @ x23, int64_t arg3 @ x27, int64_t arg4 @ x28, int64_t arg5, int64_t arg6, char arg7, void* arg8, char arg9, void* arg10, int32_t arg11, int64_t arg12, int64_t arg13, void* arg14, int32_t arg15, int64_t arg16, int64_t arg17, void* arg18, int32_t arg19, int64_t arg20, int64_t arg21, void* arg22, int32_t arg23, int64_t arg24, int64_t arg25, void* arg26, int32_t arg27, int64_t arg28, int64_t arg29, void* arg30)
{
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    int64_t x8_2;
    if ((((arg7 & 1) == 0 && (arg9 & 1) == 0) || ((arg7 & 1) != 0 && (arg9 & 1) == 0)))
    {
        x8_2 = arg12;
        if (x8_2 != 0)
        {
        label_426d8:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg7 & 1) == 0 && (arg9 & 1) != 0) || ((arg7 & 1) != 0 && (arg9 & 1) != 0)))
    {
        operator delete(arg10);
        x8_2 = arg12;
        if (x8_2 != 0)
        {
            goto label_426d8;
        }
    }
    arg12 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg11 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg13 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg11);
    }
    if (arg14 != arg4)
    {
        cv::fastFree(arg14);
    }
    if (arg16 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg16 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg16 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg16 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg15 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg17 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg15);
    }
    if (arg18 != arg3)
    {
        cv::fastFree(arg18);
    }
    if (arg20 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg20 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg20 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg20 = 0;
    __builtin_memset((x26 + 0xd0), 0, 0x20);
    if (arg19 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg21 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg19);
    }
    if (arg22 != arg5)
    {
        cv::fastFree(arg22);
    }
    if (arg24 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((arg24 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (arg24 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg24 = 0;
    int64_t x24;
    __builtin_memset((x24 + 0x10), 0, 0x20);
    if (arg23 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg25 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg23);
    }
    if (arg26 != arg6)
    {
        cv::fastFree(arg26);
    }
    if (arg28 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((arg28 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (arg28 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg28 = 0;
    __builtin_memset((x24 + 0x70), 0, 0x20);
    if (arg27 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg29 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg27);
    }
    if (arg30 != arg2)
    {
        cv::fastFree(arg30);
    }
    cv::FileStorage::~FileStorage();
    int64_t x0_8;
    int64_t x1;
    cv::Mat* x2;
    cv::Mat* x3;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_8, x1, x2, x3);
}

int64_t sub_4261c(int64_t arg1)
{
    cv::FileStorage::~FileStorage();
    int64_t x0_1;
    int64_t x1;
    cv::Mat* x2;
    cv::Mat* x3;
    x0_1 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_1, x1, x2, x3);
}

int64_t sub_42620(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    cv::FileStorage::~FileStorage();
    int64_t x0_3;
    int64_t x1;
    cv::Mat* x2;
    cv::Mat* x3;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_3, x1, x2, x3);
}

void sub_42640(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t sub_4266c(int64_t arg1, int64_t arg2 @ x23, int64_t arg3 @ x27, int64_t arg4 @ x28, int64_t arg5, int64_t arg6, char arg7, void* arg8, int32_t arg9, int64_t arg10, int64_t arg11, void* arg12, int32_t arg13, int64_t arg14, int64_t arg15, void* arg16, int32_t arg17, int64_t arg18, int64_t arg19, void* arg20, int32_t arg21, int64_t arg22, int64_t arg23, void* arg24, int32_t arg25, int64_t arg26, int64_t arg27, void* arg28)
{
    int64_t x8_1;
    if ((arg7 & 1) == 0)
    {
        x8_1 = arg10;
    }
    else
    {
        operator delete(arg8);
        x8_1 = arg10;
    }
    if ((((arg7 & 1) == 0 && x8_1 != 0) || ((arg7 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg10 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg9 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg11 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg9);
    }
    if (arg12 != arg4)
    {
        cv::fastFree(arg12);
    }
    if (arg14 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg14 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg14 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg14 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg13 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg15 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg13);
    }
    if (arg16 != arg3)
    {
        cv::fastFree(arg16);
    }
    if (arg18 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg18 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg18 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg18 = 0;
    __builtin_memset((x26 + 0xd0), 0, 0x20);
    if (arg17 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg19 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg17);
    }
    if (arg20 != arg5)
    {
        cv::fastFree(arg20);
    }
    if (arg22 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((arg22 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (arg22 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg22 = 0;
    int64_t x24;
    __builtin_memset((x24 + 0x10), 0, 0x20);
    if (arg21 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg23 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg21);
    }
    if (arg24 != arg6)
    {
        cv::fastFree(arg24);
    }
    if (arg26 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((arg26 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (arg26 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg26 = 0;
    __builtin_memset((x24 + 0x70), 0, 0x20);
    if (arg25 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg27 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg25);
    }
    if (arg28 != arg2)
    {
        cv::fastFree(arg28);
    }
    cv::FileStorage::~FileStorage();
    int64_t x0_7;
    int64_t x1;
    cv::Mat* x2;
    cv::Mat* x3;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_7, x1, x2, x3);
}

int64_t sub_42690(int64_t arg1, int64_t arg2 @ x23, int64_t arg3 @ x27, int64_t arg4 @ x28, int64_t arg5, int64_t arg6, int32_t arg7, int64_t arg8, int64_t arg9, void* arg10, int32_t arg11, int64_t arg12, int64_t arg13, void* arg14, int32_t arg15, int64_t arg16, int64_t arg17, void* arg18, int32_t arg19, int64_t arg20, int64_t arg21, void* arg22, int32_t arg23, int64_t arg24, int64_t arg25, void* arg26, char arg27, void* arg28)
{
    if ((arg27 & 1) != 0)
    {
        operator delete(arg28);
    }
    if (arg8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg8 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg8 = 0;
    int64_t x26;
    __builtin_memset((x26 + 0x10), 0, 0x20);
    if (arg7 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg9 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg7);
    }
    if (arg10 != arg4)
    {
        cv::fastFree(arg10);
    }
    if (arg12 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((arg12 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (arg12 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg12 = 0;
    __builtin_memset((x26 + 0x70), 0, 0x20);
    if (arg11 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(arg13 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < arg11);
    }
    if (arg14 != arg3)
    {
        cv::fastFree(arg14);
    }
    if (arg16 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((arg16 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (arg16 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg16 = 0;
    __builtin_memset((x26 + 0xd0), 0, 0x20);
    if (arg15 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(arg17 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < arg15);
    }
    if (arg18 != arg5)
    {
        cv::fastFree(arg18);
    }
    if (arg20 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((arg20 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (arg20 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg20 = 0;
    int64_t x24;
    __builtin_memset((x24 + 0x10), 0, 0x20);
    if (arg19 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(arg21 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < arg19);
    }
    if (arg22 != arg6)
    {
        cv::fastFree(arg22);
    }
    if (arg24 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((arg24 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (arg24 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg24 = 0;
    __builtin_memset((x24 + 0x70), 0, 0x20);
    if (arg23 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            *(arg25 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < arg23);
    }
    if (arg26 != arg2)
    {
        cv::fastFree(arg26);
    }
    cv::FileStorage::~FileStorage();
    int64_t x0_7;
    int64_t x1;
    cv::Mat* x2;
    cv::Mat* x3;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_7, x1, x2, x3);
}

void sub_428ec(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t sub_429a0(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    cv::FileStorage::~FileStorage();
    int64_t x0_2;
    int64_t x1;
    cv::Mat* x2;
    cv::Mat* x3;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_2, x1, x2, x3);
}

int64_t feasibal_region::feasibal_region::attemtpRead<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(int64_t arg1, int64_t arg2, cv::Mat* arg3, cv::Mat* arg4)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    cv::FileStorage::operator[](arg4);
    int32_t x0_1 = cv::FileNode::type();
    if (x0_1 != 0)
    {
        cv::FileStorage::operator[](arg4);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        void var_68;
        x0_1 = cv::read(&var_68, arg3, &s);
        void* var_40;
        if ((s & 1) != 0)
        {
            x0_1 = operator delete(var_40);
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int64_t* feasibal_region::feasibal_region::attemtpRead<cv::Mat>(int64_t arg1, int64_t arg2, cv::Mat* arg3, cv::Mat* arg4)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    cv::FileStorage::operator[](arg4);
    int64_t* x0_1 = cv::FileNode::type();
    if (x0_1 != 0)
    {
        cv::FileStorage::operator[](arg4);
        int32_t var_a8 = 0x42ff0000;
        int128_t s;
        __builtin_memset(&s, 0, 0x3c);
        void* var_68_1 = &*s[4];
        int64_t var_58;
        int64_t* var_60_1 = &var_58;
        var_58 = 0;
        int64_t var_50_1 = 0;
        void var_c0;
        cv::read(&var_c0, arg3, &var_a8);
        int128_t var_78;
        int64_t x8_1 = *var_78[8];
        if (x8_1 != 0)
        {
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_1 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_78[8] = 0;
        bool cond:0_1 = s < 1;
        int128_t s_1;
        __builtin_memset(&s_1, 0, 0x20);
        if (!(cond:0_1))
        {
            int64_t i_1 = 0;
            do
            {
                *(var_68_1 + (i_1 << 2)) = 0;
                i_1 = (i_1 + 1);
            } while (i_1 < s);
        }
        x0_1 = var_60_1;
        if (x0_1 != &var_58)
        {
            x0_1 = cv::fastFree(x0_1);
        }
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int64_t feasibal_region::feasibal_region::init(cv::Mat* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    if ((arg1 + 0x258) != arg2)
    {
        *(arg2 + 8);
        void* x1;
        if ((*arg2 & 1) != 0)
        {
            x1 = *(arg2 + 0x10);
        }
        else
        {
            x1 = &arg2[1];
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 0x258), x1);
    }
    feasibal_region::feasibal_region::readParam(arg1);
    int64_t x0_2 = operator new(0xc18);
    feasibal_region::ground_process::ground_process();
    void* x21 = *(arg1 + 0x270);
    *(arg1 + 0x270) = x0_2;
    if (x21 != 0)
    {
        feasibal_region::ground_process::~ground_process();
        operator delete(x21);
    }
    feasibal_region::PreParamInfo::PreParamInfo();
    int16_t var_50 = 0;
    int32_t var_4c = 0x40a00000;
    void var_240;
    feasibal_region::PreParamInfo::operator=(&var_240);
    feasibal_region::ground_process::init(*(arg1 + 0x270));
    feasibal_region::PreParamInfo::~PreParamInfo();
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

int64_t feasibal_region::feasibal_region::readParam(void* arg1, cv::Mat* arg2, int32_t* arg3, int32_t arg4, double arg5)
{
    void tpidr_el0;
    uint64_t x2 = _ReadStatusReg(tpidr_el0);
    int64_t x2_1 = *(x2 + 0x28);
    double v9;
    v9 = 0x43f00000;
    double v10;
    v10 = 0x43700000;
    double v12;
    v12 = 0x44200000;
    double v11;
    v11 = 0x43a00000;
    int32_t var_110;
    int32_t* x5 = (&var_110 | 8);
    int32_t var_170;
    int32_t* x28 = (&var_170 | 8);
    int32_t var_1d0;
    int64_t x20 = (&var_1d0 | 8);
    int32_t var_230;
    int32_t* x24 = (&var_230 | 8);
    var_110 = 0x42ff0000;
    int128_t s_22;
    __builtin_memset(&s_22, 0, 0x3c);
    var_170 = 0x42ff0000;
    int128_t s_21;
    __builtin_memset(&s_21, 0, 0x3c);
    var_1d0 = 0x42ff0000;
    int128_t s_20;
    __builtin_memset(&s_20, 0, 0x3c);
    int32_t var_290;
    int32_t* x23 = (&var_290 | 8);
    int32_t* var_d0 = x5;
    int64_t var_c0;
    int64_t* var_c8 = &var_c0;
    var_c0 = 0;
    int64_t var_b8 = 0;
    int32_t* var_130 = x28;
    int64_t var_120;
    int64_t* var_128 = &var_120;
    int64_t var_118 = 0;
    var_120 = 0;
    int64_t var_190 = x20;
    int64_t var_180;
    int64_t* var_510 = &var_180;
    int64_t* var_188 = &var_180;
    int64_t var_178 = 0;
    var_180 = 0;
    var_230 = 0x42ff0000;
    int128_t s_19;
    __builtin_memset(&s_19, 0, 0x3c);
    int32_t* var_1f0 = x24;
    int64_t var_1e0;
    int64_t* var_1e8 = &var_1e0;
    int64_t var_1d8 = 0;
    var_1e0 = 0;
    var_290 = 0x42ff0000;
    int128_t s_18;
    __builtin_memset(&s_18, 0, 0x3c);
    int32_t* var_250 = x23;
    int64_t var_240;
    int64_t* var_530 = &var_240;
    int64_t* var_528 = &var_1e0;
    int64_t* var_248 = &var_240;
    int64_t var_238 = 0;
    var_240 = 0;
    *(arg1 + 0x278) = arg4;
    *(arg1 + 0x13c) = 0x140;
    *(arg1 + 0x134) = 0xf000000004;
    if (arg4 <= 3)
    {
        int64_t v2 = 0x1a8000000f0;
        int64_t v4 = 0x140000000f0;
        double v1;
        v1 = 0x44540000;
        double v3;
        v3 = 0x43d40000;
        int32_t x8_2 = 0xa;
        if (arg4 == 2)
        {
            v9 = 0x44200000;
            v2 = 0xc800000140;
            v1 = 0x43c80000;
            v3 = 0x43480000;
            v10 = 0x43a00000;
        }
        else if (arg4 == 3)
        {
            v1 = 0x44200000;
            v3 = 0x43a00000;
            v2 = 0x140000000c8;
            v9 = 0x43c80000;
            v10 = 0x43480000;
        }
        else if (arg4 == 0)
        {
            /* nop */
        }
        if ((arg4 == 2 || arg4 == 3))
        {
            x8_2 = 8;
        }
        if (((arg4 == 1 || arg4 == 2) || arg4 == 3))
        {
            v11 = v3;
            v12 = v1;
            v4 = v2;
            *(arg1 + 0x134) = x8_2;
        }
        *(arg1 + 0x138) = v4;
    }
    int32_t var_2f0 = 0x42ff0000;
    int128_t s_15;
    __builtin_memset(&s_15, 0, 0x3c);
    void* var_2b0 = &*s_15[4];
    int64_t var_2a0;
    int64_t* var_2a8 = &var_2a0;
    int64_t var_298 = 0;
    var_2a0 = 0;
    int32_t* var_468 = 0x300000003;
    int64_t* var_520 = &var_c0;
    int64_t* var_518 = &var_120;
    int128_t v1_1;
    int128_t v2_1;
    int128_t v3_1;
    v1_1 = cv::Mat::create(&var_2f0, &*nullptr->ident.signature[2], &var_468);
    uint64_t x10 = s_15;
    var_468 = &var_2f0;
    int64_t x8_4;
    if (x10 < 1)
    {
        x8_4 = 0;
    }
    else
    {
        x8_4 = var_2a8[(x10 - 1)];
    }
    uint32_t x9_2 = *var_2f0[1];
    int64_t* s_2;
    __builtin_memset(&s_2, 0, 0x18);
    int64_t s_43;
    int64_t var_448_1;
    int32_t var_2e8;
    int32_t var_2e4;
    int64_t s_16;
    if ((x9_2 & 0x40) != 0)
    {
        int64_t s_29 = s_16;
        s_43 = s_29;
        int64_t x13_1;
        if (x10 < 3)
        {
            x13_1 = (var_2e4 * var_2e8);
        }
        else
        {
            int64_t i_64;
            if (x10 != 3)
            {
                i_64 = (x10 & 0xfffffffc);
                v1_1 = 1;
                *v1_1[8] = 1;
                void* x13_2 = (var_2b0 + 8);
                int64_t i_58 = i_64;
                int128_t v0 = v1_1;
                int64_t i;
                do
                {
                    v2_1 = *(x13_2 - 8);
                    v3_1 = *x13_2;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_4 = v1_1;
                    int64_t x0_2 = (v0 * v1_1);
                    int64_t x15_2 = (v1_1 * v0);
                    v1_1 = (v1_1 * v0);
                    int64_t x16_3 = (v0 * x2_4);
                    v0 = x0_2;
                    i = i_58;
                    i_58 = (i_58 - 4);
                    *v1_1[8] = x15_2;
                    *v0[8] = x16_3;
                    x13_2 = (x13_2 + 0x10);
                } while (i != 4);
                x13_1 = ((v0 * v1_1) * (v0 * v1_1));
            }
            else
            {
                i_64 = 0;
                x13_1 = 1;
            }
            if ((x10 == 3 || (x10 != 3 && i_64 != x10)))
            {
                int64_t i_52 = (x10 - i_64);
                void* x11_4 = (var_2b0 + (i_64 << 2));
                int64_t i_1;
                do
                {
                    int64_t x12_1 = *x11_4;
                    x11_4 = (x11_4 + 4);
                    i_1 = i_52;
                    i_52 = (i_52 - 1);
                    x13_1 = (x13_1 * x12_1);
                } while (i_1 != 1);
            }
        }
        var_448_1 = (s_29 + (x13_1 * x8_4));
    }
    cv::MatConstIterator::seek(&var_468, false);
    int64_t* s_23 = s_2;
    *s_23 = 0x40803149ba5e353f;
    int32_t* x1_1 = var_468;
    if (x1_1 != 0)
    {
        void* s_49 = (s_23 + x8_4);
        void* s_75 = s_49;
        if (s_49 >= var_448_1)
        {
            cv::MatConstIterator::seek(&var_468, true);
            x1_1 = var_468;
        }
        else
        {
            s_23 = s_49;
        }
    }
    int32_t* var_490 = x1_1;
    int64_t* s_37 = s_23;
    int64_t s_69 = s_43;
    *s_23 = 0;
    if (x1_1 == 0)
    {
        *s_23 = 0x3ff0000000000000;
    }
    else
    {
        int64_t* s_50 = (s_23 + x8_4);
        int64_t* s_61 = s_50;
        if (s_50 >= var_448_1)
        {
            cv::MatConstIterator::seek(&var_490, true);
            s_50 = s_23;
            x1_1 = var_490;
        }
        *s_50 = 0x407499c6a7ef9db2;
        int64_t* s_81;
        if (x1_1 == 0)
        {
            s_81 = s_50;
            *s_81 = 0;
        }
        else
        {
            s_81 = (s_50 + x8_4);
            int64_t* s_85 = s_81;
            if (s_81 >= var_448_1)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_81 = s_50;
                x1_1 = var_490;
            }
            *s_81 = 0;
        }
        int64_t* s_89;
        if ((x1_1 == 0 || (x1_1 != 0 && x1_1 != 0)))
        {
            s_89 = (s_81 + x8_4);
            int64_t* s_93 = s_89;
            if (s_89 >= var_448_1)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_89 = s_81;
                x1_1 = var_490;
            }
        }
        if ((x1_1 == 0 || x1_1 == 0))
        {
            s_89 = s_81;
        }
        *s_89 = 0x40803149ba5e353f;
        int64_t* s_97;
        if (x1_1 == 0)
        {
            s_97 = s_89;
        }
        else
        {
            s_97 = (s_89 + x8_4);
            int64_t* s_101 = s_97;
            if (s_97 >= var_448_1)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_97 = s_89;
                x1_1 = var_490;
            }
        }
        *s_97 = 0x406e065604189375;
        int64_t* s_105;
        if (x1_1 == 0)
        {
            s_105 = s_97;
            *s_105 = 0;
        }
        else
        {
            s_105 = (s_97 + x8_4);
            int64_t* s_109 = s_105;
            if (s_105 >= var_448_1)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_105 = s_97;
                x1_1 = var_490;
            }
            *s_105 = 0;
        }
        int64_t* s_113;
        if ((x1_1 == 0 || (x1_1 != 0 && x1_1 != 0)))
        {
            s_113 = (s_105 + x8_4);
            int64_t* s_117 = s_113;
            if (s_113 >= var_448_1)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_113 = s_105;
                x1_1 = var_490;
            }
            *s_113 = 0;
        }
        if ((x1_1 == 0 || x1_1 == 0))
        {
            s_113 = s_105;
            *s_113 = 0;
        }
        int64_t* s_121;
        if (((x1_1 == 0 || x1_1 == 0) || ((x1_1 == 0 || (x1_1 != 0 && x1_1 != 0)) && x1_1 != 0)))
        {
            s_121 = (s_113 + x8_4);
            int64_t* s_125 = s_121;
            if (s_121 >= var_448_1)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_121 = s_113;
                x1_1 = var_490;
            }
        }
        if (((x1_1 == 0 || x1_1 == 0) || ((x1_1 == 0 || (x1_1 != 0 && x1_1 != 0)) && x1_1 == 0)))
        {
            s_121 = s_113;
        }
        *s_121 = 0x3ff0000000000000;
        if (x1_1 != 0)
        {
            void* x8_10 = (s_121 + x8_4);
            void* var_480_7 = x8_10;
            if (x8_10 >= var_448_1)
            {
                int64_t* s_126 = s_121;
                cv::MatConstIterator::seek(&var_490, true);
            }
        }
    }
    int32_t var_440;
    int64_t x23_1 = (&var_440 | 8);
    int128_t s_8;
    __builtin_memset(&s_8, 0, 0x3c);
    int64_t var_3f0;
    int64_t* var_3f8 = &var_3f0;
    var_3f0 = 0;
    int64_t var_3e8 = 0;
    var_440 = 0x42ff0006;
    int128_t v0_1;
    int128_t v1_2;
    int128_t v2_2;
    int128_t v3_2;
    v0_1 = cv::Mat_<double>::operator=(&var_440);
    int128_t var_1a0;
    int64_t x8_11 = *var_1a0[8];
    if (x8_11 != 0)
    {
        int32_t temp0_1;
        int32_t i_2;
        do
        {
            temp0_1 = __ldaxr((x8_11 + 0x14));
            i_2 = __stlxr((temp0_1 - 1), (x8_11 + 0x14));
        } while (i_2 != 0);
        if (temp0_1 == 1)
        {
            v0_1 = cv::Mat::deallocate();
        }
    }
    int32_t x8_13 = s_20;
    v0_1 = 0;
    *v0_1[8] = 0;
    *var_1a0[8] = 0;
    __builtin_memset(&*s_20[0xc], 0, 0x20);
    if (x8_13 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(var_190 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < s_20);
    }
    v0_1 = var_440;
    var_1d0 = v0_1;
    s_20 = s_8;
    int128_t var_42c;
    int128_t var_1bc = var_42c;
    int128_t var_410;
    int128_t var_1a0_1 = var_410;
    int32_t x9_10;
    if (var_188 == var_510)
    {
        x9_10 = v0_1;
    }
    else
    {
        cv::fastFree(var_188);
        x9_10 = s_8;
        var_190 = x20;
        var_188 = var_510;
    }
    int64_t* x0_15;
    if (x9_10 > 2)
    {
        x0_15 = &var_3f0;
        int64_t var_400_1 = x23_1;
        int64_t* var_3f8_1 = &var_3f0;
        var_190 = x23_1;
    }
    else
    {
        x0_15 = var_3f8;
        var_180 = *x0_15;
        int64_t var_178_1 = x0_15[1];
    }
    v0_1 = 0;
    *v0_1[8] = 0;
    var_440 = 0x42ff0000;
    __builtin_memset((&var_440 | 4), 0, 0x34);
    *var_410[8] = 0;
    __builtin_memset(&*s_8[0xc], 0, 0x20);
    if (x0_15 != &var_3f0)
    {
        cv::fastFree(x0_15);
    }
    int128_t var_2c0;
    int64_t x8_18 = *var_2c0[8];
    if (x8_18 != 0)
    {
        int32_t temp0_2;
        int32_t i_4;
        do
        {
            temp0_2 = __ldaxr((x8_18 + 0x14));
            i_4 = __stlxr((temp0_2 - 1), (x8_18 + 0x14));
        } while (i_4 != 0);
        if (temp0_2 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_20 = s_15;
    v0_1 = 0;
    *v0_1[8] = 0;
    *var_2c0[8] = 0;
    __builtin_memset(&s_16, 0, 0x20);
    if (x8_20 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(var_2b0 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < s_15);
    }
    if (var_2a8 != &var_2a0)
    {
        cv::fastFree(var_2a8);
    }
    v0_1 = arg5;
    *(arg1 + 0x34) = arg4;
    *(arg1 + 0x30) = 0;
    *(arg1 + 0x251) = 1;
    *(arg1 + 0x58) = 0x3f4ccccd;
    *(arg1 + 0x48) = v0_1;
    *(arg1 + 0x4c) = *arg3;
    *(arg1 + 0x50) = arg3[1];
    int32_t x8_24 = arg3[2];
    *(arg1 + 0x38) = 0x44bb8000447a0000;
    *(arg1 + 0x44) = 0x41700000;
    *(arg1 + 0x54) = x8_24;
    *(arg1 + 0x5c) = 0;
    var_2f0 = 0x42ff0000;
    __builtin_memset(&s_15, 0, 0x3c);
    void* var_2b0_1 = &*s_15[4];
    int64_t* var_2a8_1 = &var_2a0;
    int64_t var_298_1 = 0;
    var_2a0 = 0;
    var_468 = 0x300000001;
    int128_t v1_3;
    int128_t v2_3;
    int128_t v3_3;
    v1_3 = cv::Mat::create(&var_2f0, &*nullptr->ident.signature[2], &var_468);
    uint64_t x10_17 = s_15;
    var_468 = &var_2f0;
    int64_t x8_26;
    if (x10_17 < 1)
    {
        x8_26 = 0;
    }
    else
    {
        x8_26 = var_2a8_1[(x10_17 - 1)];
    }
    uint32_t x9_14 = *var_2f0[1];
    int64_t* s_3;
    __builtin_memset(&s_3, 0, 0x18);
    int64_t s_44;
    int64_t var_448_2;
    if ((x9_14 & 0x40) != 0)
    {
        int64_t s_30 = s_16;
        s_44 = s_30;
        int64_t x13_5;
        if (x10_17 < 3)
        {
            x13_5 = (var_2e4 * var_2e8);
        }
        else
        {
            int64_t i_65;
            if (x10_17 != 3)
            {
                i_65 = (x10_17 & 0xfffffffc);
                v1_3 = 1;
                *v1_3[8] = 1;
                void* x13_6 = (var_2b0_1 + 8);
                int64_t i_59 = i_65;
                int128_t v0_2 = v1_3;
                int64_t i_6;
                do
                {
                    v2_3 = *(x13_6 - 8);
                    v3_3 = *x13_6;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_17 = v1_3;
                    int64_t x0_19 = (v0_2 * v1_3);
                    int64_t x15_6 = (v1_3 * v0_2);
                    v1_3 = (v1_3 * v0_2);
                    int64_t x16_7 = (v0_2 * x2_17);
                    v0_2 = x0_19;
                    i_6 = i_59;
                    i_59 = (i_59 - 4);
                    *v1_3[8] = x15_6;
                    *v0_2[8] = x16_7;
                    x13_6 = (x13_6 + 0x10);
                } while (i_6 != 4);
                x13_5 = ((v0_2 * v1_3) * (v0_2 * v1_3));
            }
            else
            {
                i_65 = 0;
                x13_5 = 1;
            }
            if ((x10_17 == 3 || (x10_17 != 3 && i_65 != x10_17)))
            {
                int64_t i_53 = (x10_17 - i_65);
                void* x11_8 = (var_2b0_1 + (i_65 << 2));
                int64_t i_7;
                do
                {
                    int64_t x12_2 = *x11_8;
                    x11_8 = (x11_8 + 4);
                    i_7 = i_53;
                    i_53 = (i_53 - 1);
                    x13_5 = (x13_5 * x12_2);
                } while (i_7 != 1);
            }
        }
        var_448_2 = (s_30 + (x13_5 * x8_26));
    }
    cv::MatConstIterator::seek(&var_468, false);
    int64_t* s_24 = s_3;
    *s_24 = 0x4049000000000000;
    int32_t* x1_4 = var_468;
    if (x1_4 != 0)
    {
        void* s_51 = (s_24 + x8_26);
        void* s_76 = s_51;
        if (s_51 >= var_448_2)
        {
            cv::MatConstIterator::seek(&var_468, true);
            x1_4 = var_468;
        }
        else
        {
            s_24 = s_51;
        }
    }
    var_490 = x1_4;
    int64_t* s_38 = s_24;
    int64_t s_70 = s_44;
    *s_24 = 0x4049000000000000;
    if (x1_4 == 0)
    {
        *s_24 = 0x4034000000000000;
    }
    else
    {
        int64_t* s_52 = (s_24 + x8_26);
        int64_t* s_62 = s_52;
        if (s_52 >= var_448_2)
        {
            cv::MatConstIterator::seek(&var_490, true);
            s_52 = s_24;
            x1_4 = var_490;
        }
        *s_52 = 0x4034000000000000;
        if (x1_4 != 0)
        {
            void* x8_29 = (s_52 + x8_26);
            void* var_480_9 = x8_29;
            if (x8_29 >= var_448_2)
            {
                int64_t* s_63 = s_52;
                cv::MatConstIterator::seek(&var_490, true);
            }
        }
    }
    int64_t x23_2 = (&var_440 | 8);
    int128_t s_9;
    __builtin_memset(&s_9, 0, 0x3c);
    int64_t* var_3f8_2 = &var_3f0;
    var_3f0 = 0;
    int64_t var_3e8_1 = 0;
    var_440 = 0x42ff0006;
    int128_t v0_3;
    int128_t v1_4;
    int128_t v2_4;
    int128_t v3_4;
    v0_3 = cv::Mat_<double>::operator=(&var_440);
    int128_t var_e0;
    int64_t x8_30 = *var_e0[8];
    if (x8_30 != 0)
    {
        int32_t temp0_3;
        int32_t i_8;
        do
        {
            temp0_3 = __ldaxr((x8_30 + 0x14));
            i_8 = __stlxr((temp0_3 - 1), (x8_30 + 0x14));
        } while (i_8 != 0);
        if (temp0_3 == 1)
        {
            v0_3 = cv::Mat::deallocate();
        }
    }
    int32_t x8_32 = s_22;
    v0_3 = 0;
    *v0_3[8] = 0;
    *var_e0[8] = 0;
    __builtin_memset(&*s_22[0xc], 0, 0x20);
    if (x8_32 >= 1)
    {
        int64_t i_9 = 0;
        do
        {
            var_d0[i_9] = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < s_22);
    }
    v0_3 = var_440;
    var_110 = v0_3;
    s_22 = s_9;
    int128_t var_42c_1;
    int128_t var_fc = var_42c_1;
    int128_t var_410_1;
    int128_t var_e0_1 = var_410_1;
    int32_t x9_19;
    if (var_c8 == var_520)
    {
        x9_19 = v0_3;
    }
    else
    {
        cv::fastFree(var_c8);
        x9_19 = s_9;
        var_d0 = x5;
        var_c8 = var_520;
    }
    int64_t* x0_26;
    if (x9_19 > 2)
    {
        x0_26 = &var_3f0;
        int64_t var_400_3 = x23_2;
        int64_t* var_3f8_3 = &var_3f0;
        var_d0 = x23_2;
    }
    else
    {
        x0_26 = var_3f8_2;
        var_c0 = *x0_26;
        int64_t var_b8_1 = x0_26[1];
    }
    var_440 = 0x42ff0000;
    __builtin_memset((&var_440 | 4), 0, 0x34);
    *var_410_1[8] = 0;
    __builtin_memset(&*s_9[0xc], 0, 0x20);
    if (x0_26 != &var_3f0)
    {
        cv::fastFree(x0_26);
    }
    int128_t var_2c0_1;
    int64_t x8_36 = *var_2c0_1[8];
    if (x8_36 != 0)
    {
        int32_t temp0_4;
        int32_t i_10;
        do
        {
            temp0_4 = __ldaxr((x8_36 + 0x14));
            i_10 = __stlxr((temp0_4 - 1), (x8_36 + 0x14));
        } while (i_10 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_38 = s_15;
    *var_2c0_1[8] = 0;
    __builtin_memset(&s_16, 0, 0x20);
    if (x8_38 >= 1)
    {
        int64_t i_11 = 0;
        do
        {
            *(var_2b0_1 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < s_15);
    }
    if (var_2a8_1 != &var_2a0)
    {
        cv::fastFree(var_2a8_1);
    }
    var_440 = 0x42ff0000;
    int64_t x22_1 = (&var_440 | 8);
    int64_t s_17 = 0;
    int128_t s_10;
    __builtin_memset(&s_10, 0, 0x3c);
    var_2f0 = 0x2010000;
    int64_t* var_3f8_4 = &var_3f0;
    var_3f0 = 0;
    int64_t var_3e8_2 = 0;
    var_2e8 = &var_440;
    int128_t v0_4;
    int128_t v1_5;
    int128_t v2_5;
    int128_t v3_5;
    v0_4 = cv::Mat::copyTo(arg2);
    int128_t var_140;
    int64_t x8_40 = *var_140[8];
    if (x8_40 != 0)
    {
        int32_t temp0_5;
        int32_t i_12;
        do
        {
            temp0_5 = __ldaxr((x8_40 + 0x14));
            i_12 = __stlxr((temp0_5 - 1), (x8_40 + 0x14));
        } while (i_12 != 0);
        if (temp0_5 == 1)
        {
            v0_4 = cv::Mat::deallocate();
        }
    }
    v0_4 = 0;
    *v0_4[8] = 0;
    *var_140[8] = 0;
    bool cond:31 = s_21 < 1;
    __builtin_memset(&*s_21[0xc], 0, 0x20);
    if (!(cond:31))
    {
        int64_t i_13 = 0;
        do
        {
            var_130[i_13] = 0;
            i_13 = (i_13 + 1);
        } while (i_13 < s_21);
    }
    v0_4 = var_440;
    var_170 = v0_4;
    s_21 = s_10;
    int128_t var_42c_2;
    int128_t var_15c = var_42c_2;
    int128_t var_410_2;
    int128_t var_140_1 = var_410_2;
    int32_t x9_24;
    if (var_128 == var_518)
    {
        x9_24 = v0_4;
    }
    else
    {
        cv::fastFree(var_128);
        x9_24 = s_10;
        var_128 = var_518;
        var_130 = x28;
    }
    int64_t* x0_30;
    if (x9_24 > 2)
    {
        x0_30 = &var_3f0;
        int64_t var_400_5 = x22_1;
        int64_t* var_3f8_5 = &var_3f0;
        var_130 = x22_1;
    }
    else
    {
        x0_30 = var_3f8_4;
        var_120 = *x0_30;
        int64_t var_118_1 = x0_30[1];
    }
    var_440 = 0x42ff0000;
    __builtin_memset((&var_440 | 4), 0, 0x34);
    *var_410_2[8] = 0;
    __builtin_memset(&*s_10[0xc], 0, 0x20);
    if (x0_30 != &var_3f0)
    {
        cv::fastFree(x0_30);
    }
    var_2f0 = 0x42ff0000;
    __builtin_memset(&s_15, 0, 0x3c);
    void* var_2b0_2 = &*s_15[4];
    int64_t* var_2a8_2 = &var_2a0;
    int64_t var_298_2 = 0;
    var_2a0 = 0;
    var_468 = 0x300000003;
    int128_t v1_6;
    int128_t v2_6;
    int128_t v3_6;
    v1_6 = cv::Mat::create(&var_2f0, &*nullptr->ident.signature[2], &var_468);
    uint64_t x10_32 = s_15;
    var_468 = &var_2f0;
    int64_t x8_47;
    if (x10_32 < 1)
    {
        x8_47 = 0;
    }
    else
    {
        x8_47 = var_2a8_2[(x10_32 - 1)];
    }
    uint32_t x9_26 = *var_2f0[1];
    int64_t* s_4;
    __builtin_memset(&s_4, 0, 0x18);
    int64_t s_45;
    int64_t var_448_3;
    if ((x9_26 & 0x40) != 0)
    {
        int64_t s_31 = s_17;
        s_45 = s_31;
        int64_t x13_9;
        if (x10_32 < 3)
        {
            x13_9 = (var_2e4 * var_2e8);
        }
        else
        {
            int64_t i_66;
            if (x10_32 != 3)
            {
                i_66 = (x10_32 & 0xfffffffc);
                v1_6 = 1;
                *v1_6[8] = 1;
                void* x13_10 = (var_2b0_2 + 8);
                int64_t i_60 = i_66;
                int128_t v0_5 = v1_6;
                int64_t i_14;
                do
                {
                    v2_6 = *(x13_10 - 8);
                    v3_6 = *x13_10;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_24 = v1_6;
                    int64_t x0_33 = (v0_5 * v1_6);
                    int64_t x15_10 = (v1_6 * v0_5);
                    v1_6 = (v1_6 * v0_5);
                    int64_t x16_11 = (v0_5 * x2_24);
                    v0_5 = x0_33;
                    i_14 = i_60;
                    i_60 = (i_60 - 4);
                    *v1_6[8] = x15_10;
                    *v0_5[8] = x16_11;
                    x13_10 = (x13_10 + 0x10);
                } while (i_14 != 4);
                x13_9 = ((v0_5 * v1_6) * (v0_5 * v1_6));
            }
            else
            {
                i_66 = 0;
                x13_9 = 1;
            }
            if ((x10_32 == 3 || (x10_32 != 3 && i_66 != x10_32)))
            {
                int64_t i_54 = (x10_32 - i_66);
                void* x11_12 = (var_2b0_2 + (i_66 << 2));
                int64_t i_15;
                do
                {
                    int64_t x12_3 = *x11_12;
                    x11_12 = (x11_12 + 4);
                    i_15 = i_54;
                    i_54 = (i_54 - 1);
                    x13_9 = (x13_9 * x12_3);
                } while (i_15 != 1);
            }
        }
        var_448_3 = (s_31 + (x13_9 * x8_47));
    }
    cv::MatConstIterator::seek(&var_468, false);
    int64_t* s_25 = s_4;
    *s_25 = 0x3fefffa3b9ae0c17;
    int32_t* x1_7 = var_468;
    if (x1_7 != 0)
    {
        void* s_53 = (s_25 + x8_47);
        void* s_77 = s_53;
        if (s_53 >= var_448_3)
        {
            cv::MatConstIterator::seek(&var_468, true);
            x1_7 = var_468;
        }
        else
        {
            s_25 = s_53;
        }
    }
    var_490 = x1_7;
    int64_t* s_39 = s_25;
    int64_t s_71 = s_45;
    *s_25 = 0x3f831fda90daae37;
    if (x1_7 == 0)
    {
        *s_25 = 0x3fefffef39085f4a;
    }
    else
    {
        int64_t* s_54 = (s_25 + x8_47);
        int64_t* s_64 = s_54;
        if (s_54 >= var_448_3)
        {
            cv::MatConstIterator::seek(&var_490, true);
            s_54 = s_25;
            x1_7 = var_490;
        }
        *s_54 = 0x3f4c317b9a77876d;
        int64_t* s_82;
        if (x1_7 == 0)
        {
            s_82 = s_54;
        }
        else
        {
            s_82 = (s_54 + x8_47);
            int64_t* s_86 = s_82;
            if (s_82 >= var_448_3)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_82 = s_54;
                x1_7 = var_490;
            }
        }
        *s_82 = -0x407ce1f9daa1f78c;
        int64_t* s_90;
        if (x1_7 == 0)
        {
            s_90 = s_82;
        }
        else
        {
            s_90 = (s_82 + x8_47);
            int64_t* s_94 = s_90;
            if (s_90 >= var_448_3)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_90 = s_82;
                x1_7 = var_490;
            }
        }
        *s_90 = 0x3fefff950b955f78;
        int64_t* s_98;
        if (x1_7 == 0)
        {
            s_98 = s_90;
        }
        else
        {
            s_98 = (s_90 + x8_47);
            int64_t* s_102 = s_98;
            if (s_98 >= var_448_3)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_98 = s_90;
                x1_7 = var_490;
            }
        }
        *s_98 = -0x408fb9a14bea8f2a;
        int64_t* s_106;
        if (x1_7 == 0)
        {
            s_106 = s_98;
        }
        else
        {
            s_106 = (s_98 + x8_47);
            int64_t* s_110 = s_106;
            if (s_106 >= var_448_3)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_106 = s_98;
                x1_7 = var_490;
            }
        }
        *s_106 = -0x40b297a2a71205c5;
        int64_t* s_114;
        if (x1_7 == 0)
        {
            s_114 = s_106;
        }
        else
        {
            s_114 = (s_106 + x8_47);
            int64_t* s_118 = s_114;
            if (s_114 >= var_448_3)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_114 = s_106;
                x1_7 = var_490;
            }
        }
        *s_114 = 0x3f703dc2d92e041f;
        int64_t* s_122;
        if (x1_7 == 0)
        {
            s_122 = s_114;
        }
        else
        {
            s_122 = (s_114 + x8_47);
            int64_t* s_127 = s_122;
            if (s_122 >= var_448_3)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_122 = s_114;
                x1_7 = var_490;
            }
        }
        *s_122 = 0x3fefffef39085f4a;
        if (x1_7 != 0)
        {
            void* x8_53 = (s_122 + x8_47);
            void* var_480_17 = x8_53;
            if (x8_53 >= var_448_3)
            {
                int64_t* s_128 = s_122;
                cv::MatConstIterator::seek(&var_490, true);
            }
        }
    }
    int64_t x26 = (&var_440 | 8);
    int128_t s_11;
    __builtin_memset(&s_11, 0, 0x3c);
    int64_t var_400_6 = x26;
    int64_t* var_3f8_6 = &var_3f0;
    var_3f0 = 0;
    int64_t var_3e8_3 = 0;
    var_440 = 0x42ff0006;
    int128_t v0_6;
    int128_t s_35;
    v0_6 = cv::Mat_<double>::operator=(&var_440);
    int128_t var_410_3;
    if ((arg1 + 0x140) == &var_440)
    {
        int64_t x8_60 = *var_410_3[8];
        if (x8_60 != 0)
        {
            int32_t temp0_7;
            int32_t i_16;
            do
            {
                temp0_7 = __ldaxr((x8_60 + 0x14));
                i_16 = __stlxr((temp0_7 - 1), (x8_60 + 0x14));
            } while (i_16 != 0);
            if (temp0_7 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_54 = *(arg1 + 0x178);
        if (x8_54 != 0)
        {
            int32_t temp0_6;
            int32_t i_17;
            do
            {
                temp0_6 = __ldaxr((x8_54 + 0x14));
                i_17 = __stlxr((temp0_6 - 1), (x8_54 + 0x14));
            } while (i_17 != 0);
            if (temp0_6 == 1)
            {
                v0_6 = cv::Mat::deallocate();
            }
        }
        int32_t x8_56 = *(arg1 + 0x144);
        v0_6 = 0;
        *v0_6[8] = 0;
        *(arg1 + 0x178) = 0;
        __builtin_memset((arg1 + 0x150), 0, 0x20);
        if (x8_56 >= 1)
        {
            int64_t x8_57 = *(arg1 + 0x180);
            int64_t i_18 = 0;
            do
            {
                *(x8_57 + (i_18 << 2)) = 0;
                i_18 = (i_18 + 1);
            } while (i_18 < *(arg1 + 0x144));
        }
        v0_6 = var_440;
        s_35 = s_11;
        void* x0_46 = *(arg1 + 0x188);
        *(arg1 + 0x140) = v0_6;
        *(arg1 + 0x150) = s_35;
        int128_t var_42c_3;
        *(arg1 + 0x160) = var_42c_3;
        *(arg1 + 0x170) = var_410_3;
        int32_t x8_59;
        if (x0_46 == (arg1 + 0x190))
        {
            x8_59 = v0_6;
        }
        else
        {
            cv::fastFree(x0_46);
            *(arg1 + 0x180) = (arg1 + 0x148);
            *(arg1 + 0x188) = (arg1 + 0x190);
            x8_59 = s_11;
            x0_46 = (arg1 + 0x190);
        }
        if (x8_59 > 2)
        {
            *(arg1 + 0x180) = var_400_6;
            var_400_6 = x26;
            var_3f8_6 = &var_3f0;
        }
        else
        {
            *x0_46 = *var_3f8_6;
            *(x0_46 + 8) = var_3f8_6[1];
        }
        var_440 = 0x42ff0000;
        __builtin_memset((&var_440 | 4), 0, 0x3c);
    }
    int32_t x8_63 = s_11;
    *var_410_3[8] = 0;
    __builtin_memset(&*s_11[0xc], 0, 0x20);
    if (x8_63 >= 1)
    {
        int64_t i_19 = 0;
        do
        {
            *(var_400_6 + (i_19 << 2)) = 0;
            i_19 = (i_19 + 1);
        } while (i_19 < s_11);
    }
    if (var_3f8_6 != &var_3f0)
    {
        cv::fastFree(var_3f8_6);
    }
    int128_t var_2c0_2;
    int64_t x8_65 = *var_2c0_2[8];
    if (x8_65 != 0)
    {
        int32_t temp0_8;
        int32_t i_20;
        do
        {
            temp0_8 = __ldaxr((x8_65 + 0x14));
            i_20 = __stlxr((temp0_8 - 1), (x8_65 + 0x14));
        } while (i_20 != 0);
        if (temp0_8 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_67 = s_15;
    *var_2c0_2[8] = 0;
    __builtin_memset(&s_17, 0, 0x20);
    if (x8_67 >= 1)
    {
        int64_t i_21 = 0;
        do
        {
            *(var_2b0_2 + (i_21 << 2)) = 0;
            i_21 = (i_21 + 1);
        } while (i_21 < s_15);
    }
    if (var_2a8_2 != &var_2a0)
    {
        cv::fastFree(var_2a8_2);
    }
    var_2f0 = 0x42ff0000;
    __builtin_memset(&s_15, 0, 0x3c);
    void* var_2b0_3 = &*s_15[4];
    int64_t* var_2a8_3 = &var_2a0;
    int64_t var_298_3 = 0;
    var_2a0 = 0;
    var_468 = 0x100000003;
    int128_t v1_7;
    int128_t v2_7;
    int128_t v3_7;
    v1_7 = cv::Mat::create(&var_2f0, &*nullptr->ident.signature[2], &var_468);
    uint64_t x10_50 = s_15;
    var_468 = &var_2f0;
    int64_t x8_70;
    if (x10_50 < 1)
    {
        x8_70 = 0;
    }
    else
    {
        x8_70 = var_2a8_3[(x10_50 - 1)];
    }
    uint32_t x9_41 = *var_2f0[1];
    int64_t* s_5;
    __builtin_memset(&s_5, 0, 0x18);
    int64_t s_46;
    int64_t var_448_4;
    if ((x9_41 & 0x40) != 0)
    {
        int64_t s_32 = s_17;
        s_46 = s_32;
        int64_t x13_13;
        if (x10_50 < 3)
        {
            x13_13 = (var_2e4 * var_2e8);
        }
        else
        {
            int64_t i_67;
            if (x10_50 != 3)
            {
                i_67 = (x10_50 & 0xfffffffc);
                v1_7 = 1;
                *v1_7[8] = 1;
                void* x13_14 = (var_2b0_3 + 8);
                int64_t i_61 = i_67;
                int128_t v0_7 = v1_7;
                int64_t i_22;
                do
                {
                    v2_7 = *(x13_14 - 8);
                    v3_7 = *x13_14;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_37 = v1_7;
                    int64_t x0_51 = (v0_7 * v1_7);
                    int64_t x15_14 = (v1_7 * v0_7);
                    v1_7 = (v1_7 * v0_7);
                    int64_t x16_15 = (v0_7 * x2_37);
                    v0_7 = x0_51;
                    i_22 = i_61;
                    i_61 = (i_61 - 4);
                    *v1_7[8] = x15_14;
                    *v0_7[8] = x16_15;
                    x13_14 = (x13_14 + 0x10);
                } while (i_22 != 4);
                x13_13 = ((v0_7 * v1_7) * (v0_7 * v1_7));
            }
            else
            {
                i_67 = 0;
                x13_13 = 1;
            }
            if ((x10_50 == 3 || (x10_50 != 3 && i_67 != x10_50)))
            {
                int64_t i_55 = (x10_50 - i_67);
                void* x11_16 = (var_2b0_3 + (i_67 << 2));
                int64_t i_23;
                do
                {
                    int64_t x12_4 = *x11_16;
                    x11_16 = (x11_16 + 4);
                    i_23 = i_55;
                    i_55 = (i_55 - 1);
                    x13_13 = (x13_13 * x12_4);
                } while (i_23 != 1);
            }
        }
        var_448_4 = (s_32 + (x13_13 * x8_70));
    }
    cv::MatConstIterator::seek(&var_468, false);
    int64_t* s_26 = s_5;
    *s_26 = -0x3fc71cb295e9e1b1;
    int32_t* x1_10 = var_468;
    if (x1_10 != 0)
    {
        void* s_55 = (s_26 + x8_70);
        void* s_78 = s_55;
        if (s_55 >= var_448_4)
        {
            cv::MatConstIterator::seek(&var_468, true);
            x1_10 = var_468;
        }
        else
        {
            s_26 = s_55;
        }
    }
    var_490 = x1_10;
    int64_t* s_40 = s_26;
    int64_t s_72 = s_46;
    *s_26 = 0x3fc679cc74b838c1;
    if (x1_10 == 0)
    {
        *s_26 = 0x3fe6fa3db3bfb58d;
    }
    else
    {
        int64_t* s_56 = (s_26 + x8_70);
        int64_t* s_65 = s_56;
        if (s_56 >= var_448_4)
        {
            cv::MatConstIterator::seek(&var_490, true);
            s_56 = s_26;
            x1_10 = var_490;
        }
        *s_56 = 0x3fe6fa3db3bfb58d;
        if (x1_10 != 0)
        {
            void* x8_73 = (s_56 + x8_70);
            void* var_480_19 = x8_73;
            if (x8_73 >= var_448_4)
            {
                int64_t* s_66 = s_56;
                cv::MatConstIterator::seek(&var_490, true);
            }
        }
    }
    int64_t x26_1 = (&var_440 | 8);
    int128_t s_12;
    __builtin_memset(&s_12, 0, 0x3c);
    int64_t var_400_7 = x26_1;
    int64_t* var_3f8_7 = &var_3f0;
    var_3f0 = 0;
    int64_t var_3e8_4 = 0;
    var_440 = 0x42ff0006;
    int128_t v0_8;
    int128_t s_36;
    v0_8 = cv::Mat_<double>::operator=(&var_440);
    int128_t var_410_4;
    int64_t* x26_2;
    if ((arg1 + 0x1a0) == &var_440)
    {
        int64_t x8_80 = *var_410_4[8];
        x26_2 = var_528;
        if (x8_80 != 0)
        {
            int32_t temp0_10;
            int32_t i_24;
            do
            {
                temp0_10 = __ldaxr((x8_80 + 0x14));
                i_24 = __stlxr((temp0_10 - 1), (x8_80 + 0x14));
            } while (i_24 != 0);
            if (temp0_10 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_74 = *(arg1 + 0x1d8);
        if (x8_74 != 0)
        {
            int32_t temp0_9;
            int32_t i_25;
            do
            {
                temp0_9 = __ldaxr((x8_74 + 0x14));
                i_25 = __stlxr((temp0_9 - 1), (x8_74 + 0x14));
            } while (i_25 != 0);
            if (temp0_9 == 1)
            {
                v0_8 = cv::Mat::deallocate();
            }
        }
        int32_t x8_76 = *(arg1 + 0x1a4);
        v0_8 = 0;
        *v0_8[8] = 0;
        *(arg1 + 0x1d8) = 0;
        __builtin_memset((arg1 + 0x1b0), 0, 0x20);
        if (x8_76 >= 1)
        {
            int64_t x8_77 = *(arg1 + 0x1e0);
            int64_t i_26 = 0;
            do
            {
                *(x8_77 + (i_26 << 2)) = 0;
                i_26 = (i_26 + 1);
            } while (i_26 < *(arg1 + 0x1a4));
        }
        v0_8 = var_440;
        s_36 = s_12;
        void* x0_58 = *(arg1 + 0x1e8);
        *(arg1 + 0x1a0) = v0_8;
        *(arg1 + 0x1b0) = s_36;
        int128_t var_42c_4;
        *(arg1 + 0x1c0) = var_42c_4;
        *(arg1 + 0x1d0) = var_410_4;
        int32_t x8_79;
        if (x0_58 == (arg1 + 0x1f0))
        {
            x8_79 = v0_8;
        }
        else
        {
            cv::fastFree(x0_58);
            *(arg1 + 0x1e0) = (arg1 + 0x1a8);
            *(arg1 + 0x1e8) = (arg1 + 0x1f0);
            x8_79 = s_12;
            x0_58 = (arg1 + 0x1f0);
        }
        if (x8_79 > 2)
        {
            *(arg1 + 0x1e0) = var_400_7;
            var_400_7 = x26_1;
            var_3f8_7 = &var_3f0;
        }
        else
        {
            *x0_58 = *var_3f8_7;
            *(x0_58 + 8) = var_3f8_7[1];
        }
        x26_2 = var_528;
        var_440 = 0x42ff0000;
        __builtin_memset((&var_440 | 4), 0, 0x3c);
    }
    int32_t x8_83 = s_12;
    *var_410_4[8] = 0;
    __builtin_memset(&*s_12[0xc], 0, 0x20);
    if (x8_83 >= 1)
    {
        int64_t i_27 = 0;
        do
        {
            *(var_400_7 + (i_27 << 2)) = 0;
            i_27 = (i_27 + 1);
        } while (i_27 < s_12);
    }
    if (var_3f8_7 != &var_3f0)
    {
        cv::fastFree(var_3f8_7);
    }
    int128_t var_2c0_3;
    int64_t x8_85 = *var_2c0_3[8];
    if (x8_85 != 0)
    {
        int32_t temp0_11;
        int32_t i_28;
        do
        {
            temp0_11 = __ldaxr((x8_85 + 0x14));
            i_28 = __stlxr((temp0_11 - 1), (x8_85 + 0x14));
        } while (i_28 != 0);
        if (temp0_11 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_87 = s_15;
    *var_2c0_3[8] = 0;
    __builtin_memset(&s_17, 0, 0x20);
    if (x8_87 >= 1)
    {
        int64_t i_29 = 0;
        do
        {
            *(var_2b0_3 + (i_29 << 2)) = 0;
            i_29 = (i_29 + 1);
        } while (i_29 < s_15);
    }
    if (var_2a8_3 != &var_2a0)
    {
        cv::fastFree(var_2a8_3);
    }
    var_2f0 = 0x42ff0000;
    __builtin_memset(&s_15, 0, 0x3c);
    void* var_2b0_4 = &*s_15[4];
    int64_t* var_2a8_4 = &var_2a0;
    int64_t var_298_4 = 0;
    var_2a0 = 0;
    var_468 = 0x400000004;
    int128_t v1_8;
    int128_t v2_8;
    int128_t v3_8;
    v1_8 = cv::Mat::create(&var_2f0, &*nullptr->ident.signature[2], &var_468);
    uint64_t x10_62 = s_15;
    var_468 = &var_2f0;
    int64_t x8_90;
    if (x10_62 < 1)
    {
        x8_90 = 0;
    }
    else
    {
        x8_90 = var_2a8_4[(x10_62 - 1)];
    }
    uint32_t x9_53 = *var_2f0[1];
    int64_t* s_6;
    __builtin_memset(&s_6, 0, 0x18);
    int64_t s_47;
    int64_t var_448_5;
    if ((x9_53 & 0x40) != 0)
    {
        int64_t s_33 = s_17;
        s_47 = s_33;
        int64_t x13_17;
        if (x10_62 < 3)
        {
            x13_17 = (var_2e4 * var_2e8);
        }
        else
        {
            int64_t i_68;
            if (x10_62 != 3)
            {
                i_68 = (x10_62 & 0xfffffffc);
                v1_8 = 1;
                *v1_8[8] = 1;
                void* x13_18 = (var_2b0_4 + 8);
                int64_t i_62 = i_68;
                int128_t v0_9 = v1_8;
                int64_t i_30;
                do
                {
                    v2_8 = *(x13_18 - 8);
                    v3_8 = *x13_18;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_44 = v1_8;
                    int64_t x0_63 = (v0_9 * v1_8);
                    int64_t x15_18 = (v1_8 * v0_9);
                    v1_8 = (v1_8 * v0_9);
                    int64_t x16_19 = (v0_9 * x2_44);
                    v0_9 = x0_63;
                    i_30 = i_62;
                    i_62 = (i_62 - 4);
                    *v1_8[8] = x15_18;
                    *v0_9[8] = x16_19;
                    x13_18 = (x13_18 + 0x10);
                } while (i_30 != 4);
                x13_17 = ((v0_9 * v1_8) * (v0_9 * v1_8));
            }
            else
            {
                i_68 = 0;
                x13_17 = 1;
            }
            if ((x10_62 == 3 || (x10_62 != 3 && i_68 != x10_62)))
            {
                int64_t i_56 = (x10_62 - i_68);
                void* x11_20 = (var_2b0_4 + (i_68 << 2));
                int64_t i_31;
                do
                {
                    int64_t x12_5 = *x11_20;
                    x11_20 = (x11_20 + 4);
                    i_31 = i_56;
                    i_56 = (i_56 - 1);
                    x13_17 = (x13_17 * x12_5);
                } while (i_31 != 1);
            }
        }
        var_448_5 = (s_33 + (x13_17 * x8_90));
    }
    cv::MatConstIterator::seek(&var_468, false);
    int64_t* s_27 = s_6;
    *s_27 = 0x3e4a99b5e3f53bac;
    int32_t* x1_13 = var_468;
    if (x1_13 != 0)
    {
        void* s_57 = (s_27 + x8_90);
        void* s_79 = s_57;
        if (s_57 >= var_448_5)
        {
            cv::MatConstIterator::seek(&var_468, true);
            x1_13 = var_468;
        }
        else
        {
            s_27 = s_57;
        }
    }
    var_490 = x1_13;
    int64_t* s_41 = s_27;
    int64_t s_73 = s_47;
    *s_27 = -0x4012dc0617e94243;
    if (x1_13 == 0)
    {
        *s_27 = 0x3ff0000000000000;
    }
    else
    {
        int64_t* s_58 = (s_27 + x8_90);
        int64_t* s_67 = s_58;
        if (s_58 >= var_448_5)
        {
            cv::MatConstIterator::seek(&var_490, true);
            s_58 = s_27;
            x1_13 = var_490;
        }
        *s_58 = 0x3fda71d22dc888b2;
        int64_t* s_83;
        if (x1_13 == 0)
        {
            s_83 = s_58;
            *s_83 = 0;
        }
        else
        {
            s_83 = (s_58 + x8_90);
            int64_t* s_87 = s_83;
            if (s_83 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_83 = s_58;
                x1_13 = var_490;
            }
            *s_83 = 0;
        }
        int64_t* s_91;
        if ((x1_13 == 0 || (x1_13 != 0 && x1_13 != 0)))
        {
            s_91 = (s_83 + x8_90);
            int64_t* s_95 = s_91;
            if (s_91 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_91 = s_83;
                x1_13 = var_490;
            }
        }
        if ((x1_13 == 0 || x1_13 == 0))
        {
            s_91 = s_83;
        }
        *s_91 = -0x4010003421ea6643;
        int64_t* s_99;
        if (x1_13 == 0)
        {
            s_99 = s_91;
        }
        else
        {
            s_99 = (s_91 + x8_90);
            int64_t* s_103 = s_99;
            if (s_99 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_99 = s_91;
                x1_13 = var_490;
            }
        }
        *s_99 = -0x40982202f7761b20;
        int64_t* s_107;
        if (x1_13 == 0)
        {
            s_107 = s_99;
        }
        else
        {
            s_107 = (s_99 + x8_90);
            int64_t* s_111 = s_107;
            if (s_107 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_107 = s_99;
                x1_13 = var_490;
            }
        }
        *s_107 = -0x4085b327b043b9fd;
        int64_t* s_115;
        if (x1_13 == 0)
        {
            s_115 = s_107;
            *s_115 = 0;
        }
        else
        {
            s_115 = (s_107 + x8_90);
            int64_t* s_119 = s_115;
            if (s_115 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_115 = s_107;
                x1_13 = var_490;
            }
            *s_115 = 0;
        }
        int64_t* s_123;
        if ((x1_13 == 0 || (x1_13 != 0 && x1_13 != 0)))
        {
            s_123 = (s_115 + x8_90);
            int64_t* s_129 = s_123;
            if (s_123 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_123 = s_115;
                x1_13 = var_490;
            }
        }
        if ((x1_13 == 0 || x1_13 == 0))
        {
            s_123 = s_115;
        }
        *s_123 = 0x3f7ce1860966f061;
        int64_t* s_131;
        if (x1_13 == 0)
        {
            s_131 = s_123;
        }
        else
        {
            s_131 = (s_123 + x8_90);
            int64_t* s_133 = s_131;
            if (s_131 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_131 = s_123;
                x1_13 = var_490;
            }
        }
        *s_131 = -0x40258e58e749f40a;
        int64_t* s_135;
        if (x1_13 == 0)
        {
            s_135 = s_131;
        }
        else
        {
            s_135 = (s_131 + x8_90);
            int64_t* s_137 = s_135;
            if (s_135 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_135 = s_131;
                x1_13 = var_490;
            }
        }
        *s_135 = -0x4012dc35913cf392;
        int64_t* s_139;
        if (x1_13 == 0)
        {
            s_139 = s_135;
        }
        else
        {
            s_139 = (s_135 + x8_90);
            int64_t* s_141 = s_139;
            if (s_139 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_139 = s_135;
                x1_13 = var_490;
            }
        }
        *s_139 = 0x408d4a1140000000;
        int64_t* s_143;
        if (x1_13 == 0)
        {
            s_143 = s_139;
            *s_143 = 0;
        }
        else
        {
            s_143 = (s_139 + x8_90);
            int64_t* s_145 = s_143;
            if (s_143 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_143 = s_139;
                x1_13 = var_490;
            }
            *s_143 = 0;
        }
        int64_t* s_148;
        if ((x1_13 == 0 || (x1_13 != 0 && x1_13 != 0)))
        {
            s_148 = (s_143 + x8_90);
            int64_t* s_149 = s_148;
            if (s_148 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_148 = s_143;
                x1_13 = var_490;
            }
            *s_148 = 0;
        }
        if ((x1_13 == 0 || x1_13 == 0))
        {
            s_148 = s_143;
            *s_148 = 0;
        }
        int64_t* s_151;
        if (((x1_13 == 0 || x1_13 == 0) || ((x1_13 == 0 || (x1_13 != 0 && x1_13 != 0)) && x1_13 != 0)))
        {
            s_151 = (s_148 + x8_90);
            int64_t* s_153 = s_151;
            if (s_151 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_151 = s_148;
                x1_13 = var_490;
            }
        }
        if (((x1_13 == 0 || x1_13 == 0) || ((x1_13 == 0 || (x1_13 != 0 && x1_13 != 0)) && x1_13 == 0)))
        {
            s_151 = s_148;
        }
        *s_151 = 0x2707478;
        int64_t* s_156;
        if (x1_13 == 0)
        {
            s_156 = s_151;
        }
        else
        {
            s_156 = (s_151 + x8_90);
            int64_t* s_157 = s_156;
            if (s_156 >= var_448_5)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_156 = s_151;
                x1_13 = var_490;
            }
        }
        *s_156 = 0x3ff0000000000000;
        if (x1_13 != 0)
        {
            void* x8_101 = (s_156 + x8_90);
            void* var_480_34 = x8_101;
            if (x8_101 >= var_448_5)
            {
                int64_t* s_158 = s_156;
                cv::MatConstIterator::seek(&var_490, true);
            }
        }
    }
    int64_t x23_5 = (&var_440 | 8);
    int128_t s_13;
    __builtin_memset(&s_13, 0, 0x3c);
    int64_t* var_3f8_8 = &var_3f0;
    var_3f0 = 0;
    int64_t var_3e8_5 = 0;
    var_440 = 0x42ff0006;
    int128_t v0_10;
    int128_t v1_9;
    int128_t v2_9;
    int128_t v3_9;
    v0_10 = cv::Mat_<double>::operator=(&var_440);
    int128_t var_200;
    int64_t x8_102 = *var_200[8];
    if (x8_102 != 0)
    {
        int32_t temp0_12;
        int32_t i_32;
        do
        {
            temp0_12 = __ldaxr((x8_102 + 0x14));
            i_32 = __stlxr((temp0_12 - 1), (x8_102 + 0x14));
        } while (i_32 != 0);
        if (temp0_12 == 1)
        {
            v0_10 = cv::Mat::deallocate();
        }
    }
    int32_t x8_104 = s_19;
    v0_10 = 0;
    *v0_10[8] = 0;
    *var_200[8] = 0;
    __builtin_memset(&*s_19[0xc], 0, 0x20);
    if (x8_104 >= 1)
    {
        int64_t i_33 = 0;
        do
        {
            var_1f0[i_33] = 0;
            i_33 = (i_33 + 1);
        } while (i_33 < s_19);
    }
    v0_10 = var_440;
    var_230 = v0_10;
    s_19 = s_13;
    int128_t var_42c_5;
    int128_t var_21c = var_42c_5;
    int128_t var_410_5;
    int128_t var_200_1 = var_410_5;
    int32_t x9_65;
    if (var_1e8 == x26_2)
    {
        x9_65 = v0_10;
    }
    else
    {
        cv::fastFree(var_1e8);
        x9_65 = s_13;
        var_1e8 = x26_2;
        var_1f0 = x24;
    }
    int64_t* x0_83;
    if (x9_65 > 2)
    {
        x0_83 = &var_3f0;
        int64_t var_400_9 = x23_5;
        int64_t* var_3f8_9 = &var_3f0;
        var_1f0 = x23_5;
    }
    else
    {
        x0_83 = var_3f8_8;
        var_1e0 = *x0_83;
        int64_t var_1d8_1 = x0_83[1];
    }
    var_440 = 0x42ff0000;
    __builtin_memset((&var_440 | 4), 0, 0x34);
    *var_410_5[8] = 0;
    __builtin_memset(&*s_13[0xc], 0, 0x20);
    if (x0_83 != &var_3f0)
    {
        cv::fastFree(x0_83);
    }
    int128_t var_2c0_4;
    int64_t x8_108 = *var_2c0_4[8];
    if (x8_108 != 0)
    {
        int32_t temp0_13;
        int32_t i_34;
        do
        {
            temp0_13 = __ldaxr((x8_108 + 0x14));
            i_34 = __stlxr((temp0_13 - 1), (x8_108 + 0x14));
        } while (i_34 != 0);
        if (temp0_13 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_110 = s_15;
    *var_2c0_4[8] = 0;
    __builtin_memset(&s_17, 0, 0x20);
    if (x8_110 >= 1)
    {
        int64_t i_35 = 0;
        do
        {
            *(var_2b0_4 + (i_35 << 2)) = 0;
            i_35 = (i_35 + 1);
        } while (i_35 < s_15);
    }
    if (var_2a8_4 != &var_2a0)
    {
        cv::fastFree(var_2a8_4);
    }
    var_2f0 = 0x42ff0000;
    __builtin_memset(&s_15, 0, 0x3c);
    void* var_2b0_5 = &*s_15[4];
    int64_t* var_2a8_5 = &var_2a0;
    int64_t var_298_5 = 0;
    var_2a0 = 0;
    var_468 = 0x400000004;
    int128_t v1_10;
    int128_t v2_10;
    int128_t v3_10;
    v1_10 = cv::Mat::create(&var_2f0, &*nullptr->ident.signature[2], &var_468);
    uint64_t x10_84 = s_15;
    var_468 = &var_2f0;
    int64_t x8_113;
    if (x10_84 < 1)
    {
        x8_113 = 0;
    }
    else
    {
        x8_113 = var_2a8_5[(x10_84 - 1)];
    }
    uint32_t x9_69 = *var_2f0[1];
    int64_t* s_7;
    __builtin_memset(&s_7, 0, 0x18);
    int64_t s_48;
    int64_t var_448_6;
    if ((x9_69 & 0x40) != 0)
    {
        int64_t s_34 = s_17;
        s_48 = s_34;
        int64_t x13_21;
        if (x10_84 < 3)
        {
            x13_21 = (var_2e4 * var_2e8);
        }
        else
        {
            int64_t i_69;
            if (x10_84 != 3)
            {
                i_69 = (x10_84 & 0xfffffffc);
                v1_10 = 1;
                *v1_10[8] = 1;
                void* x13_22 = (var_2b0_5 + 8);
                int64_t i_63 = i_69;
                int128_t v0_11 = v1_10;
                int64_t i_36;
                do
                {
                    v2_10 = *(x13_22 - 8);
                    v3_10 = *x13_22;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x2_64 = v1_10;
                    int64_t x0_87 = (v0_11 * v1_10);
                    int64_t x15_22 = (v1_10 * v0_11);
                    v1_10 = (v1_10 * v0_11);
                    int64_t x16_23 = (v0_11 * x2_64);
                    v0_11 = x0_87;
                    i_36 = i_63;
                    i_63 = (i_63 - 4);
                    *v1_10[8] = x15_22;
                    *v0_11[8] = x16_23;
                    x13_22 = (x13_22 + 0x10);
                } while (i_36 != 4);
                x13_21 = ((v0_11 * v1_10) * (v0_11 * v1_10));
            }
            else
            {
                i_69 = 0;
                x13_21 = 1;
            }
            if ((x10_84 == 3 || (x10_84 != 3 && i_69 != x10_84)))
            {
                int64_t i_57 = (x10_84 - i_69);
                void* x11_24 = (var_2b0_5 + (i_69 << 2));
                int64_t i_37;
                do
                {
                    int64_t x12_6 = *x11_24;
                    x11_24 = (x11_24 + 4);
                    i_37 = i_57;
                    i_57 = (i_57 - 1);
                    x13_21 = (x13_21 * x12_6);
                } while (i_37 != 1);
            }
        }
        var_448_6 = (s_34 + (x13_21 * x8_113));
    }
    cv::MatConstIterator::seek(&var_468, false);
    int64_t* s_28 = s_7;
    *s_28 = 0x3ff0000000000000;
    int32_t* x1_16 = var_468;
    if (x1_16 != 0)
    {
        void* s_59 = (s_28 + x8_113);
        void* s_80 = s_59;
        if (s_59 >= var_448_6)
        {
            cv::MatConstIterator::seek(&var_468, true);
            x1_16 = var_468;
        }
        else
        {
            s_28 = s_59;
        }
    }
    var_490 = x1_16;
    int64_t* s_42 = s_28;
    int64_t s_74 = s_48;
    *s_28 = 0;
    if (x1_16 == 0)
    {
        *s_28 = 0x3ff0000000000000;
    }
    else
    {
        int64_t* s_60 = (s_28 + x8_113);
        int64_t* s_68 = s_60;
        if (s_60 >= var_448_6)
        {
            cv::MatConstIterator::seek(&var_490, true);
            s_60 = s_28;
            x1_16 = var_490;
        }
        *s_60 = 0;
        int64_t* s_84;
        if (x1_16 == 0)
        {
            s_84 = s_60;
            *s_84 = 0;
        }
        else
        {
            s_84 = (s_60 + x8_113);
            int64_t* s_88 = s_84;
            if (s_84 >= var_448_6)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_84 = s_60;
                x1_16 = var_490;
            }
            *s_84 = 0;
        }
        int64_t* s_92;
        if ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)))
        {
            s_92 = (s_84 + x8_113);
            int64_t* s_96 = s_92;
            if (s_92 >= var_448_6)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_92 = s_84;
                x1_16 = var_490;
            }
            *s_92 = 0;
        }
        if ((x1_16 == 0 || x1_16 == 0))
        {
            s_92 = s_84;
            *s_92 = 0;
        }
        int64_t* s_100;
        if (((x1_16 == 0 || x1_16 == 0) || ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)) && x1_16 != 0)))
        {
            s_100 = (s_92 + x8_113);
            int64_t* s_104 = s_100;
            if (s_100 >= var_448_6)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_100 = s_92;
                x1_16 = var_490;
            }
        }
        if (((x1_16 == 0 || x1_16 == 0) || ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)) && x1_16 == 0)))
        {
            s_100 = s_92;
        }
        *s_100 = 0x3ff0000000000000;
        int64_t* s_108;
        if (x1_16 == 0)
        {
            s_108 = s_100;
            *s_108 = 0;
        }
        else
        {
            s_108 = (s_100 + x8_113);
            int64_t* s_112 = s_108;
            if (s_108 >= var_448_6)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_108 = s_100;
                x1_16 = var_490;
            }
            *s_108 = 0;
        }
        int64_t* s_116;
        if ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)))
        {
            s_116 = (s_108 + x8_113);
            int64_t* s_120 = s_116;
            if (s_116 >= var_448_6)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_116 = s_108;
                x1_16 = var_490;
            }
            *s_116 = 0;
        }
        if ((x1_16 == 0 || x1_16 == 0))
        {
            s_116 = s_108;
            *s_116 = 0;
        }
        int64_t* s_124;
        if (((x1_16 == 0 || x1_16 == 0) || ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)) && x1_16 != 0)))
        {
            s_124 = (s_116 + x8_113);
            int64_t* s_130 = s_124;
            if (s_124 >= var_448_6)
            {
                cv::MatConstIterator::seek(&var_490, true);
                s_124 = s_116;
                x1_16 = var_490;
            }
            *s_124 = 0;
            if (x1_16 != 0)
            {
                goto label_452a4;
            }
            goto label_45334;
        }
        if (((x1_16 == 0 || x1_16 == 0) || ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)) && x1_16 == 0)))
        {
            s_124 = s_116;
            *s_124 = 0;
            int64_t* s_132;
            if (x1_16 != 0)
            {
            label_452a4:
                s_132 = (s_124 + x8_113);
                int64_t* s_134 = s_132;
                if (s_132 >= var_448_6)
                {
                    cv::MatConstIterator::seek(&var_490, true);
                    s_132 = s_124;
                    x1_16 = var_490;
                }
                *s_132 = 0;
                if (x1_16 != 0)
                {
                    goto label_452e0;
                }
                goto label_45340;
            }
        label_45334:
            s_132 = s_124;
            *s_132 = 0;
            int64_t* s_136;
            if (x1_16 == 0)
            {
            label_45340:
                s_136 = s_132;
            }
            else
            {
            label_452e0:
                s_136 = (s_132 + x8_113);
                int64_t* s_138 = s_136;
                if (s_136 >= var_448_6)
                {
                    cv::MatConstIterator::seek(&var_490, true);
                    s_136 = s_132;
                    x1_16 = var_490;
                }
            }
            *s_136 = 0x3ff0000000000000;
            int64_t* s_140;
            if (x1_16 == 0)
            {
                s_140 = s_136;
                *s_140 = 0;
            }
            else
            {
                s_140 = (s_136 + x8_113);
                int64_t* s_142 = s_140;
                if (s_140 >= var_448_6)
                {
                    cv::MatConstIterator::seek(&var_490, true);
                    s_140 = s_136;
                    x1_16 = var_490;
                }
                *s_140 = 0;
            }
            int64_t* s_144;
            if ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)))
            {
                s_144 = (s_140 + x8_113);
                int64_t* s_146 = s_144;
                if (s_144 >= var_448_6)
                {
                    cv::MatConstIterator::seek(&var_490, true);
                    s_144 = s_140;
                    x1_16 = var_490;
                }
                *s_144 = 0;
            }
            if ((x1_16 == 0 || x1_16 == 0))
            {
                s_144 = s_140;
                *s_144 = 0;
            }
            int64_t* s_147;
            if (((x1_16 == 0 || x1_16 == 0) || ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)) && x1_16 != 0)))
            {
                s_147 = (s_144 + x8_113);
                int64_t* s_150 = s_147;
                if (s_147 >= var_448_6)
                {
                    cv::MatConstIterator::seek(&var_490, true);
                    s_147 = s_144;
                    x1_16 = var_490;
                }
                *s_147 = 0;
                if (x1_16 != 0)
                {
                    goto label_4540c;
                }
                goto label_4549c;
            }
            if (((x1_16 == 0 || x1_16 == 0) || ((x1_16 == 0 || (x1_16 != 0 && x1_16 != 0)) && x1_16 == 0)))
            {
                s_147 = s_144;
                *s_147 = 0;
                int64_t* s_152;
                if (x1_16 != 0)
                {
                label_4540c:
                    s_152 = (s_147 + x8_113);
                    int64_t* s_154 = s_152;
                    if (s_152 >= var_448_6)
                    {
                        cv::MatConstIterator::seek(&var_490, true);
                        s_152 = s_147;
                        x1_16 = var_490;
                    }
                    *s_152 = 0;
                    if (x1_16 != 0)
                    {
                        goto label_45448;
                    }
                    goto label_454a8;
                }
            label_4549c:
                s_152 = s_147;
                *s_152 = 0;
                int64_t* s_155;
                if (x1_16 == 0)
                {
                label_454a8:
                    s_155 = s_152;
                }
                else
                {
                label_45448:
                    s_155 = (s_152 + x8_113);
                    int64_t* s_159 = s_155;
                    if (s_155 >= var_448_6)
                    {
                        cv::MatConstIterator::seek(&var_490, true);
                        s_155 = s_152;
                        x1_16 = var_490;
                    }
                }
                *s_155 = 0x3ff0000000000000;
                if (x1_16 != 0)
                {
                    void* x9_79 = (s_155 + x8_113);
                    void* var_480_49 = x9_79;
                    if (x9_79 >= var_448_6)
                    {
                        int64_t* s_160 = s_155;
                        cv::MatConstIterator::seek(&var_490, true);
                    }
                }
            }
        }
    }
    int64_t x23_6 = (&var_440 | 8);
    int128_t s_14;
    __builtin_memset(&s_14, 0, 0x3c);
    int64_t* var_3f8_10 = &var_3f0;
    var_3f0 = 0;
    int64_t var_3e8_6 = 0;
    var_440 = 0x42ff0006;
    int128_t v0_12;
    int128_t v1_11;
    int128_t v2_11;
    int128_t v3_11;
    v0_12 = cv::Mat_<double>::operator=(&var_440);
    int128_t var_260;
    int64_t x8_122 = *var_260[8];
    if (x8_122 != 0)
    {
        int32_t temp0_14;
        int32_t i_38;
        do
        {
            temp0_14 = __ldaxr((x8_122 + 0x14));
            i_38 = __stlxr((temp0_14 - 1), (x8_122 + 0x14));
        } while (i_38 != 0);
        if (temp0_14 == 1)
        {
            v0_12 = cv::Mat::deallocate();
        }
    }
    int32_t x8_124 = s_18;
    v0_12 = 0;
    *v0_12[8] = 0;
    *var_260[8] = 0;
    __builtin_memset(&*s_18[0xc], 0, 0x20);
    if (x8_124 >= 1)
    {
        int64_t i_39 = 0;
        do
        {
            var_250[i_39] = 0;
            i_39 = (i_39 + 1);
        } while (i_39 < s_18);
    }
    v0_12 = var_440;
    var_290 = v0_12;
    s_18 = s_14;
    int128_t var_42c_6;
    int128_t var_27c = var_42c_6;
    int128_t var_410_6;
    int128_t var_260_1 = var_410_6;
    int32_t x9_82;
    if (var_248 == var_530)
    {
        x9_82 = v0_12;
    }
    else
    {
        v0_12 = cv::fastFree(var_248);
        x9_82 = s_14;
        var_248 = var_530;
        var_250 = x23;
    }
    int64_t* x0_107;
    if (x9_82 > 2)
    {
        x0_107 = &var_3f0;
        int64_t var_400_11 = x23_6;
        int64_t* var_3f8_11 = &var_3f0;
        var_250 = x23_6;
    }
    else
    {
        x0_107 = var_3f8_10;
        var_240 = *x0_107;
        int64_t var_238_1 = x0_107[1];
    }
    v0_12 = 0;
    *v0_12[8] = 0;
    var_440 = 0x42ff0000;
    __builtin_memset((&var_440 | 4), 0, 0x34);
    *var_410_6[8] = 0;
    __builtin_memset(&*s_14[0xc], 0, 0x20);
    if (x0_107 != &var_3f0)
    {
        v0_12 = cv::fastFree(x0_107);
    }
    int128_t var_2c0_5;
    int64_t x8_128 = *var_2c0_5[8];
    if (x8_128 != 0)
    {
        int32_t temp0_15;
        int32_t i_40;
        do
        {
            temp0_15 = __ldaxr((x8_128 + 0x14));
            i_40 = __stlxr((temp0_15 - 1), (x8_128 + 0x14));
        } while (i_40 != 0);
        if (temp0_15 == 1)
        {
            v0_12 = cv::Mat::deallocate();
        }
    }
    int32_t x8_130 = s_15;
    v0_12 = 0;
    *v0_12[8] = 0;
    *var_2c0_5[8] = 0;
    __builtin_memset(&s_17, 0, 0x20);
    if (x8_130 >= 1)
    {
        int64_t i_41 = 0;
        do
        {
            *(var_2b0_5 + (i_41 << 2)) = 0;
            i_41 = (i_41 + 1);
        } while (i_41 < s_15);
    }
    if (var_2a8_5 != &var_2a0)
    {
        v0_12 = cv::fastFree(var_2a8_5);
    }
    v1_11 = (v11 / v12);
    v0_12 = (v10 / v9);
    if ((*var_d0 * var_d0[1]) == 3)
    {
        int128_t* x8_135 = *s_22[0xc];
        v3_11 = x8_135[1];
        /* unimplemented  {fcvtn v2.2s, v2.2d} */;
        v3_11 = v3_11;
        *(arg1 + 0xa8) = *x8_135;
        *(arg1 + 0xb0) = v3_11;
    }
    int64_t* x8_136 = *s_21[0xc];
    double v8 = v1_11;
    v2_11 = *x8_136;
    v3_11 = x8_136[2];
    v1_11 = (v2_11 * v8);
    v2_11 = (v3_11 * v8);
    *x8_136 = v1_11;
    x8_136[2] = v2_11;
    int64_t x9_87 = *var_128;
    v3_11 = v0_12;
    void* x11_26 = (x8_136 + x9_87);
    v1_11 = *(x11_26 + 8);
    v0_12 = (v1_11 * v3_11);
    *v0_12[8] = (*v1_11[8] * v3_11);
    *(x11_26 + 8) = v0_12;
    int64_t* x10_108 = *s_20[0xc];
    v0_12 = *x10_108;
    v1_11 = x10_108[2];
    v0_12 = (v0_12 * v8);
    v1_11 = (v1_11 * v8);
    *x10_108 = v0_12;
    x10_108[2] = v1_11;
    int64_t x12_8 = *var_188;
    void* x13_25 = (x10_108 + x12_8);
    v0_12 = *(x13_25 + 8);
    v2_11 = *(x13_25 + 0x10);
    cv::Mat* var_540;
    var_540 = v3_11;
    v1_11 = (v0_12 * v3_11);
    v0_12 = (v2_11 * v3_11);
    *(x13_25 + 8) = v1_11;
    *(x13_25 + 0x10) = v0_12;
    if ((*var_130 * var_130[1]) == 9)
    {
        v2_11 = *x8_136;
        v1_11 = v1_11;
        v0_12 = v0_12;
        v2_11 = v2_11;
        *(arg1 + 0x60) = v2_11;
        v2_11 = *x10_108;
        v2_11 = v2_11;
        *(arg1 + 0x84) = v2_11;
        v2_11 = x8_136[1];
        v2_11 = v2_11;
        *(arg1 + 0x6c) = v2_11;
        v2_11 = x10_108[1];
        v2_11 = v2_11;
        *(arg1 + 0x90) = v2_11;
        v2_11 = x8_136[2];
        v2_11 = v2_11;
        *(arg1 + 0x78) = v2_11;
        v2_11 = x10_108[2];
        v2_11 = v2_11;
        *(arg1 + 0x9c) = v2_11;
        v2_11 = *(x8_136 + x9_87);
        void* x8_137 = (x8_136 + (x9_87 << 1));
        void* x9_88 = (x10_108 + (x12_8 << 1));
        v2_11 = v2_11;
        *(arg1 + 0x64) = v2_11;
        v2_11 = *(x10_108 + x12_8);
        v2_11 = v2_11;
        *(arg1 + 0x88) = v2_11;
        v2_11 = *(x11_26 + 8);
        *(arg1 + 0x94) = v1_11;
        v1_11 = v2_11;
        *(arg1 + 0x70) = v1_11;
        v1_11 = *(x11_26 + 0x10);
        *(arg1 + 0xa0) = v0_12;
        v0_12 = v1_11;
        *(arg1 + 0x7c) = v0_12;
        v0_12 = *x8_137;
        v0_12 = v0_12;
        *(arg1 + 0x68) = v0_12;
        v0_12 = *x9_88;
        v0_12 = v0_12;
        *(arg1 + 0x8c) = v0_12;
        v0_12 = *(x8_137 + 8);
        v0_12 = v0_12;
        *(arg1 + 0x74) = v0_12;
        v0_12 = *(x9_88 + 8);
        v0_12 = v0_12;
        *(arg1 + 0x98) = v0_12;
        v0_12 = *(x8_137 + 0x10);
        v0_12 = v0_12;
        *(arg1 + 0x80) = v0_12;
        v0_12 = *(x9_88 + 0x10);
        v0_12 = v0_12;
        *(arg1 + 0xa4) = v0_12;
    }
    if ((*var_1f0 * var_1f0[1]) == 0x10)
    {
        int64_t* x8_141 = *s_19[0xc];
        v0_12 = *x8_141;
        int64_t x9_91 = *var_1e8;
        v0_12 = v0_12;
        *(arg1 + 0xb4) = v0_12;
        v0_12 = x8_141[1];
        void* x10_109 = (x8_141 + x9_91);
        v0_12 = v0_12;
        *(arg1 + 0xc4) = v0_12;
        v0_12 = x8_141[2];
        v0_12 = v0_12;
        *(arg1 + 0xd4) = v0_12;
        v0_12 = x8_141[3];
        v0_12 = v0_12;
        *(arg1 + 0xe4) = v0_12;
        v0_12 = *x10_109;
        v0_12 = v0_12;
        *(arg1 + 0xb8) = v0_12;
        v0_12 = *(x10_109 + 8);
        v0_12 = v0_12;
        *(arg1 + 0xc8) = v0_12;
        v0_12 = *(x10_109 + 0x10);
        v0_12 = v0_12;
        *(arg1 + 0xd8) = v0_12;
        v0_12 = *(x10_109 + 0x18);
        int64_t x10_110 = (x9_91 << 1);
        void* x11_27 = (x8_141 + x10_110);
        v0_12 = v0_12;
        *(arg1 + 0xe8) = v0_12;
        v0_12 = *x11_27;
        void* x8_142 = (x8_141 + (x10_110 + x9_91));
        v0_12 = v0_12;
        *(arg1 + 0xbc) = v0_12;
        v0_12 = *(x11_27 + 8);
        v0_12 = v0_12;
        *(arg1 + 0xcc) = v0_12;
        v0_12 = *(x11_27 + 0x10);
        v0_12 = v0_12;
        *(arg1 + 0xdc) = v0_12;
        v0_12 = *(x11_27 + 0x18);
        v0_12 = v0_12;
        *(arg1 + 0xec) = v0_12;
        v0_12 = *x8_142;
        v0_12 = v0_12;
        *(arg1 + 0xc0) = v0_12;
        v0_12 = *(x8_142 + 8);
        v0_12 = v0_12;
        *(arg1 + 0xd0) = v0_12;
        v0_12 = *(x8_142 + 0x10);
        v0_12 = v0_12;
        *(arg1 + 0xe0) = v0_12;
        v0_12 = *(x8_142 + 0x18);
        v0_12 = v0_12;
        *(arg1 + 0xf0) = v0_12;
    }
    if ((*var_250 * var_250[1]) == 0x10)
    {
        int64_t* x8_146 = *s_18[0xc];
        v0_12 = *x8_146;
        int64_t x9_95 = *var_248;
        v0_12 = v0_12;
        *(arg1 + 0xf4) = v0_12;
        v0_12 = x8_146[1];
        void* x10_111 = (x8_146 + x9_95);
        v0_12 = v0_12;
        *(arg1 + 0x104) = v0_12;
        v0_12 = x8_146[2];
        v0_12 = v0_12;
        *(arg1 + 0x114) = v0_12;
        v0_12 = x8_146[3];
        v0_12 = v0_12;
        *(arg1 + 0x124) = v0_12;
        v0_12 = *x10_111;
        v0_12 = v0_12;
        *(arg1 + 0xf8) = v0_12;
        v0_12 = *(x10_111 + 8);
        v0_12 = v0_12;
        *(arg1 + 0x108) = v0_12;
        v0_12 = *(x10_111 + 0x10);
        v0_12 = v0_12;
        *(arg1 + 0x118) = v0_12;
        v0_12 = *(x10_111 + 0x18);
        int64_t x10_112 = (x9_95 << 1);
        void* x11_28 = (x8_146 + x10_112);
        v0_12 = v0_12;
        *(arg1 + 0x128) = v0_12;
        v0_12 = *x11_28;
        void* x8_147 = (x8_146 + (x10_112 + x9_95));
        v0_12 = v0_12;
        *(arg1 + 0xfc) = v0_12;
        v0_12 = *(x11_28 + 8);
        v0_12 = v0_12;
        *(arg1 + 0x10c) = v0_12;
        v0_12 = *(x11_28 + 0x10);
        v0_12 = v0_12;
        *(arg1 + 0x11c) = v0_12;
        v0_12 = *(x11_28 + 0x18);
        v0_12 = v0_12;
        *(arg1 + 0x12c) = v0_12;
        v0_12 = *x8_147;
        v0_12 = v0_12;
        *(arg1 + 0x100) = v0_12;
        v0_12 = *(x8_147 + 8);
        v0_12 = v0_12;
        *(arg1 + 0x110) = v0_12;
        v0_12 = *(x8_147 + 0x10);
        v0_12 = v0_12;
        *(arg1 + 0x120) = v0_12;
        v0_12 = *(x8_147 + 0x18);
        v0_12 = v0_12;
        *(arg1 + 0x130) = v0_12;
    }
    char* x21_1;
    if ((*data_6ff40 & 1) == 0)
    {
        x21_1 = &*(data_6ff40 + 1);
    }
    else
    {
        x21_1 = *(data_6ff4a + 6);
    }
    int32_t var_4b0 = data_6ff38;
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_110 = strlen(x21_1);
    int32_t var_4e8;
    int64_t s;
    size_t x0_121;
    char* x20_3;
    if (x0_110 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_498_1;
        void* x22_2;
        if (x0_110 >= 0x17)
        {
            uint64_t x23_7 = ((x0_110 + 0x10) & 0xfffffffffffffff0);
            void* x0_112 = operator new(x23_7);
            x22_2 = x0_112;
            size_t var_4a0_1 = x0_110;
            var_498_1 = x0_112;
            s_1 = (x23_7 | 1);
        }
        else
        {
            x22_2 = &*s_1[1];
            s_1 = (x0_110 << 1);
        }
        if ((x0_110 >= 0x17 || (x0_110 < 0x17 && x0_110 != 0)))
        {
            memcpy(x22_2, x21_1, x0_110);
        }
        *(x22_2 + x0_110) = 0;
        int32_t x0_115 = g3::logLevel(&var_4b0);
        int32_t x20_2;
        if ((x0_115 & 1) == 0)
        {
            x20_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_45b10:
                operator delete(var_498_1);
                if ((x20_2 & 1) != 0)
                {
                    goto label_45b3c;
                }
            }
        }
        else
        {
            int64_t var_4c8 = 0;
            int64_t var_4c0_1 = 0;
            var_4c8 = 0x1e;
            void* var_4b8_1 = nullptr;
            __builtin_strncpy(&*var_4c8[1], "feasibal_region", 0x10);
            x20_2 = g3::logTag(&var_4c8);
            if ((var_4c8 & 1) != 0)
            {
                operator delete(var_4b8_1);
                if ((s_1 & 1) != 0)
                {
                    goto label_45b10;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_45b10;
            }
        }
        if (((((x0_115 & 1) == 0 && (s_1 & 1) == 0) || (x0_115 & 1) != 0) && (x20_2 & 1) != 0))
        {
        label_45b3c:
            LogCapture::LogCapture(&var_440, "feasibal_region", &data_6ff38, &data_54bb5, &nullptr->ident.version);
            *(arg1 + 0x48);
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        int64_t* x10_114 = *s_21[0xc];
        v11 = *x10_114;
        void* x8_157 = (x10_114 + *var_128);
        *(x8_157 + 8);
        v10 = *(x8_157 + 0x10);
        v9 = x10_114[2];
        if ((*data_6ff40 & 1) == 0)
        {
            x20_3 = &*(data_6ff40 + 1);
        }
        else
        {
            x20_3 = *(data_6ff4a + 6);
        }
        var_4e8 = data_6ff38;
        __builtin_memset(&s, 0, 0x18);
        x0_121 = strlen(x20_3);
    }
    if ((x0_110 < -0x10 || (x0_110 >= -0x10 && x0_121 < -0x10)))
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    if ((x0_110 >= -0x10 && x0_121 >= -0x10))
    {
        void* var_4d0_1;
        void* x21_2;
        if (x0_121 >= 0x17)
        {
            uint64_t x22_3 = ((x0_121 + 0x10) & 0xfffffffffffffff0);
            void* x0_123 = operator new(x22_3);
            x21_2 = x0_123;
            size_t var_4d8_1 = x0_121;
            var_4d0_1 = x0_123;
            s = (x22_3 | 1);
        }
        else
        {
            x21_2 = &*s[1];
            s = (x0_121 << 1);
        }
        if ((x0_121 >= 0x17 || (x0_121 < 0x17 && x0_121 != 0)))
        {
            memcpy(x21_2, x20_3, x0_121);
        }
        *(x21_2 + x0_121) = 0;
        int32_t x19_2;
        if ((g3::logLevel(&var_4e8) & 1) == 0)
        {
            x19_2 = 0;
            if ((s & 1) != 0)
            {
            label_45cf0:
                operator delete(var_4d0_1);
                if ((x19_2 & 1) == 0)
                {
                    goto label_45cf8;
                }
                goto label_45c84;
            }
        }
        else
        {
            int64_t var_500 = 0;
            int64_t var_4f8_1 = 0;
            var_500 = 0x1e;
            void* var_4f0_1 = nullptr;
            __builtin_strncpy(&*var_500[1], "feasibal_region", 0x10);
            x19_2 = g3::logTag(&var_500);
            if ((var_500 & 1) != 0)
            {
                operator delete(var_4f0_1);
                if ((s & 1) != 0)
                {
                    goto label_45cf0;
                }
            }
            else if ((s & 1) != 0)
            {
                goto label_45cf0;
            }
        }
        int64_t x8_164;
        if ((x19_2 & 1) == 0)
        {
        label_45cf8:
            x8_164 = *var_260_1[8];
            if (x8_164 != 0)
            {
            label_45d10:
                int32_t temp0_16;
                int32_t i_42;
                do
                {
                    temp0_16 = __ldaxr((x8_164 + 0x14));
                    i_42 = __stlxr((temp0_16 - 1), (x8_164 + 0x14));
                } while (i_42 != 0);
                if (temp0_16 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
        }
        else
        {
        label_45c84:
            LogCapture::LogCapture(&var_440, "feasibal_region", &data_6ff38, &data_54bb5, &nullptr->ident.version);
            double v3_12 = var_540;
            double v0_14;
            v0_14 = (v11 / v8);
            double v1_12;
            v1_12 = (v9 / v3_12);
            v3_12 = (v10 / v3_12);
            LogCapture::capturef();
            LogCapture::~LogCapture();
            x8_164 = *var_260_1[8];
            if (x8_164 != 0)
            {
                goto label_45d10;
            }
        }
        *var_260_1[8] = 0;
        __builtin_memset(&*s_18[0xc], 0, 0x20);
        if (s_18 >= 1)
        {
            int64_t i_43 = 0;
            do
            {
                var_250[i_43] = 0;
                i_43 = (i_43 + 1);
            } while (i_43 < s_18);
        }
        if (var_248 != var_530)
        {
            cv::fastFree(var_248);
        }
        int64_t x8_169 = *var_200_1[8];
        if (x8_169 != 0)
        {
            int32_t temp0_17;
            int32_t i_44;
            do
            {
                temp0_17 = __ldaxr((x8_169 + 0x14));
                i_44 = __stlxr((temp0_17 - 1), (x8_169 + 0x14));
            } while (i_44 != 0);
            if (temp0_17 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_200_1[8] = 0;
        __builtin_memset(&*s_19[0xc], 0, 0x20);
        if (s_19 >= 1)
        {
            int64_t i_45 = 0;
            do
            {
                var_1f0[i_45] = 0;
                i_45 = (i_45 + 1);
            } while (i_45 < s_19);
        }
        if (var_1e8 != x26_2)
        {
            cv::fastFree(var_1e8);
        }
        int64_t x8_173 = *var_1a0_1[8];
        if (x8_173 != 0)
        {
            int32_t temp0_18;
            int32_t i_46;
            do
            {
                temp0_18 = __ldaxr((x8_173 + 0x14));
                i_46 = __stlxr((temp0_18 - 1), (x8_173 + 0x14));
            } while (i_46 != 0);
            if (temp0_18 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_1a0_1[8] = 0;
        __builtin_memset(&*s_20[0xc], 0, 0x20);
        if (s_20 >= 1)
        {
            int64_t i_47 = 0;
            do
            {
                *(var_190 + (i_47 << 2)) = 0;
                i_47 = (i_47 + 1);
            } while (i_47 < s_20);
        }
        if (var_188 != var_510)
        {
            cv::fastFree(var_188);
        }
        int64_t x8_178 = *var_140_1[8];
        if (x8_178 != 0)
        {
            int32_t temp0_19;
            int32_t i_48;
            do
            {
                temp0_19 = __ldaxr((x8_178 + 0x14));
                i_48 = __stlxr((temp0_19 - 1), (x8_178 + 0x14));
            } while (i_48 != 0);
            if (temp0_19 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_140_1[8] = 0;
        __builtin_memset(&*s_21[0xc], 0, 0x20);
        if (s_21 >= 1)
        {
            int64_t i_49 = 0;
            do
            {
                var_130[i_49] = 0;
                i_49 = (i_49 + 1);
            } while (i_49 < s_21);
        }
        if (var_128 != var_518)
        {
            cv::fastFree(var_128);
        }
        int64_t x8_182 = *var_e0_1[8];
        if (x8_182 != 0)
        {
            int32_t temp0_20;
            int32_t i_50;
            do
            {
                temp0_20 = __ldaxr((x8_182 + 0x14));
                i_50 = __stlxr((temp0_20 - 1), (x8_182 + 0x14));
            } while (i_50 != 0);
            if (temp0_20 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        *var_e0_1[8] = 0;
        __builtin_memset(&*s_22[0xc], 0, 0x20);
        if (s_22 >= 1)
        {
            int64_t i_51 = 0;
            do
            {
                var_d0[i_51] = 0;
                i_51 = (i_51 + 1);
            } while (i_51 < s_22);
        }
        if (var_c8 != var_520)
        {
            cv::fastFree(var_c8);
        }
        if (*(x2 + 0x28) == x2_1)
        {
            return 0;
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t feasibal_region::feasibal_region::init(void* arg1, int128_t* arg2, int64_t* arg3, int32_t arg4, int128_t arg5 @ v0)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    double v8 = arg5;
    arg5 = *arg2;
    int128_t v1 = arg2[1];
    int128_t var_c0 = arg5;
    int128_t var_b0 = v1;
    int128_t var_a0 = arg2[2];
    int64_t var_90 = arg2[3];
    int64_t x8_2 = *(arg2 + 0x38);
    int64_t var_70;
    int64_t* var_78 = &var_70;
    var_70 = 0;
    int64_t var_68 = 0;
    if (x8_2 != 0)
    {
        int32_t i;
        do
        {
            i = __stlxr((__ldaxr((x8_2 + 0x14)) + 1), (x8_2 + 0x14));
        } while (i != 0);
    }
    if (((x8_2 == 0 && arg5 <= 2) || (x8_2 != 0 && *(arg2 + 4) <= 2)))
    {
        int64_t* x8_5 = *(arg2 + 0x48);
        *var_78 = *x8_5;
        var_78[1] = x8_5[1];
    }
    if (((x8_2 == 0 && arg5 > 2) || (x8_2 != 0 && *(arg2 + 4) > 2)))
    {
        *var_c0[4] = 0;
        cv::Mat::copySize(&var_c0);
    }
    int64_t var_d0 = *arg3;
    int32_t var_c8 = arg3[1];
    feasibal_region::feasibal_region::readParam(arg1, &var_c0, &var_d0, v8);
    if (x8_2 != 0)
    {
        int32_t temp0_2;
        int32_t i_1;
        do
        {
            temp0_2 = __ldaxr((x8_2 + 0x14));
            i_1 = __stlxr((temp0_2 - 1), (x8_2 + 0x14));
        } while (i_1 != 0);
        if (temp0_2 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int64_t var_88_1 = 0;
    int128_t s;
    __builtin_memset(&s, 0, 0x20);
    if (*var_c0[4] >= 1)
    {
        int64_t i_2 = 0;
        do
        {
            *((&var_c0 | 8) + (i_2 << 2)) = 0;
            i_2 = (i_2 + 1);
        } while (i_2 < *var_c0[4]);
    }
    if (var_78 != &var_70)
    {
        cv::fastFree(var_78);
    }
    int64_t x0_3 = operator new(0xc18);
    feasibal_region::ground_process::ground_process();
    void* x21_1 = *(arg1 + 0x270);
    *(arg1 + 0x270) = x0_3;
    if (x21_1 != 0)
    {
        feasibal_region::ground_process::~ground_process();
        operator delete(x21_1);
    }
    feasibal_region::PreParamInfo::PreParamInfo();
    int16_t var_d8 = 0;
    int32_t var_d4 = 0x40a00000;
    void var_2c8;
    feasibal_region::PreParamInfo::operator=(&var_2c8);
    feasibal_region::ground_process::init(*(arg1 + 0x270));
    feasibal_region::PreParamInfo::~PreParamInfo();
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return 0;
}

uint64_t feasibal_region::feasibal_region::setIRCameraMatrix(cv::Mat* arg1)
{
    int32_t x21 = 1;
    if (feasibal_region::feasibal_region::WriteCameraParam(arg1, (arg1 + 0x258)) == 0)
    {
        feasibal_region::feasibal_region::init(arg1);
        *(arg1 + 0x250) = 1;
        x21 = 0;
    }
    return x21;
}

uint64_t feasibal_region::feasibal_region::run(void* arg1, int32_t* arg2, int128_t* arg3, int128_t arg4 @ v8)
{
    int64_t var_70 = arg4;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int64_t var_498;
    int128_t v0;
    int128_t v1;
    int128_t v2;
    int128_t v3;
    v0 = gettimeofday(&var_498, 0);
    v0 = 0;
    *v0[8] = 0;
    int32_t var_158 = 0x42ff0000;
    int128_t s_8;
    __builtin_memset(&s_8, 0, 0x3c);
    int64_t var_108;
    int64_t* var_110 = &var_108;
    void* var_118 = &*s_8[4];
    int64_t var_100 = 0;
    var_108 = 0;
    int32_t var_f8 = 0x42ff0000;
    int128_t s_10;
    __builtin_memset(&s_10, 0, 0x3c);
    int64_t var_a8;
    int64_t* var_b0 = &var_a8;
    void* var_b8 = &*s_10[4];
    int128_t s_5;
    __builtin_memset(&s_5, 0, 0x29);
    int128_t s_4;
    __builtin_memset(&s_4, 0, 0x28);
    int128_t s_3;
    __builtin_memset(&s_3, 0, 0x28);
    int32_t var_228_1 = 0x42ff0000;
    int128_t s_6;
    __builtin_memset(&s_6, 0, 0x3c);
    int32_t var_1c0_1 = 0x42ff0000;
    void* var_1e8 = &*s_6[4];
    int64_t var_1d8;
    int64_t* var_1e0 = &var_1d8;
    int64_t var_1d0 = 0;
    var_1d8 = 0;
    int128_t s_7;
    __builtin_memset(&s_7, 0, 0x3c);
    var_a8 = 0;
    int64_t var_a0 = 0;
    void* var_180 = &*s_7[4];
    int64_t var_170;
    int64_t* var_178 = &var_170;
    var_170 = 0;
    int64_t var_168 = 0;
    int64_t var_274 = 0xffffffff;
    int32_t var_488;
    int32_t x19_3;
    if (*(arg2 + 0x10) != 0)
    {
        uint64_t x8_2 = arg2[1];
        int64_t x11_1;
        if (x8_2 >= 3)
        {
            void* x9_2 = *(arg2 + 0x40);
            int64_t i_12;
            if (x8_2 != 3)
            {
                i_12 = (x8_2 & 0xfffffffc);
                v1 = 1;
                *v1[8] = 1;
                void* x11_2 = (x9_2 + 8);
                int64_t i_10 = i_12;
                v0 = v1;
                int64_t i;
                do
                {
                    v2 = *(x11_2 - 8);
                    v3 = *x11_2;
                    /* unimplemented  {sxtl v0.2d, v2.2s} */;
                    /* unimplemented  {sxtl v1.2d, v3.2s} */;
                    int64_t x0_2 = v1;
                    int64_t x16_2 = (v0 * v1);
                    int64_t x13_2 = (v1 * v0);
                    v1 = (v1 * v0);
                    int64_t x14_3 = (v0 * x0_2);
                    v0 = x16_2;
                    i = i_10;
                    i_10 = (i_10 - 4);
                    *v1[8] = x13_2;
                    *v0[8] = x14_3;
                    x11_2 = (x11_2 + 0x10);
                } while (i != 4);
                x11_1 = ((v0 * v1) * (v0 * v1));
            }
            else
            {
                i_12 = 0;
                x11_1 = 1;
            }
            if ((x8_2 == 3 || (x8_2 != 3 && i_12 != x8_2)))
            {
                int64_t i_11 = (x8_2 - i_12);
                int32_t* x9_3 = (x9_2 + (i_12 << 2));
                int64_t i_1;
                do
                {
                    int64_t x10_2 = *x9_3;
                    x9_3 = &x9_3[1];
                    i_1 = i_11;
                    i_11 = (i_11 - 1);
                    x11_1 = (x11_1 * x10_2);
                } while (i_1 != 1);
            }
        }
        else
        {
            x11_1 = (arg2[3] * arg2[2]);
        }
        if ((((x8_2 < 3 && x8_2 != 0) || (x8_2 >= 3 && x8_2 != 0)) && x11_1 != 0))
        {
            if (&var_158 != arg2)
            {
                int64_t x8_3 = *(arg2 + 0x38);
                int128_t var_128;
                if (x8_3 != 0)
                {
                    int32_t i_2;
                    do
                    {
                        i_2 = __stlxr((__ldaxr((x8_3 + 0x14)) + 1), (x8_3 + 0x14));
                    } while (i_2 != 0);
                    int64_t x8_5 = *var_128[8];
                    if (x8_5 != 0)
                    {
                        int32_t temp0_2;
                        int32_t i_3;
                        do
                        {
                            temp0_2 = __ldaxr((x8_5 + 0x14));
                            i_3 = __stlxr((temp0_2 - 1), (x8_5 + 0x14));
                        } while (i_3 != 0);
                        if (temp0_2 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                }
                v0 = 0;
                *v0[8] = 0;
                *var_128[8] = 0;
                int128_t s_9;
                __builtin_memset(&s_9, 0, 0x20);
                int64_t x10_6;
                if (s_8 <= 0)
                {
                    var_158 = *arg2;
                }
                else
                {
                    int64_t x9_9 = 0;
                    do
                    {
                        *(var_118 + (x9_9 << 2)) = 0;
                        x10_6 = s_8;
                        x9_9 = (x9_9 + 1);
                    } while (x9_9 < x10_6);
                    var_158 = *arg2;
                }
                int32_t x8_18;
                if ((s_8 <= 0 || (s_8 > 0 && x10_6 <= 2)))
                {
                    x8_18 = arg2[1];
                    if (x8_18 <= 2)
                    {
                        s_8 = x8_18;
                        int64_t var_150_1 = *(arg2 + 8);
                        int64_t* x8_20 = *(arg2 + 0x48);
                        *var_110 = *x8_20;
                        var_110[1] = x8_20[1];
                    }
                }
                if ((((s_8 <= 0 || (s_8 > 0 && x10_6 <= 2)) && x8_18 > 2) || (s_8 > 0 && x10_6 > 2)))
                {
                    cv::Mat::copySize(&var_158);
                }
                int128_t var_148_1 = *(arg2 + 0x10);
                int128_t var_144 = *(arg2 + 0x20);
                var_128 = *(arg2 + 0x30);
                *var_128[8] = *(arg2 + 0x38);
            }
            if (&var_158 != arg2)
            {
                int64_t x8_24 = *(arg2 + 0x98);
                if (x8_24 != 0)
                {
                    int32_t i_4;
                    do
                    {
                        i_4 = __stlxr((__ldaxr((x8_24 + 0x14)) + 1), (x8_24 + 0x14));
                    } while (i_4 != 0);
                }
                int128_t var_c8;
                int64_t x8_26 = *var_c8[8];
                if (x8_26 != 0)
                {
                    int32_t temp0_4;
                    int32_t i_5;
                    do
                    {
                        temp0_4 = __ldaxr((x8_26 + 0x14));
                        i_5 = __stlxr((temp0_4 - 1), (x8_26 + 0x14));
                    } while (i_5 != 0);
                    if (temp0_4 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                v0 = 0;
                *v0[8] = 0;
                *var_c8[8] = 0;
                int128_t s_11;
                __builtin_memset(&s_11, 0, 0x20);
                int64_t x10_10;
                if (s_10 <= 0)
                {
                    var_f8 = arg2[0x18];
                }
                else
                {
                    int64_t x9_15 = 0;
                    do
                    {
                        *(var_b8 + (x9_15 << 2)) = 0;
                        x10_10 = s_10;
                        x9_15 = (x9_15 + 1);
                    } while (x9_15 < x10_10);
                    var_f8 = arg2[0x18];
                }
                int32_t x8_32;
                if ((s_10 <= 0 || (s_10 > 0 && x10_10 <= 2)))
                {
                    x8_32 = arg2[0x19];
                    if (x8_32 <= 2)
                    {
                        s_10 = x8_32;
                        int64_t var_f0_1 = *(arg2 + 0x68);
                        int64_t* x8_34 = *(arg2 + 0xa8);
                        *var_b0 = *x8_34;
                        var_b0[1] = x8_34[1];
                    }
                }
                if ((((s_10 <= 0 || (s_10 > 0 && x10_10 <= 2)) && x8_32 > 2) || (s_10 > 0 && x10_10 > 2)))
                {
                    cv::Mat::copySize(&var_f8);
                }
                int128_t var_e8_1 = *(arg2 + 0x70);
                int128_t var_e4 = *(arg2 + 0x80);
                int128_t var_c8_1 = *(arg2 + 0x90);
            }
            int64_t var_98_1 = *(arg2 + 0x120);
            int32_t var_90_1 = arg2[0x4a];
            int32_t x8_38 = *(arg1 + 0x138);
            int32_t x9_18;
            if (*var_118 != x8_38)
            {
                x9_18 = *(arg1 + 0x13c);
            }
            else
            {
                x9_18 = *(arg1 + 0x13c);
            }
            int32_t var_340;
            int64_t var_330;
            if ((*var_118 != x8_38 || (*var_118 == x8_38 && *(var_118 + 4) != x9_18)))
            {
                var_488 = 0x1010000;
                var_330 = 0;
                var_340 = 0x2010000;
                int32_t var_4e8 = x9_18;
                int32_t var_4e4_1 = x8_38;
                int32_t* var_480_1 = &var_158;
                int64_t var_478_1 = 0;
                int32_t* var_338_1 = &var_158;
                v0 = 0x3ff0000000000000;
                cv::resize(&var_488, &var_340, &var_4e8, 0, v0, v0);
                char* x22_2;
                if ((*data_6ff40 & 1) == 0)
                {
                    x22_2 = &*(data_6ff40 + 1);
                }
                else
                {
                    x22_2 = *(data_6ff4a + 6);
                }
                int32_t var_508 = data_6ff38;
                int64_t s_1;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_19 = strlen(x22_2);
                if (x0_19 < -0x10)
                {
                    goto label_47e14;
                }
                void* var_4f0_1;
                void* x23_1;
                if (x0_19 >= 0x17)
                {
                    uint64_t x24_1 = ((x0_19 + 0x10) & 0xfffffffffffffff0);
                    void* x0_21 = operator new(x24_1);
                    x23_1 = x0_21;
                    size_t var_4f8_1 = x0_19;
                    var_4f0_1 = x0_21;
                    s_1 = (x24_1 | 1);
                }
                else
                {
                    x23_1 = &*s_1[1];
                    s_1 = (x0_19 << 1);
                }
                if ((x0_19 >= 0x17 || (x0_19 < 0x17 && x0_19 != 0)))
                {
                    memcpy(x23_1, x22_2, x0_19);
                }
                *(x23_1 + x0_19) = 0;
                int32_t x0_24 = g3::logLevel(&var_508);
                int32_t x21_4;
                if ((x0_24 & 1) == 0)
                {
                    x21_4 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_4767c:
                        operator delete(var_4f0_1);
                        if ((x21_4 & 1) != 0)
                        {
                            goto label_476a8;
                        }
                    }
                }
                else
                {
                    char var_520 = 0xc;
                    int32_t var_51f;
                    __builtin_strncpy(&var_51f, "region", 0x17);
                    x21_4 = g3::logTag(&var_520);
                    if ((var_520 & 1) != 0)
                    {
                        void* var_510;
                        operator delete(var_510);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_4767c;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_4767c;
                    }
                }
                if (((((x0_24 & 1) == 0 && (s_1 & 1) == 0) || (x0_24 & 1) != 0) && (x21_4 & 1) != 0))
                {
                label_476a8:
                    LogCapture::LogCapture(&var_488, "region", &data_6ff38, &data_54bb5, &nullptr->ident.version);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                }
            }
            if (*(arg1 + 0x278) == 1)
            {
                var_488 = 0x1010000;
                var_330 = 0;
                var_340 = 0x2010000;
                int32_t* var_480_2 = &var_158;
                int64_t var_478_2 = 0;
                int32_t* var_338_2 = &var_158;
                cv::medianBlur(&var_488, &var_340, 5);
            }
            feasibal_region::ground_process::run(*(arg1 + 0x270), &var_158);
            *(arg1 + 0x270);
            feasibal_region::ground_process::getExtrinsic();
            int128_t var_2f0;
            if ((arg3 + 0x58) != &*var_2f0[8])
            {
                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>((arg3 + 0x58), *var_2f0[8]);
            }
            if (&arg3[7] != &s_4)
            {
                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&arg3[7], s_4);
            }
            int128_t var_2c0;
            if ((arg3 + 0x88) != &*var_2c0[8])
            {
                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>((arg3 + 0x88), *var_2c0[8]);
            }
            if (&arg3[0xa] != &s_5)
            {
                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&arg3[0xa], s_5);
            }
            *arg3 = var_340;
            arg3[1] = var_330;
            int128_t var_320;
            arg3[2] = var_320;
            int128_t var_310;
            arg3[3] = var_310;
            int128_t var_300;
            if (&arg3[4] != &var_300)
            {
                std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&arg3[4], s_3);
            }
            arg3[0x1c] = var_274;
            int32_t var_228;
            int128_t v0_1;
            if ((arg3 + 0xe8) != &var_228)
            {
                int128_t var_1f8;
                int64_t x8_48 = *var_1f8[8];
                if (x8_48 != 0)
                {
                    int32_t i_6;
                    do
                    {
                        i_6 = __stlxr((__ldaxr((x8_48 + 0x14)) + 1), (x8_48 + 0x14));
                    } while (i_6 != 0);
                }
                int64_t x8_50 = arg3[0x12];
                if (x8_50 != 0)
                {
                    int32_t temp0_6;
                    int32_t i_7;
                    do
                    {
                        temp0_6 = __ldaxr((x8_50 + 0x14));
                        i_7 = __stlxr((temp0_6 - 1), (x8_50 + 0x14));
                    } while (i_7 != 0);
                    if (temp0_6 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                v0_1 = 0;
                *v0_1[8] = 0;
                arg3[0x12] = 0;
                int32_t x8_53 = *(arg3 + 0xec);
                __builtin_memset((arg3 + 0xf8), 0, 0x20);
                int64_t x10_17;
                if (x8_53 <= 0)
                {
                    *(arg3 + 0xe8) = var_228_1;
                }
                else
                {
                    int64_t x8_54 = *(arg3 + 0x128);
                    int64_t x9_24 = 0;
                    do
                    {
                        *(x8_54 + (x9_24 << 2)) = 0;
                        x10_17 = *(arg3 + 0xec);
                        x9_24 = (x9_24 + 1);
                    } while (x9_24 < x10_17);
                    *(arg3 + 0xe8) = var_228_1;
                }
                int32_t x8_57;
                if ((x8_53 <= 0 || (x8_53 > 0 && x10_17 <= 2)))
                {
                    x8_57 = s_6;
                    if (x8_57 <= 2)
                    {
                        *(arg3 + 0xec) = x8_57;
                        int64_t* x10_18 = arg3[0x13];
                        int64_t var_220;
                        arg3[0xf] = var_220;
                        *x10_18 = *var_1e0;
                        x10_18[1] = var_1e0[1];
                    }
                }
                if ((((x8_53 <= 0 || (x8_53 > 0 && x10_17 <= 2)) && x8_57 > 2) || (x8_53 > 0 && x10_17 > 2)))
                {
                    cv::Mat::copySize((arg3 + 0xe8));
                }
                int128_t var_218;
                *(arg3 + 0xf8) = var_218;
                int128_t var_214;
                *(arg3 + 0x108) = var_214;
                *(arg3 + 0x118) = var_1f8;
            }
            int32_t var_1c8;
            *(arg3 + 0x1a8) = var_1c8;
            int32_t var_1c0;
            if ((arg3 + 0x148) != &var_1c0)
            {
                int64_t var_188;
                if (var_188 != 0)
                {
                    int32_t i_8;
                    do
                    {
                        i_8 = __stlxr((__ldaxr((var_188 + 0x14)) + 1), (var_188 + 0x14));
                    } while (i_8 != 0);
                }
                int64_t x8_66 = arg3[0x18];
                if (x8_66 != 0)
                {
                    int32_t temp0_8;
                    int32_t i_9;
                    do
                    {
                        temp0_8 = __ldaxr((x8_66 + 0x14));
                        i_9 = __stlxr((temp0_8 - 1), (x8_66 + 0x14));
                    } while (i_9 != 0);
                    if (temp0_8 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                v0_1 = 0;
                *v0_1[8] = 0;
                arg3[0x18] = 0;
                __builtin_memset((arg3 + 0x158), 0, 0x20);
                int64_t x10_21;
                if (*(arg3 + 0x14c) <= 0)
                {
                    *(arg3 + 0x148) = var_1c0_1;
                }
                else
                {
                    int64_t x8_70 = *(arg3 + 0x188);
                    int64_t x9_30 = 0;
                    do
                    {
                        *(x8_70 + (x9_30 << 2)) = 0;
                        x10_21 = *(arg3 + 0x14c);
                        x9_30 = (x9_30 + 1);
                    } while (x9_30 < x10_21);
                    *(arg3 + 0x148) = var_1c0_1;
                }
                int32_t x8_73;
                if ((*(arg3 + 0x14c) <= 0 || (*(arg3 + 0x14c) > 0 && x10_21 <= 2)))
                {
                    x8_73 = s_7;
                    if (x8_73 <= 2)
                    {
                        *(arg3 + 0x14c) = x8_73;
                        int64_t* x10_22 = arg3[0x19];
                        int64_t var_1b8;
                        arg3[0x15] = var_1b8;
                        *x10_22 = *var_178;
                        x10_22[1] = var_178[1];
                    }
                }
                if ((((*(arg3 + 0x14c) <= 0 || (*(arg3 + 0x14c) > 0 && x10_21 <= 2)) && x8_73 > 2) || (*(arg3 + 0x14c) > 0 && x10_21 > 2)))
                {
                    cv::Mat::copySize((arg3 + 0x148));
                }
                int128_t var_1b0;
                *(arg3 + 0x158) = var_1b0;
                int128_t var_1ac;
                *(arg3 + 0x168) = var_1ac;
                int128_t var_19c;
                *(arg3 + 0x178) = var_19c;
            }
            int128_t var_290;
            *(arg3 + 0x1ac) = var_290;
            cv::Mat* x1_15 = arg3[4];
            *(arg3 + 0x48);
            char var_278;
            *(arg3 + 0x1bc) = var_278;
            *(arg3 + 0x1c4) = *var_274[4];
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>((arg3 + 0xb8), x1_15);
            arg3[6];
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::assign<Eigen::Matrix<float, 3, 1, 0, 3, 1>*>(&arg3[0xd], *(arg3 + 0x58));
            *(arg3 + 0x78);
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >(&arg3[0xd], *(arg3 + 0xd8), arg3[7]);
            arg3[9];
            std::__ndk1::vector<Eigen::Matrix<float, 3, 1, 0, 3, 1>, std::__ndk1::allocator<Eigen::Matrix<float, 3, 1, 0, 3, 1> > >::insert<std::__ndk1::__wrap_iter<Eigen::Matrix<float, 3, 1, 0, 3, 1>*> >(&arg3[0xd], *(arg3 + 0xd8), *(arg3 + 0x88));
            double v0_2;
            v0_2 = *(arg3 + 0x1c4);
            v0_2 = (v0_2 * 180f);
            v0_2 = (v0_2 / 3.1415899999999999);
            if ((FCMP_UO(v0_2, v0_2)))
            {
                v0_2 = v0_2;
            }
            else
            {
                v0_2 = 0f;
            }
            arg4 = v0_2;
            char x9_32;
            if (arg4 > 4.2000000000000002)
            {
                x9_32 = 1;
            }
            else
            {
                x9_32 = 0;
            }
            char x10_23;
            if (v0_2 < 9f)
            {
                x10_23 = 1;
            }
            else
            {
                x10_23 = 0;
            }
            *(arg3 + 0x1c8) = (x10_23 & x9_32);
            uint32_t x8_82 = *data_6ff40;
            int32_t var_540 = data_6ff38;
            int64_t var_530_1 = 0;
            void* var_528_1 = nullptr;
            char* x20_3;
            if ((x8_82 & 1) == 0)
            {
                x20_3 = &*(data_6ff40 + 1);
            }
            else
            {
                x20_3 = *(data_6ff4a + 6);
            }
            int64_t var_538 = 0;
            size_t x0_47 = strlen(x20_3);
            if (x0_47 < -0x10)
            {
                goto label_47e04;
            }
            void* x21_7;
            if (x0_47 >= 0x17)
            {
                uint64_t x22_4 = ((x0_47 + 0x10) & 0xfffffffffffffff0);
                void* x0_49 = operator new(x22_4);
                x21_7 = x0_49;
                size_t var_530_2 = x0_47;
                var_528_1 = x0_49;
                var_538 = (x22_4 | 1);
            }
            else
            {
                x21_7 = &*var_538[1];
                var_538 = (x0_47 << 1);
            }
            if ((x0_47 >= 0x17 || (x0_47 < 0x17 && x0_47 != 0)))
            {
                memcpy(x21_7, x20_3, x0_47);
            }
            *(x21_7 + x0_47) = 0;
            int32_t x0_52 = g3::logLevel(&var_540);
            int32_t x19_5;
            if ((x0_52 & 1) == 0)
            {
                x19_5 = 0;
                if ((var_538 & 1) != 0)
                {
                label_47bc0:
                    operator delete(var_528_1);
                    if ((x19_5 & 1) != 0)
                    {
                        goto label_47bec;
                    }
                }
            }
            else
            {
                char var_558 = 0xc;
                int32_t var_557;
                __builtin_strncpy(&var_557, "region", 0x17);
                x19_5 = g3::logTag(&var_558);
                if ((var_558 & 1) != 0)
                {
                    void* var_548;
                    operator delete(var_548);
                    if ((var_538 & 1) != 0)
                    {
                        goto label_47bc0;
                    }
                }
                else if ((var_538 & 1) != 0)
                {
                    goto label_47bc0;
                }
            }
            if (((((x0_52 & 1) == 0 && (var_538 & 1) == 0) || (x0_52 & 1) != 0) && (x19_5 & 1) != 0))
            {
            label_47bec:
                LogCapture::LogCapture(&var_488, "region", &data_6ff38, &data_54bb5, &nullptr->ident.version);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
            int64_t var_4a8;
            gettimeofday(&var_4a8, 0);
            uint32_t x10_24 = *data_6ff40;
            int64_t x26_1 = var_4a8;
            int64_t x28_1 = var_498;
            int32_t var_578 = data_6ff38;
            char* x20_4;
            if ((x10_24 & 1) == 0)
            {
                x20_4 = &*(data_6ff40 + 1);
            }
            else
            {
                x20_4 = *(data_6ff4a + 6);
            }
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            size_t x0_60 = strlen(x20_4);
            if (x0_60 < -0x10)
            {
                goto label_47e0c;
            }
            void* var_560_1;
            void* x21_8;
            if (x0_60 >= 0x17)
            {
                uint64_t x22_5 = ((x0_60 + 0x10) & 0xfffffffffffffff0);
                void* x0_62 = operator new(x22_5);
                x21_8 = x0_62;
                size_t var_568_1 = x0_60;
                var_560_1 = x0_62;
                s = (x22_5 | 1);
            }
            else
            {
                x21_8 = &*s[1];
                s = (x0_60 << 1);
            }
            if ((x0_60 >= 0x17 || (x0_60 < 0x17 && x0_60 != 0)))
            {
                memcpy(x21_8, x20_4, x0_60);
            }
            *(x21_8 + x0_60) = 0;
            int32_t x0_65 = g3::logLevel(&var_578);
            int32_t x19_7;
            if ((x0_65 & 1) == 0)
            {
                x19_7 = 0;
                if ((s & 1) != 0)
                {
                label_47d2c:
                    operator delete(var_560_1);
                    if ((x19_7 & 1) != 0)
                    {
                        goto label_47d58;
                    }
                }
            }
            else
            {
                int64_t var_590 = 0;
                int64_t var_588_1 = 0;
                var_590 = 0x1e;
                void* var_580_1 = nullptr;
                __builtin_strncpy(&*var_590[1], "feasibal_region", 0x10);
                x19_7 = g3::logTag(&var_590);
                if ((var_590 & 1) != 0)
                {
                    operator delete(var_580_1);
                    if ((s & 1) != 0)
                    {
                        goto label_47d2c;
                    }
                }
                else if ((s & 1) != 0)
                {
                    goto label_47d2c;
                }
            }
            if (((((x0_65 & 1) == 0 && (s & 1) == 0) || (x0_65 & 1) != 0) && (x19_7 & 1) != 0))
            {
            label_47d58:
                LogCapture::LogCapture(&var_488, "feasibal_region", &data_6ff38, &data_54bb5, &nullptr->ident.version);
                int64_t var_4a0;
                int64_t var_490;
                double v0_4;
                v0_4 = ((vcvtd_f64_s64((x26_1 - x28_1)) * 1000.0) + (vcvtd_f64_s64((var_4a0 - var_490)) / 1000.0));
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
            x19_3 = 0;
            goto label_47db0;
        }
    }
    char* x20_1;
    if ((*data_6ff40 & 1) == 0)
    {
        x20_1 = &*(data_6ff40 + 1);
    label_47204:
        int32_t var_4c8 = data_6ff38;
        int64_t s_2;
        __builtin_memset(&s_2, 0, 0x18);
        size_t x0_4 = strlen(x20_1);
        if (x0_4 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_47e04:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_47e0c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_47e14:
            int64_t x0_75 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
            feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
            /* tailcall */
            return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(x0_75));
        }
        void* var_4b0_1;
        void* x21_2;
        if (x0_4 >= 0x17)
        {
            uint64_t x22_1 = ((x0_4 + 0x10) & 0xfffffffffffffff0);
            void* x0_6 = operator new(x22_1);
            x21_2 = x0_6;
            size_t var_4b8_1 = x0_4;
            var_4b0_1 = x0_6;
            s_2 = (x22_1 | 1);
        }
        else
        {
            x21_2 = &*s_2[1];
            s_2 = (x0_4 << 1);
        }
        if ((x0_4 >= 0x17 || (x0_4 < 0x17 && x0_4 != 0)))
        {
            memcpy(x21_2, x20_1, x0_4);
        }
        *(x21_2 + x0_4) = 0;
        int32_t x19_2;
        if ((g3::logLevel(&var_4c8) & 1) == 0)
        {
            x19_2 = 0;
            if ((s_2 & 1) != 0)
            {
            label_47330:
                operator delete(var_4b0_1);
                if ((x19_2 & 1) == 0)
                {
                    goto label_47338;
                }
                goto label_472e8;
            }
        }
        else
        {
            char var_4e0 = 0xc;
            int32_t var_4df;
            __builtin_strncpy(&var_4df, "region", 0x17);
            x19_2 = g3::logTag(&var_4e0);
            if ((var_4e0 & 1) != 0)
            {
                void* var_4d0;
                operator delete(var_4d0);
                if ((s_2 & 1) != 0)
                {
                    goto label_47330;
                }
            }
            else if ((s_2 & 1) != 0)
            {
                goto label_47330;
            }
        }
        if ((x19_2 & 1) == 0)
        {
        label_47338:
            x19_3 = 1;
        }
        else
        {
        label_472e8:
            LogCapture::LogCapture(&var_488, "region", &data_6ff38, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
            LogCapture::~LogCapture();
            x19_3 = 1;
        }
    label_47db0:
        feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
        feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
        if (*(x25 + 0x28) != x8)
        {
            __stack_chk_fail();
            /* no return */
        }
        arg4 = var_70;
        return x19_3;
    }
    x20_1 = *(data_6ff4a + 6);
    goto label_47204;
}

int64_t sub_47e1c(int64_t arg1)
{
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

int64_t sub_47e20(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

int64_t sub_47e48(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

int64_t sub_47e70(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

int64_t sub_47e94(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

int64_t sub_47eb4(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

int64_t sub_47ecc(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

int64_t sub_47f00(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

int64_t sub_47f20(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData();
    feasibal_region::GroundProcessRunInData::~GroundProcessRunInData();
    /* tailcall */
    return feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(_Unwind_Resume(arg1));
}

void* feasibal_region::GroundProcessRunOutData::~GroundProcessRunOutData(int64_t* arg1)
{
    int64_t x8 = arg1[0x2f];
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg1 + 0x144);
    arg1[0x2f] = 0;
    __builtin_memset(&arg1[0x2a], 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = arg1[0x30];
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0x144));
    }
    void* x0_1 = arg1[0x31];
    if (x0_1 != &arg1[0x32])
    {
        cv::fastFree(x0_1);
    }
    int64_t x8_5 = arg1[0x22];
    if (x8_5 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_5 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_5 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_7 = *(arg1 + 0xdc);
    arg1[0x22] = 0;
    __builtin_memset(&arg1[0x1d], 0, 0x20);
    if (x8_7 >= 1)
    {
        int64_t x8_8 = arg1[0x23];
        int64_t i_3 = 0;
        do
        {
            *(x8_8 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *(arg1 + 0xdc));
    }
    void* x0_3 = arg1[0x24];
    if (x0_3 != &arg1[0x25])
    {
        cv::fastFree(x0_3);
    }
    void* x0_4 = arg1[0xc];
    if (x0_4 != 0)
    {
        arg1[0xd] = x0_4;
        operator delete(x0_4);
    }
    void* x0_5 = arg1[9];
    if (x0_5 != 0)
    {
        arg1[0xa] = x0_5;
        operator delete(x0_5);
    }
    void* x0_6 = arg1[6];
    if (x0_6 != 0)
    {
        arg1[7] = x0_6;
        operator delete(x0_6);
    }
    void* x0_7 = arg1[3];
    if (x0_7 != 0)
    {
        arg1[4] = x0_7;
        operator delete(x0_7);
    }
    void* x0_8 = *arg1;
    if (x0_8 == 0)
    {
        return x0_8;
    }
    arg1[1] = x0_8;
    /* tailcall */
    return operator delete(x0_8);
}

void sub_480b0(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

void* feasibal_region::GroundProcessRunInData::~GroundProcessRunInData(void* arg1)
{
    int64_t x8 = *(arg1 + 0x98);
    if (x8 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_2 = *(arg1 + 0x64);
    *(arg1 + 0x98) = 0;
    __builtin_memset((arg1 + 0x70), 0, 0x20);
    if (x8_2 >= 1)
    {
        int64_t x8_3 = *(arg1 + 0xa0);
        int64_t i_1 = 0;
        do
        {
            *(x8_3 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0x64));
    }
    void* x0_1 = *(arg1 + 0xa8);
    if (x0_1 != (arg1 + 0xb0))
    {
        cv::fastFree(x0_1);
    }
    int64_t x8_5 = *(arg1 + 0x38);
    if (x8_5 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_5 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_5 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_7 = *(arg1 + 4);
    *(arg1 + 0x38) = 0;
    __builtin_memset((arg1 + 0x10), 0, 0x20);
    if (x8_7 >= 1)
    {
        int64_t x8_8 = *(arg1 + 0x40);
        int64_t i_3 = 0;
        do
        {
            *(x8_8 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *(arg1 + 4));
    }
    void* x0_3 = *(arg1 + 0x48);
    if (x0_3 != (arg1 + 0x50))
    {
        x0_3 = cv::fastFree(x0_3);
    }
    return x0_3;
}

void sub_481b4(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t feasibal_region::feasibal_region::release() __pure
{
    return 0;
}

int64_t feasibal_region::feasibal_region::getTFMatrix(int64_t arg1, int64_t* arg2, int128_t* arg3, double* arg4 @ x8)
{
    double v9 = arg2[1];
    double v13 = *arg2;
    double var_78;
    double var_70;
    sincos(&var_70, &var_78, (arg2[2] * 0.5));
    double v11 = var_78;
    double v10 = var_70;
    int64_t v8 = 0.0;
    double v12 = (v10 * v8);
    double var_88;
    double var_80;
    sincos(&var_80, &var_88, (v9 * 0.5));
    double v1 = var_88;
    double v0_2 = var_80;
    double v2 = (v0_2 * v8);
    double v4 = (v0_2 * v12);
    double v5 = (v1 * v12);
    double v3 = (v1 * v11);
    double v7 = (v2 * v12);
    double v16 = (v10 * v2);
    v2 = (v11 * v2);
    v11 = ((v16 + ((v0_2 * v11) + v5)) - v7);
    v12 = ((v4 + ((v1 * v10) + v2)) - v7);
    v9 = (((v3 - v7) - v4) - v16);
    v10 = ((v7 + (v2 + v5)) - (v0_2 * v10));
    double var_68;
    double var_58;
    int64_t x0_3;
    int128_t v0_3;
    x0_3 = sincos(&var_58, &var_68, (v13 * 0.5));
    v0_3 = var_68;
    double v1_1 = var_58;
    double v7_1 = (v0_3 * v10);
    double v3_1 = (v1_1 * v8);
    double v4_1 = (v0_3 * v9);
    double v16_1 = (v0_3 * v11);
    v0_3 = (v0_3 * v12);
    double v6_1 = ((v1_1 * v9) + v7_1);
    v7_1 = (v3_1 * v9);
    double v17 = (v3_1 * v11);
    double v18 = (v3_1 * v12);
    v3_1 = (v3_1 * v10);
    v0_3 = (v0_3 + v7_1);
    v0_3 = (v3_1 + v0_3);
    v6_1 = ((v17 + v6_1) - v18);
    v3_1 = (((v1_1 * v12) + (v7_1 + v16_1)) - v3_1);
    v0_3 = (v0_3 - (v1_1 * v11));
    v4_1 = (((v4_1 - (v1_1 * v10)) - v17) - v18);
    v1_1 = (v6_1 + v6_1);
    double v5_1 = (v3_1 + v3_1);
    v7_1 = (v0_3 + v0_3);
    v16_1 = (v4_1 * v1_1);
    v1_1 = (v6_1 * v1_1);
    v17 = (v4_1 * v5_1);
    v4_1 = (v4_1 * v7_1);
    v18 = (v6_1 * v5_1);
    v6_1 = (v6_1 * v7_1);
    v5_1 = (v3_1 * v5_1);
    v3_1 = (v3_1 * v7_1);
    v0_3 = (v0_3 * v7_1);
    v7_1 = (v5_1 + v0_3);
    double v19 = (v18 - v4_1);
    double v20 = (v6_1 + v17);
    v4_1 = (v18 + v4_1);
    v0_3 = (v1_1 + v0_3);
    v18 = (v3_1 - v16_1);
    v1_1 = (v1_1 + v5_1);
    v6_1 = (v6_1 - v17);
    v3_1 = (v3_1 + v16_1);
    v5_1 = (1.0 - v7_1);
    v0_3 = (1.0 - v0_3);
    v1_1 = (1.0 - v1_1);
    double v2_1 = (v4_1 * v8);
    v16_1 = (v18 * v8);
    v17 = (v20 * v8);
    v20 = (v20 + v16_1);
    v18 = (v18 + v17);
    v16_1 = (v17 + v16_1);
    v17 = (v5_1 + v2_1);
    v5_1 = (v5_1 * v8);
    v7_1 = (v19 * v8);
    v4_1 = (v4_1 + v5_1);
    v2_1 = (v2_1 + v5_1);
    v5_1 = (v0_3 * v8);
    v0_3 = (v7_1 + v0_3);
    v19 = (v19 + v5_1);
    v5_1 = (v7_1 + v5_1);
    v7_1 = (v1_1 * v8);
    v20 = (v20 + v7_1);
    v7_1 = (v18 + v7_1);
    v18 = (v6_1 * v8);
    v1_1 = (v1_1 + v16_1);
    v16_1 = (v3_1 * v8);
    v0_3 = (v16_1 + v0_3);
    arg4[3] = 0;
    arg4[7] = 0;
    arg4[0xb] = 0;
    arg4[0xf] = 0x3ff0000000000000;
    arg4[8] = v20;
    arg4[9] = v7_1;
    arg4[0xa] = v1_1;
    *arg4 = (v18 + v17);
    arg4[1] = (v18 + v4_1);
    arg4[2] = (v6_1 + v2_1);
    arg4[4] = (v16_1 + v19);
    arg4[5] = v0_3;
    arg4[6] = (v3_1 + v5_1);
    v0_3 = (*arg3 + 0.0);
    *v0_3[8] = (*v0_3[8] + 0.0);
    v1_1 = (arg3[1] + v8);
    *(arg4 + 0x60) = v0_3;
    arg4[0xe] = v1_1;
    return x0_3;
}

int64_t feasibal_region::ground_process::~ground_process(void* arg1)
{
    *(arg1 + 0xab0) = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x18);
    *(arg1 + 0xb60) = (_vtable_for_std::__ndk1::basic_ofstream<char, std::__ndk1::char_traits<char> > + 0x40);
    std::__ndk1::basic_filebuf<char, std::__ndk1::char_traits<char> >::~basic_filebuf();
    std::__ndk1::ios_base::~ios_base();
    int64_t x8_1 = *(arg1 + 0xa68);
    if (x8_1 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_3 = *(arg1 + 0xa34);
    *(arg1 + 0xa68) = 0;
    __builtin_memset((arg1 + 0xa40), 0, 0x20);
    if (x8_3 >= 1)
    {
        int64_t x8_4 = *(arg1 + 0xa70);
        int64_t i_1 = 0;
        do
        {
            *(x8_4 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < *(arg1 + 0xa34));
    }
    void* x0_3 = *(arg1 + 0xa78);
    if (x0_3 != (arg1 + 0xa80))
    {
        cv::fastFree(x0_3);
    }
    void* x0_4 = *(arg1 + 0xa10);
    if (x0_4 != 0)
    {
        *(arg1 + 0xa18) = x0_4;
        operator delete(x0_4);
    }
    void* x0_5 = *(arg1 + 0x9e8);
    if (x0_5 != 0)
    {
        *(arg1 + 0x9f0) = x0_5;
        operator delete(x0_5);
    }
    void* x0_6 = *(arg1 + 0x9b8);
    if (x0_6 != 0)
    {
        *(arg1 + 0x9c0) = x0_6;
        operator delete(x0_6);
    }
    void* x0_7 = *(arg1 + 0x9a0);
    if (x0_7 != 0)
    {
        *(arg1 + 0x9a8) = x0_7;
        operator delete(x0_7);
    }
    void* x0_8 = *(arg1 + 0x988);
    if (x0_8 != 0)
    {
        *(arg1 + 0x990) = x0_8;
        operator delete(x0_8);
    }
    void* x0_9 = *(arg1 + 0x970);
    if (x0_9 != 0)
    {
        *(arg1 + 0x978) = x0_9;
        operator delete(x0_9);
    }
    void* x0_10 = *(arg1 + 0x958);
    if (x0_10 != 0)
    {
        *(arg1 + 0x960) = x0_10;
        operator delete(x0_10);
    }
    int64_t x8_6 = *(arg1 + 0x928);
    if (x8_6 != 0)
    {
        int32_t temp0_3;
        int32_t i_2;
        do
        {
            temp0_3 = __ldaxr((x8_6 + 0x14));
            i_2 = __stlxr((temp0_3 - 1), (x8_6 + 0x14));
        } while (i_2 != 0);
        if (temp0_3 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_8 = *(arg1 + 0x8f4);
    *(arg1 + 0x928) = 0;
    __builtin_memset((arg1 + 0x900), 0, 0x20);
    if (x8_8 >= 1)
    {
        int64_t x8_9 = *(arg1 + 0x930);
        int64_t i_3 = 0;
        do
        {
            *(x8_9 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < *(arg1 + 0x8f4));
    }
    void* x0_12 = *(arg1 + 0x938);
    if (x0_12 != (arg1 + 0x940))
    {
        cv::fastFree(x0_12);
    }
    int64_t x8_11 = *(arg1 + 0x8c8);
    if (x8_11 != 0)
    {
        int32_t temp0_4;
        int32_t i_4;
        do
        {
            temp0_4 = __ldaxr((x8_11 + 0x14));
            i_4 = __stlxr((temp0_4 - 1), (x8_11 + 0x14));
        } while (i_4 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_13 = *(arg1 + 0x894);
    *(arg1 + 0x8c8) = 0;
    __builtin_memset((arg1 + 0x8a0), 0, 0x20);
    if (x8_13 >= 1)
    {
        int64_t x8_14 = *(arg1 + 0x8d0);
        int64_t i_5 = 0;
        do
        {
            *(x8_14 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < *(arg1 + 0x894));
    }
    void* x0_14 = *(arg1 + 0x8d8);
    if (x0_14 != (arg1 + 0x8e0))
    {
        cv::fastFree(x0_14);
    }
    int64_t x8_16 = *(arg1 + 0x860);
    if (x8_16 != 0)
    {
        int32_t temp0_5;
        int32_t i_6;
        do
        {
            temp0_5 = __ldaxr((x8_16 + 0x14));
            i_6 = __stlxr((temp0_5 - 1), (x8_16 + 0x14));
        } while (i_6 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x860) = 0;
    __builtin_memset((arg1 + 0x838), 0, 0x20);
    if (*(arg1 + 0x82c) >= 1)
    {
        int64_t x8_20 = *(arg1 + 0x868);
        int64_t i_7 = 0;
        do
        {
            *(x8_20 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < *(arg1 + 0x82c));
    }
    void* x0_16 = *(arg1 + 0x870);
    if (x0_16 != (arg1 + 0x878))
    {
        cv::fastFree(x0_16);
    }
    int64_t x8_22 = *(arg1 + 0x800);
    if (x8_22 != 0)
    {
        int32_t temp0_6;
        int32_t i_8;
        do
        {
            temp0_6 = __ldaxr((x8_22 + 0x14));
            i_8 = __stlxr((temp0_6 - 1), (x8_22 + 0x14));
        } while (i_8 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x800) = 0;
    __builtin_memset((arg1 + 0x7d8), 0, 0x20);
    if (*(arg1 + 0x7cc) >= 1)
    {
        int64_t x8_26 = *(arg1 + 0x808);
        int64_t i_9 = 0;
        do
        {
            *(x8_26 + (i_9 << 2)) = 0;
            i_9 = (i_9 + 1);
        } while (i_9 < *(arg1 + 0x7cc));
    }
    void* x0_18 = *(arg1 + 0x810);
    if (x0_18 != (arg1 + 0x818))
    {
        cv::fastFree(x0_18);
    }
    int64_t x8_28 = *(arg1 + 0x7a0);
    if (x8_28 != 0)
    {
        int32_t temp0_7;
        int32_t i_10;
        do
        {
            temp0_7 = __ldaxr((x8_28 + 0x14));
            i_10 = __stlxr((temp0_7 - 1), (x8_28 + 0x14));
        } while (i_10 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x7a0) = 0;
    __builtin_memset((arg1 + 0x778), 0, 0x20);
    if (*(arg1 + 0x76c) >= 1)
    {
        int64_t x8_32 = *(arg1 + 0x7a8);
        int64_t i_11 = 0;
        do
        {
            *(x8_32 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < *(arg1 + 0x76c));
    }
    void* x0_20 = *(arg1 + 0x7b0);
    if (x0_20 != (arg1 + 0x7b8))
    {
        cv::fastFree(x0_20);
    }
    void* x0_21 = *(arg1 + 0x750);
    if (x0_21 != 0)
    {
        *(arg1 + 0x758) = x0_21;
        operator delete(x0_21);
    }
    void* x0_22 = *(arg1 + 0x738);
    if (x0_22 != 0)
    {
        *(arg1 + 0x740) = x0_22;
        operator delete(x0_22);
    }
    void* x0_23 = *(arg1 + 0x668);
    if (x0_23 != 0)
    {
        *(arg1 + 0x670) = x0_23;
        operator delete(x0_23);
    }
    int64_t x8_34 = *(arg1 + 0x640);
    if (x8_34 != 0)
    {
        int32_t temp0_8;
        int32_t i_12;
        do
        {
            temp0_8 = __ldaxr((x8_34 + 0x14));
            i_12 = __stlxr((temp0_8 - 1), (x8_34 + 0x14));
        } while (i_12 != 0);
        if (temp0_8 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x640) = 0;
    __builtin_memset((arg1 + 0x618), 0, 0x20);
    if (*(arg1 + 0x60c) >= 1)
    {
        int64_t x8_38 = *(arg1 + 0x648);
        int64_t i_13 = 0;
        do
        {
            *(x8_38 + (i_13 << 2)) = 0;
            i_13 = (i_13 + 1);
        } while (i_13 < *(arg1 + 0x60c));
    }
    void* x0_25 = *(arg1 + 0x650);
    if (x0_25 != (arg1 + 0x658))
    {
        cv::fastFree(x0_25);
    }
    int64_t x8_40 = *(arg1 + 0x5e0);
    if (x8_40 != 0)
    {
        int32_t temp0_9;
        int32_t i_14;
        do
        {
            temp0_9 = __ldaxr((x8_40 + 0x14));
            i_14 = __stlxr((temp0_9 - 1), (x8_40 + 0x14));
        } while (i_14 != 0);
        if (temp0_9 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x5e0) = 0;
    __builtin_memset((arg1 + 0x5b8), 0, 0x20);
    if (*(arg1 + 0x5ac) >= 1)
    {
        int64_t x8_44 = *(arg1 + 0x5e8);
        int64_t i_15 = 0;
        do
        {
            *(x8_44 + (i_15 << 2)) = 0;
            i_15 = (i_15 + 1);
        } while (i_15 < *(arg1 + 0x5ac));
    }
    void* x0_27 = *(arg1 + 0x5f0);
    if (x0_27 != (arg1 + 0x5f8))
    {
        cv::fastFree(x0_27);
    }
    int64_t x8_46 = *(arg1 + 0x580);
    if (x8_46 != 0)
    {
        int32_t temp0_10;
        int32_t i_16;
        do
        {
            temp0_10 = __ldaxr((x8_46 + 0x14));
            i_16 = __stlxr((temp0_10 - 1), (x8_46 + 0x14));
        } while (i_16 != 0);
        if (temp0_10 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x580) = 0;
    __builtin_memset((arg1 + 0x558), 0, 0x20);
    if (*(arg1 + 0x54c) >= 1)
    {
        int64_t x8_50 = *(arg1 + 0x588);
        int64_t i_17 = 0;
        do
        {
            *(x8_50 + (i_17 << 2)) = 0;
            i_17 = (i_17 + 1);
        } while (i_17 < *(arg1 + 0x54c));
    }
    void* x0_29 = *(arg1 + 0x590);
    if (x0_29 != (arg1 + 0x598))
    {
        cv::fastFree(x0_29);
    }
    int64_t x8_52 = *(arg1 + 0x520);
    if (x8_52 != 0)
    {
        int32_t temp0_11;
        int32_t i_18;
        do
        {
            temp0_11 = __ldaxr((x8_52 + 0x14));
            i_18 = __stlxr((temp0_11 - 1), (x8_52 + 0x14));
        } while (i_18 != 0);
        if (temp0_11 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x520) = 0;
    __builtin_memset((arg1 + 0x4f8), 0, 0x20);
    if (*(arg1 + 0x4ec) >= 1)
    {
        int64_t x8_56 = *(arg1 + 0x528);
        int64_t i_19 = 0;
        do
        {
            *(x8_56 + (i_19 << 2)) = 0;
            i_19 = (i_19 + 1);
        } while (i_19 < *(arg1 + 0x4ec));
    }
    void* x0_31 = *(arg1 + 0x530);
    if (x0_31 != (arg1 + 0x538))
    {
        cv::fastFree(x0_31);
    }
    int64_t x8_58 = *(arg1 + 0x4c0);
    if (x8_58 != 0)
    {
        int32_t temp0_12;
        int32_t i_20;
        do
        {
            temp0_12 = __ldaxr((x8_58 + 0x14));
            i_20 = __stlxr((temp0_12 - 1), (x8_58 + 0x14));
        } while (i_20 != 0);
        if (temp0_12 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x4c0) = 0;
    __builtin_memset((arg1 + 0x498), 0, 0x20);
    if (*(arg1 + 0x48c) >= 1)
    {
        int64_t x8_62 = *(arg1 + 0x4c8);
        int64_t i_21 = 0;
        do
        {
            *(x8_62 + (i_21 << 2)) = 0;
            i_21 = (i_21 + 1);
        } while (i_21 < *(arg1 + 0x48c));
    }
    void* x0_33 = *(arg1 + 0x4d0);
    if (x0_33 != (arg1 + 0x4d8))
    {
        cv::fastFree(x0_33);
    }
    int64_t x8_64 = *(arg1 + 0x460);
    if (x8_64 != 0)
    {
        int32_t temp0_13;
        int32_t i_22;
        do
        {
            temp0_13 = __ldaxr((x8_64 + 0x14));
            i_22 = __stlxr((temp0_13 - 1), (x8_64 + 0x14));
        } while (i_22 != 0);
        if (temp0_13 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x460) = 0;
    __builtin_memset((arg1 + 0x438), 0, 0x20);
    if (*(arg1 + 0x42c) >= 1)
    {
        int64_t x8_68 = *(arg1 + 0x468);
        int64_t i_23 = 0;
        do
        {
            *(x8_68 + (i_23 << 2)) = 0;
            i_23 = (i_23 + 1);
        } while (i_23 < *(arg1 + 0x42c));
    }
    void* x0_35 = *(arg1 + 0x470);
    if (x0_35 != (arg1 + 0x478))
    {
        cv::fastFree(x0_35);
    }
    int64_t x8_70 = *(arg1 + 0x400);
    if (x8_70 != 0)
    {
        int32_t temp0_14;
        int32_t i_24;
        do
        {
            temp0_14 = __ldaxr((x8_70 + 0x14));
            i_24 = __stlxr((temp0_14 - 1), (x8_70 + 0x14));
        } while (i_24 != 0);
        if (temp0_14 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x400) = 0;
    __builtin_memset((arg1 + 0x3d8), 0, 0x20);
    if (*(arg1 + 0x3cc) >= 1)
    {
        int64_t x8_74 = *(arg1 + 0x408);
        int64_t i_25 = 0;
        do
        {
            *(x8_74 + (i_25 << 2)) = 0;
            i_25 = (i_25 + 1);
        } while (i_25 < *(arg1 + 0x3cc));
    }
    void* x0_37 = *(arg1 + 0x410);
    if (x0_37 != (arg1 + 0x418))
    {
        cv::fastFree(x0_37);
    }
    int64_t x8_76 = *(arg1 + 0x3a0);
    if (x8_76 != 0)
    {
        int32_t temp0_15;
        int32_t i_26;
        do
        {
            temp0_15 = __ldaxr((x8_76 + 0x14));
            i_26 = __stlxr((temp0_15 - 1), (x8_76 + 0x14));
        } while (i_26 != 0);
        if (temp0_15 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x3a0) = 0;
    __builtin_memset((arg1 + 0x378), 0, 0x20);
    if (*(arg1 + 0x36c) >= 1)
    {
        int64_t x8_80 = *(arg1 + 0x3a8);
        int64_t i_27 = 0;
        do
        {
            *(x8_80 + (i_27 << 2)) = 0;
            i_27 = (i_27 + 1);
        } while (i_27 < *(arg1 + 0x36c));
    }
    void* x0_39 = *(arg1 + 0x3b0);
    if (x0_39 != (arg1 + 0x3b8))
    {
        cv::fastFree(x0_39);
    }
    int64_t x8_82 = *(arg1 + 0x340);
    if (x8_82 != 0)
    {
        int32_t temp0_16;
        int32_t i_28;
        do
        {
            temp0_16 = __ldaxr((x8_82 + 0x14));
            i_28 = __stlxr((temp0_16 - 1), (x8_82 + 0x14));
        } while (i_28 != 0);
        if (temp0_16 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x340) = 0;
    __builtin_memset((arg1 + 0x318), 0, 0x20);
    if (*(arg1 + 0x30c) >= 1)
    {
        int64_t x8_86 = *(arg1 + 0x348);
        int64_t i_29 = 0;
        do
        {
            *(x8_86 + (i_29 << 2)) = 0;
            i_29 = (i_29 + 1);
        } while (i_29 < *(arg1 + 0x30c));
    }
    void* x0_41 = *(arg1 + 0x350);
    if (x0_41 != (arg1 + 0x358))
    {
        cv::fastFree(x0_41);
    }
    int64_t x8_88 = *(arg1 + 0x2e0);
    if (x8_88 != 0)
    {
        int32_t temp0_17;
        int32_t i_30;
        do
        {
            temp0_17 = __ldaxr((x8_88 + 0x14));
            i_30 = __stlxr((temp0_17 - 1), (x8_88 + 0x14));
        } while (i_30 != 0);
        if (temp0_17 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x2e0) = 0;
    __builtin_memset((arg1 + 0x2b8), 0, 0x20);
    if (*(arg1 + 0x2ac) >= 1)
    {
        int64_t x8_92 = *(arg1 + 0x2e8);
        int64_t i_31 = 0;
        do
        {
            *(x8_92 + (i_31 << 2)) = 0;
            i_31 = (i_31 + 1);
        } while (i_31 < *(arg1 + 0x2ac));
    }
    void* x0_43 = *(arg1 + 0x2f0);
    if (x0_43 != (arg1 + 0x2f8))
    {
        cv::fastFree(x0_43);
    }
    int64_t x8_94 = *(arg1 + 0x280);
    if (x8_94 != 0)
    {
        int32_t temp0_18;
        int32_t i_32;
        do
        {
            temp0_18 = __ldaxr((x8_94 + 0x14));
            i_32 = __stlxr((temp0_18 - 1), (x8_94 + 0x14));
        } while (i_32 != 0);
        if (temp0_18 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x280) = 0;
    __builtin_memset((arg1 + 0x258), 0, 0x20);
    if (*(arg1 + 0x24c) >= 1)
    {
        int64_t x8_98 = *(arg1 + 0x288);
        int64_t i_33 = 0;
        do
        {
            *(x8_98 + (i_33 << 2)) = 0;
            i_33 = (i_33 + 1);
        } while (i_33 < *(arg1 + 0x24c));
    }
    void* x0_45 = *(arg1 + 0x290);
    if (x0_45 != (arg1 + 0x298))
    {
        cv::fastFree(x0_45);
    }
    free(*(arg1 + 0x230));
    free(*(arg1 + 0x218));
    void* x20_1 = *(arg1 + 0x200);
    *(arg1 + 0x200) = 0;
    if (x20_1 != 0)
    {
        CAPE::~CAPE();
        operator delete(x20_1);
    }
    /* tailcall */
    return feasibal_region::PreParamInfo::~PreParamInfo();
}

void sub_48d70(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t CAPE::CAPE(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5, char arg6, int32_t arg7 @ v0, int32_t arg8 @ v1)
{
    void tpidr_el0;
    uint64_t x14 = _ReadStatusReg(tpidr_el0);
    int64_t x14_1 = *(x14 + 0x28);
    *(arg1 + 0x20) = {0};
    arg1[0x14] = 0x42ff0004;
    *(arg1 + 0x54) = {0};
    __builtin_memset(&arg1[0x19], 0, 0x2c);
    __builtin_memset(&arg1[0xc], 0, 0x20);
    *(arg1 + 0xa0) = {0};
    __builtin_memset(&arg1[0x31], 0, 0x2c);
    *(arg1 + 0x90) = &arg1[0x16];
    *(arg1 + 0x98) = &arg1[0x28];
    *(arg1 + 0xb4) = {0};
    *(arg1 + 0xf0) = &arg1[0x2e];
    *(arg1 + 0xf8) = &arg1[0x40];
    arg1[0x2c] = 0x42ff0000;
    *(arg1 + 0x100) = {0};
    *(arg1 + 0x124) = {0};
    *(arg1 + 0x140) = {0};
    *(arg1 + 0x134) = {0};
    void* var_2d8 = &arg1[0x58];
    void* var_2d0 = &arg1[0x45];
    *(arg1 + 0x114) = {0};
    arg1[0x44] = 0x42ff0004;
    *(arg1 + 0x150) = &arg1[0x46];
    *(arg1 + 0x158) = &arg1[0x58];
    *(arg1 + 0x160) = {0};
    *(arg1 + 0x1a0) = {0};
    *(arg1 + 0x194) = {0};
    *(arg1 + 0x184) = {0};
    void* var_2e8 = &arg1[0x70];
    void* var_2e0 = &arg1[0x5d];
    *(arg1 + 0x174) = {0};
    *(arg1 + 0x1b0) = &arg1[0x5e];
    *(arg1 + 0x1b8) = &arg1[0x70];
    *(arg1 + 0x1c0) = {0};
    arg1[0x5c] = 0x42ff0000;
    arg1[0x74] = 0x42ff0000;
    __builtin_memset(&arg1[0x79], 0, 0x2c);
    *(arg1 + 0x1d4) = {0};
    *(arg1 + 0x210) = &arg1[0x76];
    *(arg1 + 0x218) = &arg1[0x88];
    *(arg1 + 0x220) = {0};
    arg1[0x8c] = 0x42ff0000;
    __builtin_memset(&arg1[0x8d], 0, 0x3c);
    *(arg1 + 0x270) = &arg1[0x8e];
    *(arg1 + 0x278) = &arg1[0xa0];
    *(arg1 + 0x280) = {0};
    arg1[0xa4] = 0x42ff0000;
    __builtin_memset(&arg1[0xa5], 0, 0x3c);
    *(arg1 + 0x2d0) = &arg1[0xa6];
    void* var_2f8 = &arg1[0xb8];
    void* var_2f0 = &arg1[0xa5];
    *(arg1 + 0x2d8) = &arg1[0xb8];
    *(arg1 + 0x2e0) = {0};
    arg1[0xbc] = 0x42ff0000;
    __builtin_memset(&arg1[0xbd], 0, 0x3c);
    *(arg1 + 0x330) = &arg1[0xbe];
    *(arg1 + 0x338) = &arg1[0xd0];
    *(arg1 + 0x340) = {0};
    arg1[0xd4] = 0x42ff0000;
    __builtin_memset(&arg1[0xd5], 0, 0x3c);
    *(arg1 + 0x390) = &arg1[0xd6];
    *(arg1 + 0x398) = &arg1[0xe8];
    *(arg1 + 0x3a0) = {0};
    arg1[0xec] = 0x42ff0000;
    void* var_308 = &arg1[0xed];
    __builtin_memset(&arg1[0xed], 0, 0x3c);
    *(arg1 + 0x3f0) = &arg1[0xee];
    void* var_300 = &arg1[0x100];
    *(arg1 + 0x3f8) = &arg1[0x100];
    *(arg1 + 0x400) = {0};
    arg1[0x104] = 0x42ff0000;
    void* var_318 = &arg1[0x105];
    __builtin_memset(&arg1[0x105], 0, 0x3c);
    *(arg1 + 0x450) = &arg1[0x106];
    void* var_310 = &arg1[0x118];
    *(arg1 + 0x458) = &arg1[0x118];
    arg1[0x146] = 0;
    arg1[0x147] = 0;
    arg1[0x148] = 0;
    __builtin_memset(&arg1[0x118], 0, 0x20);
    *(arg1 + 0x524) = -0x3c05ffffbb860000;
    arg1[0x14b] = 0x43fa0000;
    *(arg1 + 0x530) = 0;
    arg1[0x14e] = 0x42ff0000;
    void* var_328 = &arg1[0x14f];
    __builtin_memset(&arg1[0x14f], 0, 0x3c);
    *(arg1 + 0x578) = &arg1[0x150];
    *(arg1 + 0x580) = &arg1[0x162];
    void* var_320 = &arg1[0x162];
    *(arg1 + 0x588) = {0};
    arg1[0x166] = 0;
    arg1[0x168] = 0x42ff0000;
    void* var_330 = &arg1[0x169];
    __builtin_memset(&arg1[0x169], 0, 0x3c);
    *(arg1 + 0x5e0) = &arg1[0x16a];
    arg1[0x182] = 0xbf66f4e0;
    arg1[6] = (arg6 & 1);
    void* var_338 = &arg1[0x17c];
    *(arg1 + 0x5e8) = &arg1[0x17c];
    arg1[2] = arg2;
    arg1[3] = arg3;
    *arg1 = arg4;
    arg1[1] = arg5;
    arg1[4] = arg8;
    arg1[5] = arg7;
    void* var_250 = &arg1[0xec];
    void* var_258 = &arg1[0x104];
    int32_t x23_1 = (arg3 / arg4);
    int32_t x26_1 = (arg2 / arg5);
    *(arg1 + 0x5f0) = {0};
    *(arg1 + 0x600) = -0x4123337543d70c56;
    __builtin_memset(&arg1[0x184], 0, 0x18);
    int32_t var_78 = 0;
    void* var_260 = &arg1[0x14e];
    int128_t* var_2c8 = &arg1[8];
    int32_t* var_2c0 = &arg1[0x14];
    int128_t var_1e0;
    int128_t v0;
    int128_t v1;
    v0 = cv::Mat_<int32_t>::Mat_(&var_1e0, x26_1, x23_1);
    int32_t s;
    int128_t var_1b0;
    int64_t var_1a0;
    int64_t* var_198;
    int64_t var_190;
    void* x25_2;
    if (&arg1[0x14] == &var_1e0)
    {
        x25_2 = &arg1[0x2d];
        int64_t var_1a8;
        if (var_1a8 != 0)
        {
            int32_t temp0_2;
            int32_t i;
            do
            {
                temp0_2 = __ldaxr((var_1a8 + 0x14));
                i = __stlxr((temp0_2 - 1), (var_1a8 + 0x14));
            } while (i != 0);
            if (temp0_2 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_45 = *(arg1 + 0x88);
        x25_2 = &arg1[0x2d];
        if (x8_45 != 0)
        {
            int32_t temp0_1;
            int32_t i_1;
            do
            {
                temp0_1 = __ldaxr((x8_45 + 0x14));
                i_1 = __stlxr((temp0_1 - 1), (x8_45 + 0x14));
            } while (i_1 != 0);
            if (temp0_1 == 1)
            {
                v0 = cv::Mat::deallocate();
            }
        }
        v0 = 0;
        *v0[8] = 0;
        int32_t x8_47 = arg1[0x15];
        __builtin_memset(&arg1[0x18], 0, 0x20);
        *(arg1 + 0x88) = 0;
        if (x8_47 >= 1)
        {
            int64_t x8_48 = *(arg1 + 0x90);
            int64_t i_2 = 0;
            do
            {
                *(x8_48 + (i_2 << 2)) = 0;
                i_2 = (i_2 + 1);
            } while (i_2 < arg1[0x15]);
        }
        v0 = var_1e0;
        void* x0_3 = *(arg1 + 0x98);
        *(arg1 + 0x50) = v0;
        int128_t var_1d0;
        *(arg1 + 0x60) = var_1d0;
        int128_t var_1c0;
        *(arg1 + 0x70) = var_1c0;
        *(arg1 + 0x80) = var_1b0;
        int32_t s_7;
        if (x0_3 == &arg1[0x28])
        {
            s_7 = v0;
        }
        else
        {
            cv::fastFree(x0_3);
            *(arg1 + 0x90) = &arg1[0x16];
            *(arg1 + 0x98) = &arg1[0x28];
            s_7 = s;
        }
        if (s_7 > 2)
        {
            *(arg1 + 0x90) = var_1a0;
            var_1a0 = (&var_1e0 | 8);
            var_198 = &var_190;
        }
        else
        {
            *(arg1 + 0xa0) = *var_198;
            *(arg1 + 0xa8) = var_198[1];
        }
        var_1e0 = 0x42ff0000;
        __builtin_memset((&var_1e0 | 4), 0, 0x3c);
    }
    int32_t s_8 = s;
    int64_t var_1a8_1 = 0;
    int128_t s_1;
    __builtin_memset(&s_1, 0, 0x20);
    if (s_8 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(var_1a0 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < s);
    }
    if (var_198 != &var_190)
    {
        cv::fastFree(var_198);
    }
    var_78 = 0;
    int128_t v0_1;
    int128_t s_19;
    v0_1 = cv::Mat_<uint8_t>::Mat_(&var_1e0, x26_1, x23_1);
    void* x25_3;
    if (&arg1[0x2c] == &var_1e0)
    {
        x25_3 = &arg1[0xe];
        if (var_1a8_1 != 0)
        {
            int32_t temp0_5;
            int32_t i_4;
            do
            {
                temp0_5 = __ldaxr((var_1a8_1 + 0x14));
                i_4 = __stlxr((temp0_5 - 1), (var_1a8_1 + 0x14));
            } while (i_4 != 0);
            if (temp0_5 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    else
    {
        int64_t x8_56 = *(arg1 + 0xe8);
        if (x8_56 != 0)
        {
            int32_t temp0_4;
            int32_t i_5;
            do
            {
                temp0_4 = __ldaxr((x8_56 + 0x14));
                i_5 = __stlxr((temp0_4 - 1), (x8_56 + 0x14));
            } while (i_5 != 0);
            if (temp0_4 == 1)
            {
                v0_1 = cv::Mat::deallocate();
            }
        }
        int32_t x8_58 = arg1[0x2d];
        v0_1 = 0;
        *v0_1[8] = 0;
        *(arg1 + 0xe8) = 0;
        __builtin_memset(&arg1[0x30], 0, 0x20);
        if (x8_58 >= 1)
        {
            int64_t x8_59 = *(arg1 + 0xf0);
            int64_t i_6 = 0;
            do
            {
                *(x8_59 + (i_6 << 2)) = 0;
                i_6 = (i_6 + 1);
            } while (i_6 < *x25_2);
        }
        v0_1 = var_1e0;
        s_19 = s_1;
        void* x0_7 = *(arg1 + 0xf8);
        *(arg1 + 0xb0) = v0_1;
        *(arg1 + 0xc0) = s_19;
        int128_t var_1c0_1;
        *(arg1 + 0xd0) = var_1c0_1;
        *(arg1 + 0xe0) = var_1b0;
        int32_t s_9;
        if (x0_7 == &arg1[0x40])
        {
            s_9 = v0_1;
        }
        else
        {
            cv::fastFree(x0_7);
            *(arg1 + 0xf0) = &arg1[0x2e];
            *(arg1 + 0xf8) = &arg1[0x40];
            s_9 = s;
        }
        x25_3 = &arg1[0xe];
        if (s_9 > 2)
        {
            *(arg1 + 0xf0) = var_1a0;
            var_1a0 = (&var_1e0 | 8);
            var_198 = &var_190;
        }
        else
        {
            *(arg1 + 0x100) = *var_198;
            *(arg1 + 0x108) = var_198[1];
        }
        var_1e0 = 0x42ff0000;
        __builtin_memset((&var_1e0 | 4), 0, 0x3c);
    }
    int32_t s_10 = s;
    int64_t var_1a8_2 = 0;
    int128_t s_2;
    __builtin_memset(&s_2, 0, 0x20);
    if (s_10 >= 1)
    {
        int64_t i_7 = 0;
        do
        {
            *(var_1a0 + (i_7 << 2)) = 0;
            i_7 = (i_7 + 1);
        } while (i_7 < s);
    }
    if (var_198 != &var_190)
    {
        cv::fastFree(var_198);
    }
    var_1e0 = 0x42ff0000;
    int64_t x28_2 = (&var_1e0 | 8);
    var_78 = x26_1;
    int32_t var_74 = x23_1;
    __builtin_memset(&s, 0, 0x3c);
    int64_t var_1a0_1 = x28_2;
    int64_t* var_198_1 = &var_190;
    var_190 = 0;
    int64_t var_188 = 0;
    int128_t v0_2;
    int128_t s_20;
    v0_2 = cv::Mat::create(&var_1e0, &*nullptr->ident.signature[2], &var_78);
    if (&arg1[0x74] != &var_1e0)
    {
        int64_t x8_67 = *(arg1 + 0x208);
        if (x8_67 != 0)
        {
            int32_t temp0_6;
            int32_t i_8;
            do
            {
                temp0_6 = __ldaxr((x8_67 + 0x14));
                i_8 = __stlxr((temp0_6 - 1), (x8_67 + 0x14));
            } while (i_8 != 0);
            if (temp0_6 == 1)
            {
                v0_2 = cv::Mat::deallocate();
            }
        }
        v0_2 = 0;
        *v0_2[8] = 0;
        int32_t x8_69 = arg1[0x75];
        __builtin_memset(&arg1[0x78], 0, 0x20);
        *(arg1 + 0x208) = 0;
        if (x8_69 >= 1)
        {
            int64_t x8_70 = *(arg1 + 0x210);
            int64_t i_9 = 0;
            do
            {
                *(x8_70 + (i_9 << 2)) = 0;
                i_9 = (i_9 + 1);
            } while (i_9 < arg1[0x75]);
        }
        v0_2 = var_1e0;
        s_20 = s_2;
        void* x0_11 = *(arg1 + 0x218);
        *(arg1 + 0x1d0) = v0_2;
        *(arg1 + 0x1e0) = s_20;
        int128_t var_1c0_2;
        *(arg1 + 0x1f0) = var_1c0_2;
        int128_t var_1b0_1;
        *(arg1 + 0x200) = var_1b0_1;
        int32_t s_11;
        if (x0_11 == &arg1[0x88])
        {
            s_11 = v0_2;
        }
        else
        {
            cv::fastFree(x0_11);
            *(arg1 + 0x218) = &arg1[0x88];
            *(arg1 + 0x210) = &arg1[0x76];
            s_11 = s;
        }
        if (s_11 > 2)
        {
            *(arg1 + 0x210) = var_1a0_1;
            var_1a0_1 = x28_2;
            var_198_1 = &var_190;
        }
        else
        {
            *(arg1 + 0x220) = *var_198_1;
            *(arg1 + 0x228) = var_198_1[1];
        }
        var_1e0 = 0x42ff0000;
        __builtin_memset((&var_1e0 | 4), 0, 0x3c);
    }
    else if (var_1a8_2 != 0)
    {
        int32_t temp0_7;
        int32_t i_10;
        do
        {
            temp0_7 = __ldaxr((var_1a8_2 + 0x14));
            i_10 = __stlxr((temp0_7 - 1), (var_1a8_2 + 0x14));
        } while (i_10 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t s_12 = s;
    int64_t var_1a8_3 = 0;
    int128_t s_3;
    __builtin_memset(&s_3, 0, 0x20);
    if (s_12 >= 1)
    {
        int64_t i_11 = 0;
        do
        {
            *(var_1a0_1 + (i_11 << 2)) = 0;
            i_11 = (i_11 + 1);
        } while (i_11 < s);
    }
    if (var_198_1 != &var_190)
    {
        cv::fastFree(var_198_1);
    }
    var_1e0 = 0x42ff0000;
    int64_t x28_3 = (&var_1e0 | 8);
    var_78 = x26_1;
    int32_t var_74_1 = x23_1;
    __builtin_memset(&s, 0, 0x3c);
    int64_t var_1a0_2 = x28_3;
    int64_t* var_198_2 = &var_190;
    var_190 = 0;
    int64_t var_188_1 = 0;
    int128_t v0_3;
    int128_t s_21;
    v0_3 = cv::Mat::create(&var_1e0, &*nullptr->ident.signature[2], &var_78);
    if (&arg1[0x8c] != &var_1e0)
    {
        int64_t x8_79 = *(arg1 + 0x268);
        if (x8_79 != 0)
        {
            int32_t temp0_8;
            int32_t i_12;
            do
            {
                temp0_8 = __ldaxr((x8_79 + 0x14));
                i_12 = __stlxr((temp0_8 - 1), (x8_79 + 0x14));
            } while (i_12 != 0);
            if (temp0_8 == 1)
            {
                v0_3 = cv::Mat::deallocate();
            }
        }
        v0_3 = 0;
        *v0_3[8] = 0;
        int32_t x8_81 = arg1[0x8d];
        __builtin_memset(&arg1[0x90], 0, 0x20);
        *(arg1 + 0x268) = 0;
        if (x8_81 >= 1)
        {
            int64_t x8_82 = *(arg1 + 0x270);
            int64_t i_13 = 0;
            do
            {
                *(x8_82 + (i_13 << 2)) = 0;
                i_13 = (i_13 + 1);
            } while (i_13 < arg1[0x8d]);
        }
        v0_3 = var_1e0;
        s_21 = s_3;
        void* x0_15 = *(arg1 + 0x278);
        *(arg1 + 0x230) = v0_3;
        *(arg1 + 0x240) = s_21;
        int128_t var_1c0_3;
        *(arg1 + 0x250) = var_1c0_3;
        int128_t var_1b0_2;
        *(arg1 + 0x260) = var_1b0_2;
        int32_t s_13;
        if (x0_15 == &arg1[0xa0])
        {
            s_13 = v0_3;
        }
        else
        {
            cv::fastFree(x0_15);
            *(arg1 + 0x278) = &arg1[0xa0];
            *(arg1 + 0x270) = &arg1[0x8e];
            s_13 = s;
        }
        if (s_13 > 2)
        {
            *(arg1 + 0x270) = var_1a0_2;
            var_1a0_2 = x28_3;
            var_198_2 = &var_190;
        }
        else
        {
            *(arg1 + 0x280) = *var_198_2;
            *(arg1 + 0x288) = var_198_2[1];
        }
        var_1e0 = 0x42ff0000;
        __builtin_memset((&var_1e0 | 4), 0, 0x3c);
    }
    else if (var_1a8_3 != 0)
    {
        int32_t temp0_9;
        int32_t i_14;
        do
        {
            temp0_9 = __ldaxr((var_1a8_3 + 0x14));
            i_14 = __stlxr((temp0_9 - 1), (var_1a8_3 + 0x14));
        } while (i_14 != 0);
        if (temp0_9 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t s_14 = s;
    int64_t var_1a8_4 = 0;
    int128_t s_4;
    __builtin_memset(&s_4, 0, 0x20);
    if (s_14 >= 1)
    {
        int64_t i_15 = 0;
        do
        {
            *(var_1a0_2 + (i_15 << 2)) = 0;
            i_15 = (i_15 + 1);
        } while (i_15 < s);
    }
    if (var_198_2 != &var_190)
    {
        cv::fastFree(var_198_2);
    }
    var_1e0 = 0x42ff0000;
    int64_t x28_4 = (&var_1e0 | 8);
    var_78 = x26_1;
    int32_t var_74_2 = x23_1;
    __builtin_memset(&s, 0, 0x3c);
    int64_t var_1a0_3 = x28_4;
    int64_t* var_198_3 = &var_190;
    var_190 = 0;
    int64_t var_188_2 = 0;
    int128_t v0_4;
    int128_t s_22;
    v0_4 = cv::Mat::create(&var_1e0, &*nullptr->ident.signature[2], &var_78);
    if (&arg1[0xbc] != &var_1e0)
    {
        int64_t x8_91 = *(arg1 + 0x328);
        if (x8_91 != 0)
        {
            int32_t temp0_10;
            int32_t i_16;
            do
            {
                temp0_10 = __ldaxr((x8_91 + 0x14));
                i_16 = __stlxr((temp0_10 - 1), (x8_91 + 0x14));
            } while (i_16 != 0);
            if (temp0_10 == 1)
            {
                v0_4 = cv::Mat::deallocate();
            }
        }
        int32_t x8_93 = arg1[0xbd];
        v0_4 = 0;
        *v0_4[8] = 0;
        *(arg1 + 0x328) = 0;
        __builtin_memset(&arg1[0xc0], 0, 0x20);
        if (x8_93 >= 1)
        {
            int64_t x8_94 = *(arg1 + 0x330);
            int64_t i_17 = 0;
            do
            {
                *(x8_94 + (i_17 << 2)) = 0;
                i_17 = (i_17 + 1);
            } while (i_17 < arg1[0xbd]);
        }
        v0_4 = var_1e0;
        s_22 = s_4;
        void* x0_19 = *(arg1 + 0x338);
        *(arg1 + 0x2f0) = v0_4;
        *(arg1 + 0x300) = s_22;
        int128_t var_1c0_4;
        *(arg1 + 0x310) = var_1c0_4;
        int128_t var_1b0_3;
        *(arg1 + 0x320) = var_1b0_3;
        int32_t s_15;
        if (x0_19 == &arg1[0xd0])
        {
            s_15 = v0_4;
        }
        else
        {
            cv::fastFree(x0_19);
            *(arg1 + 0x338) = &arg1[0xd0];
            *(arg1 + 0x330) = &arg1[0xbe];
            s_15 = s;
        }
        if (s_15 > 2)
        {
            *(arg1 + 0x330) = var_1a0_3;
            var_1a0_3 = x28_4;
            var_198_3 = &var_190;
        }
        else
        {
            *(arg1 + 0x340) = *var_198_3;
            *(arg1 + 0x348) = var_198_3[1];
        }
        var_1e0 = 0x42ff0000;
        __builtin_memset((&var_1e0 | 4), 0, 0x3c);
    }
    else if (var_1a8_4 != 0)
    {
        int32_t temp0_11;
        int32_t i_18;
        do
        {
            temp0_11 = __ldaxr((var_1a8_4 + 0x14));
            i_18 = __stlxr((temp0_11 - 1), (var_1a8_4 + 0x14));
        } while (i_18 != 0);
        if (temp0_11 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t s_16 = s;
    int64_t var_1a8_5 = 0;
    int128_t s_5;
    __builtin_memset(&s_5, 0, 0x20);
    if (s_16 >= 1)
    {
        int64_t i_19 = 0;
        do
        {
            *(var_1a0_3 + (i_19 << 2)) = 0;
            i_19 = (i_19 + 1);
        } while (i_19 < s);
    }
    if (var_198_3 != &var_190)
    {
        cv::fastFree(var_198_3);
    }
    var_1e0 = 0x42ff0000;
    int64_t x28_5 = (&var_1e0 | 8);
    var_78 = x26_1;
    int32_t var_74_3 = x23_1;
    __builtin_memset(&s, 0, 0x3c);
    int64_t var_1a0_4 = x28_5;
    int64_t* var_198_4 = &var_190;
    var_190 = 0;
    int64_t var_188_3 = 0;
    int128_t v0_5;
    int128_t s_23;
    v0_5 = cv::Mat::create(&var_1e0, &*nullptr->ident.signature[2], &var_78);
    if (&arg1[0xd4] != &var_1e0)
    {
        int64_t x8_103 = *(arg1 + 0x388);
        if (x8_103 != 0)
        {
            int32_t temp0_12;
            int32_t i_20;
            do
            {
                temp0_12 = __ldaxr((x8_103 + 0x14));
                i_20 = __stlxr((temp0_12 - 1), (x8_103 + 0x14));
            } while (i_20 != 0);
            if (temp0_12 == 1)
            {
                v0_5 = cv::Mat::deallocate();
            }
        }
        int32_t x8_105 = arg1[0xd5];
        v0_5 = 0;
        *v0_5[8] = 0;
        *(arg1 + 0x388) = 0;
        __builtin_memset(&arg1[0xd8], 0, 0x20);
        if (x8_105 >= 1)
        {
            int64_t x8_106 = *(arg1 + 0x390);
            int64_t i_21 = 0;
            do
            {
                *(x8_106 + (i_21 << 2)) = 0;
                i_21 = (i_21 + 1);
            } while (i_21 < arg1[0xd5]);
        }
        v0_5 = var_1e0;
        s_23 = s_5;
        void* x0_23 = *(arg1 + 0x398);
        *(arg1 + 0x350) = v0_5;
        *(arg1 + 0x360) = s_23;
        int128_t var_1c0_5;
        *(arg1 + 0x370) = var_1c0_5;
        int128_t var_1b0_4;
        *(arg1 + 0x380) = var_1b0_4;
        int32_t s_17;
        if (x0_23 == &arg1[0xe8])
        {
            s_17 = v0_5;
        }
        else
        {
            cv::fastFree(x0_23);
            *(arg1 + 0x398) = &arg1[0xe8];
            *(arg1 + 0x390) = &arg1[0xd6];
            s_17 = s;
        }
        if (s_17 > 2)
        {
            *(arg1 + 0x390) = var_1a0_4;
            var_1a0_4 = x28_5;
            var_198_4 = &var_190;
        }
        else
        {
            *(arg1 + 0x3a0) = *var_198_4;
            *(arg1 + 0x3a8) = var_198_4[1];
        }
        var_1e0 = 0x42ff0000;
        __builtin_memset((&var_1e0 | 4), 0, 0x3c);
    }
    else if (var_1a8_5 != 0)
    {
        int32_t temp0_13;
        int32_t i_22;
        do
        {
            temp0_13 = __ldaxr((var_1a8_5 + 0x14));
            i_22 = __stlxr((temp0_13 - 1), (var_1a8_5 + 0x14));
        } while (i_22 != 0);
        if (temp0_13 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t s_18 = s;
    int64_t var_1a8_6 = 0;
    int128_t s_6;
    __builtin_memset(&s_6, 0, 0x20);
    if (s_18 >= 1)
    {
        int64_t i_23 = 0;
        do
        {
            *(var_1a0_4 + (i_23 << 2)) = 0;
            i_23 = (i_23 + 1);
        } while (i_23 < s);
    }
    if (var_198_4 != &var_190)
    {
        cv::fastFree(var_198_4);
    }
    int32_t x24_1 = (x26_1 * x23_1);
    if (x24_1 >= 1)
    {
        int32_t x27_1 = 0;
        do
        {
            void** x0_25 = operator new(0xc0);
            x0_25[1] = 0;
            x0_25[2] = 0;
            *x0_25 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<PlaneSeg, std::__ndk1::allocator<PlaneSeg> > + 0x10);
            __builtin_memset(&x0_25[0xf], 0, 0x48);
            var_1e0 = &x0_25[3];
            int64_t* x8_114 = *(arg1 + 0x40);
            if (x8_114 < *(arg1 + 0x48))
            {
                *x8_114 = &x0_25[3];
                x8_114[1] = x0_25;
                var_1e0 = 0;
                int64_t var_1d8_2 = 0;
                *(arg1 + 0x40) = &x8_114[2];
            }
            else
            {
                std::__ndk1::vector<std::__ndk1::shared_ptr<PlaneSeg>, std::__ndk1::allocator<std::__ndk1::shared_ptr<PlaneSeg> > >::__push_back_slow_path<std::__ndk1::shared_ptr<PlaneSeg> >(x25_3);
                if (x0_25 != 0)
                {
                    int64_t x9_43;
                    int32_t i_24;
                    do
                    {
                        x9_43 = __ldaxr(&x0_25[1]);
                        i_24 = __stlxr((x9_43 - 1), &x0_25[1]);
                    } while (i_24 != 0);
                    if (x9_43 == 0)
                    {
                        *(*x0_25 + 0x10)(x0_25);
                        std::__ndk1::__shared_weak_count::__release_weak();
                    }
                }
            }
            x27_1 = (x27_1 + 1);
        } while (x27_1 < x24_1);
    }
    Eigen::PlainObjectBase<Eigen::Array<float, -1, 1, 0, -1, 1> >::resize(&arg1[0x11c], (arg5 * arg4));
    int64_t x8_121 = *(arg1 + 0x478);
    int64_t x9_46;
    if (x8_121 < 0)
    {
        x9_46 = (x8_121 + 3);
    }
    else
    {
        x9_46 = x8_121;
    }
    int64_t x10_35 = (x9_46 & 0xfffffffffffffffc);
    if (x8_121 >= 4)
    {
        int64_t x11_6 = 0;
        int64_t x12_2 = 0;
        do
        {
            x12_2 = (x12_2 + 4);
            int64_t* x13_3 = (*(arg1 + 0x470) + x11_6);
            x11_6 = (x11_6 + 0x10);
            *x13_3 = 0;
            x13_3[1] = 0;
        } while (x12_2 < x10_35);
    }
    if (x10_35 < x8_121)
    {
        memset((*(arg1 + 0x470) + (x10_35 << 2)), 0, ((x8_121 << 2) - ((x9_46 >> 2) << 4)));
    }
    int64_t x20_3 = x24_1;
    *(arg1 + 0x480) = malloc((arg3 * arg2));
    *(arg1 + 0x488) = malloc(x20_3);
    *(arg1 + 0x490) = malloc(x20_3);
    cv::Mat::ones(3, 3, 0);
    *(*var_1e0 + 0x18)();
    cv::MatExpr::~MatExpr();
    cv::Mat::ones(3, 3, 0);
    *(*var_1e0 + 0x18)();
    cv::MatExpr::~MatExpr();
    **(arg1 + 0x420) = 0;
    *((*(arg1 + 0x420) + (**(arg1 + 0x458) << 1)) + 2) = 0;
    *(*(arg1 + 0x420) + 2) = 0;
    *(arg1 + 0x420)[(**(arg1 + 0x458) << 1)] = 0;
    int64_t x0_39 = operator new(0x40);
    Histogram::Histogram(x0_39);
    void* x24_2 = *(arg1 + 0x530);
    *(arg1 + 0x530) = x0_39;
    if (x24_2 != 0)
    {
        Histogram::~Histogram();
        operator delete(x24_2);
    }
    cv::Mat::zeros(x26_1, x23_1, 0x1d);
    *(*var_1e0 + 0x18)();
    int64_t x0_44 = cv::MatExpr::~MatExpr();
    if (*(x14 + 0x28) != x14_1)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_44;
}

int64_t cv::Mat_<int32_t>::Mat_(int32_t* arg1, int32_t arg2, int32_t arg3, int32_t* arg4)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    *arg1 = 0x42ff0000;
    *(arg1 + 4) = {0};
    __builtin_memset(&arg1[5], 0, 0x2c);
    *(arg1 + 0x50) = 0;
    *(arg1 + 0x58) = 0;
    *(arg1 + 0x40) = &arg1[2];
    *(arg1 + 0x48) = &arg1[0x14];
    int32_t var_68 = arg2;
    int32_t var_64 = arg3;
    cv::Mat::create(arg1, &*nullptr->ident.signature[2], &var_68);
    int64_t v0;
    v0 = *arg4;
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    /* unimplemented  {sxtl v0.2d, v0.2s} */;
    /* unimplemented  {scvtf d0, d0} */;
    var_68 = v0;
    int64_t x0_1 = cv::Mat::operator=(arg1);
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

void CAPE::set_extrinsic(void* arg1, int32_t* arg2, int32_t* arg3)
{
    *(arg1 + 0x518) = 1;
    *(arg1 + 0x498) = *arg2;
    *(arg1 + 0x49c) = arg2[1];
    *(arg1 + 0x4a0) = arg2[2];
    *(arg1 + 0x4a4) = arg2[3];
    *(arg1 + 0x4a8) = arg2[4];
    *(arg1 + 0x4ac) = arg2[5];
    *(arg1 + 0x4b0) = arg2[6];
    *(arg1 + 0x4b4) = arg2[7];
    *(arg1 + 0x4b8) = arg2[8];
    *(arg1 + 0x4bc) = arg2[9];
    *(arg1 + 0x4c0) = arg2[0xa];
    *(arg1 + 0x4c4) = arg2[0xb];
    *(arg1 + 0x4c8) = arg2[0xc];
    *(arg1 + 0x4cc) = arg2[0xd];
    *(arg1 + 0x4d0) = arg2[0xe];
    *(arg1 + 0x4d4) = arg2[0xf];
    *(arg1 + 0x520) = *arg3;
    *(arg1 + 0x524) = arg3[1];
    *(arg1 + 0x528) = arg3[2];
    *(arg1 + 0x52c) = arg3[3];
}

void CAPE::updateDefaultPlane(void* arg1, int32_t* arg2, int32_t arg3 @ v0)
{
    *(arg1 + 0x600) = *arg2;
    *(arg1 + 0x604) = arg2[1];
    int32_t x8_1 = arg2[2];
    *(arg1 + 0x51c) = arg3;
    *(arg1 + 0x608) = x8_1;
}

void* CAPE::process_modify_opt(int32_t* arg1, int64_t* arg2, int32_t* arg3, int64_t arg4, uint64_t arg5, int64_t arg6, uint64_t arg7, int128_t* arg8 @ x8, int128_t arg9 @ v8, int64_t arg10 @ v13)
{
    int64_t v15;
    int64_t var_a0 = v15;
    int64_t v14;
    int64_t var_98 = v14;
    int64_t var_90 = arg10;
    int64_t v12;
    int64_t var_88 = v12;
    int64_t v11;
    int64_t var_80 = v11;
    double v10;
    double var_78 = v10;
    double v9;
    double var_70 = v9;
    int64_t var_68 = arg9;
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int32_t* x24 = arg1;
    int32_t x25 = *arg1;
    int32_t x27 = arg1[1];
    int128_t s_23;
    __builtin_memset(&s_23, 0, 0x20);
    int32_t k_2 = (arg1[3] / x25);
    uint64_t x8_2 = (arg1[2] / x27);
    int32_t i_27 = (x8_2 * k_2);
    cv::Mat::operator=(&arg1[0x14]);
    void* x0_1 = &x24[0x2c];
    __builtin_memset(&s_23, 0, 0x20);
    cv::Mat::operator=(x0_1);
    __builtin_memset(&s_23, 0, 0x20);
    cv::Mat::operator=(&x24[0x44]);
    __builtin_memset(&s_23, 0, 0x20);
    cv::Mat::operator=(&x24[0x5c]);
    memset(*(x24 + 0x480), 0, (x24[3] * x24[2]));
    int64_t i_25 = i_27;
    void* s_21;
    __builtin_memset(&s_21, 0, 0x18);
    int16_t var_7b0;
    int32_t* var_7a8;
    void* s_12;
    char* var_3b8;
    int64_t* s_13;
    void* var_388;
    void* s_14;
    int64_t* s_16;
    int64_t* s_17;
    void* s_19;
    void* s_20;
    void* var_290;
    void* var_288;
    if (i_27 != 0)
    {
        if ((i_25 & 0x80000000) != 0)
        {
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        label_4db40:
            std::__ndk1::__vector_base_common<true>::__throw_length_error();
        label_4db48:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_4db50:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_4db58:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_4db60:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_4db68:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_4db70:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_4db78:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_4db80:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_4db88:
            int64_t x0_248 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            void* x0_249 = var_290;
            void* s_36;
            if (x0_249 != 0)
            {
                var_288 = x0_249;
                operator delete(x0_249);
                s_36 = s_12;
            }
            else
            {
                s_36 = s_12;
            }
            if (((x0_249 != 0 && s_36 != 0) || (x0_249 == 0 && s_36 != 0)))
            {
                void* s_50 = s_36;
                operator delete(s_36);
            }
            free(var_3b8);
            int64_t* s_47 = s_13;
            if (s_47 != 0)
            {
                void* x22_23 = var_388;
                int64_t* s_37;
                if (x22_23 == s_47)
                {
                    s_37 = s_47;
                }
                else
                {
                    do
                    {
                        int64_t* x20_19 = *(x22_23 - 8);
                        x22_23 = (x22_23 - 0x10);
                        if (x20_19 != 0)
                        {
                            int64_t x9_101;
                            int32_t i;
                            do
                            {
                                x9_101 = __ldaxr(&x20_19[1]);
                                i = __stlxr((x9_101 - 1), &x20_19[1]);
                            } while (i != 0);
                            if (x9_101 == 0)
                            {
                                *(*x20_19 + 0x10)(x20_19);
                                std::__ndk1::__shared_weak_count::__release_weak();
                                if (x22_23 == s_47)
                                {
                                    break;
                                }
                                continue;
                            }
                        }
                    } while (x22_23 != s_47);
                    s_37 = s_13;
                }
                int64_t* s_52 = s_47;
                operator delete(s_37);
            }
            void* s_38 = s_14;
            if (s_38 != 0)
            {
                void* s_54 = s_38;
                operator delete(s_38);
            }
            int64_t* s_39 = s_16;
            if (s_39 != 0)
            {
                operator delete(s_39);
            }
            free(s_17);
            void* s_40 = s_19;
            if (s_40 != 0)
            {
                void* s_57 = s_40;
                operator delete(s_40);
            }
            void* s_42 = s_20;
            void* s_41;
            if (s_42 != 0)
            {
                while (true)
                {
                    void* s_59 = s_42;
                    operator delete(s_42);
                    s_41 = s_21;
                    if (s_41 != 0)
                    {
                        break;
                    }
                label_4e360:
                    s_42 = _Unwind_Resume(x0_248);
                }
            }
            else
            {
                s_41 = s_21;
                if (s_41 == 0)
                {
                    goto label_4e360;
                }
            }
            operator delete(s_41);
            void* x0_256;
            int32_t x1_51;
            int32_t x2_42;
            int64_t x3_5;
            int64_t x4_4;
            int64_t* x5_15;
            int64_t* x6;
            int32_t x7_2;
            int128_t v0_21;
            x0_256 = _Unwind_Resume(x0_248);
            /* tailcall */
            return CAPE::RegionGrowing(x0_256, x1_51, x2_42, x3_5, x4_4, x5_15, x6, x7_2, v0_21, arg9, var_7b0, var_7a8);
        }
        uint64_t x19 = ((i_25 - 1) >> 6);
        void* s_24 = operator new(((x19 + 1) << 3));
        uint64_t x22_1 = ((i_25 >> 6) << 3);
        uint64_t x9_2;
        if (i_25 < 0x41)
        {
            x9_2 = 0;
        }
        else
        {
            x9_2 = x19;
        }
        s_21 = s_24;
        int64_t var_298_1 = (x19 + 1);
        int64_t i_26 = i_25;
        *(s_24 + (x9_2 << 3)) = 0;
        memset(s_24, 0, x22_1);
        int64_t x8_6 = (i_25 & 0x3f);
        if (x8_6 != 0)
        {
            *(s_24 + x22_1) = (*(s_24 + x22_1) & !((-1 >> -(x8_6))));
        }
    }
    int64_t var_c8 = 0;
    int64_t var_c0_1 = 0;
    __builtin_memset(&s_20, 0, 0x18);
    if (i_25 != 0)
    {
        void* s_25 = operator new(i_25);
        void* x19_1 = (s_25 + i_25);
        s_20 = s_25;
        void* var_2b0_1 = x19_1;
        memset(s_25, 1, i_25);
        void* var_2b8_1 = x19_1;
    }
    int64_t var_2d0;
    int128_t v0_1;
    int128_t v2_1;
    v0_1 = gettimeofday(&var_2d0, 0);
    __builtin_memset(&s_19, 0, 0x18);
    if (i_25 != 0)
    {
        void* s_26;
        s_26 = operator new((i_25 << 2));
        void* x8_10 = (s_26 + (i_25 << 2));
        void* s_60 = s_26;
        int64_t i_21 = i_25;
        void* s_55 = s_26;
        s_19 = s_26;
        void* var_2e8_1 = x8_10;
        int64_t i_24;
        if (i_25 >= 8)
        {
            i_24 = (i_25 & 0xfffffffffffffff8);
            int128_t* x12_1 = (s_26 + 0x10);
            s_60 = (s_26 + (i_24 << 2));
            i_21 = (i_25 - i_24);
            v0_1 = 0x3f800000;
            *v0_1[4] = 0x3f800000;
            *v0_1[8] = 0x3f800000;
            *v0_1[0xc] = 0x3f800000;
            int64_t i_22 = i_24;
            int64_t i_1;
            do
            {
                x12_1[-1] = v0_1;
                *x12_1 = v0_1;
                i_1 = i_22;
                i_22 = (i_22 - 8);
                x12_1 = &x12_1[2];
            } while (i_1 != 8);
        }
        if ((i_25 < 8 || (i_25 >= 8 && i_24 != i_25)))
        {
            int64_t i_2;
            do
            {
                i_2 = i_21;
                i_21 = (i_21 - 1);
                *s_60 = 0x3f800000;
                s_60 = (s_60 + 4);
            } while (i_2 != 1);
        }
        void* var_2f0_1 = x8_10;
    }
    uint64_t var_798_1 = x23;
    int32_t* var_6e8_1 = x24;
    if (x8_2 >= 1)
    {
        v0_1 = x24[5];
        int32_t x9_4 = (x27 * x25);
        v0_1 = v0_1;
        v0_1 = (v0_1 * v0_1);
        v2_1 = data_54fb0;
        v0_1 = (1.0 - v0_1);
        v0_1 = vsqrt_f64(v0_1);
        int64_t i_3 = 0;
        int64_t x23_1 = 0;
        arg9 = 0f;
        v9 = 0x3f800000;
        int64_t x28 = ((x9_4 << 0x20) >> 0x1e);
        v10 = v0_1;
        v11 = 0x41a00000;
        do
        {
            if (k_2 >= 1)
            {
                int64_t x26_1 = 0;
                int64_t x24_1 = 0;
                int64_t j = 0;
                int64_t x20_2 = (x23_1 << 4);
                int64_t x22_2 = (x28 * x23_1);
                do
                {
                    *((*(var_6e8_1 + 0x548) + (i_3 * **(var_6e8_1 + 0x580))) + x24_1) = v2_1;
                    *var_6e8_1;
                    PlaneSeg::updatePlaneSeg(*((*(var_6e8_1 + 0x38) + x20_2) + x24_1), arg2, (x23_1 + j), x9_4);
                    int32_t* x8_26 = *((*(var_6e8_1 + 0x38) + x20_2) + x24_1);
                    if (*x8_26 >= 1)
                    {
                        int32_t x8_27 = x8_26[0xd];
                        if (x8_26[0x10] != 0)
                        {
                            v0_1 = 0x3f800000;
                        }
                        else
                        {
                            v0_1 = arg9;
                        }
                        int64_t* x9_10 = ((*(var_6e8_1 + 0x548) + (i_3 * **(var_6e8_1 + 0x580))) + x24_1);
                        *x9_10 = *(x8_26 + 0x2c);
                        x9_10[1] = x8_27;
                        *(x9_10 + 0xc) = v0_1;
                        x8_26 = *((*(var_6e8_1 + 0x38) + x20_2) + x24_1);
                    }
                    if (x8_26[0x10] != 0)
                    {
                        void* x8_31 = *arg2;
                        int64_t x9_12 = arg2[1];
                        void* x11_2 = (x8_31 + (x9_12 << 2));
                        void* x9_13 = (x8_31 + (x9_12 << 3));
                        v0_1 = *((x8_31 + (-4 + (x28 * (x23_1 + 1)))) + x26_1);
                        v0_1 = (v0_1 - *((x8_31 + x22_2) + x26_1));
                        float v1_1 = (*((x11_2 + (-4 + (x28 * (x23_1 + 1)))) + x26_1) - *((x11_2 + x22_2) + x26_1));
                        float v2_2 = (*((x9_13 + (-4 + (x28 * (x23_1 + 1)))) + x26_1) - *((x9_13 + x22_2) + x26_1));
                        v0_1 = (v0_1 * v0_1);
                        v0_1 = (v0_1 + (v1_1 * v1_1));
                        v1_1 = var_6e8_1[4];
                        v0_1 = (v0_1 + (v2_2 * v2_2));
                        /* unimplemented  {fsqrt s0, s0} */;
                        v0_1 = (v0_1 * v10);
                        /* unimplemented  {fmax s0, s0, s11} */;
                        if (v1_1 < v0_1)
                        {
                            v0_1 = v1_1;
                        }
                        else
                        {
                            v0_1 = v0_1;
                        }
                        v0_1 = (v0_1 * v0_1);
                        *((s_19 + (x23_1 << 2)) + (j << 2)) = v0_1;
                    }
                    j = (j + 1);
                    x24_1 = (x24_1 + 0x10);
                    x26_1 = (x26_1 + x28);
                } while (j < k_2);
                x24 = var_6e8_1;
                x23_1 = (x23_1 + j);
            }
            i_3 = (i_3 + 1);
        } while (i_3 < x8_2);
    }
    int64_t var_2e0;
    gettimeofday(&var_2e0, 0);
    uint32_t x8_39 = *data_70090;
    char* x10_5 = *(data_7009a + 6);
    int64_t x26_2 = var_2e0;
    int64_t x27_1 = var_2d0;
    uint64_t var_2c8;
    uint64_t x25_2 = var_2c8;
    int32_t var_318 = data_70088;
    char* x21_2;
    if ((x8_39 & 1) == 0)
    {
        x21_2 = &*(data_70090 + 1);
    }
    else
    {
        x21_2 = x10_5;
    }
    int64_t s_18;
    __builtin_memset(&s_18, 0, 0x18);
    size_t x0_12 = strlen(x21_2);
    if (x0_12 < -0x10)
    {
        goto label_4db1c;
    }
    void* var_300_1;
    void* x28_1;
    if (x0_12 >= 0x17)
    {
        uint64_t x22_3 = ((x0_12 + 0x10) & 0xfffffffffffffff0);
        void* x0_14 = operator new(x22_3);
        x28_1 = x0_14;
        var_300_1 = x0_14;
        s_18 = (x22_3 | 1);
        size_t var_308_1 = x0_12;
    }
    else
    {
        x28_1 = &*s_18[1];
        s_18 = (x0_12 << 1);
    }
    if ((x0_12 >= 0x17 || (x0_12 < 0x17 && x0_12 != 0)))
    {
        memcpy(x28_1, x21_2, x0_12);
    }
    *(x28_1 + x0_12) = 0;
    int32_t x0_17 = g3::logLevel(&var_318);
    int64_t i_28 = i_25;
    int32_t x19_4;
    if ((x0_17 & 1) == 0)
    {
        x19_4 = 0;
        if ((s_18 & 1) != 0)
        {
        label_4b0e8:
            operator delete(var_300_1);
            if ((x19_4 & 1) != 0)
            {
                goto label_4b114;
            }
        }
    }
    else
    {
        int64_t var_328_1 = 0;
        int64_t var_328_2;
        __builtin_strncpy(&var_328_2, "l_region", 0x10);
        int64_t var_330 = 0;
        var_330 = 0x1e;
        __builtin_strncpy(&*var_330[1], "feasibal", 8);
        void* var_320;
        var_320 = 0;
        x19_4 = g3::logTag(&var_330);
        if ((var_330 & 1) != 0)
        {
            operator delete(var_320);
            if ((s_18 & 1) != 0)
            {
                goto label_4b0e8;
            }
        }
        else if ((s_18 & 1) != 0)
        {
            goto label_4b0e8;
        }
    }
    if (((((x0_17 & 1) == 0 && (s_18 & 1) == 0) || (x0_17 & 1) != 0) && (x19_4 & 1) != 0))
    {
    label_4b114:
        LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
        uint64_t var_2d8;
        double v0_2;
        v0_2 = ((vcvtd_f64_s64((x26_2 - x27_1)) * 1000.0) + (vcvtd_f64_s64((var_2d8 - x25_2)) / 1000.0));
        LogCapture::capturef();
        LogCapture::~LogCapture();
    }
    __builtin_memset(&s_17, 0, 0x18);
    Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1, 0, -1, -1> >::resize(&s_17, i_28);
    __builtin_memset(&s_16, 0, 0x18);
    int32_t var_6f8;
    int32_t i_4;
    if (i_28 == 0)
    {
        i_4 = 0;
        var_6f8 = 0;
        __builtin_memset(&s_14, 0, 0x18);
    }
    else
    {
        if ((i_28 & 0x80000000) != 0)
        {
            goto label_4db40;
        }
        uint64_t x20_3 = ((i_28 - 1) >> 6);
        int64_t* s_27 = operator new(((x20_3 + 1) << 3));
        int64_t var_350_1 = (x20_3 + 1);
        uint64_t x21_4 = ((i_28 >> 6) << 3);
        uint64_t x9_18;
        if (i_28 < 0x41)
        {
            x9_18 = 0;
        }
        else
        {
            x9_18 = x20_3;
        }
        s_16 = s_27;
        int64_t i_29 = i_28;
        s_27[x9_18] = 0;
        memset(s_27, 0, x21_4);
        int64_t x8_49 = (i_28 & 0x3f);
        if (x8_49 != 0)
        {
            *(s_27 + x21_4) = (*(s_27 + x21_4) & !((-1 >> -(x8_49))));
        }
        int64_t x28_2 = (i_28 << 2);
        int64_t s_15;
        __builtin_memset(&s_15, 0, 0x18);
        void* s_28 = operator new(x28_2);
        void* x24_2 = (s_28 + (i_28 << 2));
        s_14 = s_28;
        void* var_368_1 = x24_2;
        double v0_3;
        double v1_3;
        double v2_4;
        v0_3 = memset(s_28, 0, x28_2);
        int64_t* s_48 = s_17;
        void* var_370_1 = x24_2;
        int64_t* x24_3 = *(var_6e8_1 + 0x38);
        int64_t x20_4 = 0;
        i_4 = 0;
        x25_2 = (i_28 & 0xffffffff);
        do
        {
            void* x28_3 = *x24_3;
            if (*(x28_3 + 0x40) != 0)
            {
                v0_3 = *(x28_3 + 0x50);
                v1_3 = *(x28_3 + 0x54);
                v2_4 = *(x28_3 + 0x58);
                int64_t x27_2 = (x20_4 << 3);
                arg9 = v0_3;
                v9 = v1_3;
                double temp0_4 = vneg_f64(v2_4);
                double temp0_5 = vsqrt_f64(((arg9 * arg9) + (v9 * v9)));
                *(s_48 + x27_2) = acos(temp0_4);
                v0_3 = atan2((arg9 / temp0_5), (v9 / temp0_5));
                int64_t var_340;
                *(&s_48[var_340] + x27_2) = v0_3;
                int64_t x8_56 = ((x20_4 >> 3) & 0x1ffffffffffffff8);
                i_4 = (i_4 + 1);
                *(s_27 + x8_56) = (*(s_27 + x8_56) | (1 << x20_4));
                *(s_28 + (x20_4 << 2)) = *(x28_3 + 0x38);
            }
            x20_4 = (x20_4 + 1);
            x24_3 = &x24_3[2];
        } while (x25_2 != x20_4);
        x24 = var_6e8_1;
        i_28 = i_25;
        var_6f8 = 1;
    }
    Histogram::initHistogram(*(x24 + 0x530), &s_17);
    __builtin_memset(&s_13, 0, 0x18);
    void* x26_4;
    if ((var_6f8 & 1) == 0)
    {
        x26_4 = &x24[0x124];
    }
    else
    {
        int64_t* s_43 = s_16;
        char* x9_23 = *(x24 + 0x490);
        x26_4 = &x24[0x124];
        int64_t x10_7 = (i_28 & 0xffffffff);
        int64_t x11_4;
        if (i_28 > 1)
        {
            int64_t x12_2 = 0;
            x11_4 = (x10_7 & 0xfffffffe);
            do
            {
                int64_t x15_3 = *(s_43 + ((x12_2 >> 3) & 0x1ffffffffffffff8));
                char x16_3;
                if ((x15_3 & (1 << (x12_2 & 0x3e))) != 0)
                {
                    x16_3 = 1;
                }
                else
                {
                    x16_3 = 0;
                }
                bool cond:9_1 = (x15_3 & (1 << (x12_2 + 1))) != 0;
                void* x14_3 = &x9_23[x12_2];
                x12_2 = (x12_2 + 2);
                char x15_4;
                if (cond:9_1)
                {
                    x15_4 = 1;
                }
                else
                {
                    x15_4 = 0;
                }
                *x14_3 = x16_3;
                *(x14_3 + 1) = x15_4;
            } while (x11_4 != x12_2);
        }
        else
        {
            x11_4 = 0;
        }
        if ((i_28 <= 1 || (i_28 > 1 && x11_4 != x10_7)))
        {
            do
            {
                char x13_4;
                if ((*(s_43 + ((x11_4 >> 3) & 0x1ffffffffffffff8)) & (1 << x11_4)) != 0)
                {
                    x13_4 = 1;
                }
                else
                {
                    x13_4 = 0;
                }
                x9_23[x11_4] = x13_4;
                x11_4 = (x11_4 + 1);
            } while (x10_7 != x11_4);
        }
    }
    v9 = 0x4f000000;
    v10 = 0x42a00000;
    int128_t var_710;
    var_710 = x26_4;
    int64_t var_718;
    var_718 = (k_2 & !((k_2 >> 0x1f)));
    while (i_4 >= 1)
    {
        *(x24 + 0x530);
        Histogram::getPointsFromMostFrequentBin();
        void* x0_28 = s_23;
        int64_t j_10 = ((*s_23[8] - x0_28) >> 2);
        int32_t x20_5;
        if (j_10 >= 3)
        {
            int64_t* x9_26 = *(x24 + 0x38);
            float v0_5 = v9;
            int64_t j_1;
            do
            {
                int64_t x10_8 = *x0_28;
                x0_28 = (x0_28 + 4);
                float v1_5 = *(x9_26[(x10_8 * 2)] + 0x3c);
                (v1_5 - v0_5);
                bool cond:12_1 = v1_5 < v0_5;
                if (v1_5 < v0_5)
                {
                    v0_5 = v1_5;
                }
                if (cond:12_1)
                {
                    x25_2 = x10_8;
                }
                else
                {
                    x25_2 = x25_2;
                }
                j_1 = j_10;
                j_10 = (j_10 - 1);
            } while (j_1 != 1);
            void** x9_27 = &x9_26[(x25_2 * 2)];
            void* x8_63 = *x9_27;
            var_290 = x8_63;
            void* x9_28 = x9_27[1];
            var_288 = x9_28;
            if (x9_28 != 0)
            {
                int32_t j_2;
                do
                {
                    j_2 = __stxr((__ldxr((x9_28 + 8)) + 1), (x9_28 + 8));
                } while (j_2 != 0);
            }
            arg9 = *(x8_63 + 0x5c);
            memset(*(x24 + 0x488), 0, i_28);
            *(x24 + 0x490);
            *(x24 + 0x488);
            var_7a8 = (x8_63 + 0x50);
            var_7b0 = (x25_2 / k_2);
            CAPE::RegionGrowing();
            void* x21_8;
            if (var_6f8 == 0)
            {
                x20_5 = 0x11;
                x21_8 = var_288;
                if (x21_8 == 0)
                {
                label_4b714:
                    x0_28 = s_23;
                    if (x0_28 != 0)
                    {
                        goto label_4b450;
                    }
                }
            }
            else
            {
                int64_t x21_7 = 0;
                int32_t x20_7 = 0;
                do
                {
                    if (*(*(x24 + 0x488) + x21_7) != 0)
                    {
                        void* x0_31 = var_290;
                        int64_t* x8_68 = (*(x24 + 0x38) + (x21_7 << 4));
                        int64_t var_3a0_1 = *x8_68;
                        int64_t* x8_69 = x8_68[1];
                        if (x8_69 != 0)
                        {
                            int32_t j_3;
                            do
                            {
                                j_3 = __stxr((__ldxr(&x8_69[1]) + 1), &x8_69[1]);
                            } while (j_3 != 0);
                        }
                        PlaneSeg::expandSegment(x0_31);
                        if (x8_69 != 0)
                        {
                            int64_t x9_33;
                            int32_t j_4;
                            do
                            {
                                x9_33 = __ldaxr(&x8_69[1]);
                                j_4 = __stlxr((x9_33 - 1), &x8_69[1]);
                            } while (j_4 != 0);
                            if (x9_33 == 0)
                            {
                                *(*x8_69 + 0x10)(x8_69);
                                std::__ndk1::__shared_weak_count::__release_weak();
                            }
                        }
                        Histogram::removePoint(*(x24 + 0x530));
                        i_28 = i_25;
                        x20_7 = (x20_7 + 1);
                        i_4 = (i_4 - 1);
                        *var_710[x21_7] = 0;
                    }
                    x21_7 = (x21_7 + 1);
                } while (x21_7 < i_28);
                if (x20_7 >= 2)
                {
                    PlaneSeg::fitPlane();
                    void* x9_34 = var_290;
                    if (!(*(x9_34 + 0x38) <= 80f))
                    {
                        void* x8_75 = var_388;
                        int64_t var_380;
                        void* x11_9;
                        if (x8_75 == var_380)
                        {
                            std::__ndk1::vector<std::__ndk1::shared_ptr<PlaneSeg>, std::__ndk1::allocator<std::__ndk1::shared_ptr<PlaneSeg> > >::__push_back_slow_path<std::__ndk1::shared_ptr<PlaneSeg> const&>(&s_13);
                            x11_9 = var_388;
                        }
                        else
                        {
                            *x8_75 = x9_34;
                            void* x9_35 = var_288;
                            *(x8_75 + 8) = x9_35;
                            if (x9_35 != 0)
                            {
                                int32_t j_5;
                                do
                                {
                                    j_5 = __stxr((__ldxr((x9_35 + 8)) + 1), (x9_35 + 8));
                                } while (j_5 != 0);
                                x8_75 = var_388;
                            }
                            x11_9 = (x8_75 + 0x10);
                            var_388 = x11_9;
                        }
                        if (x8_2 >= 1)
                        {
                            uint32_t* x9_38 = *(x24 + 0x60);
                            int32_t x12_3 = 0;
                            int64_t x10_16 = **(x24 + 0x98);
                            int64_t j_6 = 0;
                            uint32_t x11_11 = ((x11_9 - s_13) >> 4);
                            do
                            {
                                int64_t x12_4 = x12_3;
                                if (k_2 >= 1)
                                {
                                    uint64_t k_1 = k_2;
                                    uint32_t* x15_5 = x9_38;
                                    char* x13_8 = (*(x24 + 0x488) + x12_4);
                                    uint64_t k;
                                    do
                                    {
                                        if (*x13_8 != 0)
                                        {
                                            *x15_5 = x11_11;
                                        }
                                        x13_8 = &x13_8[1];
                                        k = k_1;
                                        k_1 = (k_1 - 1);
                                        x15_5 = &x15_5[1];
                                    } while (k != 1);
                                }
                                j_6 = (j_6 + 1);
                                x12_3 = (x12_4 + var_718);
                                x9_38 = (x9_38 + x10_16);
                            } while (j_6 != x8_2);
                        }
                    }
                    x20_5 = 0;
                    x21_8 = var_288;
                    if (x21_8 == 0)
                    {
                        goto label_4b714;
                    }
                }
                else
                {
                    x20_5 = 0x11;
                    x21_8 = var_288;
                    if (x21_8 == 0)
                    {
                        goto label_4b714;
                    }
                }
            }
            if (((var_6f8 == 0 && x21_8 != 0) || var_6f8 != 0))
            {
                int64_t x9_39;
                int32_t j_7;
                do
                {
                    x9_39 = __ldaxr((x21_8 + 8));
                    j_7 = __stlxr((x9_39 - 1), (x21_8 + 8));
                } while (j_7 != 0);
                if (x9_39 != 0)
                {
                    goto label_4b714;
                }
                *(*x21_8 + 0x10)(x21_8);
                std::__ndk1::__shared_weak_count::__release_weak();
                x0_28 = s_23;
                if (x0_28 != 0)
                {
                    goto label_4b450;
                }
            }
        }
        else
        {
            x20_5 = 0x12;
            if (x0_28 != 0)
            {
            label_4b450:
                *s_23[8] = x0_28;
                operator delete(x0_28);
            }
        }
        if (x20_5 == 0x12)
        {
            break;
        }
    }
    int128_t var_220;
    var_220 = 0;
    void* x19_7 = (var_388 - s_13);
    int64_t x22_4 = (((x19_7 & 0xffffffff0) << 0x1c) >> 0x20);
    s_23 = x22_4;
    *s_23[8] = x22_4;
    uint32_t x21_9 = (x19_7 >> 4);
    int128_t v0_8;
    int128_t v1_6;
    int128_t v2_5;
    int128_t v3_2;
    v0_8 = CAPE::getConnectedComponents(Eigen::Matrix<bool, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, -1, 0, -1, -1> > >(&var_3b8), &arg1[0x14]);
    __builtin_memset(&s_12, 0, 0x18);
    s_23 = 0;
    if (x21_9 >= 1)
    {
        int32_t x8_82;
        do
        {
            v0_8 = std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__push_back_slow_path<int32_t const&>(&s_12);
            while (true)
            {
                x8_82 = (s_23 + 1);
                s_23 = x8_82;
                if (x8_82 >= x21_9)
                {
                    break;
                }
                void* var_3c8_1;
                int32_t* x9_41 = var_3c8_1;
                int64_t var_3c0;
                if (x9_41 == var_3c0)
                {
                    break;
                }
                *x9_41 = x8_82;
                var_3c8_1 = &x9_41[1];
            }
        } while (x8_82 < x21_9);
    }
    int64_t var_3b0;
    int64_t x10_19 = var_3b0;
    if (x10_19 >= 1)
    {
        int64_t i_36 = 0;
        int32_t i_33 = 1;
        do
        {
            int64_t var_3a8;
            int64_t x8_84 = var_3a8;
            int64_t i_37 = i_36;
            i_36 = (i_36 + 1);
            if (x8_84 > i_36)
            {
                int32_t x9_43 = 0;
                i_28 = i_33;
                int64_t i_32 = i_36;
                int32_t x27_6 = *(s_12 + (i_37 << 2));
                int64_t x26_7 = x27_6;
                while (true)
                {
                    char* x11_14 = var_3b8;
                    int64_t x10_20 = (i_37 + (x10_19 * i_32));
                    if (x11_14[x10_20] != 0)
                    {
                        int64_t* s_45 = s_13;
                        void* x0_42 = s_45[(x26_7 * 2)];
                        void* x13_11 = s_45[(i_32 * 2)];
                        v2_5 = *(x0_42 + 0x50);
                        v0_8 = *(x0_42 + 0x54);
                        v1_6 = *(x0_42 + 0x58);
                        v3_2 = *(x13_11 + 0x50);
                        v2_5 = (v2_5 * v3_2);
                        v3_2 = var_6e8_1[5];
                        v2_5 = (v2_5 + (v0_8 * *(x13_11 + 0x54)));
                        v2_5 = (v2_5 + (v1_6 * *(x13_11 + 0x58)));
                        if (!(v2_5 <= v3_2))
                        {
                            v2_5 = *(x13_11 + 0x44);
                            v3_2 = *(x13_11 + 0x48);
                            v0_8 = (v0_8 * v3_2);
                            v3_2 = *(x0_42 + 0x5c);
                            v2_5 = (*(s_45[(i_37 * 2)] + 0x50) * v2_5);
                            v1_6 = (v1_6 * *(x13_11 + 0x4c));
                            v0_8 = (v2_5 + v0_8);
                            v2_5 = var_6e8_1[4];
                            v0_8 = (v0_8 + v1_6);
                            v0_8 = (v3_2 + v0_8);
                            v0_8 = v0_8;
                            v0_8 = (v0_8 * v0_8);
                            v1_6 = v2_5;
                            if (!(v0_8 >= v1_6))
                            {
                                void* var_3e0_1 = x13_11;
                                int64_t* x8_86 = s_45[((i_32 * 2) + 1)];
                                if (x8_86 != 0)
                                {
                                    int32_t i_5;
                                    do
                                    {
                                        i_5 = __stxr((__ldxr(&x8_86[1]) + 1), &x8_86[1]);
                                    } while (i_5 != 0);
                                }
                                v0_8 = PlaneSeg::expandSegment(x0_42);
                                if (x8_86 != 0)
                                {
                                    int64_t x9_46;
                                    int32_t i_6;
                                    do
                                    {
                                        x9_46 = __ldaxr(&x8_86[1]);
                                        i_6 = __stlxr((x9_46 - 1), &x8_86[1]);
                                    } while (i_6 != 0);
                                    if (x9_46 == 0)
                                    {
                                        *(*x8_86 + 0x10)(x8_86);
                                        v0_8 = std::__ndk1::__shared_weak_count::__release_weak();
                                    }
                                }
                                x9_43 = 1;
                                *(s_12 + (i_32 << 2)) = x27_6;
                                x8_84 = var_3a8;
                            }
                        }
                        if ((v2_5 <= v3_2 || (!(v2_5 <= v3_2) && v0_8 >= v1_6)))
                        {
                            x11_14[x10_20] = 0;
                        }
                    }
                    i_28 = (i_28 + 1);
                    if (x8_84 <= i_28)
                    {
                        break;
                    }
                    x10_19 = var_3b0;
                    i_32 = i_28;
                }
                if ((x9_43 & 1) != 0)
                {
                    s_13[(x26_7 * 2)];
                    v0_8 = PlaneSeg::fitPlane();
                }
            }
            x10_19 = var_3b0;
            i_33 = (i_33 + 1);
        } while (x10_19 > i_36);
    }
    void** var_740_2;
    uint64_t var_6f0_1;
    int64_t s_22;
    int32_t* x24_4;
    if (x21_9 <= 0)
    {
        x25_2 = arg5;
        x24_4 = var_6e8_1;
        var_740_2 = (x25_2 + 8);
    }
    else
    {
        x24_4 = var_6e8_1;
        int64_t x25_4 = 0;
        arg9 = 1;
        *arg9[4] = 1;
        var_740_2 = (arg5 + 8);
        do
        {
            int64_t x19_9 = x25_4;
            uint64_t x8_96 = *(s_12 + (x25_4 << 2));
            int32_t x9_48 = x8_96;
            if (x25_4 == x8_96)
            {
                while (true)
                {
                    if (x9_48 != x8_96)
                    {
                        x19_9 = (x19_9 + 1);
                        if (x19_9 >= x22_4)
                        {
                            break;
                        }
                    }
                    else
                    {
                        x19_9 = (x19_9 + 1);
                        int64_t x8_97 = *arg5;
                        int64_t x9_50 = *(arg5 + 8);
                        var_290 = 0xc1020006;
                        int64_t var_3e8;
                        var_288 = &var_3e8;
                        s_22 = 0x100000001;
                        v0_8 = vcvt_f64_u64((1 - (((x9_50 - x8_97) >> 3) * 0x30c30c30c30c30c3)));
                        var_3e8 = v0_8;
                        v0_8 = vcvt_f64_s64(x19_9);
                        cv::operator==(&arg1[0x14], v0_8);
                        int64_t var_3f0_1 = 0;
                        int32_t var_400_1 = 0xc1060000;
                        int128_t* var_3f8_1 = &s_23;
                        cv::Mat::setTo(x0_1, &var_290);
                        v0_8 = cv::MatExpr::~MatExpr();
                        if (x19_9 >= x22_4)
                        {
                            break;
                        }
                    }
                    void* s_44 = s_12;
                    x9_48 = *(s_44 + (x19_9 << 2));
                    x8_96 = *(s_44 + (x25_4 << 2));
                }
                int128_t* x20_8 = *(arg5 + 8);
                int128_t* x19_10 = s_13[(x25_4 * 2)];
                if (x20_8 == *(arg5 + 0x10))
                {
                    v0_8 = std::__ndk1::vector<PlaneSeg, std::__ndk1::allocator<PlaneSeg> >::__push_back_slow_path<PlaneSeg const&>(arg5);
                }
                else
                {
                    v1_6 = x19_10[1];
                    *x20_8 = *x19_10;
                    x20_8[1] = v1_6;
                    v1_6 = x19_10[5];
                    v2_5 = x19_10[2];
                    v3_2 = x19_10[3];
                    x20_8[4] = x19_10[4];
                    x20_8[5] = v1_6;
                    x20_8[2] = v2_5;
                    x20_8[3] = v3_2;
                    var_6f0_1 = &x20_8[6];
                    Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(&x20_8[6]);
                    Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix((x20_8 + 0x78));
                    v0_8 = Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(&x20_8[9]);
                    x24_4 = var_6e8_1;
                    *var_740_2 = (*var_740_2 + 0xa8);
                }
            }
            x25_4 = (x25_4 + 1);
        } while (x25_4 < x22_4);
        x25_2 = arg5;
    }
    *arg3 = (((*(x25_2 + 8) - *x25_2) >> 3) * 0x3cf3cf3d);
    if (x0_1 != arg7)
    {
        int64_t x8_109 = *(x24_4 + 0xe8);
        if (x8_109 != 0)
        {
            int32_t i_7;
            do
            {
                i_7 = __stlxr((__ldaxr((x8_109 + 0x14)) + 1), (x8_109 + 0x14));
            } while (i_7 != 0);
        }
        int64_t x8_111 = *(arg7 + 0x38);
        if (x8_111 != 0)
        {
            int32_t temp0_9;
            int32_t i_8;
            do
            {
                temp0_9 = __ldaxr((x8_111 + 0x14));
                i_8 = __stlxr((temp0_9 - 1), (x8_111 + 0x14));
            } while (i_8 != 0);
            if (temp0_9 == 1)
            {
                cv::Mat::deallocate();
            }
        }
        int32_t x8_113 = *(arg7 + 4);
        v0_8 = 0;
        *v0_8[8] = 0;
        *(arg7 + 0x38) = 0;
        __builtin_memset((arg7 + 0x10), 0, 0x20);
        int64_t x10_26;
        if (x8_113 <= 0)
        {
            *arg7 = *x0_1;
        }
        else
        {
            int64_t x8_114 = *(arg7 + 0x40);
            int64_t x9_59 = 0;
            do
            {
                *(x8_114 + (x9_59 << 2)) = 0;
                x10_26 = *(arg7 + 4);
                x9_59 = (x9_59 + 1);
            } while (x9_59 < x10_26);
            *arg7 = *x0_1;
        }
        int32_t x8_119;
        if ((x8_113 <= 0 || (x8_113 > 0 && x10_26 <= 2)))
        {
            x8_119 = x24_4[0x2d];
            if (x8_119 <= 2)
            {
                *(arg7 + 4) = x8_119;
                int64_t* x10_27 = *(arg7 + 0x48);
                *(arg7 + 8) = *(x24_4 + 0xb8);
                int64_t* x8_121 = *(x24_4 + 0xf8);
                *x10_27 = *x8_121;
                x10_27[1] = x8_121[1];
            }
        }
        if ((((x8_113 <= 0 || (x8_113 > 0 && x10_26 <= 2)) && x8_119 > 2) || (x8_113 > 0 && x10_26 > 2)))
        {
            cv::Mat::copySize(arg7);
        }
        *(arg7 + 0x10) = *(x24_4 + 0xc0);
        *(arg7 + 0x20) = *(x24_4 + 0xd0);
        *(arg7 + 0x30) = *(x24_4 + 0xe0);
    }
    char* x21_10;
    if ((*data_70090 & 1) == 0)
    {
        x21_10 = &*(data_70090 + 1);
    }
    else
    {
        x21_10 = *(data_7009a + 6);
    }
    int32_t var_420 = data_70088;
    int64_t s_11;
    __builtin_memset(&s_11, 0, 0x18);
    size_t x0_55 = strlen(x21_10);
    if (x0_55 < -0x10)
    {
        goto label_4db24;
    }
    void* var_408_1;
    void* x24_6;
    if (x0_55 >= 0x17)
    {
        uint64_t x22_5 = ((x0_55 + 0x10) & 0xfffffffffffffff0);
        void* x0_57 = operator new(x22_5);
        x24_6 = x0_57;
        var_408_1 = x0_57;
        s_11 = (x22_5 | 1);
        size_t var_410_1 = x0_55;
    }
    else
    {
        x24_6 = &*s_11[1];
        s_11 = (x0_55 << 1);
    }
    if ((x0_55 >= 0x17 || (x0_55 < 0x17 && x0_55 != 0)))
    {
        memcpy(x24_6, x21_10, x0_55);
    }
    *(x24_6 + x0_55) = 0;
    int32_t x19_12;
    if ((g3::logLevel(&var_420) & 1) == 0)
    {
        x19_12 = 0;
        if ((s_11 & 1) != 0)
        {
        label_4bdc8:
            operator delete(var_408_1);
            if ((x19_12 & 1) == 0)
            {
                goto label_4bdd0;
            }
            goto label_4bd70;
        }
    }
    else
    {
        int64_t var_430_1 = 0;
        int64_t var_430_2;
        __builtin_strncpy(&var_430_2, "l_region", 0x10);
        int64_t var_438 = 0;
        var_438 = 0x1e;
        __builtin_strncpy(&*var_438[1], "feasibal", 8);
        void* var_428;
        var_428 = 0;
        x19_12 = g3::logTag(&var_438);
        if ((var_438 & 1) != 0)
        {
            operator delete(var_428);
            if ((s_11 & 1) != 0)
            {
                goto label_4bdc8;
            }
        }
        else if ((s_11 & 1) != 0)
        {
            goto label_4bdc8;
        }
    }
    void** x19_13;
    void* x21_11;
    if ((x19_12 & 1) == 0)
    {
    label_4bdd0:
        x21_11 = &var_6e8_1[0x184];
        x19_13 = &var_6e8_1[0x186];
    }
    else
    {
    label_4bd70:
        LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
        *arg3;
        (*(var_6e8_1 + 0x618) - *(var_6e8_1 + 0x610));
        LogCapture::capturef();
        x21_11 = &var_6e8_1[0x184];
        x19_13 = &var_6e8_1[0x186];
        LogCapture::~LogCapture();
    }
    void* var_730;
    int32_t x19_23;
    uint64_t x22_13;
    int32_t x27_8;
    double v0_9;
    if (((*x19_13 - *x21_11) == 0xb0 && *arg3 >= 1))
    {
        char* x21_12;
        if ((*data_70090 & 1) == 0)
        {
            x21_12 = &*(data_70090 + 1);
        }
        else
        {
            x21_12 = *(data_7009a + 6);
        }
        int32_t var_458 = data_70088;
        int64_t s_10;
        __builtin_memset(&s_10, 0, 0x18);
        size_t x0_66 = strlen(x21_12);
        if (x0_66 < -0x10)
        {
            goto label_4db48;
        }
        void* var_440_1;
        if (x0_66 >= 0x17)
        {
            uint64_t x22_7 = ((x0_66 + 0x10) & 0xfffffffffffffff0);
            void* x0_77 = operator new(x22_7);
            x24 = x0_77;
            var_440_1 = x0_77;
            s_10 = (x22_7 | 1);
            size_t var_448_1 = x0_66;
        }
        else
        {
            x24 = &*s_10[1];
            s_10 = (x0_66 << 1);
        }
        if ((x0_66 >= 0x17 || (x0_66 < 0x17 && x0_66 != 0)))
        {
            memcpy(x24, x21_12, x0_66);
        }
        *(x24 + x0_66) = 0;
        cv::Mat* x0_80 = g3::logLevel(&var_458);
        cv::Mat* x20_11 = var_6e8_1;
        int32_t x19_17;
        if ((x0_80 & 1) == 0)
        {
            x19_17 = 0;
            if ((s_10 & 1) != 0)
            {
            label_4c660:
                x0_80 = operator delete(var_440_1);
                if ((x19_17 & 1) != 0)
                {
                    goto label_4c68c;
                }
            }
        }
        else
        {
            int64_t var_468_1 = 0;
            int64_t var_468_2;
            __builtin_strncpy(&var_468_2, "l_region", 0x10);
            int64_t var_470 = 0;
            var_470 = 0x1e;
            __builtin_strncpy(&*var_470[1], "feasibal", 8);
            void* var_460;
            var_460 = 0;
            x0_80 = g3::logTag(&var_470);
            x19_17 = x0_80;
            if ((var_470 & 1) != 0)
            {
                x0_80 = operator delete(var_460);
                if ((s_10 & 1) != 0)
                {
                    goto label_4c660;
                }
            }
            else if ((s_10 & 1) != 0)
            {
                goto label_4c660;
            }
        }
        if (((((x0_80 & 1) == 0 && (s_10 & 1) == 0) || (x0_80 & 1) != 0) && (x19_17 & 1) != 0))
        {
        label_4c68c:
            LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
            x0_80 = LogCapture::~LogCapture();
        }
        cv::Mat* x0_110 = CAPE::getBestPlane(x0_80, arg7, (*(x20_11 + 0x610) + 0x28));
        if (x0_110 >= 2)
        {
            CAPE::swapPlanes(x0_110, x25_2, arg7, 0);
        }
        void* x8_176 = *x25_2;
        var_c8 = *(x8_176 + 0x50);
        *var_c8[4] = *(x8_176 + 0x54);
        var_c0_1 = *(x8_176 + 0x58);
        *var_c0_1[4] = *(x8_176 + 0x5c);
        cv::Mat* x0_112 = CAPE::judgPlaneValid(x20_11, &var_c8, *(x20_11 + 0x51c), 0.0872664601f, 5f);
        if ((x0_112 & 1) != 0)
        {
            char* x21_20;
            if ((*data_70090 & 1) == 0)
            {
                x21_20 = &*(data_70090 + 1);
            }
            else
            {
                x21_20 = *(data_7009a + 6);
            }
            int32_t var_538 = data_70088;
            int64_t s_6;
            __builtin_memset(&s_6, 0, 0x18);
            size_t x0_114 = strlen(x21_20);
            if (x0_114 < -0x10)
            {
                goto label_4db58;
            }
            void* var_520_1;
            void* x23_5;
            if (x0_114 >= 0x17)
            {
                uint64_t x22_12 = ((x0_114 + 0x10) & 0xfffffffffffffff0);
                void* x0_121 = operator new(x22_12);
                x23_5 = x0_121;
                var_520_1 = x0_121;
                s_6 = (x22_12 | 1);
                size_t var_528_1 = x0_114;
            }
            else
            {
                x23_5 = &*s_6[1];
                s_6 = (x0_114 << 1);
            }
            if ((x0_114 >= 0x17 || (x0_114 < 0x17 && x0_114 != 0)))
            {
                memcpy(x23_5, x21_20, x0_114);
            }
            *(x23_5 + x0_114) = 0;
            int32_t x0_124 = g3::logLevel(&var_538);
            x22_13 = arg7;
            int32_t x19_21;
            if ((x0_124 & 1) == 0)
            {
                x19_21 = 0;
                if ((s_6 & 1) != 0)
                {
                label_4c980:
                    operator delete(var_520_1);
                    if ((x19_21 & 1) != 0)
                    {
                        goto label_4c9ac;
                    }
                }
            }
            else
            {
                int64_t var_548_1 = 0;
                int64_t var_548_2;
                __builtin_strncpy(&var_548_2, "l_region", 0x10);
                int64_t var_550 = 0;
                var_550 = 0x1e;
                __builtin_strncpy(&*var_550[1], "feasibal", 8);
                void* var_540;
                var_540 = 0;
                x19_21 = g3::logTag(&var_550);
                if ((var_550 & 1) != 0)
                {
                    operator delete(var_540);
                    if ((s_6 & 1) != 0)
                    {
                        goto label_4c980;
                    }
                }
                else if ((s_6 & 1) != 0)
                {
                    goto label_4c980;
                }
            }
            if (((((x0_124 & 1) == 0 && (s_6 & 1) == 0) || (x0_124 & 1) != 0) && (x19_21 & 1) != 0))
            {
            label_4c9ac:
                LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
            goto label_4cc58;
        }
        var_290 = 0;
        void* x8_179 = *(x20_11 + 0x610);
        int32_t x0_115 = CAPE::judgeValidBasedImage(x0_112, (x8_179 + 0x28), arg7, (x8_179 + 0x88));
        if ((*data_70090 & 1) == 0)
        {
            x23 = &*(data_70090 + 1);
        }
        else
        {
            x23 = *(data_7009a + 6);
        }
        int32_t x19_20 = x0_115;
        int32_t var_490 = data_70088;
        int64_t s_9;
        __builtin_memset(&s_9, 0, 0x18);
        size_t x0_117 = strlen(x23);
        if (x0_117 < -0x10)
        {
            goto label_4db60;
        }
        void* var_478_1;
        void* x24_9;
        if (x0_117 >= 0x17)
        {
            uint64_t x22_14 = ((x0_117 + 0x10) & 0xfffffffffffffff0);
            void* x0_128 = operator new(x22_14);
            x24_9 = x0_128;
            var_478_1 = x0_128;
            s_9 = (x22_14 | 1);
            size_t var_480_1 = x0_117;
        }
        else
        {
            x24_9 = &*s_9[1];
            s_9 = (x0_117 << 1);
        }
        if ((x0_117 >= 0x17 || (x0_117 < 0x17 && x0_117 != 0)))
        {
            memcpy(x24_9, x23, x0_117);
        }
        *(x24_9 + x0_117) = 0;
        int32_t x0_131 = g3::logLevel(&var_490);
        int32_t x21_22;
        if ((x0_131 & 1) == 0)
        {
            x21_22 = 0;
            if ((s_9 & 1) != 0)
            {
            label_4c9dc:
                operator delete(var_478_1);
                if ((x21_22 & 1) != 0)
                {
                    goto label_4ca08;
                }
            }
        }
        else
        {
            int64_t var_4a0_1 = 0;
            int64_t var_4a0_2;
            __builtin_strncpy(&var_4a0_2, "l_region", 0x10);
            int64_t var_4a8 = 0;
            var_4a8 = 0x1e;
            __builtin_strncpy(&*var_4a8[1], "feasibal", 8);
            void* var_498;
            var_498 = 0;
            x21_22 = g3::logTag(&var_4a8);
            if ((var_4a8 & 1) != 0)
            {
                operator delete(var_498);
                if ((s_9 & 1) != 0)
                {
                    goto label_4c9dc;
                }
            }
            else if ((s_9 & 1) != 0)
            {
                goto label_4c9dc;
            }
        }
        if (((((x0_131 & 1) == 0 && (s_9 & 1) == 0) || (x0_131 & 1) != 0) && (x21_22 & 1) != 0))
        {
        label_4ca08:
            LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
            var_6e8_1[0x147];
            LogCapture::capturef();
            LogCapture::~LogCapture();
        }
        if ((*data_70090 & 1) == 0)
        {
            x23 = &*(data_70090 + 1);
        }
        else
        {
            x23 = *(data_7009a + 6);
        }
        int32_t var_4c8 = data_70088;
        int64_t s_8;
        __builtin_memset(&s_8, 0, 0x18);
        size_t x0_139 = strlen(x23);
        if (x0_139 < -0x10)
        {
            goto label_4db68;
        }
        void* var_4b0_1;
        void* x24_10;
        if (x0_139 >= 0x17)
        {
            uint64_t x22_15 = ((x0_139 + 0x10) & 0xfffffffffffffff0);
            void* x0_141 = operator new(x22_15);
            x24_10 = x0_141;
            var_4b0_1 = x0_141;
            s_8 = (x22_15 | 1);
            size_t var_4b8_1 = x0_139;
        }
        else
        {
            x24_10 = &*s_8[1];
            s_8 = (x0_139 << 1);
        }
        if ((x0_139 >= 0x17 || (x0_139 < 0x17 && x0_139 != 0)))
        {
            memcpy(x24_10, x23, x0_139);
        }
        *(x24_10 + x0_139) = 0;
        int32_t x0_144;
        x0_144 = g3::logLevel(&var_4c8);
        cv::Mat* x20_14 = var_6e8_1;
        x22_13 = arg7;
        int32_t x21_24;
        if ((x0_144 & 1) == 0)
        {
            x21_24 = 0;
            if ((s_8 & 1) != 0)
            {
            label_4cc84:
                operator delete(var_4b0_1);
                if ((x21_24 & 1) != 0)
                {
                    goto label_4cb6c;
                }
            }
        }
        else
        {
            int64_t var_4d8_1 = 0;
            int64_t var_4d8_2;
            __builtin_strncpy(&var_4d8_2, "l_region", 0x10);
            int64_t var_4e0 = 0;
            var_4e0 = 0x1e;
            __builtin_strncpy(&*var_4e0[1], "feasibal", 8);
            void* var_4d0;
            var_4d0 = 0;
            int32_t x0_146;
            x0_146 = g3::logTag(&var_4e0);
            x21_24 = x0_146;
            if ((var_4e0 & 1) != 0)
            {
                operator delete(var_4d0);
                if ((s_8 & 1) != 0)
                {
                    goto label_4cc84;
                }
            }
            else if ((s_8 & 1) != 0)
            {
                goto label_4cc84;
            }
        }
        if (((((((x0_144 & 1) == 0 && (s_8 & 1) == 0) || (x0_144 & 1) != 0) && (x21_24 & 1) == 0) || ((x0_144 & 1) == 0 && (s_8 & 1) != 0)) && x19_20 == 0))
        {
            goto label_4cc64;
        }
        if (((((x0_144 & 1) == 0 && (s_8 & 1) == 0) || (x0_144 & 1) != 0) && (x21_24 & 1) != 0))
        {
        label_4cb6c:
            LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
            *(x20_14 + 0x600);
            *(x20_14 + 0x604);
            *(x20_14 + 0x608);
            LogCapture::capturef();
            LogCapture::~LogCapture();
            if (x19_20 == 0)
            {
                goto label_4cc64;
            }
        }
        if ((((((((x0_144 & 1) == 0 && (s_8 & 1) == 0) || (x0_144 & 1) != 0) && (x21_24 & 1) == 0) || ((x0_144 & 1) == 0 && (s_8 & 1) != 0)) && x19_20 != 0) || ((((x0_144 & 1) == 0 && (s_8 & 1) == 0) || (x0_144 & 1) != 0) && (x21_24 & 1) != 0)))
        {
            if (x19_20 != 1)
            {
            label_4cc58:
                x19_20 = 1;
            label_4cc64:
                var_730 = 0xbf800000;
                if (x19_20 != 0)
                {
                    x19_23 = 1;
                }
                else
                {
                    x19_23 = 0;
                }
                x27_8 = 1;
                goto label_4ce68;
            }
            v0_9 = *(*(x20_14 + 0x610) + 0xa4);
            int32_t x0_149 = CAPE::judgPlaneValid(x20_14, &var_c8, v0_9, 0.125663713f, 25f);
            char* x23_6;
            if ((*data_70090 & 1) == 0)
            {
                x23_6 = &*(data_70090 + 1);
            }
            else
            {
                x23_6 = *(data_7009a + 6);
            }
            int32_t var_500 = data_70088;
            int64_t s_7;
            __builtin_memset(&s_7, 0, 0x18);
            size_t x0_151 = strlen(x23_6);
            if (x0_151 < -0x10)
            {
                goto label_4db80;
            }
            void* var_4e8_1;
            void* x24_11;
            if (x0_151 >= 0x17)
            {
                uint64_t x22_21 = ((x0_151 + 0x10) & 0xfffffffffffffff0);
                void* x0_214 = operator new(x22_21);
                x24_11 = x0_214;
                var_4e8_1 = x0_214;
                s_7 = (x22_21 | 1);
                size_t var_4f0_1 = x0_151;
            }
            else
            {
                x24_11 = &*s_7[1];
                s_7 = (x0_151 << 1);
            }
            if ((x0_151 >= 0x17 || (x0_151 < 0x17 && x0_151 != 0)))
            {
                memcpy(x24_11, x23_6, x0_151);
            }
            *(x24_11 + x0_151) = 0;
            x22_13 = arg7;
            int32_t x21_31;
            if ((g3::logLevel(&var_500) & 1) == 0)
            {
                x21_31 = 0;
            }
            else
            {
                int64_t var_510_1 = 0;
                int64_t var_510_2;
                __builtin_strncpy(&var_510_2, "l_region", 0x10);
                int64_t var_518 = 0;
                var_518 = 0x1e;
                __builtin_strncpy(&*var_518[1], "feasibal", 8);
                void* var_508;
                var_508 = 0;
                x21_31 = g3::logTag(&var_518);
                if ((var_518 & 1) != 0)
                {
                    operator delete(var_508);
                }
            }
            x19_20 = (x0_149 & 1);
            if ((s_7 & 1) != 0)
            {
                operator delete(var_4e8_1);
            }
            if ((x21_31 & 1) != 0)
            {
                LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
                LogCapture::capturef();
                LogCapture::~LogCapture();
            }
            goto label_4cc64;
        }
    }
    char* x21_13;
    if ((*data_70090 & 1) == 0)
    {
        x21_13 = &*(data_70090 + 1);
    label_4be98:
        int32_t var_570 = data_70088;
        int64_t s_5;
        __builtin_memset(&s_5, 0, 0x18);
        size_t x0_68 = strlen(x21_13);
        if (x0_68 < -0x10)
        {
            goto label_4db50;
        }
        void* var_558_1;
        if (x0_68 >= 0x17)
        {
            uint64_t x22_6 = ((x0_68 + 0x10) & 0xfffffffffffffff0);
            void* x0_71 = operator new(x22_6);
            x24 = x0_71;
            var_558_1 = x0_71;
            s_5 = (x22_6 | 1);
            size_t var_560_1 = x0_68;
        }
        else
        {
            x24 = &*s_5[1];
            s_5 = (x0_68 << 1);
        }
        if ((x0_68 >= 0x17 || (x0_68 < 0x17 && x0_68 != 0)))
        {
            memcpy(x24, x21_13, x0_68);
        }
        *(x24 + x0_68) = 0;
        cv::Mat* x0_74 = g3::logLevel(&var_570);
        int32_t* x20_10 = var_6e8_1;
        int32_t x19_16;
        if ((x0_74 & 1) == 0)
        {
            x19_16 = 0;
            if ((s_5 & 1) != 0)
            {
            label_4c038:
                x0_74 = operator delete(var_558_1);
                if ((x19_16 & 1) != 0)
                {
                    goto label_4c064;
                }
            }
        }
        else
        {
            int64_t var_580_1 = 0;
            int64_t var_580_2;
            __builtin_strncpy(&var_580_2, "l_region", 0x10);
            int64_t var_588 = 0;
            var_588 = 0x1e;
            __builtin_strncpy(&*var_588[1], "feasibal", 8);
            void* var_578;
            var_578 = 0;
            x0_74 = g3::logTag(&var_588);
            x19_16 = x0_74;
            if ((var_588 & 1) != 0)
            {
                x0_74 = operator delete(var_578);
                if ((s_5 & 1) != 0)
                {
                    goto label_4c038;
                }
            }
            else if ((s_5 & 1) != 0)
            {
                goto label_4c038;
            }
        }
        if (((((x0_74 & 1) == 0 && (s_5 & 1) == 0) || (x0_74 & 1) != 0) && (x19_16 & 1) != 0))
        {
        label_4c064:
            LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
            LogCapture::capturef();
            x0_74 = LogCapture::~LogCapture();
        }
        CAPE::imageScore(x0_74, arg7);
        void* x22_8 = *x25_2;
        int64_t x21_14 = *(x25_2 + 8);
        var_730 = 0xbf800000;
        void* x0_167;
        if (x21_14 != x22_8)
        {
            int32_t var_738_1 = -1;
            var_710 = 0x7f7fffff;
            int64_t x26_9 = 0;
            int64_t i_23 = 0;
            size_t x0_86;
            int64_t i_9;
            do
            {
                void* x8_153 = (x22_8 + x26_9);
                int32_t x11_19 = *(x8_153 + 0x50);
                int32_t x10_31 = *(x8_153 + 0x54);
                v0_9 = x20_10[0x180];
                double v1_7;
                v1_7 = x20_10[0x181];
                int32_t x9_63 = *(x8_153 + 0x58);
                int32_t x22_9 = *(x8_153 + 0x5c);
                float v2_6 = x20_10[0x182];
                v11 = x11_19;
                v12 = x10_31;
                v10 = x9_63;
                float v3_3 = (((v0_9 * v0_9) + (v1_7 * v1_7)) + (v2_6 * v2_6));
                float v4_3 = (((v11 * v11) + (v12 * v12)) + (v10 * v10));
                /* unimplemented  {fsqrt s3, s3} */;
                /* unimplemented  {fsqrt s4, s4} */;
                v0_9 = (v0_9 / v3_3);
                v1_7 = (v1_7 / v3_3);
                v0_9 = ((v11 / v4_3) * v0_9);
                v1_7 = ((v12 / v4_3) * v1_7);
                v0_9 = (v0_9 + v1_7);
                v1_7 = ((v10 / v4_3) * (v2_6 / v3_3));
                v0_9 = (v1_7 + v0_9);
                /* unimplemented  {fabs s1, s0} */;
                v1_7 = (v1_7 + -1f);
                /* unimplemented  {fabs s1, s1} */;
                arg9 = 0f;
                var_6f0_1 = x10_31;
                if (!(v1_7 < 0.0001))
                {
                    double v2_7;
                    v2_7 = (3.1415926535897931 - acosf(v0_9));
                    /* unimplemented  {fabs s8, s0} */;
                }
                v9 = x20_10[0x147];
                v14 = *((var_290 + (i_23 << 2)) + 4);
                char* x21_15;
                if ((*data_70090 & 1) == 0)
                {
                    x21_15 = &*(data_70090 + 1);
                }
                else
                {
                    x21_15 = *(data_7009a + 6);
                }
                int32_t var_5a8 = data_70088;
                int64_t s_4;
                __builtin_memset(&s_4, 0, 0x18);
                x0_86 = strlen(x21_15);
                if (x0_86 < -0x10)
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                    break;
                }
                int64_t i_35;
                if (x0_86 >= 0x17)
                {
                    uint64_t x22_10 = ((x0_86 + 0x10) & 0xfffffffffffffff0);
                    int64_t i_30 = operator new(x22_10);
                    i_28 = i_30;
                    i_35 = i_30;
                    s_4 = (x22_10 | 1);
                    size_t var_598_1 = x0_86;
                }
                else
                {
                    i_28 = &*s_4[1];
                    s_4 = (x0_86 << 1);
                }
                if ((x0_86 >= 0x17 || (x0_86 < 0x17 && x0_86 != 0)))
                {
                    memcpy(i_28, x21_15, x0_86);
                }
                *(i_28 + x0_86) = 0;
                int32_t x21_16;
                if ((g3::logLevel(&var_5a8) & 1) == 0)
                {
                    x21_16 = 0;
                }
                else
                {
                    int64_t var_5c0 = 0;
                    int64_t var_5b8_1 = 0;
                    var_5c0 = 0x1e;
                    void* var_5b0_1 = nullptr;
                    __builtin_strncpy((&var_5c0 | 1), "feasibal_region", 0xf);
                    var_5b0_1 = 0;
                    x21_16 = g3::logTag(&var_5c0);
                    if ((var_5c0 & 1) != 0)
                    {
                        operator delete(var_5b0_1);
                    }
                }
                /* unimplemented  {fabd s13, s9, s0} */;
                arg9 = arg9;
                if ((s_4 & 1) != 0)
                {
                    operator delete(i_35);
                }
                v9 = ((v14 * 0.5) + (((arg9 / 0.035000000000000003) + (arg10 / 15.0)) * 0.5));
                if ((x21_16 & 1) != 0)
                {
                    int128_t v1_10;
                    int128_t v3_4;
                    v1_10 = LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
                    v3_4 = v9;
                    v1_10 = var_6e8_1[0x147];
                    *((*arg5 + x26_9) + 0x5c);
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                }
                if ((*data_70090 & 1) == 0)
                {
                    x24 = &*(data_70090 + 1);
                }
                else
                {
                    x24 = *(data_7009a + 6);
                }
                int32_t var_5e0 = data_70088;
                int64_t s_3;
                __builtin_memset(&s_3, 0, 0x18);
                size_t x0_97 = strlen(x24);
                if (x0_97 < -0x10)
                {
                    break;
                }
                void* i_34;
                if (x0_97 >= 0x17)
                {
                    uint64_t x22_11 = ((x0_97 + 0x10) & 0xfffffffffffffff0);
                    void* i_31 = operator new(x22_11);
                    i_28 = i_31;
                    size_t var_5d0_1 = x0_97;
                    i_34 = i_31;
                    s_3 = (x22_11 | 1);
                }
                else
                {
                    i_28 = &*s_3[1];
                    s_3 = (x0_97 << 1);
                }
                if ((x0_97 >= 0x17 || (x0_97 < 0x17 && x0_97 != 0)))
                {
                    memcpy(i_28, x24, x0_97);
                }
                *(i_28 + x0_97) = 0;
                int32_t x0_101;
                x0_101 = g3::logLevel(&var_5e0);
                x20_10 = var_6e8_1;
                int32_t x21_18;
                if ((x0_101 & 1) == 0)
                {
                    x21_18 = 0;
                    if ((s_3 & 1) != 0)
                    {
                    label_4c4f4:
                        v0_9 = operator delete(i_34);
                        if ((x21_18 & 1) != 0)
                        {
                            goto label_4c520;
                        }
                    }
                }
                else
                {
                    int64_t var_5f8 = 0;
                    int64_t var_5f0_1 = 0;
                    var_5f8 = 0x1e;
                    void* var_5e8_1 = nullptr;
                    __builtin_strncpy((&var_5f8 | 1), "feasibal_region", 0xf);
                    var_5e8_1 = 0;
                    int32_t x0_103;
                    x0_103 = g3::logTag(&var_5f8);
                    x21_18 = x0_103;
                    if ((var_5f8 & 1) != 0)
                    {
                        v0_9 = operator delete(var_5e8_1);
                        if ((s_3 & 1) != 0)
                        {
                            goto label_4c4f4;
                        }
                    }
                    else if ((s_3 & 1) != 0)
                    {
                        goto label_4c4f4;
                    }
                }
                if (((((x0_101 & 1) == 0 && (s_3 & 1) == 0) || (x0_101 & 1) != 0) && (x21_18 & 1) != 0))
                {
                label_4c520:
                    int128_t v0_13;
                    int128_t v1_11;
                    int128_t v2_11;
                    v0_13 = LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
                    x20_10[0x180];
                    x20_10[0x181];
                    x20_10[0x182];
                    v0_13 = v11;
                    v1_11 = v12;
                    v2_11 = v10;
                    LogCapture::capturef();
                    v0_9 = LogCapture::~LogCapture();
                }
                i_9 = (i_23 + 1);
                if (!(arg9 >= 0.20943333333333333))
                {
                    v0_9 = 0x41f00000;
                    if (!(arg10 >= 30f))
                    {
                        v0_9 = 0x7f7fffff;
                        if (!(3.40282347e+38f <= v9))
                        {
                            *var_c0_1[4] = x22_9;
                            var_730 = v9;
                            var_738_1 = i_23;
                            var_c8 = x11_19;
                            var_710 = v9;
                            *var_c8[4] = var_6f0_1;
                            var_c0_1 = x9_63;
                        }
                    }
                }
                x22_8 = *arg5;
                x21_14 = *(arg5 + 8);
                x26_9 = (x26_9 + 0xa8);
                i_23 = i_9;
            } while (i_9 < (((x21_14 - x22_8) >> 3) * -0x30c30c30c30c30c3));
            if (x0_86 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_4db1c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_4db24:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_4db2c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_4db30:
                __stack_chk_fail();
                /* no return */
            }
            if ((var_738_1 & 0x80000000) == 0)
            {
                char* x21_19;
                if ((*data_70090 & 1) == 0)
                {
                    x21_19 = &*(data_70090 + 1);
                }
                else
                {
                    x21_19 = *(data_7009a + 6);
                }
                int32_t var_618 = data_70088;
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                size_t x0_107 = strlen(x21_19);
                if (x0_107 < -0x10)
                {
                    goto label_4db78;
                }
                void* var_600_1;
                void* x24_8;
                if (x0_107 >= 0x17)
                {
                    uint64_t x22_16 = ((x0_107 + 0x10) & 0xfffffffffffffff0);
                    void* x0_154 = operator new(x22_16);
                    x24_8 = x0_154;
                    size_t var_608_1 = x0_107;
                    var_600_1 = x0_154;
                    s_2 = (x22_16 | 1);
                }
                else
                {
                    x24_8 = &*s_2[1];
                    s_2 = (x0_107 << 1);
                }
                if ((x0_107 >= 0x17 || (x0_107 < 0x17 && x0_107 != 0)))
                {
                    memcpy(x24_8, x21_19, x0_107);
                }
                *(x24_8 + x0_107) = 0;
                int32_t x0_157 = g3::logLevel(&var_618);
                int32_t x19_24;
                if ((x0_157 & 1) == 0)
                {
                    x19_24 = 0;
                    if ((s_2 & 1) != 0)
                    {
                    label_4cd38:
                        operator delete(var_600_1);
                        if ((x19_24 & 1) != 0)
                        {
                            goto label_4cd64;
                        }
                    }
                }
                else
                {
                    int64_t var_630 = 0;
                    int64_t var_628_1 = 0;
                    void* var_620_1 = nullptr;
                    var_630 = 0x1e;
                    __builtin_strncpy(&*var_630[1], "feasibal_region", 0x10);
                    x19_24 = g3::logTag(&var_630);
                    if ((var_630 & 1) != 0)
                    {
                        operator delete(var_620_1);
                        if ((s_2 & 1) != 0)
                        {
                            goto label_4cd38;
                        }
                    }
                    else if ((s_2 & 1) != 0)
                    {
                        goto label_4cd38;
                    }
                }
                if (((((x0_157 & 1) == 0 && (s_2 & 1) == 0) || (x0_157 & 1) != 0) && (x19_24 & 1) != 0))
                {
                label_4cd64:
                    LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
                    int128_t v0_18;
                    v0_18 = 0x7f7fffff;
                    v0_18 = 3.40282347e+38f;
                    LogCapture::capturef();
                    LogCapture::~LogCapture();
                }
                if ((CAPE::judgPlaneValid(var_6e8_1, &var_c8, var_6e8_1[0x147], 0.209439516f, 10f) & 1) != 0)
                {
                    char* x21_26;
                    if ((*data_70090 & 1) == 0)
                    {
                        x21_26 = &*(data_70090 + 1);
                    }
                    else
                    {
                        x21_26 = *(data_7009a + 6);
                    }
                    int32_t var_650 = data_70088;
                    int64_t s_1;
                    __builtin_memset(&s_1, 0, 0x18);
                    size_t x0_165 = strlen(x21_26);
                    if (x0_165 < -0x10)
                    {
                        goto label_4db88;
                    }
                    void* var_638_1;
                    void* x24_12;
                    if (x0_165 >= 0x17)
                    {
                        uint64_t x22_22 = ((x0_165 + 0x10) & 0xfffffffffffffff0);
                        void* x0_225 = operator new(x22_22);
                        x24_12 = x0_225;
                        size_t var_640_1 = x0_165;
                        var_638_1 = x0_225;
                        s_1 = (x22_22 | 1);
                    }
                    else
                    {
                        x24_12 = &*s_1[1];
                        s_1 = (x0_165 << 1);
                    }
                    if ((x0_165 >= 0x17 || (x0_165 < 0x17 && x0_165 != 0)))
                    {
                        memcpy(x24_12, x21_26, x0_165);
                    }
                    *(x24_12 + x0_165) = 0;
                    cv::Mat* x0_228 = g3::logLevel(&var_650);
                    int32_t x19_32;
                    uint64_t x20_18;
                    if ((x0_228 & 1) == 0)
                    {
                        x20_18 = arg7;
                        x19_32 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_4d9b8:
                            x0_228 = operator delete(var_638_1);
                            if ((x19_32 & 1) != 0)
                            {
                                goto label_4d978;
                            }
                        }
                    }
                    else
                    {
                        char var_668 = 0xc;
                        int32_t var_667;
                        __builtin_strncpy(&var_667, "region", 0x17);
                        x0_228 = g3::logTag(&var_668);
                        x20_18 = arg7;
                        x19_32 = x0_228;
                        if ((var_668 & 1) != 0)
                        {
                            void* var_658;
                            x0_228 = operator delete(var_658);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_4d9b8;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_4d9b8;
                        }
                    }
                    if (((((((x0_228 & 1) == 0 && (s_1 & 1) == 0) || (x0_228 & 1) != 0) && (x19_32 & 1) == 0) || ((x0_228 & 1) == 0 && (s_1 & 1) != 0)) && var_738_1 >= 1))
                    {
                    label_4d9d8:
                        CAPE::swapPlanes(x0_228, arg5, x20_18, 0);
                    }
                    if (((((x0_228 & 1) == 0 && (s_1 & 1) == 0) || (x0_228 & 1) != 0) && (x19_32 & 1) != 0))
                    {
                    label_4d978:
                        LogCapture::LogCapture(&s_23, "region", &data_70088, &data_54bb5, &nullptr->ident.version);
                        LogCapture::capturef();
                        x0_228 = LogCapture::~LogCapture();
                        if (var_738_1 >= 1)
                        {
                            goto label_4d9d8;
                        }
                    }
                    x27_8 = 1;
                    x0_167 = var_290;
                    if (x0_167 == 0)
                    {
                        goto label_4ce54;
                    }
                    goto label_4ce4c;
                }
                x22_8 = *arg5;
                x21_14 = *(arg5 + 8);
            }
        }
        if (x21_14 == x22_8)
        {
        label_4ce3c:
            x27_8 = 0;
            *var_740_2 = x22_8;
            x0_167 = var_290;
            if (x0_167 == 0)
            {
                goto label_4ce54;
            }
        label_4ce4c:
            var_288 = x0_167;
            operator delete(x0_167);
        label_4ce54:
            x22_13 = arg7;
            x19_23 = x27_8;
        label_4ce68:
            cv::operator==(x22_13, 1.0);
            int64_t* x0_169 = s_23;
            int128_t v0_19;
            v0_19 = 0;
            *v0_19[8] = 0;
            var_290 = 0x42ff0000;
            __builtin_memset(&*var_290[4], 0, 0x3c);
            void** var_250_1 = &var_288;
            int64_t var_240;
            int64_t* var_248_1 = &var_240;
            int64_t var_238_1 = 0;
            var_240 = 0;
            *(*x0_169 + 0x18)(v0_19);
            cv::MatExpr::~MatExpr();
            var_220 = 0;
            s_23 = 0x1010000;
            *s_23[8] = &var_290;
            int32_t x0_171 = cv::countNonZero(&s_23);
            char* x24_13;
            if ((*data_70090 & 1) == 0)
            {
                x24_13 = &*(data_70090 + 1);
            }
            else
            {
                x24_13 = *(data_7009a + 6);
            }
            int32_t var_688 = data_70088;
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            size_t x0_173 = strlen(x24_13);
            if (x0_173 < -0x10)
            {
                goto label_4db2c;
            }
            void* var_670_1;
            void* x25_7;
            if (x0_173 >= 0x17)
            {
                uint64_t x22_17 = ((x0_173 + 0x10) & 0xfffffffffffffff0);
                void* x0_175 = operator new(x22_17);
                x25_7 = x0_175;
                size_t var_678_1 = x0_173;
                var_670_1 = x0_175;
                s = (x22_17 | 1);
            }
            else
            {
                x25_7 = &*s[1];
                s = (x0_173 << 1);
            }
            if ((x0_173 >= 0x17 || (x0_173 < 0x17 && x0_173 != 0)))
            {
                memcpy(x25_7, x24_13, x0_173);
            }
            *(x25_7 + x0_173) = 0;
            int32_t x0_178;
            int128_t v0_20;
            int128_t v1_17;
            double v2_16;
            x0_178 = g3::logLevel(&var_688);
            x24 = var_6e8_1;
            int32_t x23_8;
            if ((x0_178 & 1) == 0)
            {
                x23_8 = 0;
                if ((s & 1) != 0)
                {
                label_4cff4:
                    v0_20 = operator delete(var_670_1);
                    if ((x23_8 & 1) != 0)
                    {
                        goto label_4d020;
                    }
                }
            }
            else
            {
                int64_t var_6a0 = 0;
                int64_t var_698_1 = 0;
                void* var_690_1 = nullptr;
                var_6a0 = 0x1e;
                __builtin_strncpy(&*var_6a0[1], "feasibal_region", 0x10);
                int32_t x0_180;
                x0_180 = g3::logTag(&var_6a0);
                x23_8 = x0_180;
                if ((var_6a0 & 1) != 0)
                {
                    v0_20 = operator delete(var_690_1);
                    if ((s & 1) != 0)
                    {
                        goto label_4cff4;
                    }
                }
                else if ((s & 1) != 0)
                {
                    goto label_4cff4;
                }
            }
            if (((((x0_178 & 1) == 0 && (s & 1) == 0) || (x0_178 & 1) != 0) && (x23_8 & 1) != 0))
            {
            label_4d020:
                LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
                LogCapture::capturef();
                v0_20 = LogCapture::~LogCapture();
            }
            void* i_12 = *x19_13;
            void* x22_18 = *x21_11;
            int64_t x20_16 = (i_12 - x22_18);
            if ((x19_23 & 1) == 0)
            {
                if (x20_16 != 0xb0)
                {
                    goto label_4d4a0;
                }
                *(x22_18 + 0xa8) = (*(x22_18 + 0xa8) + 1);
                uint32_t x10_46 = *data_70090;
                char* x9_78 = *(data_7009a + 6);
                int64_t var_6b0_1 = 0;
                void* var_6a8_1 = nullptr;
                int32_t var_6c0 = data_70088;
                char* x21_28;
                if ((x10_46 & 1) == 0)
                {
                    x21_28 = &*(data_70090 + 1);
                }
                else
                {
                    x21_28 = x9_78;
                }
                int64_t var_6b8 = 0;
                size_t x0_185 = strlen(x21_28);
                if (x0_185 < -0x10)
                {
                    goto label_4db70;
                }
                void* x22_19;
                if (x0_185 >= 0x17)
                {
                    uint64_t x23_9 = ((x0_185 + 0x10) & 0xfffffffffffffff0);
                    void* x0_192 = operator new(x23_9);
                    x24 = var_6e8_1;
                    x22_19 = x0_192;
                    size_t var_6b0_2 = x0_185;
                    var_6a8_1 = x0_192;
                    var_6b8 = (x23_9 | 1);
                }
                else
                {
                    x22_19 = &*var_6b8[1];
                    var_6b8 = (x0_185 << 1);
                }
                if ((x0_185 >= 0x17 || (x0_185 < 0x17 && x0_185 != 0)))
                {
                    memcpy(x22_19, x21_28, x0_185);
                }
                *(x22_19 + x0_185) = 0;
                int32_t x0_195;
                x0_195 = g3::logLevel(&var_6c0);
                int32_t x19_29;
                if ((x0_195 & 1) == 0)
                {
                    x19_29 = 0;
                    if ((var_6b8 & 1) != 0)
                    {
                    label_4d3a4:
                        v0_20 = operator delete(var_6a8_1);
                        if ((x19_29 & 1) != 0)
                        {
                            goto label_4d3d0;
                        }
                    }
                }
                else
                {
                    int64_t var_6d8 = 0;
                    int64_t var_6d0_1 = 0;
                    var_6d8 = 0x1e;
                    void* var_6c8_1 = nullptr;
                    __builtin_strncpy(&*var_6d8[1], "feasibal_region", 0x10);
                    int32_t x0_197;
                    x0_197 = g3::logTag(&var_6d8);
                    x19_29 = x0_197;
                    if ((var_6d8 & 1) != 0)
                    {
                        v0_20 = operator delete(var_6c8_1);
                        if ((var_6b8 & 1) != 0)
                        {
                            goto label_4d3a4;
                        }
                    }
                    else if ((var_6b8 & 1) != 0)
                    {
                        goto label_4d3a4;
                    }
                }
                if (((((x0_195 & 1) == 0 && (var_6b8 & 1) == 0) || (x0_195 & 1) != 0) && (x19_29 & 1) != 0))
                {
                label_4d3d0:
                    LogCapture::LogCapture(&s_23, "feasibal_region", &data_70088, &data_54bb5, &nullptr->ident.version);
                    *(*(x24 + 0x610) + 0xa8);
                    LogCapture::capturef();
                    v0_20 = LogCapture::~LogCapture();
                }
                void* x19_30 = *(x24 + 0x610);
                if (*(x19_30 + 0xa8) < 4)
                {
                    goto label_4d49c;
                }
                void* x20_17 = *x19_13;
                if (x20_17 != x19_30)
                {
                    do
                    {
                        int64_t x8_250 = *(x20_17 - 0x50);
                        if (x8_250 != 0)
                        {
                            int32_t temp0_13;
                            int32_t i_10;
                            do
                            {
                                temp0_13 = __ldaxr((x8_250 + 0x14));
                                i_10 = __stlxr((temp0_13 - 1), (x8_250 + 0x14));
                            } while (i_10 != 0);
                            if (temp0_13 == 1)
                            {
                                v0_20 = cv::Mat::deallocate();
                            }
                        }
                        int32_t x8_252 = *(x20_17 - 0x84);
                        v0_20 = 0;
                        *v0_20[8] = 0;
                        *(x20_17 - 0x50) = 0;
                        __builtin_memset((x20_17 - 0x78), 0, 0x20);
                        if (x8_252 >= 1)
                        {
                            int64_t x8_253 = *(x20_17 - 0x48);
                            int64_t i_11 = 0;
                            do
                            {
                                *(x8_253 + (i_11 << 2)) = 0;
                                i_11 = (i_11 + 1);
                            } while (i_11 < *(x20_17 - 0x84));
                        }
                        void* x0_201 = *(x20_17 - 0x40);
                        if (x0_201 != (x20_17 - 0x38))
                        {
                            v0_20 = cv::fastFree(x0_201);
                        }
                        x20_17 = (x20_17 - 0xb0);
                    } while (x20_17 != x19_30);
                }
                x27_8 = 0;
                *x19_13 = x19_30;
                goto label_4d4a0;
            }
            int128_t var_260;
            int32_t x8_260;
            if (x20_16 != 0xb0)
            {
                v0_20 = x24[0x147];
                v1_17 = 0x41a00000;
                if (!(v0_20 <= 20f))
                {
                    v1_17 = 0x3e567750;
                    v2_16 = 0x41200000;
                    int32_t x0_188;
                    x0_188 = CAPE::judgPlaneValid(x24, &var_c8, v0_20, v1_17, v2_16);
                    if ((x0_188 & 1) != 0)
                    {
                        int32_t x8_236 = x24[0x166];
                        x24[0x166] = (x8_236 + 1);
                        if (x8_236 < 1)
                        {
                            goto label_4d2f8;
                        }
                        if (x20_16 == 0)
                        {
                            v0_20 = std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::__append(x21_11);
                        }
                        else
                        {
                            if ((x22_18 + 0xb0) != i_12)
                            {
                                do
                                {
                                    int64_t x8_237 = *(i_12 - 0x50);
                                    if (x8_237 != 0)
                                    {
                                        int32_t temp0_12;
                                        int32_t j_8;
                                        do
                                        {
                                            temp0_12 = __ldaxr((x8_237 + 0x14));
                                            j_8 = __stlxr((temp0_12 - 1), (x8_237 + 0x14));
                                        } while (j_8 != 0);
                                        if (temp0_12 == 1)
                                        {
                                            v0_20 = cv::Mat::deallocate();
                                        }
                                    }
                                    int32_t x8_239 = *(i_12 - 0x84);
                                    v0_20 = 0;
                                    *v0_20[8] = 0;
                                    *(i_12 - 0x50) = 0;
                                    __builtin_memset((i_12 - 0x78), 0, 0x20);
                                    if (x8_239 >= 1)
                                    {
                                        int64_t x8_240 = *(i_12 - 0x48);
                                        int64_t j_9 = 0;
                                        do
                                        {
                                            *(x8_240 + (j_9 << 2)) = 0;
                                            j_9 = (j_9 + 1);
                                        } while (j_9 < *(i_12 - 0x84));
                                    }
                                    void* x0_190 = *(i_12 - 0x40);
                                    if (x0_190 != (i_12 - 0x38))
                                    {
                                        v0_20 = cv::fastFree(x0_190);
                                    }
                                    i_12 = (i_12 - 0xb0);
                                } while (i_12 != (x22_18 + 0xb0));
                            }
                            *x19_13 = (x22_18 + 0xb0);
                        }
                        x22_18 = *(x24 + 0x610);
                        *(x22_18 + 0x8c) = var_c8;
                        *(x22_18 + 0x94) = var_c0_1;
                        *(x22_18 + 0xa4) = *var_c0_1[4];
                        if ((x22_18 + 0x28) == &var_290)
                        {
                            goto label_4d560;
                        }
                        int64_t x8_296 = *var_260[8];
                        if (x8_296 != 0)
                        {
                            int32_t i_13;
                            do
                            {
                                i_13 = __stlxr((__ldaxr((x8_296 + 0x14)) + 1), (x8_296 + 0x14));
                            } while (i_13 != 0);
                        }
                        int64_t x8_298 = *(x22_18 + 0x60);
                        if (x8_298 != 0)
                        {
                            int32_t temp0_17;
                            int32_t i_14;
                            do
                            {
                                temp0_17 = __ldaxr((x8_298 + 0x14));
                                i_14 = __stlxr((temp0_17 - 1), (x8_298 + 0x14));
                            } while (i_14 != 0);
                            if (temp0_17 == 1)
                            {
                                v0_20 = cv::Mat::deallocate();
                            }
                        }
                        int32_t x8_300 = *(x22_18 + 0x2c);
                        v0_20 = 0;
                        *v0_20[8] = 0;
                        *(x22_18 + 0x60) = 0;
                        __builtin_memset((x22_18 + 0x38), 0, 0x20);
                        if (x8_300 <= 0)
                        {
                            *(x22_18 + 0x28) = var_290;
                        label_4daec:
                            x8_260 = *var_290[4];
                            if (x8_260 <= 2)
                            {
                                goto label_4d50c;
                            }
                        label_4db00:
                            v0_20 = cv::Mat::copySize((x22_18 + 0x28));
                            goto label_4d548;
                        }
                        int64_t x8_301 = *(x22_18 + 0x68);
                        int64_t x9_100 = 0;
                        int64_t x10_62;
                        do
                        {
                            *(x8_301 + (x9_100 << 2)) = 0;
                            x10_62 = *(x22_18 + 0x2c);
                            x9_100 = (x9_100 + 1);
                        } while (x9_100 < x10_62);
                        *(x22_18 + 0x28) = var_290;
                        if (x10_62 <= 2)
                        {
                            goto label_4daec;
                        }
                        goto label_4db00;
                    }
                label_4d49c:
                    x27_8 = 0;
                label_4d4a0:
                    x24[0x166] = 0;
                label_4d570:
                    v0_20 = *(x24 + 0x538);
                    v1_17 = *(x24 + 0x548);
                    *arg8 = v0_20;
                    arg8[1] = v1_17;
                    arg8[2] = *(x24 + 0x558);
                    arg8[3] = *(x24 + 0x568);
                    int64_t x8_267 = *(x24 + 0x570);
                    arg8[5] = 0;
                    arg8[4] = (arg8 + 8);
                    *(arg8 + 0x48) = &arg8[5];
                    *(arg8 + 0x38) = x8_267;
                    *(arg8 + 0x58) = 0;
                    if (x8_267 != 0)
                    {
                        int32_t i_15;
                        do
                        {
                            i_15 = __stlxr((__ldaxr((x8_267 + 0x14)) + 1), (x8_267 + 0x14));
                        } while (i_15 != 0);
                    }
                    if (((x8_267 == 0 && v0_20 <= 2) || (x8_267 != 0 && x24[0x14f] <= 2)))
                    {
                        int64_t* x8_270 = *(x24 + 0x580);
                        int64_t* x10_56 = *(arg8 + 0x48);
                        *x10_56 = *x8_270;
                        x10_56[1] = x8_270[1];
                    }
                    if (((x8_267 == 0 && v0_20 > 2) || (x8_267 != 0 && x24[0x14f] > 2)))
                    {
                        *(arg8 + 4) = 0;
                        cv::Mat::copySize(arg8);
                    }
                    int64_t x8_273 = *var_260[8];
                    arg8[6] = x27_8;
                    *(arg8 + 0x64) = 0xbf800000;
                    if (x8_273 != 0)
                    {
                        int32_t temp0_15;
                        int32_t i_16;
                        do
                        {
                            temp0_15 = __ldaxr((x8_273 + 0x14));
                            i_16 = __stlxr((temp0_15 - 1), (x8_273 + 0x14));
                        } while (i_16 != 0);
                        if (temp0_15 == 1)
                        {
                            cv::Mat::deallocate();
                        }
                    }
                    *var_260[8] = 0;
                    __builtin_memset(&s_22, 0, 0x20);
                    if (*var_290[4] >= 1)
                    {
                        int64_t i_17 = 0;
                        do
                        {
                            *(var_250_1 + (i_17 << 2)) = 0;
                            i_17 = (i_17 + 1);
                        } while (i_17 < *var_290[4]);
                    }
                    if (var_248_1 != &var_240)
                    {
                        cv::fastFree(var_248_1);
                    }
                    void* s_29 = s_12;
                    if (s_29 != 0)
                    {
                        void* s_49 = s_29;
                        operator delete(s_29);
                    }
                    free(var_3b8);
                    int64_t* s_46 = s_13;
                    if (s_46 != 0)
                    {
                        void* x21_30 = var_388;
                        int64_t* s_30;
                        if (x21_30 == s_46)
                        {
                            s_30 = s_46;
                        }
                        else
                        {
                            do
                            {
                                int64_t* x19_31 = *(x21_30 - 8);
                                x21_30 = (x21_30 - 0x10);
                                if (x19_31 != 0)
                                {
                                    int64_t x9_93;
                                    int32_t i_18;
                                    do
                                    {
                                        x9_93 = __ldaxr(&x19_31[1]);
                                        i_18 = __stlxr((x9_93 - 1), &x19_31[1]);
                                    } while (i_18 != 0);
                                    if (x9_93 == 0)
                                    {
                                        *(*x19_31 + 0x10)(x19_31);
                                        std::__ndk1::__shared_weak_count::__release_weak();
                                        if (x21_30 == s_46)
                                        {
                                            break;
                                        }
                                        continue;
                                    }
                                }
                            } while (x21_30 != s_46);
                            s_30 = s_13;
                        }
                        int64_t* s_51 = s_46;
                        operator delete(s_30);
                    }
                    void* s_31 = s_14;
                    if (s_31 != 0)
                    {
                        void* s_53 = s_31;
                        operator delete(s_31);
                    }
                    int64_t* s_32 = s_16;
                    if (s_32 != 0)
                    {
                        operator delete(s_32);
                    }
                    free(s_17);
                    void* s_33 = s_19;
                    if (s_33 != 0)
                    {
                        void* s_56 = s_33;
                        operator delete(s_33);
                    }
                    void* s_34 = s_20;
                    if (s_34 != 0)
                    {
                        void* s_58 = s_34;
                        operator delete(s_34);
                    }
                    void* s_35 = s_21;
                    if (s_35 != 0)
                    {
                        s_35 = operator delete(s_35);
                    }
                    if (*(var_798_1 + 0x28) == x8)
                    {
                        arg9 = var_68;
                        return s_35;
                    }
                    goto label_4db30;
                }
            label_4d2f8:
                x27_8 = 0;
                goto label_4d570;
            }
            x24[0x166] = 0;
            v0_20 = 0x3ecccccd;
            *v0_20[4] = 0x3ecccccd;
            v1_17 = *(x22_18 + 0x8c);
            v2_16 = 0x3f19999a;
            int64_t v3_7 = var_c8;
            v0_20 = (v1_17 * 0.400000006f);
            *v0_20[4] = (*v1_17[4] * 0.400000006f);
            v1_17 = 0x3f19999a;
            *v1_17[4] = 0x3f19999a;
            v1_17 = (v3_7 * 0.600000024f);
            *v1_17[4] = (*v3_7[4] * 0.600000024f);
            v3_7 = *(x22_18 + 0x94);
            v2_16 = (var_c0_1 * 0.600000024f);
            v0_20 = (v0_20 + v1_17);
            *v0_20[4] = (*v0_20[4] + *v1_17[4]);
            *(x22_18 + 0x8c) = v0_20;
            v1_17 = (v3_7 * 0.400000006f);
            v1_17 = (v1_17 + v2_16);
            *(x22_18 + 0x94) = v1_17;
            v2_16 = *(x22_18 + 0xa4);
            v1_17 = *var_c0_1[4];
            v0_20 = 0x3fe3333330000000;
            v2_16 = (v2_16 * 0.400000006f);
            v1_17 = v1_17;
            v0_20 = (v1_17 * 0.59999999403953552);
            v0_20 = (v0_20 + v2_16);
            v0_20 = v0_20;
            *(x22_18 + 0xa4) = v0_20;
            if ((x22_18 + 0x28) == &var_290)
            {
                goto label_4d560;
            }
            int64_t x8_224 = *var_260[8];
            if (x8_224 != 0)
            {
                int32_t i_19;
                do
                {
                    i_19 = __stlxr((__ldaxr((x8_224 + 0x14)) + 1), (x8_224 + 0x14));
                } while (i_19 != 0);
            }
            int64_t x8_226 = *(x22_18 + 0x60);
            if (x8_226 != 0)
            {
                int32_t temp0_11;
                int32_t i_20;
                do
                {
                    temp0_11 = __ldaxr((x8_226 + 0x14));
                    i_20 = __stlxr((temp0_11 - 1), (x8_226 + 0x14));
                } while (i_20 != 0);
                if (temp0_11 == 1)
                {
                    v0_20 = cv::Mat::deallocate();
                }
            }
            int32_t x8_228 = *(x22_18 + 0x2c);
            v0_20 = 0;
            *v0_20[8] = 0;
            *(x22_18 + 0x60) = 0;
            __builtin_memset((x22_18 + 0x38), 0, 0x20);
            if (x8_228 <= 0)
            {
                *(x22_18 + 0x28) = var_290;
            label_4d500:
                x8_260 = *var_290[4];
                if (x8_260 > 2)
                {
                label_4d53c:
                    v0_20 = cv::Mat::copySize((x22_18 + 0x28));
                label_4d548:
                    *(x22_18 + 0x38) = s_22;
                    int128_t var_270;
                    *(x22_18 + 0x48) = var_270;
                    *(x22_18 + 0x58) = var_260;
                    x22_18 = *(x24 + 0x610);
                label_4d560:
                    *(x22_18 + 0x88) = x0_171;
                    x27_8 = 1;
                    goto label_4d570;
                }
            label_4d50c:
                *(x22_18 + 0x2c) = x8_260;
                int64_t* x10_51 = *(x22_18 + 0x70);
                *(x22_18 + 0x30) = var_288;
                *x10_51 = *var_248_1;
                x10_51[1] = var_248_1[1];
                goto label_4d548;
            }
            int64_t x8_229 = *(x22_18 + 0x68);
            int64_t x9_77 = 0;
            int64_t x10_45;
            do
            {
                *(x8_229 + (x9_77 << 2)) = 0;
                x10_45 = *(x22_18 + 0x2c);
                x9_77 = (x9_77 + 1);
            } while (x9_77 < x10_45);
            *(x22_18 + 0x28) = var_290;
            if (x10_45 <= 2)
            {
                goto label_4d500;
            }
            goto label_4d53c;
        }
        do
        {
            x21_14 = (x21_14 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (x22_8 != x21_14);
        goto label_4ce3c;
    }
    x21_13 = *(data_7009a + 6);
    goto label_4be98;
}

int64_t sub_4db90(int64_t arg1, int64_t arg2 @ x26, void* arg3, int64_t arg4, void* arg5, void* arg6, void* arg7, void* arg8, int64_t arg9, void* arg10, void* arg11, void* arg12, int32_t arg13, int64_t arg14, int64_t arg15, void* arg16)
{
    if (arg14 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg14 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg14 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg14 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg13 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg15 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg13);
    }
    if (arg16 != arg2)
    {
        cv::fastFree(arg16);
    }
    if (arg3 != 0)
    {
        arg_3e8 = arg3;
        operator delete(arg3);
    }
    free(arg4);
    if (arg5 != 0)
    {
        void* x22_1 = arg6;
        void* x0_5;
        if (x22_1 == arg5)
        {
            x0_5 = arg5;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_3;
                    int32_t i_2;
                    do
                    {
                        x9_3 = __ldaxr(&x20_1[1]);
                        i_2 = __stlxr((x9_3 - 1), &x20_1[1]);
                    } while (i_2 != 0);
                    if (x9_3 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg5)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg5);
            x0_5 = arg5;
        }
        arg6 = arg5;
        operator delete(x0_5);
    }
    if (arg7 != 0)
    {
        arg_440 = arg7;
        operator delete(arg7);
    }
    if (arg8 != 0)
    {
        operator delete(arg8);
    }
    free(arg9);
    if (arg10 != 0)
    {
        arg_4c0 = arg10;
        operator delete(arg10);
    }
    void* x0_12 = arg11;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg12;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg12;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4db94(int64_t arg1, void* arg2, int64_t arg3, void* arg4, void* arg5, void* arg6, void* arg7, int64_t arg8, void* arg9, void* arg10, void* arg11, void* arg12)
{
    LogCapture::~LogCapture();
    void* x0_1;
    if (arg12 != 0)
    {
        arg_528 = arg12;
        operator delete(arg12);
        x0_1 = arg2;
    }
    else
    {
        x0_1 = arg2;
    }
    if (((arg12 != 0 && x0_1 != 0) || (arg12 == 0 && x0_1 != 0)))
    {
        arg_3e8 = x0_1;
        operator delete(x0_1);
    }
    free(arg3);
    if (arg4 != 0)
    {
        void* x22_1 = arg5;
        void* x0_5;
        if (x22_1 == arg4)
        {
            x0_5 = arg4;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg4)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg4);
            x0_5 = arg4;
        }
        arg5 = arg4;
        operator delete(x0_5);
    }
    if (arg6 != 0)
    {
        arg_440 = arg6;
        operator delete(arg6);
    }
    if (arg7 != 0)
    {
        operator delete(arg7);
    }
    free(arg8);
    if (arg9 != 0)
    {
        arg_4c0 = arg9;
        operator delete(arg9);
    }
    void* x0_12 = arg10;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg11;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg11;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4db9c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15, void* arg16)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg16;
        void* x0_3;
        if (x0_2 == 0)
        {
        label_4e278:
            x0_3 = arg6;
            if (x0_3 != 0)
            {
            label_4e280:
                arg_3e8 = x0_3;
                operator delete(x0_3);
            }
        }
        else
        {
        label_4e14c:
            arg_528 = x0_2;
            operator delete(x0_2);
            x0_3 = arg6;
            if (x0_3 != 0)
            {
                goto label_4e280;
            }
        }
        free(arg7);
        if (arg8 != 0)
        {
            void* x22_1 = arg9;
            void* x0_7;
            if (x22_1 == arg8)
            {
                x0_7 = arg8;
            }
            else
            {
                do
                {
                    int64_t* x20_1 = *(x22_1 - 8);
                    x22_1 = (x22_1 - 0x10);
                    if (x20_1 != 0)
                    {
                        int64_t x9_1;
                        int32_t i;
                        do
                        {
                            x9_1 = __ldaxr(&x20_1[1]);
                            i = __stlxr((x9_1 - 1), &x20_1[1]);
                        } while (i != 0);
                        if (x9_1 == 0)
                        {
                            *(*x20_1 + 0x10)(x20_1);
                            std::__ndk1::__shared_weak_count::__release_weak();
                            if (x22_1 == arg8)
                            {
                                break;
                            }
                            continue;
                        }
                    }
                } while (x22_1 != arg8);
                x0_7 = arg8;
            }
            arg9 = arg8;
            operator delete(x0_7);
        }
        if (arg10 != 0)
        {
            arg_440 = arg10;
            operator delete(arg10);
        }
        if (arg11 != 0)
        {
            operator delete(arg11);
        }
        free(arg12);
        if (arg13 != 0)
        {
            arg_4c0 = arg13;
            operator delete(arg13);
        }
        void* x0_14 = arg14;
        void* x0_12;
        if (x0_14 != 0)
        {
            while (true)
            {
                arg_4f8 = x0_14;
                operator delete(x0_14);
                x0_12 = arg15;
                if (x0_12 != 0)
                {
                    break;
                }
            label_4e360:
                x0_14 = _Unwind_Resume(arg1);
            }
        }
        else
        {
            x0_12 = arg15;
            if (x0_12 == 0)
            {
                goto label_4e360;
            }
        }
        operator delete(x0_12);
        _Unwind_Resume(arg1);
        /* tailcall */
        return CAPE::RegionGrowing();
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg16;
        if (x0_2 == 0)
        {
            goto label_4e278;
        }
        goto label_4e14c;
    }
}

int64_t sub_4dbbc(int64_t arg1, void* arg2, int64_t arg3, void* arg4, void* arg5, void* arg6, void* arg7, int64_t arg8, void* arg9, void* arg10, void* arg11)
{
    LogCapture::~LogCapture();
    if (arg2 != 0)
    {
        arg_3e8 = arg2;
        operator delete(arg2);
    }
    free(arg3);
    if (arg4 != 0)
    {
        void* x22_1 = arg5;
        void* x0_4;
        if (x22_1 == arg4)
        {
            x0_4 = arg4;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg4)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg4);
            x0_4 = arg4;
        }
        arg5 = arg4;
        operator delete(x0_4);
    }
    if (arg6 != 0)
    {
        arg_440 = arg6;
        operator delete(arg6);
    }
    if (arg7 != 0)
    {
        operator delete(arg7);
    }
    free(arg8);
    if (arg9 != 0)
    {
        arg_4c0 = arg9;
        operator delete(arg9);
    }
    void* x0_11 = arg10;
    void* x0_9;
    if (x0_11 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_11;
            operator delete(x0_11);
            x0_9 = arg11;
            if (x0_9 != 0)
            {
                break;
            }
        label_4e360:
            x0_11 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_9 = arg11;
        if (x0_9 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_9);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dbc0(int64_t arg1, void* arg2, int64_t arg3, void* arg4, void* arg5, void* arg6, void* arg7, int64_t arg8, void* arg9, void* arg10, void* arg11)
{
    if (arg2 != 0)
    {
        arg_3e8 = arg2;
        operator delete(arg2);
    }
    free(arg3);
    if (arg4 != 0)
    {
        void* x22_1 = arg5;
        void* x0_4;
        if (x22_1 == arg4)
        {
            x0_4 = arg4;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg4)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg4);
            x0_4 = arg4;
        }
        arg5 = arg4;
        operator delete(x0_4);
    }
    if (arg6 != 0)
    {
        arg_440 = arg6;
        operator delete(arg6);
    }
    if (arg7 != 0)
    {
        operator delete(arg7);
    }
    free(arg8);
    if (arg9 != 0)
    {
        arg_4c0 = arg9;
        operator delete(arg9);
    }
    void* x0_11 = arg10;
    void* x0_9;
    if (x0_11 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_11;
            operator delete(x0_11);
            x0_9 = arg11;
            if (x0_9 != 0)
            {
                break;
            }
        label_4e360:
            x0_11 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_9 = arg11;
        if (x0_9 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_9);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dbc4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg7);
    if (arg8 != 0)
    {
        void* x22_1 = arg9;
        void* x0_6;
        if (x22_1 == arg8)
        {
            x0_6 = arg8;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg8)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg8);
            x0_6 = arg8;
        }
        arg9 = arg8;
        operator delete(x0_6);
    }
    if (arg10 != 0)
    {
        arg_440 = arg10;
        operator delete(arg10);
    }
    if (arg11 != 0)
    {
        operator delete(arg11);
    }
    free(arg12);
    if (arg13 != 0)
    {
        arg_4c0 = arg13;
        operator delete(arg13);
    }
    void* x0_13 = arg14;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg15;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg15;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dbe4(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13, void* arg14)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg14;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg14;
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && x0_1 == 0) || ((arg2 & 1) != 0 && x0_1 == 0)))
    {
        x0_2 = arg4;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_528 = x0_1;
        operator delete(x0_1);
        x0_2 = arg4;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_6;
        if (x22_1 == arg6)
        {
            x0_6 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_6 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_6);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_13 = arg12;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg13;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg13;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dc00(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15, void* arg16)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg16;
        void* x0_3;
        if (x0_2 == 0)
        {
        label_4e278:
            x0_3 = arg6;
            if (x0_3 != 0)
            {
            label_4e280:
                arg_3e8 = x0_3;
                operator delete(x0_3);
            }
        }
        else
        {
        label_4e14c:
            arg_528 = x0_2;
            operator delete(x0_2);
            x0_3 = arg6;
            if (x0_3 != 0)
            {
                goto label_4e280;
            }
        }
        free(arg7);
        if (arg8 != 0)
        {
            void* x22_1 = arg9;
            void* x0_7;
            if (x22_1 == arg8)
            {
                x0_7 = arg8;
            }
            else
            {
                do
                {
                    int64_t* x20_1 = *(x22_1 - 8);
                    x22_1 = (x22_1 - 0x10);
                    if (x20_1 != 0)
                    {
                        int64_t x9_1;
                        int32_t i;
                        do
                        {
                            x9_1 = __ldaxr(&x20_1[1]);
                            i = __stlxr((x9_1 - 1), &x20_1[1]);
                        } while (i != 0);
                        if (x9_1 == 0)
                        {
                            *(*x20_1 + 0x10)(x20_1);
                            std::__ndk1::__shared_weak_count::__release_weak();
                            if (x22_1 == arg8)
                            {
                                break;
                            }
                            continue;
                        }
                    }
                } while (x22_1 != arg8);
                x0_7 = arg8;
            }
            arg9 = arg8;
            operator delete(x0_7);
        }
        if (arg10 != 0)
        {
            arg_440 = arg10;
            operator delete(arg10);
        }
        if (arg11 != 0)
        {
            operator delete(arg11);
        }
        free(arg12);
        if (arg13 != 0)
        {
            arg_4c0 = arg13;
            operator delete(arg13);
        }
        void* x0_14 = arg14;
        void* x0_12;
        if (x0_14 != 0)
        {
            while (true)
            {
                arg_4f8 = x0_14;
                operator delete(x0_14);
                x0_12 = arg15;
                if (x0_12 != 0)
                {
                    break;
                }
            label_4e360:
                x0_14 = _Unwind_Resume(arg1);
            }
        }
        else
        {
            x0_12 = arg15;
            if (x0_12 == 0)
            {
                goto label_4e360;
            }
        }
        operator delete(x0_12);
        _Unwind_Resume(arg1);
        /* tailcall */
        return CAPE::RegionGrowing();
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg16;
        if (x0_2 == 0)
        {
            goto label_4e278;
        }
        goto label_4e14c;
    }
}

int64_t sub_4dc20(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg4;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg4;
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_3e8 = x0_1;
        operator delete(x0_1);
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_5;
        if (x22_1 == arg6)
        {
            x0_5 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_5 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_5);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_12 = arg12;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg13;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg13;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dc34(int64_t arg1, int64_t arg2 @ x26, void* arg3, int64_t arg4, void* arg5, void* arg6, void* arg7, void* arg8, int64_t arg9, void* arg10, void* arg11, void* arg12, int32_t arg13, int64_t arg14, int64_t arg15, void* arg16)
{
    LogCapture::~LogCapture();
    if (arg14 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg14 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg14 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg14 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg13 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg15 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg13);
    }
    if (arg16 != arg2)
    {
        cv::fastFree(arg16);
    }
    if (arg3 != 0)
    {
        arg_3e8 = arg3;
        operator delete(arg3);
    }
    free(arg4);
    if (arg5 != 0)
    {
        void* x22_1 = arg6;
        void* x0_5;
        if (x22_1 == arg5)
        {
            x0_5 = arg5;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_3;
                    int32_t i_2;
                    do
                    {
                        x9_3 = __ldaxr(&x20_1[1]);
                        i_2 = __stlxr((x9_3 - 1), &x20_1[1]);
                    } while (i_2 != 0);
                    if (x9_3 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg5)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg5);
            x0_5 = arg5;
        }
        arg6 = arg5;
        operator delete(x0_5);
    }
    if (arg7 != 0)
    {
        arg_440 = arg7;
        operator delete(arg7);
    }
    if (arg8 != 0)
    {
        operator delete(arg8);
    }
    free(arg9);
    if (arg10 != 0)
    {
        arg_4c0 = arg10;
        operator delete(arg10);
    }
    void* x0_12 = arg11;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg12;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg12;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dc3c(int64_t arg1, int64_t arg2 @ x26, char arg3, void* arg4, char arg5, void* arg6, void* arg7, int64_t arg8, void* arg9, void* arg10, void* arg11, void* arg12, int64_t arg13, void* arg14, void* arg15, void* arg16, int32_t arg17, int64_t arg18, int64_t arg19, void* arg20)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    int64_t x8_2;
    if ((((arg3 & 1) == 0 && (arg5 & 1) == 0) || ((arg3 & 1) != 0 && (arg5 & 1) == 0)))
    {
        x8_2 = arg18;
        if (x8_2 != 0)
        {
        label_4dffc:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
        x8_2 = arg18;
        if (x8_2 != 0)
        {
            goto label_4dffc;
        }
    }
    arg18 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg17 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg19 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg17);
    }
    if (arg20 != arg2)
    {
        cv::fastFree(arg20);
    }
    if (arg7 != 0)
    {
        arg_3e8 = arg7;
        operator delete(arg7);
    }
    free(arg8);
    if (arg9 != 0)
    {
        void* x22_1 = arg10;
        void* x0_7;
        if (x22_1 == arg9)
        {
            x0_7 = arg9;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_3;
                    int32_t i_2;
                    do
                    {
                        x9_3 = __ldaxr(&x20_1[1]);
                        i_2 = __stlxr((x9_3 - 1), &x20_1[1]);
                    } while (i_2 != 0);
                    if (x9_3 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg9)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg9);
            x0_7 = arg9;
        }
        arg10 = arg9;
        operator delete(x0_7);
    }
    if (arg11 != 0)
    {
        arg_440 = arg11;
        operator delete(arg11);
    }
    if (arg12 != 0)
    {
        operator delete(arg12);
    }
    free(arg13);
    if (arg14 != 0)
    {
        arg_4c0 = arg14;
        operator delete(arg14);
    }
    void* x0_14 = arg15;
    void* x0_12;
    if (x0_14 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_14;
            operator delete(x0_14);
            x0_12 = arg16;
            if (x0_12 != 0)
            {
                break;
            }
        label_4e360:
            x0_14 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_12 = arg16;
        if (x0_12 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_12);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dc68(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg7);
    if (arg8 != 0)
    {
        void* x22_1 = arg9;
        void* x0_6;
        if (x22_1 == arg8)
        {
            x0_6 = arg8;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg8)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg8);
            x0_6 = arg8;
        }
        arg9 = arg8;
        operator delete(x0_6);
    }
    if (arg10 != 0)
    {
        arg_440 = arg10;
        operator delete(arg10);
    }
    if (arg11 != 0)
    {
        operator delete(arg11);
    }
    free(arg12);
    if (arg13 != 0)
    {
        arg_4c0 = arg13;
        operator delete(arg13);
    }
    void* x0_13 = arg14;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg15;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg15;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dc98(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg7);
    if (arg8 != 0)
    {
        void* x22_1 = arg9;
        void* x0_6;
        if (x22_1 == arg8)
        {
            x0_6 = arg8;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg8)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg8);
            x0_6 = arg8;
        }
        arg9 = arg8;
        operator delete(x0_6);
    }
    if (arg10 != 0)
    {
        arg_440 = arg10;
        operator delete(arg10);
    }
    if (arg11 != 0)
    {
        operator delete(arg11);
    }
    free(arg12);
    if (arg13 != 0)
    {
        arg_4c0 = arg13;
        operator delete(arg13);
    }
    void* x0_13 = arg14;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg15;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg15;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dcb8(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg7);
    if (arg8 != 0)
    {
        void* x22_1 = arg9;
        void* x0_6;
        if (x22_1 == arg8)
        {
            x0_6 = arg8;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg8)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg8);
            x0_6 = arg8;
        }
        arg9 = arg8;
        operator delete(x0_6);
    }
    if (arg10 != 0)
    {
        arg_440 = arg10;
        operator delete(arg10);
    }
    if (arg11 != 0)
    {
        operator delete(arg11);
    }
    free(arg12);
    if (arg13 != 0)
    {
        arg_4c0 = arg13;
        operator delete(arg13);
    }
    void* x0_13 = arg14;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg15;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg15;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dcdc(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13, void* arg14)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg14;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg14;
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && x0_1 == 0) || ((arg2 & 1) != 0 && x0_1 == 0)))
    {
        x0_2 = arg4;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_528 = x0_1;
        operator delete(x0_1);
        x0_2 = arg4;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_6;
        if (x22_1 == arg6)
        {
            x0_6 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_6 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_6);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_13 = arg12;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg13;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg13;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dcf4(int64_t arg1, int64_t arg2 @ x26, char arg3, void* arg4, void* arg5, int64_t arg6, void* arg7, void* arg8, void* arg9, void* arg10, int64_t arg11, void* arg12, void* arg13, void* arg14, int32_t arg15, int64_t arg16, int64_t arg17, void* arg18)
{
    int64_t x8_1;
    if ((arg3 & 1) == 0)
    {
        x8_1 = arg16;
    }
    else
    {
        operator delete(arg4);
        x8_1 = arg16;
    }
    if ((((arg3 & 1) == 0 && x8_1 != 0) || ((arg3 & 1) != 0 && x8_1 != 0)))
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((x8_1 + 0x14));
            i = __stlxr((temp0_1 - 1), (x8_1 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg16 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg15 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg17 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg15);
    }
    if (arg18 != arg2)
    {
        cv::fastFree(arg18);
    }
    if (arg5 != 0)
    {
        arg_3e8 = arg5;
        operator delete(arg5);
    }
    free(arg6);
    if (arg7 != 0)
    {
        void* x22_1 = arg8;
        void* x0_6;
        if (x22_1 == arg7)
        {
            x0_6 = arg7;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_3;
                    int32_t i_2;
                    do
                    {
                        x9_3 = __ldaxr(&x20_1[1]);
                        i_2 = __stlxr((x9_3 - 1), &x20_1[1]);
                    } while (i_2 != 0);
                    if (x9_3 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg7)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg7);
            x0_6 = arg7;
        }
        arg8 = arg7;
        operator delete(x0_6);
    }
    if (arg9 != 0)
    {
        arg_440 = arg9;
        operator delete(arg9);
    }
    if (arg10 != 0)
    {
        operator delete(arg10);
    }
    free(arg11);
    if (arg12 != 0)
    {
        arg_4c0 = arg12;
        operator delete(arg12);
    }
    void* x0_13 = arg13;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg14;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg14;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dd08(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg4;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg4;
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_3e8 = x0_1;
        operator delete(x0_1);
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_5;
        if (x22_1 == arg6)
        {
            x0_5 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_5 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_5);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_12 = arg12;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg13;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg13;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dd1c(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg4;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg4;
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_3e8 = x0_1;
        operator delete(x0_1);
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_5;
        if (x22_1 == arg6)
        {
            x0_5 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_5 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_5);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_12 = arg12;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg13;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg13;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dd30(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg4;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg4;
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_3e8 = x0_1;
        operator delete(x0_1);
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_5;
        if (x22_1 == arg6)
        {
            x0_5 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_5 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_5);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_12 = arg12;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg13;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg13;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dd54(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg7);
    if (arg8 != 0)
    {
        void* x22_1 = arg9;
        void* x0_6;
        if (x22_1 == arg8)
        {
            x0_6 = arg8;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg8)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg8);
            x0_6 = arg8;
        }
        arg9 = arg8;
        operator delete(x0_6);
    }
    if (arg10 != 0)
    {
        arg_440 = arg10;
        operator delete(arg10);
    }
    if (arg11 != 0)
    {
        operator delete(arg11);
    }
    free(arg12);
    if (arg13 != 0)
    {
        arg_4c0 = arg13;
        operator delete(arg13);
    }
    void* x0_13 = arg14;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg15;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg15;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4dd74(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg7);
    if (arg8 != 0)
    {
        void* x22_1 = arg9;
        void* x0_6;
        if (x22_1 == arg8)
        {
            x0_6 = arg8;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg8)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg8);
            x0_6 = arg8;
        }
        arg9 = arg8;
        operator delete(x0_6);
    }
    if (arg10 != 0)
    {
        arg_440 = arg10;
        operator delete(arg10);
    }
    if (arg11 != 0)
    {
        operator delete(arg11);
    }
    free(arg12);
    if (arg13 != 0)
    {
        arg_4c0 = arg13;
        operator delete(arg13);
    }
    void* x0_13 = arg14;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg15;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg15;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

void sub_4dd94(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t sub_4ddb4(int64_t arg1, int64_t arg2 @ x26, char arg3, void* arg4, char arg5, void* arg6, void* arg7, int64_t arg8, void* arg9, void* arg10, void* arg11, void* arg12, int64_t arg13, void* arg14, void* arg15, void* arg16, int32_t arg17, int64_t arg18, int64_t arg19, void* arg20)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    int64_t x8_2;
    if ((((arg3 & 1) == 0 && (arg5 & 1) == 0) || ((arg3 & 1) != 0 && (arg5 & 1) == 0)))
    {
        x8_2 = arg18;
        if (x8_2 != 0)
        {
        label_4dffc:
            int32_t temp0_1;
            int32_t i;
            do
            {
                temp0_1 = __ldaxr((x8_2 + 0x14));
                i = __stlxr((temp0_1 - 1), (x8_2 + 0x14));
            } while (i != 0);
            if (temp0_1 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
        x8_2 = arg18;
        if (x8_2 != 0)
        {
            goto label_4dffc;
        }
    }
    arg18 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg17 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg19 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg17);
    }
    if (arg20 != arg2)
    {
        cv::fastFree(arg20);
    }
    if (arg7 != 0)
    {
        arg_3e8 = arg7;
        operator delete(arg7);
    }
    free(arg8);
    if (arg9 != 0)
    {
        void* x22_1 = arg10;
        void* x0_7;
        if (x22_1 == arg9)
        {
            x0_7 = arg9;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_3;
                    int32_t i_2;
                    do
                    {
                        x9_3 = __ldaxr(&x20_1[1]);
                        i_2 = __stlxr((x9_3 - 1), &x20_1[1]);
                    } while (i_2 != 0);
                    if (x9_3 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg9)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg9);
            x0_7 = arg9;
        }
        arg10 = arg9;
        operator delete(x0_7);
    }
    if (arg11 != 0)
    {
        arg_440 = arg11;
        operator delete(arg11);
    }
    if (arg12 != 0)
    {
        operator delete(arg12);
    }
    free(arg13);
    if (arg14 != 0)
    {
        arg_4c0 = arg14;
        operator delete(arg14);
    }
    void* x0_14 = arg15;
    void* x0_12;
    if (x0_14 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_14;
            operator delete(x0_14);
            x0_12 = arg16;
            if (x0_12 != 0)
            {
                break;
            }
        label_4e360:
            x0_14 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_12 = arg16;
        if (x0_12 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_12);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4ddd8(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg4;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg4;
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_3e8 = x0_1;
        operator delete(x0_1);
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_5;
        if (x22_1 == arg6)
        {
            x0_5 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_5 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_5);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_12 = arg12;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg13;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg13;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4ddec(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg4;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg4;
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_3e8 = x0_1;
        operator delete(x0_1);
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_5;
        if (x22_1 == arg6)
        {
            x0_5 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_5 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_5);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_12 = arg12;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg13;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg13;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4de1c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg7);
    if (arg8 != 0)
    {
        void* x22_1 = arg9;
        void* x0_6;
        if (x22_1 == arg8)
        {
            x0_6 = arg8;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg8)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg8);
            x0_6 = arg8;
        }
        arg9 = arg8;
        operator delete(x0_6);
    }
    if (arg10 != 0)
    {
        arg_440 = arg10;
        operator delete(arg10);
    }
    if (arg11 != 0)
    {
        operator delete(arg11);
    }
    free(arg12);
    if (arg13 != 0)
    {
        arg_4c0 = arg13;
        operator delete(arg13);
    }
    void* x0_13 = arg14;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg15;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg15;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4de54(int64_t arg1, void* arg2, void* arg3, void* arg4)
{
    if (arg2 != 0)
    {
        arg_4c0 = arg2;
        operator delete(arg2);
    }
    void* x0_3 = arg3;
    void* x0_1;
    if (x0_3 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_3;
            operator delete(x0_3);
            x0_1 = arg4;
            if (x0_1 != 0)
            {
                break;
            }
        label_4e360:
            x0_3 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_1 = arg4;
        if (x0_1 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_1);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4de58(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7, void* arg8)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) != 0 && (arg4 & 1) == 0) || ((arg2 & 1) == 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg6;
        if (x0_2 != 0)
        {
        label_4e344:
            arg_4c0 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) != 0 && (arg4 & 1) != 0) || ((arg2 & 1) == 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg6;
        if (x0_2 != 0)
        {
            goto label_4e344;
        }
    }
    void* x0_5 = arg7;
    void* x0_3;
    if (x0_5 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_5;
            operator delete(x0_5);
            x0_3 = arg8;
            if (x0_3 != 0)
            {
                break;
            }
        label_4e360:
            x0_5 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_3 = arg8;
        if (x0_3 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_3);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

void sub_4dedc(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t sub_4df04(int64_t arg1, int64_t arg2 @ x26, void* arg3, int64_t arg4, void* arg5, void* arg6, void* arg7, void* arg8, int64_t arg9, void* arg10, void* arg11, void* arg12, int32_t arg13, int64_t arg14, int64_t arg15, void* arg16)
{
    if (arg14 != 0)
    {
        int32_t temp0_1;
        int32_t i;
        do
        {
            temp0_1 = __ldaxr((arg14 + 0x14));
            i = __stlxr((temp0_1 - 1), (arg14 + 0x14));
        } while (i != 0);
        if (temp0_1 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    arg14 = 0;
    __builtin_memset(&s, 0, 0x20);
    if (arg13 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(arg15 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < arg13);
    }
    if (arg16 != arg2)
    {
        cv::fastFree(arg16);
    }
    cv::MatExpr::~MatExpr();
    if (arg3 != 0)
    {
        arg_3e8 = arg3;
        operator delete(arg3);
    }
    free(arg4);
    if (arg5 != 0)
    {
        void* x22_1 = arg6;
        void* x0_5;
        if (x22_1 == arg5)
        {
            x0_5 = arg5;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_3;
                    int32_t i_2;
                    do
                    {
                        x9_3 = __ldaxr(&x20_1[1]);
                        i_2 = __stlxr((x9_3 - 1), &x20_1[1]);
                    } while (i_2 != 0);
                    if (x9_3 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg5)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg5);
            x0_5 = arg5;
        }
        arg6 = arg5;
        operator delete(x0_5);
    }
    if (arg7 != 0)
    {
        arg_440 = arg7;
        operator delete(arg7);
    }
    if (arg8 != 0)
    {
        operator delete(arg8);
    }
    free(arg9);
    if (arg10 != 0)
    {
        arg_4c0 = arg10;
        operator delete(arg10);
    }
    void* x0_12 = arg11;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg12;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg12;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

void sub_4df7c(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t sub_4df9c(int64_t arg1, void* arg2, void* arg3, void* arg4, void* arg5, int64_t arg6, void* arg7, void* arg8, void* arg9)
{
    if (arg2 != 0)
    {
        void* x22_1 = arg3;
        void* x0_2;
        if (x22_1 == arg2)
        {
            x0_2 = arg2;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg2)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg2);
            x0_2 = arg2;
        }
        arg3 = arg2;
        operator delete(x0_2);
    }
    if (arg4 != 0)
    {
        arg_440 = arg4;
        operator delete(arg4);
    }
    if (arg5 != 0)
    {
        operator delete(arg5);
    }
    free(arg6);
    if (arg7 != 0)
    {
        arg_4c0 = arg7;
        operator delete(arg7);
    }
    void* x0_9 = arg8;
    void* x0_7;
    if (x0_9 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_9;
            operator delete(x0_9);
            x0_7 = arg9;
            if (x0_7 != 0)
            {
                break;
            }
        label_4e360:
            x0_9 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_7 = arg9;
        if (x0_7 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_7);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

void sub_4e058(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t sub_4e0a4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, void* arg11, int64_t arg12, void* arg13, void* arg14, void* arg15, void* arg16)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && (arg4 & 1) == 0) || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        x0_2 = arg16;
        void* x0_3;
        if (x0_2 == 0)
        {
        label_4e278:
            x0_3 = arg6;
            if (x0_3 != 0)
            {
            label_4e280:
                arg_3e8 = x0_3;
                operator delete(x0_3);
            }
        }
        else
        {
        label_4e14c:
            arg_528 = x0_2;
            operator delete(x0_2);
            x0_3 = arg6;
            if (x0_3 != 0)
            {
                goto label_4e280;
            }
        }
        free(arg7);
        if (arg8 != 0)
        {
            void* x22_1 = arg9;
            void* x0_7;
            if (x22_1 == arg8)
            {
                x0_7 = arg8;
            }
            else
            {
                do
                {
                    int64_t* x20_1 = *(x22_1 - 8);
                    x22_1 = (x22_1 - 0x10);
                    if (x20_1 != 0)
                    {
                        int64_t x9_1;
                        int32_t i;
                        do
                        {
                            x9_1 = __ldaxr(&x20_1[1]);
                            i = __stlxr((x9_1 - 1), &x20_1[1]);
                        } while (i != 0);
                        if (x9_1 == 0)
                        {
                            *(*x20_1 + 0x10)(x20_1);
                            std::__ndk1::__shared_weak_count::__release_weak();
                            if (x22_1 == arg8)
                            {
                                break;
                            }
                            continue;
                        }
                    }
                } while (x22_1 != arg8);
                x0_7 = arg8;
            }
            arg9 = arg8;
            operator delete(x0_7);
        }
        if (arg10 != 0)
        {
            arg_440 = arg10;
            operator delete(arg10);
        }
        if (arg11 != 0)
        {
            operator delete(arg11);
        }
        free(arg12);
        if (arg13 != 0)
        {
            arg_4c0 = arg13;
            operator delete(arg13);
        }
        void* x0_14 = arg14;
        void* x0_12;
        if (x0_14 != 0)
        {
            while (true)
            {
                arg_4f8 = x0_14;
                operator delete(x0_14);
                x0_12 = arg15;
                if (x0_12 != 0)
                {
                    break;
                }
            label_4e360:
                x0_14 = _Unwind_Resume(arg1);
            }
        }
        else
        {
            x0_12 = arg15;
            if (x0_12 == 0)
            {
                goto label_4e360;
            }
        }
        operator delete(x0_12);
        _Unwind_Resume(arg1);
        /* tailcall */
        return CAPE::RegionGrowing();
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        x0_2 = arg16;
        if (x0_2 == 0)
        {
            goto label_4e278;
        }
        goto label_4e14c;
    }
}

int64_t sub_4e0cc(int64_t arg1, int64_t* arg2 @ x24, int64_t* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13)
{
    free(*arg2);
    free(*arg3);
    if (arg4 != 0)
    {
        arg_3e8 = arg4;
        operator delete(arg4);
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_6;
        if (x22_1 == arg6)
        {
            x0_6 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_6 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_6);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_13 = arg12;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg13;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg13;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4e0e0(int64_t arg1, int64_t* arg2, void* arg3, int64_t arg4, void* arg5, void* arg6, void* arg7, void* arg8, int64_t arg9, void* arg10, void* arg11, void* arg12)
{
    free(*arg2);
    if (arg3 != 0)
    {
        arg_3e8 = arg3;
        operator delete(arg3);
    }
    free(arg4);
    if (arg5 != 0)
    {
        void* x22_1 = arg6;
        void* x0_5;
        if (x22_1 == arg5)
        {
            x0_5 = arg5;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg5)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg5);
            x0_5 = arg5;
        }
        arg6 = arg5;
        operator delete(x0_5);
    }
    if (arg7 != 0)
    {
        arg_440 = arg7;
        operator delete(arg7);
    }
    if (arg8 != 0)
    {
        operator delete(arg8);
    }
    free(arg9);
    if (arg10 != 0)
    {
        arg_4c0 = arg10;
        operator delete(arg10);
    }
    void* x0_12 = arg11;
    void* x0_10;
    if (x0_12 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_12;
            operator delete(x0_12);
            x0_10 = arg12;
            if (x0_10 != 0)
            {
                break;
            }
        label_4e360:
            x0_12 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_10 = arg12;
        if (x0_10 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_10);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4e100(int64_t arg1, char arg2, void* arg3, void* arg4, int64_t arg5, void* arg6, void* arg7, void* arg8, void* arg9, int64_t arg10, void* arg11, void* arg12, void* arg13, void* arg14)
{
    void* x0_1;
    if ((arg2 & 1) == 0)
    {
        x0_1 = arg14;
    }
    else
    {
        operator delete(arg3);
        x0_1 = arg14;
    }
    void* x0_2;
    if ((((arg2 & 1) == 0 && x0_1 == 0) || ((arg2 & 1) != 0 && x0_1 == 0)))
    {
        x0_2 = arg4;
        if (x0_2 != 0)
        {
        label_4e280:
            arg_3e8 = x0_2;
            operator delete(x0_2);
        }
    }
    if ((((arg2 & 1) == 0 && x0_1 != 0) || ((arg2 & 1) != 0 && x0_1 != 0)))
    {
        arg_528 = x0_1;
        operator delete(x0_1);
        x0_2 = arg4;
        if (x0_2 != 0)
        {
            goto label_4e280;
        }
    }
    free(arg5);
    if (arg6 != 0)
    {
        void* x22_1 = arg7;
        void* x0_6;
        if (x22_1 == arg6)
        {
            x0_6 = arg6;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_1;
                    int32_t i;
                    do
                    {
                        x9_1 = __ldaxr(&x20_1[1]);
                        i = __stlxr((x9_1 - 1), &x20_1[1]);
                    } while (i != 0);
                    if (x9_1 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == arg6)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != arg6);
            x0_6 = arg6;
        }
        arg7 = arg6;
        operator delete(x0_6);
    }
    if (arg8 != 0)
    {
        arg_440 = arg8;
        operator delete(arg8);
    }
    if (arg9 != 0)
    {
        operator delete(arg9);
    }
    free(arg10);
    if (arg11 != 0)
    {
        arg_4c0 = arg11;
        operator delete(arg11);
    }
    void* x0_13 = arg12;
    void* x0_11;
    if (x0_13 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_13;
            operator delete(x0_13);
            x0_11 = arg13;
            if (x0_11 != 0)
            {
                break;
            }
        label_4e360:
            x0_13 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_11 = arg13;
        if (x0_11 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_11);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

int64_t sub_4e1bc(int64_t arg1, int64_t* arg2, void* arg3, void* arg4, void* arg5, void* arg6, int64_t arg7, void* arg8, void* arg9, void* arg10, int64_t* arg11, void* arg12)
{
    int64_t x9_1;
    if (arg2 != 0)
    {
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&arg2[1]);
            i = __stlxr((x9_1 - 1), &arg2[1]);
        } while (i != 0);
    }
    int64_t* x20;
    if ((arg2 == 0 || (arg2 != 0 && x9_1 != 0)))
    {
        x20 = arg11;
        if (x20 != 0)
        {
        label_4e220:
            int64_t x9_2;
            int32_t i_1;
            do
            {
                x9_2 = __ldaxr(&x20[1]);
                i_1 = __stlxr((x9_2 - 1), &x20[1]);
            } while (i_1 != 0);
            if (x9_2 == 0)
            {
                *(*x20 + 0x10)(x20);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
    }
    if ((arg2 != 0 && x9_1 == 0))
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
        x20 = arg11;
        if (x20 != 0)
        {
            goto label_4e220;
        }
    }
    void* x21;
    if (arg12 == 0)
    {
        x21 = arg3;
    }
    else
    {
        arg_588 = arg12;
        operator delete(arg12);
        x21 = arg3;
    }
    if (((arg12 == 0 && x21 != 0) || (arg12 != 0 && x21 != 0)))
    {
        void* x22_1 = arg4;
        void* x0_7;
        if (x22_1 == x21)
        {
            x0_7 = x21;
        }
        else
        {
            do
            {
                int64_t* x20_1 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_1 != 0)
                {
                    int64_t x9_3;
                    int32_t i_2;
                    do
                    {
                        x9_3 = __ldaxr(&x20_1[1]);
                        i_2 = __stlxr((x9_3 - 1), &x20_1[1]);
                    } while (i_2 != 0);
                    if (x9_3 == 0)
                    {
                        *(*x20_1 + 0x10)(x20_1);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == x21)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != x21);
            x0_7 = arg3;
        }
        arg4 = x21;
        operator delete(x0_7);
    }
    if (arg5 != 0)
    {
        arg_440 = arg5;
        operator delete(arg5);
    }
    if (arg6 != 0)
    {
        operator delete(arg6);
    }
    free(arg7);
    if (arg8 != 0)
    {
        arg_4c0 = arg8;
        operator delete(arg8);
    }
    void* x0_14 = arg9;
    void* x0_12;
    if (x0_14 != 0)
    {
        while (true)
        {
            arg_4f8 = x0_14;
            operator delete(x0_14);
            x0_12 = arg10;
            if (x0_12 != 0)
            {
                break;
            }
        label_4e360:
            x0_14 = _Unwind_Resume(arg1);
        }
    }
    else
    {
        x0_12 = arg10;
        if (x0_12 == 0)
        {
            goto label_4e360;
        }
    }
    operator delete(x0_12);
    _Unwind_Resume(arg1);
    /* tailcall */
    return CAPE::RegionGrowing();
}

void CAPE::RegionGrowing(void* arg1, int32_t arg2, int32_t arg3, int64_t arg4, int64_t arg5, int64_t* arg6, int64_t* arg7, int32_t arg8, int128_t arg9 @ v0, int128_t arg10 @ v8, int16_t arg11, int32_t* arg12)
{
    int64_t var_70 = arg10;
    uint32_t x27 = arg11;
    int32_t x8 = (arg2 & 0xffff);
    uint64_t x8_2 = ((x27 * x8) + arg8);
    if (*(arg4 + x8_2) != 0)
    {
        int32_t* x24_1 = arg12;
        arg10 = arg9;
        void* x26_1 = arg1;
        uint64_t x28_1 = (arg8 & 0xffff);
        while (*(arg5 + x8_2) == 0)
        {
            void* x9_10 = *(*arg6 + (x8_2 << 4));
            arg9 = *x24_1;
            double v1;
            v1 = x24_1[1];
            float v2 = x24_1[2];
            if ((((arg9 * *(x9_10 + 0x50)) + (v1 * *(x9_10 + 0x54))) + (v2 * *(x9_10 + 0x58))) < *(x26_1 + 0x14))
            {
                break;
            }
            arg9 = (arg9 * *(x9_10 + 0x44));
            v1 = (v1 * *(x9_10 + 0x48));
            arg9 = (arg9 + v1);
            arg9 = (arg9 + (v2 * *(x9_10 + 0x4c)));
            arg9 = (arg10 + arg9);
            arg9 = arg9;
            arg9 = (arg9 * arg9);
            v1 = *(*arg7 + (x8_2 << 2));
            if (arg9 > v1)
            {
                break;
            }
            arg10 = *(x9_10 + 0x5c);
            x24_1 = (x9_10 + 0x50);
            *(arg5 + x8_2) = 1;
            if ((arg8 & 0xffff) != 0)
            {
                arg1 = CAPE::RegionGrowing(x26_1, arg2, arg3, arg4, arg5, arg6, arg7, (arg8 - 1), arg10, v1, x27, x24_1, (arg8 + 1), (arg3 - 1), var_70, x8);
            }
            if ((x8 - 1) > x28_1)
            {
                arg1 = CAPE::RegionGrowing(x26_1, arg2, arg3, arg4, arg5, arg6, arg7, (arg8 + 1), arg10, x27, x24_1, (arg8 + 1), (arg3 - 1), var_70, x8);
            }
            if ((x27 & 0xffff) != 0)
            {
                arg1 = CAPE::RegionGrowing(x26_1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg10, (x27 - 1), x24_1, (arg8 + 1), (arg3 - 1), var_70, x8);
            }
            if ((arg3 - 1) <= x27)
            {
                break;
            }
            x27 = (x27 + 1);
            x8_2 = ((x27 * x8) + x28_1);
            if (*(arg4 + x8_2) == 0)
            {
                break;
            }
        }
    }
    arg10 = var_70;
}

int64_t Eigen::Matrix<bool, -1, -1, 0, -1, -1>::Matrix<Eigen::CwiseNullaryOp<Eigen::internal::scalar_constant_op<bool>, Eigen::Matrix<bool, -1, -1, 0, -1, -1> > >(int64_t* arg1, int64_t* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t x22 = *arg2;
    int64_t x23 = arg2[1];
    size_t x2 = (x23 * x22);
    int64_t x1;
    int64_t x2_1;
    int64_t x8_1;
    if (x2 == 0)
    {
        x8_1 = 0;
        x2_1 = x23;
        x1 = x22;
    }
    else
    {
        int64_t var_50;
        int32_t x0_1 = posix_memalign(&var_50, 0x10, x2);
        if (x0_1 != 0)
        {
            var_50 = 0;
        }
        else
        {
            x8_1 = var_50;
        }
        if ((x0_1 != 0 || (x0_1 == 0 && x8_1 == 0)))
        {
            void* thrown_exception = __cxa_allocate_exception(8);
            std::bad_alloc::bad_alloc();
            __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
            /* no return */
        }
        if ((x0_1 == 0 && x8_1 != 0))
        {
            x1 = *arg2;
            x2_1 = arg2[1];
        }
    }
    *arg1 = x8_1;
    arg1[1] = x22;
    arg1[2] = x23;
    if ((x1 != 0 && (x2_1 != 0 && (0x7fffffffffffffff / x2_1) < x1)))
    {
        void* thrown_exception_1 = __cxa_allocate_exception(8);
        std::bad_alloc::bad_alloc();
        __cxa_throw(thrown_exception_1, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
        /* no return */
    }
    int64_t x0_3;
    int128_t v0;
    x0_3 = Eigen::PlainObjectBase<Eigen::Matrix<bool, -1, -1, 0, -1, -1> >::resize(arg1, x1);
    int64_t x9_1 = (arg1[2] * arg1[1]);
    if (x9_1 >= 1)
    {
        void* x10_1 = *arg1;
        int64_t i_4;
        if ((x9_1 < 0x20 || ((x9_1 >= 0x20 && x10_1 < (arg2 + 0x11)) && &arg2[2] < (x10_1 + x9_1))))
        {
            i_4 = 0;
        label_4e670:
            int64_t i_2 = (x9_1 - i_4);
            char* x10_2 = (x10_1 + i_4);
            int64_t i;
            do
            {
                i = i_2;
                i_2 = (i_2 - 1);
                *x10_2 = arg2[2];
                x10_2 = &x10_2[1];
            } while (i != 1);
        }
        if ((x9_1 >= 0x20 && (x10_1 >= (arg2 + 0x11) || (x10_1 < (arg2 + 0x11) && &arg2[2] >= (x10_1 + x9_1)))))
        {
            /* unimplemented  {ld1r {v0.16b}, [x8]} */;
            i_4 = (x9_1 & 0xffffffffffffffe0);
            void* x12_1 = (x10_1 + 0x10);
            int64_t i_3 = i_4;
            int64_t i_1;
            do
            {
                *(x12_1 - 0x10) = v0;
                *x12_1 = v0;
                i_1 = i_3;
                i_3 = (i_3 - 0x20);
                x12_1 = (x12_1 + 0x20);
            } while (i_1 != 0x20);
            if (x9_1 != i_4)
            {
                goto label_4e670;
            }
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_3;
}

void CAPE::getConnectedComponents(uint64_t arg1, void* arg2, int64_t* arg3)
{
    int32_t x15 = (*(arg2 + 8) - 1);
    int64_t x9_1;
    if (x15 > 0)
    {
        int32_t* x10_1 = *(arg2 + 0x10);
        int64_t i = 0;
        int32_t x11_1 = (*(arg2 + 0xc) - 1);
        int64_t x12_2 = **(arg2 + 0x48);
        void* x13_1 = *arg3;
        x9_1 = arg3[1];
        do
        {
            i = (i + 1);
            if (x11_1 >= 1)
            {
                int32_t* x17_1 = x10_1;
                arg1 = x11_1;
                uint64_t j;
                do
                {
                    int64_t x1 = *x17_1;
                    if (x1 >= 1)
                    {
                        int32_t x3_1 = x17_1[1];
                        if ((x3_1 >= 1 && x1 != x3_1))
                        {
                            *((x13_1 + (x1 + (x9_1 * (x3_1 - 1)))) - 1) = 1;
                        }
                        int32_t x3_6 = *(x17_1 + x12_2);
                        if ((x3_6 >= 1 && x1 != x3_6))
                        {
                            *((x13_1 + (x1 + (x9_1 * (x3_6 - 1)))) - 1) = 1;
                        }
                    }
                    j = arg1;
                    arg1 = (arg1 - 1);
                    x17_1 = &x17_1[1];
                } while (j != 1);
            }
            x10_1 = (x10_1 + x12_2);
        } while (i != x15);
    }
    if (((x15 <= 0 && arg3[1] >= 1) || (x15 > 0 && x9_1 >= 1)))
    {
        int64_t x11_2 = arg3[1];
        int64_t x8 = arg3[2];
        char* x10_2 = *arg3;
        int64_t x9_3 = 0;
        int32_t x12_3 = 1;
        do
        {
            int64_t x13_2 = x9_3;
            x9_3 = (x9_3 + 1);
            if (x8 > x9_3)
            {
                int64_t x14_2 = x12_3;
                int64_t x17_2 = x9_3;
                do
                {
                    int64_t x16_1 = (x13_2 + (x11_2 * x17_2));
                    char x17_3;
                    if (x10_2[x16_1] != 0)
                    {
                        x17_3 = 1;
                    }
                    else if (x10_2[((x11_2 * x13_2) + x17_2)] != 0)
                    {
                        x17_3 = 1;
                    }
                    else
                    {
                        x17_3 = 0;
                    }
                    x14_2 = (x14_2 + 1);
                    x10_2[x16_1] = x17_3;
                    x17_2 = x14_2;
                } while (x8 > x14_2);
            }
            x12_3 = (x12_3 + 1);
        } while (x11_2 > x9_3);
    }
}

uint64_t CAPE::getBestPlane(int64_t arg1, void* arg2, void* arg3, int32_t* arg4)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t var_58 = 0;
    int64_t var_50 = 0;
    int64_t x24 = (*arg4 + 1);
    int64_t x9;
    void* x19;
    void* x24_1;
    if (x24 == 0)
    {
        x19 = nullptr;
        x24_1 = nullptr;
        x9 = *(arg2 + 8);
        if (x9 == 0)
        {
        label_4e9cc:
            int64_t x9_2 = ((x24_1 - x19) >> 2);
            int32_t x20_1;
            if (x9_2 < 2)
            {
                x20_1 = 0;
            }
            else
            {
                int32_t x10_2 = 0;
                x20_1 = 0;
                int64_t x11_2 = 1;
                do
                {
                    int32_t x12_2 = *(x19 + (x11_2 << 2));
                    if (x12_2 > x10_2)
                    {
                        x20_1 = x11_2;
                    }
                    x11_2 = (x11_2 + 1);
                    if (x12_2 > x10_2)
                    {
                        x10_2 = x12_2;
                    }
                } while (x11_2 < x9_2);
            }
            if (((x9_2 < 2 && x19 != 0) || (x9_2 >= 2 && x19 != 0)))
            {
                void* var_58_2 = x19;
                operator delete(x19);
            }
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return x20_1;
        }
    }
    else
    {
        if ((x24 & 0x80000000) != 0)
        {
            int64_t x0_9;
            int64_t* x1_6;
            void* x2_2;
            int64_t x3;
            int64_t x4;
            x0_9 = _Unwind_Resume(std::__ndk1::__vector_base_common<true>::__throw_length_error());
            /* tailcall */
            return CAPE::swapPlanes(x0_9, x1_6, x2_2, x3, x4);
        }
        int64_t x22_1 = (x24 << 2);
        void* x0_1 = operator new(x22_1);
        x24_1 = (x0_1 + (x24 << 2));
        x19 = x0_1;
        void* var_60_1 = x0_1;
        void* var_50_1 = x24_1;
        memset(x0_1, 0, x22_1);
        void* var_58_1 = x24_1;
        x9 = *(arg2 + 8);
        if (x9 == 0)
        {
            goto label_4e9cc;
        }
    }
    int32_t x11_1 = *(arg2 + 0xc);
    int64_t x10_1 = 0;
    int32_t x14_1 = x11_1;
    do
    {
        if (x14_1 != 0)
        {
            int64_t x2_1 = x10_1;
            int64_t x14_2 = 0;
            int64_t i = 0;
            void* x16_3 = (*(arg2 + 0x10) + (**(arg2 + 0x48) * x2_1));
            void* x17_3 = (*(arg3 + 0x10) + (**(arg3 + 0x48) * x2_1));
            do
            {
                int64_t x1_1 = (x14_2 >> 0x20);
                uint64_t x0_3 = *(x16_3 + x1_1);
                if ((x0_3 != 0 && (*(x17_3 + x1_1) != 0 && x0_3 < ((x24_1 - x19) >> 2))))
                {
                    uint64_t x0_4 = (x0_3 << 2);
                    *(x19 + x0_4) = (*(x19 + x0_4) + 1);
                }
                i = (i + 1);
                x14_2 = (x14_2 + 0x100000000);
            } while (i < x11_1);
            x14_1 = x11_1;
        }
        x10_1 = (x10_1 + 1);
    } while (x10_1 < x9);
    goto label_4e9cc;
}

int64_t CAPE::swapPlanes(int64_t arg1, int64_t* arg2, void* arg3, int64_t arg4, int64_t arg5)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t x24 = *arg2;
    int64_t x0 = 0;
    int64_t x8_4 = (((arg2[1] - x24) >> 3) * -0x30c30c30c30c30c3);
    if ((x8_4 > arg4 && x8_4 > arg5))
    {
        int128_t* x26_1 = (x24 + (arg4 * 0xa8));
        int128_t var_100_1 = *x26_1;
        int128_t var_f0_1 = x26_1[1];
        int128_t var_c0_1 = x26_1[4];
        int128_t var_b0_1 = x26_1[5];
        int128_t var_e0_1 = x26_1[2];
        int128_t var_d0_1 = x26_1[3];
        void var_a0;
        Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(&var_a0);
        void var_88;
        Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(&var_88);
        void var_70;
        Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(&var_70);
        PlaneSeg::operator=((*arg2 + (arg4 * 0xa8)));
        PlaneSeg::operator=((*arg2 + (arg5 * 0xa8)));
        int32_t x11_1 = *(arg3 + 8);
        if (x11_1 >= 1)
        {
            int64_t x12_1 = *(arg3 + 0xc);
            int64_t i = 0;
            do
            {
                if (x12_1 >= 1)
                {
                    int64_t x11_2 = 0;
                    do
                    {
                        char* x12_4 = (*(arg3 + 0x10) + (i * **(arg3 + 0x48)));
                        uint32_t x14_1 = x12_4[x11_2];
                        char x13_2 = (arg4 + 1);
                        if (x14_1 != (arg5 + 1))
                        {
                            x13_2 = (arg5 + 1);
                        }
                        if ((x14_1 == (arg5 + 1) || (x14_1 != (arg5 + 1) && x14_1 == (arg4 + 1))))
                        {
                            x12_4[x11_2] = x13_2;
                        }
                        x12_1 = *(arg3 + 0xc);
                        x11_2 = (x11_2 + 1);
                    } while (x11_2 < x12_1);
                    x11_1 = *(arg3 + 8);
                }
                i = (i + 1);
            } while (i < x11_1);
        }
        PlaneSeg::~PlaneSeg();
        x0 = 1;
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

uint64_t CAPE::judgPlaneValid(int64_t arg1, int32_t* arg2, int32_t* arg3, int128_t arg4 @ v0, double arg5, float arg6)
{
    int64_t v11;
    v11 = *arg2;
    int64_t v13;
    v13 = arg2[1];
    float v10 = arg5;
    arg4 = *arg3;
    arg5 = arg3[1];
    int64_t v12;
    v12 = arg2[2];
    float v8 = arg6;
    arg6 = arg3[2];
    float v4 = (((v11 * v11) + (v13 * v13)) + (v12 * v12));
    float v5 = (((arg4 * arg4) + (arg5 * arg5)) + (arg6 * arg6));
    /* unimplemented  {fsqrt s4, s4} */;
    /* unimplemented  {fsqrt s5, s5} */;
    arg4 = (arg4 / v5);
    arg5 = (arg5 / v5);
    arg4 = ((v11 / v4) * arg4);
    arg5 = ((v13 / v4) * arg5);
    arg4 = (arg4 + arg5);
    arg4 = (((v12 / v4) * (arg6 / v5)) + arg4);
    double v3;
    v3 = 0xbf800000;
    /* unimplemented  {fabs s1, s0} */;
    arg5 = (arg5 + -1f);
    /* unimplemented  {fabs s1, s1} */;
    int64_t v14;
    v14 = 0f;
    bool cond:0 = arg5 < 0.0001;
    arg5 = 0f;
    if (!(cond:0))
    {
        arg4 = acosf(arg4);
        v3 = arg4;
        arg5 = (3.1415926535897931 - v3);
        if (v3 > 1.5707963267948966)
        {
            arg4 = arg5;
        }
        else
        {
            arg4 = arg4;
        }
        /* unimplemented  {fabs s1, s0} */;
    }
    arg4 = (v11 * v14);
    arg4 = (arg4 + (v13 * v14));
    v3 = (v12 * v14);
    v3 = (v3 + arg2[3]);
    arg4 = (arg4 + v3);
    int32_t x9;
    if (arg5 <= v10)
    {
        x9 = 1;
    }
    else
    {
        x9 = 0;
    }
    /* unimplemented  {fabs s0, s0} */;
    if (arg5 > 0.025000000000000001)
    {
        arg5 = (v8 + 10f);
    }
    else
    {
        arg5 = v8;
    }
    /* unimplemented  {fabd s0, s0, s9} */;
    int32_t x8;
    if (arg4 <= arg5)
    {
        x8 = 1;
    }
    else
    {
        x8 = 0;
    }
    return (x9 & x8);
}

uint64_t CAPE::judgeValidBasedImage(int64_t arg1, cv::Mat* arg2, cv::Mat* arg3, int32_t* arg4, int32_t* arg5)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int32_t* x19 = arg5;
    cv::operator==(arg3, 1.0);
    int64_t* var_240;
    int64_t* x0_1 = var_240;
    int128_t v0_1;
    v0_1 = 0;
    *v0_1[8] = 0;
    int32_t var_e0 = 0x42ff0000;
    int128_t s_4;
    __builtin_memset(&s_4, 0, 0x3c);
    void* var_a0 = &*s_4[4];
    int64_t var_90;
    int64_t* var_98 = &var_90;
    var_90 = 0;
    int64_t var_88 = 0;
    *(*x0_1 + 0x18)(v0_1);
    cv::MatExpr::~MatExpr();
    int32_t* var_238 = &var_e0;
    int64_t var_230 = 0;
    var_240 = 0x1010000;
    int32_t x0_3 = cv::countNonZero(&var_240);
    *x19 = x0_3;
    uint32_t x27 = (*arg4 - x0_3);
    int32_t var_2a0 = 0x42ff0000;
    int128_t s_2;
    __builtin_memset(&s_2, 0, 0x3c);
    void* var_260 = &*s_2[4];
    int64_t var_250;
    int64_t* var_258 = &var_250;
    var_250 = 0;
    int64_t var_248 = 0;
    if (x27 < 1)
    {
        cv::operator-(&var_e0, arg2);
        *(*var_240 + 0x18)();
        cv::MatExpr::~MatExpr();
        x19 = arg4;
    }
    else
    {
        cv::operator-(arg2, &var_e0);
        *(*var_240 + 0x18)();
        cv::MatExpr::~MatExpr();
    }
    int64_t v8;
    v8 = *x19;
    cv::operator>(&var_2a0, 0.0);
    int64_t* x0_9 = var_240;
    int128_t v0_3;
    v0_3 = 0;
    *v0_3[8] = 0;
    int32_t var_300 = 0x42ff0000;
    int128_t s;
    __builtin_memset(&s, 0, 0x3c);
    void* var_2c0 = &*s[4];
    int64_t var_2b0;
    int64_t* var_2b8 = &var_2b0;
    var_2b0 = 0;
    int64_t var_2a8 = 0;
    *(*x0_9 + 0x18)(v0_3);
    cv::MatExpr::~MatExpr();
    int32_t* var_238_1 = &var_300;
    int64_t var_230_1 = 0;
    var_240 = 0x1010000;
    uint32_t x0_11;
    double v0_4;
    double v1;
    x0_11 = cv::countNonZero(&var_240);
    uint32_t x9_1;
    if (x27 < 0)
    {
        x9_1 = -(x27);
    }
    else
    {
        x9_1 = x27;
    }
    v0_4 = vcvts_f32_s32(x0_11);
    float temp0_1 = vcvts_f32_s32(x9_1);
    v1 = vcvts_f32_u32(v8);
    /* unimplemented  {fabd s2, s0, s2} */;
    v1 = (temp0_1 / v1);
    v1 = v1;
    int128_t var_2d0;
    int64_t x8_12;
    int32_t x19_1;
    if (!(v1 > 0.29999999999999999))
    {
        v0_4 = (v0_4 / vcvts_f32_s32((*(var_2c0 + 4) * *var_2c0)));
        v0_4 = v0_4;
        if (v0_4 <= 0.40000000000000002)
        {
            bool n_1;
            if (v0_4 < 0.01)
            {
                (v1 - 0.02);
                n_1 = /* n_1 = unimplemented  {fccmp d1, d3, #0, mi} */;
            }
            else
            {
                n_1 = false;
            }
            if (n_1)
            {
                x19_1 = 2;
            }
            else
            {
                x19_1 = 1;
            }
            x8_12 = *var_2d0[8];
            if (x8_12 != 0)
            {
                goto label_4f024;
            }
        }
    }
    if ((v1 > 0.29999999999999999 || (!(v1 > 0.29999999999999999) && !(v0_4 <= 0.40000000000000002))))
    {
        x19_1 = 0;
        x8_12 = *var_2d0[8];
        if (x8_12 != 0)
        {
        label_4f024:
            int32_t temp0_4;
            int32_t i;
            do
            {
                temp0_4 = __ldaxr((x8_12 + 0x14));
                i = __stlxr((temp0_4 - 1), (x8_12 + 0x14));
            } while (i != 0);
            if (temp0_4 == 1)
            {
                cv::Mat::deallocate();
            }
        }
    }
    int32_t x8_14 = s;
    *var_2d0[8] = 0;
    int128_t s_1;
    __builtin_memset(&s_1, 0, 0x20);
    if (x8_14 >= 1)
    {
        int64_t i_1 = 0;
        do
        {
            *(var_2c0 + (i_1 << 2)) = 0;
            i_1 = (i_1 + 1);
        } while (i_1 < s);
    }
    if (var_2b8 != &var_2b0)
    {
        cv::fastFree(var_2b8);
    }
    int128_t var_270;
    int64_t x8_16 = *var_270[8];
    if (x8_16 != 0)
    {
        int32_t temp0_6;
        int32_t i_2;
        do
        {
            temp0_6 = __ldaxr((x8_16 + 0x14));
            i_2 = __stlxr((temp0_6 - 1), (x8_16 + 0x14));
        } while (i_2 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_18 = s_2;
    *var_270[8] = 0;
    int128_t s_3;
    __builtin_memset(&s_3, 0, 0x20);
    if (x8_18 >= 1)
    {
        int64_t i_3 = 0;
        do
        {
            *(var_260 + (i_3 << 2)) = 0;
            i_3 = (i_3 + 1);
        } while (i_3 < s_2);
    }
    if (var_258 != &var_250)
    {
        cv::fastFree(var_258);
    }
    int128_t var_b0;
    int64_t x8_20 = *var_b0[8];
    if (x8_20 != 0)
    {
        int32_t temp0_7;
        int32_t i_4;
        do
        {
            temp0_7 = __ldaxr((x8_20 + 0x14));
            i_4 = __stlxr((temp0_7 - 1), (x8_20 + 0x14));
        } while (i_4 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_22 = s_4;
    *var_b0[8] = 0;
    int128_t s_5;
    __builtin_memset(&s_5, 0, 0x20);
    if (x8_22 >= 1)
    {
        int64_t i_5 = 0;
        do
        {
            *(var_a0 + (i_5 << 2)) = 0;
            i_5 = (i_5 + 1);
        } while (i_5 < s_4);
    }
    if (var_98 != &var_90)
    {
        cv::fastFree(var_98);
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19_1;
}

uint128_t CAPE::imageScore(int64_t arg1, void* arg2, int32_t* arg3, int64_t* arg4 @ x8)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    int64_t x8_1 = *arg3;
    __builtin_memset(arg4, 0, 0x18);
    int32_t* x8_2;
    int32_t* x19;
    float* x20;
    int32_t* x21;
    float* x23_2;
    void* x26;
    void* x27;
    uint128_t v0;
    uint128_t v1;
    int128_t v6;
    int128_t v7;
    if ((x8_1 + 1) == 0)
    {
        x27 = nullptr;
        x23_2 = nullptr;
        x26 = nullptr;
        x19 = nullptr;
        x20 = nullptr;
        x21 = nullptr;
        x8_2 = nullptr;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x30);
    }
    else
    {
        if (((x8_1 + 1) & 0x80000000) != 0)
        {
            int64_t x0_10 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            void* var_98;
            void* x0_11;
            void* var_80;
            if (var_98 != 0)
            {
                void* var_90_3 = var_98;
                operator delete(var_98);
                x0_11 = var_80;
            }
            else
            {
                x0_11 = var_80;
            }
            void* x0_13;
            if (((var_98 != 0 && x0_11 == 0) || (var_98 == 0 && x0_11 == 0)))
            {
                x0_13 = *arg4;
                if (x0_13 != 0)
                {
                label_4f7d4:
                    arg4[1] = x0_13;
                    operator delete(x0_13);
                }
            }
            if (((var_98 != 0 && x0_11 != 0) || (var_98 == 0 && x0_11 != 0)))
            {
                void* var_78_3 = x0_11;
                operator delete(x0_11);
                x0_13 = *arg4;
                if (x0_13 != 0)
                {
                    goto label_4f7d4;
                }
            }
            int64_t x0_15;
            int32_t* x1;
            int32_t* x2_5;
            x0_15 = _Unwind_Resume(x0_10);
            /* tailcall */
            return CAPE::getVectorAngle(x0_15, x1, x2_5);
        }
        int64_t x24_1 = ((x8_1 + 1) << 2);
        int32_t* x0_1 = operator new(x24_1);
        x26 = &x0_1[(x8_1 + 1)];
        x19 = x0_1;
        *arg4 = x0_1;
        arg4[2] = x26;
        memset(x0_1, 0, x24_1);
        arg4[1] = x26;
        int64_t s_2;
        __builtin_memset(&s_2, 0, 0x18);
        float* x0_3 = operator new(x24_1);
        x27 = (x0_3 + x24_1);
        x20 = x0_3;
        float* var_80_1 = x0_3;
        void* var_70_1 = x27;
        memset(x0_3, 0, x24_1);
        void* var_78_1 = x27;
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        int32_t* x0_5 = operator new(x24_1);
        void* x23_1 = &x0_5[(x8_1 + 1)];
        x21 = x0_5;
        int32_t* var_98_1 = x0_5;
        void* var_88_1 = x23_1;
        v0 = memset(x0_5, 0, x24_1);
        void* var_90_1 = x23_1;
        x23_2 = x20;
        x8_2 = x21;
    }
    int32_t x13 = *(arg2 + 0xc);
    v0 = 0x3fd0000000000000;
    int64_t x12_1 = *(arg2 + 8);
    v1 = 0x3fe8000000000000;
    double temp0 = vcvt_f64_s64(x13);
    v0 = (temp0 * 0.25);
    v1 = (temp0 * 0.75);
    double v2 = (vcvt_f64_s64(x12_1) * 0.55000000000000004);
    int32_t temp0_2 = vcvt_s64_f64(v0);
    int32_t temp0_3 = vcvt_s64_f64(v1);
    int32_t temp0_4 = vcvt_s64_f64(v2);
    if (x12_1 != 0)
    {
        int64_t x14_1 = 0;
        int32_t x2_3 = x13;
        do
        {
            if (x2_3 != 0)
            {
                int64_t x2_4 = 0;
                int64_t i = 0;
                void* x4_3 = (*(arg2 + 0x10) + (**(arg2 + 0x48) * x14_1));
                do
                {
                    uint64_t x5_3 = *(x4_3 + (x2_4 >> 0x20));
                    if ((x5_3 != 0 && x5_3 < ((x27 - x23_2) >> 2)))
                    {
                        uint64_t x5_4 = (x5_3 << 2);
                        *(x8_2 + x5_4) = (*(x8_2 + x5_4) + 1);
                        if ((x14_1 < x12_1 && (x14_1 > temp0_4 && (i > temp0_2 && i < temp0_3))))
                        {
                            *(x23_2 + x5_4) = (*(x23_2 + x5_4) + 1);
                        }
                    }
                    i = (i + 1);
                    x2_4 = (x2_4 + 0x100000000);
                } while (i < x13);
                x2_3 = x13;
            }
            x14_1 = (x14_1 + 1);
        } while (x14_1 < x12_1);
    }
    if (x26 != x19)
    {
        int32_t* x14_2 = *(arg2 + 0x40);
        int32_t x12_3 = *x14_2;
        int32_t x13_2 = x14_2[1];
        int64_t x10_1 = ((x26 - x19) >> 2);
        int64_t x11_2;
        if (x10_1 > 1)
        {
            x11_2 = x10_1;
        }
        else
        {
            x11_2 = 1;
        }
        v0 = vcvts_f32_s32((((1 - temp0_2) + temp0_3) * ((x12_1 + 1) - temp0_4)));
        v1 = vcvts_f32_s32((x12_3 * x13_2));
        int64_t i_3;
        double v4;
        if (x11_2 > 3)
        {
            i_3 = (x11_2 & 0xfffffffffffffffc);
            vdupq_laneq_s32(v0, 0);
            vdupq_laneq_s32(v1, 0);
            v4 = 0x40a00000;
            *v4[4] = 0x40a00000;
            *v4[8] = 0x40a00000;
            *v4[0xc] = 0x40a00000;
            int64_t i_2 = i_3;
            int32_t* x13_3 = x19;
            int32_t* x14_3 = x8_2;
            float* x15_3 = x23_2;
            int64_t i_1;
            do
            {
                v6 = *x15_3;
                x15_3 = &x15_3[4];
                v7 = *x14_3;
                x14_3 = &x14_3[4];
                i_1 = i_2;
                i_2 = (i_2 - 4);
                v6 = vcvt_f32_u32(v6);
                v7 = vcvt_f32_u32(v7);
                /* unimplemented  {fdiv v6.4s, v6.4s, v2.4s} */;
                /* unimplemented  {fdiv v7.4s, v7.4s, v3.4s} */;
                v6 = (v6 + v7);
                *v6[4] = (*v6[4] + *v7[4]);
                *v6[8] = (*v6[8] + *v7[8]);
                *v6[0xc] = (*v6[0xc] + *v7[0xc]);
                v7 = (v6 * 5f);
                *v7[4] = (*v6[4] * 5f);
                *v7[8] = (*v6[8] * 5f);
                *v7[0xc] = (*v6[0xc] * 5f);
                v6 = (v6 * v7);
                *v6[4] = (*v6[4] * *v7[4]);
                *v6[8] = (*v6[8] * *v7[8]);
                *v6[0xc] = (*v6[0xc] * *v7[0xc]);
                v6 = (v6 + 1f);
                *v6[4] = (*v6[4] + 1f);
                *v6[8] = (*v6[8] + 1f);
                *v6[0xc] = (*v6[0xc] + 1f);
                /* unimplemented  {fdiv v6.4s, v5.4s, v6.4s} */;
                *x13_3 = v6;
                x13_3 = &x13_3[4];
            } while (i_1 != 4);
        }
        else
        {
            i_3 = 0;
        }
        if ((x11_2 <= 3 || (x11_2 > 3 && x11_2 != i_3)))
        {
            do
            {
                int64_t x11_3 = (i_3 << 2);
                v4 = *(x8_2 + x11_3);
                float v5 = *(x23_2 + x11_3);
                i_3 = (i_3 + 1);
                v4 = vcvts_f32_u32(v4);
                v4 = (v4 / v1);
                v4 = ((vcvts_f32_u32(v5) / v0) + v4);
                v4 = (v4 * (v4 * 5f));
                v4 = (v4 + 1f);
                v4 = (1f / v4);
                *(x19 + x11_3) = v4;
            } while (x10_1 > i_3);
        }
    }
    if (x8_2 != 0)
    {
        int32_t* var_90_2 = x8_2;
        v0 = operator delete(x21);
    }
    if (x23_2 != 0)
    {
        float* var_78_2 = x23_2;
        v0 = operator delete(x20);
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return v0;
}

float CAPE::getVectorAngle(int64_t arg1, int32_t* arg2, int32_t* arg3)
{
    float v0 = *arg2;
    double v1;
    v1 = arg2[1];
    float v3 = *arg3;
    float v4 = arg3[1];
    float v2 = arg2[2];
    float v5 = arg3[2];
    float v6 = (((v0 * v0) + (v1 * v1)) + (v2 * v2));
    float v7 = (((v3 * v3) + (v4 * v4)) + (v5 * v5));
    /* unimplemented  {fsqrt s6, s6} */;
    /* unimplemented  {fsqrt s7, s7} */;
    v1 = (v1 / v6);
    v1 = (v1 * (v4 / v7));
    v0 = ((((v0 / v6) * (v3 / v7)) + v1) + ((v2 / v6) * (v5 / v7)));
    /* unimplemented  {fabs s1, s0} */;
    v1 = (v1 + -1f);
    /* unimplemented  {fabs s1, s1} */;
    if (!(v1 >= 0.0001))
    {
        return 0f;
    }
    float v0_1 = acosf(v0);
    double v3_1 = v0_1;
    double v1_1;
    v1_1 = (3.1415926535897931 - v3_1);
    if (v3_1 > 1.5707963267948966)
    {
        v0_1 = v1_1;
    }
    /* unimplemented  {fabs s0, s0} */;
    return v0_1;
}

int128_t* PlaneSeg::operator=(int128_t* arg1, int128_t* arg2)
{
    int128_t v1 = arg2[1];
    *arg1 = *arg2;
    arg1[1] = v1;
    v1 = arg2[5];
    int128_t v2 = arg2[2];
    int128_t v3 = arg2[3];
    arg1[4] = arg2[4];
    arg1[5] = v1;
    arg1[2] = v2;
    arg1[3] = v3;
    int64_t x1 = *(arg2 + 0x68);
    int64_t x2 = arg2[7];
    if (((x1 == 0 || (x1 != 0 && x2 == 0)) || ((x1 != 0 && x2 != 0) && (0x7fffffffffffffff / x2) >= x1)))
    {
        int128_t v0_1;
        int128_t v1_1;
        v0_1 = Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(&arg1[6], x1);
        int64_t x8_3 = (arg1[7] * *(arg1 + 0x68));
        int64_t x9_3;
        if (x8_3 < 0)
        {
            x9_3 = (x8_3 + 3);
        }
        else
        {
            x9_3 = x8_3;
        }
        int64_t x9_4 = (x9_3 & 0xfffffffffffffffc);
        if (x8_3 >= 4)
        {
            int64_t x10_1 = 0;
            int64_t x11_1 = 0;
            do
            {
                x11_1 = (x11_1 + 4);
                *(arg1[6] + x10_1) = *(arg2[6] + x10_1);
                x10_1 = (x10_1 + 0x10);
            } while (x11_1 < x9_4);
        }
        if (x9_4 < x8_3)
        {
            void* x10_2 = arg2[6];
            void* x11_2 = arg1[6];
            int64_t x12_2 = (x8_3 - x9_4);
            if (x12_2 >= 8)
            {
                int64_t x14_1 = (x9_4 << 2);
                int64_t x13_2 = (x8_3 << 2);
                if (((x11_2 + x14_1) < (x10_2 + x13_2) && (x10_2 + x14_1) < (x11_2 + x13_2)))
                {
                    goto label_4f9f0;
                }
                int64_t i_12 = (x12_2 & 0xfffffffffffffff8);
                x9_4 = (x9_4 + i_12);
                void* x14_2 = (x10_2 + (x14_1 + 0x10));
                void* x15_4 = (x11_2 + (x14_1 + 0x10));
                int64_t i_9 = i_12;
                int64_t i;
                do
                {
                    v0_1 = *(x14_2 - 0x10);
                    v1_1 = *x14_2;
                    x14_2 = (x14_2 + 0x20);
                    i = i_9;
                    i_9 = (i_9 - 8);
                    *(x15_4 - 0x10) = v0_1;
                    *x15_4 = v1_1;
                    x15_4 = (x15_4 + 0x20);
                } while (i != 8);
                if (x12_2 != i_12)
                {
                    goto label_4f9f0;
                }
            }
            else
            {
            label_4f9f0:
                int64_t x12_3 = (x9_4 << 2);
                int64_t i_6 = (x8_3 - x9_4);
                void* x9_5 = (x11_2 + x12_3);
                int32_t* x10_3 = (x10_2 + x12_3);
                int64_t i_1;
                do
                {
                    int32_t x11_3 = *x10_3;
                    x10_3 = &x10_3[1];
                    i_1 = i_6;
                    i_6 = (i_6 - 1);
                    *x9_5 = x11_3;
                    x9_5 = (x9_5 + 4);
                } while (i_1 != 1);
            }
        }
        x1 = arg2[8];
        x2 = *(arg2 + 0x88);
        if (((x1 == 0 || (x1 != 0 && x2 == 0)) || ((x1 != 0 && x2 != 0) && (0x7fffffffffffffff / x2) >= x1)))
        {
            int128_t v0_2;
            int128_t v1_2;
            v0_2 = Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize((arg1 + 0x78), x1);
            int64_t x8_6 = (*(arg1 + 0x88) * arg1[8]);
            int64_t x9_8;
            if (x8_6 < 0)
            {
                x9_8 = (x8_6 + 3);
            }
            else
            {
                x9_8 = x8_6;
            }
            int64_t x9_9 = (x9_8 & 0xfffffffffffffffc);
            if (x8_6 >= 4)
            {
                int64_t x10_4 = 0;
                int64_t x11_4 = 0;
                do
                {
                    x11_4 = (x11_4 + 4);
                    *(*(arg1 + 0x78) + x10_4) = *(*(arg2 + 0x78) + x10_4);
                    x10_4 = (x10_4 + 0x10);
                } while (x11_4 < x9_9);
            }
            if (x9_9 < x8_6)
            {
                void* x10_5 = *(arg2 + 0x78);
                void* x11_5 = *(arg1 + 0x78);
                int64_t x12_5 = (x8_6 - x9_9);
                if (x12_5 >= 8)
                {
                    int64_t x14_3 = (x9_9 << 2);
                    int64_t x13_5 = (x8_6 << 2);
                    if (((x11_5 + x14_3) < (x10_5 + x13_5) && (x10_5 + x14_3) < (x11_5 + x13_5)))
                    {
                        goto label_4fafc;
                    }
                    int64_t i_13 = (x12_5 & 0xfffffffffffffff8);
                    x9_9 = (x9_9 + i_13);
                    void* x14_4 = (x10_5 + (x14_3 + 0x10));
                    void* x15_8 = (x11_5 + (x14_3 + 0x10));
                    int64_t i_10 = i_13;
                    int64_t i_2;
                    do
                    {
                        v0_2 = *(x14_4 - 0x10);
                        v1_2 = *x14_4;
                        x14_4 = (x14_4 + 0x20);
                        i_2 = i_10;
                        i_10 = (i_10 - 8);
                        *(x15_8 - 0x10) = v0_2;
                        *x15_8 = v1_2;
                        x15_8 = (x15_8 + 0x20);
                    } while (i_2 != 8);
                    if (x12_5 != i_13)
                    {
                        goto label_4fafc;
                    }
                }
                else
                {
                label_4fafc:
                    int64_t x12_6 = (x9_9 << 2);
                    int64_t i_7 = (x8_6 - x9_9);
                    void* x9_10 = (x11_5 + x12_6);
                    int32_t* x10_6 = (x10_5 + x12_6);
                    int64_t i_3;
                    do
                    {
                        int32_t x11_6 = *x10_6;
                        x10_6 = &x10_6[1];
                        i_3 = i_7;
                        i_7 = (i_7 - 1);
                        *x9_10 = x11_6;
                        x9_10 = (x9_10 + 4);
                    } while (i_3 != 1);
                }
            }
            x1 = *(arg2 + 0x98);
            x2 = arg2[0xa];
            if (((x1 == 0 || (x1 != 0 && x2 == 0)) || ((x1 != 0 && x2 != 0) && (0x7fffffffffffffff / x2) >= x1)))
            {
                int128_t v0_3;
                int128_t v1_3;
                v0_3 = Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(&arg1[9], x1);
                int64_t x8_9 = (arg1[0xa] * *(arg1 + 0x98));
                int64_t x9_13;
                if (x8_9 < 0)
                {
                    x9_13 = (x8_9 + 3);
                }
                else
                {
                    x9_13 = x8_9;
                }
                int64_t x9_14 = (x9_13 & 0xfffffffffffffffc);
                if (x8_9 >= 4)
                {
                    int64_t x10_7 = 0;
                    int64_t x11_7 = 0;
                    do
                    {
                        x11_7 = (x11_7 + 4);
                        *(arg1[9] + x10_7) = *(arg2[9] + x10_7);
                        x10_7 = (x10_7 + 0x10);
                    } while (x11_7 < x9_14);
                }
                if (x9_14 < x8_9)
                {
                    void* x10_8 = arg2[9];
                    void* x11_8 = arg1[9];
                    int64_t x12_8 = (x8_9 - x9_14);
                    if (x12_8 >= 8)
                    {
                        int64_t x14_5 = (x9_14 << 2);
                        int64_t x13_8 = (x8_9 << 2);
                        if (((x11_8 + x14_5) < (x10_8 + x13_8) && (x10_8 + x14_5) < (x11_8 + x13_8)))
                        {
                            goto label_4fc08;
                        }
                        int64_t i_14 = (x12_8 & 0xfffffffffffffff8);
                        x9_14 = (x9_14 + i_14);
                        void* x14_6 = (x10_8 + (x14_5 + 0x10));
                        void* x15_12 = (x11_8 + (x14_5 + 0x10));
                        int64_t i_11 = i_14;
                        int64_t i_4;
                        do
                        {
                            v0_3 = *(x14_6 - 0x10);
                            v1_3 = *x14_6;
                            x14_6 = (x14_6 + 0x20);
                            i_4 = i_11;
                            i_11 = (i_11 - 8);
                            *(x15_12 - 0x10) = v0_3;
                            *x15_12 = v1_3;
                            x15_12 = (x15_12 + 0x20);
                        } while (i_4 != 8);
                        if (x12_8 != i_14)
                        {
                            goto label_4fc08;
                        }
                    }
                    else
                    {
                    label_4fc08:
                        int64_t x12_9 = (x9_14 << 2);
                        int64_t i_8 = (x8_9 - x9_14);
                        void* x9_15 = (x11_8 + x12_9);
                        int32_t* x10_9 = (x10_8 + x12_9);
                        int64_t i_5;
                        do
                        {
                            int32_t x11_9 = *x10_9;
                            x10_9 = &x10_9[1];
                            i_5 = i_8;
                            i_8 = (i_8 - 1);
                            *x9_15 = x11_9;
                            x9_15 = (x9_15 + 4);
                        } while (i_5 != 1);
                    }
                }
                return arg1;
            }
        }
    }
    void* thrown_exception = __cxa_allocate_exception(8, x1, x2);
    std::bad_alloc::bad_alloc();
    __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
    /* no return */
}

int64_t CAPE::iou(int64_t, int32_t* arg2, int32_t* arg3)
{
    int32_t x8_4 = *arg2;
    int32_t x9 = arg2[1];
    int32_t x10 = *arg3;
    int32_t x11 = arg3[1];
    int32_t x12 = arg2[2];
    int32_t x13 = arg2[3];
    int32_t x14 = arg3[2];
    int32_t x15 = arg3[3];
    int64_t v0 = 0.0;
    int32_t x16 = (x12 + x8_4);
    int32_t x8;
    if (x8_4 < x10)
    {
        x8 = x10;
    }
    else
    {
        x8 = x8_4;
    }
    int32_t x10_1 = (x14 + x10);
    int32_t x13_1 = (x13 + x9);
    int32_t x14_1 = (x15 + x11);
    double temp0 = vcvt_f64_s64(x8);
    int32_t x8_1;
    if (x9 < x11)
    {
        x8_1 = x11;
    }
    else
    {
        x8_1 = x9;
    }
    double temp0_1 = vcvt_f64_s64(x8_1);
    int32_t x8_2;
    if (x10_1 < x16)
    {
        x8_2 = x10_1;
    }
    else
    {
        x8_2 = x16;
    }
    double temp0_2 = vcvt_f64_s64(x8_2);
    int32_t x8_3;
    if (x14_1 < x13_1)
    {
        x8_3 = x14_1;
    }
    else
    {
        x8_3 = x13_1;
    }
    double v2 = (vcvt_f64_s64(x8_3) - temp0_1);
    v0 = (vmax_f64((temp0_2 - temp0), v0) * vmax_f64(v2, v0));
    return (v0 / (vcvt_f64_s64(((x13 * x12) + (x15 * x14))) - v0));
}

void* CAPE::~CAPE(void* arg1)
{
    free(*(arg1 + 0x480));
    free(*(arg1 + 0x488));
    free(*(arg1 + 0x490));
    int64_t x21 = *(arg1 + 0x38);
    void* x22 = *(arg1 + 0x40);
    while (x22 != x21)
    {
        int64_t* x20_1 = *(x22 - 8);
        x22 = (x22 - 0x10);
        if (x20_1 != 0)
        {
            int64_t x9_1;
            int32_t i;
            do
            {
                x9_1 = __ldaxr(&x20_1[1]);
                i = __stlxr((x9_1 - 1), &x20_1[1]);
            } while (i != 0);
            if (x9_1 == 0)
            {
                *(*x20_1 + 0x10)(x20_1);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
    }
    void* x20_2 = *(arg1 + 0x610);
    *(arg1 + 0x40) = x21;
    if (x20_2 != 0)
    {
        void* x21_1 = *(arg1 + 0x618);
        void* x0_7;
        if (x21_1 == x20_2)
        {
            x0_7 = x20_2;
        }
        else
        {
            do
            {
                int64_t x8_4 = *(x21_1 - 0x50);
                if (x8_4 != 0)
                {
                    int32_t temp0_1;
                    int32_t i_1;
                    do
                    {
                        temp0_1 = __ldaxr((x8_4 + 0x14));
                        i_1 = __stlxr((temp0_1 - 1), (x8_4 + 0x14));
                    } while (i_1 != 0);
                    if (temp0_1 == 1)
                    {
                        cv::Mat::deallocate();
                    }
                }
                int32_t x8_6 = *(x21_1 - 0x84);
                int128_t v0;
                v0 = 0;
                *v0[8] = 0;
                *(x21_1 - 0x50) = 0;
                __builtin_memset((x21_1 - 0x78), 0, 0x20);
                if (x8_6 >= 1)
                {
                    int64_t x8_7 = *(x21_1 - 0x48);
                    int64_t i_2 = 0;
                    do
                    {
                        *(x8_7 + (i_2 << 2)) = 0;
                        i_2 = (i_2 + 1);
                    } while (i_2 < *(x21_1 - 0x84));
                }
                void* x0_6 = *(x21_1 - 0x40);
                if (x0_6 != (x21_1 - 0x38))
                {
                    cv::fastFree(x0_6);
                }
                x21_1 = (x21_1 - 0xb0);
            } while (x21_1 != x20_2);
            x0_7 = *(arg1 + 0x610);
        }
        *(arg1 + 0x618) = x20_2;
        operator delete(x0_7);
    }
    int64_t x8_9 = *(arg1 + 0x5d8);
    if (x8_9 != 0)
    {
        int32_t temp0_2;
        int32_t i_3;
        do
        {
            temp0_2 = __ldaxr((x8_9 + 0x14));
            i_3 = __stlxr((temp0_2 - 1), (x8_9 + 0x14));
        } while (i_3 != 0);
        if (temp0_2 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_11 = *(arg1 + 0x5a4);
    *(arg1 + 0x5d8) = 0;
    __builtin_memset((arg1 + 0x5b0), 0, 0x20);
    if (x8_11 >= 1)
    {
        int64_t x8_12 = *(arg1 + 0x5e0);
        int64_t i_4 = 0;
        do
        {
            *(x8_12 + (i_4 << 2)) = 0;
            i_4 = (i_4 + 1);
        } while (i_4 < *(arg1 + 0x5a4));
    }
    void* x0_9 = *(arg1 + 0x5e8);
    if (x0_9 != (arg1 + 0x5f0))
    {
        cv::fastFree(x0_9);
    }
    int64_t x8_14 = *(arg1 + 0x570);
    if (x8_14 != 0)
    {
        int32_t temp0_4;
        int32_t i_5;
        do
        {
            temp0_4 = __ldaxr((x8_14 + 0x14));
            i_5 = __stlxr((temp0_4 - 1), (x8_14 + 0x14));
        } while (i_5 != 0);
        if (temp0_4 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    *(arg1 + 0x570) = 0;
    __builtin_memset((arg1 + 0x548), 0, 0x20);
    if (*(arg1 + 0x53c) >= 1)
    {
        int64_t x8_18 = *(arg1 + 0x578);
        int64_t i_6 = 0;
        do
        {
            *(x8_18 + (i_6 << 2)) = 0;
            i_6 = (i_6 + 1);
        } while (i_6 < *(arg1 + 0x53c));
    }
    void* x0_11 = *(arg1 + 0x580);
    if (x0_11 != (arg1 + 0x588))
    {
        cv::fastFree(x0_11);
    }
    void* x20_3 = *(arg1 + 0x530);
    *(arg1 + 0x530) = 0;
    if (x20_3 != 0)
    {
        Histogram::~Histogram();
        operator delete(x20_3);
    }
    free(*(arg1 + 0x470));
    int64_t x8_20 = *(arg1 + 0x448);
    if (x8_20 != 0)
    {
        int32_t temp0_5;
        int32_t i_7;
        do
        {
            temp0_5 = __ldaxr((x8_20 + 0x14));
            i_7 = __stlxr((temp0_5 - 1), (x8_20 + 0x14));
        } while (i_7 != 0);
        if (temp0_5 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_22 = *(arg1 + 0x414);
    *(arg1 + 0x448) = 0;
    __builtin_memset((arg1 + 0x420), 0, 0x20);
    if (x8_22 >= 1)
    {
        int64_t x8_23 = *(arg1 + 0x450);
        int64_t i_8 = 0;
        do
        {
            *(x8_23 + (i_8 << 2)) = 0;
            i_8 = (i_8 + 1);
        } while (i_8 < *(arg1 + 0x414));
    }
    void* x0_16 = *(arg1 + 0x458);
    if (x0_16 != (arg1 + 0x460))
    {
        cv::fastFree(x0_16);
    }
    int64_t x8_25 = *(arg1 + 0x3e8);
    if (x8_25 != 0)
    {
        int32_t temp0_6;
        int32_t i_9;
        do
        {
            temp0_6 = __ldaxr((x8_25 + 0x14));
            i_9 = __stlxr((temp0_6 - 1), (x8_25 + 0x14));
        } while (i_9 != 0);
        if (temp0_6 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_27 = *(arg1 + 0x3b4);
    *(arg1 + 0x3e8) = 0;
    __builtin_memset((arg1 + 0x3c0), 0, 0x20);
    if (x8_27 >= 1)
    {
        int64_t x8_28 = *(arg1 + 0x3f0);
        int64_t i_10 = 0;
        do
        {
            *(x8_28 + (i_10 << 2)) = 0;
            i_10 = (i_10 + 1);
        } while (i_10 < *(arg1 + 0x3b4));
    }
    void* x0_18 = *(arg1 + 0x3f8);
    if (x0_18 != (arg1 + 0x400))
    {
        cv::fastFree(x0_18);
    }
    int64_t x8_30 = *(arg1 + 0x388);
    if (x8_30 != 0)
    {
        int32_t temp0_7;
        int32_t i_11;
        do
        {
            temp0_7 = __ldaxr((x8_30 + 0x14));
            i_11 = __stlxr((temp0_7 - 1), (x8_30 + 0x14));
        } while (i_11 != 0);
        if (temp0_7 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_32 = *(arg1 + 0x354);
    *(arg1 + 0x388) = 0;
    __builtin_memset((arg1 + 0x360), 0, 0x20);
    if (x8_32 >= 1)
    {
        int64_t x8_33 = *(arg1 + 0x390);
        int64_t i_12 = 0;
        do
        {
            *(x8_33 + (i_12 << 2)) = 0;
            i_12 = (i_12 + 1);
        } while (i_12 < *(arg1 + 0x354));
    }
    void* x0_20 = *(arg1 + 0x398);
    if (x0_20 != (arg1 + 0x3a0))
    {
        cv::fastFree(x0_20);
    }
    int64_t x8_35 = *(arg1 + 0x328);
    if (x8_35 != 0)
    {
        int32_t temp0_8;
        int32_t i_13;
        do
        {
            temp0_8 = __ldaxr((x8_35 + 0x14));
            i_13 = __stlxr((temp0_8 - 1), (x8_35 + 0x14));
        } while (i_13 != 0);
        if (temp0_8 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_37 = *(arg1 + 0x2f4);
    *(arg1 + 0x328) = 0;
    __builtin_memset((arg1 + 0x300), 0, 0x20);
    if (x8_37 >= 1)
    {
        int64_t x8_38 = *(arg1 + 0x330);
        int64_t i_14 = 0;
        do
        {
            *(x8_38 + (i_14 << 2)) = 0;
            i_14 = (i_14 + 1);
        } while (i_14 < *(arg1 + 0x2f4));
    }
    void* x0_22 = *(arg1 + 0x338);
    if (x0_22 != (arg1 + 0x340))
    {
        cv::fastFree(x0_22);
    }
    int64_t x8_40 = *(arg1 + 0x2c8);
    if (x8_40 != 0)
    {
        int32_t temp0_9;
        int32_t i_15;
        do
        {
            temp0_9 = __ldaxr((x8_40 + 0x14));
            i_15 = __stlxr((temp0_9 - 1), (x8_40 + 0x14));
        } while (i_15 != 0);
        if (temp0_9 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_42 = *(arg1 + 0x294);
    *(arg1 + 0x2c8) = 0;
    __builtin_memset((arg1 + 0x2a0), 0, 0x20);
    if (x8_42 >= 1)
    {
        int64_t x8_43 = *(arg1 + 0x2d0);
        int64_t i_16 = 0;
        do
        {
            *(x8_43 + (i_16 << 2)) = 0;
            i_16 = (i_16 + 1);
        } while (i_16 < *(arg1 + 0x294));
    }
    void* x0_24 = *(arg1 + 0x2d8);
    if (x0_24 != (arg1 + 0x2e0))
    {
        cv::fastFree(x0_24);
    }
    int64_t x8_45 = *(arg1 + 0x268);
    if (x8_45 != 0)
    {
        int32_t temp0_10;
        int32_t i_17;
        do
        {
            temp0_10 = __ldaxr((x8_45 + 0x14));
            i_17 = __stlxr((temp0_10 - 1), (x8_45 + 0x14));
        } while (i_17 != 0);
        if (temp0_10 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_47 = *(arg1 + 0x234);
    *(arg1 + 0x268) = 0;
    __builtin_memset((arg1 + 0x240), 0, 0x20);
    if (x8_47 >= 1)
    {
        int64_t x8_48 = *(arg1 + 0x270);
        int64_t i_18 = 0;
        do
        {
            *(x8_48 + (i_18 << 2)) = 0;
            i_18 = (i_18 + 1);
        } while (i_18 < *(arg1 + 0x234));
    }
    void* x0_26 = *(arg1 + 0x278);
    if (x0_26 != (arg1 + 0x280))
    {
        cv::fastFree(x0_26);
    }
    int64_t x8_50 = *(arg1 + 0x208);
    if (x8_50 != 0)
    {
        int32_t temp0_11;
        int32_t i_19;
        do
        {
            temp0_11 = __ldaxr((x8_50 + 0x14));
            i_19 = __stlxr((temp0_11 - 1), (x8_50 + 0x14));
        } while (i_19 != 0);
        if (temp0_11 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_52 = *(arg1 + 0x1d4);
    *(arg1 + 0x208) = 0;
    __builtin_memset((arg1 + 0x1e0), 0, 0x20);
    if (x8_52 >= 1)
    {
        int64_t x8_53 = *(arg1 + 0x210);
        int64_t i_20 = 0;
        do
        {
            *(x8_53 + (i_20 << 2)) = 0;
            i_20 = (i_20 + 1);
        } while (i_20 < *(arg1 + 0x1d4));
    }
    void* x0_28 = *(arg1 + 0x218);
    if (x0_28 != (arg1 + 0x220))
    {
        cv::fastFree(x0_28);
    }
    int64_t x8_55 = *(arg1 + 0x1a8);
    if (x8_55 != 0)
    {
        int32_t temp0_12;
        int32_t i_21;
        do
        {
            temp0_12 = __ldaxr((x8_55 + 0x14));
            i_21 = __stlxr((temp0_12 - 1), (x8_55 + 0x14));
        } while (i_21 != 0);
        if (temp0_12 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_57 = *(arg1 + 0x174);
    *(arg1 + 0x1a8) = 0;
    __builtin_memset((arg1 + 0x180), 0, 0x20);
    if (x8_57 >= 1)
    {
        int64_t x8_58 = *(arg1 + 0x1b0);
        int64_t i_22 = 0;
        do
        {
            *(x8_58 + (i_22 << 2)) = 0;
            i_22 = (i_22 + 1);
        } while (i_22 < *(arg1 + 0x174));
    }
    void* x0_30 = *(arg1 + 0x1b8);
    if (x0_30 != (arg1 + 0x1c0))
    {
        cv::fastFree(x0_30);
    }
    int64_t x8_60 = *(arg1 + 0x148);
    if (x8_60 != 0)
    {
        int32_t temp0_13;
        int32_t i_23;
        do
        {
            temp0_13 = __ldaxr((x8_60 + 0x14));
            i_23 = __stlxr((temp0_13 - 1), (x8_60 + 0x14));
        } while (i_23 != 0);
        if (temp0_13 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_62 = *(arg1 + 0x114);
    *(arg1 + 0x148) = 0;
    __builtin_memset((arg1 + 0x120), 0, 0x20);
    if (x8_62 >= 1)
    {
        int64_t x8_63 = *(arg1 + 0x150);
        int64_t i_24 = 0;
        do
        {
            *(x8_63 + (i_24 << 2)) = 0;
            i_24 = (i_24 + 1);
        } while (i_24 < *(arg1 + 0x114));
    }
    void* x0_32 = *(arg1 + 0x158);
    if (x0_32 != (arg1 + 0x160))
    {
        cv::fastFree(x0_32);
    }
    int64_t x8_65 = *(arg1 + 0xe8);
    if (x8_65 != 0)
    {
        int32_t temp0_14;
        int32_t i_25;
        do
        {
            temp0_14 = __ldaxr((x8_65 + 0x14));
            i_25 = __stlxr((temp0_14 - 1), (x8_65 + 0x14));
        } while (i_25 != 0);
        if (temp0_14 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_67 = *(arg1 + 0xb4);
    *(arg1 + 0xe8) = 0;
    __builtin_memset((arg1 + 0xc0), 0, 0x20);
    if (x8_67 >= 1)
    {
        int64_t x8_68 = *(arg1 + 0xf0);
        int64_t i_26 = 0;
        do
        {
            *(x8_68 + (i_26 << 2)) = 0;
            i_26 = (i_26 + 1);
        } while (i_26 < *(arg1 + 0xb4));
    }
    void* x0_34 = *(arg1 + 0xf8);
    if (x0_34 != (arg1 + 0x100))
    {
        cv::fastFree(x0_34);
    }
    int64_t x8_70 = *(arg1 + 0x88);
    if (x8_70 != 0)
    {
        int32_t temp0_15;
        int32_t i_27;
        do
        {
            temp0_15 = __ldaxr((x8_70 + 0x14));
            i_27 = __stlxr((temp0_15 - 1), (x8_70 + 0x14));
        } while (i_27 != 0);
        if (temp0_15 == 1)
        {
            cv::Mat::deallocate();
        }
    }
    int32_t x8_72 = *(arg1 + 0x54);
    *(arg1 + 0x88) = 0;
    __builtin_memset((arg1 + 0x60), 0, 0x20);
    if (x8_72 >= 1)
    {
        int64_t x8_73 = *(arg1 + 0x90);
        int64_t i_28 = 0;
        do
        {
            *(x8_73 + (i_28 << 2)) = 0;
            i_28 = (i_28 + 1);
        } while (i_28 < *(arg1 + 0x54));
    }
    void* x0_36 = *(arg1 + 0x98);
    if (x0_36 != (arg1 + 0xa0))
    {
        cv::fastFree(x0_36);
    }
    void* x21_2 = *(arg1 + 0x38);
    if (x21_2 != 0)
    {
        void* x22_1 = *(arg1 + 0x40);
        void* x0_39;
        if (x22_1 == x21_2)
        {
            x0_39 = x21_2;
        }
        else
        {
            do
            {
                int64_t* x20_4 = *(x22_1 - 8);
                x22_1 = (x22_1 - 0x10);
                if (x20_4 != 0)
                {
                    int64_t x9_31;
                    int32_t i_29;
                    do
                    {
                        x9_31 = __ldaxr(&x20_4[1]);
                        i_29 = __stlxr((x9_31 - 1), &x20_4[1]);
                    } while (i_29 != 0);
                    if (x9_31 == 0)
                    {
                        *(*x20_4 + 0x10)(x20_4);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if (x22_1 == x21_2)
                        {
                            break;
                        }
                        continue;
                    }
                }
            } while (x22_1 != x21_2);
            x0_39 = *(arg1 + 0x38);
        }
        *(arg1 + 0x40) = x21_2;
        operator delete(x0_39);
    }
    void* x0_40 = *(arg1 + 0x20);
    if (x0_40 == 0)
    {
        return x0_40;
    }
    *(arg1 + 0x28) = x0_40;
    /* tailcall */
    return operator delete(x0_40);
}

void sub_50498(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(int64_t arg1, int64_t* arg2)
{
    int64_t x2 = arg2[1];
    int64_t* x19 = arg1;
    Eigen::DenseStorage<float, -1, -1, -1, 0>::DenseStorage(arg1, (arg2[2] * x2), x2);
    int64_t x1_1 = arg2[1];
    int64_t x2_1 = arg2[2];
    if ((x1_1 != 0 && (x2_1 != 0 && (0x7fffffffffffffff / x2_1) < x1_1)))
    {
        void* thrown_exception = __cxa_allocate_exception(8);
        std::bad_alloc::bad_alloc();
        __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
        /* no return */
    }
    int64_t x0_1;
    int128_t v0;
    int128_t v1;
    x0_1 = Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(x19, x1_1);
    int64_t x8_3 = (x19[2] * x19[1]);
    int64_t x9_2;
    if (x8_3 < 0)
    {
        x9_2 = (x8_3 + 3);
    }
    else
    {
        x9_2 = x8_3;
    }
    int64_t x9_3 = (x9_2 & 0xfffffffffffffffc);
    if (x8_3 >= 4)
    {
        int64_t x10_1 = 0;
        int64_t x11_1 = 0;
        do
        {
            x11_1 = (x11_1 + 4);
            *(*x19 + x10_1) = *(*arg2 + x10_1);
            x10_1 = (x10_1 + 0x10);
        } while (x11_1 < x9_3);
    }
    if (x9_3 < x8_3)
    {
        void* x10_2 = *arg2;
        void* x11_2 = *x19;
        int64_t x12_2 = (x8_3 - x9_3);
        if (x12_2 >= 8)
        {
            int64_t x14_1 = (x9_3 << 2);
            int64_t x13_2 = (x8_3 << 2);
            if (((x11_2 + x14_1) < (x10_2 + x13_2) && (x10_2 + x14_1) < (x11_2 + x13_2)))
            {
                goto label_505d8;
            }
            int64_t i_4 = (x12_2 & 0xfffffffffffffff8);
            x9_3 = (x9_3 + i_4);
            void* x14_2 = (x10_2 + (x14_1 + 0x10));
            void* x15_4 = (x11_2 + (x14_1 + 0x10));
            int64_t i_3 = i_4;
            int64_t i;
            do
            {
                v0 = *(x14_2 - 0x10);
                v1 = *x14_2;
                x14_2 = (x14_2 + 0x20);
                i = i_3;
                i_3 = (i_3 - 8);
                *(x15_4 - 0x10) = v0;
                *x15_4 = v1;
                x15_4 = (x15_4 + 0x20);
            } while (i != 8);
            if (x12_2 != i_4)
            {
                goto label_505d8;
            }
        }
        else
        {
        label_505d8:
            int64_t x12_3 = (x9_3 << 2);
            int64_t i_2 = (x8_3 - x9_3);
            void* x9_4 = (x11_2 + x12_3);
            int32_t* x10_3 = (x10_2 + x12_3);
            int64_t i_1;
            do
            {
                int32_t x11_3 = *x10_3;
                x10_3 = &x10_3[1];
                i_1 = i_2;
                i_2 = (i_2 - 1);
                *x9_4 = x11_3;
                x9_4 = (x9_4 + 4);
            } while (i_1 != 1);
        }
    }
    return x0_1;
}

void Eigen::DenseStorage<float, -1, -1, -1, 0>::DenseStorage(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t* x21 = arg1;
    int64_t x8_2;
    if (arg2 == 0)
    {
        x8_2 = 0;
    }
    else
    {
        int32_t x9_1;
        int64_t x22_1;
        if ((arg2 >> 0x3e) == 0)
        {
            x22_1 = (arg2 << 2);
            int64_t var_50;
            arg1 = posix_memalign(&var_50, 0x10, x22_1);
            if (arg1 == 0)
            {
                x8_2 = var_50;
                if (x8_2 == 0)
                {
                    x9_1 = 1;
                }
                else
                {
                    x9_1 = 0;
                }
            }
            else
            {
                x8_2 = 0;
                x9_1 = 1;
                var_50 = 0;
            }
        }
        if (((arg2 >> 0x3e) != 0 || (((arg2 >> 0x3e) == 0 && ((arg1 != 0 && x22_1 != 0) || (arg1 == 0 && x22_1 != 0))) && x9_1 != 0)))
        {
            void* thrown_exception = __cxa_allocate_exception(8);
            std::bad_alloc::bad_alloc();
            __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
            /* no return */
        }
    }
    *x21 = x8_2;
    x21[1] = arg3;
    x21[2] = arg4;
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t std::__ndk1::__shared_ptr_emplace<PlaneSeg, std::__ndk1::allocator<PlaneSeg> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<PlaneSeg, std::__ndk1::allocator<PlaneSeg> > + 0x10);
    PlaneSeg::~PlaneSeg();
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t std::__ndk1::__shared_ptr_emplace<PlaneSeg, std::__ndk1::allocator<PlaneSeg> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<PlaneSeg, std::__ndk1::allocator<PlaneSeg> > + 0x10);
    PlaneSeg::~PlaneSeg();
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__shared_ptr_emplace<PlaneSeg, std::__ndk1::allocator<PlaneSeg> >::__on_zero_shared(int64_t arg1)
{
    /* tailcall */
    return PlaneSeg::~PlaneSeg();
}

int64_t std::__ndk1::__shared_ptr_emplace<PlaneSeg, std::__ndk1::allocator<PlaneSeg> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::vector<std::__ndk1::shared_ptr<PlaneSeg>, std::__ndk1::allocator<std::__ndk1::shared_ptr<PlaneSeg> > >::__push_back_slow_path<std::__ndk1::shared_ptr<PlaneSeg> >(int64_t* arg1, int128_t* arg2)
{
    int64_t x9 = *arg1;
    int64_t x22 = ((arg1[1] - x9) >> 4);
    if (((x22 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_8;
        int64_t x1_1;
        int64_t x2_1;
        x0_8 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1, 0, -1, -1> >::resize(x0_8, x1_1, x2_1);
    }
    int64_t x9_1 = (arg1[2] - x9);
    int64_t x0_2;
    int64_t x23;
    if (0x7fffffffffffffe < (x9_1 >> 4))
    {
        x23 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_2 = (x9_1 >> 3);
        if (x9_2 < (x22 + 1))
        {
            x23 = (x22 + 1);
        }
        else
        {
            x23 = x9_2;
        }
        if (x23 == 0)
        {
            x0_2 = 0;
        }
        else if ((x23 >> 0x3c) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    int128_t v0;
    if ((0x7fffffffffffffe < (x9_1 >> 4) || (0x7fffffffffffffe >= (x9_1 >> 4) && x23 != 0)))
    {
        x0_2 = operator new((x23 << 4));
    }
    int128_t* x10_2 = (x0_2 + (x22 << 4));
    *x10_2 = *arg2;
    *arg2 = 0;
    *(arg2 + 8) = 0;
    void* x21 = *arg1;
    int128_t* x11 = arg1[1];
    void* x20_1;
    if (x11 == x21)
    {
        x20_1 = x21;
    }
    else
    {
        int64_t x12_4 = (x22 + (-1 ^ (((x11 - 0x10) - x21) >> 4)));
        void* x10_3 = (x10_2 - 0x10);
        do
        {
            x11 = &x11[-1];
            *x10_3 = *x11;
            x10_3 = (x10_3 - 0x10);
            *x11 = 0;
            *(x11 + 8) = 0;
        } while (x21 != x11);
        x20_1 = *arg1;
        x21 = arg1[1];
        x10_2 = (x0_2 + (x12_4 << 4));
    }
    *arg1 = x10_2;
    arg1[1] = &x10_2[1];
    arg1[2] = (x0_2 + (x23 << 4));
    if (x21 != x20_1)
    {
        do
        {
            int64_t* x19_1 = *(x21 - 8);
            x21 = (x21 - 0x10);
            if (x19_1 != 0)
            {
                int64_t x9_4;
                int32_t i;
                do
                {
                    x9_4 = __ldaxr(&x19_1[1]);
                    i = __stlxr((x9_4 - 1), &x19_1[1]);
                } while (i != 0);
                if (x9_4 == 0)
                {
                    *(*x19_1 + 0x10)(x19_1);
                    x0_2 = std::__ndk1::__shared_weak_count::__release_weak();
                    if (x21 == x20_1)
                    {
                        break;
                    }
                    continue;
                }
            }
        } while (x21 != x20_1);
    }
    if (x20_1 == 0)
    {
        return x0_2;
    }
    /* tailcall */
    return operator delete(x20_1);
}

void Eigen::PlainObjectBase<Eigen::Matrix<double, -1, -1, 0, -1, -1> >::resize(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    if (((arg2 == 0 || (arg2 != 0 && arg3 == 0)) || ((arg2 != 0 && arg3 != 0) && (0x7fffffffffffffff / arg3) >= arg2)))
    {
        int64_t x22_1 = (arg3 * arg2);
        if ((arg1[2] * arg1[1]) == x22_1)
        {
            goto label_509f4;
        }
        free(*arg1);
        int64_t x8_5;
        if (x22_1 == 0)
        {
            x8_5 = 0;
        label_509f0:
            *arg1 = x8_5;
        label_509f4:
            arg1[1] = arg2;
            arg1[2] = arg3;
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return;
        }
        if ((x22_1 >> 0x3d) == 0)
        {
            int64_t x22_2 = (x22_1 << 3);
            int64_t var_50;
            int32_t x9_2;
            if (posix_memalign(&var_50, 0x10, x22_2) == 0)
            {
                x8_5 = var_50;
                if (x8_5 == 0)
                {
                    x9_2 = 1;
                }
                else
                {
                    x9_2 = 0;
                }
                if (x22_2 == 0)
                {
                    goto label_509f0;
                }
            }
            else
            {
                x8_5 = 0;
                x9_2 = 1;
                var_50 = 0;
                if (x22_2 == 0)
                {
                    goto label_509f0;
                }
            }
            if (x9_2 == 0)
            {
                goto label_509f0;
            }
        }
    }
    void* thrown_exception = __cxa_allocate_exception(8);
    std::bad_alloc::bad_alloc();
    __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
    /* no return */
}

int64_t std::__ndk1::vector<std::__ndk1::shared_ptr<PlaneSeg>, std::__ndk1::allocator<std::__ndk1::shared_ptr<PlaneSeg> > >::__push_back_slow_path<std::__ndk1::shared_ptr<PlaneSeg> const&>(int64_t* arg1, int64_t* arg2)
{
    void* x19 = *arg1;
    int128_t* x22 = arg1[1];
    int64_t x23 = ((x22 - x19) >> 4);
    if (((x23 + 1) >> 0x3c) != 0)
    {
        int64_t* x0_8;
        int64_t x1_1;
        int64_t x2_1;
        x0_8 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return Eigen::PlainObjectBase<Eigen::Matrix<bool, -1, -1, 0, -1, -1> >::resize(x0_8, x1_1, x2_1);
    }
    void* x9_2 = (arg1[2] - x19);
    int64_t x0_2;
    int64_t x24;
    if (0x7fffffffffffffe < (x9_2 >> 4))
    {
        x24 = 0xfffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 3);
        if (x9_3 < (x23 + 1))
        {
            x24 = (x23 + 1);
        }
        else
        {
            x24 = x9_3;
        }
        if (x24 == 0)
        {
            x0_2 = 0;
        }
        else if ((x24 >> 0x3c) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    int128_t v0;
    if ((0x7fffffffffffffe < (x9_2 >> 4) || (0x7fffffffffffffe >= (x9_2 >> 4) && x24 != 0)))
    {
        x0_2 = operator new((x24 << 4));
    }
    int64_t* x9_4 = (x0_2 + (x23 << 4));
    *x9_4 = *arg2;
    int64_t x8_4 = arg2[1];
    x9_4[1] = x8_4;
    if (x8_4 != 0)
    {
        int32_t i;
        do
        {
            i = __stxr((__ldxr((x8_4 + 8)) + 1), (x8_4 + 8));
        } while (i != 0);
        x19 = *arg1;
        x22 = arg1[1];
    }
    if (x22 != x19)
    {
        int64_t x9_8 = (x23 + (-1 ^ (((x22 - 0x10) - x19) >> 4)));
        int128_t* x11_2 = ((x0_2 + (x23 << 4)) - 0x10);
        do
        {
            x22 = &x22[-1];
            *x11_2 = *x22;
            x11_2 = &x11_2[-1];
            *x22 = 0;
            *(x22 + 8) = 0;
        } while (x19 != x22);
        x19 = *arg1;
        x22 = arg1[1];
        x9_4 = (x0_2 + (x9_8 << 4));
    }
    *arg1 = x9_4;
    arg1[1] = &x9_4[2];
    arg1[2] = (x0_2 + (x24 << 4));
    if (x22 != x19)
    {
        do
        {
            int64_t* x20_1 = *(x22 - 8);
            x22 = (x22 - 0x10);
            if (x20_1 != 0)
            {
                int64_t x9_9;
                int32_t i_1;
                do
                {
                    x9_9 = __ldaxr(&x20_1[1]);
                    i_1 = __stlxr((x9_9 - 1), &x20_1[1]);
                } while (i_1 != 0);
                if (x9_9 == 0)
                {
                    *(*x20_1 + 0x10)(x20_1);
                    x0_2 = std::__ndk1::__shared_weak_count::__release_weak();
                    if (x22 == x19)
                    {
                        break;
                    }
                    continue;
                }
            }
        } while (x22 != x19);
    }
    if (x19 == 0)
    {
        return x0_2;
    }
    /* tailcall */
    return operator delete(x19);
}

void Eigen::PlainObjectBase<Eigen::Matrix<bool, -1, -1, 0, -1, -1> >::resize(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t* x20 = arg1;
    if (((arg2 == 0 || (arg2 != 0 && arg3 == 0)) || ((arg2 != 0 && arg3 != 0) && (0x7fffffffffffffff / arg3) >= arg2)))
    {
        size_t x22_1 = (arg3 * arg2);
        int64_t x8_4;
        if ((x20[2] * x20[1]) != x22_1)
        {
            free(*x20);
            if (x22_1 == 0)
            {
                x8_4 = 0;
            }
            else
            {
                int64_t var_50;
                arg1 = posix_memalign(&var_50, 0x10, x22_1);
                if (arg1 != 0)
                {
                    var_50 = 0;
                }
                else
                {
                    x8_4 = var_50;
                }
            }
            if ((x22_1 == 0 || ((x22_1 != 0 && arg1 == 0) && x8_4 != 0)))
            {
                *x20 = x8_4;
            }
        }
        if ((((x20[2] * x20[1]) != x22_1 && (x22_1 == 0 || ((x22_1 != 0 && arg1 == 0) && x8_4 != 0))) || (x20[2] * x20[1]) == x22_1))
        {
            x20[1] = arg2;
            x20[2] = arg3;
            if (*(x23 + 0x28) != x8)
            {
                __stack_chk_fail();
                /* no return */
            }
            return;
        }
    }
    void* thrown_exception = __cxa_allocate_exception(8);
    std::bad_alloc::bad_alloc();
    __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
    /* no return */
}

int64_t std::__ndk1::vector<PlaneSeg, std::__ndk1::allocator<PlaneSeg> >::__push_back_slow_path<PlaneSeg const&>(int64_t* arg1, int128_t* arg2, void* arg3 @ x19, int64_t arg4 @ x21, int64_t* arg5 @ x23, int64_t* arg6 @ x24)
{
    int64_t* var_40 = arg6;
    int64_t* var_38 = arg5;
    int64_t var_28 = arg4;
    void* var_18 = arg3;
    int64_t x9 = *arg1;
    int64_t x26 = (((arg1[1] - x9) >> 3) * -0x30c30c30c30c30c3);
    int64_t x25 = 0x186186186186186;
    if ((x26 + 1) > 0x186186186186186)
    {
        int64_t x0_13 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        free(*arg6);
        free(*arg5);
        int64_t x24_4 = arg4;
        if (arg4 != x24_4)
        {
            do
            {
                arg4 = (arg4 - 0xa8);
                PlaneSeg::~PlaneSeg();
            } while (x24_4 != arg4);
        }
        if (arg3 != 0)
        {
            operator delete(arg3);
        }
        int64_t* x0_19;
        int64_t x1_7;
        x0_19 = _Unwind_Resume(x0_13);
        /* tailcall */
        return std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::__append(x0_19, x1_7);
    }
    int64_t x9_3 = (((arg1[2] - x9) >> 3) * -0x30c30c30c30c30c3);
    int64_t x19;
    if (x9_3 <= 0xc30c30c30c30c2)
    {
        int64_t x9_4 = (x9_3 << 1);
        if (x9_4 < (x26 + 1))
        {
            x25 = (x26 + 1);
        }
        else
        {
            x25 = x9_4;
        }
        if (x25 == 0)
        {
            x19 = 0;
        }
    }
    int128_t v1;
    int128_t v2;
    int128_t v3;
    if ((x9_3 > 0xc30c30c30c30c2 || (x9_3 <= 0xc30c30c30c30c2 && x25 != 0)))
    {
        int64_t x0_1;
        int128_t v0;
        x0_1 = operator new((x25 * 0xa8));
        x19 = x0_1;
    }
    v1 = arg2[1];
    int128_t* x21 = (x19 + (x26 * 0xa8));
    *x21 = *arg2;
    x21[1] = v1;
    v1 = arg2[5];
    v2 = arg2[2];
    v3 = arg2[3];
    x21[4] = arg2[4];
    x21[5] = v1;
    x21[2] = v2;
    x21[3] = v3;
    Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(&x21[6]);
    Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(((x19 + (x26 * 0xa8)) + 0x78));
    int64_t x0_5;
    int128_t v0_1;
    int128_t v1_1;
    int128_t v2_1;
    int128_t v3_1;
    x0_5 = Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix(((x19 + (x26 * 0xa8)) + 0x90));
    void* x22_1 = *arg1;
    void* x27 = arg1[1];
    int64_t x26_1 = (x19 + (x25 * 0xa8));
    if (x27 == x22_1)
    {
        *arg1 = x21;
        arg1[1] = (x21 + 0xa8);
        arg1[2] = x26_1;
    }
    else
    {
        int128_t* x24_1 = x21;
        do
        {
            v1_1 = *(x27 - 0xa8);
            *(x24_1 - 0x98) = *(x27 - 0x98);
            *(x24_1 - 0xa8) = v1_1;
            v1_1 = *(x27 - 0x68);
            v2_1 = *(x27 - 0x78);
            v3_1 = *(x27 - 0x88);
            *(x24_1 - 0x58) = *(x27 - 0x58);
            *(x24_1 - 0x68) = v1_1;
            *(x24_1 - 0x78) = v2_1;
            *(x24_1 - 0x88) = v3_1;
            Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix((x24_1 - 0x48));
            Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix((x24_1 - 0x30));
            x0_5 = Eigen::Matrix<float, -1, -1, 0, -1, -1>::Matrix((x24_1 - 0x18));
            x27 = (x27 - 0xa8);
            x24_1 = (x24_1 - 0xa8);
        } while (x22_1 != x27);
        x22_1 = *arg1;
        int64_t x19_1 = arg1[1];
        *arg1 = x24_1;
        arg1[1] = (x21 + 0xa8);
        arg1[2] = x26_1;
        if (x19_1 != x22_1)
        {
            do
            {
                x19_1 = (x19_1 - 0xa8);
                x0_5 = PlaneSeg::~PlaneSeg();
            } while (x22_1 != x19_1);
        }
    }
    if (((x27 == x22_1 && x22_1 != 0) || (x27 != x22_1 && x22_1 != 0)))
    {
        /* tailcall */
        return operator delete(x22_1);
    }
    if (((x27 == x22_1 && x22_1 == 0) || (x27 != x22_1 && x22_1 == 0)))
    {
        return x0_5;
    }
}

int64_t sub_50ee8(int64_t arg1, void* arg2 @ x19, int64_t* arg3 @ x21, int64_t* arg4 @ x23, int64_t arg5 @ x24, int64_t arg6 @ x25)
{
    free(*arg4);
    free(*arg3);
    int64_t x21 = arg6;
    if (x21 != arg5)
    {
        do
        {
            x21 = (x21 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (arg5 != x21);
    }
    if (arg2 != 0)
    {
        operator delete(arg2);
    }
    int64_t* x0_5;
    int64_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::__append(x0_5, x1);
}

int64_t sub_50efc(int64_t arg1, void* arg2 @ x19, int64_t* arg3 @ x21, int64_t arg4 @ x24, int64_t arg5 @ x25)
{
    free(*arg3);
    int64_t x21 = arg5;
    if (x21 != arg4)
    {
        do
        {
            x21 = (x21 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (arg4 != x21);
    }
    if (arg2 != 0)
    {
        operator delete(arg2);
    }
    int64_t* x0_4;
    int64_t x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::__append(x0_4, x1);
}

int64_t sub_50f0c(int64_t arg1, void* arg2 @ x19, int64_t arg3 @ x24, int64_t arg4 @ x25)
{
    int64_t x21 = arg4;
    if (x21 != arg3)
    {
        do
        {
            x21 = (x21 - 0xa8);
            PlaneSeg::~PlaneSeg();
        } while (arg3 != x21);
    }
    if (arg2 != 0)
    {
        operator delete(arg2);
    }
    int64_t* x0_3;
    int64_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::__append(x0_3, x1);
}

void std::__ndk1::vector<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base> >::__append(int64_t* arg1, int64_t arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    void* s = arg1[1];
    int64_t x10 = arg1[2];
    int64_t i_3 = arg2;
    int128_t v0;
    if ((((x10 - s) >> 4) * 0x2e8ba2e8ba2e8ba3) >= arg2)
    {
        v0 = data_54780;
        int64_t i;
        do
        {
            *(s + 0x68) = (s + 0x30);
            *(s + 0x28) = 0x42ff0000;
            __builtin_memset((s + 0x2c), 0, 0x3c);
            *(s + 0x80) = 0;
            *(s + 0x88) = 0;
            *(s + 0x78) = 0;
            *(s + 0x90) = 0;
            __builtin_memset(s, 0, 0x24);
            *(s + 0x94) = v0;
            *(s + 0xa8) = 0;
            *(s + 0x70) = (s + 0x78);
            i = i_3;
            i_3 = (i_3 - 1);
            s = (arg1[1] + 0xb0);
            arg1[1] = s;
        } while (i != 1);
    }
    else
    {
        int64_t x12_1 = *arg1;
        int64_t x23_1 = (((s - x12_1) >> 4) * 0x2e8ba2e8ba2e8ba3);
        int64_t x24_1 = 0x1745d1745d1745d;
        int64_t x8_3 = (x23_1 + i_3);
        if (x8_3 > 0x1745d1745d1745d)
        {
            int64_t x0_4 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
            std::__ndk1::__split_buffer<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base>&>::~__split_buffer();
            /* tailcall */
            return std::__ndk1::__split_buffer<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base>&>::~__split_buffer(_Unwind_Resume(x0_4));
        }
        int64_t x10_3 = (((x10 - x12_1) >> 4) * 0x2e8ba2e8ba2e8ba3);
        if (x10_3 >= 0xba2e8ba2e8ba2e)
        {
            int64_t var_58_2 = 0;
            void* var_50_2 = &arg1[2];
        }
        else
        {
            int64_t x10_4 = (x10_3 << 1);
            if (x10_4 < x8_3)
            {
                x24_1 = x8_3;
            }
            else
            {
                x24_1 = x10_4;
            }
            int64_t var_58_1 = 0;
            void* var_50_1 = &arg1[2];
        }
        int64_t x0;
        if ((x10_3 >= 0xba2e8ba2e8ba2e || (x10_3 < 0xba2e8ba2e8ba2e && x24_1 != 0)))
        {
            x0 = operator new((x24_1 * 0xb0));
        }
        if ((x10_3 < 0xba2e8ba2e8ba2e && x24_1 == 0))
        {
            x0 = 0;
        }
        v0 = data_54780;
        void* x8_5 = (x0 + (x23_1 * 0xb0));
        int64_t* x11_1 = (x8_5 + 0x68);
        int64_t i_2 = i_3;
        void* var_60_1 = x8_5;
        int64_t var_70_1 = x0;
        void* var_68_1 = x8_5;
        int64_t i_1;
        do
        {
            *x11_1 = (x11_1 - 0x38);
            x11_1[-8] = 0x42ff0000;
            __builtin_memset((x11_1 - 0x3c), 0, 0x3c);
            x11_1[3] = 0;
            x11_1[4] = 0;
            x11_1[2] = 0;
            x11_1[5] = 0;
            i_1 = i_2;
            i_2 = (i_2 - 1);
            __builtin_memset(&x11_1[-0xd], 0, 0x24);
            *(x11_1 + 0x2c) = v0;
            x11_1[8] = 0;
            x11_1[1] = &x11_1[2];
            x11_1 = &x11_1[0x16];
        } while (i_1 != 1);
        int64_t x10_8 = (x8_5 + (i_3 * 0xb0));
        int64_t x23_2 = *arg1;
        int64_t x20 = arg1[1];
        if (x20 != x23_2)
        {
            do
            {
                x20 = (x20 - 0xb0);
                ground_filter::plane_base::plane_base((x8_5 - 0xb0));
                x8_5 = (var_68_1 - 0xb0);
                var_68_1 = x8_5;
            } while (x23_2 != x20);
            x23_2 = *arg1;
            x20 = arg1[1];
        }
        *arg1 = x8_5;
        arg1[1] = x10_8;
        int64_t var_68_2 = x23_2;
        int64_t var_60_3 = x20;
        int64_t x8_7 = arg1[2];
        arg1[2] = (x0 + (x24_1 * 0xb0));
        int64_t var_58_4 = x8_7;
        int64_t var_70_2 = x23_2;
        std::__ndk1::__split_buffer<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base>&>::~__split_buffer();
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void* std::__ndk1::__split_buffer<ground_filter::plane_base, std::__ndk1::allocator<ground_filter::plane_base>&>::~__split_buffer(int64_t* arg1)
{
    int64_t x20 = arg1[1];
    void* x21 = arg1[2];
    if (x21 != x20)
    {
        do
        {
            arg1[2] = (x21 - 0xb0);
            int64_t x8_3 = *(x21 - 0x50);
            if (x8_3 != 0)
            {
                int32_t temp0_1;
                int32_t i;
                do
                {
                    temp0_1 = __ldaxr((x8_3 + 0x14));
                    i = __stlxr((temp0_1 - 1), (x8_3 + 0x14));
                } while (i != 0);
                if (temp0_1 == 1)
                {
                    cv::Mat::deallocate();
                }
            }
            int32_t x8_5 = *(x21 - 0x84);
            int128_t v0;
            v0 = 0;
            *v0[8] = 0;
            *(x21 - 0x50) = 0;
            __builtin_memset((x21 - 0x78), 0, 0x20);
            if (x8_5 >= 1)
            {
                int64_t x8_6 = *(x21 - 0x48);
                int64_t i_1 = 0;
                do
                {
                    *(x8_6 + (i_1 << 2)) = 0;
                    i_1 = (i_1 + 1);
                } while (i_1 < *(x21 - 0x84));
            }
            void* x0_3 = *(x21 - 0x40);
            if (x0_3 != (x21 - 0x38))
            {
                cv::fastFree(x0_3);
            }
            x21 = arg1[2];
        } while (x21 != x20);
    }
    void* x0 = *arg1;
    if (x0 == 0)
    {
        return x0;
    }
    /* tailcall */
    return operator delete(x0);
}

void sub_512a0(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

int64_t Histogram::Histogram(uint64_t arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x20 + 0x28);
    uint64_t x8 = (arg2 * arg2);
    __builtin_memset(arg1, 0, 0x30);
    *(arg1 + 0x30) = arg2;
    *(arg1 + 0x34) = x8;
    int32_t var_2c = 0;
    int64_t x0 = std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::assign(arg1, x8);
    if (*(x20 + 0x28) != x9)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

void* std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::assign(int64_t* arg1, int64_t arg2, int32_t* arg3, int128_t arg4 @ v0)
{
    int64_t x8 = arg1[2];
    void* x0 = *arg1;
    void* x9_8;
    void** x20_1;
    if (arg2 > ((x8 - x0) >> 2))
    {
        if (x0 != 0)
        {
            arg1[1] = x0;
            operator delete(x0);
            x8 = 0;
            __builtin_memset(arg1, 0, 0x18);
        }
        if ((arg2 >> 0x3e) == 0)
        {
            int64_t x8_1;
            if (0x1ffffffffffffffe < (x8 >> 2))
            {
                x8_1 = 0x3fffffffffffffff;
            label_513f8:
                int64_t x22_1 = (x8_1 << 2);
                int128_t v0;
                x0 = operator new(x22_1);
                arg1[1] = x0;
                arg1[2] = (x0 + x22_1);
                void* x9_5 = x0;
                int64_t i_7 = arg2;
                *arg1 = x0;
                if (arg2 < 8)
                {
                    goto label_51578;
                }
                if ((x0 >= (arg3 + 1) || (x0 < (arg3 + 1) && (x0 + (arg2 << 2)) <= arg3)))
                {
                    /* unimplemented  {ld1r {v0.4s}, [x19]} */;
                    int64_t i_14 = (arg2 & 0xfffffffffffffff8);
                    x9_5 = (x0 + (i_14 << 2));
                    i_7 = (arg2 - i_14);
                    void* x12_3 = (x0 + 0x10);
                    int64_t i_9 = i_14;
                    int64_t i;
                    do
                    {
                        *(x12_3 - 0x10) = v0;
                        *x12_3 = v0;
                        i = i_9;
                        i_9 = (i_9 - 8);
                        x12_3 = (x12_3 + 0x20);
                    } while (i != 8);
                    if (i_14 != arg2)
                    {
                        goto label_51578;
                    }
                }
                if ((x0 < (arg3 + 1) && (x0 + (arg2 << 2)) > arg3))
                {
                    x9_5 = x0;
                    i_7 = arg2;
                label_51578:
                    int64_t i_1;
                    do
                    {
                        i_1 = i_7;
                        i_7 = (i_7 - 1);
                        *x9_5 = *arg3;
                        x9_5 = (x9_5 + 4);
                    } while (i_1 != 1);
                }
                x9_8 = (x0 + (arg2 << 2));
                x20_1 = &arg1[1];
            }
            else
            {
                int64_t x9_2 = (x8 >> 1);
                x8_1 = arg2;
                if (x9_2 < arg2)
                {
                    goto label_513f8;
                }
                x8_1 = x9_2;
                if ((x9_2 >> 0x3e) == 0)
                {
                    goto label_513f8;
                }
            }
        }
        if (((arg2 >> 0x3e) != 0 || ((arg2 >> 0x3e) == 0 && 0x1ffffffffffffffe >= (x8 >> 2))))
        {
            x0 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        }
    }
    if (((arg2 > ((x8 - x0) >> 2) && ((arg2 >> 0x3e) != 0 || ((arg2 >> 0x3e) == 0 && 0x1ffffffffffffffe >= (x8 >> 2)))) || arg2 <= ((x8 - x0) >> 2)))
    {
        x20_1 = &arg1[1];
        void* x8_2 = *x20_1;
        int64_t i_12 = ((x8_2 - x0) >> 2);
        int64_t i_6;
        if (i_12 < arg2)
        {
            i_6 = i_12;
        }
        else
        {
            i_6 = arg2;
        }
        if (i_6 != 0)
        {
            void* x11_1;
            if (i_6 < 8)
            {
                x11_1 = x0;
            label_514a8:
                int64_t i_2;
                do
                {
                    i_2 = i_6;
                    i_6 = (i_6 - 1);
                    *x11_1 = *arg3;
                    x11_1 = (x11_1 + 4);
                } while (i_2 != 1);
            }
            else
            {
                if ((arg3 + 1) > x0)
                {
                    x11_1 = x0;
                    if ((x0 + (i_6 << 2)) > arg3)
                    {
                        goto label_514a8;
                    }
                }
                /* unimplemented  {ld1r {v0.4s}, [x19]} */;
                int64_t i_15 = (i_6 & 0xfffffffffffffff8);
                x11_1 = (x0 + (i_15 << 2));
                void* x14_1 = (x0 + 0x10);
                int64_t i_11 = i_15;
                int64_t i_3;
                do
                {
                    *(x14_1 - 0x10) = arg4;
                    *x14_1 = arg4;
                    i_3 = i_11;
                    i_11 = (i_11 - 8);
                    x14_1 = (x14_1 + 0x20);
                } while (i_3 != 8);
                bool cond:6_1 = i_6 == i_15;
                i_6 = (i_6 - i_15);
                if (!(cond:6_1))
                {
                    goto label_514a8;
                }
            }
        }
        if (i_12 >= arg2)
        {
            x9_8 = (x0 + (arg2 << 2));
        }
        else
        {
            int64_t i_13 = (arg2 - i_12);
            void* x10_2;
            int64_t i_8;
            if (i_13 < 8)
            {
                x10_2 = x8_2;
                i_8 = i_13;
            label_51530:
                int64_t i_4;
                do
                {
                    i_4 = i_8;
                    i_8 = (i_8 - 1);
                    *x10_2 = *arg3;
                    x10_2 = (x10_2 + 4);
                } while (i_4 != 1);
            }
            else
            {
                if ((arg3 + 1) > x8_2)
                {
                    x10_2 = x8_2;
                    i_8 = i_13;
                    if ((x8_2 + (i_13 << 2)) > arg3)
                    {
                        goto label_51530;
                    }
                }
                /* unimplemented  {ld1r {v0.4s}, [x19]} */;
                int64_t i_16 = (i_13 & 0xfffffffffffffff8);
                x10_2 = (x8_2 + (i_16 << 2));
                i_8 = (i_13 - i_16);
                void* x13_2 = (x8_2 + 0x10);
                int64_t i_10 = i_16;
                int64_t i_5;
                do
                {
                    *(x13_2 - 0x10) = arg4;
                    *x13_2 = arg4;
                    i_5 = i_10;
                    i_10 = (i_10 - 8);
                    x13_2 = (x13_2 + 0x20);
                } while (i_5 != 8);
                if (i_13 != i_16)
                {
                    goto label_51530;
                }
            }
            x9_8 = (x8_2 + (i_13 << 2));
        }
    }
    *x20_1 = x9_8;
    return x0;
}

int64_t Histogram::initHistogram(uint64_t arg1, int64_t* arg2, int64_t* arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int32_t x24 = arg2[1];
    int64_t x1 = *(arg1 + 0x34);
    uint64_t x23 = x24;
    *(arg1 + 0x38) = x24;
    int32_t var_4c = 0;
    std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::assign(arg1, x1);
    int32_t var_4c_1 = 0xffffffff;
    int64_t x0_1 = std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::assign((arg1 + 0x18), x23);
    if (x24 >= 1)
    {
        int64_t x10_1 = *arg2;
        int64_t* x9_1 = *arg3;
        int64_t x8_1 = 0;
        int64_t x11_2 = (x10_1 + (arg2[1] << 3));
        do
        {
            if ((*(x9_1 + ((x8_1 >> 3) & 0x1ffffffffffffff8)) & (1 << x8_1)) != 0)
            {
                int32_t x13_4 = *(arg1 + 0x30);
                double v3_1 = *(x10_1 + (x8_1 << 3));
                double temp0_1 = vcvt_f64_s64((x13_4 - 1));
                int32_t temp0_2 = vcvt_s64_f64(((v3_1 * temp0_1) / 3.1400000000000001));
                int32_t x15_1;
                if (temp0_2 < 1)
                {
                    x15_1 = 0;
                }
                else
                {
                    x15_1 = vcvt_s64_f64((((*(x11_2 + (x8_1 << 3)) + 3.1400000000000001) * temp0_1) / 6.2800000000000002));
                }
                int32_t x13_5 = (temp0_2 + (x15_1 * x13_4));
                if ((x13_5 < *(arg1 + 0x34) && (x13_5 & 0x80000000) == 0))
                {
                    *(*(arg1 + 0x18) + (x8_1 << 2)) = x13_5;
                    int32_t* x14_5 = *arg1;
                    int64_t x13_6 = ((x13_5 << 0x20) >> 0x1e);
                    *(x14_5 + x13_6) = (*(x14_5 + x13_6) + 1);
                }
            }
            x8_1 = (x8_1 + 1);
        } while (x23 != x8_1);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

void Histogram::getPointsFromMostFrequentBin(int64_t* arg1, int128_t* arg2 @ x8)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t* x20 = arg1;
    __builtin_memset(arg2, 0, 0x18);
    int64_t x23 = arg1[7];
    if (x23 != 0)
    {
        if ((x23 & 0x80000000) != 0)
        {
            sub_20e70();
            /* no return */
        }
        int128_t v0_1;
        arg1 = operator new((x23 << 2));
        v0_1 = arg1;
        *v0_1[8] = arg1;
        *arg2 = v0_1;
        arg2[1] = (arg1 + (x23 << 2));
    }
    int64_t x8_2 = *(x20 + 0x34);
    if (x8_2 >= 1)
    {
        int64_t x10_1 = 0;
        int32_t x9_1 = 0;
        int32_t x22_1 = -1;
        do
        {
            int32_t x12_1 = *(*x20 + (x10_1 << 2));
            if (x12_1 > x9_1)
            {
                x22_1 = x10_1;
            }
            x10_1 = (x10_1 + 1);
            if (x12_1 > x9_1)
            {
                x9_1 = x12_1;
            }
        } while (x10_1 < x8_2);
        if (x9_1 > 0)
        {
            int32_t i_1 = 0;
            if (x23 >= 1)
            {
                int32_t i = 0;
                do
                {
                    if (*(x20[3] + (i << 2)) == x22_1)
                    {
                        int32_t* x9_4 = *(arg2 + 8);
                        if (x9_4 >= arg2[1])
                        {
                            std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__emplace_back_slow_path<int32_t&>(arg2);
                        }
                        else
                        {
                            *x9_4 = i;
                            *(arg2 + 8) = &x9_4[1];
                        }
                    }
                    i = (i_1 + 1);
                    i_1 = i;
                } while (i < x20[7]);
            }
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

void Histogram::removePoint(int64_t* arg1, int32_t arg2)
{
    int32_t* x8 = arg1[3];
    int64_t x9 = ((arg2 << 0x20) >> 0x1e);
    int32_t* x11 = *arg1;
    *(x8 + x9);
    x11[*(x8 + x9)] = (x11[*(x8 + x9)] - 1);
    *(x8 + x9) = 0xffffffff;
}

void* Histogram::~Histogram(int64_t* arg1)
{
    void* x0 = arg1[3];
    if (x0 != 0)
    {
        arg1[4] = x0;
        operator delete(x0);
    }
    void* x0_1 = *arg1;
    if (x0_1 == 0)
    {
        return x0_1;
    }
    arg1[1] = x0_1;
    /* tailcall */
    return operator delete(x0_1);
}

void std::__ndk1::vector<int32_t, std::__ndk1::allocator<int32_t> >::__emplace_back_slow_path<int32_t&>(int64_t* arg1, int32_t* arg2, char arg3 @ x25)
{
    void* x20 = *arg1;
    size_t x21 = (arg1[1] - x20);
    int64_t x24 = (x21 >> 2);
    if (((x24 + 1) >> 0x3e) != 0)
    {
        int32_t* x0_6;
        int64_t x1_2;
        int64_t x2_3;
        int64_t x3_1;
        int64_t x4_1;
        int32_t* x5_1;
        int32_t* x6_1;
        uint32_t x7_1;
        float v0_1;
        int32_t v1_1;
        x0_6 = std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return PlaneSeg::updatePlaneSeg(x0_6, x1_2, x2_3, x3_1, x4_1, x5_1, x6_1, x7_1, v0_1, v1_1, arg3);
    }
    void* x9_2 = (arg1[2] - x20);
    int64_t* x23;
    int64_t x25;
    if (0x1ffffffffffffffe < (x9_2 >> 2))
    {
        x25 = 0x3fffffffffffffff;
    }
    else
    {
        int64_t x9_3 = (x9_2 >> 1);
        if (x9_3 < (x24 + 1))
        {
            x25 = (x24 + 1);
        }
        else
        {
            x25 = x9_3;
        }
        if (x25 == 0)
        {
            x23 = nullptr;
        }
        else if ((x25 >> 0x3e) != 0)
        {
            sub_20e70();
            /* no return */
        }
    }
    if ((0x1ffffffffffffffe < (x9_2 >> 2) || (0x1ffffffffffffffe >= (x9_2 >> 2) && x25 != 0)))
    {
        x23 = operator new((x25 << 2));
    }
    void* x24_1 = (x23 + (x24 << 2));
    *x24_1 = *arg2;
    if (x21 >= 1)
    {
        memcpy(x23, x20, x21);
    }
    *arg1 = x23;
    arg1[1] = (x24_1 + 4);
    arg1[2] = (x23 + (x25 << 2));
    if (x20 == 0)
    {
        return;
    }
    /* tailcall */
    return operator delete(x20);
}

void PlaneSeg::updatePlaneSeg(int32_t* arg1, int64_t, int64_t, int64_t, int64_t, int32_t* arg6, int32_t* arg7, uint32_t arg8, float arg9, int32_t arg10 @ v1, char arg11)
{
    if ((arg11 & 1) == 0)
    {
        arg1[0x10] = 0;
        return;
    }
    arg1[0x10] = 1;
    arg1[5] = *arg7;
    arg1[8] = arg7[1];
    arg1[9] = arg7[2];
    arg1[6] = arg7[3];
    arg1[0xa] = arg7[4];
    arg1[7] = arg7[5];
    float x8_6 = arg7[6];
    arg1[2] = x8_6;
    float x9 = arg7[7];
    arg1[3] = x9;
    float x10 = arg7[8];
    *arg1 = arg8;
    arg1[0xe] = arg10;
    arg1[0xf] = arg9;
    arg1[4] = x10;
    int32_t x11 = *arg6;
    float temp0 = vcvts_f32_s32(arg8);
    arg1[0x14] = x11;
    arg1[0x15] = arg6[1];
    arg1[0x16] = arg6[2];
    int32_t x8_7 = arg6[3];
    arg1[0x11] = (x8_6 / temp0);
    arg1[0x12] = (x9 / temp0);
    arg1[0x13] = (x10 / temp0);
    arg1[0x17] = x8_7;
}

int128_t getValueOfsubMatrix(int64_t* arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    int128_t v0;
    v0 = 0f;
    if ((arg4 <= arg2 && arg5 <= arg3))
    {
        v0 = *(*arg1 + ((arg5 + (arg4 * arg3)) << 2));
    }
    return v0;
}

void* PlaneSeg::updatePlaneSeg(int32_t* arg1, int64_t* arg2, int32_t arg3, int32_t arg4, int32_t arg5)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x11 = *(x25 + 0x28);
    int32_t x8_2;
    if ((arg3 % arg5) == 0)
    {
        x8_2 = 4;
    }
    else
    {
        x8_2 = 2;
    }
    *arg1 = 0;
    arg1[1] = (arg4 / x8_2);
    __builtin_memset(&arg1[2], 0, 0x24);
    arg1[0x10] = 1;
    int64_t x9 = arg2[1];
    int32_t x20 = (arg4 * arg3);
    int64_t x28 = x20;
    int64_t x27 = arg4;
    int64_t var_80 = 1;
    int64_t* var_78 = arg2;
    int64_t var_90 = (*arg2 + ((x28 + (x9 << 1)) << 2));
    int64_t var_88 = x27;
    int64_t var_70 = x9;
    Eigen::Matrix<float, -1, -1, 0, -1, -1>::operator=<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, false> >(&arg1[0x18]);
    int64_t var_80_1 = 1;
    int64_t* var_78_1 = arg2;
    int64_t var_90_1 = (*arg2 + (x20 << 2));
    int64_t var_88_1 = x27;
    int64_t var_70_1 = arg2[1];
    Eigen::Matrix<float, -1, -1, 0, -1, -1>::operator=<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, false> >(&arg1[0x1e]);
    int64_t x8_8 = arg2[1];
    int64_t var_80_2 = 1;
    int64_t* var_78_2 = arg2;
    int64_t var_90_2 = (*arg2 + ((x8_8 + x28) << 2));
    int64_t var_88_2 = x27;
    int64_t var_70_2 = x8_8;
    void* x0_3;
    float128 v0;
    float128 v1;
    float128 v2;
    float128 v3;
    int128_t v4;
    int128_t v5;
    int128_t v6;
    int128_t v7;
    x0_3 = Eigen::Matrix<float, -1, -1, 0, -1, -1>::operator=<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, false> >(&arg1[0x24]);
    v0 = 0f;
    v1 = 0f;
    int64_t x11_1 = (*(arg1 + 0x88) * *(arg1 + 0x80));
    if (x11_1 != 0)
    {
        int128_t* x8_10 = *(arg1 + 0x78);
        int64_t x10_2;
        if (x11_1 < 0)
        {
            x10_2 = (x11_1 + 7);
        }
        else
        {
            x10_2 = x11_1;
        }
        int64_t x9_6;
        if (x11_1 < 0)
        {
            x9_6 = (x11_1 + 3);
        }
        else
        {
            x9_6 = x11_1;
        }
        if ((x11_1 + 3) < 7)
        {
            int32_t x9_8 = *x8_10;
            if (x11_1 < 2)
            {
                v1 = x9_8;
            }
            else
            {
                int64_t i_29 = (x11_1 - 1);
                void* x8_12 = (x8_10 + 4);
                int64_t i;
                do
                {
                    v1 = *x8_12;
                    x8_12 = (x8_12 + 4);
                    v2 = x9_8;
                    i = i_29;
                    i_29 = (i_29 - 1);
                    v1 = (v1 + v2);
                    x9_8 = v1;
                } while (i != 1);
            }
        }
        else
        {
            v1 = *x8_10;
            int64_t x9_7 = (x9_6 & 0xfffffffffffffffc);
            if (x11_1 >= 8)
            {
                v2 = x8_10[1];
                int64_t x10_3 = (x10_2 & 0xfffffffffffffff8);
                if (x11_1 >= 0x10)
                {
                    void* x12_2 = &x8_10[3];
                    int64_t x13_1 = 8;
                    do
                    {
                        v3 = *(x12_2 - 0x10);
                        v4 = *x12_2;
                        x13_1 = (x13_1 + 8);
                        x12_2 = (x12_2 + 0x20);
                        v1 = (v1 + v3);
                        *v1[4] = (*v1[4] + *v3[4]);
                        *v1[8] = (*v1[8] + *v3[8]);
                        *v1[0xc] = (*v1[0xc] + *v3[0xc]);
                        v2 = (v2 + v4);
                        *v2[4] = (*v2[4] + *v4[4]);
                        *v2[8] = (*v2[8] + *v4[8]);
                        *v2[0xc] = (*v2[0xc] + *v4[0xc]);
                    } while (x13_1 < x10_3);
                }
                v1 = (v2 + v1);
                *v1[4] = (*v2[4] + *v1[4]);
                *v1[8] = (*v2[8] + *v1[8]);
                *v1[0xc] = (*v2[0xc] + *v1[0xc]);
                if (x9_7 > x10_3)
                {
                    v2 = *(x8_10 + (x10_3 << 2));
                    v1 = (v1 + v2);
                    *v1[4] = (*v1[4] + *v2[4]);
                    *v1[8] = (*v1[8] + *v2[8]);
                    *v1[0xc] = (*v1[0xc] + *v2[0xc]);
                }
            }
            vextq_f16(v1, v1, false);
            /* unimplemented  {faddp v1.2s, v1.2s, v2.2s} */;
            /* unimplemented  {faddp v1.2s, v1.2s, v1.2s} */;
            if (x9_7 < x11_1)
            {
                int64_t i_28 = (x11_1 - x9_7);
                void* x8_11 = (x8_10 + (x9_7 << 2));
                int64_t i_1;
                do
                {
                    v2 = *x8_11;
                    x8_11 = (x8_11 + 4);
                    i_1 = i_28;
                    i_28 = (i_28 - 1);
                    v1 = (v1 + v2);
                } while (i_1 != 1);
            }
        }
    }
    int64_t x8_13 = *(arg1 + 0x98);
    int64_t x9_9 = *(arg1 + 0xa0);
    arg1[2] = v1;
    int64_t x9_10 = (x9_9 * x8_13);
    if (x9_10 != 0)
    {
        int128_t* x8_14 = *(arg1 + 0x90);
        int64_t x12_3;
        if (x9_10 < 0)
        {
            x12_3 = (x9_10 + 7);
        }
        else
        {
            x12_3 = x9_10;
        }
        int64_t x10_6;
        if (x9_10 < 0)
        {
            x10_6 = (x9_10 + 3);
        }
        else
        {
            x10_6 = x9_10;
        }
        if ((x9_10 + 3) < 7)
        {
            int32_t x10_8 = *x8_14;
            if (x9_10 < 2)
            {
                v0 = x10_8;
            }
            else
            {
                int64_t i_34 = (x9_10 - 1);
                void* x8_16 = (x8_14 + 4);
                int64_t i_2;
                do
                {
                    v0 = *x8_16;
                    x8_16 = (x8_16 + 4);
                    v2 = x10_8;
                    i_2 = i_34;
                    i_34 = (i_34 - 1);
                    v0 = (v0 + v2);
                    x10_8 = v0;
                } while (i_2 != 1);
            }
        }
        else
        {
            v0 = *x8_14;
            int64_t x10_7 = (x10_6 & 0xfffffffffffffffc);
            if (x9_10 >= 8)
            {
                v2 = x8_14[1];
                int64_t x12_4 = (x12_3 & 0xfffffffffffffff8);
                if (x9_10 >= 0x10)
                {
                    void* x13_3 = &x8_14[3];
                    int64_t x14_1 = 8;
                    do
                    {
                        v3 = *(x13_3 - 0x10);
                        v4 = *x13_3;
                        x14_1 = (x14_1 + 8);
                        x13_3 = (x13_3 + 0x20);
                        v0 = (v0 + v3);
                        *v0[4] = (*v0[4] + *v3[4]);
                        *v0[8] = (*v0[8] + *v3[8]);
                        *v0[0xc] = (*v0[0xc] + *v3[0xc]);
                        v2 = (v2 + v4);
                        *v2[4] = (*v2[4] + *v4[4]);
                        *v2[8] = (*v2[8] + *v4[8]);
                        *v2[0xc] = (*v2[0xc] + *v4[0xc]);
                    } while (x14_1 < x12_4);
                }
                v0 = (v2 + v0);
                *v0[4] = (*v2[4] + *v0[4]);
                *v0[8] = (*v2[8] + *v0[8]);
                *v0[0xc] = (*v2[0xc] + *v0[0xc]);
                if (x10_7 > x12_4)
                {
                    v2 = *(x8_14 + (x12_4 << 2));
                    v0 = (v0 + v2);
                    *v0[4] = (*v0[4] + *v2[4]);
                    *v0[8] = (*v0[8] + *v2[8]);
                    *v0[0xc] = (*v0[0xc] + *v2[0xc]);
                }
            }
            vextq_f16(v0, v0, false);
            /* unimplemented  {faddp v0.2s, v0.2s, v2.2s} */;
            /* unimplemented  {faddp v0.2s, v0.2s, v0.2s} */;
            if (x10_7 < x9_10)
            {
                int64_t i_33 = (x9_10 - x10_7);
                void* x8_15 = (x8_14 + (x10_7 << 2));
                int64_t i_3;
                do
                {
                    v2 = *x8_15;
                    x8_15 = (x8_15 + 4);
                    i_3 = i_33;
                    i_33 = (i_33 - 1);
                    v0 = (v0 + v2);
                } while (i_3 != 1);
            }
        }
    }
    void* x10_9 = *(arg1 + 0x68);
    int64_t x12_6 = *(arg1 + 0x70);
    arg1[3] = v0;
    int64_t x8_17 = (x12_6 * x10_9);
    int64_t x14_5;
    if (x8_17 == 0)
    {
        x14_5 = 0;
        arg1[4] = 0;
        v2 = 0f;
    }
    else
    {
        int128_t* x13_4 = *(arg1 + 0x60);
        int64_t x15_1;
        if (x8_17 < 0)
        {
            x15_1 = (x8_17 + 7);
        }
        else
        {
            x15_1 = x8_17;
        }
        int64_t x14_3;
        if (x8_17 < 0)
        {
            x14_3 = (x8_17 + 3);
        }
        else
        {
            x14_3 = x8_17;
        }
        if ((x8_17 + 3) < 7)
        {
            int32_t x14_6 = *x13_4;
            if (x8_17 < 2)
            {
                v2 = x14_6;
                arg1[4] = x14_6;
            }
            else
            {
                int64_t i_43 = (x8_17 - 1);
                void* x13_6 = (x13_4 + 4);
                int64_t i_4;
                do
                {
                    v2 = *x13_6;
                    x13_6 = (x13_6 + 4);
                    v3 = x14_6;
                    i_4 = i_43;
                    i_43 = (i_43 - 1);
                    v2 = (v2 + v3);
                    x14_6 = v2;
                } while (i_4 != 1);
            }
        }
        else
        {
            v2 = *x13_4;
            int64_t x14_4 = (x14_3 & 0xfffffffffffffffc);
            if (x8_17 >= 8)
            {
                v3 = x13_4[1];
                int64_t x15_2 = (x15_1 & 0xfffffffffffffff8);
                if (x8_17 >= 0x10)
                {
                    void* x16_2 = &x13_4[3];
                    int64_t x17_1 = 8;
                    do
                    {
                        v4 = *(x16_2 - 0x10);
                        v5 = *x16_2;
                        x17_1 = (x17_1 + 8);
                        x16_2 = (x16_2 + 0x20);
                        v2 = (v2 + v4);
                        *v2[4] = (*v2[4] + *v4[4]);
                        *v2[8] = (*v2[8] + *v4[8]);
                        *v2[0xc] = (*v2[0xc] + *v4[0xc]);
                        v3 = (v3 + v5);
                        *v3[4] = (*v3[4] + *v5[4]);
                        *v3[8] = (*v3[8] + *v5[8]);
                        *v3[0xc] = (*v3[0xc] + *v5[0xc]);
                    } while (x17_1 < x15_2);
                }
                v2 = (v3 + v2);
                *v2[4] = (*v3[4] + *v2[4]);
                *v2[8] = (*v3[8] + *v2[8]);
                *v2[0xc] = (*v3[0xc] + *v2[0xc]);
                if (x14_4 > x15_2)
                {
                    v3 = *(x13_4 + (x15_2 << 2));
                    v2 = (v2 + v3);
                    *v2[4] = (*v2[4] + *v3[4]);
                    *v2[8] = (*v2[8] + *v3[8]);
                    *v2[0xc] = (*v2[0xc] + *v3[0xc]);
                }
            }
            vextq_f16(v2, v2, false);
            /* unimplemented  {faddp v2.2s, v2.2s, v3.2s} */;
            /* unimplemented  {faddp v2.2s, v2.2s, v2.2s} */;
            if (x14_4 < x8_17)
            {
                int64_t i_42 = (x8_17 - x14_4);
                void* x13_5 = (x13_4 + (x14_4 << 2));
                int64_t i_5;
                do
                {
                    v3 = *x13_5;
                    x13_5 = (x13_5 + 4);
                    i_5 = i_42;
                    i_42 = (i_42 - 1);
                    v2 = (v2 + v3);
                } while (i_5 != 1);
            }
        }
        if ((((x8_17 + 3) < 7 && x8_17 >= 2) || (x8_17 + 3) >= 7))
        {
            arg1[4] = v2;
        }
        if ((((x8_17 + 3) < 7 && x8_17 < 2) || ((((x8_17 + 3) < 7 && x8_17 >= 2) || (x8_17 + 3) >= 7) && x8_17 != 0)))
        {
            int32_t* x13_7 = *(arg1 + 0x60);
            v3 = *x13_7;
            if (v3 > 0f)
            {
                x14_5 = 1;
            }
            else
            {
                x14_5 = 0;
            }
            if (x10_9 >= 2)
            {
                int64_t x15_4;
                void* i_46;
                if ((x10_9 - 1) > 3)
                {
                    i_46 = ((x10_9 - 1) & 0xfffffffffffffffc);
                    v4 = 0;
                    *v4[8] = 0;
                    v3 = 0;
                    *v3[8] = 0;
                    x0_3 = &x13_7[3];
                    x15_4 = (i_46 | 1);
                    v4 = x14_5;
                    v5 = 1;
                    *v5[8] = 1;
                    void* i_38 = i_46;
                    void* i_6;
                    do
                    {
                        v6 = *(x0_3 - 8);
                        v7 = *x0_3;
                        i_6 = i_38;
                        i_38 = (i_38 - 4);
                        x0_3 = (x0_3 + 0x10);
                        /* unimplemented  {fcmgt v6.2s, v6.2s, #0.00000000} */;
                        /* unimplemented  {fcmgt v7.2s, v7.2s, #0.00000000} */;
                        v6 = v6;
                        *v6[8] = *v6[4];
                        v7 = v7;
                        *v7[8] = *v7[4];
                        v4 = (v4 + (v6 & v5));
                        v3 = (v3 + (v7 & v5));
                    } while (i_6 != 4);
                    v3 = vpaddd_s64((v3 + v4));
                    x14_5 = v3;
                }
                else
                {
                    x15_4 = 1;
                }
                if (((x10_9 - 1) <= 3 || ((x10_9 - 1) > 3 && (x10_9 - 1) != i_46)))
                {
                    void* i_44 = (x10_9 - x15_4);
                    int32_t* x15_5 = &x13_7[x15_4];
                    void* i_7;
                    do
                    {
                        v3 = *x15_5;
                        x15_5 = &x15_5[1];
                        int64_t x17_2;
                        if (v3 > 0f)
                        {
                            x17_2 = 1;
                        }
                        else
                        {
                            x17_2 = 0;
                        }
                        i_7 = i_44;
                        i_44 = (i_44 - 1);
                        x14_5 = (x14_5 + x17_2);
                    } while (i_7 != 1);
                }
            }
            if (x12_6 >= 2)
            {
                int64_t x16_4 = (x10_9 << 2);
                void* i_45 = (x10_9 & 0xfffffffffffffffc);
                x0_3 = x10_9;
                void* x1_1 = ((x13_7 + x16_4) + 8);
                int64_t x2 = 1;
                do
                {
                    if (x10_9 >= 1)
                    {
                        void* i_47;
                        if (x10_9 > 3)
                        {
                            v4 = 0;
                            *v4[8] = 0;
                            v3 = 0;
                            *v3[8] = 0;
                            v4 = x14_5;
                            void* i_39 = i_45;
                            void* x3 = x1_1;
                            void* i_8;
                            do
                            {
                                v5 = *(x3 - 8);
                                v6 = *x3;
                                v7 = 1;
                                *v7[8] = 1;
                                i_8 = i_39;
                                i_39 = (i_39 - 4);
                                x3 = (x3 + 0x10);
                                /* unimplemented  {fcmgt v5.2s, v5.2s, #0.00000000} */;
                                /* unimplemented  {fcmgt v6.2s, v6.2s, #0.00000000} */;
                                v5 = v5;
                                *v5[8] = *v5[4];
                                v6 = v6;
                                *v6[8] = *v6[4];
                                v4 = (v4 + (v5 & v7));
                                v3 = (v3 + (v6 & v7));
                            } while (i_8 != 4);
                            v3 = vpaddd_s64((v3 + v4));
                            x14_5 = v3;
                            i_47 = i_45;
                        }
                        else
                        {
                            i_47 = nullptr;
                        }
                        if ((x10_9 <= 3 || (x10_9 > 3 && x10_9 != i_45)))
                        {
                            int32_t* x3_2 = &x13_7[(i_47 + x0_3)];
                            void* i_23 = (x10_9 - i_47);
                            void* i_9;
                            do
                            {
                                v3 = *x3_2;
                                x3_2 = &x3_2[1];
                                int64_t x5_1;
                                if (v3 > 0f)
                                {
                                    x5_1 = 1;
                                }
                                else
                                {
                                    x5_1 = 0;
                                }
                                i_9 = i_23;
                                i_23 = (i_23 - 1);
                                x14_5 = (x14_5 + x5_1);
                            } while (i_9 != 1);
                        }
                    }
                    x2 = (x2 + 1);
                    x1_1 = (x1_1 + x16_4);
                    x0_3 = (x0_3 + x10_9);
                } while (x2 != x12_6);
            }
        }
        if (((((x8_17 + 3) < 7 && x8_17 >= 2) || (x8_17 + 3) >= 7) && x8_17 == 0))
        {
            x14_5 = 0;
        }
    }
    v4 = 0x3eb0c6f7a0b5ed8d;
    v3 = vcvt_f64_s64(x14_5);
    int32_t x10_10 = arg1[1];
    *v1[4] = v0;
    v0 = v2;
    v2 = (v3 + 9.9999999999999995e-07);
    /* unimplemented  {fcvtl v1.2d, v1.2s} */;
    vdupq_laneq_s64(v2, 0);
    v0 = (v0 / v2);
    /* unimplemented  {fdiv v1.2d, v1.2d, v3.2d} */;
    v0 = v0;
    /* unimplemented  {fcvtn v1.2s, v1.2d} */;
    *arg1 = x14_5;
    *(arg1 + 0x2c) = v1;
    arg1[0xd] = v0;
    uint32_t x8_19;
    double v0_1;
    double v1_2;
    if (x10_10 <= x14_5)
    {
        int128_t* x10_11 = *(arg1 + 0x60);
        int32_t x12_7;
        if (arg5 < 0)
        {
            x12_7 = (arg5 + 1);
        }
        else
        {
            x12_7 = arg5;
        }
        int32_t x12_8 = (x12_7 >> 1);
        int32_t x13_8 = (arg4 - x12_8);
        int32_t x14_7 = (x12_8 + arg5);
        if (x14_7 < x13_8)
        {
            v2 = *(x10_11 + (x12_8 << 2));
            v1 = *(x10_11 + (x14_7 << 2));
            v0 = 0x42c80000;
            int64_t x12_9 = arg5;
            if (v2 < v1)
            {
                v2 = v1;
            }
            else
            {
                v2 = v2;
            }
            int64_t i_10 = (x12_9 + x14_7);
            if (!(v1 <= 0f))
            {
                goto label_5208c;
            }
            while (i_10 < x13_8)
            {
                v1 = *(x10_11 + (i_10 << 2));
                i_10 = (i_10 + x12_9);
                if (!(v1 <= 0f))
                {
                label_5208c:
                    /* unimplemented  {fabd s2, s1, s2} */;
                    bool cond:36_1 = v2 >= 100f;
                    v2 = v1;
                    if (cond:36_1)
                    {
                        break;
                    }
                }
            }
        }
        v0 = 0f;
        v1 = 0f;
        uint128_t v3_1;
        if (x11_1 != 0)
        {
            int128_t* x12_10 = *(arg1 + 0x78);
            int64_t x14_8;
            if (x11_1 < 0)
            {
                x14_8 = (x11_1 + 7);
            }
            else
            {
                x14_8 = x11_1;
            }
            int64_t x13_11;
            if (x11_1 < 0)
            {
                x13_11 = (x11_1 + 3);
            }
            else
            {
                x13_11 = x11_1;
            }
            if ((x11_1 + 3) < 7)
            {
                v1 = *x12_10;
                v1 = (v1 * v1);
                if (x11_1 >= 2)
                {
                    int64_t i_31 = (x11_1 - 1);
                    void* x12_12 = (x12_10 + 4);
                    int64_t i_11;
                    do
                    {
                        v2 = *x12_12;
                        x12_12 = (x12_12 + 4);
                        i_11 = i_31;
                        i_31 = (i_31 - 1);
                        v2 = (v2 * v2);
                        v1 = (v1 + v2);
                    } while (i_11 != 1);
                }
            }
            else
            {
                v1 = *x12_10;
                int64_t x13_12 = (x13_11 & 0xfffffffffffffffc);
                v1 = (v1 * v1);
                *v1[4] = (*v1[4] * *v1[4]);
                *v1[8] = (*v1[8] * *v1[8]);
                *v1[0xc] = (*v1[0xc] * *v1[0xc]);
                if (x11_1 >= 8)
                {
                    v2 = x12_10[1];
                    int64_t x14_9 = (x14_8 & 0xfffffffffffffff8);
                    v2 = (v2 * v2);
                    *v2[4] = (*v2[4] * *v2[4]);
                    *v2[8] = (*v2[8] * *v2[8]);
                    *v2[0xc] = (*v2[0xc] * *v2[0xc]);
                    if (x11_1 >= 0x10)
                    {
                        void* x15_8 = &x12_10[3];
                        int64_t x16_5 = 8;
                        do
                        {
                            v3_1 = *(x15_8 - 0x10);
                            v4 = *x15_8;
                            x16_5 = (x16_5 + 8);
                            x15_8 = (x15_8 + 0x20);
                            v3_1 = (v3_1 * v3_1);
                            *v3_1[4] = (*v3_1[4] * *v3_1[4]);
                            *v3_1[8] = (*v3_1[8] * *v3_1[8]);
                            *v3_1[0xc] = (*v3_1[0xc] * *v3_1[0xc]);
                            v4 = (v4 * v4);
                            *v4[4] = (*v4[4] * *v4[4]);
                            *v4[8] = (*v4[8] * *v4[8]);
                            *v4[0xc] = (*v4[0xc] * *v4[0xc]);
                            v1 = (v1 + v3_1);
                            *v1[4] = (*v1[4] + *v3_1[4]);
                            *v1[8] = (*v1[8] + *v3_1[8]);
                            *v1[0xc] = (*v1[0xc] + *v3_1[0xc]);
                            v2 = (v2 + v4);
                            *v2[4] = (*v2[4] + *v4[4]);
                            *v2[8] = (*v2[8] + *v4[8]);
                            *v2[0xc] = (*v2[0xc] + *v4[0xc]);
                        } while (x16_5 < x14_9);
                    }
                    v1 = (v2 + v1);
                    *v1[4] = (*v2[4] + *v1[4]);
                    *v1[8] = (*v2[8] + *v1[8]);
                    *v1[0xc] = (*v2[0xc] + *v1[0xc]);
                    if (x13_12 > x14_9)
                    {
                        v2 = *(x12_10 + (x14_9 << 2));
                        v2 = (v2 * v2);
                        *v2[4] = (*v2[4] * *v2[4]);
                        *v2[8] = (*v2[8] * *v2[8]);
                        *v2[0xc] = (*v2[0xc] * *v2[0xc]);
                        v1 = (v1 + v2);
                        *v1[4] = (*v1[4] + *v2[4]);
                        *v1[8] = (*v1[8] + *v2[8]);
                        *v1[0xc] = (*v1[0xc] + *v2[0xc]);
                    }
                }
                vextq_f16(v1, v1, false);
                /* unimplemented  {faddp v1.2s, v1.2s, v2.2s} */;
                /* unimplemented  {faddp v1.2s, v1.2s, v1.2s} */;
                if (x13_12 < x11_1)
                {
                    int64_t i_30 = (x11_1 - x13_12);
                    void* x12_11 = (x12_10 + (x13_12 << 2));
                    int64_t i_12;
                    do
                    {
                        v2 = *x12_11;
                        x12_11 = (x12_11 + 4);
                        i_12 = i_30;
                        i_30 = (i_30 - 1);
                        v2 = (v2 * v2);
                        v1 = (v1 + v2);
                    } while (i_12 != 1);
                }
            }
        }
        arg1[5] = v1;
        if (x9_10 != 0)
        {
            int128_t* x11_2 = *(arg1 + 0x90);
            int64_t x13_13;
            if (x9_10 < 0)
            {
                x13_13 = (x9_10 + 7);
            }
            else
            {
                x13_13 = x9_10;
            }
            int64_t x12_14;
            if (x9_10 < 0)
            {
                x12_14 = (x9_10 + 3);
            }
            else
            {
                x12_14 = x9_10;
            }
            if ((x9_10 + 3) < 7)
            {
                v0 = *x11_2;
                v0 = (v0 * v0);
                if (x9_10 >= 2)
                {
                    int64_t i_35 = (x9_10 - 1);
                    void* x11_4 = (x11_2 + 4);
                    int64_t i_13;
                    do
                    {
                        v1 = *x11_4;
                        x11_4 = (x11_4 + 4);
                        i_13 = i_35;
                        i_35 = (i_35 - 1);
                        v1 = (v1 * v1);
                        v0 = (v0 + v1);
                    } while (i_13 != 1);
                }
            }
            else
            {
                v0 = *x11_2;
                int64_t x12_15 = (x12_14 & 0xfffffffffffffffc);
                v0 = (v0 * v0);
                *v0[4] = (*v0[4] * *v0[4]);
                *v0[8] = (*v0[8] * *v0[8]);
                *v0[0xc] = (*v0[0xc] * *v0[0xc]);
                if (x9_10 >= 8)
                {
                    v1 = x11_2[1];
                    int64_t x13_14 = (x13_13 & 0xfffffffffffffff8);
                    v1 = (v1 * v1);
                    *v1[4] = (*v1[4] * *v1[4]);
                    *v1[8] = (*v1[8] * *v1[8]);
                    *v1[0xc] = (*v1[0xc] * *v1[0xc]);
                    if (x9_10 >= 0x10)
                    {
                        void* x14_12 = &x11_2[3];
                        int64_t x15_9 = 8;
                        do
                        {
                            v2 = *(x14_12 - 0x10);
                            v3_1 = *x14_12;
                            x15_9 = (x15_9 + 8);
                            x14_12 = (x14_12 + 0x20);
                            v2 = (v2 * v2);
                            *v2[4] = (*v2[4] * *v2[4]);
                            *v2[8] = (*v2[8] * *v2[8]);
                            *v2[0xc] = (*v2[0xc] * *v2[0xc]);
                            v3_1 = (v3_1 * v3_1);
                            *v3_1[4] = (*v3_1[4] * *v3_1[4]);
                            *v3_1[8] = (*v3_1[8] * *v3_1[8]);
                            *v3_1[0xc] = (*v3_1[0xc] * *v3_1[0xc]);
                            v0 = (v0 + v2);
                            *v0[4] = (*v0[4] + *v2[4]);
                            *v0[8] = (*v0[8] + *v2[8]);
                            *v0[0xc] = (*v0[0xc] + *v2[0xc]);
                            v1 = (v1 + v3_1);
                            *v1[4] = (*v1[4] + *v3_1[4]);
                            *v1[8] = (*v1[8] + *v3_1[8]);
                            *v1[0xc] = (*v1[0xc] + *v3_1[0xc]);
                        } while (x15_9 < x13_14);
                    }
                    v0 = (v1 + v0);
                    *v0[4] = (*v1[4] + *v0[4]);
                    *v0[8] = (*v1[8] + *v0[8]);
                    *v0[0xc] = (*v1[0xc] + *v0[0xc]);
                    if (x12_15 > x13_14)
                    {
                        v1 = *(x11_2 + (x13_14 << 2));
                        v1 = (v1 * v1);
                        *v1[4] = (*v1[4] * *v1[4]);
                        *v1[8] = (*v1[8] * *v1[8]);
                        *v1[0xc] = (*v1[0xc] * *v1[0xc]);
                        v0 = (v0 + v1);
                        *v0[4] = (*v0[4] + *v1[4]);
                        *v0[8] = (*v0[8] + *v1[8]);
                        *v0[0xc] = (*v0[0xc] + *v1[0xc]);
                    }
                }
                vextq_f16(v0, v0, false);
                /* unimplemented  {faddp v0.2s, v0.2s, v1.2s} */;
                /* unimplemented  {faddp v0.2s, v0.2s, v0.2s} */;
                if (x12_15 < x9_10)
                {
                    int64_t i_37 = (x9_10 - x12_15);
                    void* x11_3 = (x11_2 + (x12_15 << 2));
                    int64_t i_14;
                    do
                    {
                        v1 = *x11_3;
                        x11_3 = (x11_3 + 4);
                        i_14 = i_37;
                        i_37 = (i_37 - 1);
                        v1 = (v1 * v1);
                        v0 = (v0 + v1);
                    } while (i_14 != 1);
                }
            }
        }
        arg1[6] = v0;
        v0 = 0f;
        v1 = 0f;
        if (x8_17 != 0)
        {
            int64_t x12_16;
            if (x8_17 < 0)
            {
                x12_16 = (x8_17 + 7);
            }
            else
            {
                x12_16 = x8_17;
            }
            int64_t x11_6;
            if (x8_17 < 0)
            {
                x11_6 = (x8_17 + 3);
            }
            else
            {
                x11_6 = x8_17;
            }
            if ((x8_17 + 3) < 7)
            {
                v1 = *x10_11;
                v1 = (v1 * v1);
                if (x8_17 >= 2)
                {
                    int64_t i_32 = (x8_17 - 1);
                    void* x12_19 = (x10_11 + 4);
                    int64_t i_15;
                    do
                    {
                        v2 = *x12_19;
                        x12_19 = (x12_19 + 4);
                        i_15 = i_32;
                        i_32 = (i_32 - 1);
                        v2 = (v2 * v2);
                        v1 = (v1 + v2);
                    } while (i_15 != 1);
                }
            }
            else
            {
                v1 = *x10_11;
                int64_t x11_7 = (x11_6 & 0xfffffffffffffffc);
                v1 = (v1 * v1);
                *v1[4] = (*v1[4] * *v1[4]);
                *v1[8] = (*v1[8] * *v1[8]);
                *v1[0xc] = (*v1[0xc] * *v1[0xc]);
                if (x8_17 >= 8)
                {
                    v2 = x10_11[1];
                    int64_t x12_17 = (x12_16 & 0xfffffffffffffff8);
                    v2 = (v2 * v2);
                    *v2[4] = (*v2[4] * *v2[4]);
                    *v2[8] = (*v2[8] * *v2[8]);
                    *v2[0xc] = (*v2[0xc] * *v2[0xc]);
                    if (x8_17 >= 0x10)
                    {
                        void* x13_17 = &x10_11[3];
                        int64_t x14_13 = 8;
                        do
                        {
                            v3_1 = *(x13_17 - 0x10);
                            v4 = *x13_17;
                            x14_13 = (x14_13 + 8);
                            x13_17 = (x13_17 + 0x20);
                            v3_1 = (v3_1 * v3_1);
                            *v3_1[4] = (*v3_1[4] * *v3_1[4]);
                            *v3_1[8] = (*v3_1[8] * *v3_1[8]);
                            *v3_1[0xc] = (*v3_1[0xc] * *v3_1[0xc]);
                            v4 = (v4 * v4);
                            *v4[4] = (*v4[4] * *v4[4]);
                            *v4[8] = (*v4[8] * *v4[8]);
                            *v4[0xc] = (*v4[0xc] * *v4[0xc]);
                            v1 = (v1 + v3_1);
                            *v1[4] = (*v1[4] + *v3_1[4]);
                            *v1[8] = (*v1[8] + *v3_1[8]);
                            *v1[0xc] = (*v1[0xc] + *v3_1[0xc]);
                            v2 = (v2 + v4);
                            *v2[4] = (*v2[4] + *v4[4]);
                            *v2[8] = (*v2[8] + *v4[8]);
                            *v2[0xc] = (*v2[0xc] + *v4[0xc]);
                        } while (x14_13 < x12_17);
                    }
                    v1 = (v2 + v1);
                    *v1[4] = (*v2[4] + *v1[4]);
                    *v1[8] = (*v2[8] + *v1[8]);
                    *v1[0xc] = (*v2[0xc] + *v1[0xc]);
                    if (x11_7 > x12_17)
                    {
                        v2 = *(x10_11 + (x12_17 << 2));
                        v2 = (v2 * v2);
                        *v2[4] = (*v2[4] * *v2[4]);
                        *v2[8] = (*v2[8] * *v2[8]);
                        *v2[0xc] = (*v2[0xc] * *v2[0xc]);
                        v1 = (v1 + v2);
                        *v1[4] = (*v1[4] + *v2[4]);
                        *v1[8] = (*v1[8] + *v2[8]);
                        *v1[0xc] = (*v1[0xc] + *v2[0xc]);
                    }
                }
                vextq_f16(v1, v1, false);
                /* unimplemented  {faddp v1.2s, v1.2s, v2.2s} */;
                /* unimplemented  {faddp v1.2s, v1.2s, v1.2s} */;
                if (x11_7 < x8_17)
                {
                    int64_t i_36 = (x8_17 - x11_7);
                    void* x11_8 = (x10_11 + (x11_7 << 2));
                    int64_t i_16;
                    do
                    {
                        v2 = *x11_8;
                        x11_8 = (x11_8 + 4);
                        i_16 = i_36;
                        i_36 = (i_36 - 1);
                        v2 = (v2 * v2);
                        v1 = (v1 + v2);
                    } while (i_16 != 1);
                }
            }
        }
        arg1[7] = v1;
        if (x9_10 != 0)
        {
            int128_t* x11_9 = *(arg1 + 0x78);
            int64_t x14_14;
            if (x9_10 < 0)
            {
                x14_14 = (x9_10 + 7);
            }
            else
            {
                x14_14 = x9_10;
            }
            int64_t x13_18;
            if (x9_10 < 0)
            {
                x13_18 = (x9_10 + 3);
            }
            else
            {
                x13_18 = x9_10;
            }
            if ((x9_10 + 3) < 7)
            {
                int32_t* x12_23 = *(arg1 + 0x90);
                v0 = *x11_9;
                v1 = *x12_23;
                v0 = (v0 * v1);
                if (x9_10 >= 2)
                {
                    int64_t i_27 = (x9_10 - 1);
                    void* x12_24 = &x12_23[1];
                    void* x11_11 = (x11_9 + 4);
                    int64_t i_17;
                    do
                    {
                        v1 = *x11_11;
                        x11_11 = (x11_11 + 4);
                        v2 = *x12_24;
                        x12_24 = (x12_24 + 4);
                        i_17 = i_27;
                        i_27 = (i_27 - 1);
                        v1 = (v1 * v2);
                        v0 = (v0 + v1);
                    } while (i_17 != 1);
                }
            }
            else
            {
                int128_t* x12_21 = *(arg1 + 0x90);
                int64_t x13_19 = (x13_18 & 0xfffffffffffffffc);
                v1 = *x12_21;
                v0 = (*x11_9 * v1);
                *v0[4] = (*v0[4] * *v1[4]);
                *v0[8] = (*v0[8] * *v1[8]);
                *v0[0xc] = (*v0[0xc] * *v1[0xc]);
                if (x9_10 >= 8)
                {
                    v2 = x12_21[1];
                    int64_t x14_15 = (x14_14 & 0xfffffffffffffff8);
                    v1 = (x11_9[1] * v2);
                    *v1[4] = (*v1[4] * *v2[4]);
                    *v1[8] = (*v1[8] * *v2[8]);
                    *v1[0xc] = (*v1[0xc] * *v2[0xc]);
                    if (x9_10 >= 0x10)
                    {
                        void* x15_11 = &x12_21[3];
                        void* x16_6 = &x11_9[3];
                        int64_t x17_3 = 8;
                        do
                        {
                            v4 = *x16_6;
                            v3_1 = *(x15_11 - 0x10);
                            v5 = *x15_11;
                            x17_3 = (x17_3 + 8);
                            x15_11 = (x15_11 + 0x20);
                            v2 = (*(x16_6 - 0x10) * v3_1);
                            *v2[4] = (*v2[4] * *v3_1[4]);
                            *v2[8] = (*v2[8] * *v3_1[8]);
                            *v2[0xc] = (*v2[0xc] * *v3_1[0xc]);
                            v3_1 = (v4 * v5);
                            *v3_1[4] = (*v4[4] * *v5[4]);
                            *v3_1[8] = (*v4[8] * *v5[8]);
                            *v3_1[0xc] = (*v4[0xc] * *v5[0xc]);
                            v0 = (v0 + v2);
                            *v0[4] = (*v0[4] + *v2[4]);
                            *v0[8] = (*v0[8] + *v2[8]);
                            *v0[0xc] = (*v0[0xc] + *v2[0xc]);
                            v1 = (v1 + v3_1);
                            *v1[4] = (*v1[4] + *v3_1[4]);
                            *v1[8] = (*v1[8] + *v3_1[8]);
                            *v1[0xc] = (*v1[0xc] + *v3_1[0xc]);
                            x16_6 = (x16_6 + 0x20);
                        } while (x17_3 < x14_15);
                    }
                    v0 = (v1 + v0);
                    *v0[4] = (*v1[4] + *v0[4]);
                    *v0[8] = (*v1[8] + *v0[8]);
                    *v0[0xc] = (*v1[0xc] + *v0[0xc]);
                    if (x13_19 > x14_15)
                    {
                        int64_t x14_16 = (x14_15 << 2);
                        v2 = *(x12_21 + x14_16);
                        v1 = (*(x11_9 + x14_16) * v2);
                        *v1[4] = (*v1[4] * *v2[4]);
                        *v1[8] = (*v1[8] * *v2[8]);
                        *v1[0xc] = (*v1[0xc] * *v2[0xc]);
                        v0 = (v0 + v1);
                        *v0[4] = (*v0[4] + *v1[4]);
                        *v0[8] = (*v0[8] + *v1[8]);
                        *v0[0xc] = (*v0[0xc] + *v1[0xc]);
                    }
                }
                vextq_f16(v0, v0, false);
                /* unimplemented  {faddp v0.2s, v0.2s, v1.2s} */;
                /* unimplemented  {faddp v0.2s, v0.2s, v0.2s} */;
                if (x13_19 < x9_10)
                {
                    int64_t i_26 = (x9_10 - x13_19);
                    int64_t x13_20 = (x13_19 << 2);
                    void* x12_22 = (x12_21 + x13_20);
                    void* x11_10 = (x11_9 + x13_20);
                    int64_t i_18;
                    do
                    {
                        v1 = *x11_10;
                        x11_10 = (x11_10 + 4);
                        v2 = *x12_22;
                        x12_22 = (x12_22 + 4);
                        i_18 = i_26;
                        i_26 = (i_26 - 1);
                        v1 = (v1 * v2);
                        v0 = (v0 + v1);
                    } while (i_18 != 1);
                }
            }
        }
        arg1[8] = v0;
        if (x8_17 == 0)
        {
            arg1[9] = 0;
            v0 = 0f;
        }
        else
        {
            int128_t* x13_21 = *(arg1 + 0x78);
            int64_t x9_12;
            if (x8_17 < 0)
            {
                x9_12 = (x8_17 + 7);
            }
            else
            {
                x9_12 = x8_17;
            }
            int64_t x14_17;
            if (x8_17 < 0)
            {
                x14_17 = (x8_17 + 3);
            }
            else
            {
                x14_17 = x8_17;
            }
            int64_t x11_12 = (x9_12 & 0xfffffffffffffff8);
            int64_t x9_13 = (x14_17 & 0xfffffffffffffffc);
            if ((x8_17 + 3) < 7)
            {
                v0 = *x13_21;
                v1 = *x10_11;
                v0 = (v0 * v1);
                if (x8_17 < 2)
                {
                    int32_t* x8_18 = *(arg1 + 0x90);
                    arg1[9] = v0;
                    v1 = *x10_11;
                    v0 = *x8_18;
                    v0 = (v0 * v1);
                }
                else
                {
                    int64_t i_41 = (x8_17 - 1);
                    void* x15_14 = (x10_11 + 4);
                    void* x13_23 = (x13_21 + 4);
                    int64_t i_19;
                    do
                    {
                        v1 = *x13_23;
                        x13_23 = (x13_23 + 4);
                        v2 = *x15_14;
                        x15_14 = (x15_14 + 4);
                        i_19 = i_41;
                        i_41 = (i_41 - 1);
                        v1 = (v1 * v2);
                        v0 = (v0 + v1);
                    } while (i_19 != 1);
                }
            }
            else
            {
                v1 = *x10_11;
                v0 = (*x13_21 * v1);
                *v0[4] = (*v0[4] * *v1[4]);
                *v0[8] = (*v0[8] * *v1[8]);
                *v0[0xc] = (*v0[0xc] * *v1[0xc]);
                if (x8_17 >= 8)
                {
                    v2 = x10_11[1];
                    v1 = (x13_21[1] * v2);
                    *v1[4] = (*v1[4] * *v2[4]);
                    *v1[8] = (*v1[8] * *v2[8]);
                    *v1[0xc] = (*v1[0xc] * *v2[0xc]);
                    if (x8_17 >= 0x10)
                    {
                        void* x14_18 = &x10_11[3];
                        void* x15_12 = &x13_21[3];
                        int64_t x16_7 = 8;
                        do
                        {
                            v4 = *x15_12;
                            v3_1 = *(x14_18 - 0x10);
                            v5 = *x14_18;
                            x16_7 = (x16_7 + 8);
                            x14_18 = (x14_18 + 0x20);
                            v2 = (*(x15_12 - 0x10) * v3_1);
                            *v2[4] = (*v2[4] * *v3_1[4]);
                            *v2[8] = (*v2[8] * *v3_1[8]);
                            *v2[0xc] = (*v2[0xc] * *v3_1[0xc]);
                            v3_1 = (v4 * v5);
                            *v3_1[4] = (*v4[4] * *v5[4]);
                            *v3_1[8] = (*v4[8] * *v5[8]);
                            *v3_1[0xc] = (*v4[0xc] * *v5[0xc]);
                            v0 = (v0 + v2);
                            *v0[4] = (*v0[4] + *v2[4]);
                            *v0[8] = (*v0[8] + *v2[8]);
                            *v0[0xc] = (*v0[0xc] + *v2[0xc]);
                            v1 = (v1 + v3_1);
                            *v1[4] = (*v1[4] + *v3_1[4]);
                            *v1[8] = (*v1[8] + *v3_1[8]);
                            *v1[0xc] = (*v1[0xc] + *v3_1[0xc]);
                            x15_12 = (x15_12 + 0x20);
                        } while (x16_7 < x11_12);
                    }
                    v0 = (v1 + v0);
                    *v0[4] = (*v1[4] + *v0[4]);
                    *v0[8] = (*v1[8] + *v0[8]);
                    *v0[0xc] = (*v1[0xc] + *v0[0xc]);
                    if (x9_13 > x11_12)
                    {
                        int64_t x14_19 = (x11_12 << 2);
                        v2 = *(x10_11 + x14_19);
                        v1 = (*(x13_21 + x14_19) * v2);
                        *v1[4] = (*v1[4] * *v2[4]);
                        *v1[8] = (*v1[8] * *v2[8]);
                        *v1[0xc] = (*v1[0xc] * *v2[0xc]);
                        v0 = (v0 + v1);
                        *v0[4] = (*v0[4] + *v1[4]);
                        *v0[8] = (*v0[8] + *v1[8]);
                        *v0[0xc] = (*v0[0xc] + *v1[0xc]);
                    }
                }
                vextq_f16(v0, v0, false);
                /* unimplemented  {faddp v0.2s, v0.2s, v1.2s} */;
                /* unimplemented  {faddp v0.2s, v0.2s, v0.2s} */;
                if (x9_13 < x8_17)
                {
                    int64_t x16_8 = (x9_13 << 2);
                    int64_t i_40 = (x8_17 - x9_13);
                    void* x15_13 = (x10_11 + x16_8);
                    void* x13_22 = (x13_21 + x16_8);
                    int64_t i_20;
                    do
                    {
                        v1 = *x13_22;
                        x13_22 = (x13_22 + 4);
                        v2 = *x15_13;
                        x15_13 = (x15_13 + 4);
                        i_20 = i_40;
                        i_40 = (i_40 - 1);
                        v1 = (v1 * v2);
                        v0 = (v0 + v1);
                    } while (i_20 != 1);
                }
            }
            if ((((x8_17 + 3) < 7 && x8_17 >= 2) || (x8_17 + 3) >= 7))
            {
                int128_t* x13_24 = *(arg1 + 0x90);
                arg1[9] = v0;
                if ((x8_17 + 3) < 7)
                {
                    v0 = *x13_24;
                    v1 = *x10_11;
                    v0 = (v0 * v1);
                    if (x8_17 >= 2)
                    {
                        int64_t i_25 = (x8_17 - 1);
                        void* x9_15 = (x10_11 + 4);
                        void* x10_13 = (x13_24 + 4);
                        int64_t i_21;
                        do
                        {
                            v1 = *x10_13;
                            x10_13 = (x10_13 + 4);
                            v2 = *x9_15;
                            x9_15 = (x9_15 + 4);
                            i_21 = i_25;
                            i_25 = (i_25 - 1);
                            v1 = (v1 * v2);
                            v0 = (v0 + v1);
                        } while (i_21 != 1);
                    }
                }
                else
                {
                    v1 = *x10_11;
                    v0 = (*x13_24 * v1);
                    *v0[4] = (*v0[4] * *v1[4]);
                    *v0[8] = (*v0[8] * *v1[8]);
                    *v0[0xc] = (*v0[0xc] * *v1[0xc]);
                    if (x8_17 >= 8)
                    {
                        v2 = x10_11[1];
                        v1 = (x13_24[1] * v2);
                        *v1[4] = (*v1[4] * *v2[4]);
                        *v1[8] = (*v1[8] * *v2[8]);
                        *v1[0xc] = (*v1[0xc] * *v2[0xc]);
                        if (x8_17 >= 0x10)
                        {
                            void* x12_26 = &x10_11[3];
                            void* x14_20 = &x13_24[3];
                            int64_t x15_15 = 8;
                            do
                            {
                                v4 = *x14_20;
                                v3_1 = *(x12_26 - 0x10);
                                v5 = *x12_26;
                                x15_15 = (x15_15 + 8);
                                x12_26 = (x12_26 + 0x20);
                                v2 = (*(x14_20 - 0x10) * v3_1);
                                *v2[4] = (*v2[4] * *v3_1[4]);
                                *v2[8] = (*v2[8] * *v3_1[8]);
                                *v2[0xc] = (*v2[0xc] * *v3_1[0xc]);
                                v3_1 = (v4 * v5);
                                *v3_1[4] = (*v4[4] * *v5[4]);
                                *v3_1[8] = (*v4[8] * *v5[8]);
                                *v3_1[0xc] = (*v4[0xc] * *v5[0xc]);
                                v0 = (v0 + v2);
                                *v0[4] = (*v0[4] + *v2[4]);
                                *v0[8] = (*v0[8] + *v2[8]);
                                *v0[0xc] = (*v0[0xc] + *v2[0xc]);
                                v1 = (v1 + v3_1);
                                *v1[4] = (*v1[4] + *v3_1[4]);
                                *v1[8] = (*v1[8] + *v3_1[8]);
                                *v1[0xc] = (*v1[0xc] + *v3_1[0xc]);
                                x14_20 = (x14_20 + 0x20);
                            } while (x15_15 < x11_12);
                        }
                        v0 = (v1 + v0);
                        *v0[4] = (*v1[4] + *v0[4]);
                        *v0[8] = (*v1[8] + *v0[8]);
                        *v0[0xc] = (*v1[0xc] + *v0[0xc]);
                        if (x9_13 > x11_12)
                        {
                            int64_t x11_13 = (x11_12 << 2);
                            v2 = *(x10_11 + x11_13);
                            v1 = (*(x13_24 + x11_13) * v2);
                            *v1[4] = (*v1[4] * *v2[4]);
                            *v1[8] = (*v1[8] * *v2[8]);
                            *v1[0xc] = (*v1[0xc] * *v2[0xc]);
                            v0 = (v0 + v1);
                            *v0[4] = (*v0[4] + *v1[4]);
                            *v0[8] = (*v0[8] + *v1[8]);
                            *v0[0xc] = (*v0[0xc] + *v1[0xc]);
                        }
                    }
                    vextq_f16(v0, v0, false);
                    /* unimplemented  {faddp v0.2s, v0.2s, v1.2s} */;
                    /* unimplemented  {faddp v0.2s, v0.2s, v0.2s} */;
                    if (x9_13 < x8_17)
                    {
                        int64_t x11_14 = (x9_13 << 2);
                        int64_t i_24 = (x8_17 - x9_13);
                        void* x9_14 = (x10_11 + x11_14);
                        void* x10_12 = (x13_24 + x11_14);
                        int64_t i_22;
                        do
                        {
                            float v1_1 = *x10_12;
                            x10_12 = (x10_12 + 4);
                            v2 = *x9_14;
                            x9_14 = (x9_14 + 4);
                            i_22 = i_24;
                            i_24 = (i_24 - 1);
                            v0 = (v0 + (v1_1 * v2));
                        } while (i_22 != 1);
                    }
                }
            }
        }
        x8_19 = arg1[0x10];
        arg1[0xa] = v0;
        if (x8_19 != 0)
        {
            x0_3 = PlaneSeg::fitPlane();
            v1_2 = arg1[0x13];
            v0_1 = arg1[0xf];
            v1_2 = v1_2;
            v1_2 = (((v1_2 * 1.4249999999999999e-06) * v1_2) + 10.0);
        }
    }
    if ((x10_10 > x14_5 || ((x10_10 <= x14_5 && x8_19 != 0) && !((v1_2 * v1_2) >= v0_1))))
    {
        arg1[0x10] = 0;
    }
    if (*(x25 + 0x28) != x11)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_3;
}

int64_t* Eigen::Matrix<float, -1, -1, 0, -1, -1>::operator=<Eigen::Block<Eigen::Matrix<float, -1, -1, 0, -1, -1>, -1, -1, false> >(int64_t* arg1, int64_t* arg2)
{
    int64_t x1 = arg2[1];
    int64_t x2 = arg2[2];
    if ((x1 != 0 && (x2 != 0 && (0x7fffffffffffffff / x2) < x1)))
    {
        void* thrown_exception = __cxa_allocate_exception(8);
        std::bad_alloc::bad_alloc();
        __cxa_throw(thrown_exception, _typeinfo_for_std::bad_alloc, std::bad_alloc::~bad_alloc);
        /* no return */
    }
    int128_t v0;
    int128_t v1;
    v0 = Eigen::PlainObjectBase<Eigen::Matrix<float, -1, -1, 0, -1, -1> >::resize(arg1, x1);
    int64_t x8_2 = arg1[2];
    if (x8_2 >= 1)
    {
        int64_t x11_1 = arg1[1];
        int64_t x9_1 = 0;
        int64_t x13_1 = 0;
        int64_t x10_1 = 0;
        do
        {
            int64_t x15_1 = (x11_1 - x13_1);
            int64_t x14_1 = (x15_1 & 0xfffffffffffffffc);
            if (x13_1 >= 1)
            {
                int64_t x16_1 = *arg2;
                int64_t x17_1 = arg2[4];
                int64_t x0_1 = *arg1;
                int64_t x1_1 = arg1[1];
                int64_t x2_2;
                int64_t i_8;
                int64_t x3_3;
                int64_t x4_3;
                if (x13_1 > 7)
                {
                    int64_t x2_1 = (x10_1 << 2);
                    x4_3 = (x13_1 << 2);
                    x3_3 = (x1_1 * x2_1);
                    x2_2 = (x17_1 * x2_1);
                    if (((x0_1 + x3_3) >= ((x16_1 + x4_3) + x2_2) || ((x0_1 + x3_3) < ((x16_1 + x4_3) + x2_2) && (x16_1 + x2_2) >= ((x0_1 + x4_3) + x3_3))))
                    {
                        i_8 = (x13_1 & 0xfffffffffffffff8);
                        void* x3_2 = ((x16_1 + (x17_1 * x9_1)) + 0x10);
                        void* x4_2 = ((x0_1 + (x1_1 * x9_1)) + 0x10);
                        int64_t i_5 = i_8;
                        int64_t i;
                        do
                        {
                            v0 = *(x3_2 - 0x10);
                            v1 = *x3_2;
                            x3_2 = (x3_2 + 0x20);
                            i = i_5;
                            i_5 = (i_5 - 8);
                            *(x4_2 - 0x10) = v0;
                            *x4_2 = v1;
                            x4_2 = (x4_2 + 0x20);
                        } while (i != 8);
                        if (x13_1 != i_8)
                        {
                            goto label_528a0;
                        }
                    }
                }
                if ((x13_1 <= 7 || ((x13_1 > 7 && (x0_1 + x3_3) < ((x16_1 + x4_3) + x2_2)) && (x16_1 + x2_2) < ((x0_1 + x4_3) + x3_3))))
                {
                    i_8 = 0;
                label_528a0:
                    int32_t* x17_2 = (x0_1 + ((i_8 + (x1_1 * x10_1)) << 2));
                    int32_t* x16_2 = (x16_1 + ((i_8 + (x17_1 * x10_1)) << 2));
                    int64_t i_4 = (x13_1 - i_8);
                    int64_t i_1;
                    do
                    {
                        int32_t x1_3 = *x16_2;
                        x16_2 = &x16_2[1];
                        i_1 = i_4;
                        i_4 = (i_4 - 1);
                        *x17_2 = x1_3;
                        x17_2 = &x17_2[1];
                    } while (i_1 != 1);
                }
            }
            int64_t x16_3 = (x14_1 + x13_1);
            int64_t x17_3 = x13_1;
            if (x14_1 >= 1)
            {
                do
                {
                    v0 = *(*arg2 + ((x17_3 + (x10_1 * arg2[4])) << 2));
                    int64_t x0_5 = (x17_3 + (x10_1 * arg1[1]));
                    x17_3 = (x17_3 + 4);
                    *(*arg1 + (x0_5 << 2)) = v0;
                } while (x17_3 < x16_3);
            }
            if (x16_3 < x11_1)
            {
                int64_t x17_4 = *arg2;
                int64_t x0_7 = arg2[4];
                int64_t x1_5 = *arg1;
                int64_t x2_5 = arg1[1];
                int64_t x15_2 = (x15_1 - x14_1);
                if (x15_2 > 7)
                {
                    int64_t x3_7 = (x2_5 * x10_1);
                    int64_t x4_5 = (x0_7 * x10_1);
                    if (((x1_5 + (((x13_1 + x3_7) + x14_1) << 2)) < (x17_4 + ((x11_1 + x4_5) << 2)) && (x17_4 + (((x13_1 + x4_5) + x14_1) << 2)) < (x1_5 + ((x11_1 + x3_7) << 2))))
                    {
                        goto label_529b8;
                    }
                    int64_t i_9 = (x15_2 & 0xfffffffffffffff8);
                    x16_3 = (x16_3 + i_9);
                    void* x14_3 = ((x17_4 + (((x13_1 + (x0_7 * x10_1)) + x14_1) << 2)) + 0x10);
                    void* x4_12 = ((x1_5 + (((x13_1 + (x2_5 * x10_1)) + x14_1) << 2)) + 0x10);
                    int64_t i_6 = i_9;
                    int64_t i_2;
                    do
                    {
                        v0 = *(x14_3 - 0x10);
                        v1 = *x14_3;
                        i_2 = i_6;
                        i_6 = (i_6 - 8);
                        x14_3 = (x14_3 + 0x20);
                        *(x4_12 - 0x10) = v0;
                        *x4_12 = v1;
                        x4_12 = (x4_12 + 0x20);
                    } while (i_2 != 8);
                    if (x15_2 != i_9)
                    {
                        goto label_529b8;
                    }
                }
                else
                {
                label_529b8:
                    int32_t* x14_5 = (x1_5 + ((x16_3 + (x2_5 * x10_1)) << 2));
                    int32_t* x15_4 = (x17_4 + ((x16_3 + (x0_7 * x10_1)) << 2));
                    int64_t i_7 = (x11_1 - x16_3);
                    int64_t i_3;
                    do
                    {
                        int32_t x17_5 = *x15_4;
                        x15_4 = &x15_4[1];
                        i_3 = i_7;
                        i_7 = (i_7 - 1);
                        *x14_5 = x17_5;
                        x14_5 = &x14_5[1];
                    } while (i_3 != 1);
                }
            }
            int64_t x13_2 = (x13_1 + (-(x11_1) & 3));
            int64_t x14_7;
            if (x13_2 < 0)
            {
                x14_7 = (x13_2 + 3);
            }
            else
            {
                x14_7 = x13_2;
            }
            int64_t x13_3 = (x13_2 - (x14_7 & 0xfffffffffffffffc));
            x10_1 = (x10_1 + 1);
            if (x11_1 < x13_3)
            {
                x13_1 = x11_1;
            }
            else
            {
                x13_1 = x13_3;
            }
            x9_1 = (x9_1 + 4);
        } while (x10_1 != x8_2);
    }
    return arg1;
}

int64_t PlaneSeg::fitPlane(float* arg1)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    float v0 = *arg1;
    float v1 = arg1[2];
    float v2 = arg1[3];
    float v3 = arg1[4];
    float v4 = arg1[5];
    float v5 = arg1[8];
    float v6 = arg1[9];
    /* unimplemented  {scvtf s0, s0} */;
    float v16 = (v2 / v0);
    float v7 = (v1 / v0);
    v0 = (v3 / v0);
    arg1[0x11] = v7;
    arg1[0x12] = v16;
    v7 = (v1 * v7);
    float v18 = (v1 * v0);
    float v20 = (v3 * v0);
    float v21 = arg1[0xa];
    v1 = (v5 - (v1 * v16));
    v3 = arg1[6];
    v5 = arg1[7];
    arg1[0x13] = v0;
    void var_68;
    float var_38;
    int64_t x0_1 = gte::NISymmetricEigensolver3x3<float>::operator()(&var_68, &*nullptr->ident.signature[1], &var_38, (v4 - v7), v1, (v6 - v18), (v3 - (v2 * v16)), (v21 - (v2 * v0)), (v5 - v20));
    float var_5c;
    int32_t v5_1 = var_5c;
    float v0_1 = var_38;
    float var_58;
    float v4_1 = var_58;
    float v6_1 = (arg1[0x13] * v4_1);
    float var_60;
    float v3_1 = (((var_60 * arg1[0x11]) + (arg1[0x12] * v5_1)) + v6_1);
    /* unimplemented  {fneg s6, s3} */;
    arg1[0x17] = v6_1;
    if (v3_1 >= 0f)
    {
        /* unimplemented  {fneg s1, s1} */;
        /* unimplemented  {fneg s5, s5} */;
        /* unimplemented  {fneg s4, s4} */;
        arg1[0x15] = v5_1;
        arg1[0x16] = v4_1;
        arg1[0x17] = v3_1;
    }
    else
    {
        arg1[0x15] = var_5c;
        arg1[0x16] = var_58;
    }
    *arg1;
    arg1[0x14] = var_60;
    /* unimplemented  {scvtf s2, s3} */;
    float var_34;
    arg1[0xe] = (var_34 / v0_1);
    arg1[0xf] = (v0_1 / var_34);
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int128_t PlaneSeg::expandSegment(int32_t* arg1, int64_t* arg2)
{
    int32_t* x8_2 = *arg2;
    int32_t x9 = *arg1;
    int128_t v1 = *(x8_2 + 8);
    int128_t v0;
    v0 = (v1 + *(arg1 + 8));
    *v0[4] = (*v1[4] + *v0[4]);
    *v0[8] = (*v1[8] + *v0[8]);
    *v0[0xc] = (*v1[0xc] + *v0[0xc]);
    *(arg1 + 8) = v0;
    v1 = *(arg1 + 0x18);
    v0 = (*(x8_2 + 0x18) + v1);
    *v0[4] = (*v0[4] + *v1[4]);
    *v0[8] = (*v0[8] + *v1[8]);
    *v0[0xc] = (*v0[0xc] + *v1[0xc]);
    *(arg1 + 0x18) = v0;
    v1 = arg1[0xa];
    v0 = x8_2[0xa];
    v0 = (v0 + v1);
    arg1[0xa] = v0;
    *arg1 = (x9 + *x8_2);
    return v0;
}

int128_t PlaneSeg::clearPoints(int32_t* arg1)
{
    *arg1 = 0;
    __builtin_memset(&arg1[2], 0, 0x24);
    return {0};
}

int128_t gte::NISymmetricEigensolver3x3<float>::operator()(cv::Mat* arg1, int32_t arg2, int64_t* arg3, int64_t* arg4, int128_t arg5 @ v0, int128_t arg6 @ v1, float arg7, float arg8, float arg9, float arg10, float arg11, float arg12, int64_t arg13 @ v9, float arg14 @ v16, float arg15 @ v17)
{
    int64_t v15;
    int64_t var_90 = v15;
    int64_t v14;
    int64_t var_88 = v14;
    int64_t v12;
    int64_t var_78 = v12;
    int64_t v11;
    int64_t var_70 = v11;
    int64_t v10;
    int64_t var_68 = v10;
    int64_t var_60 = arg13;
    int64_t v8;
    int64_t var_58 = v8;
    /* unimplemented  {fabs s6, s0} */;
    /* unimplemented  {fabs s7, s1} */;
    /* unimplemented  {fabs s16, s2} */;
    /* unimplemented  {fabs s17, s3} */;
    if (arg11 < arg12)
    {
        arg11 = arg12;
    }
    /* unimplemented  {fabs s7, s4} */;
    if (arg14 < arg15)
    {
        arg14 = arg15;
    }
    /* unimplemented  {fabs s17, s5} */;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    if (arg12 < arg15)
    {
        arg12 = arg15;
    }
    int64_t x8 = *(x24 + 0x28);
    if (arg11 < arg14)
    {
        arg11 = arg14;
    }
    int64_t v13;
    if (arg11 < arg12)
    {
        v13 = arg12;
    }
    else
    {
        v13 = arg11;
    }
    if (!(v13 != 0f))
    {
        arg5 = data_54780;
        *arg3 = 0;
        arg3[1] = 0;
        __builtin_memcpy(arg4, "\x00\x00\x80\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x3f", 0x24);
    }
    else
    {
        arg12 = (1f / v13);
        v12 = (arg12 * arg6);
        v11 = (arg12 * arg7);
        arg14 = (arg12 * arg5);
        arg15 = (arg12 * arg9);
        arg5 = (v12 * v12);
        arg6 = (v11 * v11);
        arg5 = (arg5 + arg6);
        arg6 = (arg15 * arg15);
        arg5 = (arg6 + arg5);
        arg9 = (arg12 * arg8);
        int32_t var_d0;
        int32_t var_a8;
        void* x25_2;
        void* x26_2;
        if (arg5 <= 0f)
        {
            data_54780;
            float* x25_3 = arg3;
            *x25_3 = arg14;
            x25_2 = &x25_3[2];
            x26_2 = (arg3 + 4);
            *x26_2 = arg9;
            __builtin_memcpy(arg4, "\x00\x00\x80\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x3f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x3f", 0x24);
        }
        else
        {
            arg10 = (arg12 * arg10);
            v15 = 0x40400000;
            v8 = ((arg10 + (arg14 + arg9)) / 3f);
            float var_dc_1 = arg9;
            arg7 = (arg14 - v8);
            arg9 = (arg9 - v8);
            float var_e4_1 = arg10;
            arg10 = (arg10 - v8);
            arg6 = ((arg9 * arg10) - arg6);
            arg5 = (arg5 + arg5);
            arg5 = (arg5 + ((arg10 * arg10) + ((arg7 * arg7) + (arg9 * arg9))));
            arg5 = (arg5 / 6f);
            arg6 = (arg7 * arg6);
            /* unimplemented  {fsqrt s9, s0} */;
            arg6 = (arg6 - (v12 * ((v12 * arg10) - (arg15 * v11))));
            arg5 = (arg13 * arg13);
            arg6 = ((v11 * ((v12 * arg15) - (v11 * arg9))) + arg6);
            arg5 = (arg13 * arg5);
            arg5 = (arg6 / arg5);
            arg5 = (arg5 * 0.5f);
            var_a8 = 0xbf800000;
            var_d0 = arg5;
            int32_t* x8_2;
            if (arg5 < -1f)
            {
                x8_2 = &var_a8;
            }
            else
            {
                x8_2 = &var_d0;
            }
            arg5 = *x8_2;
            int32_t var_d4 = 0x3f800000;
            int32_t* x8_3;
            if (arg5 > 1f)
            {
                x8_3 = &var_d4;
            }
            else
            {
                x8_3 = x8_2;
            }
            int32_t x8_4 = *x8_3;
            v14 = x8_4;
            var_d0 = x8_4;
            int64_t x0;
            int64_t x1;
            int32_t x2;
            int32_t v0_1;
            v0_1 = acosf(v14);
            v15 = (v0_1 / 3f);
            int64_t x0_1;
            int64_t x1_1;
            int32_t x2_1;
            float v0_3;
            v0_3 = cosf(x0, x1, x2, v15);
            v10 = (v0_3 + v0_3);
            float v0_4 = cosf(x0_1, x1_1, x2_1, (v15 + 2.09439516f));
            v0_4 = (v0_4 + v0_4);
            float v6 = (v8 + (arg13 * v0_4));
            float v7 = (v8 + (arg13 * v10));
            *arg3 = v6;
            x25_2 = &arg3[1];
            x26_2 = (arg3 + 4);
            *x26_2 = (v8 - (arg13 * (v10 + v0_4)));
            *x25_2 = v7;
            if (v14 >= 0f)
            {
                arg13 = var_dc_1;
                v8 = arg14;
                v14 = var_e4_1;
                v10 = arg15;
                gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector0(arg1, v8, v12, v11, arg13, v10, v14, v7);
                arg5 = gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector1(arg1, &arg4[3], v8, v12, v11, arg13, v10, v14, *x26_2);
                float v3_5 = *(arg4 + 0xc);
                arg5 = arg4[2];
                arg6 = *(arg4 + 0x1c);
                arg7 = arg4[4];
                float v4_5 = *(arg4 + 0x14);
                float v5_5 = arg4[3];
                float v6_5 = (arg5 * arg7);
                arg7 = (arg7 * v3_5);
                v3_5 = (arg6 * v3_5);
                arg6 = (v4_5 * arg6);
                arg5 = (arg5 * v5_5);
                arg6 = (v6_5 - arg6);
                arg5 = (v3_5 - arg5);
                *arg4 = arg6;
                *(arg4 + 4) = ((v4_5 * v5_5) - arg7);
                arg4[1] = arg5;
            }
            else
            {
                arg13 = var_dc_1;
                v8 = arg14;
                v14 = var_e4_1;
                v10 = arg15;
                gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector0(arg1, v8, v12, v11, arg13, v10, v14, v6);
                arg5 = gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector1(arg1, arg4, v8, v12, v11, arg13, v10, v14, *x26_2);
                float v3_2 = *arg4;
                arg5 = *(arg4 + 4);
                arg6 = arg4[2];
                arg7 = *(arg4 + 0x14);
                float v4_2 = arg4[1];
                float v5_2 = *(arg4 + 0xc);
                float v6_2 = (arg5 * arg7);
                arg7 = (arg7 * v3_2);
                v3_2 = (arg6 * v3_2);
                arg6 = (v4_2 * arg6);
                arg5 = (arg5 * v5_2);
                arg6 = (v6_2 - arg6);
                arg5 = (v3_2 - arg5);
                arg4[3] = arg6;
                *(arg4 + 0x1c) = ((v4_2 * v5_2) - arg7);
                arg4[4] = arg5;
            }
        }
        arg5 = *arg3;
        arg5 = (v13 * arg5);
        *arg3 = arg5;
        arg6 = *x26_2;
        arg6 = (v13 * arg6);
        *x26_2 = arg6;
        arg7 = (v13 * *x25_2);
        *x25_2 = arg7;
        if (arg2 != 0)
        {
            int64_t x8_5;
            int64_t x9_2;
            int64_t x10_1;
            int32_t x11_1;
            if (arg5 >= arg6)
            {
                if (!(arg7 >= arg6))
                {
                    x9_2 = 0;
                    x11_1 = 0;
                    x8_5 = 2;
                    x10_1 = 1;
                }
                else if (arg7 >= arg5)
                {
                    x10_1 = 0;
                    x11_1 = 0;
                    x8_5 = 1;
                    x9_2 = 2;
                }
                else
                {
                    x9_2 = 0;
                    x8_5 = 1;
                    x10_1 = 2;
                    x11_1 = 1;
                }
            }
            else if (!(arg7 >= arg5))
            {
                x10_1 = 0;
                x9_2 = 1;
                x8_5 = 2;
                x11_1 = 1;
            }
            else
            {
                x8_5 = 0;
                if (arg7 >= arg6)
                {
                    x10_1 = 1;
                    x9_2 = 2;
                    x11_1 = 1;
                }
                else
                {
                    x11_1 = 0;
                    x9_2 = 1;
                    x10_1 = 2;
                }
            }
            int64_t x15_1;
            if (arg2 == 0xffffffff)
            {
                x15_1 = x9_2;
            }
            else
            {
                x15_1 = x8_5;
            }
            int32_t var_a0_1 = arg3[1];
            var_a8 = *arg3;
            arg5 = *arg4;
            int64_t x8_6;
            if (arg2 == 0xffffffff)
            {
                x8_6 = x8_5;
            }
            else
            {
                x8_6 = x9_2;
            }
            int32_t var_b0_1 = arg4[4];
            var_d0 = arg5;
            int128_t var_c0_1 = *(arg4 + 0x10);
            *arg3 = &var_a8[x15_1];
            int64_t* x15_2 = (&var_d0 + (x15_1 * 0xc));
            arg4[1] = x15_2[1];
            *arg4 = *x15_2;
            int64_t* x10_2 = (&var_d0 + (x10_1 * 0xc));
            *x26_2 = &var_a8[x10_1];
            int64_t x10_3 = *x10_2;
            *(arg4 + 0x14) = x10_2[1];
            *(arg4 + 0xc) = x10_3;
            int64_t* x8_7 = (&var_d0 + (x8_6 * 0xc));
            int32_t x10_4;
            if (arg2 == 0xffffffff)
            {
                x10_4 = 1;
            }
            else
            {
                x10_4 = 0;
            }
            *x25_2 = &var_a8[x8_6];
            arg4[4] = x8_7[1];
            arg4[3] = *x8_7;
            if (x11_1 == x10_4)
            {
                arg5 = arg4[3];
                arg6 = arg4[4];
                /* unimplemented  {fneg v0.2s, v0.2s} */;
                /* unimplemented  {fneg s1, s1} */;
                arg4[3] = arg5;
                arg4[4] = arg6;
            }
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg5;
}

int64_t PlaneSeg::~PlaneSeg(void* arg1)
{
    free(*(arg1 + 0x90));
    free(*(arg1 + 0x78));
    /* tailcall */
    return free(*(arg1 + 0x60));
}

float gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector0(int64_t, float* arg2, float arg3, float arg4, float arg5, float arg6, float arg7, float arg8, float arg9)
{
    arg3 = (arg3 - arg9);
    arg6 = (arg6 - arg9);
    arg8 = (arg8 - arg9);
    arg9 = (arg4 * arg7);
    float v16 = (arg4 * arg5);
    float v17 = (arg5 * arg7);
    float v18 = (arg5 * arg5);
    arg5 = (arg6 * arg5);
    float v20 = (arg6 * arg3);
    float v21 = (arg8 * arg4);
    float v22 = (arg8 * arg3);
    float v19 = (arg7 * arg7);
    arg7 = (arg3 * arg7);
    arg6 = (arg6 * arg8);
    arg3 = (arg9 - arg5);
    arg4 = (v20 - (arg4 * arg4));
    float v7 = (v21 - v17);
    arg9 = (v18 - v22);
    arg5 = (v16 - arg7);
    arg8 = (arg7 - v16);
    arg7 = (arg6 - v19);
    arg6 = (v17 - v21);
    v17 = (arg3 * arg3);
    v16 = ((arg4 * arg4) + (v17 + (arg5 * arg5)));
    v18 = ((arg8 * arg8) + ((v7 * v7) + (arg9 * arg9)));
    (v18 - v16);
    if (v18 > v16)
    {
        v19 = v18;
    }
    else
    {
        v19 = v16;
    }
    int32_t x8;
    if (v18 > v16)
    {
        x8 = 1;
    }
    else
    {
        x8 = 0;
    }
    int32_t x8_1;
    if ((v17 + ((arg7 * arg7) + (arg6 * arg6))) > v19)
    {
        x8_1 = 2;
    }
    else
    {
        x8_1 = x8;
    }
    if (x8_1 == 1)
    {
        /* unimplemented  {fsqrt s0, s18} */;
        arg3 = (1f / arg3);
        arg7 = (v7 * arg3);
        arg5 = (arg9 * arg3);
        arg3 = (arg8 * arg3);
    }
    else if (x8_1 != 0)
    {
        /* unimplemented  {fsqrt s1, s17} */;
        arg4 = (1f / arg4);
        arg7 = (arg7 * arg4);
        arg5 = (arg6 * arg4);
        arg3 = (arg3 * arg4);
    }
    else
    {
        /* unimplemented  {fsqrt s3, s16} */;
        arg6 = (1f / arg6);
        arg7 = (arg3 * arg6);
        arg5 = (arg5 * arg6);
        arg3 = (arg4 * arg6);
    }
    *arg2 = arg7;
    arg2[1] = arg5;
    arg2[2] = arg3;
    return arg3;
}

int128_t gte::NISymmetricEigensolver3x3<float>::ComputeEigenvector1(int64_t, int32_t* arg2, int32_t* arg3, int64_t arg4 @ v0, uint128_t arg5 @ v1, int64_t arg6 @ v2, int64_t arg7 @ v3, uint128_t arg8 @ v4, int64_t arg9 @ v5, uint128_t arg10 @ v6, int64_t arg11 @ v7, int64_t arg12 @ v16)
{
    int128_t v18;
    v18 = *arg2;
    int128_t v19;
    v19 = arg2[1];
    /* unimplemented  {fabs s7, s18} */;
    /* unimplemented  {fabs s16, s19} */;
    int64_t v17;
    float v20;
    if (arg11 <= arg12)
    {
        v20 = arg2[2];
        arg11 = (v19 * v19);
        arg12 = 0x3f800000;
        v17 = (v20 * v20);
        arg11 = (arg11 + v17);
        /* unimplemented  {fsqrt s7, s7} */;
        arg11 = (1f / arg11);
        arg12 = (v20 * arg11);
        /* unimplemented  {fnmul s7, s19, s7} */;
        v17 = 0f;
    }
    else
    {
        v20 = arg2[2];
        arg11 = (v18 * v18);
        arg12 = 0x3f800000;
        v17 = (v20 * v20);
        arg11 = (arg11 + v17);
        /* unimplemented  {fsqrt s7, s7} */;
        arg11 = (1f / arg11);
        /* unimplemented  {fnmul s17, s20, s7} */;
        arg11 = (v18 * arg11);
        arg12 = 0f;
    }
    int64_t v23;
    v23 = (v18 * arg11);
    float v24 = (v18 * arg12);
    float v25 = (v19 * v17);
    v18 = ((v19 * arg11) - (arg12 * v20));
    v19 = ((v17 * v20) - v23);
    vdup_laneq_s32(arg10, 0);
    arg10 = (v24 - v25);
    int64_t v26;
    *v26[4] = v18;
    int64_t v21_1;
    *v21_1[4] = v19;
    int64_t v20_1;
    *v20_1[4] = arg10;
    arg4 = (v26 * arg4);
    *arg4[4] = (*v26[4] * arg4);
    v23 = (v21_1 * arg5);
    *v23[4] = (*v21_1[4] * arg5);
    arg5 = (v26 * arg5);
    *arg5[4] = (*v26[4] * arg5);
    arg7 = (v21_1 * arg7);
    *arg7[4] = (*v21_1[4] * arg7);
    arg4 = (arg4 + v23);
    *arg4[4] = (*arg4[4] + *v23[4]);
    v23 = (v20_1 * arg6);
    *v23[4] = (*v20_1[4] * arg6);
    arg5 = (arg5 + arg7);
    *arg5[4] = (*arg5[4] + *arg7[4]);
    arg7 = (v20_1 * arg8);
    *arg7[4] = (*v20_1[4] * arg8);
    arg6 = (v26 * arg6);
    *arg6[4] = (*v26[4] * arg6);
    arg8 = (v21_1 * arg8);
    *arg8[4] = (*v21_1[4] * arg8);
    arg9 = (v20_1 * arg9);
    *arg9[4] = (*v20_1[4] * arg9);
    arg6 = (arg6 + arg8);
    *arg6[4] = (*arg6[4] + *arg8[4]);
    arg4 = (arg4 + v23);
    *arg4[4] = (*arg4[4] + *v23[4]);
    arg5 = (arg5 + arg7);
    *arg5[4] = (*arg5[4] + *arg7[4]);
    arg6 = (arg6 + arg9);
    *arg6[4] = (*arg6[4] + *arg9[4]);
    arg7 = (v17 * *arg4[4]);
    arg8 = (arg12 * *arg5[4]);
    arg4 = (v26 * arg4);
    *arg4[4] = (*v26[4] * *arg4[4]);
    arg5 = (v21_1 * arg5);
    *arg5[4] = (*v21_1[4] * *arg5[4]);
    arg9 = (arg11 * *arg6[4]);
    arg6 = (v20_1 * arg6);
    *arg6[4] = (*v20_1[4] * *arg6[4]);
    arg5 = (arg4 + arg5);
    *arg5[4] = (*arg4[4] + *arg5[4]);
    arg6 = (arg6 + arg5);
    *arg6[4] = (*arg6[4] + *arg5[4]);
    arg7 = (arg7 + arg8);
    /* unimplemented  {fabd v4.2s, v2.2s, v22.2s} */;
    arg4 = (arg9 + arg7);
    arg7 = vdups_laneq_s32(arg8, 1);
    (arg5 - arg6);
    (*arg5[4] - *arg6[4]);
    /* unimplemented  {fabs s2, s0} */;
    if (arg8 >= arg7)
    {
        if (arg8 < arg6)
        {
            arg7 = arg6;
        }
        else
        {
            arg7 = arg8;
        }
        if (arg7 <= 0f)
        {
            goto label_53408;
        }
        if (arg8 >= arg6)
        {
            arg5 = (arg4 / arg5);
        }
        else
        {
            arg4 = (arg5 / arg4);
        }
    }
    else
    {
        if (arg7 < arg6)
        {
            arg8 = arg6;
        }
        else
        {
            arg8 = arg7;
        }
        if (!(arg8 <= 0f))
        {
            arg5 = vdups_laneq_s32(arg5, 1);
            if (arg7 >= arg6)
            {
                arg4 = (arg4 / arg5);
            }
        }
    }
    if ((((arg8 >= arg7 && !(arg7 <= 0f)) && !(arg8 >= arg6)) || ((!(arg8 >= arg7) && !(arg8 <= 0f)) && arg7 >= arg6)))
    {
        arg5 = (arg4 * arg4);
        arg6 = 0x3f800000;
        arg5 = (arg5 + 1f);
        /* unimplemented  {fsqrt s1, s1} */;
        arg5 = (1f / arg5);
        arg4 = (arg4 * arg5);
        goto label_533e4;
    }
    if (((!(arg8 >= arg7) && !(arg8 <= 0f)) && !(arg7 >= arg6)))
    {
        arg5 = (arg5 / arg4);
    }
    if ((((arg8 >= arg7 && !(arg7 <= 0f)) && arg8 >= arg6) || ((!(arg8 >= arg7) && !(arg8 <= 0f)) && !(arg7 >= arg6))))
    {
        arg4 = (arg5 * arg5);
        arg6 = 0x3f800000;
        arg4 = (arg4 + 1f);
        /* unimplemented  {fsqrt s0, s0} */;
        arg4 = (1f / arg4);
        arg5 = (arg5 * arg4);
    label_533e4:
        arg6 = (v17 * arg5);
        arg7 = (arg12 * arg5);
        arg5 = (arg11 * arg5);
        arg8 = (v18 * arg4);
        arg9 = (v19 * arg4);
        arg4 = (arg10 * arg4);
        v17 = (arg6 - arg8);
        arg12 = (arg7 - arg9);
        arg11 = (arg5 - arg4);
    label_53408:
        *arg3 = v17;
        arg3[1] = arg12;
        arg3[2] = arg11;
        return arg4;
    }
    if ((!(arg8 >= arg7) && arg8 <= 0f))
    {
        goto label_53408;
    }
}

uint64_t std::__ndk1::__next_prime(int64_t arg1)
{
    if (arg1 <= 0xd3)
    {
        void* const x8_1 = &data_551ac;
        uint64_t i = 0x30;
        do
        {
            uint64_t i_2 = (i >> 1);
            void* x11_1 = (x8_1 + (i_2 << 2));
            uint64_t x12_1 = *x11_1;
            if (x12_1 < arg1)
            {
                i = (i + !(i_2));
            }
            else
            {
                i = i_2;
            }
            if (x12_1 < arg1)
            {
                x8_1 = (x11_1 + 4);
            }
        } while (i != 0);
        return *x8_1;
    }
    if (arg1 < -0x3a)
    {
        char* thrown_exception = __cxa_allocate_exception(0x10);
        sub_53b70(thrown_exception);
        __cxa_throw(thrown_exception, _typeinfo_for_std::overflow_error, std::overflow_error::~overflow_error);
        /* no return */
    }
    uint64_t x9_2 = (arg1 / 0xd2);
    int64_t x13_2 = (x9_2 * 0xd2);
    int64_t x10_1 = (arg1 % 0xd2);
    uint64_t i_1 = 0x30;
    void* const x11_3 = &data_5526c;
    do
    {
        uint64_t i_3 = (i_1 >> 1);
        void* x15_1 = (x11_3 + (i_3 << 2));
        uint64_t x16_1 = *x15_1;
        if (x10_1 > x16_1)
        {
            i_1 = (i_1 + !(i_3));
        }
        else
        {
            i_1 = i_3;
        }
        if (x10_1 > x16_1)
        {
            x11_3 = (x15_1 + 4);
        }
    } while (i_1 != 0);
    int64_t x11_5 = ((x11_3 - &data_5526c) >> 2);
    while (true)
    {
        uint64_t x0 = (x13_2 + *(&data_5526c + (x11_5 << 2)));
        int64_t x13_4 = 5;
        while (true)
        {
            uint64_t x14_2 = *(&data_551ac + (x13_4 << 2));
            uint64_t x15_3 = (x0 / x14_2);
            if (x15_3 < x14_2)
            {
                return x0;
            }
            if (x0 == (x15_3 * x14_2))
            {
                break;
            }
            x13_4 = (x13_4 + 1);
            if (x13_4 >= 0x2f)
            {
                int64_t x13_5 = 0xd3;
                bool cond:3_1;
                do
                {
                    uint64_t x14_4 = (x0 / x13_5);
                    if (x14_4 < x13_5)
                    {
                        return x0;
                    }
                    if (x0 == (x14_4 * x13_5))
                    {
                        break;
                    }
                    uint64_t x15_4 = (x0 / (x13_5 + 0xa));
                    if (x15_4 < (x13_5 + 0xa))
                    {
                        return x0;
                    }
                    if (x0 == (x15_4 * (x13_5 + 0xa)))
                    {
                        break;
                    }
                    uint64_t x16_2 = (x0 / (x13_5 + 0xc));
                    if (x16_2 < (x13_5 + 0xc))
                    {
                        return x0;
                    }
                    if (x0 == (x16_2 * (x13_5 + 0xc)))
                    {
                        break;
                    }
                    uint64_t x16_3 = (x0 / (x13_5 + 0x10));
                    if (x16_3 < (x13_5 + 0x10))
                    {
                        return x0;
                    }
                    if (x0 == (x16_3 * (x13_5 + 0x10)))
                    {
                        break;
                    }
                    uint64_t x16_4 = (x0 / (x13_5 + 0x12));
                    if (x16_4 < (x13_5 + 0x12))
                    {
                        return x0;
                    }
                    if (x0 == (x16_4 * (x13_5 + 0x12)))
                    {
                        break;
                    }
                    uint64_t x16_5 = (x0 / (x13_5 + 0x16));
                    if (x16_5 < (x13_5 + 0x16))
                    {
                        return x0;
                    }
                    if (x0 == (x16_5 * (x13_5 + 0x16)))
                    {
                        break;
                    }
                    uint64_t x16_6 = (x0 / (x13_5 + 0x1c));
                    if (x16_6 < (x13_5 + 0x1c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_6 * (x13_5 + 0x1c)))
                    {
                        break;
                    }
                    uint64_t x16_7 = (x0 / (x13_5 + 0x1e));
                    if (x16_7 < (x13_5 + 0x1e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_7 * (x13_5 + 0x1e)))
                    {
                        break;
                    }
                    uint64_t x16_8 = (x0 / (x13_5 + 0x24));
                    if (x16_8 < (x13_5 + 0x24))
                    {
                        return x0;
                    }
                    if (x0 == (x16_8 * (x13_5 + 0x24)))
                    {
                        break;
                    }
                    uint64_t x16_9 = (x0 / (x13_5 + 0x28));
                    if (x16_9 < (x13_5 + 0x28))
                    {
                        return x0;
                    }
                    if (x0 == (x16_9 * (x13_5 + 0x28)))
                    {
                        break;
                    }
                    uint64_t x16_10 = (x0 / (x13_5 + 0x2a));
                    if (x16_10 < (x13_5 + 0x2a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_10 * (x13_5 + 0x2a)))
                    {
                        break;
                    }
                    uint64_t x16_11 = (x0 / (x13_5 + 0x2e));
                    if (x16_11 < (x13_5 + 0x2e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_11 * (x13_5 + 0x2e)))
                    {
                        break;
                    }
                    uint64_t x16_12 = (x0 / (x13_5 + 0x34));
                    if (x16_12 < (x13_5 + 0x34))
                    {
                        return x0;
                    }
                    if (x0 == (x16_12 * (x13_5 + 0x34)))
                    {
                        break;
                    }
                    uint64_t x16_13 = (x0 / (x13_5 + 0x3a));
                    if (x16_13 < (x13_5 + 0x3a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_13 * (x13_5 + 0x3a)))
                    {
                        break;
                    }
                    uint64_t x16_14 = (x0 / (x13_5 + 0x3c));
                    if (x16_14 < (x13_5 + 0x3c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_14 * (x13_5 + 0x3c)))
                    {
                        break;
                    }
                    uint64_t x16_15 = (x0 / (x13_5 + 0x42));
                    if (x16_15 < (x13_5 + 0x42))
                    {
                        return x0;
                    }
                    if (x0 == (x16_15 * (x13_5 + 0x42)))
                    {
                        break;
                    }
                    uint64_t x16_16 = (x0 / (x13_5 + 0x46));
                    if (x16_16 < (x13_5 + 0x46))
                    {
                        return x0;
                    }
                    if (x0 == (x16_16 * (x13_5 + 0x46)))
                    {
                        break;
                    }
                    uint64_t x16_17 = (x0 / (x13_5 + 0x48));
                    if (x16_17 < (x13_5 + 0x48))
                    {
                        return x0;
                    }
                    if (x0 == (x16_17 * (x13_5 + 0x48)))
                    {
                        break;
                    }
                    uint64_t x16_18 = (x0 / (x13_5 + 0x4e));
                    if (x16_18 < (x13_5 + 0x4e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_18 * (x13_5 + 0x4e)))
                    {
                        break;
                    }
                    uint64_t x16_19 = (x0 / (x13_5 + 0x52));
                    if (x16_19 < (x13_5 + 0x52))
                    {
                        return x0;
                    }
                    if (x0 == (x16_19 * (x13_5 + 0x52)))
                    {
                        break;
                    }
                    uint64_t x16_20 = (x0 / (x13_5 + 0x58));
                    if (x16_20 < (x13_5 + 0x58))
                    {
                        return x0;
                    }
                    if (x0 == (x16_20 * (x13_5 + 0x58)))
                    {
                        break;
                    }
                    uint64_t x16_21 = (x0 / (x13_5 + 0x60));
                    if (x16_21 < (x13_5 + 0x60))
                    {
                        return x0;
                    }
                    if (x0 == (x16_21 * (x13_5 + 0x60)))
                    {
                        break;
                    }
                    uint64_t x16_22 = (x0 / (x13_5 + 0x64));
                    if (x16_22 < (x13_5 + 0x64))
                    {
                        return x0;
                    }
                    if (x0 == (x16_22 * (x13_5 + 0x64)))
                    {
                        break;
                    }
                    uint64_t x16_23 = (x0 / (x13_5 + 0x66));
                    if (x16_23 < (x13_5 + 0x66))
                    {
                        return x0;
                    }
                    if (x0 == (x16_23 * (x13_5 + 0x66)))
                    {
                        break;
                    }
                    uint64_t x16_24 = (x0 / (x13_5 + 0x6a));
                    if (x16_24 < (x13_5 + 0x6a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_24 * (x13_5 + 0x6a)))
                    {
                        break;
                    }
                    uint64_t x16_25 = (x0 / (x13_5 + 0x6c));
                    if (x16_25 < (x13_5 + 0x6c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_25 * (x13_5 + 0x6c)))
                    {
                        break;
                    }
                    uint64_t x16_26 = (x0 / (x13_5 + 0x70));
                    if (x16_26 < (x13_5 + 0x70))
                    {
                        return x0;
                    }
                    if (x0 == (x16_26 * (x13_5 + 0x70)))
                    {
                        break;
                    }
                    uint64_t x16_27 = (x0 / (x13_5 + 0x78));
                    if (x16_27 < (x13_5 + 0x78))
                    {
                        return x0;
                    }
                    if (x0 == (x16_27 * (x13_5 + 0x78)))
                    {
                        break;
                    }
                    uint64_t x16_28 = (x0 / (x13_5 + 0x7e));
                    if (x16_28 < (x13_5 + 0x7e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_28 * (x13_5 + 0x7e)))
                    {
                        break;
                    }
                    uint64_t x16_29 = (x0 / (x13_5 + 0x82));
                    if (x16_29 < (x13_5 + 0x82))
                    {
                        return x0;
                    }
                    if (x0 == (x16_29 * (x13_5 + 0x82)))
                    {
                        break;
                    }
                    uint64_t x16_30 = (x0 / (x13_5 + 0x88));
                    if (x16_30 < (x13_5 + 0x88))
                    {
                        return x0;
                    }
                    if (x0 == (x16_30 * (x13_5 + 0x88)))
                    {
                        break;
                    }
                    uint64_t x16_31 = (x0 / (x13_5 + 0x8a));
                    if (x16_31 < (x13_5 + 0x8a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_31 * (x13_5 + 0x8a)))
                    {
                        break;
                    }
                    uint64_t x16_32 = (x0 / (x13_5 + 0x8e));
                    if (x16_32 < (x13_5 + 0x8e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_32 * (x13_5 + 0x8e)))
                    {
                        break;
                    }
                    uint64_t x16_33 = (x0 / (x13_5 + 0x94));
                    if (x16_33 < (x13_5 + 0x94))
                    {
                        return x0;
                    }
                    if (x0 == (x16_33 * (x13_5 + 0x94)))
                    {
                        break;
                    }
                    uint64_t x16_34 = (x0 / (x13_5 + 0x96));
                    if (x16_34 < (x13_5 + 0x96))
                    {
                        return x0;
                    }
                    if (x0 == (x16_34 * (x13_5 + 0x96)))
                    {
                        break;
                    }
                    uint64_t x16_35 = (x0 / (x13_5 + 0x9c));
                    if (x16_35 < (x13_5 + 0x9c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_35 * (x13_5 + 0x9c)))
                    {
                        break;
                    }
                    uint64_t x16_36 = (x0 / (x13_5 + 0xa2));
                    if (x16_36 < (x13_5 + 0xa2))
                    {
                        return x0;
                    }
                    if (x0 == (x16_36 * (x13_5 + 0xa2)))
                    {
                        break;
                    }
                    uint64_t x16_37 = (x0 / (x13_5 + 0xa6));
                    if (x16_37 < (x13_5 + 0xa6))
                    {
                        return x0;
                    }
                    if (x0 == (x16_37 * (x13_5 + 0xa6)))
                    {
                        break;
                    }
                    uint64_t x16_38 = (x0 / (x13_5 + 0xa8));
                    if (x16_38 < (x13_5 + 0xa8))
                    {
                        return x0;
                    }
                    if (x0 == (x16_38 * (x13_5 + 0xa8)))
                    {
                        break;
                    }
                    uint64_t x16_39 = (x0 / (x13_5 + 0xac));
                    if (x16_39 < (x13_5 + 0xac))
                    {
                        return x0;
                    }
                    if (x0 == (x16_39 * (x13_5 + 0xac)))
                    {
                        break;
                    }
                    uint64_t x16_40 = (x0 / (x13_5 + 0xb2));
                    if (x16_40 < (x13_5 + 0xb2))
                    {
                        return x0;
                    }
                    if (x0 == (x16_40 * (x13_5 + 0xb2)))
                    {
                        break;
                    }
                    uint64_t x16_41 = (x0 / (x13_5 + 0xb4));
                    if (x16_41 < (x13_5 + 0xb4))
                    {
                        return x0;
                    }
                    if (x0 == (x16_41 * (x13_5 + 0xb4)))
                    {
                        break;
                    }
                    uint64_t x16_42 = (x0 / (x13_5 + 0xba));
                    if (x16_42 < (x13_5 + 0xba))
                    {
                        return x0;
                    }
                    if (x0 == (x16_42 * (x13_5 + 0xba)))
                    {
                        break;
                    }
                    uint64_t x16_43 = (x0 / (x13_5 + 0xbe));
                    if (x16_43 < (x13_5 + 0xbe))
                    {
                        return x0;
                    }
                    if (x0 == (x16_43 * (x13_5 + 0xbe)))
                    {
                        break;
                    }
                    uint64_t x16_44 = (x0 / (x13_5 + 0xc0));
                    if (x16_44 < (x13_5 + 0xc0))
                    {
                        return x0;
                    }
                    if (x0 == (x16_44 * (x13_5 + 0xc0)))
                    {
                        break;
                    }
                    uint64_t x16_45 = (x0 / (x13_5 + 0xc4));
                    if (x16_45 < (x13_5 + 0xc4))
                    {
                        return x0;
                    }
                    if (x0 == (x16_45 * (x13_5 + 0xc4)))
                    {
                        break;
                    }
                    uint64_t x16_46 = (x0 / (x13_5 + 0xc6));
                    if (x16_46 < (x13_5 + 0xc6))
                    {
                        return x0;
                    }
                    if (x0 == (x16_46 * (x13_5 + 0xc6)))
                    {
                        break;
                    }
                    uint64_t x16_47 = (x0 / (x13_5 + 0xd0));
                    if (x16_47 < (x13_5 + 0xd0))
                    {
                        return x0;
                    }
                    cond:3_1 = x0 != (x16_47 * (x13_5 + 0xd0));
                    x13_5 = (x13_5 + 0xd2);
                } while (cond:3_1);
                break;
            }
        }
        if (x11_5 == 0x2f)
        {
            x9_2 = (x9_2 + 1);
        }
        if (x11_5 == 0x2f)
        {
            x11_5 = 0;
        }
        else
        {
            x11_5 = (x11_5 + 1);
        }
        x13_2 = (x9_2 * 0xd2);
    }
}

int64_t sub_53b70(char* arg1)
{
    int64_t x0 = std::runtime_error::runtime_error(arg1);
    *arg1 = (_vtable_for_std::overflow_error + 0x10);
    return x0;
}

int64_t std::__ndk1::random_device::random_device(int32_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    *(arg2 + 0x10);
    int32_t x0_1 = open();
    *arg1 = x0_1;
    if ((x0_1 & 0x80000000) != 0)
    {
        int32_t x20_1 = *__errno();
        std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >("random_device failed to open ", arg2);
        char var_50;
        char* x1_2;
        char* var_40;
        if ((var_50 & 1) == 0)
        {
            x1_2 = (&var_50 | 1);
        }
        else
        {
            x1_2 = var_40;
        }
        std::__ndk1::__throw_system_error(x20_1, x1_2);
    }
    else if (*(x21 + 0x28) == x8)
    {
        return x0_1;
    }
    __stack_chk_fail();
    /* no return */
}

int64_t sub_53c4c(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    char* x0_2;
    char* x1;
    char* x8;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(x0_2, x1, x8);
}

int64_t std::__ndk1::operator+<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >(char* arg1, char* arg2, char* arg3 @ x8)
{
    __builtin_memset(arg3, 0, 0x18);
    size_t x0 = strlen(arg1);
    uint64_t x26 = *arg2;
    uint64_t x22;
    if ((x26 & 1) == 0)
    {
        x22 = (x26 >> 1);
    }
    else
    {
        x22 = *(arg2 + 8);
    }
    int64_t x8_1 = (x22 + x0);
    if (x8_1 < -0x10)
    {
        int64_t x0_7 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
        if ((*arg3 & 1) != 0)
        {
            operator delete(*(arg3 + 0x10));
        }
        /* tailcall */
        return std::__ndk1::random_device::~random_device(_Unwind_Resume(x0_7));
    }
    void* x24_1;
    if (x8_1 > 0x16)
    {
        uint64_t x25_1 = ((x8_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_5 = operator new(x25_1);
        x24_1 = x0_5;
        *(arg3 + 8) = x0;
        *(arg3 + 0x10) = x0_5;
        *arg3 = (x25_1 | 1);
    }
    else
    {
        char* x24 = arg3;
        *x24 = (x0 << 1);
        x24_1 = &x24[1];
    }
    if (((x8_1 > 0x16 && x0 != 0) || (x8_1 <= 0x16 && x0 != 0)))
    {
        memcpy(x24_1, arg1, x0);
    }
    *(x24_1 + x0) = 0;
    void* x1_1;
    if ((x26 & 1) != 0)
    {
        x1_1 = *(arg2 + 0x10);
    }
    else
    {
        x1_1 = &arg2[1];
    }
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg3, x1_1);
}

int64_t std::__ndk1::random_device::~random_device(int32_t* arg1)
{
    return close(*arg1);
}

void sub_53d7c(void* arg1) __noreturn
{
    sub_20ac4(arg1);
    /* no return */
}

uint64_t std::__ndk1::random_device::operator()(int32_t* arg1)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    int32_t var_3c;
    int32_t* x20 = &var_3c;
    size_t x21 = 4;
    while (true)
    {
        int64_t x0_1 = read(*arg1, x20, x21);
        int32_t x0_3;
        if (x0_1 == -1)
        {
            x0_3 = *__errno();
            if ((x0_3 == 4 && x21 != 0))
            {
                continue;
            }
        }
        if (x0_1 == 0)
        {
            x0_3 = std::__ndk1::__throw_system_error(0x3d, "random_device got EOF");
        }
        if ((x0_1 == 0 || (x0_1 == -1 && x0_3 != 4)))
        {
            std::__ndk1::__throw_system_error(x0_3, "random_device got an unexpected …");
        }
        if ((x0_1 != -1 && x0_1 != 0))
        {
            x21 = (x21 - x0_1);
            x20 = (x20 + x0_1);
            if (x21 != 0)
            {
                continue;
            }
        }
        if (((((x0_1 == -1 && x0_3 == 4) && x21 == 0) || (x0_1 != -1 && x0_1 != 0)) && *(x22 + 0x28) == x8))
        {
            break;
        }
        __stack_chk_fail();
        /* no return */
    }
    return var_3c;
}

int128_t std::__ndk1::random_device::entropy() __pure
{
    int128_t v0;
    v0 = 0.0;
    return v0;
}

