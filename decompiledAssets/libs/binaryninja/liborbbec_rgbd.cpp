int64_t sub_9380()
{
    /* jump -> nullptr */
}

int64_t pthread_self()
{
    /* tailcall */
    return pthread_self();
}

int64_t std::__ndk1::__shared_weak_count::__get_deleter(std::type_info* arg1)
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__get_deleter(arg1);
}

int64_t std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, char* arg2, uint64_t arg3)
{
    /* tailcall */
    return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(arg1, arg2, arg3);
}

int64_t oniGetExtendedError()
{
    /* tailcall */
    return oniGetExtendedError();
}

int64_t system(char* arg1)
{
    /* tailcall */
    return system(arg1);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(uint64_t arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, arg2, arg3);
}

int64_t pthread_setname_np()
{
    /* tailcall */
    return pthread_setname_np();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<int32_t, std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<int32_t>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<int32_t, std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<int32_t>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(arg1);
}

int64_t __cxa_free_exception()
{
    /* tailcall */
    return __cxa_free_exception();
}

int64_t std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(arg1, arg2);
}

int64_t std::__ndk1::this_thread::sleep_for(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::this_thread::sleep_for(arg1);
}

int64_t std::logic_error::logic_error(char* arg1)
{
    /* tailcall */
    return std::logic_error::logic_error(arg1);
}

int64_t rgbd::RGBDParam::createMemory(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int32_t* arg2)
{
    /* tailcall */
    return rgbd::RGBDParam::createMemory(arg1, arg2);
}

int64_t rgbd::RGBDParam::getName()
{
    /* tailcall */
    return rgbd::RGBDParam::getName();
}

void* __cxa_begin_catch(void* exceptionObject)
{
    /* tailcall */
    return __cxa_begin_catch(exceptionObject);
}

int64_t oniWaitForAnyStream()
{
    /* tailcall */
    return oniWaitForAnyStream();
}

int64_t rgbd::RGBDParam::RGBDParam(char arg1)
{
    /* tailcall */
    return rgbd::RGBDParam::RGBDParam(arg1);
}

int32_t __cxa_atexit(void (* func)(void* retval), void* arg, void* dso_handle)
{
    /* tailcall */
    return __cxa_atexit(func, arg, dso_handle);
}

int64_t rgbd::RGBDOrbbec::waitForFrameMini(int64_t arg1)
{
    /* tailcall */
    return rgbd::RGBDOrbbec::waitForFrameMini(arg1);
}

int64_t std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::__hash_len_0_to_16(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::__hash_len_0_to_16(arg1, arg2);
}

int64_t operator delete[](void* arg1)
{
    /* tailcall */
    return operator delete[](arg1);
}

int64_t memcmp()
{
    /* tailcall */
    return memcmp();
}

int64_t pthread_create()
{
    /* tailcall */
    return pthread_create();
}

int64_t operator new(uint64_t arg1)
{
    /* tailcall */
    return operator new(arg1);
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(arg1, arg2);
}

int64_t std::__ndk1::__basic_string_common<true>::__throw_length_error()
{
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_length_error();
}

int64_t _JNIEnv::CallObjectMethod()
{
    /* tailcall */
    return _JNIEnv::CallObjectMethod();
}

int64_t rgbd::RGBDOrbbec::waitForFrameDaBai(int64_t arg1)
{
    /* tailcall */
    return rgbd::RGBDOrbbec::waitForFrameDaBai(arg1);
}

int64_t rgbd::RGBDParam::transmitLoacationData(uint32_t* arg1, uint32_t* arg2, int32_t* arg3)
{
    /* tailcall */
    return rgbd::RGBDParam::transmitLoacationData(arg1, arg2, arg3);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::rehash(arg1);
}

int64_t openni::Device::getSensorInfo(int64_t arg1)
{
    /* tailcall */
    return openni::Device::getSensorInfo(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(arg1);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1);
}

int64_t std::__ndk1::__shared_weak_count::__release_weak()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::__release_weak();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, arg2);
}

int64_t rgbd::RGBDOrbbec::setRGBDCallback(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return rgbd::RGBDOrbbec::setRGBDCallback(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1);
}

int64_t std::__ndk1::mutex::~mutex()
{
    /* tailcall */
    return std::__ndk1::mutex::~mutex();
}

void __stack_chk_fail() __noreturn
{
    /* tailcall */
    return __stack_chk_fail();
}

int64_t rgbd::RGBDParam::getAshmenAddress()
{
    /* tailcall */
    return rgbd::RGBDParam::getAshmenAddress();
}

int64_t oniDeviceGetProperty()
{
    /* tailcall */
    return oniDeviceGetProperty();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__rehash(arg1);
}

int64_t oniReleaseDeviceList()
{
    /* tailcall */
    return oniReleaseDeviceList();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, arg2);
}

int64_t std::__ndk1::__throw_system_error(int32_t arg1, char* arg2)
{
    /* tailcall */
    return std::__ndk1::__throw_system_error(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::rehash(arg1);
}

int64_t operator delete(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::locale::use_facet(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::locale::use_facet(arg1);
}

int64_t rgbd::RGBDOrbbec::setRgbdLocation(int32_t* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2, char* arg3)
{
    /* tailcall */
    return rgbd::RGBDOrbbec::setRgbdLocation(arg1, arg2, arg3);
}

int64_t rgbd::RGBDOrbbec::~RGBDOrbbec()
{
    /* tailcall */
    return rgbd::RGBDOrbbec::~RGBDOrbbec();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> >(arg1, arg2);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::remove(int64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::remove(arg1);
}

int64_t openni::Device::~Device()
{
    /* tailcall */
    return openni::Device::~Device();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__rehash(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush()
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > >(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__rehash(arg1);
}

int64_t operator new[](uint64_t arg1)
{
    /* tailcall */
    return operator new[](arg1);
}

int64_t std::uncaught_exception()
{
    /* tailcall */
    return std::uncaught_exception();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> >(arg1, arg2);
}

int64_t LogCapture::LogCapture(char* arg1, LEVELS* arg2, char* arg3, int32_t arg4, char* arg5)
{
    /* tailcall */
    return LogCapture::LogCapture(arg1, arg2, arg3, arg4, arg5);
}

int64_t oniDeviceCreateStream()
{
    /* tailcall */
    return oniDeviceCreateStream();
}

int64_t std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(uint64_t arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, arg2, arg3);
}

int64_t __cxa_allocate_exception()
{
    /* tailcall */
    return __cxa_allocate_exception();
}

int64_t std::__ndk1::ios_base::getloc()
{
    /* tailcall */
    return std::__ndk1::ios_base::getloc();
}

int64_t oniStreamGetSensorInfo()
{
    /* tailcall */
    return oniStreamGetSensorInfo();
}

int64_t oniDeviceOpen()
{
    /* tailcall */
    return oniDeviceOpen();
}

int64_t __android_log_print()
{
    /* tailcall */
    return __android_log_print();
}

int64_t __gxx_personality_v0()
{
    /* tailcall */
    return __gxx_personality_v0();
}

int64_t _Unwind_Resume()
{
    /* tailcall */
    return _Unwind_Resume();
}

int64_t std::__ndk1::__thread_struct::__thread_struct()
{
    /* tailcall */
    return std::__ndk1::__thread_struct::__thread_struct();
}

int64_t rgbd::RGBDParam::getLocation()
{
    /* tailcall */
    return rgbd::RGBDParam::getLocation();
}

int64_t pthread_setspecific()
{
    /* tailcall */
    return pthread_setspecific();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::rehash(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry()
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
}

int64_t std::__ndk1::thread::detach()
{
    /* tailcall */
    return std::__ndk1::thread::detach();
}

int64_t sleep(uint32_t arg1)
{
    /* tailcall */
    return sleep(arg1);
}

void __cxa_throw(void* thrown_exception, void* tinfo, void (* dest)(void* retval)) __noreturn
{
    /* tailcall */
    return __cxa_throw(thrown_exception, tinfo, dest);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__erase_unique<rgbd::RgbdLocation>(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__erase_unique<rgbd::RgbdLocation>(arg1);
}

int64_t memmove(int64_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return memmove(arg1, arg2, arg3);
}

int64_t memset(int64_t arg1, int32_t arg2, size_t arg3)
{
    /* tailcall */
    return memset(arg1, arg2, arg3);
}

int64_t oniStreamStart()
{
    /* tailcall */
    return oniStreamStart();
}

int64_t oniFrameRelease()
{
    /* tailcall */
    return oniFrameRelease();
}

int64_t rgbd::RGBDOrbbec::getSerialNumber()
{
    /* tailcall */
    return rgbd::RGBDOrbbec::getSerialNumber();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::rehash(arg1);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1);
}

int64_t std::__ndk1::__next_prime(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__next_prime(arg1);
}

int64_t oniDeviceClose()
{
    /* tailcall */
    return oniDeviceClose();
}

int64_t __cxa_finalize(int64_t arg1)
{
    /* tailcall */
    return __cxa_finalize(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t> > >::destroy(arg1);
}

int64_t rgbd::RGBDParam::changeLocation(char* arg1)
{
    /* tailcall */
    return rgbd::RGBDParam::changeLocation(arg1);
}

int64_t oniDeviceSetProperty()
{
    /* tailcall */
    return oniDeviceSetProperty();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(arg1);
}

int64_t std::__ndk1::thread::~thread()
{
    /* tailcall */
    return std::__ndk1::thread::~thread();
}

int64_t rgbd::RGBDParam::~RGBDParam()
{
    /* tailcall */
    return rgbd::RGBDParam::~RGBDParam();
}

int64_t std::__ndk1::mutex::unlock()
{
    /* tailcall */
    return std::__ndk1::mutex::unlock();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&&>, std::__ndk1::tuple<> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&&>, std::__ndk1::tuple<> >(arg1, arg2);
}

int64_t _JNIEnv::NewObject()
{
    /* tailcall */
    return _JNIEnv::NewObject();
}

int64_t __cxa_end_catch()
{
    /* tailcall */
    return __cxa_end_catch();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*> > >::destroy(arg1);
}

int64_t rgbd::RGBDParam::destoryOldMemory()
{
    /* tailcall */
    return rgbd::RGBDParam::destoryOldMemory();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::rehash(arg1);
}

int64_t std::runtime_error::runtime_error(char* arg1)
{
    /* tailcall */
    return std::runtime_error::runtime_error(arg1);
}

int64_t LogCapture::~LogCapture()
{
    /* tailcall */
    return LogCapture::~LogCapture();
}

int64_t rgbd::OrbbecInfo::~OrbbecInfo()
{
    /* tailcall */
    return rgbd::OrbbecInfo::~OrbbecInfo();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(arg1);
}

int64_t oniStreamReadFrame()
{
    /* tailcall */
    return oniStreamReadFrame();
}

int64_t oniDeviceIsCommandSupported()
{
    /* tailcall */
    return oniDeviceIsCommandSupported();
}

int64_t oniStreamDestroy()
{
    /* tailcall */
    return oniStreamDestroy();
}

int64_t _JNIEnv::CallVoidMethod()
{
    /* tailcall */
    return _JNIEnv::CallVoidMethod();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation&&>, std::__ndk1::tuple<> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation&&>, std::__ndk1::tuple<> >(arg1, arg2);
}

int64_t std::__ndk1::__thread_struct::~__thread_struct()
{
    /* tailcall */
    return std::__ndk1::__thread_struct::~__thread_struct();
}

int64_t rgbd::RGBDParam::setType(char* arg1)
{
    /* tailcall */
    return rgbd::RGBDParam::setType(arg1);
}

int64_t std::__ndk1::locale::~locale()
{
    /* tailcall */
    return std::__ndk1::locale::~locale();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t oniStreamGetProperty()
{
    /* tailcall */
    return oniStreamGetProperty();
}

int64_t rgbd::RGBDOrbbec::RGBDOrbbec()
{
    /* tailcall */
    return rgbd::RGBDOrbbec::RGBDOrbbec();
}

int64_t std::__ndk1::condition_variable::~condition_variable()
{
    /* tailcall */
    return std::__ndk1::condition_variable::~condition_variable();
}

int64_t rgbd::RGBDOrbbec::openDevice(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, uint16_t* arg2)
{
    /* tailcall */
    return rgbd::RGBDOrbbec::openDevice(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__rehash(arg1);
}

int64_t oniInitialize()
{
    /* tailcall */
    return oniInitialize();
}

int64_t std::__ndk1::__basic_string_common<true>::__throw_out_of_range()
{
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1);
}

int64_t openni::VideoStream::~VideoStream()
{
    /* tailcall */
    return openni::VideoStream::~VideoStream();
}

int64_t std::__ndk1::mutex::lock()
{
    /* tailcall */
    return std::__ndk1::mutex::lock();
}

int64_t openni::Device::_setHandle(_OniDevice* arg1)
{
    /* tailcall */
    return openni::Device::_setHandle(arg1);
}

int64_t oniGetDeviceList()
{
    /* tailcall */
    return oniGetDeviceList();
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int32_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t g3::logLevel(int64_t arg1)
{
    /* tailcall */
    return g3::logLevel(arg1);
}

int64_t std::__ndk1::ios_base::clear(uint32_t arg1)
{
    /* tailcall */
    return std::__ndk1::ios_base::clear(arg1);
}

int64_t oniStreamIsPropertySupported()
{
    /* tailcall */
    return oniStreamIsPropertySupported();
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1, arg2);
}

int64_t std::__ndk1::__vector_base_common<true>::__throw_length_error()
{
    /* tailcall */
    return std::__ndk1::__vector_base_common<true>::__throw_length_error();
}

int64_t oniDeviceGetInfo()
{
    /* tailcall */
    return oniDeviceGetInfo();
}

int64_t std::__ndk1::ios_base::__set_badbit_and_consider_rethrow()
{
    /* tailcall */
    return std::__ndk1::ios_base::__set_badbit_and_consider_rethrow();
}

int64_t rgbd::RGBDParam::setSerialNum(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return rgbd::RGBDParam::setSerialNum(arg1);
}

int64_t std::__ndk1::__thread_local_data()
{
    /* tailcall */
    return std::__ndk1::__thread_local_data();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::pair<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::pair<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >(arg1, arg2);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double> > >::destroy(arg1);
}

int64_t oniDeviceGetSensorInfo()
{
    /* tailcall */
    return oniDeviceGetSensorInfo();
}

int64_t rgbd::RGBDParam::RGBDParam(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return rgbd::RGBDParam::RGBDParam(arg1);
}

int64_t std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*> > >::destroy(arg1);
}

int64_t memcpy(int64_t arg1, int64_t arg2, size_t arg3)
{
    /* tailcall */
    return memcpy(arg1, arg2, arg3);
}

int64_t std::__ndk1::chrono::system_clock::now()
{
    /* tailcall */
    return std::__ndk1::chrono::system_clock::now();
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation const&>, std::__ndk1::tuple<> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation const&>, std::__ndk1::tuple<> >(arg1, arg2);
}

int64_t openni::SensorInfo::~SensorInfo()
{
    /* tailcall */
    return openni::SensorInfo::~SensorInfo();
}

int64_t openni::VideoStream::create(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t arg2)
{
    /* tailcall */
    return openni::VideoStream::create(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(uint64_t arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, arg2, arg3);
}

int64_t g3::logTag(int64_t arg1)
{
    /* tailcall */
    return g3::logTag(arg1);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__rehash(uint64_t arg1)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__rehash(arg1);
}

int64_t rgbd::RGBDOrbbec::updateRgbdSet(int32_t* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return rgbd::RGBDOrbbec::updateRgbdSet(arg1, arg2);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(uint64_t arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, arg2, arg3);
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg2)
{
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> >(arg1, arg2);
}

int64_t oniDeviceIsPropertySupported()
{
    /* tailcall */
    return oniDeviceIsPropertySupported();
}

int64_t std::__ndk1::__shared_weak_count::~__shared_weak_count()
{
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t rgbd::RGBDParam::setLocationCallback(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return rgbd::RGBDParam::setLocationCallback(arg1);
}

int64_t strlen(char* arg1)
{
    /* tailcall */
    return strlen(arg1);
}

int64_t std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(uint16_t arg1)
{
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(arg1);
}

int64_t std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(void* arg1, uint64_t arg2)
{
    /* tailcall */
    return std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(arg1, arg2);
}

int32_t std::terminate() __noreturn
{
    /* tailcall */
    return std::terminate();
}

int64_t std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >::__push_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    /* tailcall */
    return std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >::__push_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(arg1);
}

int64_t oniStreamSetProperty()
{
    /* tailcall */
    return oniStreamSetProperty();
}

int64_t _start()
{
    data_36110 = 0x64;
    data_36118 = 0x4402;  {  // {"d_map_equalIS7_SA_NS_8equal_toIS…"}}
    __builtin_memset(&data_3611a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36110, &data_36000);
    data_36130 = 0x32;
    data_36138 = 0x5602;  {  // {"S_9allocatorIcEEE6appendEPKcm"}}
    __builtin_memset(&data_3613a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36130, &data_36000);
    data_36150 = 0x12c;
    data_36158 = 0x4902;  {  // {"asherIS7_SA_NS_4hashIS7_EELb1EEE…"}}
    __builtin_memset(&data_3615a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36150, &data_36000);
    data_36170 = 0x1f4;
    data_36178 = 0x5702;  {  // {"ic_ostreamIcNS_11char_traitsIcEE…"}}
    __builtin_memset(&data_3617a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36170, &data_36000);
    data_36190 = 0x320;
    data_36198 = 0x4502;  {  // {"ered_map_equalIS7_SA_NS_8equal_t…"}}
    __builtin_memset(&data_3619a, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36190, &data_36000);
    data_361b0 = 0x3e8;
    data_361b8 = 0x4602;  {  // {"21__unordered_map_equalIS7_SA_NS…"}}
    __builtin_memset(&data_361ba, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_361b0, &data_36000);
    data_361d0 = 0x7d0;
    data_361d8 = 0x10;
    __builtin_strncpy(&data_361d9, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_361d0, &data_36000);
    data_361f0 = 0x7d1;
    data_361f8 = 0x18;
    __builtin_strncpy(&data_361f9, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_361f0, &data_36000);
    data_36210 = 0x7d2;
    data_36218 = 0x1e;
    __builtin_strncpy(&data_36219, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_36210, &data_36000);
    __builtin_memset(&data_36230, 0, 0x18);
    data_36230 = 0x10;
    __builtin_strncpy(&data_36231, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_36230, &data_36000);
    __builtin_memset(&data_36248, 0, 0x18);
    data_36248 = 0x18;
    __builtin_strncpy(&data_36249, "%H:%M:%S %f3", 0xd);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_36248, &data_36000);
    data_36268 = 0;
    data_36270 = 0;
    data_36260 = &data_36268;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jclass*> > >::~map, &data_36260, &data_36000);
    data_36280 = 0;
    data_36288 = 0;
    data_36278 = &data_36280;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jmethodID*> > >::~map, &data_36278, &data_36000);
    data_36298 = 0;
    data_362a0 = 0;
    data_36290 = &data_36298;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::~map, &data_36290, &data_36000);
    data_362b0 = 0;
    data_362b8 = 0;
    data_362a8 = &data_362b0;
    __cxa_atexit(std::__ndk1::map<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::~map, &data_362a8, &data_36000);
    data_362c8 = 0;
    data_362d0 = 0;
    data_362c0 = &data_362c8;
    __cxa_atexit(std::__ndk1::map<rgbd::RgbdLocation, _jobject*, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, _jobject*> > >::~map, &data_362c0, &data_36000);
    data_362e0 = 0;
    data_362e8 = 0;
    data_362d8 = &data_362e0;
    __cxa_atexit(std::__ndk1::map<rgbd::RgbdLocation, _jmethodID*, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, _jmethodID*> > >::~map, &data_362d8, &data_36000);
    data_362f0 = 0xc;
    __builtin_strncpy(&data_362f1, "Orbbec", 0x17);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_362f0, &data_36000);
}

int64_t sub_a20c()
{
    data_36308 = 0x64;
    data_36310 = 0x4402;  {  // {"d_map_equalIS7_SA_NS_8equal_toIS…"}}
    __builtin_memset(&data_36312, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36308, &data_36000);
    data_36328 = 0x32;
    data_36330 = 0x5602;  {  // {"S_9allocatorIcEEE6appendEPKcm"}}
    __builtin_memset(&data_36332, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36328, &data_36000);
    data_36348 = 0x12c;
    data_36350 = 0x4902;  {  // {"asherIS7_SA_NS_4hashIS7_EELb1EEE…"}}
    __builtin_memset(&data_36352, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36348, &data_36000);
    data_36368 = 0x1f4;
    data_36370 = 0x5702;  {  // {"ic_ostreamIcNS_11char_traitsIcEE…"}}
    __builtin_memset(&data_36372, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36368, &data_36000);
    data_36388 = 0x320;
    data_36390 = 0x4502;  {  // {"ered_map_equalIS7_SA_NS_8equal_t…"}}
    __builtin_memset(&data_36392, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_36388, &data_36000);
    data_363a8 = 0x3e8;
    data_363b0 = 0x4602;  {  // {"21__unordered_map_equalIS7_SA_NS…"}}
    __builtin_memset(&data_363b2, 0, 0x16);
    __cxa_atexit(LEVELS::~LEVELS, &data_363a8, &data_36000);
    data_363c8 = 0x7d0;
    data_363d0 = 0x10;
    __builtin_strncpy(&data_363d1, "CONTRACT", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_363c8, &data_36000);
    data_363e8 = 0x7d1;
    data_363f0 = 0x18;
    __builtin_strncpy(&data_363f1, "FATAL_SIGNAL", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_363e8, &data_36000);
    data_36408 = 0x7d2;
    data_36410 = 0x1e;
    __builtin_strncpy(&data_36411, "FATAL_EXCEPTION", 0x17);
    __cxa_atexit(LEVELS::~LEVELS, &data_36408, &data_36000);
    __builtin_memset(&data_36428, 0, 0x18);
    data_36428 = 0x10;
    __builtin_strncpy(&data_36429, "%Y/%m/%d", 9);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_36428, &data_36000);
    __builtin_memset(&data_36440, 0, 0x18);
    data_36440 = 0x18;
    __builtin_strncpy(&data_36441, "%H:%M:%S %f3", 0xd);
    __cxa_atexit(std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string, &data_36440, &data_36000);
    data_36468 = 0;
    data_36470 = 0;
    data_36460 = &data_36468;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jclass*> > >::~map, &data_36460, &data_36000);
    data_36480 = 0;
    data_36488 = 0;
    data_36478 = &data_36480;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jmethodID*> > >::~map, &data_36478, &data_36000);
    data_36498 = 0;
    data_364a0 = 0;
    data_36490 = &data_36498;
    __cxa_atexit(std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::~map, &data_36490, &data_36000);
    data_364b0 = 0;
    data_364b8 = 0;
    data_364a8 = &data_364b0;
    __cxa_atexit(std::__ndk1::map<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::~map, &data_364a8, &data_36000);
    data_364c8 = 0;
    data_364d0 = 0;
    data_364c0 = &data_364c8;
    __cxa_atexit(std::__ndk1::map<rgbd::RgbdLocation, _jobject*, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, _jobject*> > >::~map, &data_364c0, &data_36000);
    data_364e0 = 0;
    data_364e8 = 0;
    data_364d8 = &data_364e0;
    __cxa_atexit(std::__ndk1::map<rgbd::RgbdLocation, _jmethodID*, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, _jmethodID*> > >::~map, &data_364d8, &data_36000);
    /* tailcall */
    return __cxa_atexit(std::__ndk1::shared_ptr<rgbd::RGBDOrbbec>::~shared_ptr, &data_364f0, &data_36000);
}

int64_t sub_a5b8()
{
    /* tailcall */
    return __cxa_finalize(&data_36000);
}

int64_t sub_a5c4() __pure
{
    return;
}

int64_t j_sub_a5c4()
{
    /* tailcall */
    return sub_a5c4();
}

int64_t sub_a5d0(int64_t arg1)
{
    /* jump -> arg1 */
}

void std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::~basic_string(char* arg1)
{
    if ((*arg1 & 1) != 0)
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x10));
    }
}

void LEVELS::~LEVELS(void* arg1)
{
    if ((*(arg1 + 8) & 1) != 0)
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x18));
    }
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jclass*> > >::~map(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(arg1);
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jmethodID*> > >::~map(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(arg1);
}

int64_t std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::~map(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(arg1);
}

int64_t std::__ndk1::map<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::~map(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
}

int64_t std::__ndk1::map<rgbd::RgbdLocation, _jobject*, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, _jobject*> > >::~map(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*> > >::destroy(arg1);
}

int64_t std::__ndk1::map<rgbd::RgbdLocation, _jmethodID*, std::__ndk1::less<rgbd::RgbdLocation>, std::__ndk1::allocator<std::__ndk1::pair<rgbd::RgbdLocation const, _jmethodID*> > >::~map(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    *(arg1 + 8);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*> > >::destroy(arg1);
}

void* rgbd::RGBDOrbbec::RGBDOrbbec(void** arg1)
{
    arg1[2] = 0;
    arg1[3] = 0;
    arg1[5] = 0x2eea4000384a4;
    arg1[4] = "/dev/ashmem";
    *arg1 = (_vtable_for_rgbd::RGBDOrbbec + 0x10);
    arg1[1] = 0;
    *(arg1 + 9) = 0;
    arg1[7] = 0;
    arg1[8] = 0;
    arg1[6] = &arg1[7];
    __builtin_memset(&arg1[9], 0, 0x20);
    arg1[0xd] = 0x3f800000;
    arg1[0xf] = 0;
    __builtin_memset(&arg1[0x10], 0, 0x28);
    arg1[0xe] = &arg1[0xf];
    arg1[0x18] = 0;
    arg1[0x15] = 0x3f800000;
    arg1[0x19] = 0;
    arg1[0x17] = &arg1[0x18];
    arg1[0x24] = 0;
    arg1[0x25] = 0;
    __builtin_memset(&arg1[0x1b], 0, 0x40);
    arg1[0x26] = 0;
    __builtin_memset((arg1 + 0x134), 0, 0x6c);
    arg1[0x34] = 0x3f800000;
    __builtin_memset(&arg1[0x35], 0, 0x20);
    arg1[0x39] = 0x3f800000;
    __builtin_memset(&arg1[0x3a], 0, 0x20);
    arg1[0x23] = &arg1[0x24];
    arg1[0x3e] = 0x3f800000;
    return &arg1[0x18];
}

uint64_t rgbd::RGBDOrbbec::startCamera(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int32_t x0_2;
    if ((arg1[0x26] & 1) != 0)
    {
        x0_2 = 1;
    }
    else
    {
        char* x21_1;
        if ((*data_36118 & 1) == 0)
        {
            x21_1 = &*(data_36118 + 1);
        }
        else
        {
            x21_1 = *(data_36122 + 6);
        }
        int32_t var_1c0 = data_36110;
        int64_t s_3;
        __builtin_memset(&s_3, 0, 0x18);
        size_t x0_1 = strlen(x21_1);
        char s;
        void* var_200;
        char s_1;
        void* var_1e0;
        if (x0_1 < -0x10)
        {
        label_ac2c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_ac34:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_ac3c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_ac44:
            int64_t x0_51 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_200);
            }
            if ((((s & 1) == 0 && (s_1 & 1) != 0) || ((s & 1) != 0 && (s_1 & 1) != 0)))
            {
                operator delete(var_1e0);
            }
            void* x0_55;
            int128_t* x8_38;
            x0_55 = _Unwind_Resume(x0_51);
            /* tailcall */
            return rgbd::RGBDOrbbec::readSignleSerialNum(x0_55, x8_38);
        }
        void* var_1a8_1;
        void* x22_2;
        if (x0_1 >= 0x17)
        {
            uint64_t x23_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_4 = operator new(x23_1);
            x22_2 = x0_4;
            size_t var_1b0_1 = x0_1;
            var_1a8_1 = x0_4;
            s_3 = (x23_1 | 1);
        }
        else
        {
            x22_2 = &*s_3[1];
            s_3 = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x22_2, x21_1, x0_1);
        }
        *(x22_2 + x0_1) = 0;
        int32_t x20_3;
        if ((g3::logLevel(&var_1c0) & 1) == 0)
        {
            x20_3 = 0;
            if ((s_3 & 1) != 0)
            {
            label_a86c:
                operator delete(var_1a8_1);
                if ((x20_3 & 1) == 0)
                {
                    goto label_a91c;
                }
                goto label_a8f8;
            }
        }
        else
        {
            int64_t s_2;
            __builtin_memset(&s_2, 0, 0x18);
            uint64_t x20_2 = *rgbd::OBCTAG;
            size_t x0_9 = strlen(x20_2);
            if (x0_9 < -0x10)
            {
                goto label_ac3c;
            }
            void* var_1c8_1;
            void* x22_3;
            if (x0_9 >= 0x17)
            {
                uint64_t x23_2 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                void* x0_12 = operator new(x23_2);
                x22_3 = x0_12;
                size_t var_1d0_1 = x0_9;
                var_1c8_1 = x0_12;
                s_2 = (x23_2 | 1);
            }
            else
            {
                x22_3 = (&s_2 | 1);
                s_2 = (x0_9 << 1);
            }
            if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
            {
                memcpy(x22_3, x20_2, x0_9);
            }
            *(x22_3 + x0_9) = 0;
            x20_3 = g3::logTag(&s_2);
            if ((s_2 & 1) != 0)
            {
                operator delete(var_1c8_1);
                if ((s_3 & 1) != 0)
                {
                    goto label_a86c;
                }
            }
            else if ((s_3 & 1) != 0)
            {
                goto label_a86c;
            }
        }
        if ((x20_3 & 1) == 0)
        {
            goto label_a91c;
        }
    label_a8f8:
        int64_t s_4;
        LogCapture::LogCapture(&s_4, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
        size_t var_198;
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "startCamera", 0xb);
        LogCapture::~LogCapture();
    label_a91c:
        if (oniInitialize(0x7d3) == 0)
        {
            x0_2 = *(*arg1 + 0x38)(arg1);
        }
        else
        {
            char* x0_19 = oniGetExtendedError();
            __builtin_memset(&s_4, 0, 0x18);
            size_t x0_20;
            int128_t v0_1;
            x0_20 = strlen(x0_19);
            if (x0_20 < -0x10)
            {
                goto label_ac34;
            }
            int64_t var_190_1;
            int64_t x22_4;
            if (x0_20 >= 0x17)
            {
                uint64_t x23_3 = ((x0_20 + 0x10) & 0xfffffffffffffff0);
                int64_t x0_23 = operator new(x23_3);
                x22_4 = x0_23;
                var_198 = x0_20;
                var_190_1 = x0_23;
                s_4 = (x23_3 | 1);
            }
            else
            {
                x22_4 = (&s_4 | 1);
                s_4 = (x0_20 << 1);
            }
            if ((x0_20 >= 0x17 || (x0_20 < 0x17 && x0_20 != 0)))
            {
                memcpy(x22_4, x0_19, x0_20);
            }
            *(x22_4 + x0_20) = 0;
            if ((arg1[1] & 1) == 0)
            {
                arg1[1] = 0;
            }
            else
            {
                *arg1[3] = 0;
                uint32_t x8_19 = arg1[1];
                arg1[2] = 0;
                if ((x8_19 & 1) != 0)
                {
                    operator delete(arg1[3]);
                    arg1[1] = 0;
                }
            }
            v0_1 = s_4;
            arg1[3] = var_190_1;
            *(arg1 + 8) = v0_1;
            uint32_t x10_2 = *data_36198;
            int32_t var_1f8 = data_36190;
            char* x9_2 = *(data_361a2 + 6);
            __builtin_memset(&s_1, 0, 0x18);
            char* x21_4;
            if ((x10_2 & 1) == 0)
            {
                x21_4 = &*(data_36198 + 1);
            }
            else
            {
                x21_4 = x9_2;
            }
            size_t x0_27 = strlen(x21_4);
            if (x0_27 < -0x10)
            {
                goto label_ac2c;
            }
            void* x22_5;
            if (x0_27 >= 0x17)
            {
                uint64_t x23_4 = ((x0_27 + 0x10) & 0xfffffffffffffff0);
                void* x0_29 = operator new(x23_4);
                x22_5 = x0_29;
                size_t var_1e8_1 = x0_27;
                var_1e0 = x0_29;
                s_1 = (x23_4 | 1);
            }
            else
            {
                void var_1ef;
                x22_5 = &var_1ef;
                s_1 = (x0_27 << 1);
            }
            if ((x0_27 >= 0x17 || (x0_27 < 0x17 && x0_27 != 0)))
            {
                memcpy(x22_5, x21_4, x0_27);
            }
            *(x22_5 + x0_27) = 0;
            int32_t x20_7;
            if ((g3::logLevel(&var_1f8) & 1) == 0)
            {
                x20_7 = 0;
                if ((s_1 & 1) != 0)
                {
                label_aaec:
                    operator delete(var_1e0);
                    if ((x20_7 & 1) == 0)
                    {
                        goto label_abf0;
                    }
                    goto label_ab8c;
                }
            }
            else
            {
                __builtin_memset(&s, 0, 0x18);
                uint64_t x20_6 = *rgbd::OBCTAG;
                size_t x0_34 = strlen(x20_6);
                if (x0_34 < -0x10)
                {
                    goto label_ac44;
                }
                void* x22_6;
                if (x0_34 >= 0x17)
                {
                    uint64_t x23_5 = ((x0_34 + 0x10) & 0xfffffffffffffff0);
                    void* x0_38 = operator new(x23_5);
                    x22_6 = x0_38;
                    size_t var_208_1 = x0_34;
                    var_200 = x0_38;
                    s = (x23_5 | 1);
                }
                else
                {
                    x22_6 = (&s | 1);
                    s = (x0_34 << 1);
                }
                if ((x0_34 >= 0x17 || (x0_34 < 0x17 && x0_34 != 0)))
                {
                    memcpy(x22_6, x20_6, x0_34);
                }
                *(x22_6 + x0_34) = 0;
                x20_7 = g3::logTag(&s);
                if ((s & 1) != 0)
                {
                    operator delete(var_200);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_aaec;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_aaec;
                }
            }
            if ((x20_7 & 1) != 0)
            {
            label_ab8c:
                LogCapture::LogCapture(&s_4, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_44 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "Initialize failed:", 0x12);
                void* x19_2;
                if ((arg1[1] & 1) != 0)
                {
                    x19_2 = arg1[3];
                }
                else
                {
                    x19_2 = (arg1 + 9);
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_44, x19_2, strlen(x19_2));
                LogCapture::~LogCapture();
                goto label_abf0;
            }
        label_abf0:
            x0_2 = 0;
        }
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return (x0_2 & 1);
}

int64_t sub_ac68(int64_t arg1, char arg2, void* arg3)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_4;
    int128_t* x8_1;
    x0_4 = _Unwind_Resume(x0_1);
    /* tailcall */
    return rgbd::RGBDOrbbec::readSignleSerialNum(x0_4, x8_1);
}

int64_t sub_ac6c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    void* x0_3;
    int128_t* x8_2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::readSignleSerialNum(x0_3, x8_2);
}

int64_t sub_acb4(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    void* x0_2;
    int128_t* x8_1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::readSignleSerialNum(x0_2, x8_1);
}

void rgbd::RGBDOrbbec::readSignleSerialNum(void* arg1, int128_t* arg2 @ x8)
{
    void* x9 = *(arg1 + 0x98);
    if (x9 == 0)
    {
        __builtin_memset(arg2, 0, 0x18);
    }
    else
    {
        __builtin_memset(arg2, 0, 0x18);
        if ((*(x9 + 0x10) & 1) == 0)
        {
            arg2[1] = *(x9 + 0x20);
            *arg2 = *(x9 + 0x10);
        }
        else
        {
            size_t x20_1 = *(x9 + 0x18);
            if (x20_1 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
                /* tailcall */
                return rgbd::RGBDOrbbec::stopCamera();
            }
            int64_t x21_1 = *(x9 + 0x20);
            void* x19_1;
            if (x20_1 >= 0x17)
            {
                uint64_t x22_1 = ((x20_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_1 = operator new(x22_1);
                *(arg2 + 8) = x20_1;
                arg2[1] = x0_1;
                *arg2 = (x22_1 | 1);
                x19_1 = x0_1;
            }
            else
            {
                *arg2 = (x20_1 << 1);
                x19_1 = (arg2 + 1);
            }
            if ((x20_1 >= 0x17 || (x20_1 < 0x17 && x20_1 != 0)))
            {
                memcpy(x19_1, x21_1, x20_1);
            }
            *(x19_1 + x20_1) = 0;
        }
    }
}

int64_t rgbd::RGBDOrbbec::stopCamera() __pure
{
    return;
}

int64_t rgbd::RGBDOrbbec::pause(void* arg1)
{
    std::__ndk1::mutex::lock();
    if ((*(arg1 + 0x130) & 1) != 0)
    {
        void** i = *(arg1 + 0x98);
        if (i != 0)
        {
            do
            {
                int64_t* x22_1 = i[0xd];
                void* x0_1 = *x22_1;
                if (x0_1 != 0)
                {
                    operator delete(x0_1);
                    *x22_1 = 0;
                }
                int64_t x0_2 = x22_1[1];
                if (x0_2 != 0)
                {
                    if (x22_1[0x81] != 0)
                    {
                        oniDeviceClose(x0_2);
                    }
                    x22_1[1] = 0;
                }
                i = *i;
            } while (i != 0);
        }
        if (*(arg1 + 0xa0) != 0)
        {
            int64_t* i_3 = *(arg1 + 0x98);
            if (i_3 != 0)
            {
                int64_t* i_1;
                do
                {
                    i_1 = *i_3;
                    rgbd::OrbbecInfo::~OrbbecInfo();
                    if ((i_3[2] & 1) != 0)
                    {
                        operator delete(i_3[4]);
                    }
                    operator delete(i_3);
                    i_3 = i_1;
                } while (i_1 != 0);
            }
            int64_t x8_5 = *(arg1 + 0x90);
            *(arg1 + 0x98) = 0;
            if (x8_5 != 0)
            {
                int64_t x9_1 = 0;
                do
                {
                    *(*(arg1 + 0x88) + (x9_1 << 3)) = 0;
                    x9_1 = (x9_1 + 1);
                } while (x8_5 != x9_1);
            }
            *(arg1 + 0xa0) = 0;
        }
        if (*(arg1 + 0x1e8) != 0)
        {
            int64_t* i_4 = *(arg1 + 0x1e0);
            if (i_4 != 0)
            {
                int64_t* i_2;
                do
                {
                    int64_t* x22_2 = i_4[6];
                    i_2 = *i_4;
                    int64_t x9_2;
                    if (x22_2 != 0)
                    {
                        int32_t j;
                        do
                        {
                            x9_2 = __ldaxr(&x22_2[1]);
                            j = __stlxr((x9_2 - 1), &x22_2[1]);
                        } while (j != 0);
                    }
                    if (((x22_2 == 0 || (x22_2 != 0 && x9_2 != 0)) && (i_4[2] & 1) != 0))
                    {
                    label_aed0:
                        operator delete(i_4[4]);
                    }
                    if ((x22_2 != 0 && x9_2 == 0))
                    {
                        *(*x22_2 + 0x10)(x22_2);
                        std::__ndk1::__shared_weak_count::__release_weak();
                        if ((i_4[2] & 1) != 0)
                        {
                            goto label_aed0;
                        }
                    }
                    operator delete(i_4);
                    i_4 = i_2;
                } while (i_2 != 0);
            }
            int64_t x8_12 = *(arg1 + 0x1d8);
            *(arg1 + 0x1e0) = 0;
            if (x8_12 != 0)
            {
                int64_t x9_3 = 0;
                do
                {
                    *(*(arg1 + 0x1d0) + (x9_3 << 3)) = 0;
                    x9_3 = (x9_3 + 1);
                } while (x8_12 != x9_3);
            }
            *(arg1 + 0x1e8) = 0;
        }
        *(arg1 + 0x130) = 0;
    }
    /* tailcall */
    return std::__ndk1::mutex::unlock();
}

uint64_t rgbd::RGBDOrbbec::resume(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    void** x21 = (arg1 + 0xd8);
    std::__ndk1::mutex::lock();
    int32_t x19;
    if ((*(arg1 + 0x130) & 1) != 0)
    {
        x19 = 1;
    }
    else
    {
        int32_t s_2;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_11;
        oniGetDeviceList(&s_11, &s_2);
        int32_t s_13 = s_2;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_12 = s_11;
        int64_t s_15 = s_13;
        size_t x22_1 = (s_13 * 0x304);
        uint64_t x0_2;
        if (0 == ((s_15 * 0x304) >> 0x40))
        {
            x0_2 = x22_1;
        }
        else
        {
            x0_2 = -1;
        }
        void* x0_3 = operator new[](x0_2);
        void* x28_1 = x0_3;
        memcpy(x0_3, s_12, x22_1);
        oniReleaseDeviceList(s_12);
        void* var_328;
        char s_6;
        void* var_248;
        size_t var_1c0;
        if (s_13 != 0)
        {
            void** var_378 = x21;
            system("su -c "chmod -R 777 /dev/bus/usb…");
            int32_t s_14 = s_13;
            int32_t var_35c_1;
            if (s_13 < 1)
            {
                var_35c_1 = 1;
            }
            else
            {
                var_328 = x28_1;
                int64_t* var_310_1 = &var_1c0;
                char* x8_10 = (&s_11 | 1);
                int64_t x20_1 = 0;
                var_35c_1 = 1;
                while (true)
                {
                    char* x22_3;
                    if ((*data_36118 & 1) == 0)
                    {
                        x22_3 = &*(data_36118 + 1);
                    }
                    else
                    {
                        x22_3 = *(data_36122 + 6);
                    }
                    int32_t var_228 = data_36110;
                    int64_t s_8;
                    __builtin_memset(&s_8, 0, 0x18);
                    size_t x0_69 = strlen(x22_3);
                    if (x0_69 < -0x10)
                    {
                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                    }
                    else
                    {
                        void* var_210_1;
                        void* x26_5;
                        if (x0_69 >= 0x17)
                        {
                            uint64_t x25_6 = ((x0_69 + 0x10) & 0xfffffffffffffff0);
                            void* x0_71 = operator new(x25_6);
                            x26_5 = x0_71;
                            size_t var_218_1 = x0_69;
                            var_210_1 = x0_71;
                            s_8 = (x25_6 | 1);
                        }
                        else
                        {
                            x26_5 = &*s_8[1];
                            s_8 = (x0_69 << 1);
                        }
                        if ((x0_69 >= 0x17 || (x0_69 < 0x17 && x0_69 != 0)))
                        {
                            memcpy(x26_5, x22_3, x0_69);
                        }
                        *(x26_5 + x0_69) = 0;
                        int32_t x0_74 = g3::logLevel(&var_228);
                        size_t x0_76;
                        int32_t x19_9;
                        if ((x0_74 & 1) != 0)
                        {
                            int64_t s_7;
                            __builtin_memset(&s_7, 0, 0x18);
                            uint64_t x19_8 = *rgbd::OBCTAG;
                            x0_76 = strlen(x19_8);
                            if (x0_76 >= -0x10)
                            {
                                void* var_230_1;
                                void* x26_6;
                                if (x0_76 >= 0x17)
                                {
                                    uint64_t x25_7 = ((x0_76 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_79 = operator new(x25_7);
                                    x26_6 = x0_79;
                                    size_t var_238_1 = x0_76;
                                    var_230_1 = x0_79;
                                    s_7 = (x25_7 | 1);
                                }
                                else
                                {
                                    x26_6 = (&s_7 | 1);
                                    s_7 = (x0_76 << 1);
                                }
                                if ((x0_76 >= 0x17 || (x0_76 < 0x17 && x0_76 != 0)))
                                {
                                    memcpy(x26_6, x19_8, x0_76);
                                }
                                *(x26_6 + x0_76) = 0;
                                x19_9 = g3::logTag(&s_7);
                                if ((s_7 & 1) != 0)
                                {
                                    operator delete(var_230_1);
                                    if ((s_8 & 1) != 0)
                                    {
                                        goto label_b7a4;
                                    }
                                }
                                else if ((s_8 & 1) != 0)
                                {
                                    goto label_b7a4;
                                }
                            }
                        }
                        else
                        {
                            x19_9 = 0;
                            if ((s_8 & 1) != 0)
                            {
                            label_b7a4:
                                operator delete(var_210_1);
                                if ((x19_9 & 1) == 0)
                                {
                                    goto label_b7b4;
                                }
                                goto label_b838;
                            }
                        }
                        if (((x0_74 & 1) == 0 || ((x0_74 & 1) != 0 && x0_76 >= -0x10)))
                        {
                            char* x19_10;
                            if ((x19_9 & 1) != 0)
                            {
                            label_b838:
                                LogCapture::LogCapture(&s_11, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                                char* x22_6 = (x28_1 + (x20_1 * 0x304));
                                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_95 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_310_1, "name: ", 6), ((x28_1 + (x20_1 * 0x304)) + 0x200), strlen(((x28_1 + (x20_1 * 0x304)) + 0x200))), " url:", 5), x22_6, strlen(x22_6)), " vendor:", 8);
                                x19_10 = ((x28_1 + (x20_1 * 0x304)) + 0x100);
                                uint16_t x0_100 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_95, x19_10, strlen(x19_10)), " PID:", 5);
                                *((x28_1 + (x20_1 * 0x304)) + 0x302);
                                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_100);
                                LogCapture::~LogCapture();
                                goto label_b910;
                            }
                        label_b7b4:
                            x19_10 = ((x28_1 + (x20_1 * 0x304)) + 0x100);
                        label_b910:
                            int64_t x0_102 = strlen(x19_10);
                            uint64_t x8_71 = data_362f0;
                            uint64_t x9_7;
                            if ((x8_71 & 1) == 0)
                            {
                                x9_7 = (x8_71 >> 1);
                            }
                            else
                            {
                                x9_7 = data_362f8;
                            }
                            if (x0_102 != x9_7)
                            {
                            label_c080:
                                x20_1 = (x20_1 + 1);
                                if (x20_1 >= s_15)
                                {
                                    break;
                                }
                                continue;
                            }
                            else
                            {
                                if ((x0_102 != 0 && x0_102 != -1))
                                {
                                    int32_t* x0_103;
                                    if ((x8_71 & 1) == 0)
                                    {
                                        x0_103 = &data_362f1;
                                    }
                                    else
                                    {
                                        x0_103 = data_36300;
                                    }
                                    if (memcmp(x0_103, x19_10) != 0)
                                    {
                                        goto label_c080;
                                    }
                                }
                                if ((x0_102 == 0 || (x0_102 != 0 && x0_102 != -1)))
                                {
                                    int64_t s_16 = s_15;
                                    void** x0_105 = operator new(0x428);
                                    x22_1 = &x0_105[1];
                                    *x22_1 = {0};
                                    *x0_105 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> > + 0x10);
                                    __builtin_memset(&x0_105[0x66], 0, 0x15);
                                    __builtin_memset(&x0_105[0x69], 0, 0x15);
                                    __builtin_memset(&x0_105[0x6c], 0, 0x15);
                                    __builtin_memset(&x0_105[0x6f], 0, 0x15);
                                    __builtin_memset(&x0_105[0x72], 0, 0x15);
                                    __builtin_memset(&x0_105[0x75], 0, 0x15);
                                    __builtin_memset(&x0_105[0x78], 0, 0x15);
                                    __builtin_memset(&x0_105[0x7b], 0, 0x15);
                                    __builtin_memset(&x0_105[0x7e], 0, 0x15);
                                    x21 = x0_105;
                                    int64_t i = 0;
                                    __builtin_memset(&x0_105[0x81], 0, 0x15);
                                    x0_105[3] = 0;
                                    x0_105[4] = 0;
                                    x0_105[0x84] = 1;
                                    do
                                    {
                                        void* x23_10 = (x21 + i);
                                        uint32_t x8_87 = *(x23_10 + 0x344);
                                        *(x23_10 + 0x330) = 0;
                                        if (x8_87 != 0)
                                        {
                                            void* x0_106 = *(x23_10 + 0x338);
                                            if (x0_106 != 0)
                                            {
                                                operator delete[](x0_106);
                                            }
                                        }
                                        i = (i + 0x18);
                                        *(x23_10 + 0x338) = 0;
                                        *(x23_10 + 0x33d) = 0;
                                    } while (i != 0xf0);
                                    char* x19_13 = (x28_1 + (x20_1 * 0x304));
                                    int64_t x0_108;
                                    if (x21[0x84] == 0)
                                    {
                                        x0_108 = x21[4];
                                    }
                                    else
                                    {
                                        x0_108 = oniDeviceOpen(x19_13, &s_11);
                                        if (x0_108 == 0)
                                        {
                                            openni::Device::_setHandle(&x0_105[3]);
                                            x0_108 = x21[4];
                                        }
                                    }
                                    int32_t x19_5;
                                    if (((x21[0x84] != 0 && x0_108 == 0) || (x21[0x84] == 0 && x0_108 != 0)))
                                    {
                                        int32_t var_78_1 = 0;
                                        int64_t var_80 = 0;
                                        int32_t var_27c = 0xc;
                                        if (oniDeviceGetProperty(x0_108, 0x10, &var_80, &var_27c) == 0)
                                        {
                                            __builtin_memset(&s_11, 0, 0x18);
                                            size_t x0_132 = strlen(&var_80);
                                            if (x0_132 < -0x10)
                                            {
                                                goto label_c2fc;
                                            }
                                            char* var_1b8_5;
                                            char* x25_8;
                                            if (x0_132 >= 0x17)
                                            {
                                                uint64_t x23_15 = ((x0_132 + 0x10) & 0xfffffffffffffff0);
                                                char* x0_154 = operator new(x23_15);
                                                x25_8 = x0_154;
                                                var_1b8_5 = x0_154;
                                                s_11 = (x23_15 | 1);
                                                var_1c0 = x0_132;
                                            }
                                            else
                                            {
                                                x25_8 = x8_10;
                                                s_11 = (x0_132 << 1);
                                            }
                                            if ((x0_132 >= 0x17 || (x0_132 < 0x17 && x0_132 != 0)))
                                            {
                                                memcpy(x25_8, &var_80, x0_132);
                                            }
                                            x25_8[x0_132] = 0;
                                            int32_t x23_2;
                                            if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0x180)) == 0)
                                            {
                                                x23_2 = 1;
                                                if ((s_11 & 1) != 0)
                                                {
                                                label_b184:
                                                    operator delete(var_1b8_5);
                                                    if (x23_2 == 0)
                                                    {
                                                        goto label_b194;
                                                    }
                                                    goto label_b238;
                                                }
                                            }
                                            else
                                            {
                                                __builtin_memset(&s_2, 0, 0x18);
                                                size_t x0_159 = strlen(&var_80);
                                                if (x0_159 < -0x10)
                                                {
                                                    goto label_c2cc;
                                                }
                                                char* var_2c0_1;
                                                char* x25_2;
                                                if (x0_159 >= 0x17)
                                                {
                                                    uint64_t x23_3 = ((x0_159 + 0x10) & 0xfffffffffffffff0);
                                                    char* x0_13 = operator new(x23_3);
                                                    x25_2 = x0_13;
                                                    size_t var_2c8_1 = x0_159;
                                                    var_2c0_1 = x0_13;
                                                    s_2 = (x23_3 | 1);
                                                }
                                                else
                                                {
                                                    x25_2 = (&s_2 | 1);
                                                    s_2 = (x0_159 << 1);
                                                }
                                                if ((x0_159 >= 0x17 || (x0_159 < 0x17 && x0_159 != 0)))
                                                {
                                                    memcpy(x25_2, &var_80, x0_159);
                                                }
                                                x25_2[x0_159] = 0;
                                                if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0x1d0)) != 0)
                                                {
                                                    x23_2 = 1;
                                                }
                                                else
                                                {
                                                    x23_2 = 0;
                                                }
                                                if ((s_2 & 1) != 0)
                                                {
                                                    operator delete(var_2c0_1);
                                                    if ((s_11 & 1) != 0)
                                                    {
                                                        goto label_b184;
                                                    }
                                                }
                                                else if ((s_11 & 1) != 0)
                                                {
                                                    goto label_b184;
                                                }
                                            }
                                            if (x23_2 == 0)
                                            {
                                            label_b194:
                                                __builtin_memset(&s_11, 0, 0x18);
                                                size_t x0_11 = strlen(&var_80);
                                                if (x0_11 < -0x10)
                                                {
                                                    goto label_c2d4;
                                                }
                                                char* var_1b8_1;
                                                char* x25_1;
                                                if (x0_11 >= 0x17)
                                                {
                                                    uint64_t x23_4 = ((x0_11 + 0x10) & 0xfffffffffffffff0);
                                                    char* x0_25 = operator new(x23_4);
                                                    x25_1 = x0_25;
                                                    var_1b8_1 = x0_25;
                                                    s_11 = (x23_4 | 1);
                                                    var_1c0 = x0_11;
                                                    s_15 = s_16;
                                                }
                                                else
                                                {
                                                    x25_1 = x8_10;
                                                    s_15 = s_16;
                                                    s_11 = (x0_11 << 1);
                                                }
                                                if ((x0_11 >= 0x17 || (x0_11 < 0x17 && x0_11 != 0)))
                                                {
                                                    memcpy(x25_1, &var_80, x0_11);
                                                }
                                                x25_1[x0_11] = 0;
                                                void* var_1b0_1 = &x0_105[3];
                                                int32_t i_1;
                                                do
                                                {
                                                    i_1 = __stxr((__ldxr(x22_1) + 1), x22_1);
                                                } while (i_1 != 0);
                                                x28_1 = var_328;
                                                std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > >((arg1 + 0x1d0), &s_11);
                                                if (x21 != 0)
                                                {
                                                    int64_t x9_4;
                                                    int32_t i_2;
                                                    do
                                                    {
                                                        x9_4 = __ldaxr(&x21[1]);
                                                        i_2 = __stlxr((x9_4 - 1), &x21[1]);
                                                    } while (i_2 != 0);
                                                    if (x9_4 == 0)
                                                    {
                                                        *(*x21 + 0x10)(x21);
                                                        std::__ndk1::__shared_weak_count::__release_weak();
                                                    }
                                                }
                                                if ((s_11 & 1) != 0)
                                                {
                                                    operator delete(var_1b8_1);
                                                }
                                                if (var_35c_1 != 0)
                                                {
                                                    __builtin_memset(&s_11, 0, 0x18);
                                                    size_t x0_32 = strlen(&var_80);
                                                    if (x0_32 < -0x10)
                                                    {
                                                        goto label_c2dc;
                                                    }
                                                    char* var_1b8_2;
                                                    char* x28_4;
                                                    if (x0_32 >= 0x17)
                                                    {
                                                        uint64_t x23_6 = ((x0_32 + 0x10) & 0xfffffffffffffff0);
                                                        char* x0_42 = operator new(x23_6);
                                                        x28_4 = x0_42;
                                                        var_1b8_2 = x0_42;
                                                        s_11 = (x23_6 | 1);
                                                        var_1c0 = x0_32;
                                                        s_15 = s_16;
                                                    }
                                                    else
                                                    {
                                                        x28_4 = x8_10;
                                                        s_11 = (x0_32 << 1);
                                                    }
                                                    if ((x0_32 >= 0x17 || (x0_32 < 0x17 && x0_32 != 0)))
                                                    {
                                                        memcpy(x28_4, &var_80, x0_32);
                                                    }
                                                    x28_4[x0_32] = 0;
                                                    s_2 = *((var_328 + (x20_1 * 0x304)) + 0x302);
                                                    int32_t x0_45 = rgbd::RGBDOrbbec::openDevice(arg1, &s_11);
                                                    if ((s_11 & 1) != 0)
                                                    {
                                                        operator delete(var_1b8_2);
                                                    }
                                                    x28_1 = var_328;
                                                    if ((x0_45 & 1) == 0)
                                                    {
                                                        goto label_b528;
                                                    }
                                                    __builtin_memset(&s_11, 0, 0x18);
                                                    size_t x0_48 = strlen(&var_80);
                                                    if (x0_48 < -0x10)
                                                    {
                                                        goto label_c2e4;
                                                    }
                                                    char* var_1b8_3;
                                                    char* x25_5;
                                                    if (x0_48 >= 0x17)
                                                    {
                                                        uint64_t x23_8 = ((x0_48 + 0x10) & 0xfffffffffffffff0);
                                                        char* x0_60 = operator new(x23_8);
                                                        x25_5 = x0_60;
                                                        var_1b8_3 = x0_60;
                                                        s_11 = (x23_8 | 1);
                                                        var_1c0 = x0_48;
                                                    }
                                                    else
                                                    {
                                                        x25_5 = x8_10;
                                                        s_11 = (x0_48 << 1);
                                                    }
                                                    if ((x0_48 >= 0x17 || (x0_48 < 0x17 && x0_48 != 0)))
                                                    {
                                                        memcpy(x25_5, &var_80, x0_48);
                                                    }
                                                    x25_5[x0_48] = 0;
                                                    s_2 = &s_11;
                                                    char* x23_9 = (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&&>, std::__ndk1::tuple<> >((arg1 + 0x88), &s_11) + 0x40);
                                                    strlen(x19_13);
                                                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(x23_9, x19_13);
                                                    if ((s_11 & 1) != 0)
                                                    {
                                                        operator delete(var_1b8_3);
                                                    }
                                                    x19_5 = 0;
                                                    s_15 = s_16;
                                                    goto label_c054;
                                                }
                                            label_b528:
                                                var_35c_1 = 0;
                                                x19_5 = 0;
                                                goto label_c054;
                                            }
                                        label_b238:
                                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 8), "serial num not match ");
                                            strlen(&var_80);
                                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append((arg1 + 8), &var_80);
                                            uint32_t x9_2 = *data_36198;
                                            char* x10_3 = *(data_361a2 + 6);
                                            int32_t var_2f0 = data_36190;
                                            char* x26_1;
                                            if ((x9_2 & 1) == 0)
                                            {
                                                x26_1 = &*(data_36198 + 1);
                                            }
                                            else
                                            {
                                                x26_1 = x10_3;
                                            }
                                            int64_t s_1;
                                            __builtin_memset(&s_1, 0, 0x18);
                                            size_t x0_22 = strlen(x26_1);
                                            if (x0_22 < -0x10)
                                            {
                                                goto label_c2ec;
                                            }
                                            void* var_2d8;
                                            void* x28_3;
                                            if (x0_22 >= 0x17)
                                            {
                                                uint64_t x23_5 = ((x0_22 + 0x10) & 0xfffffffffffffff0);
                                                void* x0_34 = operator new(x23_5);
                                                x28_3 = x0_34;
                                                size_t var_2e0_1 = x0_22;
                                                var_2d8 = x0_34;
                                                s_1 = (x23_5 | 1);
                                            }
                                            else
                                            {
                                                x28_3 = &*s_1[1];
                                                s_1 = (x0_22 << 1);
                                            }
                                            if ((x0_22 >= 0x17 || (x0_22 < 0x17 && x0_22 != 0)))
                                            {
                                                memcpy(x28_3, x26_1, x0_22);
                                            }
                                            *(x28_3 + x0_22) = 0;
                                            int32_t x19_4;
                                            if ((g3::logLevel(&var_2f0) & 1) == 0)
                                            {
                                                x28_1 = var_328;
                                                x19_4 = 0;
                                                s_15 = s_16;
                                                if ((s_1 & 1) != 0)
                                                {
                                                label_b460:
                                                    operator delete(var_2d8);
                                                    if ((x19_4 & 1) == 0)
                                                    {
                                                        goto label_b5f8;
                                                    }
                                                    goto label_b5b8;
                                                }
                                            }
                                            else
                                            {
                                                int64_t s;
                                                __builtin_memset(&s, 0, 0x18);
                                                uint64_t x19_3 = *rgbd::OBCTAG;
                                                size_t x0_39 = strlen(x19_3);
                                                if (x0_39 < -0x10)
                                                {
                                                    goto label_c2f4;
                                                }
                                                void* var_2f8_1;
                                                void* x28_5;
                                                if (x0_39 >= 0x17)
                                                {
                                                    uint64_t x23_7 = ((x0_39 + 0x10) & 0xfffffffffffffff0);
                                                    void* x0_50 = operator new(x23_7);
                                                    x28_5 = x0_50;
                                                    size_t var_300_1 = x0_39;
                                                    var_2f8_1 = x0_50;
                                                    s = (x23_7 | 1);
                                                    s_15 = s_16;
                                                }
                                                else
                                                {
                                                    x28_5 = (&s | 1);
                                                    s_15 = s_16;
                                                    s = (x0_39 << 1);
                                                }
                                                if ((x0_39 >= 0x17 || (x0_39 < 0x17 && x0_39 != 0)))
                                                {
                                                    memcpy(x28_5, x19_3, x0_39);
                                                }
                                                *(x28_5 + x0_39) = 0;
                                                x28_1 = var_328;
                                                x19_4 = g3::logTag(&s);
                                                if ((s & 1) != 0)
                                                {
                                                    operator delete(var_2f8_1);
                                                    if ((s_1 & 1) != 0)
                                                    {
                                                        goto label_b460;
                                                    }
                                                }
                                                else if ((s_1 & 1) != 0)
                                                {
                                                    goto label_b460;
                                                }
                                            }
                                            if ((x19_4 & 1) == 0)
                                            {
                                            label_b5f8:
                                                x19_5 = 4;
                                                s_14 = (s_14 - 1);
                                                goto label_c054;
                                            }
                                        label_b5b8:
                                            LogCapture::LogCapture(&s_11, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                                            char* x19_6 = (arg1 + 9);
                                            if ((*(arg1 + 8) & 1) != 0)
                                            {
                                                x19_6 = *(arg1 + 0x18);
                                            }
                                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_310_1, x19_6, strlen(x19_6));
                                            LogCapture::~LogCapture();
                                            goto label_b5f8;
                                        }
                                        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 8), "Couldn't get the serialnum");
                                        uint32_t x9_10 = *data_36198;
                                        char* x10_7 = *(data_361a2 + 6);
                                        int32_t var_2a0 = data_36190;
                                        char* x26_9;
                                        if ((x9_10 & 1) == 0)
                                        {
                                            x26_9 = &*(data_36198 + 1);
                                        }
                                        else
                                        {
                                            x26_9 = x10_7;
                                        }
                                        int64_t s_4;
                                        __builtin_memset(&s_4, 0, 0x18);
                                        size_t x0_114 = strlen(x26_9);
                                        if (x0_114 < -0x10)
                                        {
                                            goto label_c2bc;
                                        }
                                        void* var_288;
                                        void* x28_6;
                                        if (x0_114 >= 0x17)
                                        {
                                            uint64_t x25_9 = ((x0_114 + 0x10) & 0xfffffffffffffff0);
                                            void* x0_134 = operator new(x25_9);
                                            x28_6 = x0_134;
                                            size_t var_290_1 = x0_114;
                                            var_288 = x0_134;
                                            s_4 = (x25_9 | 1);
                                            s_15 = s_16;
                                        }
                                        else
                                        {
                                            x28_6 = &*s_4[1];
                                            s_15 = s_16;
                                            s_4 = (x0_114 << 1);
                                        }
                                        if ((x0_114 >= 0x17 || (x0_114 < 0x17 && x0_114 != 0)))
                                        {
                                            memcpy(x28_6, x26_9, x0_114);
                                        }
                                        *(x28_6 + x0_114) = 0;
                                        int32_t x19_21;
                                        if ((g3::logLevel(&var_2a0) & 1) == 0)
                                        {
                                            x28_1 = var_328;
                                            x19_21 = 0;
                                            if ((s_4 & 1) != 0)
                                            {
                                            label_be10:
                                                operator delete(var_288);
                                                if ((x19_21 & 1) == 0)
                                                {
                                                    goto label_be18;
                                                }
                                                goto label_c008;
                                            }
                                        }
                                        else
                                        {
                                            int64_t s_3;
                                            __builtin_memset(&s_3, 0, 0x18);
                                            uint64_t x19_20 = *rgbd::OBCTAG;
                                            size_t x0_139 = strlen(x19_20);
                                            if (x0_139 < -0x10)
                                            {
                                                goto label_c2c4;
                                            }
                                            void* var_2a8_1;
                                            void* x28_11;
                                            if (x0_139 >= 0x17)
                                            {
                                                uint64_t x25_11 = ((x0_139 + 0x10) & 0xfffffffffffffff0);
                                                void* x0_161 = operator new(x25_11);
                                                x28_11 = x0_161;
                                                size_t var_2b0_1 = x0_139;
                                                var_2a8_1 = x0_161;
                                                s_3 = (x25_11 | 1);
                                            }
                                            else
                                            {
                                                x28_11 = (&s_3 | 1);
                                                s_3 = (x0_139 << 1);
                                            }
                                            if ((x0_139 >= 0x17 || (x0_139 < 0x17 && x0_139 != 0)))
                                            {
                                                memcpy(x28_11, x19_20, x0_139);
                                            }
                                            *(x28_11 + x0_139) = 0;
                                            x28_1 = var_328;
                                            x19_21 = g3::logTag(&s_3);
                                            if ((s_3 & 1) != 0)
                                            {
                                                operator delete(var_2a8_1);
                                                if ((s_4 & 1) != 0)
                                                {
                                                    goto label_be10;
                                                }
                                            }
                                            else if ((s_4 & 1) != 0)
                                            {
                                                goto label_be10;
                                            }
                                        }
                                        if ((x19_21 & 1) != 0)
                                        {
                                        label_c008:
                                            LogCapture::LogCapture(&s_11, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                                            char* x19_23 = (arg1 + 9);
                                            if ((*(arg1 + 8) & 1) != 0)
                                            {
                                                x19_23 = *(arg1 + 0x18);
                                            }
                                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_310_1, x19_23, strlen(x19_23));
                                            goto label_c040;
                                        }
                                    label_be18:
                                        x19_5 = 1;
                                    label_c054:
                                        int64_t x8_131;
                                        int32_t i_3;
                                        do
                                        {
                                            x8_131 = __ldaxr(x22_1);
                                            i_3 = __stlxr((x8_131 - 1), x22_1);
                                        } while (i_3 != 0);
                                        if (x8_131 == 0)
                                        {
                                            *(*x21 + 0x10)(x21);
                                            std::__ndk1::__shared_weak_count::__release_weak();
                                        }
                                        if ((x19_5 | 4) != 4)
                                        {
                                            goto label_c240;
                                        }
                                    }
                                    if (((x21[0x84] == 0 && x0_108 == 0) || (x21[0x84] != 0 && x0_108 != 0)))
                                    {
                                        char* x0_115 = oniGetExtendedError(x0_108);
                                        __builtin_memset(&s_11, 0, 0x18);
                                        size_t x0_116;
                                        int128_t v0_1;
                                        x0_116 = strlen(x0_115);
                                        if (x0_116 < -0x10)
                                        {
                                            std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        }
                                        else
                                        {
                                            char* var_1b8_4;
                                            void* x23_11;
                                            char* x28_7;
                                            if (x0_116 >= 0x17)
                                            {
                                                uint64_t x23_12 = ((x0_116 + 0x10) & 0xfffffffffffffff0);
                                                char* x0_118 = operator new(x23_12);
                                                x23_11 = (arg1 + 8);
                                                x28_7 = x0_118;
                                                var_1b8_4 = x0_118;
                                                s_11 = (x23_12 | 1);
                                                var_1c0 = x0_116;
                                            }
                                            else
                                            {
                                                x28_7 = x8_10;
                                                x23_11 = (arg1 + 8);
                                                s_11 = (x0_116 << 1);
                                            }
                                            if ((x0_116 >= 0x17 || (x0_116 < 0x17 && x0_116 != 0)))
                                            {
                                                memcpy(x28_7, x0_115, x0_116);
                                            }
                                            x28_7[x0_116] = 0;
                                            if ((*x23_11 & 1) == 0)
                                            {
                                                *x23_11 = 0;
                                            }
                                            else
                                            {
                                                **(arg1 + 0x18) = 0;
                                                uint32_t x8_99 = *(arg1 + 8);
                                                *(arg1 + 0x10) = 0;
                                                if ((x8_99 & 1) != 0)
                                                {
                                                    operator delete(*(arg1 + 0x18));
                                                    *(arg1 + 8) = 0;
                                                }
                                            }
                                            v0_1 = s_11;
                                            *(x23_11 + 0x10) = var_1b8_4;
                                            *x23_11 = v0_1;
                                            uint32_t x9_12 = *data_36198;
                                            char* x11_5 = *(data_361a2 + 6);
                                            int32_t var_260 = data_36190;
                                            char* x26_11;
                                            if ((x9_12 & 1) == 0)
                                            {
                                                x26_11 = &*(data_36198 + 1);
                                            }
                                            else
                                            {
                                                x26_11 = x11_5;
                                            }
                                            __builtin_memset(&s_6, 0, 0x18);
                                            size_t x0_122 = strlen(x26_11);
                                            if (x0_122 >= -0x10)
                                            {
                                                void* x28_8;
                                                if (x0_122 >= 0x17)
                                                {
                                                    uint64_t x23_13 = ((x0_122 + 0x10) & 0xfffffffffffffff0);
                                                    void* x0_124 = operator new(x23_13);
                                                    x28_8 = x0_124;
                                                    size_t var_250_1 = x0_122;
                                                    var_248 = x0_124;
                                                    s_6 = (x23_13 | 1);
                                                }
                                                else
                                                {
                                                    void var_257;
                                                    x28_8 = &var_257;
                                                    s_6 = (x0_122 << 1);
                                                }
                                                if ((x0_122 >= 0x17 || (x0_122 < 0x17 && x0_122 != 0)))
                                                {
                                                    memcpy(x28_8, x26_11, x0_122);
                                                }
                                                *(x28_8 + x0_122) = 0;
                                                int32_t x19_19;
                                                if ((g3::logLevel(&var_260) & 1) == 0)
                                                {
                                                    x28_1 = var_328;
                                                    x19_19 = 0;
                                                    s_15 = s_16;
                                                    if ((s_6 & 1) != 0)
                                                    {
                                                    label_bd28:
                                                        operator delete(var_248);
                                                        if ((x19_19 & 1) == 0)
                                                        {
                                                            goto label_bd30;
                                                        }
                                                        goto label_bea4;
                                                    }
                                                }
                                                else
                                                {
                                                    int64_t s_5;
                                                    __builtin_memset(&s_5, 0, 0x18);
                                                    uint64_t x19_18 = *rgbd::OBCTAG;
                                                    size_t x0_129 = strlen(x19_18);
                                                    if (x0_129 < -0x10)
                                                    {
                                                        goto label_c304;
                                                    }
                                                    void* var_268_1;
                                                    void* x28_9;
                                                    if (x0_129 >= 0x17)
                                                    {
                                                        uint64_t x23_14 = ((x0_129 + 0x10) & 0xfffffffffffffff0);
                                                        void* x0_142 = operator new(x23_14);
                                                        x28_9 = x0_142;
                                                        size_t var_270_1 = x0_129;
                                                        var_268_1 = x0_142;
                                                        s_5 = (x23_14 | 1);
                                                    }
                                                    else
                                                    {
                                                        x28_9 = (&s_5 | 1);
                                                        s_5 = (x0_129 << 1);
                                                    }
                                                    if ((x0_129 >= 0x17 || (x0_129 < 0x17 && x0_129 != 0)))
                                                    {
                                                        memcpy(x28_9, x19_18, x0_129);
                                                    }
                                                    *(x28_9 + x0_129) = 0;
                                                    x28_1 = var_328;
                                                    x19_19 = g3::logTag(&s_5);
                                                    s_15 = s_16;
                                                    if ((s_5 & 1) != 0)
                                                    {
                                                        operator delete(var_268_1);
                                                        if ((s_6 & 1) != 0)
                                                        {
                                                            goto label_bd28;
                                                        }
                                                    }
                                                    else if ((s_6 & 1) != 0)
                                                    {
                                                        goto label_bd28;
                                                    }
                                                }
                                                if ((x19_19 & 1) == 0)
                                                {
                                                label_bd30:
                                                    x19_5 = 1;
                                                    goto label_c054;
                                                }
                                            label_bea4:
                                                LogCapture::LogCapture(&s_11, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                                                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_148 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_310_1, "Couldn't open device,error:", 0x1b);
                                                void* x25_10 = (arg1 + 9);
                                                if ((*(arg1 + 8) & 1) != 0)
                                                {
                                                    x25_10 = *(arg1 + 0x18);
                                                }
                                                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_148, x25_10, strlen(x25_10));
                                            label_c040:
                                                LogCapture::~LogCapture();
                                                x19_5 = 1;
                                                goto label_c054;
                                            }
                                        }
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2bc:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2c4:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2cc:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2d4:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2dc:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2e4:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2ec:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2f4:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c2fc:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    label_c304:
                                        std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                        goto label_c30c;
                                    }
                                    goto label_c080;
                                }
                            }
                            goto label_c2a0;
                        }
                    }
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                label_c2a0:
                    std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
                    goto label_c2a4;
                }
            }
            x19 = 0;
            if ((var_35c_1 != 0 && s_14 != 0))
            {
                x19 = 1;
                *(arg1 + 0x130) = 1;
            }
            goto label_c248;
        }
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 8), "not find orbbec devices");
        char* x23_1;
        if ((*data_36198 & 1) == 0)
        {
            x23_1 = &*(data_36198 + 1);
        }
        else
        {
            x23_1 = *(data_361a2 + 6);
        }
        int32_t var_1f0 = data_36190;
        int64_t s_10;
        __builtin_memset(&s_10, 0, 0x18);
        size_t x0_7 = strlen(x23_1);
        int64_t s_9;
        void* var_1d8_1;
        int32_t x0_175;
        size_t x0_177;
        if (x0_7 < -0x10)
        {
        label_c30c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* x24_2;
            if (x0_7 >= 0x17)
            {
                uint64_t x25_12 = ((x0_7 + 0x10) & 0xfffffffffffffff0);
                void* x0_172 = operator new(x25_12);
                x24_2 = x0_172;
                var_1d8_1 = x0_172;
                s_10 = (x25_12 | 1);
                size_t var_1e0_1 = x0_7;
            }
            else
            {
                x24_2 = &*s_10[1];
                s_10 = (x0_7 << 1);
            }
            if ((x0_7 >= 0x17 || (x0_7 < 0x17 && x0_7 != 0)))
            {
                memcpy(x24_2, x23_1, x0_7);
            }
            *(x24_2 + x0_7) = 0;
            x0_175 = g3::logLevel(&var_1f0);
            if ((x0_175 & 1) != 0)
            {
                __builtin_memset(&s_9, 0, 0x18);
                x22_1 = *rgbd::OBCTAG;
                x0_177 = strlen(x22_1);
            }
        }
        if ((x0_7 < -0x10 || ((x0_7 >= -0x10 && (x0_175 & 1) != 0) && x0_177 < -0x10)))
        {
            int64_t x0_197 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s_6 & 1) != 0)
            {
                operator delete(var_248);
            }
            int64_t x8_151;
            int32_t i_4;
            do
            {
                x8_151 = __ldaxr(x22_1);
                i_4 = __stlxr((x8_151 - 1), x22_1);
            } while (i_4 != 0);
            if (x8_151 == 0)
            {
                *(*x21 + 0x10)(x21);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
            operator delete[](var_328);
            std::__ndk1::mutex::unlock();
            int64_t* x0_204;
            int16_t x1_40;
            x0_204 = _Unwind_Resume(x0_197);
            /* tailcall */
            return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_204, x1_40);
        }
        if (x0_7 >= -0x10)
        {
            int32_t x22_9;
            if (((x0_175 & 1) != 0 && x0_177 >= -0x10))
            {
                void* var_1f8_1;
                void* x24_3;
                if (x0_177 >= 0x17)
                {
                    uint64_t x25_13 = ((x0_177 + 0x10) & 0xfffffffffffffff0);
                    void* x0_180 = operator new(x25_13);
                    x24_3 = x0_180;
                    size_t var_200_1 = x0_177;
                    var_1f8_1 = x0_180;
                    s_9 = (x25_13 | 1);
                }
                else
                {
                    x24_3 = (&s_9 | 1);
                    s_9 = (x0_177 << 1);
                }
                if ((x0_177 >= 0x17 || (x0_177 < 0x17 && x0_177 != 0)))
                {
                    memcpy(x24_3, x22_1, x0_177);
                }
                *(x24_3 + x0_177) = 0;
                x22_9 = g3::logTag(&s_9);
                if ((s_9 & 1) != 0)
                {
                    operator delete(var_1f8_1);
                    if ((s_10 & 1) != 0)
                    {
                        goto label_c15c;
                    }
                }
                else if ((s_10 & 1) != 0)
                {
                    goto label_c15c;
                }
            }
            if ((x0_175 & 1) == 0)
            {
                x22_9 = 0;
                if ((s_10 & 1) != 0)
                {
                label_c15c:
                    operator delete(var_1d8_1);
                    if ((x22_9 & 1) == 0)
                    {
                        goto label_c240;
                    }
                    goto label_c1f0;
                }
            }
            if (((x0_175 & 1) == 0 || ((x0_175 & 1) != 0 && x0_177 >= -0x10)))
            {
                if ((x22_9 & 1) != 0)
                {
                label_c1f0:
                    LogCapture::LogCapture(&s_11, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                    void* x19_24;
                    if ((*(arg1 + 8) & 1) != 0)
                    {
                        x19_24 = *(arg1 + 0x18);
                    }
                    else
                    {
                        x19_24 = (arg1 + 9);
                    }
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1c0, x19_24, strlen(x19_24));
                    LogCapture::~LogCapture();
                    goto label_c240;
                }
            label_c240:
                x19 = 0;
            label_c248:
                operator delete[](x28_1);
            }
        }
    }
    std::__ndk1::mutex::unlock();
    if (*(x26 + 0x28) == x8)
    {
        return x19;
    }
label_c2a4:
    __stack_chk_fail();
    /* no return */
}

int64_t sub_c328(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5)
{
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg3);
        i = __stlxr((x8_1 - 1), arg3);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_5;
    int16_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_c34c(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg3);
        i = __stlxr((x8_1 - 1), arg3);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_6;
    int16_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

void sub_c368(void* arg1) __noreturn
{
    sub_1512c(arg1);
    /* no return */
}

int64_t sub_c3d8(int64_t arg1, void* arg2 @ x28)
{
    int64_t x21;
    arg_68 = x21;
    LogCapture::~LogCapture();
    operator delete[](arg2);
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    int16_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_c3e4(int64_t arg1, void* arg2 @ x28)
{
    int64_t x21;
    arg_68 = x21;
    operator delete[](arg2);
    std::__ndk1::mutex::unlock();
    int64_t* x0_3;
    int16_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_c3e8(int64_t arg1, void* arg2 @ x28, char arg3, void* arg4, char arg5, void* arg6)
{
    int64_t x21;
    arg_68 = x21;
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    operator delete[](arg2);
    std::__ndk1::mutex::unlock();
    int64_t* x0_5;
    int16_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_c410(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5, char arg6, void* arg7, int64_t* arg8)
{
    int64_t x9_1;
    if (arg8 != 0)
    {
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&arg8[1]);
            i = __stlxr((x9_1 - 1), &arg8[1]);
        } while (i != 0);
    }
    if (((arg8 == 0 || (arg8 != 0 && x9_1 != 0)) && (arg6 & 1) != 0))
    {
    label_c4ec:
        operator delete(arg7);
    }
    if ((arg8 != 0 && x9_1 == 0))
    {
        *(*arg8 + 0x10)(arg8);
        std::__ndk1::__shared_weak_count::__release_weak();
        if ((arg6 & 1) != 0)
        {
            goto label_c4ec;
        }
    }
    int64_t x8_6;
    int32_t i_1;
    do
    {
        x8_6 = __ldaxr(arg3);
        i_1 = __stlxr((x8_6 - 1), arg3);
    } while (i_1 != 0);
    if (x8_6 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_8;
    int16_t x1;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_8, x1);
}

int64_t sub_c494(int64_t arg1, void* arg2 @ x28, char arg3, void* arg4)
{
    int64_t x21;
    arg_68 = x21;
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    operator delete[](arg2);
    std::__ndk1::mutex::unlock();
    int64_t* x0_4;
    int16_t x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_4, x1);
}

int64_t sub_c4b4(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5)
{
    LogCapture::~LogCapture();
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg3);
        i = __stlxr((x8_1 - 1), arg3);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_5;
    int16_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_c4bc(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || ((arg6 & 1) != 0 && (arg8 & 1) != 0)))
    {
        operator delete(arg9);
    }
    int64_t x8_2;
    int32_t i;
    do
    {
        x8_2 = __ldaxr(arg3);
        i = __stlxr((x8_2 - 1), arg3);
    } while (i != 0);
    if (x8_2 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_7;
    int16_t x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_c4dc(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg3);
        i = __stlxr((x8_1 - 1), arg3);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_6;
    int16_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_c500(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || ((arg6 & 1) != 0 && (arg8 & 1) != 0)))
    {
        operator delete(arg9);
    }
    int64_t x8_2;
    int32_t i;
    do
    {
        x8_2 = __ldaxr(arg3);
        i = __stlxr((x8_2 - 1), arg3);
    } while (i != 0);
    if (x8_2 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_7;
    int16_t x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_c520(int64_t arg1)
{
    int64_t x21;
    arg_68 = x21;
    std::__ndk1::mutex::unlock();
    int64_t* x0_2;
    int16_t x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_c530(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg3);
        i = __stlxr((x8_1 - 1), arg3);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_6;
    int16_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_c564(int64_t arg1, int64_t* arg2 @ x21, int64_t arg3 @ x22, int64_t arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg3);
        i = __stlxr((x8_1 - 1), arg3);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg2 + 0x10)(arg2);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg5);
    std::__ndk1::mutex::unlock();
    int64_t* x0_6;
    int16_t x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_c5c8(int64_t arg1, int64_t arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
    }
    operator delete[](arg3);
    std::__ndk1::mutex::unlock();
    int64_t* x0_5;
    int16_t x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_c5e8(int64_t arg1, int64_t arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    operator delete[](arg3);
    std::__ndk1::mutex::unlock();
    int64_t* x0_4;
    int16_t x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_4, x1);
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int16_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        if (*(*x0_3 + 0x30)(x0_3, x23_1, x22_1, x3_1, arg2) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

uint64_t rgbd::RGBDOrbbec::openDevice(void* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2, int16_t* arg3)
{
    int64_t* x27;
    int64_t* var_58 = x27;
    size_t x26;
    size_t var_50 = x26;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_15 = operator new(0x30);
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_19 = s_15;
    *(s_15 + 0x20) = 0;
    __builtin_memset(s_15, 0, 0x1d);
    *(s_15 + 0x28) = 1;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_16 = operator new(0x30);
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_20 = s_16;
    *(s_16 + 0x28) = 1;
    *(s_16 + 0x20) = 0;
    __builtin_memset(s_16, 0, 0x1d);
    void* var_2c8 = arg1;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_12 = arg2;
    int32_t x0_3 = sub_dda8(&var_2c8, *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x1d0), arg2) + 0x28), s_19, 3, *arg3);
    char s_2;
    void* var_3e0;
    char var_3d8;
    void* var_3c8;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_22;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_23;
    int64_t* var_3a8;
    int64_t s_11;
    void* var_268;
    size_t var_1b8;
    int32_t x0_7;
    int32_t x21_4;
    if ((x0_3 & 1) != 0)
    {
        s_12 = arg2;
        x0_7 = sub_dda8(&var_2c8, *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x1d0), arg2) + 0x28), s_20, 1, *arg3);
        if ((x0_7 & 1) != 0)
        {
            uint64_t var_438_1 = x25;
            int32_t var_304 = 0;
            int32_t var_308 = 4;
            s_12 = arg2;
            if (oniDeviceSetProperty(*(*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x1d0), arg2) + 0x28) + 8), 0x1080ffbe, &var_304, var_308) != 0)
            {
                goto label_cd00;
            }
            if ((*data_36118 & 1) == 0)
            {
                x26 = &*(data_36118 + 1);
            }
            else
            {
                x26 = *(data_36122 + 6);
            }
            int32_t var_328 = data_36110;
            int64_t s_8;
            __builtin_memset(&s_8, 0, 0x18);
            size_t x0_13 = strlen(x26);
            if (x0_13 < -0x10)
            {
                goto label_d8f8;
            }
            int64_t* var_310_1;
            if (x0_13 >= 0x17)
            {
                uint64_t x28_1 = ((x0_13 + 0x10) & 0xfffffffffffffff0);
                int64_t* x0_38 = operator new(x28_1);
                x27 = x0_38;
                size_t var_318_1 = x0_13;
                var_310_1 = x0_38;
                s_8 = (x28_1 | 1);
            }
            else
            {
                x27 = &*s_8[1];
                s_8 = (x0_13 << 1);
            }
            if ((x0_13 >= 0x17 || (x0_13 < 0x17 && x0_13 != 0)))
            {
                memcpy(x27, x26, x0_13);
            }
            *(x27 + x0_13) = 0;
            int32_t x25_2;
            if ((g3::logLevel(&var_328) & 1) == 0)
            {
                x25_2 = 0;
                if ((s_8 & 1) != 0)
                {
                label_cc50:
                    operator delete(var_310_1);
                    if ((x25_2 & 1) == 0)
                    {
                        goto label_cd00;
                    }
                    goto label_ccdc;
                }
            }
            else
            {
                int64_t s_7;
                __builtin_memset(&s_7, 0, 0x18);
                x25 = *rgbd::OBCTAG;
                size_t x0_43 = strlen(x25);
                if (x0_43 < -0x10)
                {
                    goto label_d918;
                }
                int64_t* var_330_1;
                if (x0_43 >= 0x17)
                {
                    uint64_t x28_2 = ((x0_43 + 0x10) & 0xfffffffffffffff0);
                    int64_t* x0_46 = operator new(x28_2);
                    x27 = x0_46;
                    size_t var_338_1 = x0_43;
                    var_330_1 = x0_46;
                    s_7 = (x28_2 | 1);
                }
                else
                {
                    x27 = (&s_7 | 1);
                    s_7 = (x0_43 << 1);
                }
                if ((x0_43 >= 0x17 || (x0_43 < 0x17 && x0_43 != 0)))
                {
                    memcpy(x27, x25, x0_43);
                }
                *(x27 + x0_43) = 0;
                x25_2 = g3::logTag(&s_7);
                if ((s_7 & 1) != 0)
                {
                    operator delete(var_330_1);
                    if ((s_8 & 1) != 0)
                    {
                        goto label_cc50;
                    }
                }
                else if ((s_8 & 1) != 0)
                {
                    goto label_cc50;
                }
            }
            if ((x25_2 & 1) == 0)
            {
                goto label_cd00;
            }
        label_ccdc:
            LogCapture::LogCapture(&s_12, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b8, "LDP close success", 0x11);
            LogCapture::~LogCapture();
        label_cd00:
            var_308 = 0x78;
            s_12 = arg2;
            int128_t var_240;
            int32_t x0_55;
            float128 v0_1;
            int128_t v1_1;
            x0_55 = oniDeviceGetProperty(*(*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x1d0), arg2) + 0x28) + 8), 0xe, &var_240, &var_308);
            if (x0_55 == 0)
            {
                int64_t s_4;
                __builtin_memset(&s_4, 0, 0x18);
                uint32_t x26_2 = *arg2;
                uint64_t var_388_1;
                void* var_380_1;
                if ((x26_2 & 1) != 0)
                {
                    x25 = arg2[1];
                    if (x25 < -0x10)
                    {
                        goto label_d920;
                    }
                    int64_t x1_13 = arg2[2];
                    void* x27_2;
                    if (x25 >= 0x17)
                    {
                        uint64_t x28_3 = ((x25 + 0x10) & 0xfffffffffffffff0);
                        void* x0_79 = operator new(x28_3);
                        x27_2 = x0_79;
                        var_388_1 = x25;
                        var_380_1 = x0_79;
                        s_4 = (x28_3 | 1);
                    }
                    else
                    {
                        x27_2 = (&s_4 | 1);
                        s_4 = (x25 << 1);
                    }
                    if ((x25 >= 0x17 || (x25 < 0x17 && x25 != 0)))
                    {
                        v0_1 = memcpy(x27_2, x1_13, x25);
                    }
                    *(x27_2 + x25) = 0;
                    goto label_d004;
                }
                var_380_1 = arg2[2];
                s_4 = *arg2;
            label_d004:
                uint32_t x8_40 = *arg3;
                v0_1 = var_240;
                int64_t var_2b0_1 = 0x1403a83126f;
                int32_t x9_5;
                if (x8_40 == 0x60e)
                {
                    x9_5 = 0xc8;
                }
                else
                {
                    x9_5 = 0xf0;
                }
                float128 v0_2 = vextq_f16(v0_1, v0_1, false);
                int32_t x8_41;
                if (x8_40 != 0x60e)
                {
                    x8_41 = 3;
                }
                else
                {
                    x8_41 = 2;
                }
                int128_t var_2a4_1 = v0_2;
                int32_t var_294_1 = x8_41;
                uint32_t x8_42 = s_4;
                int32_t var_1e0;
                int32_t var_280_1 = var_1e0;
                __builtin_memset(&s_11, 0, 0x18);
                uint64_t var_270_1;
                if ((x8_42 & 1) != 0)
                {
                    if (var_388_1 < -0x10)
                    {
                        goto label_d928;
                    }
                    void* x28_4;
                    if (var_388_1 >= 0x17)
                    {
                        uint64_t x27_3 = ((var_388_1 + 0x10) & 0xfffffffffffffff0);
                        void* x0_82 = operator new(x27_3);
                        x28_4 = x0_82;
                        var_270_1 = var_388_1;
                        var_268 = x0_82;
                        s_11 = (x27_3 | 1);
                    }
                    else
                    {
                        x28_4 = &*s_11[1];
                        s_11 = (var_388_1 << 1);
                    }
                    if ((var_388_1 >= 0x17 || (var_388_1 < 0x17 && var_388_1 != 0)))
                    {
                        memcpy(x28_4, var_380_1, var_388_1);
                    }
                    *(x28_4 + var_388_1) = 0;
                    v0_2 = operator delete(var_380_1);
                    x26_2 = *arg2;
                    goto label_d0f8;
                }
                var_268 = var_380_1;
                s_11 = s_4;
            label_d0f8:
                __builtin_memset(&s_12, 0, 0x18);
                void* var_1b0_1;
                if ((x26_2 & 1) != 0)
                {
                    size_t x26_6 = arg2[1];
                    if (x26_6 < -0x10)
                    {
                        goto label_d930;
                    }
                    int64_t x1_18 = arg2[2];
                    void* x28_5;
                    if (x26_6 >= 0x17)
                    {
                        uint64_t x27_4 = ((x26_6 + 0x10) & 0xfffffffffffffff0);
                        void* x0_86 = operator new(x27_4);
                        x28_5 = x0_86;
                        var_1b0_1 = x0_86;
                        s_12 = (x27_4 | 1);
                        var_1b8 = x26_6;
                    }
                    else
                    {
                        x28_5 = (&s_12 | 1);
                        s_12 = (x26_6 << 1);
                    }
                    if ((x26_6 >= 0x17 || (x26_6 < 0x17 && x26_6 != 0)))
                    {
                        v0_2 = memcpy(x28_5, x1_18, x26_6);
                    }
                    *(x28_5 + x26_6) = 0;
                    goto label_d1a4;
                }
                var_1b0_1 = arg2[2];
                s_12 = *arg2;
            label_d1a4:
                int128_t var_1f0;
                int128_t var_17c_1 = var_1f0;
                uint32_t x9_6 = s_11;
                int128_t var_188_1 = var_2a4_1;
                int72_t var_198_1 = x9_5;
                int128_t s_17;
                int128_t s_13 = s_17;
                int64_t s_14;
                __builtin_memset(&s_14, 0, 0x18);
                void* var_158_1;
                if ((x9_6 & 1) != 0)
                {
                    if (var_270_1 < -0x10)
                    {
                        goto label_d934;
                    }
                    void* x27_5;
                    if (var_270_1 >= 0x17)
                    {
                        uint64_t x28_6 = ((var_270_1 + 0x10) & 0xfffffffffffffff0);
                        void* x0_89 = operator new(x28_6);
                        x27_5 = x0_89;
                        var_158_1 = x0_89;
                        s_14 = (x28_6 | 1);
                        uint64_t var_160_1 = var_270_1;
                    }
                    else
                    {
                        x27_5 = &*s_14[1];
                        s_14 = (var_270_1 << 1);
                    }
                    if ((var_270_1 >= 0x17 || (var_270_1 < 0x17 && var_270_1 != 0)))
                    {
                        memcpy(x27_5, var_268, var_270_1);
                    }
                    *(x27_5 + var_270_1) = 0;
                    goto label_d25c;
                }
                var_158_1 = var_268;
                s_14 = s_11;
            label_d25c:
                std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> >((arg1 + 0x48), &s_12);
                if ((s_14 & 1) != 0)
                {
                    operator delete(var_158_1);
                }
                if ((s_12 & 1) != 0)
                {
                    operator delete(var_1b0_1);
                }
                int128_t s_3;
                __builtin_memset(&s_3, 0, 0x38);
                __builtin_memset(&s_2, 0, 0x18);
                if (&s_2 == arg2)
                {
                    s_22 = s_20;
                }
                else
                {
                    arg2[1];
                    void* x1_21;
                    if ((*arg2 & 1) != 0)
                    {
                        x1_21 = arg2[2];
                    }
                    else
                    {
                        x1_21 = (arg2 + 1);
                    }
                    std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&s_2, x1_21);
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_25 = s_22;
                    s_22 = s_20;
                    if (s_25 != 0)
                    {
                        openni::VideoStream::~VideoStream();
                        operator delete(s_25);
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_24 = s_23;
                s_23 = s_19;
                if (s_24 != 0)
                {
                    openni::VideoStream::~VideoStream();
                    operator delete(s_24);
                }
                s_12 = arg2;
                void* x0_100;
                int128_t s_21;
                int128_t v2_2;
                x0_100 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x1d0), arg2);
                int64_t x8_58 = *(x0_100 + 0x28);
                int64_t* x9_8 = *(x0_100 + 0x30);
                *(x0_100 + 0x28) = 0;
                *(x0_100 + 0x30) = 0;
                int64_t* x19_1 = var_3a8;
                int128_t var_3b0;
                var_3b0 = x8_58;
                var_3a8 = x9_8;
                if (x19_1 != 0)
                {
                    int64_t x9_9;
                    int32_t i;
                    do
                    {
                        x9_9 = __ldaxr(&x19_1[1]);
                        i = __stlxr((x9_9 - 1), &x19_1[1]);
                    } while (i != 0);
                    if (x9_9 == 0)
                    {
                        *(*x19_1 + 0x10)(x19_1);
                        s_21 = std::__ndk1::__shared_weak_count::__release_weak();
                    }
                }
                uint32_t x8_62 = *arg3;
                __builtin_memset(&s_12, 0, 0x18);
                int64_t var_3a0;
                *var_3a0[4] = x8_62;
                void* var_1b0_2;
                if ((*arg2 & 1) != 0)
                {
                    size_t x19_2 = arg2[1];
                    if (x19_2 < -0x10)
                    {
                        goto label_d93c;
                    }
                    int64_t x20_1 = arg2[2];
                    void* x24_5;
                    if (x19_2 >= 0x17)
                    {
                        uint64_t x25_5 = ((x19_2 + 0x10) & 0xfffffffffffffff0);
                        void* x0_104 = operator new(x25_5);
                        x24_5 = x0_104;
                        var_1b0_2 = x0_104;
                        s_12 = (x25_5 | 1);
                        var_1b8 = x19_2;
                    }
                    else
                    {
                        x24_5 = (&s_12 | 1);
                        s_12 = (x19_2 << 1);
                    }
                    if ((x19_2 >= 0x17 || (x19_2 < 0x17 && x19_2 != 0)))
                    {
                        s_21 = memcpy(x24_5, x20_1, x19_2);
                    }
                    *(x24_5 + x19_2) = 0;
                    goto label_d408;
                }
                var_1b0_2 = arg2[2];
                s_12 = *arg2;
            label_d408:
                s_21 = s_2;
                __builtin_memset(&s_2, 0, 0x50);
                s_13 = s_21;
                var_198_1 = var_3e0;
                *var_188_1[8] = var_3c8;
                *var_198_1[8] = var_3d8;
                *var_17c_1[4] = s_22;
                int64_t var_158_2 = var_3a0;
                std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> >((arg1 + 0x88), &s_12);
                if (var_3a8 != 0)
                {
                    int64_t x9_12;
                    int32_t i_1;
                    do
                    {
                        x9_12 = __ldaxr(&var_3a8[1]);
                        i_1 = __stlxr((x9_12 - 1), &var_3a8[1]);
                    } while (i_1 != 0);
                    if (x9_12 == 0)
                    {
                        *(*var_3a8 + 0x10)(var_3a8);
                        std::__ndk1::__shared_weak_count::__release_weak();
                    }
                }
                void* x19_4 = *s_23[0xc];
                *var_17c_1[0xc] = 0;
                if (x19_4 != 0)
                {
                    openni::VideoStream::~VideoStream();
                    operator delete(x19_4);
                }
                void* x19_5 = *var_17c_1[4];
                *var_17c_1[4] = 0;
                if (x19_5 != 0)
                {
                    openni::VideoStream::~VideoStream();
                    operator delete(x19_5);
                }
                if ((*var_198_1[8] & 1) != 0)
                {
                    operator delete(*var_188_1[8]);
                }
                if ((((*var_198_1[8] & 1) != 0 && (s_13 & 1) != 0) || ((*var_198_1[8] & 1) == 0 && (s_13 & 1) != 0)))
                {
                    operator delete(var_198_1);
                    if ((s_12 & 1) != 0)
                    {
                        goto label_d4fc;
                    }
                }
                if (((((*var_198_1[8] & 1) != 0 && (s_13 & 1) == 0) || ((*var_198_1[8] & 1) == 0 && (s_13 & 1) == 0)) && (s_12 & 1) != 0))
                {
                label_d4fc:
                    operator delete(var_1b0_2);
                }
                if ((*data_36118 & 1) == 0)
                {
                    x25 = &*(data_36118 + 1);
                }
                else
                {
                    x25 = *(data_36122 + 6);
                }
                int32_t var_410 = data_36110;
                int64_t s_1;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_115 = strlen(x25);
                if (x0_115 < -0x10)
                {
                    goto label_d908;
                }
                void* var_3f8_1;
                void* x26_8;
                if (x0_115 >= 0x17)
                {
                    uint64_t x27_6 = ((x0_115 + 0x10) & 0xfffffffffffffff0);
                    void* x0_119 = operator new(x27_6);
                    x26_8 = x0_119;
                    size_t var_400_1 = x0_115;
                    var_3f8_1 = x0_119;
                    s_1 = (x27_6 | 1);
                }
                else
                {
                    x26_8 = &*s_1[1];
                    s_1 = (x0_115 << 1);
                }
                if ((x0_115 >= 0x17 || (x0_115 < 0x17 && x0_115 != 0)))
                {
                    memcpy(x26_8, x25, x0_115);
                }
                *(x26_8 + x0_115) = 0;
                int32_t x0_122;
                int128_t v0_3;
                x0_122 = g3::logLevel(&var_410);
                int32_t x19_8;
                if ((x0_122 & 1) == 0)
                {
                    x25 = var_438_1;
                    x19_8 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_d62c:
                        operator delete(var_3f8_1);
                        if ((x19_8 & 1) == 0)
                        {
                            goto label_d700;
                        }
                        goto label_d6bc;
                    }
                }
                else
                {
                    int64_t s;
                    __builtin_memset(&s, 0, 0x18);
                    uint64_t x19_7 = *rgbd::OBCTAG;
                    size_t x0_124 = strlen(x19_7);
                    if (x0_124 < -0x10)
                    {
                        goto label_d944;
                    }
                    void* var_418_1;
                    void* x24_7;
                    if (x0_124 >= 0x17)
                    {
                        uint64_t x25_6 = ((x0_124 + 0x10) & 0xfffffffffffffff0);
                        void* x0_127 = operator new(x25_6);
                        x24_7 = x0_127;
                        size_t var_420_1 = x0_124;
                        var_418_1 = x0_127;
                        s = (x25_6 | 1);
                    }
                    else
                    {
                        x24_7 = (&s | 1);
                        s = (x0_124 << 1);
                    }
                    if ((x0_124 >= 0x17 || (x0_124 < 0x17 && x0_124 != 0)))
                    {
                        memcpy(x24_7, x19_7, x0_124);
                    }
                    *(x24_7 + x0_124) = 0;
                    int32_t x0_130;
                    x0_130 = g3::logTag(&s);
                    x25 = var_438_1;
                    x19_8 = x0_130;
                    if ((s & 1) != 0)
                    {
                        operator delete(var_418_1);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_d62c;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_d62c;
                    }
                }
                if ((x19_8 & 1) != 0)
                {
                label_d6bc:
                    LogCapture::LogCapture(&s_12, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_133 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b8, "Open device success,serial_num:", 0x1f);
                    uint64_t x8_87 = *arg2;
                    int32_t temp1_1 = (x8_87 & 1);
                    void* x1_28;
                    if (temp1_1 != 0)
                    {
                        x1_28 = arg2[2];
                    }
                    else
                    {
                        x1_28 = (arg2 + 1);
                    }
                    uint64_t x2_25;
                    if (temp1_1 == 0)
                    {
                        x2_25 = (x8_87 >> 1);
                    }
                    else
                    {
                        x2_25 = arg2[1];
                    }
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_133, x1_28, x2_25);
                    LogCapture::~LogCapture();
                    goto label_d700;
                }
            label_d700:
                *(arg1 + 0x130) = 1;
                bool cond:5_1 = *arg3 == 0x60e;
                var_1b8 = 0;
                void* var_1b0_3 = arg1;
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_18;
                if (cond:5_1)
                {
                    s_18 = rgbd::RGBDOrbbec::PollingDabai;
                }
                else
                {
                    s_18 = rgbd::RGBDOrbbec::PollingMini;
                }
                s_12 = s_18;
                __builtin_memset(&s_13, 0, 0x18);
                if ((*arg2 & 1) != 0)
                {
                    size_t x19_9 = arg2[1];
                    if (x19_9 < -0x10)
                    {
                        goto label_d948;
                    }
                    int64_t x20_4 = arg2[2];
                    void* x21_6;
                    if (x19_9 >= 0x17)
                    {
                        uint64_t x22_4 = ((x19_9 + 0x10) & 0xfffffffffffffff0);
                        void* x0_136 = operator new(x22_4);
                        x21_6 = x0_136;
                        var_198_1 = x0_136;
                        s_13 = (x22_4 | 1);
                        *s_13[8] = x19_9;
                    }
                    else
                    {
                        x21_6 = &*s_13[1];
                        s_13 = (x19_9 << 1);
                    }
                    if ((x19_9 >= 0x17 || (x19_9 < 0x17 && x19_9 != 0)))
                    {
                        memcpy(x21_6, x20_4, x19_9);
                    }
                    *(x21_6 + x19_9) = 0;
                    goto label_d7d8;
                }
                var_198_1 = arg2[2];
                s_13 = *arg2;
            label_d7d8:
                void* x0_138 = operator new(8);
                sub_1b104(x0_138, &s_12);
                if ((s_13 & 1) != 0)
                {
                    operator delete(var_198_1);
                }
                std::__ndk1::thread::detach();
                std::__ndk1::thread::~thread();
                operator delete(x0_138);
                if (var_3a8 != 0)
                {
                    int64_t x9_15;
                    int32_t i_2;
                    do
                    {
                        x9_15 = __ldaxr(&var_3a8[1]);
                        i_2 = __stlxr((x9_15 - 1), &var_3a8[1]);
                    } while (i_2 != 0);
                    if (x9_15 == 0)
                    {
                        *(*var_3a8 + 0x10)(var_3a8);
                        std::__ndk1::__shared_weak_count::__release_weak();
                    }
                }
                int64_t var_3b8 = 0;
                if (s_23 != 0)
                {
                    openni::VideoStream::~VideoStream();
                    operator delete(s_23);
                }
                int64_t var_3c0 = 0;
                if (s_22 != 0)
                {
                    openni::VideoStream::~VideoStream();
                    operator delete(s_22);
                }
                if ((var_3d8 & 1) != 0)
                {
                    operator delete(var_3c8);
                }
                if ((((var_3d8 & 1) != 0 && (s_2 & 1) != 0) || ((var_3d8 & 1) == 0 && (s_2 & 1) != 0)))
                {
                    operator delete(var_3e0);
                    if ((s_11 & 1) != 0)
                    {
                        goto label_d89c;
                    }
                }
                if (((((var_3d8 & 1) != 0 && (s_2 & 1) == 0) || ((var_3d8 & 1) == 0 && (s_2 & 1) == 0)) && (s_11 & 1) != 0))
                {
                label_d89c:
                    operator delete(var_268);
                }
                s_20 = nullptr;
                s_19 = nullptr;
                x21_4 = 1;
            }
            else
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((arg1 + 8), "Couldn't get cam param");
                char* x24_3;
                if ((*data_36198 & 1) == 0)
                {
                    x24_3 = &*(data_36198 + 1);
                }
                else
                {
                    x24_3 = *(data_361a2 + 6);
                }
                int32_t var_360 = data_36190;
                int64_t s_6;
                __builtin_memset(&s_6, 0, 0x18);
                size_t x0_58 = strlen(x24_3);
                if (x0_58 < -0x10)
                {
                    goto label_d8f0;
                }
                void* var_348_1;
                if (x0_58 >= 0x17)
                {
                    uint64_t x26_3 = ((x0_58 + 0x10) & 0xfffffffffffffff0);
                    void* x0_60 = operator new(x26_3);
                    x25 = x0_60;
                    size_t var_350_1 = x0_58;
                    var_348_1 = x0_60;
                    s_6 = (x26_3 | 1);
                }
                else
                {
                    x25 = &*s_6[1];
                    s_6 = (x0_58 << 1);
                }
                if ((x0_58 >= 0x17 || (x0_58 < 0x17 && x0_58 != 0)))
                {
                    memcpy(x25, x24_3, x0_58);
                }
                *(x25 + x0_58) = 0;
                int32_t x23_5;
                if ((g3::logLevel(&var_360) & 1) == 0)
                {
                    x25 = var_438_1;
                    x23_5 = 0;
                    if ((s_6 & 1) != 0)
                    {
                    label_ce94:
                        operator delete(var_348_1);
                        if ((x23_5 & 1) == 0)
                        {
                            goto label_cfa4;
                        }
                        goto label_cf54;
                    }
                }
                else
                {
                    int64_t s_5;
                    __builtin_memset(&s_5, 0, 0x18);
                    uint64_t x23_4 = *rgbd::OBCTAG;
                    size_t x0_65 = strlen(x23_4);
                    if (x0_65 < -0x10)
                    {
                        goto label_d910;
                    }
                    void* var_368_1;
                    void* x25_3;
                    if (x0_65 >= 0x17)
                    {
                        uint64_t x26_4 = ((x0_65 + 0x10) & 0xfffffffffffffff0);
                        void* x0_68 = operator new(x26_4);
                        x25_3 = x0_68;
                        size_t var_370_1 = x0_65;
                        var_368_1 = x0_68;
                        s_5 = (x26_4 | 1);
                    }
                    else
                    {
                        x25_3 = (&s_5 | 1);
                        s_5 = (x0_65 << 1);
                    }
                    if ((x0_65 >= 0x17 || (x0_65 < 0x17 && x0_65 != 0)))
                    {
                        memcpy(x25_3, x23_4, x0_65);
                    }
                    *(x25_3 + x0_65) = 0;
                    x25 = var_438_1;
                    x23_5 = g3::logTag(&s_5);
                    if ((s_5 & 1) != 0)
                    {
                        operator delete(var_368_1);
                        if ((s_6 & 1) != 0)
                        {
                            goto label_ce94;
                        }
                    }
                    else if ((s_6 & 1) != 0)
                    {
                        goto label_ce94;
                    }
                }
                if ((x23_5 & 1) != 0)
                {
                label_cf54:
                    LogCapture::LogCapture(&s_12, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                    void* x21_5;
                    if ((*(arg1 + 8) & 1) != 0)
                    {
                        x21_5 = *(arg1 + 0x18);
                    }
                    else
                    {
                        x21_5 = (arg1 + 9);
                    }
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b8, x21_5, strlen(x21_5));
                    LogCapture::~LogCapture();
                    goto label_cfa4;
                }
            label_cfa4:
                x21_4 = 0;
                if (s_20 != 0)
                {
                    goto label_cb50;
                }
            }
        }
    }
    if (((x0_3 & 1) == 0 || ((x0_3 & 1) != 0 && (x0_7 & 1) == 0)))
    {
        char* x22_1;
        if ((*data_36198 & 1) == 0)
        {
            x22_1 = &*(data_36198 + 1);
        }
        else
        {
            x22_1 = *(data_361a2 + 6);
        }
        int32_t var_2e8 = data_36190;
        int64_t s_10;
        __builtin_memset(&s_10, 0, 0x18);
        size_t x0_15 = strlen(x22_1);
        int64_t s_9;
        void* var_2d0_1;
        int32_t x0_20;
        size_t x0_22;
        uint64_t x21_2;
        if (x0_15 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            void* x23_1;
            if (x0_15 >= 0x17)
            {
                uint64_t x24_1 = ((x0_15 + 0x10) & 0xfffffffffffffff0);
                void* x0_17 = operator new(x24_1);
                x23_1 = x0_17;
                size_t var_2d8_1 = x0_15;
                var_2d0_1 = x0_17;
                s_10 = (x24_1 | 1);
            }
            else
            {
                x23_1 = &*s_10[1];
                s_10 = (x0_15 << 1);
            }
            if ((x0_15 >= 0x17 || (x0_15 < 0x17 && x0_15 != 0)))
            {
                memcpy(x23_1, x22_1, x0_15);
            }
            *(x23_1 + x0_15) = 0;
            x0_20 = g3::logLevel(&var_2e8);
            if ((x0_20 & 1) != 0)
            {
                __builtin_memset(&s_9, 0, 0x18);
                x21_2 = *rgbd::OBCTAG;
                x0_22 = strlen(x21_2);
            }
        }
        if ((x0_15 < -0x10 || ((x0_15 >= -0x10 && (x0_20 & 1) != 0) && x0_22 < -0x10)))
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d8f0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d8f8:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d908:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d910:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d918:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d920:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d928:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d930:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d934:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d93c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d944:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_d948:
            int64_t x0_156 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if (var_3a8 != 0)
            {
                int64_t x9_16;
                int32_t i_3;
                do
                {
                    x9_16 = __ldaxr(&var_3a8[1]);
                    i_3 = __stlxr((x9_16 - 1), &var_3a8[1]);
                } while (i_3 != 0);
                if (x9_16 == 0)
                {
                    *(*var_3a8 + 0x10)(var_3a8);
                    std::__ndk1::__shared_weak_count::__release_weak();
                }
            }
            int64_t var_3b8_1 = 0;
            if (s_23 != 0)
            {
                openni::VideoStream::~VideoStream();
                operator delete(s_23);
            }
            int64_t var_3c0_1 = 0;
            if (s_22 != 0)
            {
                openni::VideoStream::~VideoStream();
                operator delete(s_22);
            }
            if (((s_22 != 0 && (var_3d8 & 1) != 0) || (s_22 == 0 && (var_3d8 & 1) != 0)))
            {
                operator delete(var_3c8);
                if ((s_2 & 1) != 0)
                {
                    goto label_dc54;
                }
            }
            if ((((s_22 != 0 && (var_3d8 & 1) == 0) || (s_22 == 0 && (var_3d8 & 1) == 0)) && (s_2 & 1) != 0))
            {
            label_dc54:
                operator delete(var_3e0);
            }
            if ((s_11 & 1) != 0)
            {
                operator delete(var_268);
            }
            _Unwind_Resume(x0_156);
            openni::VideoStream::~VideoStream();
            operator delete(nullptr);
            uint64_t x0_170;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1_31;
            x0_170 = _Unwind_Resume(x0_156);
            /* tailcall */
            return rgbd::RGBDOrbbec::getMemSize(x0_170, x1_31);
        }
        if (x0_15 >= -0x10)
        {
            int32_t x21_3;
            if (((x0_20 & 1) != 0 && x0_22 >= -0x10))
            {
                void* var_2f0_1;
                void* x23_2;
                if (x0_22 >= 0x17)
                {
                    uint64_t x24_2 = ((x0_22 + 0x10) & 0xfffffffffffffff0);
                    void* x0_25 = operator new(x24_2);
                    x23_2 = x0_25;
                    size_t var_2f8_1 = x0_22;
                    var_2f0_1 = x0_25;
                    s_9 = (x24_2 | 1);
                }
                else
                {
                    x23_2 = (&s_9 | 1);
                    s_9 = (x0_22 << 1);
                }
                if ((x0_22 >= 0x17 || (x0_22 < 0x17 && x0_22 != 0)))
                {
                    memcpy(x23_2, x21_2, x0_22);
                }
                *(x23_2 + x0_22) = 0;
                x21_3 = g3::logTag(&s_9);
                if ((s_9 & 1) != 0)
                {
                    operator delete(var_2f0_1);
                    if ((s_10 & 1) != 0)
                    {
                        goto label_ca9c;
                    }
                }
                else if ((s_10 & 1) != 0)
                {
                    goto label_ca9c;
                }
            }
            if ((x0_20 & 1) == 0)
            {
                x21_3 = 0;
                if ((s_10 & 1) != 0)
                {
                label_ca9c:
                    operator delete(var_2d0_1);
                    if ((x21_3 & 1) == 0)
                    {
                        goto label_cb48;
                    }
                    goto label_cb28;
                }
            }
            if (((x0_20 & 1) == 0 || ((x0_20 & 1) != 0 && x0_22 >= -0x10)))
            {
                if ((x21_3 & 1) == 0)
                {
                    goto label_cb48;
                }
            label_cb28:
                LogCapture::LogCapture(&s_12, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b8, "Couldn't start the stream", 0x19);
                LogCapture::~LogCapture();
            label_cb48:
                x21_4 = 0;
            label_cb50:
                openni::VideoStream::~VideoStream();
                operator delete(s_20);
            }
        }
    }
    if (s_19 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(s_19);
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x21_4;
}

int64_t sub_d95c(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && arg3 != 0) || ((arg4 & 1) != 0 && arg3 != 0)))
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
        if (arg2 == 0)
        {
        label_dcf4:
            _Unwind_Resume(arg1);
        }
        goto label_dcfc;
    }
    if ((((arg4 & 1) == 0 && arg3 == 0) || ((arg4 & 1) != 0 && arg3 == 0)))
    {
        if (arg2 != 0)
        {
        label_dcfc:
            openni::VideoStream::~VideoStream();
            operator delete(arg2);
            uint64_t x0_8;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
            x0_8 = _Unwind_Resume(arg1);
            /* tailcall */
            return rgbd::RGBDOrbbec::getMemSize(x0_8, x1);
        }
        goto label_dcf4;
    }
}

int64_t sub_d998(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20)
{
    if (arg3 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
    }
    if (((arg3 != 0 && arg2 == 0) || (arg3 == 0 && arg2 == 0)))
    {
        _Unwind_Resume(arg1);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg2);
    uint64_t x0_6;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_6, x1);
}

int64_t sub_d9a4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, void* arg10, void* arg11, int64_t* arg12, char arg13, void* arg14)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    if (arg12 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&arg12[1]);
            i = __stlxr((x9_1 - 1), &arg12[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*arg12 + 0x10)(arg12);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x22_1 = arg11;
    arg11 = nullptr;
    if (x22_1 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x22_1);
    }
    void* x22_2 = arg10;
    arg10 = nullptr;
    if (x22_2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x22_2);
    }
    if (((x22_2 != 0 && (arg8 & 1) != 0) || (x22_2 == 0 && (arg8 & 1) != 0)))
    {
        operator delete(arg9);
        if ((arg6 & 1) != 0)
        {
            goto label_dc54;
        }
    }
    if ((((x22_2 != 0 && (arg8 & 1) == 0) || (x22_2 == 0 && (arg8 & 1) == 0)) && (arg6 & 1) != 0))
    {
    label_dc54:
        operator delete(arg7);
    }
    if ((arg13 & 1) != 0)
    {
        operator delete(arg14);
    }
    _Unwind_Resume(arg1);
    openni::VideoStream::~VideoStream();
    operator delete(nullptr);
    uint64_t x0_15;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_15 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_15, x1);
}

int64_t sub_d9c4(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20)
{
    LogCapture::~LogCapture();
    if (arg3 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
    }
    if (((arg3 == 0 && arg2 == 0) || (arg3 != 0 && arg2 == 0)))
    {
        _Unwind_Resume(arg1);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg2);
    uint64_t x0_6;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_6, x1);
}

int64_t sub_d9cc(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        if (arg3 != 0)
        {
            goto label_dce0;
        }
    }
    if (((((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)) && arg3 == 0) || ((arg4 & 1) == 0 && (arg6 & 1) != 0)) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        if (arg2 != 0)
        {
        label_dcfc:
            openni::VideoStream::~VideoStream();
            operator delete(arg2);
            uint64_t x0_8;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
            x0_8 = _Unwind_Resume(arg1);
            /* tailcall */
            return rgbd::RGBDOrbbec::getMemSize(x0_8, x1);
        }
        goto label_dcf4;
    }
    if (((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)) && arg3 != 0))
    {
    label_dce0:
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
        if (arg2 == 0)
        {
        label_dcf4:
            _Unwind_Resume(arg1);
        }
        goto label_dcfc;
    }
}

int64_t sub_da04(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        if (arg3 != 0)
        {
            goto label_dce0;
        }
    }
    if (((((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)) && arg3 == 0) || ((arg4 & 1) == 0 && (arg6 & 1) != 0)) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        if (arg2 != 0)
        {
        label_dcfc:
            openni::VideoStream::~VideoStream();
            operator delete(arg2);
            uint64_t x0_8;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
            x0_8 = _Unwind_Resume(arg1);
            /* tailcall */
            return rgbd::RGBDOrbbec::getMemSize(x0_8, x1);
        }
        goto label_dcf4;
    }
    if (((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)) && arg3 != 0))
    {
    label_dce0:
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
        if (arg2 == 0)
        {
        label_dcf4:
            _Unwind_Resume(arg1);
        }
        goto label_dcfc;
    }
}

int64_t sub_da38(int64_t arg1, void* arg2 @ x19, char arg3, void* arg4, char arg5, void* arg6, void* arg7, void* arg8, int64_t* arg9, char arg10, void* arg11, char arg12, void* arg13)
{
    operator delete(arg2);
    if ((arg12 & 1) != 0)
    {
        operator delete(arg13);
    }
    if (arg9 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&arg9[1]);
            i = __stlxr((x9_1 - 1), &arg9[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*arg9 + 0x10)(arg9);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x22_1 = arg8;
    arg8 = nullptr;
    if (x22_1 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x22_1);
    }
    void* x22_2 = arg7;
    arg7 = nullptr;
    if (x22_2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x22_2);
    }
    if (((x22_2 != 0 && (arg5 & 1) != 0) || (x22_2 == 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
        if ((arg3 & 1) != 0)
        {
            goto label_dc54;
        }
    }
    if ((((x22_2 != 0 && (arg5 & 1) == 0) || (x22_2 == 0 && (arg5 & 1) == 0)) && (arg3 & 1) != 0))
    {
    label_dc54:
        operator delete(arg4);
    }
    if ((arg10 & 1) != 0)
    {
        operator delete(arg11);
    }
    _Unwind_Resume(arg1);
    openni::VideoStream::~VideoStream();
    operator delete(nullptr);
    uint64_t x0_15;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_15 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_15, x1);
}

int64_t sub_da74(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, void* arg6, void* arg7, int64_t* arg8, char arg9, void* arg10, char arg11, void* arg12, char arg13, void* arg14, char arg15, void* arg16, void* arg17, void* arg18, int64_t* arg19)
{
    if (arg19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&arg19[1]);
            i = __stlxr((x9_1 - 1), &arg19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*arg19 + 0x10)(arg19);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x19 = arg18;
    arg18 = nullptr;
    if (x19 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x19);
    }
    void* x19_1 = arg17;
    arg17 = nullptr;
    if (x19_1 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x19_1);
    }
    if ((arg15 & 1) != 0)
    {
        operator delete(arg16);
    }
    if ((((arg15 & 1) != 0 && (arg13 & 1) != 0) || ((arg15 & 1) == 0 && (arg13 & 1) != 0)))
    {
        operator delete(arg14);
        if ((arg11 & 1) != 0)
        {
            goto label_db60;
        }
    }
    if (((((arg15 & 1) != 0 && (arg13 & 1) == 0) || ((arg15 & 1) == 0 && (arg13 & 1) == 0)) && (arg11 & 1) != 0))
    {
    label_db60:
        operator delete(arg12);
    }
    if (arg8 != 0)
    {
        int64_t x9_2;
        int32_t i_1;
        do
        {
            x9_2 = __ldaxr(&arg8[1]);
            i_1 = __stlxr((x9_2 - 1), &arg8[1]);
        } while (i_1 != 0);
        if (x9_2 == 0)
        {
            *(*arg8 + 0x10)(arg8);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x22_1 = arg7;
    arg7 = nullptr;
    if (x22_1 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x22_1);
    }
    void* x22_2 = arg6;
    arg6 = nullptr;
    if (x22_2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x22_2);
    }
    if (((x22_2 != 0 && (arg4 & 1) != 0) || (x22_2 == 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
        if ((arg2 & 1) != 0)
        {
            goto label_dc54;
        }
    }
    if ((((x22_2 != 0 && (arg4 & 1) == 0) || (x22_2 == 0 && (arg4 & 1) == 0)) && (arg2 & 1) != 0))
    {
    label_dc54:
        operator delete(arg3);
    }
    if ((arg9 & 1) != 0)
    {
        operator delete(arg10);
    }
    _Unwind_Resume(arg1);
    openni::VideoStream::~VideoStream();
    operator delete(nullptr);
    uint64_t x0_22;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_22 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_22, x1);
}

int64_t sub_db2c(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    if ((arg8 & 1) != 0)
    {
        operator delete(arg9);
    }
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && arg3 != 0) || ((arg4 & 1) != 0 && arg3 != 0)))
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
        if (arg2 == 0)
        {
        label_dcf4:
            _Unwind_Resume(arg1);
        }
        goto label_dcfc;
    }
    if ((((arg4 & 1) == 0 && arg3 == 0) || ((arg4 & 1) != 0 && arg3 == 0)))
    {
        if (arg2 != 0)
        {
        label_dcfc:
            openni::VideoStream::~VideoStream();
            operator delete(arg2);
            uint64_t x0_9;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
            x0_9 = _Unwind_Resume(arg1);
            /* tailcall */
            return rgbd::RGBDOrbbec::getMemSize(x0_9, x1);
        }
        goto label_dcf4;
    }
}

int64_t sub_db50(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, void* arg8, void* arg9, int64_t* arg10, char arg11, void* arg12)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if (arg10 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&arg10[1]);
            i = __stlxr((x9_1 - 1), &arg10[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*arg10 + 0x10)(arg10);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x22_1 = arg9;
    arg9 = nullptr;
    if (x22_1 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x22_1);
    }
    void* x22_2 = arg8;
    arg8 = nullptr;
    if (x22_2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x22_2);
    }
    if (((x22_2 != 0 && (arg6 & 1) != 0) || (x22_2 == 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        if ((arg4 & 1) != 0)
        {
            goto label_dc54;
        }
    }
    if ((((x22_2 != 0 && (arg6 & 1) == 0) || (x22_2 == 0 && (arg6 & 1) == 0)) && (arg4 & 1) != 0))
    {
    label_dc54:
        operator delete(arg5);
    }
    if ((arg11 & 1) != 0)
    {
        operator delete(arg12);
    }
    _Unwind_Resume(arg1);
    openni::VideoStream::~VideoStream();
    operator delete(nullptr);
    uint64_t x0_14;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_14 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_14, x1);
}

int64_t sub_db78(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, char arg4, void* arg5)
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && arg3 != 0) || ((arg4 & 1) != 0 && arg3 != 0)))
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
        if (arg2 == 0)
        {
        label_dcf4:
            _Unwind_Resume(arg1);
        }
        goto label_dcfc;
    }
    if ((((arg4 & 1) == 0 && arg3 == 0) || ((arg4 & 1) != 0 && arg3 == 0)))
    {
        if (arg2 != 0)
        {
        label_dcfc:
            openni::VideoStream::~VideoStream();
            operator delete(arg2);
            uint64_t x0_7;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
            x0_7 = _Unwind_Resume(arg1);
            /* tailcall */
            return rgbd::RGBDOrbbec::getMemSize(x0_7, x1);
        }
        goto label_dcf4;
    }
}

int64_t sub_db94(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, char arg4, void* arg5)
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && arg3 != 0) || ((arg4 & 1) != 0 && arg3 != 0)))
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
        if (arg2 == 0)
        {
        label_dcf4:
            _Unwind_Resume(arg1);
        }
        goto label_dcfc;
    }
    if ((((arg4 & 1) == 0 && arg3 == 0) || ((arg4 & 1) != 0 && arg3 == 0)))
    {
        if (arg2 != 0)
        {
        label_dcfc:
            openni::VideoStream::~VideoStream();
            operator delete(arg2);
            uint64_t x0_7;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
            x0_7 = _Unwind_Resume(arg1);
            /* tailcall */
            return rgbd::RGBDOrbbec::getMemSize(x0_7, x1);
        }
        goto label_dcf4;
    }
}

int64_t sub_dc80(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20)
{
    openni::VideoStream::~VideoStream();
    operator delete(arg3);
    if (arg2 == 0)
    {
        _Unwind_Resume(arg1);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg2);
    uint64_t x0_6;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_6, x1);
}

int64_t sub_dc84(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, char arg4, void* arg5, char arg6, void* arg7)
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg3);
    if (arg2 == 0)
    {
        _Unwind_Resume(arg1);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg2);
    uint64_t x0_8;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_8, x1);
}

int64_t sub_dcb8(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, char arg4, void* arg5)
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg3);
    if (arg2 == 0)
    {
        _Unwind_Resume(arg1);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg2);
    uint64_t x0_7;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::getMemSize(x0_7, x1);
}

uint64_t rgbd::RGBDOrbbec::getMemSize(void* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    uint64_t x0_1 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0x88));
    if (x0_1 != 0)
    {
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_40_1 = arg2;
        int64_t x8_2;
        if (*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x7c) == 0x60e)
        {
            x8_2 = 0x2c;
        }
        else
        {
            x8_2 = 0x28;
        }
        x0_1 = *(arg1 + x8_2);
    }
    if (*(x22 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int64_t sub_dda8(int64_t* arg1, int64_t arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3, int32_t arg4, int16_t arg5)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    void* x24 = *arg1;
    int64_t x0_63;
    if (openni::Device::getSensorInfo(arg2) == 0)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((x24 + 8), "get sensor info failed");
    label_e410:
        x0_63 = 0;
    }
    else
    {
        int64_t s_6;
        size_t var_198;
        if (openni::VideoStream::create(arg3, arg2) != 0)
        {
            char* x0_4 = oniGetExtendedError();
            __builtin_memset(&s_6, 0, 0x18);
            size_t x0_5;
            int128_t v0_1;
            x0_5 = strlen(x0_4);
            if (x0_5 < -0x10)
            {
                goto label_e614;
            }
            int64_t var_190_1;
            int64_t x21_1;
            if (x0_5 >= 0x17)
            {
                uint64_t x22_1 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
                int64_t x0_10 = operator new(x22_1);
                x21_1 = x0_10;
                var_198 = x0_5;
                var_190_1 = x0_10;
                s_6 = (x22_1 | 1);
            }
            else
            {
                x21_1 = (&s_6 | 1);
                s_6 = (x0_5 << 1);
            }
            if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
            {
                memcpy(x21_1, x0_4, x0_5);
            }
            *(x21_1 + x0_5) = 0;
            if ((*(x24 + 8) & 1) == 0)
            {
                *(x24 + 8) = 0;
            }
            else
            {
                **(x24 + 0x18) = 0;
                uint32_t x8_7 = *(x24 + 8);
                *(x24 + 0x10) = 0;
                if ((x8_7 & 1) != 0)
                {
                    operator delete(*(x24 + 0x18));
                    *(x24 + 8) = 0;
                }
            }
            v0_1 = s_6;
            *(x24 + 0x18) = var_190_1;
            *(x24 + 8) = v0_1;
            uint32_t x10_1 = *data_36198;
            int32_t var_1c8 = data_36190;
            char* x9_1 = *(data_361a2 + 6);
            char s_5;
            __builtin_memset(&s_5, 0, 0x18);
            char* x20_2;
            if ((x10_1 & 1) == 0)
            {
                x20_2 = &*(data_36198 + 1);
            }
            else
            {
                x20_2 = x9_1;
            }
            size_t x0_14 = strlen(x20_2);
            void* var_1b0;
            if (x0_14 < -0x10)
            {
            label_e60c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_e614:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_e61c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_e624:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_e62c:
                int64_t x0_83 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                int64_t x0_85 = _Unwind_Resume(x0_83);
                if ((s_5 & 1) == 0)
                {
                    _Unwind_Resume(x0_85);
                }
                operator delete(var_1b0);
                int32_t* x0_89;
                char* x1_15;
                x0_89 = _Unwind_Resume(x0_85);
                /* tailcall */
                return rgbd::RGBDOrbbec::PollingDabai(x0_89, x1_15);
            }
            void* x21_3;
            if (x0_14 >= 0x17)
            {
                uint64_t x22_2 = ((x0_14 + 0x10) & 0xfffffffffffffff0);
                void* x0_16 = operator new(x22_2);
                x21_3 = x0_16;
                size_t var_1b8_1 = x0_14;
                var_1b0 = x0_16;
                s_5 = (x22_2 | 1);
            }
            else
            {
                void var_1bf;
                x21_3 = &var_1bf;
                s_5 = (x0_14 << 1);
            }
            if ((x0_14 >= 0x17 || (x0_14 < 0x17 && x0_14 != 0)))
            {
                memcpy(x21_3, x20_2, x0_14);
            }
            *(x21_3 + x0_14) = 0;
            int32_t x19_4;
            if ((g3::logLevel(&var_1c8) & 1) == 0)
            {
                x19_4 = 0;
                if ((s_5 & 1) != 0)
                {
                label_e098:
                    operator delete(var_1b0);
                    if ((x19_4 & 1) == 0)
                    {
                        goto label_e410;
                    }
                    goto label_e0cc;
                }
            }
            else
            {
                int64_t s_4;
                __builtin_memset(&s_4, 0, 0x18);
                uint64_t x19_3 = *rgbd::OBCTAG;
                size_t x0_21 = strlen(x19_3);
                if (x0_21 < -0x10)
                {
                    goto label_e61c;
                }
                void* var_1d0_1;
                void* x21_4;
                if (x0_21 >= 0x17)
                {
                    uint64_t x22_3 = ((x0_21 + 0x10) & 0xfffffffffffffff0);
                    void* x0_23 = operator new(x22_3);
                    x21_4 = x0_23;
                    size_t var_1d8_1 = x0_21;
                    var_1d0_1 = x0_23;
                    s_4 = (x22_3 | 1);
                }
                else
                {
                    x21_4 = (&s_4 | 1);
                    s_4 = (x0_21 << 1);
                }
                if ((x0_21 >= 0x17 || (x0_21 < 0x17 && x0_21 != 0)))
                {
                    memcpy(x21_4, x19_3, x0_21);
                }
                *(x21_4 + x0_21) = 0;
                x19_4 = g3::logTag(&s_4);
                if ((s_4 & 1) != 0)
                {
                    operator delete(var_1d0_1);
                    if ((s_5 & 1) != 0)
                    {
                        goto label_e098;
                    }
                }
                else if ((s_5 & 1) != 0)
                {
                    goto label_e098;
                }
            }
            if ((x19_4 & 1) == 0)
            {
                goto label_e410;
            }
        label_e0cc:
            LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_31 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "Couldn't create stream,", 0x17);
            void* x20_4;
            if ((*(x24 + 8) & 1) != 0)
            {
                x20_4 = *(x24 + 0x18);
            }
            else
            {
                x20_4 = (x24 + 9);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_31, x20_4, strlen(x20_4));
        label_e40c:
            LogCapture::~LogCapture();
            goto label_e410;
        }
        if (arg4 == 3)
        {
            s_6 = 3;
            int64_t x0_7 = *arg3;
            if (x0_7 != 0)
            {
                oniStreamSetProperty(x0_7, 0x10800001, &s_6, 4);
            }
        }
        int32_t x8_2 = 0x10;
        int32_t var_1a4 = 0x10;
        int64_t x0_8 = *arg3;
        if (x0_8 != 0)
        {
            oniStreamGetProperty(x0_8, 3, &s_6, &var_1a4);
            x8_2 = s_6;
            x0_8 = *arg3;
        }
        int32_t var_1f0 = x8_2;
        uint32_t x8_21 = arg5;
        int32_t x8_22;
        if (x8_21 == 0x60e)
        {
            x8_22 = 0xc8;
        }
        else
        {
            x8_22 = 0xf0;
        }
        int32_t x9_2;
        if (x8_21 == 0x60e)
        {
            x9_2 = 0xf;
        }
        else
        {
            x9_2 = 0x1e;
        }
        int32_t var_1ec_1 = 0x140;
        int32_t var_1e8_1 = x8_22;
        int32_t var_1e4_1 = x9_2;
        if (x0_8 != 0)
        {
            oniStreamSetProperty(x0_8, 3, &var_1f0, 0x10);
            x0_8 = *arg3;
            if (x0_8 != 0)
            {
                x0_8 = oniStreamStart(x0_8);
                if (x0_8 == 0)
                {
                    char* x20_9;
                    if ((*data_36118 & 1) == 0)
                    {
                        x20_9 = &*(data_36118 + 1);
                    }
                    else
                    {
                        x20_9 = *(data_36122 + 6);
                    }
                    int32_t var_248 = data_36110;
                    int64_t s_1;
                    __builtin_memset(&s_1, 0, 0x18);
                    size_t x0_65 = strlen(x20_9);
                    if (x0_65 < -0x10)
                    {
                        goto label_e60c;
                    }
                    void* var_230_1;
                    void* x21_8;
                    if (x0_65 >= 0x17)
                    {
                        uint64_t x22_7 = ((x0_65 + 0x10) & 0xfffffffffffffff0);
                        void* x0_67 = operator new(x22_7);
                        x21_8 = x0_67;
                        size_t var_238_1 = x0_65;
                        var_230_1 = x0_67;
                        s_1 = (x22_7 | 1);
                    }
                    else
                    {
                        x21_8 = &*s_1[1];
                        s_1 = (x0_65 << 1);
                    }
                    if ((x0_65 >= 0x17 || (x0_65 < 0x17 && x0_65 != 0)))
                    {
                        memcpy(x21_8, x20_9, x0_65);
                    }
                    *(x21_8 + x0_65) = 0;
                    int32_t x19_13;
                    if ((g3::logLevel(&var_248) & 1) == 0)
                    {
                        x19_13 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_e5a8:
                            operator delete(var_230_1);
                            if ((x19_13 & 1) != 0)
                            {
                                goto label_e5dc;
                            }
                            goto label_e5fc;
                        }
                    }
                    else
                    {
                        int64_t s;
                        __builtin_memset(&s, 0, 0x18);
                        uint64_t x19_12 = *rgbd::OBCTAG;
                        size_t x0_72 = strlen(x19_12);
                        if (x0_72 < -0x10)
                        {
                            goto label_e62c;
                        }
                        void* var_250_1;
                        void* x21_9;
                        if (x0_72 >= 0x17)
                        {
                            uint64_t x22_8 = ((x0_72 + 0x10) & 0xfffffffffffffff0);
                            void* x0_74 = operator new(x22_8);
                            x21_9 = x0_74;
                            size_t var_258_1 = x0_72;
                            var_250_1 = x0_74;
                            s = (x22_8 | 1);
                        }
                        else
                        {
                            x21_9 = (&s | 1);
                            s = (x0_72 << 1);
                        }
                        if ((x0_72 >= 0x17 || (x0_72 < 0x17 && x0_72 != 0)))
                        {
                            memcpy(x21_9, x19_12, x0_72);
                        }
                        *(x21_9 + x0_72) = 0;
                        x19_13 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            operator delete(var_250_1);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_e5a8;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_e5a8;
                        }
                    }
                    if ((x19_13 & 1) == 0)
                    {
                        goto label_e5fc;
                    }
                label_e5dc:
                    LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "Start the stream success", 0x18);
                    LogCapture::~LogCapture();
                label_e5fc:
                    x0_63 = 1;
                }
            }
        }
        if (((x0_8 == 0 || x0_8 == 0) || ((x0_8 != 0 && x0_8 != 0) && x0_8 != 0)))
        {
            char* x0_35 = oniGetExtendedError(x0_8);
            __builtin_memset(&s_6, 0, 0x18);
            size_t x0_36;
            int128_t v0_2;
            x0_36 = strlen(x0_35);
            if (x0_36 < -0x10)
            {
                goto label_e614;
            }
            int64_t var_190_2;
            int64_t x21_5;
            if (x0_36 >= 0x17)
            {
                uint64_t x22_4 = ((x0_36 + 0x10) & 0xfffffffffffffff0);
                int64_t x0_38 = operator new(x22_4);
                x21_5 = x0_38;
                var_198 = x0_36;
                var_190_2 = x0_38;
                s_6 = (x22_4 | 1);
            }
            else
            {
                x21_5 = (&s_6 | 1);
                s_6 = (x0_36 << 1);
            }
            if ((x0_36 >= 0x17 || (x0_36 < 0x17 && x0_36 != 0)))
            {
                memcpy(x21_5, x0_35, x0_36);
            }
            *(x21_5 + x0_36) = 0;
            if ((*(x24 + 8) & 1) == 0)
            {
                *(x24 + 8) = 0;
            }
            else
            {
                **(x24 + 0x18) = 0;
                uint32_t x8_28 = *(x24 + 8);
                *(x24 + 0x10) = 0;
                if ((x8_28 & 1) != 0)
                {
                    operator delete(*(x24 + 0x18));
                    *(x24 + 8) = 0;
                }
            }
            v0_2 = s_6;
            *(x24 + 0x18) = var_190_2;
            *(x24 + 8) = v0_2;
            uint32_t x10_2 = *data_36198;
            int32_t var_210 = data_36190;
            char* x9_3 = *(data_361a2 + 6);
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            char* x20_6;
            if ((x10_2 & 1) == 0)
            {
                x20_6 = &*(data_36198 + 1);
            }
            else
            {
                x20_6 = x9_3;
            }
            size_t x0_42 = strlen(x20_6);
            if (x0_42 < -0x10)
            {
                goto label_e60c;
            }
            void* var_1f8_1;
            void* x21_6;
            if (x0_42 >= 0x17)
            {
                uint64_t x22_5 = ((x0_42 + 0x10) & 0xfffffffffffffff0);
                void* x0_44 = operator new(x22_5);
                x21_6 = x0_44;
                size_t var_200_1 = x0_42;
                var_1f8_1 = x0_44;
                s_3 = (x22_5 | 1);
            }
            else
            {
                x21_6 = &*s_3[1];
                s_3 = (x0_42 << 1);
            }
            if ((x0_42 >= 0x17 || (x0_42 < 0x17 && x0_42 != 0)))
            {
                memcpy(x21_6, x20_6, x0_42);
            }
            *(x21_6 + x0_42) = 0;
            int32_t x19_9;
            if ((g3::logLevel(&var_210) & 1) == 0)
            {
                x19_9 = 0;
                if ((s_3 & 1) != 0)
                {
                label_e38c:
                    operator delete(var_1f8_1);
                    if ((x19_9 & 1) == 0)
                    {
                        goto label_e410;
                    }
                    goto label_e3c0;
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                uint64_t x19_8 = *rgbd::OBCTAG;
                size_t x0_49 = strlen(x19_8);
                if (x0_49 < -0x10)
                {
                    goto label_e624;
                }
                void* var_218_1;
                void* x21_7;
                if (x0_49 >= 0x17)
                {
                    uint64_t x22_6 = ((x0_49 + 0x10) & 0xfffffffffffffff0);
                    void* x0_51 = operator new(x22_6);
                    x21_7 = x0_51;
                    size_t var_220_1 = x0_49;
                    var_218_1 = x0_51;
                    s_2 = (x22_6 | 1);
                }
                else
                {
                    x21_7 = (&s_2 | 1);
                    s_2 = (x0_49 << 1);
                }
                if ((x0_49 >= 0x17 || (x0_49 < 0x17 && x0_49 != 0)))
                {
                    memcpy(x21_7, x19_8, x0_49);
                }
                *(x21_7 + x0_49) = 0;
                x19_9 = g3::logTag(&s_2);
                if ((s_2 & 1) != 0)
                {
                    operator delete(var_218_1);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_e38c;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_e38c;
                }
            }
            if ((x19_9 & 1) == 0)
            {
                goto label_e410;
            }
        label_e3c0:
            LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_59 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "Couldn't start the stream,", 0x1a);
            void* x20_8;
            if ((*(x24 + 8) & 1) != 0)
            {
                x20_8 = *(x24 + 0x18);
            }
            else
            {
                x20_8 = (x24 + 9);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_59, x20_8, strlen(x20_8));
            goto label_e40c;
        }
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_63;
}

int64_t sub_e634(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_e6f4:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_e6f4;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
            if ((arg8 & 1) == 0)
            {
                goto label_e6f4;
            }
        }
        else if ((arg8 & 1) == 0)
        {
            goto label_e6f4;
        }
        operator delete(arg9);
        int64_t x0_7 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_7);
        if ((arg10 & 1) == 0)
        {
            goto label_e6f4;
        }
    }
    operator delete(arg11);
    int32_t* x0_13;
    char* x1;
    x0_13 = _Unwind_Resume(x19);
    /* tailcall */
    return rgbd::RGBDOrbbec::PollingDabai(x0_13, x1);
}

int64_t sub_e654(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) == 0)
    {
    label_e6f4:
        _Unwind_Resume(x19);
    }
    else
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        if ((arg4 & 1) != 0)
        {
            operator delete(arg5);
            if ((arg6 & 1) == 0)
            {
                goto label_e6f4;
            }
        }
        else if ((arg6 & 1) == 0)
        {
            goto label_e6f4;
        }
        operator delete(arg7);
        int64_t x0_6 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_6);
        if ((arg8 & 1) == 0)
        {
            goto label_e6f4;
        }
    }
    operator delete(arg9);
    int32_t* x0_12;
    char* x1;
    x0_12 = _Unwind_Resume(x19);
    /* tailcall */
    return rgbd::RGBDOrbbec::PollingDabai(x0_12, x1);
}

int64_t sub_e6b4(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19_1 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        int64_t x0_2 = _Unwind_Resume(x19_1);
        LogCapture::~LogCapture();
        x19_1 = _Unwind_Resume(x0_2);
    }
    if (((arg2 & 1) == 0 || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        _Unwind_Resume(x19_1);
    }
    operator delete(arg5);
    int32_t* x0_8;
    char* x1;
    x0_8 = _Unwind_Resume(x19_1);
    /* tailcall */
    return rgbd::RGBDOrbbec::PollingDabai(x0_8, x1);
}

int64_t rgbd::RGBDOrbbec::PollingDabai(int32_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    int128_t* x19 = arg2;
    int64_t s_3;
    __builtin_memset(&s_3, 0, 0x18);
    uint32_t x8_1 = *arg2;
    void* var_1e0_1;
    size_t x21_1;
    if ((x8_1 & 1) != 0)
    {
        x21_1 = *(x19 + 8);
        if (x21_1 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            int64_t x22_1 = x19[1];
            void* x23_1;
            if (x21_1 >= 0x17)
            {
                uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_1 = operator new(x24_1);
                x23_1 = x0_1;
                size_t var_1e8_1 = x21_1;
                var_1e0_1 = x0_1;
                s_3 = (x24_1 | 1);
            }
            else
            {
                x23_1 = (&s_3 | 1);
                s_3 = (x21_1 << 1);
            }
            if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
            {
                memcpy(x23_1, x22_1, x21_1);
            }
            *(x23_1 + x21_1) = 0;
        }
    }
    else
    {
        var_1e0_1 = x19[1];
        s_3 = *x19;
    }
    char s;
    void* var_238;
    char s_1;
    void* var_218;
    char s_2;
    void* var_200;
    int128_t* var_1b8;
    void* var_1a8;
    if (((x8_1 & 1) == 0 || ((x8_1 & 1) != 0 && x21_1 >= -0x10)))
    {
        int64_t x0_4 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&arg1[0x22]);
        int32_t x21_3;
        if (x0_4 == 0)
        {
            x21_3 = 0;
        }
        else
        {
            var_1b8 = &s_3;
            int64_t x8_7;
            if (*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], &s_3) + 0x7c) == 0x60e)
            {
                x8_7 = 0x2c;
            }
            else
            {
                x8_7 = 0x28;
            }
            x21_3 = *(arg1 + x8_7);
        }
        if (((x0_4 == 0 && (s_3 & 1) != 0) || (x0_4 != 0 && (s_3 & 1) != 0)))
        {
            operator delete(var_1e0_1);
        }
        int32_t var_1cc_1 = x21_3;
        if ((arg1[0x4c] & 1) != 0)
        {
            do
            {
                var_1b8 = x19;
                std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], x19);
                if ((rgbd::RGBDParam::destoryOldMemory() & 1) != 0)
                {
                    var_1b8 = x19;
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x23_2 = (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], x19) + 0x30);
                    int128_t* var_1c0_1 = x19;
                    std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], x19);
                    rgbd::RGBDParam::getName();
                    int32_t x0_18 = rgbd::RGBDParam::createMemory(x23_2, &var_1b8);
                    if ((var_1b8 & 1) != 0)
                    {
                        operator delete(var_1a8);
                    }
                    if ((x0_18 & 1) != 0)
                    {
                        var_1b8 = x19;
                        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], x19);
                        int64_t x0_23;
                        int128_t v0_1;
                        x0_23 = rgbd::RGBDParam::getAshmenAddress();
                        if (x0_23 != 0)
                        {
                            __builtin_memset(&s_2, 0, 0x18);
                            if ((*x19 & 1) == 0)
                            {
                                var_200 = x19[1];
                                s_2 = *x19;
                            }
                            else
                            {
                                size_t x23_4 = *(x19 + 8);
                                if (x23_4 < -0x10)
                                {
                                    goto label_ebf0;
                                }
                                int64_t x24_2 = x19[1];
                                void* x25_1;
                                if (x23_4 >= 0x17)
                                {
                                    uint64_t x26_1 = ((x23_4 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_25 = operator new(x26_1);
                                    x25_1 = x0_25;
                                    size_t var_208_1 = x23_4;
                                    var_200 = x0_25;
                                    s_2 = (x26_1 | 1);
                                }
                                else
                                {
                                    x25_1 = (&s_2 | 1);
                                    s_2 = (x23_4 << 1);
                                }
                                if ((x23_4 >= 0x17 || (x23_4 < 0x17 && x23_4 != 0)))
                                {
                                    memcpy(x25_1, x24_2, x23_4);
                                }
                                *(x25_1 + x23_4) = 0;
                            }
                            rgbd::RGBDOrbbec::waitForFrameDaBai(arg1);
                            if ((s_2 & 1) != 0)
                            {
                                operator delete(var_200);
                            }
                        }
                    }
                }
                var_1b8 = 0x989680;
                std::__ndk1::this_thread::sleep_for(&var_1b8);
            } while ((arg1[0x4c] & 1) != 0);
        }
        char* x21_5;
        if ((*data_36118 & 1) == 0)
        {
            x21_5 = &*(data_36118 + 1);
        }
        else
        {
            x21_5 = *(data_36122 + 6);
        }
        int32_t var_230 = data_36110;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_31 = strlen(x21_5);
        if (x0_31 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_ebf0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_ebf4:
            __stack_chk_fail();
            /* no return */
        }
        void* x22_2;
        if (x0_31 >= 0x17)
        {
            uint64_t x23_5 = ((x0_31 + 0x10) & 0xfffffffffffffff0);
            void* x0_33 = operator new(x23_5);
            x22_2 = x0_33;
            size_t var_220_1 = x0_31;
            var_218 = x0_33;
            s_1 = (x23_5 | 1);
        }
        else
        {
            void var_227;
            x22_2 = &var_227;
            s_1 = (x0_31 << 1);
        }
        if ((x0_31 >= 0x17 || (x0_31 < 0x17 && x0_31 != 0)))
        {
            memcpy(x22_2, x21_5, x0_31);
        }
        *(x22_2 + x0_31) = 0;
        int32_t x0_36 = g3::logLevel(&var_230);
        size_t x0_38;
        int32_t x20_3;
        if ((x0_36 & 1) == 0)
        {
            x20_3 = 0;
            if ((s_1 & 1) != 0)
            {
            label_eb44:
                x0_36 = operator delete(var_218);
                if ((x20_3 & 1) != 0)
                {
                    goto label_eb78;
                }
            }
        }
        else
        {
            __builtin_memset(&s, 0, 0x18);
            uint64_t x20_2 = *rgbd::OBCTAG;
            x0_38 = strlen(x20_2);
            if (x0_38 >= -0x10)
            {
                void* x22_3;
                if (x0_38 >= 0x17)
                {
                    uint64_t x23_6 = ((x0_38 + 0x10) & 0xfffffffffffffff0);
                    void* x0_40 = operator new(x23_6);
                    x22_3 = x0_40;
                    size_t var_240_1 = x0_38;
                    var_238 = x0_40;
                    s = (x23_6 | 1);
                }
                else
                {
                    x22_3 = (&s | 1);
                    s = (x0_38 << 1);
                }
                if ((x0_38 >= 0x17 || (x0_38 < 0x17 && x0_38 != 0)))
                {
                    memcpy(x22_3, x20_2, x0_38);
                }
                *(x22_3 + x0_38) = 0;
                x0_36 = g3::logTag(&s);
                x20_3 = x0_36;
                if ((s & 1) != 0)
                {
                    x0_36 = operator delete(var_238);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_eb44;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_eb44;
                }
            }
        }
        if (((((x0_36 & 1) == 0 && (s_1 & 1) == 0) || ((x0_36 & 1) != 0 && x0_38 >= -0x10)) && (x20_3 & 1) != 0))
        {
        label_eb78:
            LogCapture::LogCapture(&var_1b8, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
            uint64_t x8_32 = *x19;
            int32_t temp0_1 = (x8_32 & 1);
            void* x1_11;
            if (temp0_1 != 0)
            {
                x1_11 = x19[1];
            }
            else
            {
                x1_11 = (x19 + 1);
            }
            uint64_t x2_10;
            if (temp0_1 == 0)
            {
                x2_10 = (x8_32 >> 1);
            }
            else
            {
                x2_10 = *(x19 + 8);
            }
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*> var_1b0;
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, x1_11, x2_10), " end thread", 0xb);
            x0_36 = LogCapture::~LogCapture();
        }
        if (((((((x0_36 & 1) == 0 && (s_1 & 1) == 0) || ((x0_36 & 1) != 0 && x0_38 >= -0x10)) && (x20_3 & 1) == 0) || ((x0_36 & 1) == 0 && (s_1 & 1) != 0)) || ((((x0_36 & 1) == 0 && (s_1 & 1) == 0) || ((x0_36 & 1) != 0 && x0_38 >= -0x10)) && (x20_3 & 1) != 0)))
        {
            if (*(x28 + 0x28) == x8)
            {
                return x0_36;
            }
            goto label_ebf4;
        }
    }
    int64_t x19_1 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
    if (((s & 1) == 0 && (s_1 & 1) == 0))
    {
    label_eca0:
        _Unwind_Resume(x19_1);
    }
    if ((s & 1) != 0)
    {
        operator delete(var_238);
        if ((s_1 & 1) == 0)
        {
            goto label_eca0;
        }
    }
    if ((((s & 1) == 0 && (s_1 & 1) != 0) || (s & 1) != 0))
    {
        operator delete(var_218);
        x19_1 = _Unwind_Resume(x19_1);
        if ((s_3 & 1) == 0)
        {
            goto label_eca0;
        }
        operator delete(var_1e0_1);
        x19_1 = _Unwind_Resume(x19_1);
        if ((s_2 & 1) == 0)
        {
            goto label_eca0;
        }
        operator delete(var_200);
        x19_1 = _Unwind_Resume(x19_1);
        if ((var_1b8 & 1) == 0)
        {
            goto label_eca0;
        }
    }
    operator delete(var_1a8);
    int32_t* x0_62;
    char* x1_12;
    x0_62 = _Unwind_Resume(x19_1);
    /* tailcall */
    return rgbd::RGBDOrbbec::PollingMini(x0_62, x1_12);
}

int64_t rgbd::RGBDOrbbec::PollingMini(int32_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    int128_t* x19 = arg2;
    int64_t s_3;
    __builtin_memset(&s_3, 0, 0x18);
    uint32_t x8_1 = *arg2;
    void* var_1e0_1;
    size_t x21_1;
    if ((x8_1 & 1) != 0)
    {
        x21_1 = *(x19 + 8);
        if (x21_1 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            int64_t x22_1 = x19[1];
            void* x23_1;
            if (x21_1 >= 0x17)
            {
                uint64_t x24_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
                void* x0_1 = operator new(x24_1);
                x23_1 = x0_1;
                size_t var_1e8_1 = x21_1;
                var_1e0_1 = x0_1;
                s_3 = (x24_1 | 1);
            }
            else
            {
                x23_1 = (&s_3 | 1);
                s_3 = (x21_1 << 1);
            }
            if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
            {
                memcpy(x23_1, x22_1, x21_1);
            }
            *(x23_1 + x21_1) = 0;
        }
    }
    else
    {
        var_1e0_1 = x19[1];
        s_3 = *x19;
    }
    char s;
    void* var_238;
    char s_1;
    void* var_218;
    char s_2;
    void* var_200;
    int128_t* var_1b8;
    void* var_1a8;
    if (((x8_1 & 1) == 0 || ((x8_1 & 1) != 0 && x21_1 >= -0x10)))
    {
        int64_t x0_4 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&arg1[0x22]);
        int32_t x21_3;
        if (x0_4 == 0)
        {
            x21_3 = 0;
        }
        else
        {
            var_1b8 = &s_3;
            int64_t x8_7;
            if (*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], &s_3) + 0x7c) == 0x60e)
            {
                x8_7 = 0x2c;
            }
            else
            {
                x8_7 = 0x28;
            }
            x21_3 = *(arg1 + x8_7);
        }
        if (((x0_4 == 0 && (s_3 & 1) != 0) || (x0_4 != 0 && (s_3 & 1) != 0)))
        {
            operator delete(var_1e0_1);
        }
        int32_t var_1cc_1 = x21_3;
        if ((arg1[0x4c] & 1) != 0)
        {
            do
            {
                var_1b8 = x19;
                std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], x19);
                if ((rgbd::RGBDParam::destoryOldMemory() & 1) != 0)
                {
                    var_1b8 = x19;
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x23_2 = (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], x19) + 0x30);
                    int128_t* var_1c0_1 = x19;
                    std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], x19);
                    rgbd::RGBDParam::getName();
                    int32_t x0_18 = rgbd::RGBDParam::createMemory(x23_2, &var_1b8);
                    if ((var_1b8 & 1) != 0)
                    {
                        operator delete(var_1a8);
                    }
                    if ((x0_18 & 1) != 0)
                    {
                        var_1b8 = x19;
                        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], x19);
                        int64_t x0_23;
                        int128_t v0_1;
                        x0_23 = rgbd::RGBDParam::getAshmenAddress();
                        if (x0_23 != 0)
                        {
                            __builtin_memset(&s_2, 0, 0x18);
                            if ((*x19 & 1) == 0)
                            {
                                var_200 = x19[1];
                                s_2 = *x19;
                            }
                            else
                            {
                                size_t x23_4 = *(x19 + 8);
                                if (x23_4 < -0x10)
                                {
                                    goto label_f19c;
                                }
                                int64_t x24_2 = x19[1];
                                void* x25_1;
                                if (x23_4 >= 0x17)
                                {
                                    uint64_t x26_1 = ((x23_4 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_25 = operator new(x26_1);
                                    x25_1 = x0_25;
                                    size_t var_208_1 = x23_4;
                                    var_200 = x0_25;
                                    s_2 = (x26_1 | 1);
                                }
                                else
                                {
                                    x25_1 = (&s_2 | 1);
                                    s_2 = (x23_4 << 1);
                                }
                                if ((x23_4 >= 0x17 || (x23_4 < 0x17 && x23_4 != 0)))
                                {
                                    memcpy(x25_1, x24_2, x23_4);
                                }
                                *(x25_1 + x23_4) = 0;
                            }
                            rgbd::RGBDOrbbec::waitForFrameMini(arg1);
                            if ((s_2 & 1) != 0)
                            {
                                operator delete(var_200);
                            }
                        }
                    }
                }
                var_1b8 = 0x989680;
                std::__ndk1::this_thread::sleep_for(&var_1b8);
            } while ((arg1[0x4c] & 1) != 0);
        }
        char* x21_5;
        if ((*data_36118 & 1) == 0)
        {
            x21_5 = &*(data_36118 + 1);
        }
        else
        {
            x21_5 = *(data_36122 + 6);
        }
        int32_t var_230 = data_36110;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_31 = strlen(x21_5);
        if (x0_31 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_f19c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_f1a0:
            __stack_chk_fail();
            /* no return */
        }
        void* x22_2;
        if (x0_31 >= 0x17)
        {
            uint64_t x23_5 = ((x0_31 + 0x10) & 0xfffffffffffffff0);
            void* x0_33 = operator new(x23_5);
            x22_2 = x0_33;
            size_t var_220_1 = x0_31;
            var_218 = x0_33;
            s_1 = (x23_5 | 1);
        }
        else
        {
            void var_227;
            x22_2 = &var_227;
            s_1 = (x0_31 << 1);
        }
        if ((x0_31 >= 0x17 || (x0_31 < 0x17 && x0_31 != 0)))
        {
            memcpy(x22_2, x21_5, x0_31);
        }
        *(x22_2 + x0_31) = 0;
        int32_t x0_36 = g3::logLevel(&var_230);
        size_t x0_38;
        int32_t x20_3;
        if ((x0_36 & 1) == 0)
        {
            x20_3 = 0;
            if ((s_1 & 1) != 0)
            {
            label_f0f0:
                x0_36 = operator delete(var_218);
                if ((x20_3 & 1) != 0)
                {
                    goto label_f124;
                }
            }
        }
        else
        {
            __builtin_memset(&s, 0, 0x18);
            uint64_t x20_2 = *rgbd::OBCTAG;
            x0_38 = strlen(x20_2);
            if (x0_38 >= -0x10)
            {
                void* x22_3;
                if (x0_38 >= 0x17)
                {
                    uint64_t x23_6 = ((x0_38 + 0x10) & 0xfffffffffffffff0);
                    void* x0_40 = operator new(x23_6);
                    x22_3 = x0_40;
                    size_t var_240_1 = x0_38;
                    var_238 = x0_40;
                    s = (x23_6 | 1);
                }
                else
                {
                    x22_3 = (&s | 1);
                    s = (x0_38 << 1);
                }
                if ((x0_38 >= 0x17 || (x0_38 < 0x17 && x0_38 != 0)))
                {
                    memcpy(x22_3, x20_2, x0_38);
                }
                *(x22_3 + x0_38) = 0;
                x0_36 = g3::logTag(&s);
                x20_3 = x0_36;
                if ((s & 1) != 0)
                {
                    x0_36 = operator delete(var_238);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_f0f0;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_f0f0;
                }
            }
        }
        if (((((x0_36 & 1) == 0 && (s_1 & 1) == 0) || ((x0_36 & 1) != 0 && x0_38 >= -0x10)) && (x20_3 & 1) != 0))
        {
        label_f124:
            LogCapture::LogCapture(&var_1b8, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
            uint64_t x8_32 = *x19;
            int32_t temp0_1 = (x8_32 & 1);
            void* x1_11;
            if (temp0_1 != 0)
            {
                x1_11 = x19[1];
            }
            else
            {
                x1_11 = (x19 + 1);
            }
            uint64_t x2_10;
            if (temp0_1 == 0)
            {
                x2_10 = (x8_32 >> 1);
            }
            else
            {
                x2_10 = *(x19 + 8);
            }
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*> var_1b0;
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, x1_11, x2_10), " end thread", 0xb);
            x0_36 = LogCapture::~LogCapture();
        }
        if (((((((x0_36 & 1) == 0 && (s_1 & 1) == 0) || ((x0_36 & 1) != 0 && x0_38 >= -0x10)) && (x20_3 & 1) == 0) || ((x0_36 & 1) == 0 && (s_1 & 1) != 0)) || ((((x0_36 & 1) == 0 && (s_1 & 1) == 0) || ((x0_36 & 1) != 0 && x0_38 >= -0x10)) && (x20_3 & 1) != 0)))
        {
            if (*(x28 + 0x28) == x8)
            {
                return x0_36;
            }
            goto label_f1a0;
        }
    }
    int64_t x19_1 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
    if (((s & 1) == 0 && (s_1 & 1) == 0))
    {
    label_f24c:
        _Unwind_Resume(x19_1);
    }
    if ((s & 1) != 0)
    {
        operator delete(var_238);
        if ((s_1 & 1) == 0)
        {
            goto label_f24c;
        }
    }
    if ((((s & 1) == 0 && (s_1 & 1) != 0) || (s & 1) != 0))
    {
        operator delete(var_218);
        x19_1 = _Unwind_Resume(x19_1);
        if ((s_3 & 1) == 0)
        {
            goto label_f24c;
        }
        operator delete(var_1e0_1);
        x19_1 = _Unwind_Resume(x19_1);
        if ((s_2 & 1) == 0)
        {
            goto label_f24c;
        }
        operator delete(var_200);
        x19_1 = _Unwind_Resume(x19_1);
        if ((var_1b8 & 1) == 0)
        {
            goto label_f24c;
        }
    }
    operator delete(var_1a8);
    /* tailcall */
    return rgbd::OrbbecInfo::~OrbbecInfo(_Unwind_Resume(x19_1));
}

void rgbd::OrbbecInfo::~OrbbecInfo(char* arg1)
{
    int64_t* x20 = *(arg1 + 0x48);
    if (x20 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x20 + 0x10)(x20);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    void* x20_1 = *(arg1 + 0x38);
    *(arg1 + 0x38) = 0;
    if (x20_1 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x20_1);
    }
    void* x20_2 = *(arg1 + 0x30);
    *(arg1 + 0x30) = 0;
    if (x20_2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(x20_2);
    }
    if ((arg1[0x18] & 1) != 0)
    {
        operator delete(*(arg1 + 0x28));
    }
    if ((((arg1[0x18] & 1) != 0 && (*arg1 & 1) == 0) || ((arg1[0x18] & 1) == 0 && (*arg1 & 1) == 0)))
    {
        return;
    }
    if ((((arg1[0x18] & 1) != 0 && (*arg1 & 1) != 0) || ((arg1[0x18] & 1) == 0 && (*arg1 & 1) != 0)))
    {
        /* tailcall */
        return operator delete(*(arg1 + 0x10));
    }
}

uint64_t rgbd::RGBDOrbbec::reopenDevice(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg1, char* arg2, void* arg3, void* arg4 @ x25)
{
    void* var_48 = arg4;
    void* x24;
    void* var_40 = x24;
    uint64_t x22;
    uint64_t var_30 = x22;
    int64_t __saved_x29;
    int64_t* x29 = &__saved_x29;
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t var_70 = *(x27 + 0x28);
    uint32_t x9 = *data_36198;
    int32_t var_260 = data_36190;
    void* var_248 = nullptr;
    char* x20;
    if ((x9 & 1) == 0)
    {
        x20 = &*(data_36198 + 1);
    }
    else
    {
        x20 = *(data_361a2 + 6);
    }
    int64_t var_250 = 0;
    int64_t var_258 = 0;
    size_t x0_1 = strlen(x20);
    if (x0_1 < -0x10)
    {
    label_114d0:
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    label_114d4:
        __stack_chk_fail();
        /* no return */
    }
    void* x21_1;
    if (x0_1 >= 0x17)
    {
        x22 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
        void* x0_3 = operator new(x22);
        x21_1 = x0_3;
        var_248 = x0_3;
        var_258 = (x22 | 1);
        size_t var_250_1 = x0_1;
    }
    else
    {
        x21_1 = &*var_258[1];
        var_258 = (x0_1 << 1);
    }
    if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
    {
        memcpy(x21_1, x20, x0_1);
    }
    *(x21_1 + x0_1) = 0;
    int32_t x19_3;
    if ((g3::logLevel(&var_260) & 1) == 0)
    {
        x19_3 = 0;
        if ((var_258 & 1) != 0)
        {
        label_f45c:
            operator delete(var_248);
            if ((x19_3 & 1) == 0)
            {
                goto label_f548;
            }
            goto label_f4ec;
        }
    }
    else
    {
        int64_t s_22;
        __builtin_memset(&s_22, 0, 0x18);
        uint64_t x19_2 = *rgbd::OBCTAG;
        size_t x0_8 = strlen(x19_2);
        if (x0_8 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_114e4:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
            goto label_114ec;
        }
        void* var_268_1;
        void* x21_2;
        if (x0_8 >= 0x17)
        {
            uint64_t x22_1 = ((x0_8 + 0x10) & 0xfffffffffffffff0);
            void* x0_11 = operator new(x22_1);
            x21_2 = x0_11;
            var_268_1 = x0_11;
            s_22 = (x22_1 | 1);
            size_t var_270_1 = x0_8;
        }
        else
        {
            x21_2 = (&s_22 | 1);
            s_22 = (x0_8 << 1);
        }
        if ((x0_8 >= 0x17 || (x0_8 < 0x17 && x0_8 != 0)))
        {
            memcpy(x21_2, x19_2, x0_8);
        }
        *(x21_2 + x0_8) = 0;
        x19_3 = g3::logTag(&s_22);
        if ((s_22 & 1) != 0)
        {
            operator delete(var_268_1);
            if ((var_258 & 1) != 0)
            {
                goto label_f45c;
            }
        }
        else if ((var_258 & 1) != 0)
        {
            goto label_f45c;
        }
    }
    char* s_23;
    size_t var_228;
    if ((x19_3 & 1) != 0)
    {
    label_f4ec:
        LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_17 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_228, "reopenDevice: ", 0xe);
        uint64_t x8_12 = *arg2;
        int32_t temp0_1 = (x8_12 & 1);
        void* x1_3;
        if (temp0_1 != 0)
        {
            x1_3 = *(arg2 + 0x10);
        }
        else
        {
            x1_3 = &arg2[1];
        }
        uint64_t x2_2;
        if (temp0_1 == 0)
        {
            x2_2 = (x8_12 >> 1);
        }
        else
        {
            x2_2 = *(arg2 + 8);
        }
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_17, x1_3, x2_2);
        LogCapture::~LogCapture();
        goto label_f548;
    }
label_f548:
    s_23 = arg2;
    int64_t* x19_4 = *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x11], arg2) + 0x68);
    void* x0_20 = *x19_4;
    if (x0_20 != 0)
    {
        operator delete(x0_20);
        *x19_4 = 0;
    }
    int64_t x0_21 = x19_4[1];
    if (x0_21 != 0)
    {
        if (x19_4[0x81] != 0)
        {
            oniDeviceClose(x0_21);
        }
        x19_4[1] = 0;
    }
    sleep(1);
    int32_t s_24;
    oniGetDeviceList(&s_23, &s_24);
    int64_t s_38 = s_24;
    char* s_34 = s_23;
    size_t x20_2 = (s_38 * 0x304);
    uint64_t x0_23;
    if (0 == ((s_38 * 0x304) >> 0x40))
    {
        x0_23 = x20_2;
    }
    else
    {
        x0_23 = -1;
    }
    void* x0_24 = operator new[](x0_23);
    arg4 = x0_24;
    int16_t* var_5f0_1 = arg3;
    memcpy(x0_24, s_34, x20_2);
    oniReleaseDeviceList(s_34);
    void* var_570;
    void* var_520;
    void** var_508;
    char s_11;
    void* var_398;
    int32_t x21_6;
    void* x23;
    if (s_38 == 0)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&arg1[1], "not find orbbec devices");
        char* x21_4;
        if ((*data_36198 & 1) == 0)
        {
            x21_4 = &*(data_36198 + 1);
        }
        else
        {
            x21_4 = *(data_361a2 + 6);
        }
        int32_t var_298 = data_36190;
        int64_t s_21;
        __builtin_memset(&s_21, 0, 0x18);
        size_t x0_234 = strlen(x21_4);
        if (x0_234 < -0x10)
        {
        label_114ec:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_114f4:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_114fc:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_11504:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_1150c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_11514:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_11524:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_1152c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_11534:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_1153c:
            int64_t x0_357 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s_11 & 1) != 0)
            {
                operator delete(var_398);
            }
            operator delete[](var_520);
            if ((x29[-0x1b] & 1) != 0)
            {
                operator delete(x29[-0x19]);
            }
            int64_t x8_231;
            int32_t i;
            do
            {
                x8_231 = __ldaxr(arg4);
                i = __stlxr((x8_231 - 1), arg4);
            } while (i != 0);
            if (x8_231 == 0)
            {
                *(*var_508 + 0x10)(var_508);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
            operator delete[](var_570);
            int64_t* x0_365;
            int64_t* x1_68;
            x0_365 = _Unwind_Resume(x0_357);
            /* tailcall */
            return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_365, x1_68);
        }
        void* var_280_1;
        void* x22_17;
        if (x0_234 >= 0x17)
        {
            x23 = ((x0_234 + 0x10) & 0xfffffffffffffff0);
            void* x0_239 = operator new(x23);
            x22_17 = x0_239;
            var_280_1 = x0_239;
            s_21 = (x23 | 1);
            size_t var_288_1 = x0_234;
        }
        else
        {
            x22_17 = &*s_21[1];
            s_21 = (x0_234 << 1);
        }
        if ((x0_234 >= 0x17 || (x0_234 < 0x17 && x0_234 != 0)))
        {
            memcpy(x22_17, x21_4, x0_234);
        }
        *(x22_17 + x0_234) = 0;
        int32_t x20_37;
        if ((g3::logLevel(&var_298) & 1) == 0)
        {
            x20_37 = 0;
            if ((s_21 & 1) != 0)
            {
            label_10b90:
                operator delete(var_280_1);
                if ((x20_37 & 1) == 0)
                {
                    goto label_10b98;
                }
                goto label_10ccc;
            }
        }
        else
        {
            int64_t s_20;
            __builtin_memset(&s_20, 0, 0x18);
            uint64_t x20_36 = *rgbd::OBCTAG;
            size_t x0_244 = strlen(x20_36);
            if (x0_244 < -0x10)
            {
                goto label_114fc;
            }
            void* var_2a0_1;
            void* x22_19;
            if (x0_244 >= 0x17)
            {
                uint64_t x23_3 = ((x0_244 + 0x10) & 0xfffffffffffffff0);
                void* x0_255 = operator new(x23_3);
                x22_19 = x0_255;
                var_2a0_1 = x0_255;
                s_20 = (x23_3 | 1);
                size_t var_2a8_1 = x0_244;
            }
            else
            {
                x22_19 = (&s_20 | 1);
                s_20 = (x0_244 << 1);
            }
            if ((x0_244 >= 0x17 || (x0_244 < 0x17 && x0_244 != 0)))
            {
                memcpy(x22_19, x20_36, x0_244);
            }
            *(x22_19 + x0_244) = 0;
            x20_37 = g3::logTag(&s_20);
            if ((s_20 & 1) != 0)
            {
                operator delete(var_2a0_1);
                if ((s_21 & 1) != 0)
                {
                    goto label_10b90;
                }
            }
            else if ((s_21 & 1) != 0)
            {
                goto label_10b90;
            }
        }
        if ((x20_37 & 1) == 0)
        {
        label_10b98:
            x21_6 = 0;
        label_10df4:
            operator delete[](arg4);
            if (*(x27 + 0x28) == x29[-0xc])
            {
                return x21_6;
            }
            goto label_114d4;
        }
    label_10ccc:
        LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
        char* x19_31;
        if ((arg1[1] & 1) != 0)
        {
            x19_31 = arg1[3];
        }
        else
        {
            x19_31 = (arg1 + 9);
        }
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_228, x19_31, strlen(x19_31));
        LogCapture::~LogCapture();
        x21_6 = 0;
        goto label_10df4;
    }
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_240;
    if (s_38 >= 1)
    {
        x23 = &arg1[1];
        int64_t var_548_1 = 0;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* var_4f8_1 = &var_228;
        char* x8_17 = (&s_24 | 1);
        var_570 = arg4;
        void* var_540_1 = x23;
        while (true)
        {
            uint32_t x9_2 = *data_36118;
            char* x10_2 = *(data_36122 + 6);
            int32_t var_2d0 = data_36110;
            char* x22_2;
            if ((x9_2 & 1) == 0)
            {
                x22_2 = &*(data_36118 + 1);
            }
            else
            {
                x22_2 = x10_2;
            }
            int64_t s_19;
            __builtin_memset(&s_19, 0, 0x18);
            size_t x0_27 = strlen(x22_2);
            if (x0_27 < -0x10)
            {
                goto label_11490;
            }
            void* var_2b8;
            if (x0_27 >= 0x17)
            {
                uint64_t x19_5 = ((x0_27 + 0x10) & 0xfffffffffffffff0);
                void* x0_29 = operator new(x19_5);
                x24 = x0_29;
                var_2b8 = x0_29;
                s_19 = (x19_5 | 1);
                size_t var_2c0_1 = x0_27;
            }
            else
            {
                x24 = &*s_19[1];
                s_19 = (x0_27 << 1);
            }
            if ((x0_27 >= 0x17 || (x0_27 < 0x17 && x0_27 != 0)))
            {
                memcpy(x24, x22_2, x0_27);
            }
            *(x24 + x0_27) = 0;
            int32_t x20_5;
            if ((g3::logLevel(&var_2d0) & 1) == 0)
            {
                x20_5 = 0;
                if ((s_19 & 1) != 0)
                {
                label_f7ec:
                    operator delete(var_2b8);
                    if ((x20_5 & 1) == 0)
                    {
                        goto label_f95c;
                    }
                    goto label_f874;
                }
            }
            else
            {
                int64_t s_18;
                __builtin_memset(&s_18, 0, 0x18);
                x24 = *rgbd::OBCTAG;
                size_t x0_34 = strlen(x24);
                if (x0_34 < -0x10)
                {
                    goto label_114b0;
                }
                char* var_2d8_1;
                char* x22_3;
                if (x0_34 >= 0x17)
                {
                    uint64_t x19_6 = ((x0_34 + 0x10) & 0xfffffffffffffff0);
                    char* x0_37 = operator new(x19_6);
                    x22_3 = x0_37;
                    var_2d8_1 = x0_37;
                    s_18 = (x19_6 | 1);
                    size_t var_2e0_1 = x0_34;
                }
                else
                {
                    x22_3 = (&s_18 | 1);
                    s_18 = (x0_34 << 1);
                }
                if ((x0_34 >= 0x17 || (x0_34 < 0x17 && x0_34 != 0)))
                {
                    memcpy(x22_3, x24, x0_34);
                }
                x22_3[x0_34] = 0;
                x20_5 = g3::logTag(&s_18);
                if ((s_18 & 1) != 0)
                {
                    operator delete(var_2d8_1);
                    if ((s_19 & 1) != 0)
                    {
                        goto label_f7ec;
                    }
                }
                else if ((s_19 & 1) != 0)
                {
                    goto label_f7ec;
                }
            }
            if ((x20_5 & 1) == 0)
            {
                goto label_f95c;
            }
        label_f874:
            LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
            char* x20_7 = (arg4 + (var_548_1 * 0x304));
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_53 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_4f8_1, "name: ", 6), ((arg4 + (var_548_1 * 0x304)) + 0x200), strlen(((arg4 + (var_548_1 * 0x304)) + 0x200))), " url:", 5), x20_7, strlen(x20_7)), " vendor:", 8);
            uint16_t x0_58 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_53, ((arg4 + (var_548_1 * 0x304)) + 0x100), strlen(((arg4 + (var_548_1 * 0x304)) + 0x100))), " PID:", 5);
            *((arg4 + (var_548_1 * 0x304)) + 0x302);
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_58);
            LogCapture::~LogCapture();
        label_f95c:
            void** x0_59 = operator new(0x428);
            arg4 = &x0_59[1];
            *arg4 = {0};
            *x0_59 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> > + 0x10);
            __builtin_memset(&x0_59[0x66], 0, 0x15);
            __builtin_memset(&x0_59[0x69], 0, 0x15);
            __builtin_memset(&x0_59[0x6c], 0, 0x15);
            __builtin_memset(&x0_59[0x6f], 0, 0x15);
            __builtin_memset(&x0_59[0x72], 0, 0x15);
            __builtin_memset(&x0_59[0x75], 0, 0x15);
            __builtin_memset(&x0_59[0x78], 0, 0x15);
            __builtin_memset(&x0_59[0x7b], 0, 0x15);
            __builtin_memset(&x0_59[0x7e], 0, 0x15);
            int64_t i_1 = 0;
            __builtin_memset(&x0_59[0x81], 0, 0x15);
            var_508 = x0_59;
            x0_59[3] = 0;
            x0_59[4] = 0;
            x0_59[0x84] = 1;
            do
            {
                void* x20_9 = (var_508 + i_1);
                uint32_t x8_59 = *(x20_9 + 0x344);
                *(x20_9 + 0x330) = 0;
                if (x8_59 != 0)
                {
                    void* x0_61 = *(x20_9 + 0x338);
                    if (x0_61 != 0)
                    {
                        operator delete[](x0_61);
                    }
                }
                i_1 = (i_1 + 0x18);
                *(x20_9 + 0x338) = 0;
                *(x20_9 + 0x33d) = 0;
            } while (i_1 != 0xf0);
            system("su -c "chmod -R 777 /dev/bus/usb…");
            __builtin_memset(&s_24, 0, 0x18);
            char* x0_62 = (var_570 + (var_548_1 * 0x304));
            size_t x0_63 = strlen(x0_62);
            if (x0_63 < -0x10)
            {
                goto label_11498;
            }
            size_t var_e0_1;
            char* var_d8_1;
            char* x19_10;
            if (x0_63 >= 0x17)
            {
                uint64_t x22_4 = ((x0_63 + 0x10) & 0xfffffffffffffff0);
                char* x0_65 = operator new(x22_4);
                x19_10 = x0_65;
                var_e0_1 = x0_63;
                var_d8_1 = x0_65;
                s_24 = (x22_4 | 1);
            }
            else
            {
                x19_10 = x8_17;
                s_24 = (x0_63 << 1);
            }
            if ((x0_63 >= 0x17 || (x0_63 < 0x17 && x0_63 != 0)))
            {
                memcpy(x19_10, x0_62, x0_63);
            }
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_27 = arg2;
            x19_10[x0_63] = 0;
            s_23 = s_27;
            void* x0_68 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x11], s_27);
            uint64_t x9_5 = *(x0_68 + 0x40);
            uint64_t x11_2 = s_24;
            uint64_t x10_3 = (x9_5 >> 1);
            uint64_t x2_12;
            if ((x9_5 & 1) == 0)
            {
                x2_12 = x10_3;
            }
            else
            {
                x2_12 = *(x0_68 + 0x48);
            }
            size_t x12_3;
            if ((x11_2 & 1) == 0)
            {
                x12_3 = (x11_2 >> 1);
            }
            else
            {
                x12_3 = var_e0_1;
            }
            int64_t* x19_26;
            if (x2_12 != x12_3)
            {
            label_fba4:
                uint32_t x9_7 = *data_36198;
                char* x10_5 = *(data_361a2 + 6);
                int32_t var_308 = data_36190;
                char* x22_5;
                if ((x9_7 & 1) == 0)
                {
                    x22_5 = &*(data_36198 + 1);
                }
                else
                {
                    x22_5 = x10_5;
                }
                int64_t s_17;
                __builtin_memset(&s_17, 0, 0x18);
                size_t x0_72 = strlen(x22_5);
                if (x0_72 < -0x10)
                {
                    goto label_114a0;
                }
                void* var_2f0;
                void* x24_1;
                if (x0_72 >= 0x17)
                {
                    uint64_t x19_11 = ((x0_72 + 0x10) & 0xfffffffffffffff0);
                    void* x0_74 = operator new(x19_11);
                    x24_1 = x0_74;
                    var_2f0 = x0_74;
                    s_17 = (x19_11 | 1);
                    size_t var_2f8_1 = x0_72;
                }
                else
                {
                    x24_1 = &*s_17[1];
                    s_17 = (x0_72 << 1);
                }
                if ((x0_72 >= 0x17 || (x0_72 < 0x17 && x0_72 != 0)))
                {
                    memcpy(x24_1, x22_5, x0_72);
                }
                *(x24_1 + x0_72) = 0;
                int32_t x20_13;
                if ((g3::logLevel(&var_308) & 1) == 0)
                {
                    x20_13 = 0;
                    if ((s_17 & 1) != 0)
                    {
                    label_fc94:
                        operator delete(var_2f0);
                        if ((x20_13 & 1) == 0)
                        {
                            goto label_10388;
                        }
                        goto label_102f0;
                    }
                }
                else
                {
                    int64_t s_16;
                    __builtin_memset(&s_16, 0, 0x18);
                    uint64_t x24_2 = *rgbd::OBCTAG;
                    size_t x0_79 = strlen(x24_2);
                    if (x0_79 < -0x10)
                    {
                        goto label_114b8;
                    }
                    void* var_310_1;
                    void* x22_6;
                    if (x0_79 >= 0x17)
                    {
                        uint64_t x19_22 = ((x0_79 + 0x10) & 0xfffffffffffffff0);
                        void* x0_152 = operator new(x19_22);
                        x22_6 = x0_152;
                        var_310_1 = x0_152;
                        s_16 = (x19_22 | 1);
                        size_t var_318_1 = x0_79;
                    }
                    else
                    {
                        x22_6 = (&s_16 | 1);
                        s_16 = (x0_79 << 1);
                    }
                    if ((x0_79 >= 0x17 || (x0_79 < 0x17 && x0_79 != 0)))
                    {
                        memcpy(x22_6, x24_2, x0_79);
                    }
                    *(x22_6 + x0_79) = 0;
                    x20_13 = g3::logTag(&s_16);
                    if ((s_16 & 1) != 0)
                    {
                        operator delete(var_310_1);
                        if ((s_17 & 1) != 0)
                        {
                            goto label_fc94;
                        }
                    }
                    else if ((s_17 & 1) != 0)
                    {
                        goto label_fc94;
                    }
                }
                if ((x20_13 & 1) == 0)
                {
                label_10388:
                    uint32_t x9_13 = *data_36198;
                    char* x10_8 = *(data_361a2 + 6);
                    int32_t var_340 = data_36190;
                    char* x22_12;
                    if ((x9_13 & 1) == 0)
                    {
                        x22_12 = &*(data_36198 + 1);
                    }
                    else
                    {
                        x22_12 = x10_8;
                    }
                    int64_t s_15;
                    __builtin_memset(&s_15, 0, 0x18);
                    size_t x0_168 = strlen(x22_12);
                    if (x0_168 < -0x10)
                    {
                        goto label_114a8;
                    }
                    void* var_328;
                    if (x0_168 >= 0x17)
                    {
                        uint64_t x19_24 = ((x0_168 + 0x10) & 0xfffffffffffffff0);
                        void* x0_170 = operator new(x19_24);
                        x24 = x0_170;
                        var_328 = x0_170;
                        s_15 = (x19_24 | 1);
                        size_t var_330_1 = x0_168;
                    }
                    else
                    {
                        x24 = &*s_15[1];
                        s_15 = (x0_168 << 1);
                    }
                    if ((x0_168 >= 0x17 || (x0_168 < 0x17 && x0_168 != 0)))
                    {
                        memcpy(x24, x22_12, x0_168);
                    }
                    *(x24 + x0_168) = 0;
                    int32_t x20_30;
                    if ((g3::logLevel(&var_340) & 1) == 0)
                    {
                        x20_30 = 0;
                        if ((s_15 & 1) != 0)
                        {
                        label_10478:
                            operator delete(var_328);
                            if ((x20_30 & 1) == 0)
                            {
                                goto label_10554;
                            }
                            goto label_10514;
                        }
                    }
                    else
                    {
                        int64_t s_14;
                        __builtin_memset(&s_14, 0, 0x18);
                        x24 = *rgbd::OBCTAG;
                        size_t x0_175 = strlen(x24);
                        if (x0_175 < -0x10)
                        {
                            goto label_114c0;
                        }
                        void* var_348_1;
                        void* x22_13;
                        if (x0_175 >= 0x17)
                        {
                            uint64_t x19_25 = ((x0_175 + 0x10) & 0xfffffffffffffff0);
                            void* x0_179 = operator new(x19_25);
                            x22_13 = x0_179;
                            var_348_1 = x0_179;
                            s_14 = (x19_25 | 1);
                            size_t var_350_1 = x0_175;
                        }
                        else
                        {
                            x22_13 = (&s_14 | 1);
                            s_14 = (x0_175 << 1);
                        }
                        if ((x0_175 >= 0x17 || (x0_175 < 0x17 && x0_175 != 0)))
                        {
                            memcpy(x22_13, x24, x0_175);
                        }
                        *(x22_13 + x0_175) = 0;
                        x20_30 = g3::logTag(&s_14);
                        if ((s_14 & 1) != 0)
                        {
                            operator delete(var_348_1);
                            if ((s_15 & 1) != 0)
                            {
                                goto label_10478;
                            }
                        }
                        else if ((s_15 & 1) != 0)
                        {
                            goto label_10478;
                        }
                    }
                    if ((x20_30 & 1) == 0)
                    {
                        goto label_10554;
                    }
                label_10514:
                    LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_4f8_1, "devices: ", 9)), " ,record: ", 0xa));
                    LogCapture::~LogCapture();
                label_10554:
                    x19_26 = &nullptr->ident.file_class;
                    if ((s_24 & 1) != 0)
                    {
                        goto label_107fc;
                    }
                    goto label_1080c;
                }
            label_102f0:
                LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_163 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_4f8_1, "devices: ", 9), x0_62, strlen(x0_62)), " ,record: ", 0xa);
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1_36 = arg2;
                var_240 = x1_36;
                void* x0_165 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x11], x1_36);
                uint64_t x8_119 = *(x0_165 + 0x40);
                int32_t temp3_1 = (x8_119 & 1);
                void* x1_37;
                if (temp3_1 == 0)
                {
                    x1_37 = (x0_165 + 0x41);
                }
                else
                {
                    x1_37 = *(x0_165 + 0x50);
                }
                uint64_t x2_27;
                if (temp3_1 == 0)
                {
                    x2_27 = (x8_119 >> 1);
                }
                else
                {
                    x2_27 = *(x0_165 + 0x48);
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_163, x1_37, x2_27);
                LogCapture::~LogCapture();
                goto label_10388;
            }
            char* x1_15;
            if ((x11_2 & 1) == 0)
            {
                x1_15 = x8_17;
            }
            else
            {
                x1_15 = var_d8_1;
            }
            if ((x9_5 & 1) == 0)
            {
                if (x2_12 == 0)
                {
                    goto label_fca4;
                }
                void* x8_67 = (x0_68 + 0x41);
                int64_t x9_6 = -(x10_3);
                while (*x8_67 == *x1_15)
                {
                    x8_67 = (x8_67 + 1);
                    int64_t temp2_1 = x9_6;
                    x9_6 = (x9_6 + 1);
                    x1_15 = &x1_15[1];
                    if (temp2_1 == -1)
                    {
                        break;
                    }
                }
                if (*x8_67 != *x1_15)
                {
                    goto label_fba4;
                }
                goto label_fca4;
            }
            if (x2_12 != 0)
            {
                if (memcmp() != 0)
                {
                    goto label_fba4;
                }
                goto label_fca4;
            }
        label_fca4:
            int32_t var_514_1 = 5;
            while (true)
            {
                int32_t x20_14;
                if (var_508[0x84] != 0)
                {
                    int32_t x0_83 = oniDeviceOpen(x0_62, &s_23);
                    x20_14 = x0_83;
                    if (x0_83 == 0)
                    {
                        openni::Device::_setHandle(&x0_59[3]);
                    }
                }
                else if (var_508[4] == 0)
                {
                    x20_14 = 5;
                }
                else
                {
                    x20_14 = 0;
                }
                if (var_514_1 == 0)
                {
                    break;
                }
                if (x20_14 == 0)
                {
                    break;
                }
                char* x0_85 = oniGetExtendedError();
                __builtin_memset(&s_23, 0, 0x18);
                size_t x0_86;
                int128_t v0_1;
                x0_86 = strlen(x0_85);
                size_t x0_92;
                if (x0_86 >= -0x10)
                {
                    int64_t var_220_1;
                    int64_t x19_12;
                    if (x0_86 >= 0x17)
                    {
                        uint64_t x22_7 = ((x0_86 + 0x10) & 0xfffffffffffffff0);
                        int64_t x0_88 = operator new(x22_7);
                        x19_12 = x0_88;
                        var_220_1 = x0_88;
                        s_23 = (x22_7 | 1);
                        var_228 = x0_86;
                    }
                    else
                    {
                        x19_12 = (&s_23 | 1);
                        s_23 = (x0_86 << 1);
                    }
                    if ((x0_86 >= 0x17 || (x0_86 < 0x17 && x0_86 != 0)))
                    {
                        memcpy(x19_12, x0_85, x0_86);
                    }
                    *(x19_12 + x0_86) = 0;
                    if ((*x23 & 1) == 0)
                    {
                        *x23 = 0;
                    }
                    else
                    {
                        *arg1[3] = 0;
                        uint32_t x8_86 = arg1[1];
                        arg1[2] = 0;
                        if ((x8_86 & 1) != 0)
                        {
                            operator delete(arg1[3]);
                            arg1[1] = 0;
                        }
                    }
                    v0_1 = s_23;
                    *(x23 + 0x10) = var_220_1;
                    *x23 = v0_1;
                    uint32_t x9_10 = *data_36198;
                    char* x11_5 = *(data_361a2 + 6);
                    int32_t var_378 = data_36190;
                    char* x22_8;
                    if ((x9_10 & 1) == 0)
                    {
                        x22_8 = &*(data_36198 + 1);
                    }
                    else
                    {
                        x22_8 = x11_5;
                    }
                    int64_t s_13;
                    __builtin_memset(&s_13, 0, 0x18);
                    x0_92 = strlen(x22_8);
                    if (x0_92 >= -0x10)
                    {
                        void* var_360;
                        if (x0_92 >= 0x17)
                        {
                            uint64_t x19_14 = ((x0_92 + 0x10) & 0xfffffffffffffff0);
                            void* x0_94 = operator new(x19_14);
                            x24 = x0_94;
                            var_360 = x0_94;
                            s_13 = (x19_14 | 1);
                            size_t var_368_1 = x0_92;
                        }
                        else
                        {
                            x24 = &*s_13[1];
                            s_13 = (x0_92 << 1);
                        }
                        if ((x0_92 >= 0x17 || (x0_92 < 0x17 && x0_92 != 0)))
                        {
                            memcpy(x24, x22_8, x0_92);
                        }
                        *(x24 + x0_92) = 0;
                        int32_t x0_97 = g3::logLevel(&var_378);
                        int32_t x20_18;
                        if ((x0_97 & 1) == 0)
                        {
                            x20_18 = 0;
                            if ((s_13 & 1) != 0)
                            {
                            label_fec4:
                                operator delete(var_360);
                                if ((x20_18 & 1) != 0)
                                {
                                    goto label_ff4c;
                                }
                            }
                        }
                        else
                        {
                            int64_t s_12;
                            __builtin_memset(&s_12, 0, 0x18);
                            x24 = *rgbd::OBCTAG;
                            size_t x0_99 = strlen(x24);
                            if (x0_99 < -0x10)
                            {
                                break;
                            }
                            char* var_380_1;
                            char* x22_9;
                            if (x0_99 >= 0x17)
                            {
                                uint64_t x19_15 = ((x0_99 + 0x10) & 0xfffffffffffffff0);
                                char* x0_102 = operator new(x19_15);
                                x22_9 = x0_102;
                                var_380_1 = x0_102;
                                s_12 = (x19_15 | 1);
                                size_t var_388_1 = x0_99;
                            }
                            else
                            {
                                x22_9 = (&s_12 | 1);
                                s_12 = (x0_99 << 1);
                            }
                            if ((x0_99 >= 0x17 || (x0_99 < 0x17 && x0_99 != 0)))
                            {
                                memcpy(x22_9, x24, x0_99);
                            }
                            x22_9[x0_99] = 0;
                            x20_18 = g3::logTag(&s_12);
                            if ((s_12 & 1) != 0)
                            {
                                operator delete(var_380_1);
                                if ((s_13 & 1) != 0)
                                {
                                    goto label_fec4;
                                }
                            }
                            else if ((s_13 & 1) != 0)
                            {
                                goto label_fec4;
                            }
                        }
                        if (((((x0_97 & 1) == 0 && (s_13 & 1) == 0) || (x0_97 & 1) != 0) && (x20_18 & 1) != 0))
                        {
                        label_ff4c:
                            LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_108 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_4f8_1, "Couldn't open device,error:", 0x1b);
                            void* x20_19 = (arg1 + 9);
                            if ((*x23 & 1) != 0)
                            {
                                x20_19 = arg1[3];
                            }
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_108, x20_19, strlen(x20_19));
                            LogCapture::~LogCapture();
                        }
                        oniGetDeviceList(&s_23, &var_240);
                        int64_t x23_1 = var_240;
                        char* s_35 = s_23;
                        size_t x20_20 = (x23_1 * 0x304);
                        uint64_t x0_113;
                        if (0 == ((x23_1 * 0x304) >> 0x40))
                        {
                            x0_113 = x20_20;
                        }
                        else
                        {
                            x0_113 = -1;
                        }
                        void* x0_114 = operator new[](x0_113);
                        var_520 = x0_114;
                        memcpy(x0_114, s_35, x20_20);
                        oniReleaseDeviceList(s_35);
                        if (x23_1 == 0)
                        {
                            x23 = var_540_1;
                            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(x23, "not find orbbec devices");
                            uint32_t x9_16 = *data_36198;
                            uint64_t x10_10 = *(data_361a2 + 6);
                            int32_t var_3b0 = data_36190;
                            if ((x9_16 & 1) == 0)
                            {
                                x22 = &*(data_36198 + 1);
                            }
                            else
                            {
                                x22 = x10_10;
                            }
                            __builtin_memset(&s_11, 0, 0x18);
                            size_t x0_195 = strlen(x22);
                            if (x0_195 < -0x10)
                            {
                                goto label_114c8;
                            }
                            if (x0_195 >= 0x17)
                            {
                                uint64_t x19_27 = ((x0_195 + 0x10) & 0xfffffffffffffff0);
                                void* x0_197 = operator new(x19_27);
                                x24 = x0_197;
                                var_398 = x0_197;
                                s_11 = (x19_27 | 1);
                                size_t var_3a0_1 = x0_195;
                            }
                            else
                            {
                                void var_3a7;
                                x24 = &var_3a7;
                                s_11 = (x0_195 << 1);
                            }
                            if ((x0_195 >= 0x17 || (x0_195 < 0x17 && x0_195 != 0)))
                            {
                                memcpy(x24, x22, x0_195);
                            }
                            *(x24 + x0_195) = 0;
                            int32_t x20_33;
                            if ((g3::logLevel(&var_3b0) & 1) == 0)
                            {
                                x20_33 = 0;
                                if ((s_11 & 1) != 0)
                                {
                                label_10714:
                                    operator delete(var_398);
                                    if ((x20_33 & 1) == 0)
                                    {
                                        goto label_107e8;
                                    }
                                    goto label_107ac;
                                }
                            }
                            else
                            {
                                int64_t s_10;
                                __builtin_memset(&s_10, 0, 0x18);
                                char* x20_32 = *rgbd::OBCTAG;
                                size_t x0_202 = strlen(x20_32);
                                if (x0_202 < -0x10)
                                {
                                    goto label_114e4;
                                }
                                void* var_3b8_1;
                                if (x0_202 >= 0x17)
                                {
                                    uint64_t x19_28 = ((x0_202 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_205 = operator new(x19_28);
                                    x24 = x0_205;
                                    var_3b8_1 = x0_205;
                                    s_10 = (x19_28 | 1);
                                    size_t var_3c0_1 = x0_202;
                                }
                                else
                                {
                                    x24 = (&s_10 | 1);
                                    s_10 = (x0_202 << 1);
                                }
                                if ((x0_202 >= 0x17 || (x0_202 < 0x17 && x0_202 != 0)))
                                {
                                    memcpy(x24, x20_32, x0_202);
                                }
                                *(x24 + x0_202) = 0;
                                x20_33 = g3::logTag(&s_10);
                                if ((s_10 & 1) != 0)
                                {
                                    operator delete(var_3b8_1);
                                    if ((s_11 & 1) != 0)
                                    {
                                        goto label_10714;
                                    }
                                }
                                else if ((s_11 & 1) != 0)
                                {
                                    goto label_10714;
                                }
                            }
                            if ((x20_33 & 1) == 0)
                            {
                            label_107e8:
                                operator delete[](var_520);
                                x19_26 = &*nullptr->ident.signature[1];
                                goto label_107f4;
                            }
                        label_107ac:
                            LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                            void* x19_29 = (arg1 + 9);
                            if ((*x23 & 1) != 0)
                            {
                                x19_29 = arg1[3];
                            }
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_4f8_1, x19_29, strlen(x19_29));
                            LogCapture::~LogCapture();
                            goto label_107e8;
                        }
                        size_t x0_118;
                        if (x23_1 >= 1)
                        {
                            int64_t x26_1 = 0;
                            x24 = (var_520 + 0x200);
                            do
                            {
                                char* x22_10;
                                if ((*data_36118 & 1) == 0)
                                {
                                    x22_10 = &*(data_36118 + 1);
                                }
                                else
                                {
                                    x22_10 = *(data_36122 + 6);
                                }
                                int32_t var_3e8 = data_36110;
                                int64_t s_9;
                                __builtin_memset(&s_9, 0, 0x18);
                                x0_118 = strlen(x22_10);
                                if (x0_118 < -0x10)
                                {
                                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    break;
                                }
                                void* var_3d0_1;
                                void* x19_17;
                                if (x0_118 >= 0x17)
                                {
                                    uint64_t x27_1 = ((x0_118 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_120 = operator new(x27_1);
                                    x19_17 = x0_120;
                                    var_3d0_1 = x0_120;
                                    s_9 = (x27_1 | 1);
                                    size_t var_3d8_1 = x0_118;
                                }
                                else
                                {
                                    x19_17 = &*s_9[1];
                                    s_9 = (x0_118 << 1);
                                }
                                if ((x0_118 >= 0x17 || (x0_118 < 0x17 && x0_118 != 0)))
                                {
                                    memcpy(x19_17, x22_10, x0_118);
                                }
                                *(x19_17 + x0_118) = 0;
                                int32_t x0_123 = g3::logLevel(&var_3e8);
                                int32_t x20_23;
                                if ((x0_123 & 1) == 0)
                                {
                                    x20_23 = 0;
                                    if ((s_9 & 1) != 0)
                                    {
                                    label_10100:
                                        operator delete(var_3d0_1);
                                        if ((x20_23 & 1) != 0)
                                        {
                                            goto label_10188;
                                        }
                                    }
                                }
                                else
                                {
                                    int64_t s_8;
                                    __builtin_memset(&s_8, 0, 0x18);
                                    uint64_t x20_22 = *rgbd::OBCTAG;
                                    size_t x0_125 = strlen(x20_22);
                                    if (x0_125 < -0x10)
                                    {
                                        break;
                                    }
                                    void* var_3f0_1;
                                    void* x19_18;
                                    if (x0_125 >= 0x17)
                                    {
                                        uint64_t x27_2 = ((x0_125 + 0x10) & 0xfffffffffffffff0);
                                        void* x0_128 = operator new(x27_2);
                                        x19_18 = x0_128;
                                        var_3f0_1 = x0_128;
                                        s_8 = (x27_2 | 1);
                                        size_t var_3f8_1 = x0_125;
                                    }
                                    else
                                    {
                                        x19_18 = (&s_8 | 1);
                                        s_8 = (x0_125 << 1);
                                    }
                                    if ((x0_125 >= 0x17 || (x0_125 < 0x17 && x0_125 != 0)))
                                    {
                                        memcpy(x19_18, x20_22, x0_125);
                                    }
                                    *(x19_18 + x0_125) = 0;
                                    x20_23 = g3::logTag(&s_8);
                                    if ((s_8 & 1) != 0)
                                    {
                                        operator delete(var_3f0_1);
                                        if ((s_9 & 1) != 0)
                                        {
                                            goto label_10100;
                                        }
                                    }
                                    else if ((s_9 & 1) != 0)
                                    {
                                        goto label_10100;
                                    }
                                }
                                if (((((x0_123 & 1) == 0 && (s_9 & 1) == 0) || (x0_123 & 1) != 0) && (x20_23 & 1) != 0))
                                {
                                label_10188:
                                    LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                                    uint16_t x0_149 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(var_4f8_1, "name: ", 6), x24, strlen(x24)), " url:", 5), (x24 - 0x200), strlen((x24 - 0x200))), " vendor:", 8), (x24 - 0x100), strlen((x24 - 0x100))), " PID:", 5);
                                    *(x24 + 0x102);
                                    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_149);
                                    LogCapture::~LogCapture();
                                }
                                x26_1 = (x26_1 + 1);
                                x24 = (x24 + 0x304);
                            } while (x26_1 < x23_1);
                            if (x0_118 < -0x10)
                            {
                                std::__ndk1::__basic_string_common<true>::__throw_length_error();
                            }
                        }
                        if ((x23_1 < 1 || (x23_1 >= 1 && x0_118 >= -0x10)))
                        {
                            sleep(1);
                            var_514_1 = (var_514_1 - 1);
                            operator delete[](var_520);
                            x23 = var_540_1;
                            continue;
                        }
                    }
                }
                if ((x0_86 < -0x10 || (x0_86 >= -0x10 && x0_92 >= -0x10)))
                {
                    std::__ndk1::__basic_string_common<true>::__throw_length_error();
                }
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
                break;
            }
            if (var_514_1 != 0)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_11490:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_11498:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_114a0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_114a8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_114b0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_114b8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_114c0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_114c8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
                break;
            }
            if (var_514_1 != 0)
            {
                s_23 = arg2;
                void* x0_190 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x3a], arg2);
                int32_t i_2;
                do
                {
                    i_2 = __stxr((__ldxr(arg4) + 1), arg4);
                } while (i_2 != 0);
                x19_26 = *(x0_190 + 0x30);
                *(x0_190 + 0x28) = &x0_59[3];
                *(x0_190 + 0x30) = var_508;
                if (x19_26 != 0)
                {
                    int64_t x9_15;
                    int32_t i_3;
                    do
                    {
                        x9_15 = __ldaxr(&x19_26[1]);
                        i_3 = __stlxr((x9_15 - 1), &x19_26[1]);
                    } while (i_3 != 0);
                    if (x9_15 == 0)
                    {
                        *(*x19_26 + 0x10)(x19_26);
                        std::__ndk1::__shared_weak_count::__release_weak();
                    }
                    x19_26 = nullptr;
                    if ((s_24 & 1) != 0)
                    {
                        goto label_107fc;
                    }
                    goto label_1080c;
                }
            label_107f4:
                if ((s_24 & 1) != 0)
                {
                    goto label_107fc;
                }
                goto label_1080c;
            }
            x19_26 = &*nullptr->ident.signature[1];
            if ((s_24 & 1) == 0)
            {
                goto label_1080c;
            }
        label_107fc:
            operator delete(var_d8_1);
        label_1080c:
            int64_t x8_158;
            int32_t i_4;
            do
            {
                x8_158 = __ldaxr(arg4);
                i_4 = __stlxr((x8_158 - 1), arg4);
            } while (i_4 != 0);
            if (x8_158 == 0)
            {
                *(*var_508 + 0x10)(var_508);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
            arg4 = var_570;
            if ((x19_26 | 4) != 4)
            {
                x21_6 = 0;
                goto label_10df4;
            }
            bool cond:14_1 = (var_548_1 + 1) < s_38;
            var_548_1 = (var_548_1 + 1);
            if (!(cond:14_1))
            {
                goto label_10874;
            }
        }
        goto label_114d0;
    }
label_10874:
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_25 = operator new(0x30);
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_36 = s_25;
    *(s_25 + 0x20) = 0;
    __builtin_memset(s_25, 0, 0x1d);
    *(s_25 + 0x28) = 1;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_26 = operator new(0x30);
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_28 = arg2;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_37 = s_26;
    *(s_26 + 0x28) = 1;
    *(s_26 + 0x20) = 0;
    __builtin_memset(s_26, 0, 0x1d);
    var_240 = arg1;
    s_23 = s_28;
    int32_t x0_221;
    x0_221 = sub_11c18(&var_240, *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x3a], s_28) + 0x28), s_36, 3, *var_5f0_1);
    int32_t x0_225;
    if ((x0_221 & 1) != 0)
    {
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_29 = arg2;
        s_23 = s_29;
        x0_225 = sub_11c18(&var_240, *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x3a], s_29) + 0x28), s_37, 1, *var_5f0_1);
        if ((x0_225 & 1) != 0)
        {
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_30 = arg2;
            void* x26_2 = arg4;
            int32_t var_440 = 0;
            int32_t var_444 = 4;
            s_23 = s_30;
            if (oniDeviceSetProperty(*(*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x3a], s_30) + 0x28) + 8), 0x1080ffbe, &var_440, var_444) != 0)
            {
                goto label_10f84;
            }
            if ((*data_36118 & 1) == 0)
            {
                x23 = &*(data_36118 + 1);
            }
            else
            {
                x23 = *(data_36122 + 6);
            }
            int32_t var_468 = data_36110;
            int64_t s_5;
            __builtin_memset(&s_5, 0, 0x18);
            size_t x0_231 = strlen(x23);
            if (x0_231 < -0x10)
            {
                goto label_11514;
            }
            void* var_450_1;
            void* x24_4;
            if (x0_231 >= 0x17)
            {
                arg4 = ((x0_231 + 0x10) & 0xfffffffffffffff0);
                void* x0_279 = operator new(arg4);
                x24_4 = x0_279;
                size_t var_458_1 = x0_231;
                var_450_1 = x0_279;
                s_5 = (arg4 | 1);
            }
            else
            {
                x24_4 = &*s_5[1];
                s_5 = (x0_231 << 1);
            }
            if ((x0_231 >= 0x17 || (x0_231 < 0x17 && x0_231 != 0)))
            {
                memcpy(x24_4, x23, x0_231);
            }
            *(x24_4 + x0_231) = 0;
            int32_t x22_23;
            if ((g3::logLevel(&var_468) & 1) == 0)
            {
                x22_23 = 0;
                if ((s_5 & 1) != 0)
                {
                label_10ed8:
                    operator delete(var_450_1);
                    if ((x22_23 & 1) == 0)
                    {
                        goto label_10f84;
                    }
                    goto label_10f64;
                }
            }
            else
            {
                int64_t s_4;
                __builtin_memset(&s_4, 0, 0x18);
                uint64_t x22_22 = *rgbd::OBCTAG;
                size_t x0_284 = strlen(x22_22);
                if (x0_284 < -0x10)
                {
                    goto label_11534;
                }
                void* var_470_1;
                void* x24_7;
                if (x0_284 >= 0x17)
                {
                    arg4 = ((x0_284 + 0x10) & 0xfffffffffffffff0);
                    void* x0_287 = operator new(arg4);
                    x24_7 = x0_287;
                    size_t var_478_1 = x0_284;
                    var_470_1 = x0_287;
                    s_4 = (arg4 | 1);
                }
                else
                {
                    x24_7 = (&s_4 | 1);
                    s_4 = (x0_284 << 1);
                }
                if ((x0_284 >= 0x17 || (x0_284 < 0x17 && x0_284 != 0)))
                {
                    memcpy(x24_7, x22_22, x0_284);
                }
                *(x24_7 + x0_284) = 0;
                x22_23 = g3::logTag(&s_4);
                if ((s_4 & 1) != 0)
                {
                    operator delete(var_470_1);
                    if ((s_5 & 1) != 0)
                    {
                        goto label_10ed8;
                    }
                }
                else if ((s_5 & 1) != 0)
                {
                    goto label_10ed8;
                }
            }
            if ((x22_23 & 1) == 0)
            {
                goto label_10f84;
            }
        label_10f64:
            LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_228, "LDP close success", 0x11);
            LogCapture::~LogCapture();
        label_10f84:
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_31 = arg2;
            var_444 = 0x78;
            s_23 = s_31;
            if (oniDeviceGetProperty(*(*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x3a], s_31) + 0x28) + 8), 0xe, (x29 - 0xd8), &var_444) == 0)
            {
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_32 = arg2;
                s_23 = s_32;
                void* x0_301 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x11], s_32);
                void* x21_11 = *(x0_301 + 0x58);
                *(x0_301 + 0x58) = s_37;
                if (x21_11 != 0)
                {
                    openni::VideoStream::~VideoStream();
                    operator delete(x21_11);
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** s_33 = arg2;
                s_23 = s_33;
                void* x0_305 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x11], s_33);
                void* x20_39 = *(x0_305 + 0x60);
                *(x0_305 + 0x60) = s_36;
                if (x20_39 != 0)
                {
                    openni::VideoStream::~VideoStream();
                    operator delete(x20_39);
                }
                char* x22_25;
                if ((*data_36118 & 1) == 0)
                {
                    x22_25 = &*(data_36118 + 1);
                }
                else
                {
                    x22_25 = *(data_36122 + 6);
                }
                int32_t var_4d8 = data_36110;
                int64_t s_1;
                __builtin_memset(&s_1, 0, 0x18);
                size_t x0_309 = strlen(x22_25);
                if (x0_309 < -0x10)
                {
                    goto label_11524;
                }
                void* var_4c0_1;
                void* x23_5;
                if (x0_309 >= 0x17)
                {
                    uint64_t x24_10 = ((x0_309 + 0x10) & 0xfffffffffffffff0);
                    void* x0_319 = operator new(x24_10);
                    x23_5 = x0_319;
                    size_t var_4c8_1 = x0_309;
                    var_4c0_1 = x0_319;
                    s_1 = (x24_10 | 1);
                    arg4 = x26_2;
                }
                else
                {
                    x23_5 = &*s_1[1];
                    arg4 = x26_2;
                    s_1 = (x0_309 << 1);
                }
                if ((x0_309 >= 0x17 || (x0_309 < 0x17 && x0_309 != 0)))
                {
                    memcpy(x23_5, x22_25, x0_309);
                }
                *(x23_5 + x0_309) = 0;
                int32_t x19_34;
                if ((g3::logLevel(&var_4d8) & 1) == 0)
                {
                    x19_34 = 0;
                    if ((s_1 & 1) != 0)
                    {
                    label_11278:
                        operator delete(var_4c0_1);
                        if ((x19_34 & 1) == 0)
                        {
                            goto label_1143c;
                        }
                        goto label_113fc;
                    }
                }
                else
                {
                    int64_t s;
                    __builtin_memset(&s, 0, 0x18);
                    uint64_t x19_33 = *rgbd::OBCTAG;
                    size_t x0_324 = strlen(x19_33);
                    if (x0_324 < -0x10)
                    {
                        goto label_1153c;
                    }
                    void* var_4e0_1;
                    void* x21_13;
                    if (x0_324 >= 0x17)
                    {
                        uint64_t x22_28 = ((x0_324 + 0x10) & 0xfffffffffffffff0);
                        void* x0_338 = operator new(x22_28);
                        x21_13 = x0_338;
                        size_t var_4e8_1 = x0_324;
                        var_4e0_1 = x0_338;
                        s = (x22_28 | 1);
                    }
                    else
                    {
                        x21_13 = (&s | 1);
                        s = (x0_324 << 1);
                    }
                    if ((x0_324 >= 0x17 || (x0_324 < 0x17 && x0_324 != 0)))
                    {
                        memcpy(x21_13, x19_33, x0_324);
                    }
                    *(x21_13 + x0_324) = 0;
                    x19_34 = g3::logTag(&s);
                    if ((s & 1) != 0)
                    {
                        operator delete(var_4e0_1);
                        if ((s_1 & 1) != 0)
                        {
                            goto label_11278;
                        }
                    }
                    else if ((s_1 & 1) != 0)
                    {
                        goto label_11278;
                    }
                }
                if ((x19_34 & 1) != 0)
                {
                label_113fc:
                    LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_344 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_228, "Open device success,serial_num:", 0x1f);
                    uint64_t x8_227 = *arg2;
                    int32_t temp1_1 = (x8_227 & 1);
                    void* x1_67;
                    if (temp1_1 != 0)
                    {
                        x1_67 = *(arg2 + 0x10);
                    }
                    else
                    {
                        x1_67 = &arg2[1];
                    }
                    uint64_t x2_59;
                    if (temp1_1 == 0)
                    {
                        x2_59 = (x8_227 >> 1);
                    }
                    else
                    {
                        x2_59 = *(arg2 + 8);
                    }
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_344, x1_67, x2_59);
                    LogCapture::~LogCapture();
                    goto label_1143c;
                }
            label_1143c:
                s_36 = nullptr;
                s_37 = nullptr;
                x21_6 = 1;
            }
            else
            {
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(&arg1[1], "Couldn't get cam param");
                if ((*data_36198 & 1) == 0)
                {
                    x23 = &*(data_36198 + 1);
                }
                else
                {
                    x23 = *(data_361a2 + 6);
                }
                int32_t var_4a0 = data_36190;
                int64_t s_3;
                __builtin_memset(&s_3, 0, 0x18);
                size_t x0_299 = strlen(x23);
                if (x0_299 < -0x10)
                {
                    goto label_1150c;
                }
                void* var_488_1;
                void* x24_8;
                if (x0_299 >= 0x17)
                {
                    arg4 = ((x0_299 + 0x10) & 0xfffffffffffffff0);
                    void* x0_311 = operator new(arg4);
                    x24_8 = x0_311;
                    size_t var_490_1 = x0_299;
                    var_488_1 = x0_311;
                    s_3 = (arg4 | 1);
                }
                else
                {
                    x24_8 = &*s_3[1];
                    s_3 = (x0_299 << 1);
                }
                if ((x0_299 >= 0x17 || (x0_299 < 0x17 && x0_299 != 0)))
                {
                    memcpy(x24_8, x23, x0_299);
                }
                *(x24_8 + x0_299) = 0;
                int32_t x22_27;
                if ((g3::logLevel(&var_4a0) & 1) == 0)
                {
                    x22_27 = 0;
                    arg4 = x26_2;
                    if ((s_3 & 1) != 0)
                    {
                    label_111c8:
                        operator delete(var_488_1);
                        if ((x22_27 & 1) == 0)
                        {
                            goto label_1135c;
                        }
                        goto label_11308;
                    }
                }
                else
                {
                    int64_t s_2;
                    __builtin_memset(&s_2, 0, 0x18);
                    uint64_t x22_26 = *rgbd::OBCTAG;
                    size_t x0_316 = strlen(x22_26);
                    if (x0_316 < -0x10)
                    {
                        goto label_1152c;
                    }
                    void* var_4a8_1;
                    void* x24_9;
                    if (x0_316 >= 0x17)
                    {
                        uint64_t x25_2 = ((x0_316 + 0x10) & 0xfffffffffffffff0);
                        void* x0_327 = operator new(x25_2);
                        x24_9 = x0_327;
                        size_t var_4b0_1 = x0_316;
                        var_4a8_1 = x0_327;
                        s_2 = (x25_2 | 1);
                        arg4 = x26_2;
                    }
                    else
                    {
                        arg4 = x26_2;
                        x24_9 = (&s_2 | 1);
                        s_2 = (x0_316 << 1);
                    }
                    if ((x0_316 >= 0x17 || (x0_316 < 0x17 && x0_316 != 0)))
                    {
                        memcpy(x24_9, x22_26, x0_316);
                    }
                    *(x24_9 + x0_316) = 0;
                    x22_27 = g3::logTag(&s_2);
                    if ((s_2 & 1) != 0)
                    {
                        operator delete(var_4a8_1);
                        if ((s_3 & 1) != 0)
                        {
                            goto label_111c8;
                        }
                    }
                    else if ((s_3 & 1) != 0)
                    {
                        goto label_111c8;
                    }
                }
                if ((x22_27 & 1) != 0)
                {
                label_11308:
                    LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                    char* x21_14;
                    if ((arg1[1] & 1) != 0)
                    {
                        x21_14 = arg1[3];
                    }
                    else
                    {
                        x21_14 = (arg1 + 9);
                    }
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_228, x21_14, strlen(x21_14));
                    LogCapture::~LogCapture();
                    goto label_1135c;
                }
            label_1135c:
                x21_6 = 0;
                if (s_37 != 0)
                {
                    goto label_10dd0;
                }
            }
        }
    }
    char* x22_18;
    if ((((x0_221 & 1) == 0 || ((x0_221 & 1) != 0 && (x0_225 & 1) == 0)) && (*data_36198 & 1) == 0))
    {
        x22_18 = &*(data_36198 + 1);
    label_10a94:
        int32_t var_420 = data_36190;
        int64_t s_7;
        __builtin_memset(&s_7, 0, 0x18);
        size_t x0_236 = strlen(x22_18);
        if (x0_236 < -0x10)
        {
            goto label_114f4;
        }
        void* var_408_1;
        if (x0_236 >= 0x17)
        {
            x24 = ((x0_236 + 0x10) & 0xfffffffffffffff0);
            void* x0_247 = operator new(x24);
            x23 = x0_247;
            var_408_1 = x0_247;
            s_7 = (x24 | 1);
            size_t var_410_1 = x0_236;
        }
        else
        {
            x23 = &*s_7[1];
            s_7 = (x0_236 << 1);
        }
        if ((x0_236 >= 0x17 || (x0_236 < 0x17 && x0_236 != 0)))
        {
            memcpy(x23, x22_18, x0_236);
        }
        *(x23 + x0_236) = 0;
        int32_t x21_9;
        if ((g3::logLevel(&var_420) & 1) == 0)
        {
            x21_9 = 0;
            if ((s_7 & 1) != 0)
            {
            label_10c3c:
                operator delete(var_408_1);
                if ((x21_9 & 1) == 0)
                {
                    goto label_10dc8;
                }
                goto label_10da8;
            }
        }
        else
        {
            int64_t s_6;
            __builtin_memset(&s_6, 0, 0x18);
            uint64_t x21_8 = *rgbd::OBCTAG;
            size_t x0_252 = strlen(x21_8);
            if (x0_252 < -0x10)
            {
                goto label_11504;
            }
            void* var_428_1;
            void* x23_2;
            if (x0_252 >= 0x17)
            {
                uint64_t x24_5 = ((x0_252 + 0x10) & 0xfffffffffffffff0);
                void* x0_265 = operator new(x24_5);
                x23_2 = x0_265;
                size_t var_430_1 = x0_252;
                var_428_1 = x0_265;
                s_6 = (x24_5 | 1);
            }
            else
            {
                x23_2 = (&s_6 | 1);
                s_6 = (x0_252 << 1);
            }
            if ((x0_252 >= 0x17 || (x0_252 < 0x17 && x0_252 != 0)))
            {
                memcpy(x23_2, x21_8, x0_252);
            }
            *(x23_2 + x0_252) = 0;
            x21_9 = g3::logTag(&s_6);
            if ((s_6 & 1) != 0)
            {
                operator delete(var_428_1);
                if ((s_7 & 1) != 0)
                {
                    goto label_10c3c;
                }
            }
            else if ((s_7 & 1) != 0)
            {
                goto label_10c3c;
            }
        }
        if ((x21_9 & 1) == 0)
        {
            goto label_10dc8;
        }
    label_10da8:
        LogCapture::LogCapture(&s_23, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_228, "Couldn't start the stream", 0x19);
        LogCapture::~LogCapture();
    label_10dc8:
        x21_6 = 0;
    label_10dd0:
        openni::VideoStream::~VideoStream();
        operator delete(s_37);
    }
    if ((((x0_221 & 1) != 0 && (x0_225 & 1) != 0) || (((x0_221 & 1) == 0 || ((x0_221 & 1) != 0 && (x0_225 & 1) == 0)) && (*data_36198 & 1) == 0)))
    {
        if (s_36 == 0)
        {
            goto label_10df4;
        }
        openni::VideoStream::~VideoStream();
        operator delete(s_36);
        goto label_10df4;
    }
    if ((((x0_221 & 1) == 0 || ((x0_221 & 1) != 0 && (x0_225 & 1) == 0)) && (*data_36198 & 1) != 0))
    {
        x22_18 = *(data_361a2 + 6);
        goto label_10a94;
    }
}

int64_t sub_11550(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, void* arg5, int64_t* arg6)
{
    operator delete[](arg5);
    if ((*(arg3 - 0xd8) & 1) != 0)
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg2);
        i = __stlxr((x8_1 - 1), arg2);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg6 + 0x10)(arg6);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_11554(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) != 0 && (*(arg3 - 0xd8) & 1) != 0) || ((arg6 & 1) == 0 && (*(arg3 - 0xd8) & 1) != 0)))
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_3;
    int32_t i;
    do
    {
        x8_3 = __ldaxr(arg2);
        i = __stlxr((x8_3 - 1), arg2);
    } while (i != 0);
    if (x8_3 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_11564(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) != 0 && (*(arg3 - 0xd8) & 1) != 0) || ((arg6 & 1) == 0 && (*(arg3 - 0xd8) & 1) != 0)))
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_3;
    int32_t i;
    do
    {
        x8_3 = __ldaxr(arg2);
        i = __stlxr((x8_3 - 1), arg2);
    } while (i != 0);
    if (x8_3 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_11574(int64_t arg1, void* arg2 @ x25, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    operator delete[](arg2);
    int64_t* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_11584(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5)
{
    if ((*(arg3 - 0xd8) & 1) != 0)
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg2);
        i = __stlxr((x8_1 - 1), arg2);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_5;
    int64_t* x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_11590(int64_t arg1, void* arg2 @ x25)
{
    operator delete[](arg2);
    int64_t* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_11594(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) != 0 && (*(arg3 - 0xd8) & 1) != 0) || ((arg6 & 1) == 0 && (*(arg3 - 0xd8) & 1) != 0)))
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_3;
    int32_t i;
    do
    {
        x8_3 = __ldaxr(arg2);
        i = __stlxr((x8_3 - 1), arg2);
    } while (i != 0);
    if (x8_3 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_115ac(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, void* arg5, int64_t* arg6, char arg7, void* arg8)
{
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    operator delete[](arg5);
    if ((*(arg3 - 0xd8) & 1) != 0)
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_2;
    int32_t i;
    do
    {
        x8_2 = __ldaxr(arg2);
        i = __stlxr((x8_2 - 1), arg2);
    } while (i != 0);
    if (x8_2 == 0)
    {
        *(*arg6 + 0x10)(arg6);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_7;
    int64_t* x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_115b4(int64_t arg1, void* arg2 @ x26)
{
    operator delete[](arg2);
    int64_t* x0_4;
    int64_t* x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_4, x1);
}

int64_t sub_115bc(int64_t arg1, void* arg2 @ x26, char arg3, void* arg4, char arg5, void* arg6)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    operator delete[](arg2);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_115dc(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x26)
{
    LogCapture::~LogCapture();
    if (arg3 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
    }
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_115e0(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x26)
{
    if (arg3 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
    }
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_115e4(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x26, char arg5, void* arg6, char arg7, void* arg8)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
        if (arg3 != 0)
        {
            goto label_11804;
        }
    }
    if (((((arg5 & 1) == 0 && (arg7 & 1) == 0) || ((arg5 & 1) != 0 && (arg7 & 1) == 0)) && arg3 != 0))
    {
    label_11804:
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
    }
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_8;
    int64_t* x1;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_8, x1);
}

int64_t sub_1161c(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x26, char arg5, void* arg6, char arg7, void* arg8)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
        if (arg3 != 0)
        {
            goto label_11804;
        }
    }
    if (((((arg5 & 1) == 0 && (arg7 & 1) == 0) || ((arg5 & 1) != 0 && (arg7 & 1) == 0)) && arg3 != 0))
    {
    label_11804:
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
    }
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_8;
    int64_t* x1;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_8, x1);
}

int64_t sub_1164c(int64_t arg1, void* arg2 @ x26, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    operator delete[](arg2);
    int64_t* x0_5;
    int64_t* x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_11670(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x26, char arg5, void* arg6)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && arg3 != 0) || ((arg5 & 1) != 0 && arg3 != 0)))
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
    }
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_7;
    int64_t* x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_1168c(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x26, char arg5, void* arg6)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && arg3 != 0) || ((arg5 & 1) != 0 && arg3 != 0)))
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
    }
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_7;
    int64_t* x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_116bc(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x25)
{
    openni::VideoStream::~VideoStream();
    operator delete(arg3);
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_116c0(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x25, char arg5, void* arg6, char arg7, void* arg8)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg3);
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_8;
    int64_t* x1;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_8, x1);
}

int64_t sub_116e4(int64_t arg1, void* arg2 @ x25)
{
    LogCapture::~LogCapture();
    operator delete[](arg2);
    int64_t* x0_2;
    int64_t* x1;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_2, x1);
}

int64_t sub_116ec(int64_t arg1, void* arg2 @ x25, char arg3, void* arg4, char arg5, void* arg6)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    operator delete[](arg2);
    int64_t* x0_4;
    int64_t* x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_4, x1);
}

int64_t sub_11710(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x25, char arg5, void* arg6)
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    openni::VideoStream::~VideoStream();
    operator delete(arg3);
    if (arg2 != 0)
    {
        openni::VideoStream::~VideoStream();
        operator delete(arg2);
    }
    operator delete[](arg4);
    int64_t* x0_7;
    int64_t* x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_11744(int64_t arg1, void* arg2 @ x25, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    operator delete[](arg2);
    int64_t* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_1175c(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, void* arg5, int64_t* arg6)
{
    LogCapture::~LogCapture();
    operator delete[](arg5);
    if ((*(arg3 - 0xd8) & 1) != 0)
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg2);
        i = __stlxr((x8_1 - 1), arg2);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg6 + 0x10)(arg6);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_11764(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, void* arg5, int64_t* arg6, char arg7, void* arg8, char arg9, void* arg10)
{
    if ((arg7 & 1) != 0)
    {
        operator delete(arg8);
    }
    if ((((arg7 & 1) == 0 && (arg9 & 1) != 0) || ((arg7 & 1) != 0 && (arg9 & 1) != 0)))
    {
        operator delete(arg10);
    }
    operator delete[](arg5);
    if ((*(arg3 - 0xd8) & 1) != 0)
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_3;
    int32_t i;
    do
    {
        x8_3 = __ldaxr(arg2);
        i = __stlxr((x8_3 - 1), arg2);
    } while (i != 0);
    if (x8_3 == 0)
    {
        *(*arg6 + 0x10)(arg6);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_8;
    int64_t* x1;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_8, x1);
}

int64_t sub_11784(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x25, char arg5, void* arg6, char arg7, void* arg8)
{
    int64_t x21 = arg1;
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
        x21 = _Unwind_Resume(x21);
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
        if (arg2 != 0)
        {
            openni::VideoStream::~VideoStream();
            operator delete(arg2);
        }
        operator delete[](arg4);
    }
    int64_t* x0_10;
    int64_t* x1;
    x0_10 = _Unwind_Resume(x21);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_10, x1);
}

int64_t sub_117a8(int64_t arg1 @ x25, void* arg2 @ x29, void* arg3, void* arg4, int64_t* arg5, char arg6, void* arg7)
{
    _Unwind_Resume();
    int64_t x0 = _Unwind_Resume();
    LogCapture::~LogCapture();
    int64_t x0_2 = _Unwind_Resume(x0);
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    operator delete[](arg4);
    if ((*(arg2 - 0xd8) & 1) != 0)
    {
        operator delete(*(arg2 - 0xc8));
    }
    int64_t x8_2;
    int32_t i;
    do
    {
        x8_2 = __ldaxr(arg1);
        i = __stlxr((x8_2 - 1), arg1);
    } while (i != 0);
    if (x8_2 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg3);
    int64_t* x0_10;
    int64_t* x1;
    x0_10 = _Unwind_Resume(x0_2);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_10, x1);
}

int64_t sub_117dc(int64_t arg1, void* arg2 @ x19, void* arg3 @ x20, void* arg4 @ x25, char arg5, void* arg6)
{
    int64_t x21 = arg1;
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
        x21 = _Unwind_Resume(x21);
        openni::VideoStream::~VideoStream();
        operator delete(arg3);
        if (arg2 != 0)
        {
            openni::VideoStream::~VideoStream();
            operator delete(arg2);
        }
        operator delete[](arg4);
    }
    int64_t* x0_9;
    int64_t* x1;
    x0_9 = _Unwind_Resume(x21);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_9, x1);
}

int64_t sub_11838(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || ((arg6 & 1) != 0 && (arg8 & 1) != 0)))
    {
        operator delete(arg9);
        if ((*(arg3 - 0xd8) & 1) != 0)
        {
            goto label_11a04;
        }
    }
    if (((((arg6 & 1) == 0 && (arg8 & 1) == 0) || ((arg6 & 1) != 0 && (arg8 & 1) == 0)) && (*(arg3 - 0xd8) & 1) != 0))
    {
    label_11a04:
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_4;
    int32_t i;
    do
    {
        x8_4 = __ldaxr(arg2);
        i = __stlxr((x8_4 - 1), arg2);
    } while (i != 0);
    if (x8_4 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_7;
    int64_t* x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_1185c(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || ((arg6 & 1) != 0 && (arg8 & 1) != 0)))
    {
        operator delete(arg9);
        if ((*(arg3 - 0xd8) & 1) != 0)
        {
            goto label_11a04;
        }
    }
    if (((((arg6 & 1) == 0 && (arg8 & 1) == 0) || ((arg6 & 1) != 0 && (arg8 & 1) == 0)) && (*(arg3 - 0xd8) & 1) != 0))
    {
    label_11a04:
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_4;
    int32_t i;
    do
    {
        x8_4 = __ldaxr(arg2);
        i = __stlxr((x8_4 - 1), arg2);
    } while (i != 0);
    if (x8_4 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_7;
    int64_t* x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_11880(int64_t arg1, void* arg2 @ x25, char arg3, void* arg4, char arg5, void* arg6)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    operator delete[](arg2);
    int64_t* x0_4;
    int64_t* x1;
    x0_4 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_4, x1);
}

int64_t sub_118b0(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (*(arg3 - 0xd8) & 1) != 0) || ((arg6 & 1) != 0 && (*(arg3 - 0xd8) & 1) != 0)))
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_3;
    int32_t i;
    do
    {
        x8_3 = __ldaxr(arg2);
        i = __stlxr((x8_3 - 1), arg2);
    } while (i != 0);
    if (x8_3 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_118c4(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (*(arg3 - 0xd8) & 1) != 0) || ((arg6 & 1) != 0 && (*(arg3 - 0xd8) & 1) != 0)))
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_3;
    int32_t i;
    do
    {
        x8_3 = __ldaxr(arg2);
        i = __stlxr((x8_3 - 1), arg2);
    } while (i != 0);
    if (x8_3 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t sub_118ec(int64_t arg1, void* arg2 @ x25, char arg3, void* arg4)
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    operator delete[](arg2);
    int64_t* x0_3;
    int64_t* x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_3, x1);
}

int64_t sub_11904(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5)
{
    LogCapture::~LogCapture();
    if ((*(arg3 - 0xd8) & 1) != 0)
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_1;
    int32_t i;
    do
    {
        x8_1 = __ldaxr(arg2);
        i = __stlxr((x8_1 - 1), arg2);
    } while (i != 0);
    if (x8_1 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_5;
    int64_t* x1;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_5, x1);
}

int64_t sub_11910(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (arg8 & 1) != 0) || ((arg6 & 1) != 0 && (arg8 & 1) != 0)))
    {
        operator delete(arg9);
        if ((*(arg3 - 0xd8) & 1) != 0)
        {
            goto label_11a04;
        }
    }
    if (((((arg6 & 1) == 0 && (arg8 & 1) == 0) || ((arg6 & 1) != 0 && (arg8 & 1) == 0)) && (*(arg3 - 0xd8) & 1) != 0))
    {
    label_11a04:
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_4;
    int32_t i;
    do
    {
        x8_4 = __ldaxr(arg2);
        i = __stlxr((x8_4 - 1), arg2);
    } while (i != 0);
    if (x8_4 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_7;
    int64_t* x1;
    x0_7 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_7, x1);
}

int64_t sub_11964(int64_t arg1, int64_t arg2 @ x25, void* arg3 @ x29, void* arg4, int64_t* arg5, char arg6, void* arg7)
{
    if ((arg6 & 1) != 0)
    {
        operator delete(arg7);
    }
    if ((((arg6 & 1) == 0 && (*(arg3 - 0xd8) & 1) != 0) || ((arg6 & 1) != 0 && (*(arg3 - 0xd8) & 1) != 0)))
    {
        operator delete(*(arg3 - 0xc8));
    }
    int64_t x8_3;
    int32_t i;
    do
    {
        x8_3 = __ldaxr(arg2);
        i = __stlxr((x8_3 - 1), arg2);
    } while (i != 0);
    if (x8_3 == 0)
    {
        *(*arg5 + 0x10)(arg5);
        std::__ndk1::__shared_weak_count::__release_weak();
    }
    operator delete[](arg4);
    int64_t* x0_6;
    int64_t* x1;
    x0_6 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_6, x1);
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int64_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        *x8_2;
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        if (*(*x0_3 + 0x30)(x0_3, x23_1, x22_1, x3_1, arg2) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t sub_11c18(int64_t* arg1, int64_t arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3, int32_t arg4, int16_t arg5)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    void* x24 = *arg1;
    int64_t x0_63;
    if (openni::Device::getSensorInfo(arg2) == 0)
    {
        std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((x24 + 8), "get sensor info failed");
    label_12278:
        x0_63 = 0;
    }
    else
    {
        int64_t s_6;
        size_t var_198;
        if (openni::VideoStream::create(arg3, arg2) != 0)
        {
            char* x0_4 = oniGetExtendedError();
            __builtin_memset(&s_6, 0, 0x18);
            size_t x0_5;
            int128_t v0_1;
            x0_5 = strlen(x0_4);
            if (x0_5 < -0x10)
            {
                goto label_1247c;
            }
            int64_t var_190_1;
            int64_t x21_1;
            if (x0_5 >= 0x17)
            {
                uint64_t x22_1 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
                int64_t x0_10 = operator new(x22_1);
                x21_1 = x0_10;
                var_198 = x0_5;
                var_190_1 = x0_10;
                s_6 = (x22_1 | 1);
            }
            else
            {
                x21_1 = (&s_6 | 1);
                s_6 = (x0_5 << 1);
            }
            if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
            {
                memcpy(x21_1, x0_4, x0_5);
            }
            *(x21_1 + x0_5) = 0;
            if ((*(x24 + 8) & 1) == 0)
            {
                *(x24 + 8) = 0;
            }
            else
            {
                **(x24 + 0x18) = 0;
                uint32_t x8_7 = *(x24 + 8);
                *(x24 + 0x10) = 0;
                if ((x8_7 & 1) != 0)
                {
                    operator delete(*(x24 + 0x18));
                    *(x24 + 8) = 0;
                }
            }
            v0_1 = s_6;
            *(x24 + 0x18) = var_190_1;
            *(x24 + 8) = v0_1;
            uint32_t x10_1 = *data_36198;
            int32_t var_1c8 = data_36190;
            char* x9_1 = *(data_361a2 + 6);
            char s_5;
            __builtin_memset(&s_5, 0, 0x18);
            char* x20_2;
            if ((x10_1 & 1) == 0)
            {
                x20_2 = &*(data_36198 + 1);
            }
            else
            {
                x20_2 = x9_1;
            }
            size_t x0_14 = strlen(x20_2);
            void* var_1b0;
            if (x0_14 < -0x10)
            {
            label_12474:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1247c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_12484:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1248c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_12494:
                int64_t x0_83 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                LogCapture::~LogCapture();
                int64_t x0_85 = _Unwind_Resume(x0_83);
                if ((s_5 & 1) == 0)
                {
                    _Unwind_Resume(x0_85);
                }
                operator delete(var_1b0);
                int32_t* x0_89;
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1_15;
                x0_89 = _Unwind_Resume(x0_85);
                /* tailcall */
                return rgbd::RGBDOrbbec::waitForFrameDaBai(x0_89, x1_15);
            }
            void* x21_3;
            if (x0_14 >= 0x17)
            {
                uint64_t x22_2 = ((x0_14 + 0x10) & 0xfffffffffffffff0);
                void* x0_16 = operator new(x22_2);
                x21_3 = x0_16;
                size_t var_1b8_1 = x0_14;
                var_1b0 = x0_16;
                s_5 = (x22_2 | 1);
            }
            else
            {
                void var_1bf;
                x21_3 = &var_1bf;
                s_5 = (x0_14 << 1);
            }
            if ((x0_14 >= 0x17 || (x0_14 < 0x17 && x0_14 != 0)))
            {
                memcpy(x21_3, x20_2, x0_14);
            }
            *(x21_3 + x0_14) = 0;
            int32_t x19_4;
            if ((g3::logLevel(&var_1c8) & 1) == 0)
            {
                x19_4 = 0;
                if ((s_5 & 1) != 0)
                {
                label_11f08:
                    operator delete(var_1b0);
                    if ((x19_4 & 1) == 0)
                    {
                        goto label_12278;
                    }
                    goto label_11f3c;
                }
            }
            else
            {
                int64_t s_4;
                __builtin_memset(&s_4, 0, 0x18);
                uint64_t x19_3 = *rgbd::OBCTAG;
                size_t x0_21 = strlen(x19_3);
                if (x0_21 < -0x10)
                {
                    goto label_12484;
                }
                void* var_1d0_1;
                void* x21_4;
                if (x0_21 >= 0x17)
                {
                    uint64_t x22_3 = ((x0_21 + 0x10) & 0xfffffffffffffff0);
                    void* x0_23 = operator new(x22_3);
                    x21_4 = x0_23;
                    size_t var_1d8_1 = x0_21;
                    var_1d0_1 = x0_23;
                    s_4 = (x22_3 | 1);
                }
                else
                {
                    x21_4 = (&s_4 | 1);
                    s_4 = (x0_21 << 1);
                }
                if ((x0_21 >= 0x17 || (x0_21 < 0x17 && x0_21 != 0)))
                {
                    memcpy(x21_4, x19_3, x0_21);
                }
                *(x21_4 + x0_21) = 0;
                x19_4 = g3::logTag(&s_4);
                if ((s_4 & 1) != 0)
                {
                    operator delete(var_1d0_1);
                    if ((s_5 & 1) != 0)
                    {
                        goto label_11f08;
                    }
                }
                else if ((s_5 & 1) != 0)
                {
                    goto label_11f08;
                }
            }
            if ((x19_4 & 1) == 0)
            {
                goto label_12278;
            }
        label_11f3c:
            LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_31 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "Couldn't create stream,", 0x17);
            void* x20_4;
            if ((*(x24 + 8) & 1) != 0)
            {
                x20_4 = *(x24 + 0x18);
            }
            else
            {
                x20_4 = (x24 + 9);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_31, x20_4, strlen(x20_4));
        label_12274:
            LogCapture::~LogCapture();
            goto label_12278;
        }
        if (arg4 == 3)
        {
            s_6 = 3;
            int64_t x0_7 = *arg3;
            if (x0_7 != 0)
            {
                oniStreamSetProperty(x0_7, 0x10800001, &s_6, 4);
            }
        }
        int32_t x8_2 = 0x10;
        int32_t var_1a4 = 0x10;
        int64_t x0_8 = *arg3;
        if (x0_8 != 0)
        {
            oniStreamGetProperty(x0_8, 3, &s_6, &var_1a4);
            x8_2 = s_6;
            x0_8 = *arg3;
        }
        int32_t var_1f0 = x8_2;
        int32_t x8_22;
        if (arg5 == 0x60e)
        {
            x8_22 = 0xc8;
        }
        else
        {
            x8_22 = 0xf0;
        }
        int32_t var_1ec_1 = 0x140;
        int32_t var_1e8_1 = x8_22;
        int32_t var_1e4_1 = 0xf;
        if (x0_8 != 0)
        {
            oniStreamSetProperty(x0_8, 3, &var_1f0, 0x10);
            x0_8 = *arg3;
            if (x0_8 != 0)
            {
                x0_8 = oniStreamStart(x0_8);
                if (x0_8 == 0)
                {
                    char* x20_9;
                    if ((*data_36118 & 1) == 0)
                    {
                        x20_9 = &*(data_36118 + 1);
                    }
                    else
                    {
                        x20_9 = *(data_36122 + 6);
                    }
                    int32_t var_248 = data_36110;
                    int64_t s_1;
                    __builtin_memset(&s_1, 0, 0x18);
                    size_t x0_65 = strlen(x20_9);
                    if (x0_65 < -0x10)
                    {
                        goto label_12474;
                    }
                    void* var_230_1;
                    void* x21_8;
                    if (x0_65 >= 0x17)
                    {
                        uint64_t x22_7 = ((x0_65 + 0x10) & 0xfffffffffffffff0);
                        void* x0_67 = operator new(x22_7);
                        x21_8 = x0_67;
                        size_t var_238_1 = x0_65;
                        var_230_1 = x0_67;
                        s_1 = (x22_7 | 1);
                    }
                    else
                    {
                        x21_8 = &*s_1[1];
                        s_1 = (x0_65 << 1);
                    }
                    if ((x0_65 >= 0x17 || (x0_65 < 0x17 && x0_65 != 0)))
                    {
                        memcpy(x21_8, x20_9, x0_65);
                    }
                    *(x21_8 + x0_65) = 0;
                    int32_t x19_13;
                    if ((g3::logLevel(&var_248) & 1) == 0)
                    {
                        x19_13 = 0;
                        if ((s_1 & 1) != 0)
                        {
                        label_12410:
                            operator delete(var_230_1);
                            if ((x19_13 & 1) != 0)
                            {
                                goto label_12444;
                            }
                            goto label_12464;
                        }
                    }
                    else
                    {
                        int64_t s;
                        __builtin_memset(&s, 0, 0x18);
                        uint64_t x19_12 = *rgbd::OBCTAG;
                        size_t x0_72 = strlen(x19_12);
                        if (x0_72 < -0x10)
                        {
                            goto label_12494;
                        }
                        void* var_250_1;
                        void* x21_9;
                        if (x0_72 >= 0x17)
                        {
                            uint64_t x22_8 = ((x0_72 + 0x10) & 0xfffffffffffffff0);
                            void* x0_74 = operator new(x22_8);
                            x21_9 = x0_74;
                            size_t var_258_1 = x0_72;
                            var_250_1 = x0_74;
                            s = (x22_8 | 1);
                        }
                        else
                        {
                            x21_9 = (&s | 1);
                            s = (x0_72 << 1);
                        }
                        if ((x0_72 >= 0x17 || (x0_72 < 0x17 && x0_72 != 0)))
                        {
                            memcpy(x21_9, x19_12, x0_72);
                        }
                        *(x21_9 + x0_72) = 0;
                        x19_13 = g3::logTag(&s);
                        if ((s & 1) != 0)
                        {
                            operator delete(var_250_1);
                            if ((s_1 & 1) != 0)
                            {
                                goto label_12410;
                            }
                        }
                        else if ((s_1 & 1) != 0)
                        {
                            goto label_12410;
                        }
                    }
                    if ((x19_13 & 1) == 0)
                    {
                        goto label_12464;
                    }
                label_12444:
                    LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "Start the stream success", 0x18);
                    LogCapture::~LogCapture();
                label_12464:
                    x0_63 = 1;
                }
            }
        }
        if (((x0_8 == 0 || x0_8 == 0) || ((x0_8 != 0 && x0_8 != 0) && x0_8 != 0)))
        {
            char* x0_35 = oniGetExtendedError(x0_8);
            __builtin_memset(&s_6, 0, 0x18);
            size_t x0_36;
            int128_t v0_2;
            x0_36 = strlen(x0_35);
            if (x0_36 < -0x10)
            {
                goto label_1247c;
            }
            int64_t var_190_2;
            int64_t x21_5;
            if (x0_36 >= 0x17)
            {
                uint64_t x22_4 = ((x0_36 + 0x10) & 0xfffffffffffffff0);
                int64_t x0_38 = operator new(x22_4);
                x21_5 = x0_38;
                var_198 = x0_36;
                var_190_2 = x0_38;
                s_6 = (x22_4 | 1);
            }
            else
            {
                x21_5 = (&s_6 | 1);
                s_6 = (x0_36 << 1);
            }
            if ((x0_36 >= 0x17 || (x0_36 < 0x17 && x0_36 != 0)))
            {
                memcpy(x21_5, x0_35, x0_36);
            }
            *(x21_5 + x0_36) = 0;
            if ((*(x24 + 8) & 1) == 0)
            {
                *(x24 + 8) = 0;
            }
            else
            {
                **(x24 + 0x18) = 0;
                uint32_t x8_28 = *(x24 + 8);
                *(x24 + 0x10) = 0;
                if ((x8_28 & 1) != 0)
                {
                    operator delete(*(x24 + 0x18));
                    *(x24 + 8) = 0;
                }
            }
            v0_2 = s_6;
            *(x24 + 0x18) = var_190_2;
            *(x24 + 8) = v0_2;
            uint32_t x10_2 = *data_36198;
            int32_t var_210 = data_36190;
            char* x9_2 = *(data_361a2 + 6);
            int64_t s_3;
            __builtin_memset(&s_3, 0, 0x18);
            char* x20_6;
            if ((x10_2 & 1) == 0)
            {
                x20_6 = &*(data_36198 + 1);
            }
            else
            {
                x20_6 = x9_2;
            }
            size_t x0_42 = strlen(x20_6);
            if (x0_42 < -0x10)
            {
                goto label_12474;
            }
            void* var_1f8_1;
            void* x21_6;
            if (x0_42 >= 0x17)
            {
                uint64_t x22_5 = ((x0_42 + 0x10) & 0xfffffffffffffff0);
                void* x0_44 = operator new(x22_5);
                x21_6 = x0_44;
                size_t var_200_1 = x0_42;
                var_1f8_1 = x0_44;
                s_3 = (x22_5 | 1);
            }
            else
            {
                x21_6 = &*s_3[1];
                s_3 = (x0_42 << 1);
            }
            if ((x0_42 >= 0x17 || (x0_42 < 0x17 && x0_42 != 0)))
            {
                memcpy(x21_6, x20_6, x0_42);
            }
            *(x21_6 + x0_42) = 0;
            int32_t x19_9;
            if ((g3::logLevel(&var_210) & 1) == 0)
            {
                x19_9 = 0;
                if ((s_3 & 1) != 0)
                {
                label_121f4:
                    operator delete(var_1f8_1);
                    if ((x19_9 & 1) == 0)
                    {
                        goto label_12278;
                    }
                    goto label_12228;
                }
            }
            else
            {
                int64_t s_2;
                __builtin_memset(&s_2, 0, 0x18);
                uint64_t x19_8 = *rgbd::OBCTAG;
                size_t x0_49 = strlen(x19_8);
                if (x0_49 < -0x10)
                {
                    goto label_1248c;
                }
                void* var_218_1;
                void* x21_7;
                if (x0_49 >= 0x17)
                {
                    uint64_t x22_6 = ((x0_49 + 0x10) & 0xfffffffffffffff0);
                    void* x0_51 = operator new(x22_6);
                    x21_7 = x0_51;
                    size_t var_220_1 = x0_49;
                    var_218_1 = x0_51;
                    s_2 = (x22_6 | 1);
                }
                else
                {
                    x21_7 = (&s_2 | 1);
                    s_2 = (x0_49 << 1);
                }
                if ((x0_49 >= 0x17 || (x0_49 < 0x17 && x0_49 != 0)))
                {
                    memcpy(x21_7, x19_8, x0_49);
                }
                *(x21_7 + x0_49) = 0;
                x19_9 = g3::logTag(&s_2);
                if ((s_2 & 1) != 0)
                {
                    operator delete(var_218_1);
                    if ((s_3 & 1) != 0)
                    {
                        goto label_121f4;
                    }
                }
                else if ((s_3 & 1) != 0)
                {
                    goto label_121f4;
                }
            }
            if ((x19_9 & 1) == 0)
            {
                goto label_12278;
            }
        label_12228:
            LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_59 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_198, "Couldn't start the stream,", 0x1a);
            void* x20_8;
            if ((*(x24 + 8) & 1) != 0)
            {
                x20_8 = *(x24 + 0x18);
            }
            else
            {
                x20_8 = (x24 + 9);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_59, x20_8, strlen(x20_8));
            goto label_12274;
        }
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_63;
}

int64_t sub_1249c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9, char arg10, void* arg11)
{
    int64_t x19 = arg1;
    if (((arg2 & 1) == 0 && (arg4 & 1) == 0))
    {
    label_1255c:
        _Unwind_Resume(x19);
    }
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        if ((arg4 & 1) == 0)
        {
            goto label_1255c;
        }
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || (arg2 & 1) != 0))
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg6 & 1) != 0)
        {
            operator delete(arg7);
            if ((arg8 & 1) == 0)
            {
                goto label_1255c;
            }
        }
        else if ((arg8 & 1) == 0)
        {
            goto label_1255c;
        }
        operator delete(arg9);
        int64_t x0_7 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_7);
        if ((arg10 & 1) == 0)
        {
            goto label_1255c;
        }
    }
    operator delete(arg11);
    int32_t* x0_13;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_13 = _Unwind_Resume(x19);
    /* tailcall */
    return rgbd::RGBDOrbbec::waitForFrameDaBai(x0_13, x1);
}

int64_t sub_124bc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5, char arg6, void* arg7, char arg8, void* arg9)
{
    int64_t x19 = arg1;
    if ((arg2 & 1) == 0)
    {
    label_1255c:
        _Unwind_Resume(x19);
    }
    else
    {
        operator delete(arg3);
        x19 = _Unwind_Resume(x19);
        if ((arg4 & 1) != 0)
        {
            operator delete(arg5);
            if ((arg6 & 1) == 0)
            {
                goto label_1255c;
            }
        }
        else if ((arg6 & 1) == 0)
        {
            goto label_1255c;
        }
        operator delete(arg7);
        int64_t x0_6 = _Unwind_Resume(x19);
        LogCapture::~LogCapture();
        x19 = _Unwind_Resume(x0_6);
        if ((arg8 & 1) == 0)
        {
            goto label_1255c;
        }
    }
    operator delete(arg9);
    int32_t* x0_12;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_12 = _Unwind_Resume(x19);
    /* tailcall */
    return rgbd::RGBDOrbbec::waitForFrameDaBai(x0_12, x1);
}

int64_t sub_1251c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    int64_t x19_1 = arg1;
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
        int64_t x0_2 = _Unwind_Resume(x19_1);
        LogCapture::~LogCapture();
        x19_1 = _Unwind_Resume(x0_2);
    }
    if (((arg2 & 1) == 0 || ((arg2 & 1) != 0 && (arg4 & 1) == 0)))
    {
        _Unwind_Resume(x19_1);
    }
    operator delete(arg5);
    int32_t* x0_8;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1;
    x0_8 = _Unwind_Resume(x19_1);
    /* tailcall */
    return rgbd::RGBDOrbbec::waitForFrameDaBai(x0_8, x1);
}

uint64_t rgbd::RGBDOrbbec::waitForFrameDaBai(int32_t* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    char* x27;
    char* var_58 = x27;
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    uint32_t x9 = *data_36118;
    int32_t var_228 = data_36110;
    char* x20;
    if ((x9 & 1) == 0)
    {
        x20 = &*(data_36118 + 1);
    }
    else
    {
        x20 = *(data_36122 + 6);
    }
    int64_t s_12;
    __builtin_memset(&s_12, 0, 0x18);
    size_t x0_1 = strlen(x20);
    if (x0_1 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_210_1;
        void* x23_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x24_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x24_1);
            x23_1 = x0_3;
            size_t var_218_1 = x0_1;
            var_210_1 = x0_3;
            s_12 = (x24_1 | 1);
        }
        else
        {
            x23_1 = &*s_12[1];
            s_12 = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x23_1, x20, x0_1);
        }
        *(x23_1 + x0_1) = 0;
        int32_t x0_6 = g3::logLevel(&var_228);
        int32_t x19_3;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x20_5;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x24_11;
        if ((x0_6 & 1) == 0)
        {
            x19_3 = 0;
            if ((s_12 & 1) != 0)
            {
            label_126a0:
                operator delete(var_210_1);
                if ((x19_3 & 1) != 0)
                {
                    goto label_1272c;
                }
            }
        }
        else
        {
            int64_t s_11;
            __builtin_memset(&s_11, 0, 0x18);
            uint64_t x19_2 = *rgbd::OBCTAG;
            size_t x0_8 = strlen(x19_2);
            if (x0_8 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_136e0:
                x20_5 = nullptr;
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_136f4:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_136fc:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_13704:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_1370c:
                x24_11 = nullptr;
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_13718:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_13720:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_13728:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_13730:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_13738:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_13740:
                int64_t x0_186 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                if (x20_5 != 0)
                {
                    oniFrameRelease(x20_5);
                }
                if (x24_11 != 0)
                {
                    oniFrameRelease(x24_11);
                }
                std::__ndk1::mutex::unlock();
                sub_1512c(_Unwind_Resume(x0_186));
                /* no return */
            }
            void* var_230_1;
            void* x23_2;
            if (x0_8 >= 0x17)
            {
                uint64_t x24_2 = ((x0_8 + 0x10) & 0xfffffffffffffff0);
                void* x0_11 = operator new(x24_2);
                x23_2 = x0_11;
                size_t var_238_1 = x0_8;
                var_230_1 = x0_11;
                s_11 = (x24_2 | 1);
            }
            else
            {
                x23_2 = (&s_11 | 1);
                s_11 = (x0_8 << 1);
            }
            if ((x0_8 >= 0x17 || (x0_8 < 0x17 && x0_8 != 0)))
            {
                memcpy(x23_2, x19_2, x0_8);
            }
            *(x23_2 + x0_8) = 0;
            x19_3 = g3::logTag(&s_11);
            if ((s_11 & 1) != 0)
            {
                operator delete(var_230_1);
                if ((s_12 & 1) != 0)
                {
                    goto label_126a0;
                }
            }
            else if ((s_12 & 1) != 0)
            {
                goto label_126a0;
            }
        }
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_200;
        void var_1f8;
        if (((((x0_6 & 1) == 0 && (s_12 & 1) == 0) || (x0_6 & 1) != 0) && (x19_3 & 1) != 0))
        {
        label_1272c:
            LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "waitForFrame", 0xc);
            LogCapture::~LogCapture();
        }
        if ((arg1[0x4c] & 1) == 0)
        {
            goto label_13690;
        }
        std::__ndk1::mutex::lock();
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>*** x19_9;
        if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&arg1[0x22]) != 0)
        {
            int32_t var_244 = 0xffffffff;
            var_200 = arg2;
            void* var_388 = &arg1[0x36];
            int64_t* x8_14 = *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x58);
            var_244 = 0xffffffff;
            uint64_t var_390_1 = x28;
            if (x8_14 == 0)
            {
                var_200 = nullptr;
            }
            else
            {
                var_200 = *x8_14;
            }
            if ((oniWaitForAnyStream(&var_200, 1, &var_244, 0x12c) == 0 && var_244 != 0xffffffff))
            {
                var_200 = arg2;
                int64_t x0_27 = **(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x58);
                if (x0_27 == 0)
                {
                    x20_5 = nullptr;
                }
                else
                {
                    oniStreamReadFrame(x0_27, &var_200);
                    x20_5 = var_200;
                }
                if ((*data_36118 & 1) == 0)
                {
                    x27 = &*(data_36118 + 1);
                }
                else
                {
                    x27 = *(data_36122 + 6);
                }
                int32_t var_2a0 = data_36110;
                int64_t s_8;
                __builtin_memset(&s_8, 0, 0x18);
                size_t x0_39 = strlen(x27);
                if (x0_39 < -0x10)
                {
                    goto label_136f4;
                }
                uint64_t var_288_1;
                if (x0_39 >= 0x17)
                {
                    uint64_t x19_4 = ((x0_39 + 0x10) & 0xfffffffffffffff0);
                    uint64_t x0_41 = operator new(x19_4);
                    x28 = x0_41;
                    size_t var_290_1 = x0_39;
                    var_288_1 = x0_41;
                    s_8 = (x19_4 | 1);
                }
                else
                {
                    x28 = &*s_8[1];
                    s_8 = (x0_39 << 1);
                }
                if ((x0_39 >= 0x17 || (x0_39 < 0x17 && x0_39 != 0)))
                {
                    memcpy(x28, x27, x0_39);
                }
                *(x28 + x0_39) = 0;
                int32_t x24_9;
                if ((g3::logLevel(&var_2a0) & 1) == 0)
                {
                    x24_9 = 0;
                    if ((s_8 & 1) != 0)
                    {
                    label_12a6c:
                        operator delete(var_288_1);
                        if ((x24_9 & 1) == 0)
                        {
                            goto label_12c2c;
                        }
                        goto label_12bd4;
                    }
                }
                else
                {
                    int64_t s_7;
                    __builtin_memset(&s_7, 0, 0x18);
                    uint64_t x24_8 = *rgbd::OBCTAG;
                    size_t x0_46 = strlen(x24_8);
                    if (x0_46 < -0x10)
                    {
                        goto label_13704;
                    }
                    char* var_2a8_1;
                    if (x0_46 >= 0x17)
                    {
                        uint64_t x19_7 = ((x0_46 + 0x10) & 0xfffffffffffffff0);
                        char* x0_61 = operator new(x19_7);
                        x27 = x0_61;
                        size_t var_2b0_1 = x0_46;
                        var_2a8_1 = x0_61;
                        s_7 = (x19_7 | 1);
                    }
                    else
                    {
                        x27 = (&s_7 | 1);
                        s_7 = (x0_46 << 1);
                    }
                    if ((x0_46 >= 0x17 || (x0_46 < 0x17 && x0_46 != 0)))
                    {
                        memcpy(x27, x24_8, x0_46);
                    }
                    x27[x0_46] = 0;
                    x24_9 = g3::logTag(&s_7);
                    if ((s_7 & 1) != 0)
                    {
                        operator delete(var_2a8_1);
                        if ((s_8 & 1) != 0)
                        {
                            goto label_12a6c;
                        }
                    }
                    else if ((s_8 & 1) != 0)
                    {
                        goto label_12a6c;
                    }
                }
                if ((x24_9 & 1) == 0)
                {
                    goto label_12c2c;
                }
            label_12bd4:
                LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                uint64_t x0_67 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "ir stream,timestamp:", 0x14);
                x20_5[3];
                int32_t x0_69 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_67), " width:", 7);
                *(x20_5 + 0x24);
                int32_t x0_71 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_69), " height:", 8);
                x20_5[5];
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_71);
                LogCapture::~LogCapture();
            label_12c2c:
                x19_9 = 0xffffffff;
                var_244 = 0xffffffff;
                var_200 = arg2;
                int64_t* x8_39 = *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x60);
                var_244 = 0xffffffff;
                if (x8_39 == 0)
                {
                    var_200 = nullptr;
                }
                else
                {
                    var_200 = *x8_39;
                }
                x24_11 = nullptr;
                int32_t x0_75 = oniWaitForAnyStream(&var_200, 1, &var_244, 0x12c);
                int32_t x21_7;
                if ((x0_75 == 0 && var_244 != 0xffffffff))
                {
                    var_200 = arg2;
                    int64_t x0_78 = **(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x60);
                    if (x0_78 == 0)
                    {
                        x24_11 = nullptr;
                    }
                    else
                    {
                        oniStreamReadFrame(x0_78, &var_200);
                        x24_11 = var_200;
                    }
                    char* x26_4;
                    if ((*data_36118 & 1) == 0)
                    {
                        x26_4 = &*(data_36118 + 1);
                    }
                    else
                    {
                        x26_4 = *(data_36122 + 6);
                    }
                    int32_t var_310 = data_36110;
                    int64_t s_4;
                    __builtin_memset(&s_4, 0, 0x18);
                    size_t x0_91 = strlen(x26_4);
                    if (x0_91 < -0x10)
                    {
                        goto label_13718;
                    }
                    void* var_2f8_1;
                    void* x27_1;
                    if (x0_91 >= 0x17)
                    {
                        x19_9 = ((x0_91 + 0x10) & 0xfffffffffffffff0);
                        void* x0_93 = operator new(x19_9);
                        x27_1 = x0_93;
                        size_t var_300_1 = x0_91;
                        var_2f8_1 = x0_93;
                        s_4 = (x19_9 | 1);
                    }
                    else
                    {
                        x27_1 = &*s_4[1];
                        s_4 = (x0_91 << 1);
                    }
                    if ((x0_91 >= 0x17 || (x0_91 < 0x17 && x0_91 != 0)))
                    {
                        memcpy(x27_1, x26_4, x0_91);
                    }
                    *(x27_1 + x0_91) = 0;
                    int32_t x25_4;
                    if ((g3::logLevel(&var_310) & 1) == 0)
                    {
                        x25_4 = 0;
                        if ((s_4 & 1) != 0)
                        {
                        label_12f00:
                            operator delete(var_2f8_1);
                            if ((x25_4 & 1) == 0)
                            {
                                goto label_130d0;
                            }
                            goto label_13074;
                        }
                    }
                    else
                    {
                        int64_t s_3;
                        __builtin_memset(&s_3, 0, 0x18);
                        uint64_t x25_3 = *rgbd::OBCTAG;
                        size_t x0_98 = strlen(x25_3);
                        if (x0_98 < -0x10)
                        {
                            goto label_13728;
                        }
                        void* var_318_1;
                        void* x27_2;
                        if (x0_98 >= 0x17)
                        {
                            x19_9 = ((x0_98 + 0x10) & 0xfffffffffffffff0);
                            void* x0_113 = operator new(x19_9);
                            x27_2 = x0_113;
                            size_t var_320_1 = x0_98;
                            var_318_1 = x0_113;
                            s_3 = (x19_9 | 1);
                        }
                        else
                        {
                            x27_2 = (&s_3 | 1);
                            s_3 = (x0_98 << 1);
                        }
                        if ((x0_98 >= 0x17 || (x0_98 < 0x17 && x0_98 != 0)))
                        {
                            memcpy(x27_2, x25_3, x0_98);
                        }
                        *(x27_2 + x0_98) = 0;
                        x25_4 = g3::logTag(&s_3);
                        if ((s_3 & 1) != 0)
                        {
                            operator delete(var_318_1);
                            if ((s_4 & 1) != 0)
                            {
                                goto label_12f00;
                            }
                        }
                        else if ((s_4 & 1) != 0)
                        {
                            goto label_12f00;
                        }
                    }
                    if ((x25_4 & 1) == 0)
                    {
                        goto label_130d0;
                    }
                label_13074:
                    x19_9 = &var_200;
                    LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                    uint64_t x0_119 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "depth stream,timestamp:", 0x17);
                    x24_11[3];
                    int32_t x0_121 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_119), " width:", 7);
                    *(x24_11 + 0x24);
                    int32_t x0_123 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_121), " height:", 8);
                    x24_11[5];
                    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_123);
                    LogCapture::~LogCapture();
                label_130d0:
                    var_200 = arg2;
                    void* x0_125 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], arg2);
                    *(x0_125 + 0x78) = (*(x0_125 + 0x78) + 1);
                    var_200 = arg2;
                    if (*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], arg2) + 0x78) != 2)
                    {
                        x19_9 = &*nullptr->ident.signature[1];
                        x21_7 = 1;
                        x28 = var_390_1;
                        if (x20_5 != 0)
                        {
                            goto label_13668;
                        }
                    }
                    else
                    {
                        var_200 = arg2;
                        *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], arg2) + 0x78) = 0;
                        if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&arg1[0x12]) == 0)
                        {
                            x21_7 = 0;
                            x28 = var_390_1;
                            if (x20_5 != 0)
                            {
                                goto label_13668;
                            }
                        }
                        else
                        {
                            var_200 = arg2;
                            void* x0_133 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x12], arg2);
                            var_200 = arg2;
                            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], arg2);
                            int32_t* x0_137 = rgbd::RGBDParam::getAshmenAddress();
                            uint64_t x26_6 = (*(x0_133 + 0x38) * *(x0_133 + 0x34));
                            int64_t x0_138 = std::__ndk1::chrono::system_clock::now();
                            uint64_t x8_70 = ((x0_138 * 0x20c49ba5e353f7cf) >> 0x40);
                            int32_t x9_5 = (x0_138 / 0xf4240);
                            *x0_137 = x9_5;
                            x0_137[1] = ((((x8_70 >> 7) + (x8_70 >> 0x3f)) + (x9_5 * 0xfffffc18)) * 0xf4240);
                            *(x0_137 + 8) = *(x0_133 + 0x30);
                            *(x0_137 + 0x10) = *(x0_133 + 0x38);
                            x0_137[6] = *(x0_133 + 0x40);
                            x0_137[7] = *(x0_133 + 0x44);
                            *(x0_137 + 0x20) = *(x0_133 + 0x48);
                            x0_137[0xa] = *(x0_133 + 0x50);
                            x0_137[0xb] = *(x0_133 + 0x54);
                            x0_137[0xc] = *(x0_133 + 0x58);
                            x0_137[0xd] = *(x0_133 + 0x5c);
                            x0_137[0xe] = *(x0_133 + 0x60);
                            uint64_t x8_85 = *(x0_133 + 0x68);
                            int32_t x8_86;
                            if ((x8_85 & 1) == 0)
                            {
                                x8_86 = (x8_85 >> 1);
                            }
                            else
                            {
                                x8_86 = *(x0_133 + 0x70);
                            }
                            x0_137[0xf] = x8_86;
                            uint64_t x8_87 = *(x0_133 + 0x68);
                            int32_t temp0_1 = (x8_87 & 1);
                            void* x1_36;
                            if (temp0_1 == 0)
                            {
                                x1_36 = (x0_133 + 0x69);
                            }
                            else
                            {
                                x1_36 = *(x0_133 + 0x78);
                            }
                            size_t x2_24;
                            if (temp0_1 == 0)
                            {
                                x2_24 = (x8_87 >> 1);
                            }
                            else
                            {
                                x2_24 = *(x0_133 + 0x70);
                            }
                            memcpy(&x0_137[0x10], x1_36, x2_24);
                            uint64_t x8_88 = *(x0_133 + 0x68);
                            uint64_t x8_89;
                            if ((x8_88 & 1) == 0)
                            {
                                x8_89 = (x8_88 >> 1);
                            }
                            else
                            {
                                x8_89 = *(x0_133 + 0x70);
                            }
                            int64_t x27_4 = ((0x4000000000 + (x8_89 << 0x20)) >> 0x20);
                            size_t x19_12 = (x26_6 << 1);
                            memcpy((x0_137 + x27_4), x24_11[1], x19_12);
                            memcpy((x0_137 + (x27_4 + x19_12)), x20_5[1], x26_6);
                            char* x27_5;
                            if ((*data_36118 & 1) == 0)
                            {
                                x27_5 = &*(data_36118 + 1);
                            }
                            else
                            {
                                x27_5 = *(data_36122 + 6);
                            }
                            int32_t var_348 = data_36110;
                            int64_t s_2;
                            __builtin_memset(&s_2, 0, 0x18);
                            size_t x0_143 = strlen(x27_5);
                            if (x0_143 < -0x10)
                            {
                                goto label_13730;
                            }
                            void* var_330_1;
                            void* x28_2;
                            if (x0_143 >= 0x17)
                            {
                                uint64_t x19_13 = ((x0_143 + 0x10) & 0xfffffffffffffff0);
                                void* x0_146 = operator new(x19_13);
                                x28_2 = x0_146;
                                size_t var_338_1 = x0_143;
                                var_330_1 = x0_146;
                                s_2 = (x19_13 | 1);
                            }
                            else
                            {
                                x28_2 = &*s_2[1];
                                s_2 = (x0_143 << 1);
                            }
                            if ((x0_143 >= 0x17 || (x0_143 < 0x17 && x0_143 != 0)))
                            {
                                memcpy(x28_2, x27_5, x0_143);
                            }
                            *(x28_2 + x0_143) = 0;
                            int32_t x26_9;
                            if ((g3::logLevel(&var_348) & 1) == 0)
                            {
                                x26_9 = 0;
                                if ((s_2 & 1) != 0)
                                {
                                label_1341c:
                                    operator delete(var_330_1);
                                    if ((x26_9 & 1) == 0)
                                    {
                                        goto label_134c8;
                                    }
                                    goto label_134a8;
                                }
                            }
                            else
                            {
                                int64_t s_1;
                                __builtin_memset(&s_1, 0, 0x18);
                                uint64_t x26_8 = *rgbd::OBCTAG;
                                size_t x0_151 = strlen(x26_8);
                                if (x0_151 < -0x10)
                                {
                                    goto label_13738;
                                }
                                void* var_350_1;
                                void* x28_3;
                                if (x0_151 >= 0x17)
                                {
                                    uint64_t x19_14 = ((x0_151 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_154 = operator new(x19_14);
                                    x28_3 = x0_154;
                                    size_t var_358_1 = x0_151;
                                    var_350_1 = x0_154;
                                    s_1 = (x19_14 | 1);
                                }
                                else
                                {
                                    x28_3 = (&s_1 | 1);
                                    s_1 = (x0_151 << 1);
                                }
                                if ((x0_151 >= 0x17 || (x0_151 < 0x17 && x0_151 != 0)))
                                {
                                    memcpy(x28_3, x26_8, x0_151);
                                }
                                *(x28_3 + x0_151) = 0;
                                x26_9 = g3::logTag(&s_1);
                                if ((s_1 & 1) != 0)
                                {
                                    operator delete(var_350_1);
                                    if ((s_2 & 1) != 0)
                                    {
                                        goto label_1341c;
                                    }
                                }
                                else if ((s_2 & 1) != 0)
                                {
                                    goto label_1341c;
                                }
                            }
                            if ((x26_9 & 1) == 0)
                            {
                                goto label_134c8;
                            }
                        label_134a8:
                            LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "transmitLoacationData", 0x15);
                            LogCapture::~LogCapture();
                        label_134c8:
                            var_200 = arg2;
                            void* x0_161 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], arg2);
                            var_200 = arg2;
                            void* x0_163 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x12], arg2);
                            var_200 = arg2;
                            void* x0_165;
                            int128_t v0_1;
                            x0_165 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x12], arg2);
                            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s;
                            __builtin_memset(&s, 0, 0x18);
                            void* var_370_1;
                            if ((*arg2 & 1) != 0)
                            {
                                size_t x28_4 = arg2[1];
                                if (x28_4 < -0x10)
                                {
                                    goto label_13740;
                                }
                                int64_t x22_5 = arg2[2];
                                void* x26_10;
                                if (x28_4 >= 0x17)
                                {
                                    uint64_t x19_15 = ((x28_4 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_168 = operator new(x19_15);
                                    x26_10 = x0_168;
                                    size_t var_378_1 = x28_4;
                                    var_370_1 = x0_168;
                                    s = (x19_15 | 1);
                                }
                                else
                                {
                                    x26_10 = (&s | 1);
                                    s = (x28_4 << 1);
                                }
                                if ((x28_4 >= 0x17 || (x28_4 < 0x17 && x28_4 != 0)))
                                {
                                    memcpy(x26_10, x22_5, x28_4);
                                }
                                *(x26_10 + x28_4) = 0;
                                goto label_135dc;
                            }
                            var_370_1 = arg2[2];
                            s = *arg2;
                        label_135dc:
                            x28 = var_390_1;
                            int32_t x8_111;
                            if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&arg1[0x22]) == 0)
                            {
                                x8_111 = 0;
                            }
                            else
                            {
                                var_200 = &s;
                                int64_t x8_110;
                                if (*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], &s) + 0x7c) == 0x60e)
                                {
                                    x8_110 = 0x2c;
                                }
                                else
                                {
                                    x8_110 = 0x28;
                                }
                                x8_111 = *(arg1 + x8_110);
                            }
                            int32_t var_368_1 = x8_111;
                            rgbd::RGBDParam::transmitLoacationData((x0_161 + 0x30), (x0_163 + 0x38), (x0_165 + 0x34));
                            if ((s & 1) != 0)
                            {
                                operator delete(var_370_1);
                            }
                            x19_9 = &*nullptr->ident.signature[1];
                            x21_7 = 1;
                            if (x20_5 != 0)
                            {
                                goto label_13668;
                            }
                        }
                    }
                }
                char* x22_3;
                if (((x0_75 != 0 || (x0_75 == 0 && var_244 == 0xffffffff)) && (*data_36198 & 1) == 0))
                {
                    x22_3 = &*(data_36198 + 1);
                label_12d0c:
                    int32_t var_2d8 = data_36190;
                    int64_t s_6;
                    __builtin_memset(&s_6, 0, 0x18);
                    size_t x0_80 = strlen(x22_3);
                    if (x0_80 < -0x10)
                    {
                        goto label_1370c;
                    }
                    void* var_2c0_1;
                    void* x23_3;
                    if (x0_80 >= 0x17)
                    {
                        x24_11 = nullptr;
                        uint64_t x19_8 = ((x0_80 + 0x10) & 0xfffffffffffffff0);
                        void* x0_83 = operator new(x19_8);
                        x23_3 = x0_83;
                        size_t var_2c8_1 = x0_80;
                        var_2c0_1 = x0_83;
                        s_6 = (x19_8 | 1);
                    }
                    else
                    {
                        x23_3 = &*s_6[1];
                        s_6 = (x0_80 << 1);
                    }
                    if ((x0_80 >= 0x17 || (x0_80 < 0x17 && x0_80 != 0)))
                    {
                        memcpy(x23_3, x22_3, x0_80);
                    }
                    *(x23_3 + x0_80) = 0;
                    int32_t x21_5;
                    if ((g3::logLevel(&var_2d8) & 1) == 0)
                    {
                        x28 = var_390_1;
                        x21_5 = 0;
                        if ((s_6 & 1) != 0)
                        {
                        label_12dfc:
                            operator delete(var_2c0_1);
                            if ((x21_5 & 1) == 0)
                            {
                                goto label_12fd0;
                            }
                            goto label_12f90;
                        }
                    }
                    else
                    {
                        int64_t s_5;
                        __builtin_memset(&s_5, 0, 0x18);
                        uint64_t x21_4 = *rgbd::OBCTAG;
                        size_t x0_88 = strlen(x21_4);
                        x28 = var_390_1;
                        if (x0_88 < -0x10)
                        {
                            goto label_13720;
                        }
                        void* var_2e0_1;
                        void* x23_4;
                        if (x0_88 >= 0x17)
                        {
                            uint64_t x19_10 = ((x0_88 + 0x10) & 0xfffffffffffffff0);
                            void* x0_101 = operator new(x19_10);
                            x23_4 = x0_101;
                            size_t var_2e8_1 = x0_88;
                            var_2e0_1 = x0_101;
                            s_5 = (x19_10 | 1);
                        }
                        else
                        {
                            x23_4 = (&s_5 | 1);
                            s_5 = (x0_88 << 1);
                        }
                        if ((x0_88 >= 0x17 || (x0_88 < 0x17 && x0_88 != 0)))
                        {
                            memcpy(x23_4, x21_4, x0_88);
                        }
                        *(x23_4 + x0_88) = 0;
                        x21_5 = g3::logTag(&s_5);
                        if ((s_5 & 1) != 0)
                        {
                            operator delete(var_2e0_1);
                            if ((s_6 & 1) != 0)
                            {
                                goto label_12dfc;
                            }
                        }
                        else if ((s_6 & 1) != 0)
                        {
                            goto label_12dfc;
                        }
                    }
                    if ((x21_5 & 1) == 0)
                    {
                        goto label_12fd0;
                    }
                label_12f90:
                    LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_107 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "Wait depth stream failed! timeou…", 0x29);
                    char* x0_108 = oniGetExtendedError();
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_107, x0_108, strlen(x0_108));
                    LogCapture::~LogCapture();
                label_12fd0:
                    x24_11 = nullptr;
                    x19_9 = nullptr;
                    x21_7 = 1;
                    if (x20_5 != 0)
                    {
                    label_13668:
                        oniFrameRelease(x20_5);
                    }
                }
                if (((x0_75 == 0 && var_244 != 0xffffffff) || ((x0_75 != 0 || (x0_75 == 0 && var_244 == 0xffffffff)) && (*data_36198 & 1) == 0)))
                {
                    if (x24_11 != 0)
                    {
                        oniFrameRelease(x24_11);
                    }
                    if (x21_7 == 0)
                    {
                        goto label_1368c;
                    }
                    goto label_13680;
                }
                if (((x0_75 != 0 || (x0_75 == 0 && var_244 == 0xffffffff)) && (*data_36198 & 1) != 0))
                {
                    x22_3 = *(data_361a2 + 6);
                    goto label_12d0c;
                }
            }
            char* x22_1;
            if ((*data_36198 & 1) != 0)
            {
                x22_1 = *(data_361a2 + 6);
                goto label_12884;
            }
            x22_1 = &*(data_36198 + 1);
        label_12884:
            int32_t var_268 = data_36190;
            int64_t s_10;
            __builtin_memset(&s_10, 0, 0x18);
            size_t x0_29 = strlen(x22_1);
            if (x0_29 < -0x10)
            {
                goto label_136e0;
            }
            void* var_250_1;
            if (x0_29 >= 0x17)
            {
                uint64_t x25_1 = ((x0_29 + 0x10) & 0xfffffffffffffff0);
                void* x0_31 = operator new(x25_1);
                x23_1 = x0_31;
                size_t var_258_1 = x0_29;
                var_250_1 = x0_31;
                s_10 = (x25_1 | 1);
            }
            else
            {
                x23_1 = &*s_10[1];
                s_10 = (x0_29 << 1);
            }
            if ((x0_29 >= 0x17 || (x0_29 < 0x17 && x0_29 != 0)))
            {
                memcpy(x23_1, x22_1, x0_29);
            }
            *(x23_1 + x0_29) = 0;
            x28 = var_390_1;
            int32_t x20_7;
            if ((g3::logLevel(&var_268) & 1) == 0)
            {
                x20_7 = 0;
                if ((s_10 & 1) != 0)
                {
                label_12964:
                    operator delete(var_250_1);
                    if ((x20_7 & 1) == 0)
                    {
                        goto label_12b38;
                    }
                    goto label_12af8;
                }
            }
            else
            {
                int64_t s_9;
                __builtin_memset(&s_9, 0, 0x18);
                x20_5 = *rgbd::OBCTAG;
                size_t x0_36 = strlen(x20_5);
                if (x0_36 < -0x10)
                {
                    goto label_136fc;
                }
                void* var_270_1;
                void* x22_2;
                if (x0_36 >= 0x17)
                {
                    uint64_t x19_5 = ((x0_36 + 0x10) & 0xfffffffffffffff0);
                    void* x0_49 = operator new(x19_5);
                    x22_2 = x0_49;
                    size_t var_278_1 = x0_36;
                    var_270_1 = x0_49;
                    s_9 = (x19_5 | 1);
                }
                else
                {
                    x22_2 = (&s_9 | 1);
                    s_9 = (x0_36 << 1);
                }
                if ((x0_36 >= 0x17 || (x0_36 < 0x17 && x0_36 != 0)))
                {
                    memcpy(x22_2, x20_5, x0_36);
                }
                *(x22_2 + x0_36) = 0;
                x20_7 = g3::logTag(&s_9);
                if ((s_9 & 1) != 0)
                {
                    operator delete(var_270_1);
                    if ((s_10 & 1) != 0)
                    {
                        goto label_12964;
                    }
                }
                else if ((s_10 & 1) != 0)
                {
                    goto label_12964;
                }
            }
            if ((x20_7 & 1) == 0)
            {
                goto label_12b38;
            }
        label_12af8:
            LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_55 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "Wait ir stream failed! timeout!,…", 0x26);
            char* x0_56 = oniGetExtendedError();
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_55, x0_56, strlen(x0_56));
            LogCapture::~LogCapture();
        label_12b38:
            x19_9 = nullptr;
        label_13680:
            std::__ndk1::mutex::unlock();
        }
        else
        {
        label_1368c:
            std::__ndk1::mutex::unlock();
        label_13690:
            x19_9 = nullptr;
        }
        if (*(x28 + 0x28) == x8)
        {
            return (x19_9 & 1);
        }
    }
    __stack_chk_fail();
    /* no return */
}

void sub_13748(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4) __noreturn
{
    LogCapture::~LogCapture();
    if (arg2 != 0)
    {
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13750(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8) __noreturn
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
        if (arg2 != 0)
        {
            goto label_13974;
        }
    }
    if (((((arg5 & 1) == 0 && (arg7 & 1) == 0) || ((arg5 & 1) != 0 && (arg7 & 1) == 0)) && arg2 != 0))
    {
    label_13974:
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13770(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4, char arg5, void* arg6) __noreturn
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && arg2 != 0) || ((arg5 & 1) != 0 && arg2 != 0)))
    {
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13794(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8) __noreturn
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
        if (arg2 != 0)
        {
            goto label_13974;
        }
    }
    if (((((arg5 & 1) == 0 && (arg7 & 1) == 0) || ((arg5 & 1) != 0 && (arg7 & 1) == 0)) && arg2 != 0))
    {
    label_13974:
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_137b4(int64_t arg1, int64_t arg2 @ x20, int64_t arg3) __noreturn
{
    if (arg2 != 0)
    {
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_137b8(int64_t arg1, int64_t arg2 @ x20, int64_t arg3, char arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        if (arg2 != 0)
        {
            goto label_13974;
        }
    }
    if (((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)) && arg2 != 0))
    {
    label_13974:
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13804(int64_t arg1, int64_t arg2 @ x20, int64_t arg3, char arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        if (arg2 != 0)
        {
        label_13974:
            oniFrameRelease(arg2);
        }
        goto label_13988;
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        if (arg2 == 0)
        {
        label_13988:
            std::__ndk1::mutex::unlock();
            sub_1512c(_Unwind_Resume(arg1));
            /* no return */
        }
        goto label_13974;
    }
}

void sub_13824(int64_t arg1, int64_t arg2) __noreturn
{
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13828(int64_t arg1, int64_t arg2, char arg3, void* arg4, char arg5, void* arg6) __noreturn
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13848(void* arg1) __noreturn
{
    sub_1512c(arg1);
    /* no return */
}

void sub_1386c(int64_t arg1, int64_t arg2 @ x20, int64_t arg3, char arg4, void* arg5) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && arg2 != 0) || ((arg4 & 1) != 0 && arg2 != 0)))
    {
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13880(int64_t arg1, int64_t arg2 @ x20, int64_t arg3) __noreturn
{
    LogCapture::~LogCapture();
    if (arg2 != 0)
    {
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13884(int64_t arg1, int64_t arg2 @ x20, int64_t arg3, char arg4, void* arg5) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) != 0 && arg2 != 0) || ((arg4 & 1) == 0 && arg2 != 0)))
    {
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_138b0(int64_t arg1, int64_t arg2, char arg3, void* arg4) __noreturn
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13908(int64_t arg1) __noreturn
{
    int64_t x26;
    arg_18 = x26;
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_13914(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8) __noreturn
{
    LogCapture::~LogCapture();
    int64_t x21 = _Unwind_Resume(arg1);
    if ((arg5 & 1) == 0)
    {
        while ((arg7 & 1) != 0)
        {
        label_13948:
            operator delete(arg8);
            x21 = _Unwind_Resume(x21);
        }
    }
    else
    {
        operator delete(arg6);
        if ((arg7 & 1) != 0)
        {
            goto label_13948;
        }
    }
    int64_t x0_7 = _Unwind_Resume(x21);
    if (arg2 != 0)
    {
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(x0_7));
    /* no return */
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(int64_t* arg1, int32_t arg2)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        int32_t x26_1 = *((arg1 + *x8_2) + 8);
        std::__ndk1::ios_base::getloc();
        void var_60;
        int64_t* x0_3 = std::__ndk1::locale::use_facet(&var_60);
        std::__ndk1::locale::~locale();
        void* x22_1 = (arg1 + *(*arg1 - 0x18));
        uint32_t x3_1 = *(x22_1 + 0x90);
        int64_t x23_1 = *(x22_1 + 0x28);
        if (x3_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            char x0_7 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x3_1 = x0_7;
            *(x22_1 + 0x90) = x3_1;
        }
        int32_t x8_9 = (x26_1 & 0x4a);
        bool z_1;
        if (x8_9 != 8)
        {
            z_1 = x8_9 == 0x40;
        }
        else
        {
            z_1 = true;
        }
        uint64_t x4_1;
        if (z_1)
        {
            x4_1 = arg2;
        }
        else
        {
            x4_1 = arg2;
        }
        if (*(*x0_3 + 0x20)(x0_3, x23_1, x22_1, x3_1, x4_1) == 0)
        {
            void* x0_10 = (arg1 + *(*arg1 - 0x18));
            *(x0_10 + 0x20);
            std::__ndk1::ios_base::clear(x0_10);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t rgbd::RGBDOrbbec::packageRGBD(int64_t arg1, void* arg2, int64_t* arg3, int64_t* arg4, int32_t* arg5)
{
    uint64_t x21 = (*(arg2 + 0x10) * *(arg2 + 0xc));
    int64_t x0 = std::__ndk1::chrono::system_clock::now();
    uint64_t x8_1 = ((x0 * 0x20c49ba5e353f7cf) >> 0x40);
    int32_t x9_2 = (x0 / 0xf4240);
    *arg5 = x9_2;
    arg5[1] = ((((x8_1 >> 7) + (x8_1 >> 0x3f)) + (x9_2 * 0xfffffc18)) * 0xf4240);
    *(arg5 + 8) = *(arg2 + 8);
    *(arg5 + 0x10) = *(arg2 + 0x10);
    arg5[6] = *(arg2 + 0x18);
    arg5[7] = *(arg2 + 0x1c);
    *(arg5 + 0x20) = *(arg2 + 0x20);
    arg5[0xa] = *(arg2 + 0x28);
    arg5[0xb] = *(arg2 + 0x2c);
    arg5[0xc] = *(arg2 + 0x30);
    arg5[0xd] = *(arg2 + 0x34);
    arg5[0xe] = *(arg2 + 0x38);
    uint64_t x8_16 = *(arg2 + 0x40);
    int32_t x8_17;
    if ((x8_16 & 1) == 0)
    {
        x8_17 = (x8_16 >> 1);
    }
    else
    {
        x8_17 = *(arg2 + 0x48);
    }
    arg5[0xf] = x8_17;
    uint64_t x8_18 = *(arg2 + 0x40);
    int32_t temp0 = (x8_18 & 1);
    void* x1;
    if (temp0 == 0)
    {
        x1 = (arg2 + 0x41);
    }
    else
    {
        x1 = *(arg2 + 0x50);
    }
    size_t x2;
    if (temp0 == 0)
    {
        x2 = (x8_18 >> 1);
    }
    else
    {
        x2 = *(arg2 + 0x48);
    }
    memcpy(&arg5[0x10], x1, x2);
    uint64_t x8_19 = *(arg2 + 0x40);
    uint64_t x8_20;
    if ((x8_19 & 1) == 0)
    {
        x8_20 = (x8_19 >> 1);
    }
    else
    {
        x8_20 = *(arg2 + 0x48);
    }
    int64_t x23_1 = ((0x4000000000 + (x8_20 << 0x20)) >> 0x20);
    size_t x22_1 = (x21 << 1);
    memcpy((arg5 + x23_1), *(*arg3 + 8), x22_1);
    memcpy((arg5 + (x23_1 + x22_1)), *(*arg4 + 8), x21);
    return 1;
}

uint64_t rgbd::RGBDOrbbec::waitForFrameMini(int32_t* arg1, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg2)
{
    char* x27;
    char* var_58 = x27;
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    uint32_t x9 = *data_36118;
    int32_t var_228 = data_36110;
    char* x20;
    if ((x9 & 1) == 0)
    {
        x20 = &*(data_36118 + 1);
    }
    else
    {
        x20 = *(data_36122 + 6);
    }
    int64_t s_12;
    __builtin_memset(&s_12, 0, 0x18);
    size_t x0_1 = strlen(x20);
    if (x0_1 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_210_1;
        void* x23_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x24_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x24_1);
            x23_1 = x0_3;
            size_t var_218_1 = x0_1;
            var_210_1 = x0_3;
            s_12 = (x24_1 | 1);
        }
        else
        {
            x23_1 = &*s_12[1];
            s_12 = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x23_1, x20, x0_1);
        }
        *(x23_1 + x0_1) = 0;
        int32_t x0_6 = g3::logLevel(&var_228);
        int32_t x19_3;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x20_5;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x24_11;
        if ((x0_6 & 1) == 0)
        {
            x19_3 = 0;
            if ((s_12 & 1) != 0)
            {
            label_13e30:
                operator delete(var_210_1);
                if ((x19_3 & 1) != 0)
                {
                    goto label_13ebc;
                }
            }
        }
        else
        {
            int64_t s_11;
            __builtin_memset(&s_11, 0, 0x18);
            uint64_t x19_2 = *rgbd::OBCTAG;
            size_t x0_8 = strlen(x19_2);
            if (x0_8 < -0x10)
            {
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14e70:
                x20_5 = nullptr;
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14e84:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14e8c:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14e94:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14e9c:
                x24_11 = nullptr;
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14ea8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14eb0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14eb8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14ec0:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14ec8:
                std::__ndk1::__basic_string_common<true>::__throw_length_error();
            label_14ed0:
                int64_t x0_186 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                if (x20_5 != 0)
                {
                    oniFrameRelease(x20_5);
                }
                if (x24_11 != 0)
                {
                    oniFrameRelease(x24_11);
                }
                std::__ndk1::mutex::unlock();
                sub_1512c(_Unwind_Resume(x0_186));
                /* no return */
            }
            void* var_230_1;
            void* x23_2;
            if (x0_8 >= 0x17)
            {
                uint64_t x24_2 = ((x0_8 + 0x10) & 0xfffffffffffffff0);
                void* x0_11 = operator new(x24_2);
                x23_2 = x0_11;
                size_t var_238_1 = x0_8;
                var_230_1 = x0_11;
                s_11 = (x24_2 | 1);
            }
            else
            {
                x23_2 = (&s_11 | 1);
                s_11 = (x0_8 << 1);
            }
            if ((x0_8 >= 0x17 || (x0_8 < 0x17 && x0_8 != 0)))
            {
                memcpy(x23_2, x19_2, x0_8);
            }
            *(x23_2 + x0_8) = 0;
            x19_3 = g3::logTag(&s_11);
            if ((s_11 & 1) != 0)
            {
                operator delete(var_230_1);
                if ((s_12 & 1) != 0)
                {
                    goto label_13e30;
                }
            }
            else if ((s_12 & 1) != 0)
            {
                goto label_13e30;
            }
        }
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_200;
        void var_1f8;
        if (((((x0_6 & 1) == 0 && (s_12 & 1) == 0) || (x0_6 & 1) != 0) && (x19_3 & 1) != 0))
        {
        label_13ebc:
            LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "waitForFrame", 0xc);
            LogCapture::~LogCapture();
        }
        if ((arg1[0x4c] & 1) == 0)
        {
            goto label_14e20;
        }
        std::__ndk1::mutex::lock();
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>*** x19_9;
        if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&arg1[0x22]) != 0)
        {
            int32_t var_244 = 0xffffffff;
            var_200 = arg2;
            void* var_388 = &arg1[0x36];
            int64_t* x8_14 = *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x58);
            var_244 = 0xffffffff;
            uint64_t var_390_1 = x28;
            if (x8_14 == 0)
            {
                var_200 = nullptr;
            }
            else
            {
                var_200 = *x8_14;
            }
            if ((oniWaitForAnyStream(&var_200, 1, &var_244, 0x12c) == 0 && var_244 != 0xffffffff))
            {
                var_200 = arg2;
                int64_t x0_27 = **(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x58);
                if (x0_27 == 0)
                {
                    x20_5 = nullptr;
                }
                else
                {
                    oniStreamReadFrame(x0_27, &var_200);
                    x20_5 = var_200;
                }
                if ((*data_36118 & 1) == 0)
                {
                    x27 = &*(data_36118 + 1);
                }
                else
                {
                    x27 = *(data_36122 + 6);
                }
                int32_t var_2a0 = data_36110;
                int64_t s_8;
                __builtin_memset(&s_8, 0, 0x18);
                size_t x0_39 = strlen(x27);
                if (x0_39 < -0x10)
                {
                    goto label_14e84;
                }
                uint64_t var_288_1;
                if (x0_39 >= 0x17)
                {
                    uint64_t x19_4 = ((x0_39 + 0x10) & 0xfffffffffffffff0);
                    uint64_t x0_41 = operator new(x19_4);
                    x28 = x0_41;
                    size_t var_290_1 = x0_39;
                    var_288_1 = x0_41;
                    s_8 = (x19_4 | 1);
                }
                else
                {
                    x28 = &*s_8[1];
                    s_8 = (x0_39 << 1);
                }
                if ((x0_39 >= 0x17 || (x0_39 < 0x17 && x0_39 != 0)))
                {
                    memcpy(x28, x27, x0_39);
                }
                *(x28 + x0_39) = 0;
                int32_t x24_9;
                if ((g3::logLevel(&var_2a0) & 1) == 0)
                {
                    x24_9 = 0;
                    if ((s_8 & 1) != 0)
                    {
                    label_141fc:
                        operator delete(var_288_1);
                        if ((x24_9 & 1) == 0)
                        {
                            goto label_143bc;
                        }
                        goto label_14364;
                    }
                }
                else
                {
                    int64_t s_7;
                    __builtin_memset(&s_7, 0, 0x18);
                    uint64_t x24_8 = *rgbd::OBCTAG;
                    size_t x0_46 = strlen(x24_8);
                    if (x0_46 < -0x10)
                    {
                        goto label_14e94;
                    }
                    char* var_2a8_1;
                    if (x0_46 >= 0x17)
                    {
                        uint64_t x19_7 = ((x0_46 + 0x10) & 0xfffffffffffffff0);
                        char* x0_61 = operator new(x19_7);
                        x27 = x0_61;
                        size_t var_2b0_1 = x0_46;
                        var_2a8_1 = x0_61;
                        s_7 = (x19_7 | 1);
                    }
                    else
                    {
                        x27 = (&s_7 | 1);
                        s_7 = (x0_46 << 1);
                    }
                    if ((x0_46 >= 0x17 || (x0_46 < 0x17 && x0_46 != 0)))
                    {
                        memcpy(x27, x24_8, x0_46);
                    }
                    x27[x0_46] = 0;
                    x24_9 = g3::logTag(&s_7);
                    if ((s_7 & 1) != 0)
                    {
                        operator delete(var_2a8_1);
                        if ((s_8 & 1) != 0)
                        {
                            goto label_141fc;
                        }
                    }
                    else if ((s_8 & 1) != 0)
                    {
                        goto label_141fc;
                    }
                }
                if ((x24_9 & 1) == 0)
                {
                    goto label_143bc;
                }
            label_14364:
                LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                uint64_t x0_67 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "ir stream,timestamp:", 0x14);
                x20_5[3];
                int32_t x0_69 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_67), " width:", 7);
                *(x20_5 + 0x24);
                int32_t x0_71 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_69), " height:", 8);
                x20_5[5];
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_71);
                LogCapture::~LogCapture();
            label_143bc:
                x19_9 = 0xffffffff;
                var_244 = 0xffffffff;
                var_200 = arg2;
                int64_t* x8_39 = *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x60);
                var_244 = 0xffffffff;
                if (x8_39 == 0)
                {
                    var_200 = nullptr;
                }
                else
                {
                    var_200 = *x8_39;
                }
                x24_11 = nullptr;
                int32_t x0_75 = oniWaitForAnyStream(&var_200, 1, &var_244, 0x12c);
                int32_t x21_7;
                if ((x0_75 == 0 && var_244 != 0xffffffff))
                {
                    var_200 = arg2;
                    int64_t x0_78 = **(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x88), arg2) + 0x60);
                    if (x0_78 == 0)
                    {
                        x24_11 = nullptr;
                    }
                    else
                    {
                        oniStreamReadFrame(x0_78, &var_200);
                        x24_11 = var_200;
                    }
                    char* x26_4;
                    if ((*data_36118 & 1) == 0)
                    {
                        x26_4 = &*(data_36118 + 1);
                    }
                    else
                    {
                        x26_4 = *(data_36122 + 6);
                    }
                    int32_t var_310 = data_36110;
                    int64_t s_4;
                    __builtin_memset(&s_4, 0, 0x18);
                    size_t x0_91 = strlen(x26_4);
                    if (x0_91 < -0x10)
                    {
                        goto label_14ea8;
                    }
                    void* var_2f8_1;
                    void* x27_1;
                    if (x0_91 >= 0x17)
                    {
                        x19_9 = ((x0_91 + 0x10) & 0xfffffffffffffff0);
                        void* x0_93 = operator new(x19_9);
                        x27_1 = x0_93;
                        size_t var_300_1 = x0_91;
                        var_2f8_1 = x0_93;
                        s_4 = (x19_9 | 1);
                    }
                    else
                    {
                        x27_1 = &*s_4[1];
                        s_4 = (x0_91 << 1);
                    }
                    if ((x0_91 >= 0x17 || (x0_91 < 0x17 && x0_91 != 0)))
                    {
                        memcpy(x27_1, x26_4, x0_91);
                    }
                    *(x27_1 + x0_91) = 0;
                    int32_t x25_4;
                    if ((g3::logLevel(&var_310) & 1) == 0)
                    {
                        x25_4 = 0;
                        if ((s_4 & 1) != 0)
                        {
                        label_14690:
                            operator delete(var_2f8_1);
                            if ((x25_4 & 1) == 0)
                            {
                                goto label_14860;
                            }
                            goto label_14804;
                        }
                    }
                    else
                    {
                        int64_t s_3;
                        __builtin_memset(&s_3, 0, 0x18);
                        uint64_t x25_3 = *rgbd::OBCTAG;
                        size_t x0_98 = strlen(x25_3);
                        if (x0_98 < -0x10)
                        {
                            goto label_14eb8;
                        }
                        void* var_318_1;
                        void* x27_2;
                        if (x0_98 >= 0x17)
                        {
                            x19_9 = ((x0_98 + 0x10) & 0xfffffffffffffff0);
                            void* x0_113 = operator new(x19_9);
                            x27_2 = x0_113;
                            size_t var_320_1 = x0_98;
                            var_318_1 = x0_113;
                            s_3 = (x19_9 | 1);
                        }
                        else
                        {
                            x27_2 = (&s_3 | 1);
                            s_3 = (x0_98 << 1);
                        }
                        if ((x0_98 >= 0x17 || (x0_98 < 0x17 && x0_98 != 0)))
                        {
                            memcpy(x27_2, x25_3, x0_98);
                        }
                        *(x27_2 + x0_98) = 0;
                        x25_4 = g3::logTag(&s_3);
                        if ((s_3 & 1) != 0)
                        {
                            operator delete(var_318_1);
                            if ((s_4 & 1) != 0)
                            {
                                goto label_14690;
                            }
                        }
                        else if ((s_4 & 1) != 0)
                        {
                            goto label_14690;
                        }
                    }
                    if ((x25_4 & 1) == 0)
                    {
                        goto label_14860;
                    }
                label_14804:
                    x19_9 = &var_200;
                    LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                    uint64_t x0_119 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "depth stream,timestamp:", 0x17);
                    x24_11[3];
                    int32_t x0_121 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_119), " width:", 7);
                    *(x24_11 + 0x24);
                    int32_t x0_123 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_121), " height:", 8);
                    x24_11[5];
                    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_123);
                    LogCapture::~LogCapture();
                label_14860:
                    var_200 = arg2;
                    void* x0_125 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], arg2);
                    *(x0_125 + 0x78) = (*(x0_125 + 0x78) + 1);
                    var_200 = arg2;
                    if (*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], arg2) + 0x78) != 4)
                    {
                        x19_9 = &*nullptr->ident.signature[1];
                        x21_7 = 1;
                        x28 = var_390_1;
                        if (x20_5 != 0)
                        {
                            goto label_14df8;
                        }
                    }
                    else
                    {
                        var_200 = arg2;
                        *(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], arg2) + 0x78) = 0;
                        if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&arg1[0x12]) == 0)
                        {
                            x21_7 = 0;
                            x28 = var_390_1;
                            if (x20_5 != 0)
                            {
                                goto label_14df8;
                            }
                        }
                        else
                        {
                            var_200 = arg2;
                            void* x0_133 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x12], arg2);
                            var_200 = arg2;
                            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], arg2);
                            int32_t* x0_137 = rgbd::RGBDParam::getAshmenAddress();
                            uint64_t x26_6 = (*(x0_133 + 0x38) * *(x0_133 + 0x34));
                            int64_t x0_138 = std::__ndk1::chrono::system_clock::now();
                            uint64_t x8_70 = ((x0_138 * 0x20c49ba5e353f7cf) >> 0x40);
                            int32_t x9_5 = (x0_138 / 0xf4240);
                            *x0_137 = x9_5;
                            x0_137[1] = ((((x8_70 >> 7) + (x8_70 >> 0x3f)) + (x9_5 * 0xfffffc18)) * 0xf4240);
                            *(x0_137 + 8) = *(x0_133 + 0x30);
                            *(x0_137 + 0x10) = *(x0_133 + 0x38);
                            x0_137[6] = *(x0_133 + 0x40);
                            x0_137[7] = *(x0_133 + 0x44);
                            *(x0_137 + 0x20) = *(x0_133 + 0x48);
                            x0_137[0xa] = *(x0_133 + 0x50);
                            x0_137[0xb] = *(x0_133 + 0x54);
                            x0_137[0xc] = *(x0_133 + 0x58);
                            x0_137[0xd] = *(x0_133 + 0x5c);
                            x0_137[0xe] = *(x0_133 + 0x60);
                            uint64_t x8_85 = *(x0_133 + 0x68);
                            int32_t x8_86;
                            if ((x8_85 & 1) == 0)
                            {
                                x8_86 = (x8_85 >> 1);
                            }
                            else
                            {
                                x8_86 = *(x0_133 + 0x70);
                            }
                            x0_137[0xf] = x8_86;
                            uint64_t x8_87 = *(x0_133 + 0x68);
                            int32_t temp0_1 = (x8_87 & 1);
                            void* x1_36;
                            if (temp0_1 == 0)
                            {
                                x1_36 = (x0_133 + 0x69);
                            }
                            else
                            {
                                x1_36 = *(x0_133 + 0x78);
                            }
                            size_t x2_24;
                            if (temp0_1 == 0)
                            {
                                x2_24 = (x8_87 >> 1);
                            }
                            else
                            {
                                x2_24 = *(x0_133 + 0x70);
                            }
                            memcpy(&x0_137[0x10], x1_36, x2_24);
                            uint64_t x8_88 = *(x0_133 + 0x68);
                            uint64_t x8_89;
                            if ((x8_88 & 1) == 0)
                            {
                                x8_89 = (x8_88 >> 1);
                            }
                            else
                            {
                                x8_89 = *(x0_133 + 0x70);
                            }
                            int64_t x27_4 = ((0x4000000000 + (x8_89 << 0x20)) >> 0x20);
                            size_t x19_12 = (x26_6 << 1);
                            memcpy((x0_137 + x27_4), x24_11[1], x19_12);
                            memcpy((x0_137 + (x27_4 + x19_12)), x20_5[1], x26_6);
                            char* x27_5;
                            if ((*data_36118 & 1) == 0)
                            {
                                x27_5 = &*(data_36118 + 1);
                            }
                            else
                            {
                                x27_5 = *(data_36122 + 6);
                            }
                            int32_t var_348 = data_36110;
                            int64_t s_2;
                            __builtin_memset(&s_2, 0, 0x18);
                            size_t x0_143 = strlen(x27_5);
                            if (x0_143 < -0x10)
                            {
                                goto label_14ec0;
                            }
                            void* var_330_1;
                            void* x28_2;
                            if (x0_143 >= 0x17)
                            {
                                uint64_t x19_13 = ((x0_143 + 0x10) & 0xfffffffffffffff0);
                                void* x0_146 = operator new(x19_13);
                                x28_2 = x0_146;
                                size_t var_338_1 = x0_143;
                                var_330_1 = x0_146;
                                s_2 = (x19_13 | 1);
                            }
                            else
                            {
                                x28_2 = &*s_2[1];
                                s_2 = (x0_143 << 1);
                            }
                            if ((x0_143 >= 0x17 || (x0_143 < 0x17 && x0_143 != 0)))
                            {
                                memcpy(x28_2, x27_5, x0_143);
                            }
                            *(x28_2 + x0_143) = 0;
                            int32_t x26_9;
                            if ((g3::logLevel(&var_348) & 1) == 0)
                            {
                                x26_9 = 0;
                                if ((s_2 & 1) != 0)
                                {
                                label_14bac:
                                    operator delete(var_330_1);
                                    if ((x26_9 & 1) == 0)
                                    {
                                        goto label_14c58;
                                    }
                                    goto label_14c38;
                                }
                            }
                            else
                            {
                                int64_t s_1;
                                __builtin_memset(&s_1, 0, 0x18);
                                uint64_t x26_8 = *rgbd::OBCTAG;
                                size_t x0_151 = strlen(x26_8);
                                if (x0_151 < -0x10)
                                {
                                    goto label_14ec8;
                                }
                                void* var_350_1;
                                void* x28_3;
                                if (x0_151 >= 0x17)
                                {
                                    uint64_t x19_14 = ((x0_151 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_154 = operator new(x19_14);
                                    x28_3 = x0_154;
                                    size_t var_358_1 = x0_151;
                                    var_350_1 = x0_154;
                                    s_1 = (x19_14 | 1);
                                }
                                else
                                {
                                    x28_3 = (&s_1 | 1);
                                    s_1 = (x0_151 << 1);
                                }
                                if ((x0_151 >= 0x17 || (x0_151 < 0x17 && x0_151 != 0)))
                                {
                                    memcpy(x28_3, x26_8, x0_151);
                                }
                                *(x28_3 + x0_151) = 0;
                                x26_9 = g3::logTag(&s_1);
                                if ((s_1 & 1) != 0)
                                {
                                    operator delete(var_350_1);
                                    if ((s_2 & 1) != 0)
                                    {
                                        goto label_14bac;
                                    }
                                }
                                else if ((s_2 & 1) != 0)
                                {
                                    goto label_14bac;
                                }
                            }
                            if ((x26_9 & 1) == 0)
                            {
                                goto label_14c58;
                            }
                        label_14c38:
                            LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "transmitLoacationData", 0x15);
                            LogCapture::~LogCapture();
                        label_14c58:
                            var_200 = arg2;
                            void* x0_161 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x60], arg2);
                            var_200 = arg2;
                            void* x0_163 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x12], arg2);
                            var_200 = arg2;
                            void* x0_165;
                            int128_t v0_1;
                            x0_165 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x12], arg2);
                            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s;
                            __builtin_memset(&s, 0, 0x18);
                            void* var_370_1;
                            if ((*arg2 & 1) != 0)
                            {
                                size_t x28_4 = arg2[1];
                                if (x28_4 < -0x10)
                                {
                                    goto label_14ed0;
                                }
                                int64_t x22_5 = arg2[2];
                                void* x26_10;
                                if (x28_4 >= 0x17)
                                {
                                    uint64_t x19_15 = ((x28_4 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_168 = operator new(x19_15);
                                    x26_10 = x0_168;
                                    size_t var_378_1 = x28_4;
                                    var_370_1 = x0_168;
                                    s = (x19_15 | 1);
                                }
                                else
                                {
                                    x26_10 = (&s | 1);
                                    s = (x28_4 << 1);
                                }
                                if ((x28_4 >= 0x17 || (x28_4 < 0x17 && x28_4 != 0)))
                                {
                                    memcpy(x26_10, x22_5, x28_4);
                                }
                                *(x26_10 + x28_4) = 0;
                                goto label_14d6c;
                            }
                            var_370_1 = arg2[2];
                            s = *arg2;
                        label_14d6c:
                            x28 = var_390_1;
                            int32_t x8_111;
                            if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&arg1[0x22]) == 0)
                            {
                                x8_111 = 0;
                            }
                            else
                            {
                                var_200 = &s;
                                int64_t x8_110;
                                if (*(std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(&arg1[0x22], &s) + 0x7c) == 0x60e)
                                {
                                    x8_110 = 0x2c;
                                }
                                else
                                {
                                    x8_110 = 0x28;
                                }
                                x8_111 = *(arg1 + x8_110);
                            }
                            int32_t var_368_1 = x8_111;
                            rgbd::RGBDParam::transmitLoacationData((x0_161 + 0x30), (x0_163 + 0x38), (x0_165 + 0x34));
                            if ((s & 1) != 0)
                            {
                                operator delete(var_370_1);
                            }
                            x19_9 = &*nullptr->ident.signature[1];
                            x21_7 = 1;
                            if (x20_5 != 0)
                            {
                                goto label_14df8;
                            }
                        }
                    }
                }
                char* x22_3;
                if (((x0_75 != 0 || (x0_75 == 0 && var_244 == 0xffffffff)) && (*data_36198 & 1) == 0))
                {
                    x22_3 = &*(data_36198 + 1);
                label_1449c:
                    int32_t var_2d8 = data_36190;
                    int64_t s_6;
                    __builtin_memset(&s_6, 0, 0x18);
                    size_t x0_80 = strlen(x22_3);
                    if (x0_80 < -0x10)
                    {
                        goto label_14e9c;
                    }
                    void* var_2c0_1;
                    void* x23_3;
                    if (x0_80 >= 0x17)
                    {
                        x24_11 = nullptr;
                        uint64_t x19_8 = ((x0_80 + 0x10) & 0xfffffffffffffff0);
                        void* x0_83 = operator new(x19_8);
                        x23_3 = x0_83;
                        size_t var_2c8_1 = x0_80;
                        var_2c0_1 = x0_83;
                        s_6 = (x19_8 | 1);
                    }
                    else
                    {
                        x23_3 = &*s_6[1];
                        s_6 = (x0_80 << 1);
                    }
                    if ((x0_80 >= 0x17 || (x0_80 < 0x17 && x0_80 != 0)))
                    {
                        memcpy(x23_3, x22_3, x0_80);
                    }
                    *(x23_3 + x0_80) = 0;
                    int32_t x21_5;
                    if ((g3::logLevel(&var_2d8) & 1) == 0)
                    {
                        x28 = var_390_1;
                        x21_5 = 0;
                        if ((s_6 & 1) != 0)
                        {
                        label_1458c:
                            operator delete(var_2c0_1);
                            if ((x21_5 & 1) == 0)
                            {
                                goto label_14760;
                            }
                            goto label_14720;
                        }
                    }
                    else
                    {
                        int64_t s_5;
                        __builtin_memset(&s_5, 0, 0x18);
                        uint64_t x21_4 = *rgbd::OBCTAG;
                        size_t x0_88 = strlen(x21_4);
                        x28 = var_390_1;
                        if (x0_88 < -0x10)
                        {
                            goto label_14eb0;
                        }
                        void* var_2e0_1;
                        void* x23_4;
                        if (x0_88 >= 0x17)
                        {
                            uint64_t x19_10 = ((x0_88 + 0x10) & 0xfffffffffffffff0);
                            void* x0_101 = operator new(x19_10);
                            x23_4 = x0_101;
                            size_t var_2e8_1 = x0_88;
                            var_2e0_1 = x0_101;
                            s_5 = (x19_10 | 1);
                        }
                        else
                        {
                            x23_4 = (&s_5 | 1);
                            s_5 = (x0_88 << 1);
                        }
                        if ((x0_88 >= 0x17 || (x0_88 < 0x17 && x0_88 != 0)))
                        {
                            memcpy(x23_4, x21_4, x0_88);
                        }
                        *(x23_4 + x0_88) = 0;
                        x21_5 = g3::logTag(&s_5);
                        if ((s_5 & 1) != 0)
                        {
                            operator delete(var_2e0_1);
                            if ((s_6 & 1) != 0)
                            {
                                goto label_1458c;
                            }
                        }
                        else if ((s_6 & 1) != 0)
                        {
                            goto label_1458c;
                        }
                    }
                    if ((x21_5 & 1) == 0)
                    {
                        goto label_14760;
                    }
                label_14720:
                    LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_107 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "Wait depth stream failed! timeou…", 0x29);
                    char* x0_108 = oniGetExtendedError();
                    std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_107, x0_108, strlen(x0_108));
                    LogCapture::~LogCapture();
                label_14760:
                    x24_11 = nullptr;
                    x19_9 = nullptr;
                    x21_7 = 1;
                    if (x20_5 != 0)
                    {
                    label_14df8:
                        oniFrameRelease(x20_5);
                    }
                }
                if (((x0_75 == 0 && var_244 != 0xffffffff) || ((x0_75 != 0 || (x0_75 == 0 && var_244 == 0xffffffff)) && (*data_36198 & 1) == 0)))
                {
                    if (x24_11 != 0)
                    {
                        oniFrameRelease(x24_11);
                    }
                    if (x21_7 == 0)
                    {
                        goto label_14e1c;
                    }
                    goto label_14e10;
                }
                if (((x0_75 != 0 || (x0_75 == 0 && var_244 == 0xffffffff)) && (*data_36198 & 1) != 0))
                {
                    x22_3 = *(data_361a2 + 6);
                    goto label_1449c;
                }
            }
            char* x22_1;
            if ((*data_36198 & 1) != 0)
            {
                x22_1 = *(data_361a2 + 6);
                goto label_14014;
            }
            x22_1 = &*(data_36198 + 1);
        label_14014:
            int32_t var_268 = data_36190;
            int64_t s_10;
            __builtin_memset(&s_10, 0, 0x18);
            size_t x0_29 = strlen(x22_1);
            if (x0_29 < -0x10)
            {
                goto label_14e70;
            }
            void* var_250_1;
            if (x0_29 >= 0x17)
            {
                uint64_t x25_1 = ((x0_29 + 0x10) & 0xfffffffffffffff0);
                void* x0_31 = operator new(x25_1);
                x23_1 = x0_31;
                size_t var_258_1 = x0_29;
                var_250_1 = x0_31;
                s_10 = (x25_1 | 1);
            }
            else
            {
                x23_1 = &*s_10[1];
                s_10 = (x0_29 << 1);
            }
            if ((x0_29 >= 0x17 || (x0_29 < 0x17 && x0_29 != 0)))
            {
                memcpy(x23_1, x22_1, x0_29);
            }
            *(x23_1 + x0_29) = 0;
            x28 = var_390_1;
            int32_t x20_7;
            if ((g3::logLevel(&var_268) & 1) == 0)
            {
                x20_7 = 0;
                if ((s_10 & 1) != 0)
                {
                label_140f4:
                    operator delete(var_250_1);
                    if ((x20_7 & 1) == 0)
                    {
                        goto label_142c8;
                    }
                    goto label_14288;
                }
            }
            else
            {
                int64_t s_9;
                __builtin_memset(&s_9, 0, 0x18);
                x20_5 = *rgbd::OBCTAG;
                size_t x0_36 = strlen(x20_5);
                if (x0_36 < -0x10)
                {
                    goto label_14e8c;
                }
                void* var_270_1;
                void* x22_2;
                if (x0_36 >= 0x17)
                {
                    uint64_t x19_5 = ((x0_36 + 0x10) & 0xfffffffffffffff0);
                    void* x0_49 = operator new(x19_5);
                    x22_2 = x0_49;
                    size_t var_278_1 = x0_36;
                    var_270_1 = x0_49;
                    s_9 = (x19_5 | 1);
                }
                else
                {
                    x22_2 = (&s_9 | 1);
                    s_9 = (x0_36 << 1);
                }
                if ((x0_36 >= 0x17 || (x0_36 < 0x17 && x0_36 != 0)))
                {
                    memcpy(x22_2, x20_5, x0_36);
                }
                *(x22_2 + x0_36) = 0;
                x20_7 = g3::logTag(&s_9);
                if ((s_9 & 1) != 0)
                {
                    operator delete(var_270_1);
                    if ((s_10 & 1) != 0)
                    {
                        goto label_140f4;
                    }
                }
                else if ((s_10 & 1) != 0)
                {
                    goto label_140f4;
                }
            }
            if ((x20_7 & 1) == 0)
            {
                goto label_142c8;
            }
        label_14288:
            LogCapture::LogCapture(&var_200, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_55 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1f8, "Wait ir stream failed! timeout!,…", 0x26);
            char* x0_56 = oniGetExtendedError();
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_55, x0_56, strlen(x0_56));
            LogCapture::~LogCapture();
        label_142c8:
            x19_9 = nullptr;
        label_14e10:
            std::__ndk1::mutex::unlock();
        }
        else
        {
        label_14e1c:
            std::__ndk1::mutex::unlock();
        label_14e20:
            x19_9 = nullptr;
        }
        if (*(x28 + 0x28) == x8)
        {
            return (x19_9 & 1);
        }
    }
    __stack_chk_fail();
    /* no return */
}

void sub_14ed8(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4) __noreturn
{
    LogCapture::~LogCapture();
    if (arg2 != 0)
    {
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_14ee0(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8) __noreturn
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
        if (arg2 != 0)
        {
            goto label_15104;
        }
    }
    if (((((arg5 & 1) == 0 && (arg7 & 1) == 0) || ((arg5 & 1) != 0 && (arg7 & 1) == 0)) && arg2 != 0))
    {
    label_15104:
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_14f00(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4, char arg5, void* arg6) __noreturn
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && arg2 != 0) || ((arg5 & 1) != 0 && arg2 != 0)))
    {
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_14f24(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8) __noreturn
{
    if ((arg5 & 1) != 0)
    {
        operator delete(arg6);
    }
    if ((((arg5 & 1) == 0 && (arg7 & 1) != 0) || ((arg5 & 1) != 0 && (arg7 & 1) != 0)))
    {
        operator delete(arg8);
        if (arg2 != 0)
        {
            goto label_15104;
        }
    }
    if (((((arg5 & 1) == 0 && (arg7 & 1) == 0) || ((arg5 & 1) != 0 && (arg7 & 1) == 0)) && arg2 != 0))
    {
    label_15104:
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_14f44(int64_t arg1, int64_t arg2 @ x20, int64_t arg3) __noreturn
{
    if (arg2 != 0)
    {
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_14f48(int64_t arg1, int64_t arg2 @ x20, int64_t arg3, char arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        if (arg2 != 0)
        {
            goto label_15104;
        }
    }
    if (((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)) && arg2 != 0))
    {
    label_15104:
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_14f94(int64_t arg1, int64_t arg2 @ x20, int64_t arg3, char arg4, void* arg5, char arg6, void* arg7) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) != 0) || ((arg4 & 1) != 0 && (arg6 & 1) != 0)))
    {
        operator delete(arg7);
        if (arg2 != 0)
        {
        label_15104:
            oniFrameRelease(arg2);
        }
        goto label_15118;
    }
    if ((((arg4 & 1) == 0 && (arg6 & 1) == 0) || ((arg4 & 1) != 0 && (arg6 & 1) == 0)))
    {
        if (arg2 == 0)
        {
        label_15118:
            std::__ndk1::mutex::unlock();
            sub_1512c(_Unwind_Resume(arg1));
            /* no return */
        }
        goto label_15104;
    }
}

void sub_14fb4(int64_t arg1, int64_t arg2) __noreturn
{
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_14fb8(int64_t arg1, int64_t arg2, char arg3, void* arg4, char arg5, void* arg6) __noreturn
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    if ((((arg3 & 1) == 0 && (arg5 & 1) != 0) || ((arg3 & 1) != 0 && (arg5 & 1) != 0)))
    {
        operator delete(arg6);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_14fd8(void* arg1) __noreturn
{
    sub_1512c(arg1);
    /* no return */
}

void sub_14ffc(int64_t arg1, int64_t arg2 @ x20, int64_t arg3, char arg4, void* arg5) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) == 0 && arg2 != 0) || ((arg4 & 1) != 0 && arg2 != 0)))
    {
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_15010(int64_t arg1, int64_t arg2 @ x20, int64_t arg3) __noreturn
{
    LogCapture::~LogCapture();
    if (arg2 != 0)
    {
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_15014(int64_t arg1, int64_t arg2 @ x20, int64_t arg3, char arg4, void* arg5) __noreturn
{
    if ((arg4 & 1) != 0)
    {
        operator delete(arg5);
    }
    if ((((arg4 & 1) != 0 && arg2 != 0) || ((arg4 & 1) == 0 && arg2 != 0)))
    {
        oniFrameRelease(arg2);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_15040(int64_t arg1, int64_t arg2, char arg3, void* arg4) __noreturn
{
    if ((arg3 & 1) != 0)
    {
        operator delete(arg4);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_15098(int64_t arg1) __noreturn
{
    int64_t x26;
    arg_18 = x26;
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(arg1));
    /* no return */
}

void sub_150a4(int64_t arg1, int64_t arg2 @ x20, int64_t arg3 @ x24, int64_t arg4, char arg5, void* arg6, char arg7, void* arg8) __noreturn
{
    LogCapture::~LogCapture();
    int64_t x21 = _Unwind_Resume(arg1);
    if ((arg5 & 1) == 0)
    {
        while ((arg7 & 1) != 0)
        {
        label_150d8:
            operator delete(arg8);
            x21 = _Unwind_Resume(x21);
        }
    }
    else
    {
        operator delete(arg6);
        if ((arg7 & 1) != 0)
        {
            goto label_150d8;
        }
    }
    int64_t x0_7 = _Unwind_Resume(x21);
    if (arg2 != 0)
    {
        oniFrameRelease(arg2);
    }
    if (arg3 != 0)
    {
        oniFrameRelease(arg3);
    }
    std::__ndk1::mutex::unlock();
    sub_1512c(_Unwind_Resume(x0_7));
    /* no return */
}

void sub_1512c(void* arg1) __noreturn
{
    __cxa_begin_catch(arg1);
    std::terminate();
    /* no return */
}

int64_t rgbd::RGBDOrbbec::setRGBDCallback(void* arg1, int64_t arg2, int32_t* arg3)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    std::__ndk1::mutex::lock();
    char* x24;
    if ((*data_36118 & 1) == 0)
    {
        x24 = &*(data_36118 + 1);
    }
    else
    {
        x24 = *(data_36122 + 6);
    }
    int32_t var_1e0 = data_36110;
    int64_t s_5;
    __builtin_memset(&s_5, 0, 0x18);
    size_t x0_2 = strlen(x24);
    if (x0_2 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_1c8_1;
        void* x25_1;
        if (x0_2 >= 0x17)
        {
            uint64_t x26_1 = ((x0_2 + 0x10) & 0xfffffffffffffff0);
            void* x0_4 = operator new(x26_1);
            x25_1 = x0_4;
            size_t var_1d0_1 = x0_2;
            var_1c8_1 = x0_4;
            s_5 = (x26_1 | 1);
        }
        else
        {
            x25_1 = &*s_5[1];
            s_5 = (x0_2 << 1);
        }
        if ((x0_2 >= 0x17 || (x0_2 < 0x17 && x0_2 != 0)))
        {
            memcpy(x25_1, x24, x0_2);
        }
        *(x25_1 + x0_2) = 0;
        uint64_t x23_2;
        int32_t x23_3;
        if ((g3::logLevel(&var_1e0) & 1) == 0)
        {
            x23_3 = 0;
            if ((s_5 & 1) != 0)
            {
            label_15278:
                operator delete(var_1c8_1);
                if ((x23_3 & 1) == 0)
                {
                    goto label_15280;
                }
                goto label_1530c;
            }
        }
        else
        {
            int64_t s_4;
            __builtin_memset(&s_4, 0, 0x18);
            x23_2 = *rgbd::OBCTAG;
            size_t x0_9 = strlen(x23_2);
            if (x0_9 < -0x10)
            {
                goto label_158d4;
            }
            char* var_1e8_1;
            char* x25_2;
            if (x0_9 >= 0x17)
            {
                uint64_t x26_2 = ((x0_9 + 0x10) & 0xfffffffffffffff0);
                char* x0_12 = operator new(x26_2);
                x25_2 = x0_12;
                size_t var_1f0_1 = x0_9;
                var_1e8_1 = x0_12;
                s_4 = (x26_2 | 1);
            }
            else
            {
                x25_2 = (&s_4 | 1);
                s_4 = (x0_9 << 1);
            }
            if ((x0_9 >= 0x17 || (x0_9 < 0x17 && x0_9 != 0)))
            {
                memcpy(x25_2, x23_2, x0_9);
            }
            x25_2[x0_9] = 0;
            x23_3 = g3::logTag(&s_4);
            if ((s_4 & 1) != 0)
            {
                operator delete(var_1e8_1);
                if ((s_5 & 1) != 0)
                {
                    goto label_15278;
                }
            }
            else if ((s_5 & 1) != 0)
            {
                goto label_15278;
            }
        }
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_1b8;
        void var_1b0;
        int64_t x8_13;
        if ((x23_3 & 1) == 0)
        {
        label_15280:
            x8_13 = *(arg1 + 0x1b0);
            if (x8_13 != 0)
            {
            label_15388:
                int64_t x9_1 = *arg3;
                int64_t x11_1 = ((x8_13 - 1) & x8_13);
                int64_t x12_1;
                if (x11_1 == 0)
                {
                    x12_1 = ((x8_13 - 1) & x9_1);
                }
                else
                {
                    x12_1 = x9_1;
                    if (x8_13 <= x9_1)
                    {
                        x12_1 = (x9_1 % x8_13);
                    }
                }
                int64_t* x13_2 = *(*(arg1 + 0x1a8) + (x12_1 << 3));
                if (x13_2 != 0)
                {
                    while (true)
                    {
                        x13_2 = *x13_2;
                        if (x13_2 == 0)
                        {
                            break;
                        }
                        int64_t x14_1 = x13_2[1];
                        if (x14_1 == x9_1)
                        {
                            if (x13_2[2] == x9_1)
                            {
                                break;
                            }
                        }
                        else if (x11_1 == 0)
                        {
                            if ((x14_1 & (x8_13 - 1)) != x12_1)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x14_1 >= x8_13)
                            {
                                x14_1 = (x14_1 % x8_13);
                            }
                            if (x14_1 != x12_1)
                            {
                                break;
                            }
                        }
                    }
                    if (x13_2 != 0)
                    {
                        var_1b8 = arg3;
                        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation const&>, std::__ndk1::tuple<> >((arg1 + 0x1a8), arg3);
                        if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0x180)) != 0)
                        {
                            var_1b8 = arg3;
                            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x1_7 = (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation const&>, std::__ndk1::tuple<> >((arg1 + 0x1a8), arg3) + 0x18);
                            var_1b8 = x1_7;
                            rgbd::RGBDParam::setLocationCallback((std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x180), x1_7) + 0x30));
                            char* x22_2;
                            if ((*data_36118 & 1) == 0)
                            {
                                x22_2 = &*(data_36118 + 1);
                            }
                            else
                            {
                                x22_2 = *(data_36122 + 6);
                            }
                            int32_t var_218 = data_36110;
                            int64_t s_3;
                            __builtin_memset(&s_3, 0, 0x18);
                            size_t x0_33 = strlen(x22_2);
                            if (x0_33 < -0x10)
                            {
                                goto label_158e4;
                            }
                            void* var_200_1;
                            void* x23_6;
                            if (x0_33 >= 0x17)
                            {
                                uint64_t x24_5 = ((x0_33 + 0x10) & 0xfffffffffffffff0);
                                void* x0_59 = operator new(x24_5);
                                x23_6 = x0_59;
                                size_t var_208_1 = x0_33;
                                var_200_1 = x0_59;
                                s_3 = (x24_5 | 1);
                            }
                            else
                            {
                                x23_6 = &*s_3[1];
                                s_3 = (x0_33 << 1);
                            }
                            if ((x0_33 >= 0x17 || (x0_33 < 0x17 && x0_33 != 0)))
                            {
                                memcpy(x23_6, x22_2, x0_33);
                            }
                            *(x23_6 + x0_33) = 0;
                            int32_t __saved_x1_7;
                            if ((g3::logLevel(&var_218) & 1) == 0)
                            {
                                __saved_x1_7 = 0;
                                if ((s_3 & 1) != 0)
                                {
                                label_157c0:
                                    operator delete(var_200_1);
                                    if ((__saved_x1_7 & 1) == 0)
                                    {
                                        goto label_156f4;
                                    }
                                    goto label_1584c;
                                }
                            }
                            else
                            {
                                int64_t s_2;
                                __builtin_memset(&s_2, 0, 0x18);
                                uint64_t __saved_x1_6 = *rgbd::OBCTAG;
                                size_t x0_64 = strlen(__saved_x1_6);
                                if (x0_64 < -0x10)
                                {
                                    goto label_158ec;
                                }
                                void* var_220_1;
                                void* x23_8;
                                if (x0_64 >= 0x17)
                                {
                                    uint64_t x24_6 = ((x0_64 + 0x10) & 0xfffffffffffffff0);
                                    void* x0_67 = operator new(x24_6);
                                    x23_8 = x0_67;
                                    size_t var_228_1 = x0_64;
                                    var_220_1 = x0_67;
                                    s_2 = (x24_6 | 1);
                                }
                                else
                                {
                                    x23_8 = (&s_2 | 1);
                                    s_2 = (x0_64 << 1);
                                }
                                if ((x0_64 >= 0x17 || (x0_64 < 0x17 && x0_64 != 0)))
                                {
                                    memcpy(x23_8, __saved_x1_6, x0_64);
                                }
                                *(x23_8 + x0_64) = 0;
                                __saved_x1_7 = g3::logTag(&s_2);
                                if ((s_2 & 1) != 0)
                                {
                                    operator delete(var_220_1);
                                    if ((s_3 & 1) != 0)
                                    {
                                        goto label_157c0;
                                    }
                                }
                                else if ((s_3 & 1) != 0)
                                {
                                    goto label_157c0;
                                }
                            }
                            if ((__saved_x1_7 & 1) == 0)
                            {
                                goto label_156f4;
                            }
                        label_1584c:
                            LogCapture::LogCapture(&var_1b8, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_73 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "set callback success ", 0x15);
                            int64_t x8_36 = *arg3;
                            char* x20_2;
                            if (x8_36 > 3)
                            {
                                x20_2 = "Rgbd";
                            }
                            else
                            {
                                x20_2 = &data_35608[x8_36];
                            }
                            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_73, x20_2, strlen(x20_2));
                            goto label_156ec;
                        }
                    }
                }
            }
        }
        else
        {
        label_1530c:
            LogCapture::LogCapture(&var_1b8, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_18 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "set callback ", 0xd);
            int64_t x8_11 = *arg3;
            char* x24_2;
            if (x8_11 > 3)
            {
                x24_2 = "Rgbd";
            }
            else
            {
                x24_2 = &data_35608[x8_11];
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_18, x24_2, strlen(x24_2));
            LogCapture::~LogCapture();
            x8_13 = *(arg1 + 0x1b0);
            if (x8_13 != 0)
            {
                goto label_15388;
            }
        }
        char* x22_3;
        if ((*data_36198 & 1) != 0)
        {
            x22_3 = *(data_361a2 + 6);
            goto label_15520;
        }
        x22_3 = &*(data_36198 + 1);
    label_15520:
        int32_t var_250 = data_36190;
        int64_t s_1;
        __builtin_memset(&s_1, 0, 0x18);
        size_t x0_35 = strlen(x22_3);
        if (x0_35 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_158d4:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_158dc:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_158e4:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_158ec:
            int64_t x0_79 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            LogCapture::~LogCapture();
            std::__ndk1::mutex::unlock();
            void* x0_82;
            int32_t* x1_16;
            char* x2_12;
            x0_82 = _Unwind_Resume(x0_79);
            /* tailcall */
            return rgbd::RGBDOrbbec::setRgbdLocation(x0_82, x1_16, x2_12);
        }
        uint64_t var_238_1;
        if (x0_35 >= 0x17)
        {
            uint64_t x24_3 = ((x0_35 + 0x10) & 0xfffffffffffffff0);
            uint64_t x0_37 = operator new(x24_3);
            x23_2 = x0_37;
            size_t var_240_1 = x0_35;
            var_238_1 = x0_37;
            s_1 = (x24_3 | 1);
        }
        else
        {
            x23_2 = &*s_1[1];
            s_1 = (x0_35 << 1);
        }
        if ((x0_35 >= 0x17 || (x0_35 < 0x17 && x0_35 != 0)))
        {
            memcpy(x23_2, x22_3, x0_35);
        }
        *(x23_2 + x0_35) = 0;
        int32_t __saved_x1_4;
        if ((g3::logLevel(&var_250) & 1) == 0)
        {
            __saved_x1_4 = 0;
            if ((s_1 & 1) != 0)
            {
            label_155f0:
                operator delete(var_238_1);
                if ((__saved_x1_4 & 1) == 0)
                {
                    goto label_156f4;
                }
                goto label_1567c;
            }
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            uint64_t __saved_x1_3 = *rgbd::OBCTAG;
            size_t x0_42 = strlen(__saved_x1_3);
            if (x0_42 < -0x10)
            {
                goto label_158dc;
            }
            void* var_258_1;
            void* x23_7;
            if (x0_42 >= 0x17)
            {
                uint64_t x24_4 = ((x0_42 + 0x10) & 0xfffffffffffffff0);
                void* x0_45 = operator new(x24_4);
                x23_7 = x0_45;
                size_t var_260_1 = x0_42;
                var_258_1 = x0_45;
                s = (x24_4 | 1);
            }
            else
            {
                x23_7 = (&s | 1);
                s = (x0_42 << 1);
            }
            if ((x0_42 >= 0x17 || (x0_42 < 0x17 && x0_42 != 0)))
            {
                memcpy(x23_7, __saved_x1_3, x0_42);
            }
            *(x23_7 + x0_42) = 0;
            __saved_x1_4 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                operator delete(var_258_1);
                if ((s_1 & 1) != 0)
                {
                    goto label_155f0;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_155f0;
            }
        }
        if ((__saved_x1_4 & 1) == 0)
        {
            goto label_156f4;
        }
    label_1567c:
        LogCapture::LogCapture(&var_1b8, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_51 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "set callback error ", 0x13);
        int64_t x8_25 = *arg3;
        char* x20_1;
        if (x8_25 > 3)
        {
            x20_1 = "Rgbd";
        }
        else
        {
            x20_1 = &data_35608[x8_25];
        }
        std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_51, x20_1, strlen(x20_1));
    label_156ec:
        LogCapture::~LogCapture();
    label_156f4:
        int64_t x0_57 = std::__ndk1::mutex::unlock();
        if (*(x27 + 0x28) == x8)
        {
            return x0_57;
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t sub_158f8(int64_t arg1)
{
    std::__ndk1::mutex::unlock();
    void* x0_1;
    int32_t* x1;
    char* x2;
    x0_1 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::setRgbdLocation(x0_1, x1, x2);
}

int64_t sub_158fc(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    void* x0_3;
    int32_t* x1;
    char* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::setRgbdLocation(x0_3, x1, x2);
}

int64_t sub_1591c(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    void* x0_2;
    int32_t* x1;
    char* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::setRgbdLocation(x0_2, x1, x2);
}

int64_t sub_15940(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    void* x0_3;
    int32_t* x1;
    char* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::setRgbdLocation(x0_3, x1, x2);
}

int64_t sub_15978(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    std::__ndk1::mutex::unlock();
    void* x0_3;
    int32_t* x1;
    char* x2;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::setRgbdLocation(x0_3, x1, x2);
}

int64_t sub_159a0(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    void* x0_2;
    int32_t* x1;
    char* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::setRgbdLocation(x0_2, x1, x2);
}

int64_t sub_159b4(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    std::__ndk1::mutex::unlock();
    void* x0_2;
    int32_t* x1;
    char* x2;
    x0_2 = _Unwind_Resume(arg1);
    /* tailcall */
    return rgbd::RGBDOrbbec::setRgbdLocation(x0_2, x1, x2);
}

int64_t rgbd::RGBDOrbbec::setRgbdLocation(void* arg1, int32_t* arg2, char* arg3)
{
    uint64_t x25;
    uint64_t var_48 = x25;
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    int64_t x0_61;
    char s_2;
    void* var_2f0;
    int64_t s_3;
    void* var_2d0;
    int32_t s_6;
    size_t s_7;
    if (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0x180)) == 0)
    {
        int64_t x8_2 = *(arg1 + 0x1b0);
        int64_t x1_1 = *arg2;
        int64_t* x12_2;
        if (x8_2 != 0)
        {
            int64_t x10_2 = ((x8_2 - 1) & x8_2);
            int64_t x11_2;
            if (x10_2 == 0)
            {
                x11_2 = ((x8_2 - 1) & x1_1);
            }
            else
            {
                x11_2 = x1_1;
                if (x8_2 <= x1_1)
                {
                    x11_2 = (x1_1 % x8_2);
                }
            }
            x12_2 = *(*(arg1 + 0x1a8) + (x11_2 << 3));
            if (x12_2 != 0)
            {
                while (true)
                {
                    x12_2 = *x12_2;
                    if (x12_2 == 0)
                    {
                        break;
                    }
                    int64_t x13_1 = x12_2[1];
                    if (x13_1 == x1_1)
                    {
                        if (x12_2[2] == x1_1)
                        {
                            break;
                        }
                    }
                    else if (x10_2 == 0)
                    {
                        if ((x13_1 & (x8_2 - 1)) != x11_2)
                        {
                            break;
                        }
                    }
                    else
                    {
                        if (x13_1 >= x8_2)
                        {
                            x13_1 = (x13_1 % x8_2);
                        }
                        if (x13_1 != x11_2)
                        {
                            break;
                        }
                    }
                }
                if (x12_2 != 0)
                {
                    char* x24_6;
                    if ((*data_36198 & 1) == 0)
                    {
                        x24_6 = &*(data_36198 + 1);
                    }
                    else
                    {
                        x24_6 = *(data_361a2 + 6);
                    }
                    int32_t var_2e8 = data_36190;
                    __builtin_memset(&s_3, 0, 0x18);
                    size_t x0_63 = strlen(x24_6);
                    if (x0_63 < -0x10)
                    {
                        goto label_16414;
                    }
                    void* x25_3;
                    if (x0_63 >= 0x17)
                    {
                        uint64_t x26_3 = ((x0_63 + 0x10) & 0xfffffffffffffff0);
                        void* x0_65 = operator new(x26_3);
                        x25_3 = x0_65;
                        size_t var_2d8_1 = x0_63;
                        var_2d0 = x0_65;
                        s_3 = (x26_3 | 1);
                    }
                    else
                    {
                        x25_3 = &*s_3[1];
                        s_3 = (x0_63 << 1);
                    }
                    if ((x0_63 >= 0x17 || (x0_63 < 0x17 && x0_63 != 0)))
                    {
                        memcpy(x25_3, x24_6, x0_63);
                    }
                    *(x25_3 + x0_63) = 0;
                    int32_t x0_68 = g3::logLevel(&var_2e8);
                    int32_t x22_4;
                    if ((x0_68 & 1) == 0)
                    {
                        x22_4 = 0;
                        if ((s_3 & 1) != 0)
                        {
                        label_16258:
                            operator delete(var_2d0);
                            if ((x22_4 & 1) != 0)
                            {
                                goto label_162e4;
                            }
                        }
                    }
                    else
                    {
                        __builtin_memset(&s_2, 0, 0x18);
                        char* x22_3 = *rgbd::OBCTAG;
                        size_t x0_70 = strlen(x22_3);
                        if (x0_70 < -0x10)
                        {
                            goto label_1641c;
                        }
                        void* x25_4;
                        if (x0_70 >= 0x17)
                        {
                            uint64_t x26_4 = ((x0_70 + 0x10) & 0xfffffffffffffff0);
                            void* x0_73 = operator new(x26_4);
                            x25_4 = x0_73;
                            size_t var_2f8_1 = x0_70;
                            var_2f0 = x0_73;
                            s_2 = (x26_4 | 1);
                        }
                        else
                        {
                            x25_4 = (&s_2 | 1);
                            s_2 = (x0_70 << 1);
                        }
                        if ((x0_70 >= 0x17 || (x0_70 < 0x17 && x0_70 != 0)))
                        {
                            memcpy(x25_4, x22_3, x0_70);
                        }
                        *(x25_4 + x0_70) = 0;
                        x22_4 = g3::logTag(&s_2);
                        if ((s_2 & 1) != 0)
                        {
                            operator delete(var_2f0);
                            if ((s_3 & 1) != 0)
                            {
                                goto label_16258;
                            }
                        }
                        else if ((s_3 & 1) != 0)
                        {
                            goto label_16258;
                        }
                    }
                    if (((((x0_68 & 1) == 0 && (s_3 & 1) == 0) || (x0_68 & 1) != 0) && (x22_4 & 1) != 0))
                    {
                    label_162e4:
                        LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
                        int32_t x0_79 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&s_7, "repetitive location set, ", 0x19);
                        *arg2;
                        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(x0_79);
                        LogCapture::~LogCapture();
                    }
                    if (*(arg1 + 0x198) != 0)
                    {
                        int64_t* i_7 = *(arg1 + 0x190);
                        if (i_7 != 0)
                        {
                            int64_t* i;
                            do
                            {
                                i = *i_7;
                                rgbd::RGBDParam::~RGBDParam();
                                if ((i_7[2] & 1) != 0)
                                {
                                    operator delete(i_7[4]);
                                }
                                operator delete(i_7);
                                i_7 = i;
                            } while (i != 0);
                        }
                        int64_t x8_58 = *(arg1 + 0x188);
                        *(arg1 + 0x190) = 0;
                        if (x8_58 != 0)
                        {
                            int64_t x9_11 = 0;
                            do
                            {
                                *(*(arg1 + 0x180) + (x9_11 << 3)) = 0;
                                x9_11 = (x9_11 + 1);
                            } while (x8_58 != x9_11);
                        }
                        *(arg1 + 0x198) = 0;
                    }
                    if (*(arg1 + 0x1c0) == 0)
                    {
                        goto label_15cf4;
                    }
                    int64_t* i_5 = *(arg1 + 0x1b8);
                    if (i_5 != 0)
                    {
                        int64_t* i_1;
                        do
                        {
                            i_1 = *i_5;
                            if ((i_5[3] & 1) != 0)
                            {
                                operator delete(i_5[5]);
                            }
                            operator delete(i_5);
                            i_5 = i_1;
                        } while (i_1 != 0);
                    }
                    int64_t x8_61 = *(arg1 + 0x1b0);
                    *(arg1 + 0x1b8) = 0;
                    if (x8_61 != 0)
                    {
                        int64_t x9_12 = 0;
                        do
                        {
                            *(*(arg1 + 0x1a8) + (x9_12 << 3)) = 0;
                            x9_12 = (x9_12 + 1);
                        } while (x8_61 != x9_12);
                    }
                label_15c1c:
                    x0_61 = 0;
                    *(arg1 + 0x1c0) = 0;
                }
            }
        }
        if (((x8_2 == 0 || (x8_2 != 0 && x12_2 == 0)) || (x8_2 != 0 && x12_2 == 0)))
        {
            void var_290;
            rgbd::RGBDParam::RGBDParam(&var_290);
            rgbd::RGBDParam::setSerialNum(&var_290);
            rgbd::RGBDParam::setType(&var_290);
            char* x24_3;
            if ((*data_36118 & 1) == 0)
            {
                x24_3 = &*(data_36118 + 1);
            }
            else
            {
                x24_3 = *(data_36122 + 6);
            }
            int32_t var_320 = data_36110;
            int64_t s_1;
            __builtin_memset(&s_1, 0, 0x18);
            size_t x0_30 = strlen(x24_3);
            if (x0_30 < -0x10)
            {
                goto label_163f0;
            }
            uint64_t var_308_1;
            if (x0_30 >= 0x17)
            {
                uint64_t x26_1 = ((x0_30 + 0x10) & 0xfffffffffffffff0);
                uint64_t x0_32 = operator new(x26_1);
                x25 = x0_32;
                size_t var_310_1 = x0_30;
                var_308_1 = x0_32;
                s_1 = (x26_1 | 1);
            }
            else
            {
                x25 = &*s_1[1];
                s_1 = (x0_30 << 1);
            }
            if ((x0_30 >= 0x17 || (x0_30 < 0x17 && x0_30 != 0)))
            {
                memcpy(x25, x24_3, x0_30);
            }
            *(x25 + x0_30) = 0;
            int32_t x0_35;
            int128_t v0_1;
            x0_35 = g3::logLevel(&var_320);
            int32_t x21_3;
            if ((x0_35 & 1) == 0)
            {
                x21_3 = 0;
                if ((s_1 & 1) != 0)
                {
                label_15e8c:
                    operator delete(var_308_1);
                    if ((x21_3 & 1) == 0)
                    {
                        goto label_15f94;
                    }
                    goto label_15f14;
                }
            }
            else
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                char* x21_2 = *rgbd::OBCTAG;
                size_t x0_37 = strlen(x21_2);
                if (x0_37 < -0x10)
                {
                    goto label_16400;
                }
                uint64_t var_328_1;
                if (x0_37 >= 0x17)
                {
                    uint64_t x26_2 = ((x0_37 + 0x10) & 0xfffffffffffffff0);
                    uint64_t x0_40 = operator new(x26_2);
                    x25 = x0_40;
                    size_t var_330_1 = x0_37;
                    var_328_1 = x0_40;
                    s = (x26_2 | 1);
                }
                else
                {
                    x25 = (&s | 1);
                    s = (x0_37 << 1);
                }
                if ((x0_37 >= 0x17 || (x0_37 < 0x17 && x0_37 != 0)))
                {
                    memcpy(x25, x21_2, x0_37);
                }
                *(x25 + x0_37) = 0;
                int32_t x0_43;
                x0_43 = g3::logTag(&s);
                x21_3 = x0_43;
                if ((s & 1) != 0)
                {
                    operator delete(var_328_1);
                    if ((s_1 & 1) != 0)
                    {
                        goto label_15e8c;
                    }
                }
                else if ((s_1 & 1) != 0)
                {
                    goto label_15e8c;
                }
            }
            if ((x21_3 & 1) != 0)
            {
            label_15f14:
                LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36110, &data_20e80[0x1a], &nullptr->ident.version);
                rgbd::RGBDParam::getName();
                char var_350;
                uint64_t x9_7 = var_350;
                int32_t temp1_1 = (x9_7 & 1);
                char* var_340;
                char* x1_11;
                if (temp1_1 == 0)
                {
                    x1_11 = (&var_350 | 1);
                }
                else
                {
                    x1_11 = var_340;
                }
                uint64_t x2_5;
                uint64_t var_348;
                if (temp1_1 == 0)
                {
                    x2_5 = (x9_7 >> 1);
                }
                else
                {
                    x2_5 = var_348;
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_47 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&s_7, x1_11, x2_5), ": ", 2);
                uint64_t x8_31 = *arg3;
                int32_t temp2_1 = (x8_31 & 1);
                void* x1_12;
                if (temp2_1 != 0)
                {
                    x1_12 = *(arg3 + 0x10);
                }
                else
                {
                    x1_12 = &arg3[1];
                }
                uint64_t x2_6;
                if (temp2_1 == 0)
                {
                    x2_6 = (x8_31 >> 1);
                }
                else
                {
                    x2_6 = *(arg3 + 8);
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_47, x1_12, x2_6);
                if ((var_350 & 1) != 0)
                {
                    operator delete(var_340);
                }
                LogCapture::~LogCapture();
                goto label_15f94;
            }
        label_15f94:
            int32_t s_8 = *arg2;
            __builtin_memset(&s_7, 0, 0x18);
            s_6 = s_8;
            void* var_1a8_1;
            if ((*arg3 & 1) != 0)
            {
                size_t x21_4 = *(arg3 + 8);
                if (x21_4 < -0x10)
                {
                    goto label_16404;
                }
                int64_t x23_3 = *(arg3 + 0x10);
                void* x24_5;
                if (x21_4 >= 0x17)
                {
                    x25 = ((x21_4 + 0x10) & 0xfffffffffffffff0);
                    void* x0_51 = operator new(x25);
                    x24_5 = x0_51;
                    size_t var_1b0_1 = x21_4;
                    var_1a8_1 = x0_51;
                    s_7 = (x25 | 1);
                }
                else
                {
                    x24_5 = &*s_7[1];
                    s_7 = (x21_4 << 1);
                }
                if ((x21_4 >= 0x17 || (x21_4 < 0x17 && x21_4 != 0)))
                {
                    memcpy(x24_5, x23_3, x21_4);
                }
                *(x24_5 + x21_4) = 0;
                goto label_16048;
            }
            var_1a8_1 = *(arg3 + 0x10);
            s_7 = *arg3;
        label_16048:
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::pair<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >((arg1 + 0x1a8), &s_6);
            if ((s_7 & 1) != 0)
            {
                operator delete(var_1a8_1);
            }
            __builtin_memset(&s_6, 0, 0x18);
            void* var_1b0_2;
            if ((*arg3 & 1) != 0)
            {
                size_t s_9 = *(arg3 + 8);
                if (s_9 < -0x10)
                {
                    goto label_1640c;
                }
                int64_t x21_5 = *(arg3 + 0x10);
                void* x22_1;
                if (s_9 >= 0x17)
                {
                    uint64_t x23_4 = ((s_9 + 0x10) & 0xfffffffffffffff0);
                    void* x0_56 = operator new(x23_4);
                    x22_1 = x0_56;
                    s_7 = s_9;
                    var_1b0_2 = x0_56;
                    s_6 = (x23_4 | 1);
                }
                else
                {
                    x22_1 = (&s_6 | 1);
                    s_6 = (s_9 << 1);
                }
                if ((s_9 >= 0x17 || (s_9 < 0x17 && s_9 != 0)))
                {
                    memcpy(x22_1, x21_5, s_9);
                }
                *(x22_1 + s_9) = 0;
                goto label_160f4;
            }
            var_1b0_2 = *(arg3 + 0x10);
            s_6 = *arg3;
        label_160f4:
            void var_1a0;
            rgbd::RGBDParam::RGBDParam(&var_1a0);
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> >((arg1 + 0x180), &s_6);
            rgbd::RGBDParam::~RGBDParam();
            if ((s_6 & 1) != 0)
            {
                operator delete(var_1b0_2);
            }
            rgbd::RGBDParam::~RGBDParam();
            x0_61 = 1;
        }
    }
    else
    {
        char* x23_1;
        if ((*data_36198 & 1) == 0)
        {
            x23_1 = &*(data_36198 + 1);
        }
        else
        {
            x23_1 = *(data_361a2 + 6);
        }
        int32_t var_2b0 = data_36190;
        int64_t s_5;
        __builtin_memset(&s_5, 0, 0x18);
        size_t x0_3 = strlen(x23_1);
        if (x0_3 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_163f0:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_163f8:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_16400:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_16404:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_1640c:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_16414:
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        label_1641c:
            int64_t x0_88 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s_2 & 1) != 0)
            {
                operator delete(var_2f0);
            }
            if ((((s_2 & 1) == 0 && (s_3 & 1) != 0) || ((s_2 & 1) != 0 && (s_3 & 1) != 0)))
            {
                operator delete(var_2d0);
            }
            int64_t x0_92 = _Unwind_Resume(x0_88);
            rgbd::RGBDParam::~RGBDParam();
            /* tailcall */
            return rgbd::RGBDParam::~RGBDParam(_Unwind_Resume(x0_92));
        }
        void* var_298_1;
        void* x24_1;
        if (x0_3 >= 0x17)
        {
            x25 = ((x0_3 + 0x10) & 0xfffffffffffffff0);
            void* x0_5 = operator new(x25);
            x24_1 = x0_5;
            size_t var_2a0_1 = x0_3;
            var_298_1 = x0_5;
            s_5 = (x25 | 1);
        }
        else
        {
            x24_1 = &*s_5[1];
            s_5 = (x0_3 << 1);
        }
        if ((x0_3 >= 0x17 || (x0_3 < 0x17 && x0_3 != 0)))
        {
            memcpy(x24_1, x23_1, x0_3);
        }
        *(x24_1 + x0_3) = 0;
        int32_t x0_8 = g3::logLevel(&var_2b0);
        int32_t x20_4;
        if ((x0_8 & 1) == 0)
        {
            x20_4 = 0;
            if ((s_5 & 1) != 0)
            {
            label_15b58:
                operator delete(var_298_1);
                if ((x20_4 & 1) != 0)
                {
                    goto label_15ca8;
                }
            }
        }
        else
        {
            int64_t s_4;
            __builtin_memset(&s_4, 0, 0x18);
            uint64_t x20_3 = *rgbd::OBCTAG;
            size_t x0_10 = strlen(x20_3);
            if (x0_10 < -0x10)
            {
                goto label_163f8;
            }
            void* var_2b8_1;
            void* x24_2;
            if (x0_10 >= 0x17)
            {
                uint64_t x25_1 = ((x0_10 + 0x10) & 0xfffffffffffffff0);
                void* x0_18 = operator new(x25_1);
                x24_2 = x0_18;
                size_t var_2c0_1 = x0_10;
                var_2b8_1 = x0_18;
                s_4 = (x25_1 | 1);
            }
            else
            {
                x24_2 = (&s_4 | 1);
                s_4 = (x0_10 << 1);
            }
            if ((x0_10 >= 0x17 || (x0_10 < 0x17 && x0_10 != 0)))
            {
                memcpy(x24_2, x20_3, x0_10);
            }
            *(x24_2 + x0_10) = 0;
            x20_4 = g3::logTag(&s_4);
            if ((s_4 & 1) != 0)
            {
                operator delete(var_2b8_1);
                if ((s_5 & 1) != 0)
                {
                    goto label_15b58;
                }
            }
            else if ((s_5 & 1) != 0)
            {
                goto label_15b58;
            }
        }
        if (((((((x0_8 & 1) == 0 && (s_5 & 1) == 0) || (x0_8 & 1) != 0) && (x20_4 & 1) == 0) || ((x0_8 & 1) == 0 && (s_5 & 1) != 0)) && *(arg1 + 0x198) != 0))
        {
        label_15b68:
            int64_t* i_6 = *(arg1 + 0x190);
            if (i_6 != 0)
            {
                int64_t* i_2;
                do
                {
                    i_2 = *i_6;
                    rgbd::RGBDParam::~RGBDParam();
                    if ((i_6[2] & 1) != 0)
                    {
                        operator delete(i_6[4]);
                    }
                    operator delete(i_6);
                    i_6 = i_2;
                } while (i_2 != 0);
            }
            int64_t x8_9 = *(arg1 + 0x188);
            *(arg1 + 0x190) = 0;
            if (x8_9 != 0)
            {
                int64_t x9_3 = 0;
                do
                {
                    *(*(arg1 + 0x180) + (x9_3 << 3)) = 0;
                    x9_3 = (x9_3 + 1);
                } while (x8_9 != x9_3);
            }
            *(arg1 + 0x198) = 0;
            if (*(arg1 + 0x1c0) != 0)
            {
                goto label_15bcc;
            }
            goto label_15cf4;
        }
        if (((((x0_8 & 1) == 0 && (s_5 & 1) == 0) || (x0_8 & 1) != 0) && (x20_4 & 1) != 0))
        {
        label_15ca8:
            LogCapture::LogCapture(&s_6, *rgbd::OBCTAG, &data_36190, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_24 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&s_7, "repetitive serial number, ", 0x1a);
            uint64_t x8_17 = *arg3;
            int32_t temp0_1 = (x8_17 & 1);
            char* x1_5;
            if (temp0_1 != 0)
            {
                x1_5 = *(arg3 + 0x10);
            }
            else
            {
                x1_5 = &arg3[1];
            }
            uint64_t x2_2;
            if (temp0_1 == 0)
            {
                x2_2 = (x8_17 >> 1);
            }
            else
            {
                x2_2 = *(arg3 + 8);
            }
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_24, x1_5, x2_2);
            LogCapture::~LogCapture();
            if (*(arg1 + 0x198) != 0)
            {
                goto label_15b68;
            }
        }
        if ((((((((x0_8 & 1) == 0 && (s_5 & 1) == 0) || (x0_8 & 1) != 0) && (x20_4 & 1) == 0) || ((x0_8 & 1) == 0 && (s_5 & 1) != 0)) && *(arg1 + 0x198) == 0) || ((((x0_8 & 1) == 0 && (s_5 & 1) == 0) || (x0_8 & 1) != 0) && (x20_4 & 1) != 0)))
        {
            if (*(arg1 + 0x1c0) != 0)
            {
            label_15bcc:
                int64_t* i_4 = *(arg1 + 0x1b8);
                if (i_4 != 0)
                {
                    int64_t* i_3;
                    do
                    {
                        i_3 = *i_4;
                        if ((i_4[3] & 1) != 0)
                        {
                            operator delete(i_4[5]);
                        }
                        operator delete(i_4);
                        i_4 = i_3;
                    } while (i_3 != 0);
                }
                int64_t x8_12 = *(arg1 + 0x1b0);
                *(arg1 + 0x1b8) = 0;
                if (x8_12 != 0)
                {
                    int64_t x9_4 = 0;
                    do
                    {
                        *(*(arg1 + 0x1a8) + (x9_4 << 3)) = 0;
                        x9_4 = (x9_4 + 1);
                    } while (x8_12 != x9_4);
                }
                goto label_15c1c;
            }
        label_15cf4:
            x0_61 = 0;
        }
    }
    if (*(x27 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_61;
}

int64_t sub_16440(int64_t arg1, char arg2, void* arg3)
{
    LogCapture::~LogCapture();
    int64_t x0_1 = _Unwind_Resume(arg1);
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    int64_t x0_4 = _Unwind_Resume(x0_1);
    rgbd::RGBDParam::~RGBDParam();
    /* tailcall */
    return rgbd::RGBDParam::~RGBDParam(_Unwind_Resume(x0_4));
}

int64_t sub_16460(int64_t arg1)
{
    LogCapture::~LogCapture();
    rgbd::RGBDParam::~RGBDParam();
    /* tailcall */
    return rgbd::RGBDParam::~RGBDParam(_Unwind_Resume(arg1));
}

int64_t sub_1646c(int64_t arg1, char arg2, void* arg3, char arg4, void* arg5)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    if ((((arg2 & 1) == 0 && (arg4 & 1) != 0) || ((arg2 & 1) != 0 && (arg4 & 1) != 0)))
    {
        operator delete(arg5);
    }
    rgbd::RGBDParam::~RGBDParam();
    /* tailcall */
    return rgbd::RGBDParam::~RGBDParam(_Unwind_Resume(arg1));
}

int64_t sub_164ac(int64_t arg1, char arg2, void* arg3)
{
    rgbd::RGBDParam::~RGBDParam();
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    rgbd::RGBDParam::~RGBDParam();
    /* tailcall */
    return rgbd::RGBDParam::~RGBDParam(_Unwind_Resume(arg1));
}

int64_t sub_164ec(int64_t arg1, char arg2, void* arg3)
{
    if ((arg2 & 1) != 0)
    {
        operator delete(arg3);
    }
    rgbd::RGBDParam::~RGBDParam();
    /* tailcall */
    return rgbd::RGBDParam::~RGBDParam(_Unwind_Resume(arg1));
}

int64_t rgbd::RGBDParam::~RGBDParam(void* arg1)
{
    int64_t* x0 = *(arg1 + 0xc0);
    int64_t x8_2;
    if ((arg1 + 0xa0) == x0)
    {
        x8_2 = *(*x0 + 0x20);
    }
    if (((arg1 + 0xa0) != x0 && x0 != 0))
    {
        x8_2 = *(*x0 + 0x28);
    }
    if (((arg1 + 0xa0) == x0 || ((arg1 + 0xa0) != x0 && x0 != 0)))
    {
        x8_2();
    }
    int64_t* x0_1 = *(arg1 + 0x90);
    int64_t x8_6;
    if ((arg1 + 0x70) == x0_1)
    {
        x8_6 = *(*x0_1 + 0x20);
    }
    if (((arg1 + 0x70) != x0_1 && x0_1 != 0))
    {
        x8_6 = *(*x0_1 + 0x28);
    }
    if (((arg1 + 0x70) == x0_1 || ((arg1 + 0x70) != x0_1 && x0_1 != 0)))
    {
        x8_6();
    }
    int64_t* x20 = *(arg1 + 0x58);
    int64_t x9_1;
    if (x20 != 0)
    {
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x20[1]);
            i = __stlxr((x9_1 - 1), &x20[1]);
        } while (i != 0);
    }
    if (((x20 == 0 || (x20 != 0 && x9_1 != 0)) && (*(arg1 + 0x30) & 1) != 0))
    {
    label_16638:
        operator delete(*(arg1 + 0x40));
        int64_t x0_7;
        if ((*(arg1 + 0x10) & 1) == 0)
        {
        label_16600:
            x0_7 = *(arg1 + 8);
            if (x0_7 == 0)
            {
            label_1665c:
                return x0_7;
            }
        label_16610:
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    label_16648:
        operator delete(*(arg1 + 0x20));
        x0_7 = *(arg1 + 8);
        if (x0_7 == 0)
        {
            goto label_1665c;
        }
        goto label_16610;
    }
    if ((x20 != 0 && x9_1 == 0))
    {
        *(*x20 + 0x10)(x20);
        std::__ndk1::__shared_weak_count::__release_weak();
        if ((*(arg1 + 0x30) & 1) != 0)
        {
            goto label_16638;
        }
    }
    if ((((x20 == 0 || (x20 != 0 && x9_1 != 0)) && (*(arg1 + 0x30) & 1) == 0) || (x20 != 0 && x9_1 == 0)))
    {
        if ((*(arg1 + 0x10) & 1) == 0)
        {
            goto label_16600;
        }
        goto label_16648;
    }
}

int64_t rgbd::RGBDOrbbec::updateRgbdSet(void* arg1, int32_t* arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg3)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int64_t x0_1 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >((arg1 + 0x180));
    if (x0_1 != 0)
    {
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_60_1 = arg3;
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x180), arg3);
        var_60_1 = rgbd::RGBDParam::getLocation();
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__erase_unique<rgbd::RgbdLocation>((arg1 + 0x1a8));
        int32_t var_70;
        int32_t* var_60_2 = &var_70;
        var_70 = *arg2;
        char* x0_9 = (std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation&&>, std::__ndk1::tuple<> >((arg1 + 0x1a8), &var_70) + 0x18);
        if (x0_9 != arg3)
        {
            arg3[1];
            void* x1_3;
            if ((*arg3 & 1) != 0)
            {
                x1_3 = arg3[2];
            }
            else
            {
                x1_3 = (arg3 + 1);
            }
            std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(x0_9, x1_3);
        }
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_60_3 = arg3;
        void* x0_11 = std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >((arg1 + 0x180), arg3);
        var_60_3 = *arg2;
        rgbd::RGBDParam::changeLocation((x0_11 + 0x30));
        x0_1 = 1;
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int64_t rgbd::RGBDOrbbec::getSerialNumber(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1 @ x8)
{
    void tpidr_el0;
    uint64_t x19 = _ReadStatusReg(tpidr_el0);
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_1 = arg1;
    int64_t x8 = *(x19 + 0x28);
    system("su -c "chmod -R 777 /dev/bus/usb…");
    __builtin_memset(s_1, 0, 0x18);
    int32_t x0 = oniInitialize(0x7d3);
    if (x0 == 0)
    {
        int64_t s;
        int32_t var_78;
        oniGetDeviceList(&s, &var_78);
        int64_t x27_1 = var_78;
        int64_t s_3 = s;
        uint64_t x22_1 = (x27_1 * 0x304);
        uint64_t x0_2;
        if (0 == ((x27_1 * 0x304) >> 0x40))
        {
            x0_2 = x22_1;
        }
        else
        {
            x0_2 = -1;
        }
        void* x0_3 = operator new[](x0_2);
        void* x24_1 = x0_3;
        memcpy(x0_3, s_3, x22_1);
        void* var_a8_1 = x24_1;
        oniReleaseDeviceList(s_3);
        int32_t var_70_1 = 0;
        var_78 = 0;
        int32_t var_7c = 0xc;
        if (x27_1 >= 1)
        {
            int64_t x28_1 = 0;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* s_2 = s_1;
            int64_t x0_6;
            uint64_t x9_2;
            do
            {
                x0_6 = strlen(((x24_1 + (x28_1 * 0x304)) + 0x100));
                uint64_t x8_5 = data_362f0;
                if ((x8_5 & 1) == 0)
                {
                    x9_2 = (x8_5 >> 1);
                }
                else
                {
                    x9_2 = data_362f8;
                }
                if (x0_6 == x9_2)
                {
                    if (x0_6 == -1)
                    {
                        break;
                    }
                    int32_t x0_8;
                    if ((x0_6 != 0 && x0_6 != -1))
                    {
                        int32_t* x0_7;
                        if ((x8_5 & 1) == 0)
                        {
                            x0_7 = &data_362f1;
                        }
                        else
                        {
                            x0_7 = data_36300;
                        }
                        x0_8 = memcmp(x0_7, ((x24_1 + (x28_1 * 0x304)) + 0x100));
                    }
                    if ((x0_6 == 0 || ((x0_6 != 0 && x0_6 != -1) && x0_8 == 0)))
                    {
                        void** x0_9 = operator new(0x428);
                        *(x0_9 + 8) = {0};
                        *x0_9 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> > + 0x10);
                        __builtin_memset(&x0_9[0x66], 0, 0x15);
                        __builtin_memset(&x0_9[0x69], 0, 0x15);
                        __builtin_memset(&x0_9[0x6c], 0, 0x15);
                        __builtin_memset(&x0_9[0x6f], 0, 0x15);
                        __builtin_memset(&x0_9[0x72], 0, 0x15);
                        __builtin_memset(&x0_9[0x75], 0, 0x15);
                        __builtin_memset(&x0_9[0x78], 0, 0x15);
                        __builtin_memset(&x0_9[0x7b], 0, 0x15);
                        __builtin_memset(&x0_9[0x7e], 0, 0x15);
                        int64_t i = 0;
                        __builtin_memset(&x0_9[0x81], 0, 0x15);
                        x0_9[3] = 0;
                        x0_9[4] = 0;
                        x0_9[0x84] = 1;
                        do
                        {
                            void* x23_1 = (x0_9 + i);
                            uint32_t x8_21 = *(x23_1 + 0x344);
                            *(x23_1 + 0x330) = 0;
                            if (x8_21 != 0)
                            {
                                void* x0_10 = *(x23_1 + 0x338);
                                if (x0_10 != 0)
                                {
                                    operator delete[](x0_10);
                                }
                            }
                            i = (i + 0x18);
                            *(x23_1 + 0x338) = 0;
                            *(x23_1 + 0x33d) = 0;
                        } while (i != 0xf0);
                        int32_t x0_12;
                        int64_t x0_14;
                        void* x20_2;
                        if (x0_9[0x84] == 0)
                        {
                            x20_2 = &x0_9[4];
                            x0_14 = *x20_2;
                        }
                        else
                        {
                            x0_12 = oniDeviceOpen((x24_1 + (x28_1 * 0x304)), &s);
                            if (x0_12 == 0)
                            {
                                openni::Device::_setHandle(&x0_9[3]);
                                x20_2 = &x0_9[4];
                                x0_14 = *x20_2;
                            }
                        }
                        if (((x0_9[0x84] != 0 && x0_12 == 0) || (x0_9[0x84] == 0 && x0_14 != 0)))
                        {
                            void* x0_21;
                            if (oniDeviceGetProperty(x0_14, 0x10, &var_78, &var_7c) == 0)
                            {
                                __builtin_memset(&s, 0, 0x18);
                                size_t x0_17;
                                int128_t v0_1;
                                x0_17 = strlen(&var_78);
                                if (x0_17 < -0x10)
                                {
                                    int64_t x0_29 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
                                    int64_t x8_36;
                                    int32_t i_1;
                                    do
                                    {
                                        x8_36 = __ldaxr(&x0_9[1]);
                                        i_1 = __stlxr((x8_36 - 1), &x0_9[1]);
                                    } while (i_1 != 0);
                                    if (x8_36 == 0)
                                    {
                                        *(*x0_9 + 0x10)(x0_9);
                                        std::__ndk1::__shared_weak_count::__release_weak();
                                    }
                                    operator delete[](var_a8_1);
                                    void* x20_4 = *s_2;
                                    void* x0_34;
                                    if (x20_4 != 0)
                                    {
                                        char* x8_41 = *(s_2 + 8);
                                        if (x8_41 == x20_4)
                                        {
                                            goto label_16c98;
                                        }
                                        char* x21_4 = x8_41;
                                        do
                                        {
                                            x21_4 = &x21_4[-0x18];
                                            if ((*x21_4 & 1) != 0)
                                            {
                                                operator delete(*(x8_41 - 8));
                                            }
                                            x8_41 = x21_4;
                                        } while (x20_4 != x21_4);
                                        x0_34 = *s_2;
                                        goto label_16c88;
                                    }
                                    while (true)
                                    {
                                        _Unwind_Resume(x0_29);
                                    label_16c98:
                                        x0_34 = x20_4;
                                    label_16c88:
                                        *(s_2 + 8) = x20_4;
                                        operator delete(x0_34);
                                    }
                                }
                                else
                                {
                                    char* var_88_1;
                                    char* x24_2;
                                    if (x0_17 >= 0x17)
                                    {
                                        uint64_t x25 = ((x0_17 + 0x10) & 0xfffffffffffffff0);
                                        char* x0_19 = operator new(x25);
                                        s_1 = s_2;
                                        x24_2 = x0_19;
                                        size_t var_90_1 = x0_17;
                                        var_88_1 = x0_19;
                                        s = (x25 | 1);
                                    }
                                    else
                                    {
                                        x24_2 = (&s | 1);
                                        s = (x0_17 << 1);
                                    }
                                    if ((x0_17 >= 0x17 || (x0_17 < 0x17 && x0_17 != 0)))
                                    {
                                        memcpy(x24_2, &var_78, x0_17);
                                    }
                                    int128_t* x8_27 = *(s_1 + 8);
                                    int64_t x9_5 = *(s_1 + 0x10);
                                    x24_2[x0_17] = 0;
                                    if (x8_27 < x9_5)
                                    {
                                        x24_1 = var_a8_1;
                                        x8_27[1] = var_88_1;
                                        *x8_27 = s;
                                        int64_t x8_28 = *(s_1 + 8);
                                        __builtin_memset(&s, 0, 0x18);
                                        *(s_1 + 8) = (x8_28 + 0x18);
                                        x0_21 = x0_9[3];
                                        if (x0_21 == 0)
                                        {
                                            goto label_16b1c;
                                        }
                                        goto label_16b14;
                                    }
                                    x24_1 = var_a8_1;
                                    std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >::__push_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(s_1);
                                    if ((s & 1) != 0)
                                    {
                                        operator delete(var_88_1);
                                    }
                                }
                            }
                            x0_21 = x0_9[3];
                            if (x0_21 == 0)
                            {
                                goto label_16b1c;
                            }
                        label_16b14:
                            operator delete(x0_21);
                            x0_9[3] = 0;
                        label_16b1c:
                            int64_t x0_24 = *x20_2;
                            if (x0_24 != 0)
                            {
                                if (x0_9[0x84] != 0)
                                {
                                    oniDeviceClose(x0_24);
                                }
                                *x20_2 = 0;
                            }
                        }
                        int64_t x8_32;
                        int32_t i_2;
                        do
                        {
                            x8_32 = __ldaxr(&x0_9[1]);
                            i_2 = __stlxr((x8_32 - 1), &x0_9[1]);
                        } while (i_2 != 0);
                        if (x8_32 == 0)
                        {
                            *(*x0_9 + 0x10)(x0_9);
                            std::__ndk1::__shared_weak_count::__release_weak();
                        }
                    }
                }
                x28_1 = (x28_1 + 1);
            } while (x28_1 < x27_1);
            if ((x0_6 == x9_2 && x0_6 == -1))
            {
                std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
            label_16bb4:
                __stack_chk_fail();
                /* no return */
            }
        }
        x0 = operator delete[](x24_1);
    }
    if (*(x19 + 0x28) == x8)
    {
        return x0;
    }
    goto label_16bb4;
}

void sub_16bc4(void* arg1) __noreturn
{
    sub_1512c(arg1);
    /* no return */
}

int64_t rgbd::RGBDOrbbec::~RGBDOrbbec(void** arg1)
{
    int64_t* i_5 = arg1[0x3c];
    *arg1 = (_vtable_for_rgbd::RGBDOrbbec + 0x10);
    if (i_5 != 0)
    {
        int64_t* i;
        do
        {
            int64_t* x21_1 = i_5[6];
            i = *i_5;
            int64_t x9_1;
            if (x21_1 != 0)
            {
                int32_t j;
                do
                {
                    x9_1 = __ldaxr(&x21_1[1]);
                    j = __stlxr((x9_1 - 1), &x21_1[1]);
                } while (j != 0);
            }
            if (((x21_1 == 0 || (x21_1 != 0 && x9_1 != 0)) && (i_5[2] & 1) != 0))
            {
            label_16d24:
                operator delete(i_5[4]);
            }
            if ((x21_1 != 0 && x9_1 == 0))
            {
                *(*x21_1 + 0x10)(x21_1);
                std::__ndk1::__shared_weak_count::__release_weak();
                if ((i_5[2] & 1) != 0)
                {
                    goto label_16d24;
                }
            }
            operator delete(i_5);
            i_5 = i;
        } while (i != 0);
    }
    void* x0_4 = arg1[0x3a];
    arg1[0x3a] = 0;
    if (x0_4 != 0)
    {
        operator delete(x0_4);
    }
    int64_t* i_6 = arg1[0x37];
    if (i_6 != 0)
    {
        int64_t* i_1;
        do
        {
            i_1 = *i_6;
            if ((i_6[3] & 1) != 0)
            {
                operator delete(i_6[5]);
            }
            operator delete(i_6);
            i_6 = i_1;
        } while (i_1 != 0);
    }
    void* x0_7 = arg1[0x35];
    arg1[0x35] = 0;
    if (x0_7 != 0)
    {
        operator delete(x0_7);
    }
    int64_t* i_7 = arg1[0x32];
    if (i_7 != 0)
    {
        int64_t* i_2;
        do
        {
            i_2 = *i_7;
            rgbd::RGBDParam::~RGBDParam();
            if ((i_7[2] & 1) != 0)
            {
                operator delete(i_7[4]);
            }
            operator delete(i_7);
            i_7 = i_2;
        } while (i_2 != 0);
    }
    void* x0_11 = arg1[0x30];
    arg1[0x30] = 0;
    if (x0_11 != 0)
    {
        operator delete(x0_11);
    }
    std::__ndk1::condition_variable::~condition_variable();
    arg1[0x24];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(&arg1[0x23]);
    void* x20 = arg1[0x22];
    arg1[0x22] = 0;
    if (x20 != 0)
    {
        std::__ndk1::thread::~thread();
        operator delete(x20);
    }
    void* x20_1 = arg1[0x21];
    arg1[0x21] = 0;
    if (x20_1 != 0)
    {
        std::__ndk1::thread::~thread();
        operator delete(x20_1);
    }
    void* x20_2 = arg1[0x20];
    arg1[0x20] = 0;
    if (x20_2 != 0)
    {
        std::__ndk1::thread::~thread();
        operator delete(x20_2);
    }
    std::__ndk1::mutex::~mutex();
    arg1[0x18];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t> > >::destroy(&arg1[0x17]);
    int64_t* i_8 = arg1[0x13];
    if (i_8 != 0)
    {
        int64_t* i_3;
        do
        {
            i_3 = *i_8;
            rgbd::OrbbecInfo::~OrbbecInfo();
            if ((i_8[2] & 1) != 0)
            {
                operator delete(i_8[4]);
            }
            operator delete(i_8);
            i_8 = i_3;
        } while (i_3 != 0);
    }
    void* x0_25 = arg1[0x11];
    arg1[0x11] = 0;
    if (x0_25 != 0)
    {
        operator delete(x0_25);
    }
    arg1[0xf];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double> > >::destroy(&arg1[0xe]);
    int64_t* i_9 = arg1[0xb];
    if (i_9 != 0)
    {
        int64_t* i_4;
        do
        {
            i_4 = *i_9;
            if ((i_9[0xd] & 1) != 0)
            {
                operator delete(i_9[0xf]);
            }
            if ((i_9[2] & 1) != 0)
            {
                operator delete(i_9[4]);
            }
            operator delete(i_9);
            i_9 = i_4;
        } while (i_4 != 0);
    }
    void* x0_30 = arg1[9];
    arg1[9] = 0;
    if (x0_30 != 0)
    {
        operator delete(x0_30);
    }
    arg1[7];
    int64_t x0_32 = std::__ndk1::__tree<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<int32_t, std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<int32_t>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(&arg1[6]);
    if ((arg1[1] & 1) != 0)
    {
        /* tailcall */
        return operator delete(arg1[3]);
    }
    return x0_32;
}

int64_t rgbd::RGBDOrbbec::~RGBDOrbbec(void* arg1)
{
    rgbd::RGBDOrbbec::~RGBDOrbbec();
    /* tailcall */
    return operator delete(arg1);
}

int64_t rgbd::RGBDOrbbec::validateFwVersion() __pure
{
    return 1;
}

int64_t rgbd::RGBDOrbbec::updateFw() __pure
{
    return 1;
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(arg1);
    arg2[8];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(&arg2[7]);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
    if ((arg2[5] & 1) != 0)
    {
        operator delete(arg2[7]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*> > >::destroy(arg1);
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jmethodID*> > >::destroy(arg1);
    /* tailcall */
    return operator delete(arg2);
}

int64_t openni::Device::_setHandle(void*** arg1, int64_t arg2)
{
    int64_t x0;
    if (arg1[1] != 0)
    {
        x0 = 5;
    }
    else
    {
        int64_t i = 0;
        arg1[1] = arg2;
        do
        {
            void* x21_1 = (arg1 + i);
            uint32_t x8_1 = *(x21_1 + 0x32c);
            *(x21_1 + 0x318) = 0;
            if (x8_1 != 0)
            {
                void* x0_1 = *(x21_1 + 0x320);
                if (x0_1 != 0)
                {
                    operator delete[](x0_1);
                }
            }
            i = (i + 0x18);
            *(x21_1 + 0x320) = 0;
            *(x21_1 + 0x325) = 0;
        } while (i != 0xf0);
        oniDeviceGetInfo(arg1[1], &arg1[2]);
        int32_t x0_4 = oniDeviceIsPropertySupported(arg1[1], 0x64);
        int32_t x0_6;
        int32_t x0_8;
        if (x0_4 == 1)
        {
            x0_6 = oniDeviceIsPropertySupported(arg1[1], 0x65);
            if (x0_6 == 1)
            {
                x0_8 = oniDeviceIsCommandSupported(arg1[1], 1);
                if (x0_8 == 1)
                {
                    void** x0_9 = operator new(8);
                    *x0_9 = nullptr;
                    int64_t x0_10 = arg1[1];
                    if ((((x0_10 != 0 && oniDeviceIsPropertySupported(x0_10, 0x64) == 1) && oniDeviceIsPropertySupported(arg1[1], 0x65) == 1) && oniDeviceIsCommandSupported(arg1[1], 1) == 1))
                    {
                        *x0_9 = arg1;
                    }
                    x0 = 0;
                    *arg1 = x0_9;
                }
            }
        }
        if (((x0_4 != 1 || (x0_4 == 1 && x0_6 != 1)) || ((x0_4 == 1 && x0_6 == 1) && x0_8 != 1)))
        {
            x0 = 0;
        }
    }
    return x0;
}

void* openni::Device::getSensorInfo(void* arg1, int32_t arg2)
{
    int32_t* x8 = *(arg1 + 0x318);
    void* x20_1;
    int64_t x21_1;
    if (x8 == 0)
    {
        x21_1 = 0;
    label_1741c:
        void* x0_2 = oniDeviceGetSensorInfo(*(arg1 + 8));
        if (x0_2 == 0)
        {
            x20_1 = nullptr;
        }
        else
        {
            void* x8_20 = (arg1 + (x21_1 * 0x18));
            *(x8_20 + 0x318) = x0_2;
            int64_t x22_1 = *(x0_2 + 8);
            int32_t x25_1 = *(x0_2 + 4);
            x20_1 = (x8_20 + 0x318);
            if (*(x8_20 + 0x32c) != 0)
            {
                void* x0_3 = *(x8_20 + 0x320);
                if (x0_3 != 0)
                {
                    operator delete[](x0_3);
                }
            }
            *((arg1 + (x21_1 * 0x18)) + 0x328) = x25_1;
            *(x8_20 + 0x32c) = 0;
            *(x8_20 + 0x320) = x22_1;
        }
        goto label_17474;
    }
    void* x0;
    if (*x8 != arg2)
    {
        int32_t* x8_2 = *(arg1 + 0x330);
        if (x8_2 == 0)
        {
            x21_1 = 1;
            goto label_1741c;
        }
        if (*x8_2 == arg2)
        {
            x20_1 = (arg1 + 0x330);
            goto label_17474;
        }
        int32_t* x8_4 = *(arg1 + 0x348);
        if (x8_4 == 0)
        {
            x21_1 = 2;
            goto label_1741c;
        }
        if (*x8_4 == arg2)
        {
            x20_1 = (arg1 + 0x348);
            goto label_17474;
        }
        int32_t* x8_6 = *(arg1 + 0x360);
        if (x8_6 == 0)
        {
            x21_1 = 3;
            goto label_1741c;
        }
        if (*x8_6 == arg2)
        {
            x20_1 = (arg1 + 0x360);
            goto label_17474;
        }
        int32_t* x8_8 = *(arg1 + 0x378);
        if (x8_8 == 0)
        {
            x21_1 = 4;
            goto label_1741c;
        }
        if (*x8_8 == arg2)
        {
            x20_1 = (arg1 + 0x378);
            goto label_17474;
        }
        int32_t* x8_10 = *(arg1 + 0x390);
        if (x8_10 == 0)
        {
            x21_1 = 5;
            goto label_1741c;
        }
        if (*x8_10 == arg2)
        {
            x20_1 = (arg1 + 0x390);
            goto label_17474;
        }
        int32_t* x8_12 = *(arg1 + 0x3a8);
        if (x8_12 == 0)
        {
            x21_1 = 6;
            goto label_1741c;
        }
        if (*x8_12 == arg2)
        {
            x20_1 = (arg1 + 0x3a8);
            goto label_17474;
        }
        int32_t* x8_14 = *(arg1 + 0x3c0);
        if (x8_14 == 0)
        {
            x21_1 = 7;
            goto label_1741c;
        }
        if (*x8_14 == arg2)
        {
            x20_1 = (arg1 + 0x3c0);
            goto label_17474;
        }
        int32_t* x8_16 = *(arg1 + 0x3d8);
        if (x8_16 == 0)
        {
            x21_1 = 8;
            goto label_1741c;
        }
        if (*x8_16 == arg2)
        {
            x20_1 = (arg1 + 0x3d8);
            goto label_17474;
        }
        int32_t* x8_18 = *(arg1 + 0x3f0);
        if (x8_18 == 0)
        {
            x21_1 = 9;
            goto label_1741c;
        }
        if (*x8_18 == arg2)
        {
            x0 = (arg1 + 0x3f0);
        }
        else
        {
            x0 = nullptr;
        }
    }
    else
    {
        x20_1 = (arg1 + 0x318);
    label_17474:
        x0 = x20_1;
    }
    return x0;
}

uint64_t openni::VideoStream::create(int64_t* arg1, void* arg2, int32_t arg3)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x9 = *(x22 + 0x28);
    int64_t var_50;
    int32_t x0_1 = oniDeviceCreateStream(*(arg2 + 8), arg3, &var_50);
    if (x0_1 == 0)
    {
        arg1[5] = 1;
        uint32_t x8_2 = *(arg1 + 0x1c);
        int64_t x21_1 = var_50;
        arg1[1] = 0;
        if (x8_2 != 0)
        {
            void* x0_3 = arg1[2];
            if (x0_3 != 0)
            {
                operator delete[](x0_3);
            }
        }
        *(arg1 + 0x15) = 0;
        arg1[2] = 0;
        *arg1 = x21_1;
        if (x21_1 != 0)
        {
            void* x0_5 = oniStreamGetSensorInfo(x21_1);
            arg1[1] = x0_5;
            int64_t x0_7;
            if (x0_5 != 0)
            {
                int64_t x21_2 = *(x0_5 + 8);
                int32_t x24_1 = *(x0_5 + 4);
                if (*(arg1 + 0x1c) != 0)
                {
                    void* x0_6 = arg1[2];
                    if (x0_6 != 0)
                    {
                        operator delete[](x0_6);
                    }
                }
                arg1[3] = x24_1;
                *(arg1 + 0x1c) = 0;
                arg1[2] = x21_2;
                x0_7 = *arg1;
            }
            else
            {
                if (*(arg1 + 0x1c) != 0)
                {
                    void* x0_8 = arg1[2];
                    if (x0_8 != 0)
                    {
                        operator delete[](x0_8);
                    }
                }
                *(arg1 + 0x15) = 0;
                arg1[2] = 0;
                x0_7 = *arg1;
            }
            if ((((x0_5 == 0 && x0_7 != 0) || (x0_5 != 0 && x0_7 != 0)) && oniStreamIsPropertySupported(x0_7, 0x64) == 1))
            {
                int64_t x0_10 = *arg1;
                if ((x0_10 != 0 && oniStreamIsPropertySupported(x0_10, 0x65) == 1))
                {
                    void** x0_12 = operator new(8);
                    *x0_12 = arg1;
                    arg1[4] = x0_12;
                }
            }
        }
    }
    if (*(x22 + 0x28) != x9)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_1;
}

int64_t* rgbd::RGBDParam::RGBDParam(int128_t* arg1, void* arg2)
{
    int128_t v0;
    v0 = 0;
    *v0[8] = 0;
    arg1[2] = 0;
    arg1[1] = {0};
    *arg1 = {0};
    void* x21_1;
    if ((*(arg2 + 0x10) & 1) != 0)
    {
        x21_1 = *(arg2 + 0x18);
        if (x21_1 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
        else
        {
            int64_t x23_1 = *(arg2 + 0x20);
            char* x24_2;
            if (x21_1 >= 0x17)
            {
                uint64_t x25_1 = ((x21_1 + 0x10) & 0xfffffffffffffff0);
                char* x0_1 = operator new(x25_1);
                x24_2 = x0_1;
                *(arg1 + 0x18) = x21_1;
                arg1[2] = x0_1;
                arg1[1] = (x25_1 | 1);
            }
            else
            {
                arg1[1] = (x21_1 << 1);
                x24_2 = (arg1 + 0x11);
            }
            if ((x21_1 >= 0x17 || (x21_1 < 0x17 && x21_1 != 0)))
            {
                memcpy(x24_2, x23_1, x21_1);
            }
            *(x24_2 + x21_1) = 0;
        }
    }
    else
    {
        arg1[2] = *(arg2 + 0x20);
        arg1[1] = *(arg2 + 0x10);
    }
    if (((*(arg2 + 0x10) & 1) == 0 || ((*(arg2 + 0x10) & 1) != 0 && x21_1 >= -0x10)))
    {
        char x8_5 = *(arg2 + 0x28);
        __builtin_memset(&arg1[3], 0, 0x18);
        *(arg1 + 0x28) = x8_5;
        size_t x23_2;
        if ((*(arg2 + 0x30) & 1) != 0)
        {
            x23_2 = *(arg2 + 0x38);
            if (x23_2 >= -0x10)
            {
                int64_t x24_3 = *(arg2 + 0x40);
                void* x25_3;
                if (x23_2 >= 0x17)
                {
                    uint64_t x26_1 = ((x23_2 + 0x10) & 0xfffffffffffffff0);
                    void* x0_4 = operator new(x26_1);
                    x25_3 = x0_4;
                    *(arg1 + 0x38) = x23_2;
                    arg1[4] = x0_4;
                    arg1[3] = (x26_1 | 1);
                }
                else
                {
                    arg1[3] = (x23_2 << 1);
                    x25_3 = (arg1 + 0x31);
                }
                if ((x23_2 >= 0x17 || (x23_2 < 0x17 && x23_2 != 0)))
                {
                    memcpy(x25_3, x24_3, x23_2);
                }
                *(x25_3 + x23_2) = 0;
            }
        }
        else
        {
            arg1[4] = *(arg2 + 0x40);
            arg1[3] = *(arg2 + 0x30);
        }
        if (((*(arg2 + 0x30) & 1) == 0 || ((*(arg2 + 0x30) & 1) != 0 && x23_2 >= -0x10)))
        {
            *(arg1 + 0x48) = *(arg2 + 0x48);
            arg1[5] = *(arg2 + 0x50);
            int64_t x8_13 = *(arg2 + 0x58);
            *(arg1 + 0x58) = x8_13;
            if (x8_13 != 0)
            {
                int32_t i;
                do
                {
                    i = __stxr((__ldxr((x8_13 + 8)) + 1), (x8_13 + 8));
                } while (i != 0);
            }
            int64_t x9_6 = *(arg2 + 0x60);
            *(arg1 + 0x68) = *(arg2 + 0x68);
            arg1[6] = x9_6;
            int64_t* x0_6 = *(arg2 + 0x90);
            int64_t* x0_8;
            if (x0_6 == 0)
            {
                arg1[9] = 0;
                x0_8 = *(arg2 + 0xc0);
                if (x0_8 == 0)
                {
                label_177f0:
                    arg1[0xc] = 0;
                }
            }
            else if ((arg2 + 0x70) == x0_6)
            {
                arg1[9] = &arg1[7];
                *(**(arg2 + 0x90) + 0x18)();
                x0_8 = *(arg2 + 0xc0);
                if (x0_8 == 0)
                {
                    goto label_177f0;
                }
            }
            else
            {
                arg1[9] = *(*x0_6 + 0x10)();
                x0_8 = *(arg2 + 0xc0);
                if (x0_8 == 0)
                {
                    goto label_177f0;
                }
            }
            if (((x0_6 == 0 && x0_8 != 0) || x0_6 != 0))
            {
                if ((arg2 + 0xa0) == x0_8)
                {
                    arg1[0xc] = &arg1[0xa];
                    x0_8 = *(**(arg2 + 0xc0) + 0x18)();
                }
                else
                {
                    x0_8 = *(*x0_8 + 0x10)();
                    arg1[0xc] = x0_8;
                }
            }
            return x0_8;
        }
    }
    int64_t x0_13 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
    if ((arg1[1] & 1) == 0)
    {
        while (*(arg1 + 8) == 0)
        {
        label_178ec:
            _Unwind_Resume(x0_13);
            operator delete(arg1[4]);
            if ((arg1[1] & 1) != 0)
            {
                break;
            }
        }
    }
    if (((arg1[1] & 1) != 0 || ((arg1[1] & 1) == 0 && *(arg1 + 8) == 0)))
    {
        operator delete(arg1[2]);
        if (*(arg1 + 8) == 0)
        {
            goto label_178ec;
        }
    }
    std::__ndk1::__shared_weak_count::__release_weak();
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_20;
    int64_t* x1_3;
    x0_20 = _Unwind_Resume(x0_13);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(x0_20, x1_3);
}

int64_t sub_17858(int64_t arg1, void* arg2 @ x19, char* arg3 @ x20, char* arg4 @ x21, int64_t arg5 @ x23)
{
    int64_t* x8_7 = *(arg2 + 0x90);
    int64_t x9_2;
    if (arg5 == x8_7)
    {
        x9_2 = *(*x8_7 + 0x20);
    }
    if ((arg5 != x8_7 && x8_7 != 0))
    {
        x9_2 = *(*x8_7 + 0x28);
    }
    int64_t* x23;
    if ((arg5 == x8_7 || (arg5 != x8_7 && x8_7 != 0)))
    {
        x9_2(x8_7);
        x23 = *(arg2 + 0x58);
        if (x23 != 0)
        {
        label_178b0:
            int64_t x9_4;
            int32_t i;
            do
            {
                x9_4 = __ldaxr(&x23[1]);
                i = __stlxr((x9_4 - 1), &x23[1]);
            } while (i != 0);
            if (x9_4 == 0)
            {
                *(*x23 + 0x10)(x23);
                std::__ndk1::__shared_weak_count::__release_weak();
            }
        }
    }
    if ((arg5 != x8_7 && x8_7 == 0))
    {
        x23 = *(arg2 + 0x58);
        if (x23 != 0)
        {
            goto label_178b0;
        }
    }
    if ((*arg4 & 1) != 0)
    {
        goto label_178f4;
    }
    if ((*arg3 & 1) != 0)
    {
        goto label_17904;
    }
    while (*(arg2 + 8) == 0)
    {
        do
        {
            _Unwind_Resume(arg1);
        label_178f4:
            operator delete(*(arg2 + 0x40));
            if ((*arg3 & 1) == 0)
            {
                break;
            }
        label_17904:
            operator delete(*(arg2 + 0x20));
        } while (*(arg2 + 8) == 0);
        if ((*arg3 & 1) != 0)
        {
            break;
        }
    }
    std::__ndk1::__shared_weak_count::__release_weak();
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_9;
    int64_t* x1;
    x0_9 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(x0_9, x1);
}

int64_t sub_17894(int64_t arg1, void* arg2 @ x19, char* arg3 @ x20, char* arg4 @ x21)
{
    int64_t* x23 = *(arg2 + 0x58);
    if (x23 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x23[1]);
            i = __stlxr((x9_1 - 1), &x23[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x23 + 0x10)(x23);
            std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
    if ((*arg4 & 1) != 0)
    {
        goto label_178f4;
    }
    if ((*arg3 & 1) != 0)
    {
        goto label_17904;
    }
    while (*(arg2 + 8) == 0)
    {
        do
        {
            _Unwind_Resume(arg1);
        label_178f4:
            operator delete(*(arg2 + 0x40));
            if ((*arg3 & 1) == 0)
            {
                break;
            }
        label_17904:
            operator delete(*(arg2 + 0x20));
        } while (*(arg2 + 8) == 0);
        if ((*arg3 & 1) != 0)
        {
            break;
        }
    }
    std::__ndk1::__shared_weak_count::__release_weak();
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_8;
    int64_t* x1;
    x0_8 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(x0_8, x1);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, int32_t> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double> > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double> > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, double> > >::destroy(arg1);
    if ((arg2[4] & 1) != 0)
    {
        operator delete(arg2[6]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__tree<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<int32_t, std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<int32_t>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg1, int64_t* arg2)
{
    if (arg2 == 0)
    {
        return;
    }
    int64_t x30;
    int64_t var_8 = x30;
    *arg2;
    std::__ndk1::__tree<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<int32_t, std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<int32_t>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
    arg2[1];
    std::__ndk1::__tree<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<int32_t, std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<int32_t>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<int32_t, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(arg1);
    if ((arg2[5] & 1) != 0)
    {
        operator delete(arg2[7]);
    }
    /* tailcall */
    return operator delete(arg2);
}

void std::__ndk1::__basic_string_common<true>::__throw_length_error() __noreturn
{
    sub_17a70();
    /* no return */
}

void sub_17a70() __noreturn
{
    char* thrown_exception = __cxa_allocate_exception(0x10);
    sub_17ac0(thrown_exception);
    __cxa_throw(thrown_exception, _typeinfo_for_std::length_error, std::length_error::~length_error);
    /* no return */
}

int64_t sub_17ac0(char* arg1)
{
    int64_t x0 = std::logic_error::logic_error(arg1);
    *arg1 = (_vtable_for_std::length_error + 0x10);
    return x0;
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign(char* arg1, int64_t arg2, size_t arg3)
{
    uint32_t x8 = *arg1;
    int64_t x25;
    if ((x8 & 1) != 0)
    {
        x25 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    else
    {
        x25 = 0x16;
    }
    if ((((x8 & 1) != 0 && x25 >= arg3) || ((x8 & 1) == 0 && 0x16 >= arg3)))
    {
        void* x22;
        if ((x8 & 1) != 0)
        {
            x22 = *(arg1 + 0x10);
            if (arg3 == 0)
            {
                goto label_17b84;
            }
        }
        else
        {
            x22 = &arg1[1];
            if (arg3 == 0)
            {
                goto label_17b84;
            }
        }
        memmove(x22, arg2, arg3);
    label_17b84:
        *(x22 + arg3) = 0;
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = arg3;
        }
        else
        {
            *arg1 = (arg3 << 1);
        }
    label_17c34:
        return arg1;
    }
    if ((((x8 & 1) != 0 && x25 < arg3) || ((x8 & 1) == 0 && 0x16 < arg3)))
    {
        if ((-0x12 - x25) < (arg3 - x25))
        {
            int64_t* x0_6;
            int64_t* x1_2;
            int64_t x2_2;
            x0_6 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_6, x1_2, x2_2);
        }
        void* x22_1;
        if ((x8 & 1) != 0)
        {
            x22_1 = *(arg1 + 0x10);
        }
        else
        {
            x22_1 = &arg1[1];
        }
        uint64_t x23_1;
        if (x25 > 0x7fffffffffffffe6)
        {
            x23_1 = -0x11;
        }
        else
        {
            size_t x8_3 = (x25 << 1);
            size_t x8_4;
            if (x8_3 > arg3)
            {
                x8_4 = x8_3;
            }
            else
            {
                x8_4 = arg3;
            }
            if (x8_4 >= 0x17)
            {
                x23_1 = ((x8_4 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x23_1 = 0x17;
            }
        }
        int64_t x0_2 = operator new(x23_1);
        memcpy(x0_2, arg2, arg3);
        if (x25 != 0x16)
        {
            operator delete(x22_1);
        }
        *(arg1 + 8) = arg3;
        *(arg1 + 0x10) = x0_2;
        *arg1 = (x23_1 | 1);
        *(x0_2 + arg3) = 0;
        goto label_17c34;
    }
}

int64_t* std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(int64_t* arg1, int64_t arg2, int64_t arg3)
{
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    char var_70 = 0;
    int64_t* var_68 = arg1;
    int64_t* x8_2 = (*arg1 - 0x18);
    void* x9_1 = (arg1 + *x8_2);
    if (*(x9_1 + 0x20) == 0)
    {
        if (*(x9_1 + 0x88) != 0)
        {
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
            x8_2 = (*arg1 - 0x18);
        }
        char var_70_1 = 1;
        void* x22_1 = (arg1 + *x8_2);
        int32_t x5_1 = *(x22_1 + 0x90);
        int64_t* x23_1 = *(x22_1 + 0x28);
        int32_t x26_1 = *(x22_1 + 8);
        if (x5_1 == 0xffffffff)
        {
            std::__ndk1::ios_base::getloc();
            void var_60;
            char x0_4 = *(*std::__ndk1::locale::use_facet(&var_60) + 0x38)();
            std::__ndk1::locale::~locale();
            x5_1 = x0_4;
            *(x22_1 + 0x90) = x5_1;
        }
        int64_t x3_1 = (arg2 + arg3);
        int64_t x2;
        if ((x26_1 & 0xb0) == 0x20)
        {
            x2 = x3_1;
        }
        else
        {
            x2 = arg2;
        }
        if (sub_17de4(x23_1, arg2, x2, x3_1, x22_1, x5_1) == 0)
        {
            void* x0_7 = (arg1 + *(*arg1 - 0x18));
            *(x0_7 + 0x20);
            std::__ndk1::ios_base::clear(x0_7);
        }
    }
    std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t* sub_17de4(int64_t* arg1, int64_t arg2, int64_t arg3, int64_t arg4, void* arg5, int32_t arg6)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    int64_t* x19 = arg1;
    if (arg1 != 0)
    {
        int64_t x8_1 = *(arg5 + 0x18);
        int64_t x9_1 = (arg4 - arg2);
        int64_t x25_1 = (arg3 - arg2);
        size_t x23_1;
        if (x8_1 > x9_1)
        {
            x23_1 = (x8_1 - x9_1);
        }
        else
        {
            x23_1 = 0;
        }
        int64_t x0_1;
        if (x25_1 >= 1)
        {
            x0_1 = *(*x19 + 0x60)(x19);
            if (x0_1 != x25_1)
            {
            label_17f40:
                x19 = nullptr;
            }
        }
        if ((x25_1 < 1 || (x25_1 >= 1 && x0_1 == x25_1)))
        {
            if (x23_1 >= 1)
            {
                int64_t s;
                __builtin_memset(&s, 0, 0x18);
                void* var_70_1;
                char* x25_2;
                void* x26_1;
                if (x23_1 >= 0x17)
                {
                    uint64_t x26_2 = ((x23_1 + 0x10) & 0xfffffffffffffff0);
                    void* x0_3 = operator new(x26_2);
                    x25_2 = x0_3;
                    size_t var_78_1 = x23_1;
                    var_70_1 = x0_3;
                    s = (x26_2 | 1);
                    x26_1 = (&s | 1);
                }
                else
                {
                    x26_1 = (&s | 1);
                    x25_2 = x26_1;
                    s = (x23_1 << 1);
                }
                memset(x25_2, arg6, x23_1);
                x25_2[x23_1] = 0;
                void* x1_1;
                if ((s & 1) == 0)
                {
                    x1_1 = x26_1;
                }
                else
                {
                    x1_1 = var_70_1;
                }
                int64_t x0_6 = *(*x19 + 0x60)(x19, x1_1, x23_1);
                if ((s & 1) != 0)
                {
                    operator delete(var_70_1);
                }
                if (x0_6 != x23_1)
                {
                    goto label_17f40;
                }
            }
            int64_t x22_2 = (arg4 - arg3);
            if (x22_2 >= 1)
            {
                if (*(*x19 + 0x60)(x19, arg3, x22_2) != x22_2)
                {
                    goto label_17f40;
                }
                goto label_17f38;
            }
        label_17f38:
            *(arg5 + 0x18) = 0;
        }
    }
    if (*(x27 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

void std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry(void* arg1)
{
    int64_t* x8 = *(arg1 + 8);
    void* x8_1 = (x8 + *(*x8 - 0x18));
    if ((*(x8_1 + 0x28) != 0 && (*(x8_1 + 0x20) == 0 && (*(x8_1 + 9) & 0x20) != 0)))
    {
        void* x19_1 = arg1;
        if ((std::uncaught_exception() & 1) == 0)
        {
            int64_t* x8_3 = *(x19_1 + 8);
            if (*(**((x8_3 + *(*x8_3 - 0x18)) + 0x28) + 0x30)() == 0xffffffff)
            {
                int64_t* x8_7 = *(x19_1 + 8);
                void* x0_1 = (x8_7 + *(*x8_7 - 0x18));
                *(x0_1 + 0x20);
                std::__ndk1::ios_base::clear(x0_1);
            }
        }
    }
}

void sub_18034(void* arg1) __noreturn
{
    sub_1512c(arg1);
    /* no return */
}

int64_t* std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t* x8_2 = (*arg1 - 0x18);
    if (*((arg1 + *x8_2) + 0x28) != 0)
    {
        char var_48_1 = 0;
        int64_t* var_40_1 = arg1;
        void* x9_4 = (arg1 + *x8_2);
        if (*(x9_4 + 0x20) == 0)
        {
            if (*(x9_4 + 0x88) != 0)
            {
                std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::flush();
                x8_2 = (*arg1 - 0x18);
            }
            char var_48_2 = 1;
            if (*(**((arg1 + *x8_2) + 0x28) + 0x30)() == 0xffffffff)
            {
                void* x0_3 = (arg1 + *(*arg1 - 0x18));
                *(x0_3 + 0x20);
                std::__ndk1::ios_base::clear(x0_3);
            }
        }
        std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::sentry::~sentry();
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return arg1;
}

int64_t std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> > + 0x10);
    openni::Device::~Device();
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> > + 0x10);
    openni::Device::~Device();
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> >::__on_zero_shared(int64_t arg1)
{
    /* tailcall */
    return openni::Device::~Device();
}

int64_t std::__ndk1::__shared_ptr_emplace<openni::Device, std::__ndk1::allocator<openni::Device> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

void openni::SensorInfo::~SensorInfo(void* arg1)
{
    void* x19 = arg1;
    if (*(arg1 + 0x14) != 0)
    {
        arg1 = *(x19 + 8);
        if (arg1 != 0)
        {
            operator delete[](arg1);
        }
    }
    *(x19 + 0x14) = 0;
    *(x19 + 8) = 0;
    *(x19 + 0x10) = 0;
}

void* openni::Device::~Device(int64_t* arg1)
{
    void* x0 = arg1[1];
    if (x0 != 0)
    {
        void* x8_1 = *arg1;
        if (x8_1 != 0)
        {
            operator delete(x8_1);
            x0 = arg1[1];
            *arg1 = 0;
        }
        if ((x8_1 == 0 || (x8_1 != 0 && x0 != 0)))
        {
            if (arg1[0x81] != 0)
            {
                x0 = oniDeviceClose(x0);
            }
            arg1[1] = 0;
        }
    }
    if (*(arg1 + 0x404) != 0)
    {
        x0 = arg1[0x7f];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_4 = *(arg1 + 0x3ec);
    *(arg1 + 0x404) = 0;
    arg1[0x7f] = 0;
    arg1[0x80] = 0;
    if (x8_4 != 0)
    {
        x0 = arg1[0x7c];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_5 = *(arg1 + 0x3d4);
    *(arg1 + 0x3ec) = 0;
    arg1[0x7c] = 0;
    arg1[0x7d] = 0;
    if (x8_5 != 0)
    {
        x0 = arg1[0x79];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_6 = *(arg1 + 0x3bc);
    *(arg1 + 0x3d4) = 0;
    arg1[0x79] = 0;
    arg1[0x7a] = 0;
    if (x8_6 != 0)
    {
        x0 = arg1[0x76];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_7 = *(arg1 + 0x3a4);
    *(arg1 + 0x3bc) = 0;
    arg1[0x76] = 0;
    arg1[0x77] = 0;
    if (x8_7 != 0)
    {
        x0 = arg1[0x73];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_8 = *(arg1 + 0x38c);
    *(arg1 + 0x3a4) = 0;
    arg1[0x73] = 0;
    arg1[0x74] = 0;
    if (x8_8 != 0)
    {
        x0 = arg1[0x70];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_9 = *(arg1 + 0x374);
    *(arg1 + 0x38c) = 0;
    arg1[0x70] = 0;
    arg1[0x71] = 0;
    if (x8_9 != 0)
    {
        x0 = arg1[0x6d];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_10 = *(arg1 + 0x35c);
    *(arg1 + 0x374) = 0;
    arg1[0x6d] = 0;
    arg1[0x6e] = 0;
    if (x8_10 != 0)
    {
        x0 = arg1[0x6a];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_11 = *(arg1 + 0x344);
    *(arg1 + 0x35c) = 0;
    arg1[0x6a] = 0;
    arg1[0x6b] = 0;
    if (x8_11 != 0)
    {
        x0 = arg1[0x67];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    uint32_t x8_12 = *(arg1 + 0x32c);
    *(arg1 + 0x344) = 0;
    arg1[0x67] = 0;
    arg1[0x68] = 0;
    if (x8_12 != 0)
    {
        x0 = arg1[0x64];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    *(arg1 + 0x32c) = 0;
    arg1[0x64] = 0;
    arg1[0x65] = 0;
    return x0;
}

void sub_183a0(void* arg1, void* arg2 @ x19) __noreturn
{
    if (*(arg2 + 0x404) != 0)
    {
        void* x0 = *(arg2 + 0x3f8);
        if (x0 != 0)
        {
            operator delete[](x0);
        }
    }
    uint32_t x8 = *(arg2 + 0x3ec);
    *(arg2 + 0x404) = 0;
    *(arg2 + 0x3f8) = 0;
    *(arg2 + 0x400) = 0;
    if (x8 != 0)
    {
        void* x0_1 = *(arg2 + 0x3e0);
        if (x0_1 != 0)
        {
            operator delete[](x0_1);
        }
    }
    uint32_t x8_1 = *(arg2 + 0x3d4);
    *(arg2 + 0x3ec) = 0;
    *(arg2 + 0x3e0) = 0;
    *(arg2 + 0x3e8) = 0;
    if (x8_1 != 0)
    {
        void* x0_2 = *(arg2 + 0x3c8);
        if (x0_2 != 0)
        {
            operator delete[](x0_2);
        }
    }
    uint32_t x8_2 = *(arg2 + 0x3bc);
    *(arg2 + 0x3d4) = 0;
    *(arg2 + 0x3c8) = 0;
    *(arg2 + 0x3d0) = 0;
    if (x8_2 != 0)
    {
        void* x0_3 = *(arg2 + 0x3b0);
        if (x0_3 != 0)
        {
            operator delete[](x0_3);
        }
    }
    uint32_t x8_3 = *(arg2 + 0x3a4);
    *(arg2 + 0x3bc) = 0;
    *(arg2 + 0x3b0) = 0;
    *(arg2 + 0x3b8) = 0;
    if (x8_3 != 0)
    {
        void* x0_4 = *(arg2 + 0x398);
        if (x0_4 != 0)
        {
            operator delete[](x0_4);
        }
    }
    uint32_t x8_4 = *(arg2 + 0x38c);
    *(arg2 + 0x3a4) = 0;
    *(arg2 + 0x398) = 0;
    *(arg2 + 0x3a0) = 0;
    if (x8_4 != 0)
    {
        void* x0_5 = *(arg2 + 0x380);
        if (x0_5 != 0)
        {
            operator delete[](x0_5);
        }
    }
    uint32_t x8_5 = *(arg2 + 0x374);
    *(arg2 + 0x38c) = 0;
    *(arg2 + 0x380) = 0;
    *(arg2 + 0x388) = 0;
    if (x8_5 != 0)
    {
        void* x0_6 = *(arg2 + 0x368);
        if (x0_6 != 0)
        {
            operator delete[](x0_6);
        }
    }
    uint32_t x8_6 = *(arg2 + 0x35c);
    *(arg2 + 0x374) = 0;
    *(arg2 + 0x368) = 0;
    *(arg2 + 0x370) = 0;
    if (x8_6 != 0)
    {
        void* x0_7 = *(arg2 + 0x350);
        if (x0_7 != 0)
        {
            operator delete[](x0_7);
        }
    }
    uint32_t x8_7 = *(arg2 + 0x344);
    *(arg2 + 0x35c) = 0;
    *(arg2 + 0x350) = 0;
    *(arg2 + 0x358) = 0;
    if (x8_7 != 0)
    {
        void* x0_8 = *(arg2 + 0x338);
        if (x0_8 != 0)
        {
            operator delete[](x0_8);
        }
    }
    uint32_t x8_8 = *(arg2 + 0x32c);
    *(arg2 + 0x344) = 0;
    *(arg2 + 0x338) = 0;
    *(arg2 + 0x340) = 0;
    if (x8_8 != 0)
    {
        void* x0_9 = *(arg2 + 0x320);
        if (x0_9 != 0)
        {
            operator delete[](x0_9);
        }
    }
    *(arg2 + 0x32c) = 0;
    *(arg2 + 0x320) = 0;
    *(arg2 + 0x328) = 0;
    sub_1512c(arg1);
    /* no return */
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(int64_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x24 = arg1[1];
    int64_t* x8_4;
    void** i;
    if (x24 != 0)
    {
        int64_t x26_1 = ((x24 - 1) & x24);
        int64_t x27_1;
        if (x26_1 == 0)
        {
            x27_1 = ((x24 - 1) & x0_1);
        }
        else
        {
            x27_1 = x0_1;
            if (x0_1 >= x24)
            {
                x27_1 = (x0_1 % x24);
            }
        }
        x8_4 = *(*arg1 + (x27_1 << 3));
        if (x8_4 != 0)
        {
            i = *x8_4;
            if (i != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x21_1;
                if (temp1_1 == 0)
                {
                    x21_1 = (x8_5 >> 1);
                }
                else
                {
                    x21_1 = *(arg2 + 8);
                }
                void* x22_1;
                if (temp1_1 == 0)
                {
                    x22_1 = &arg2[1];
                }
                else
                {
                    x22_1 = *(arg2 + 0x10);
                }
                do
                {
                    int64_t x8_10 = i[1];
                    if (x8_10 == x0_1)
                    {
                        uint64_t x10_2 = i[2];
                        uint64_t x9_2 = (x10_2 >> 1);
                        uint64_t x11_3;
                        if ((x10_2 & 1) == 0)
                        {
                            x11_3 = x9_2;
                        }
                        else
                        {
                            x11_3 = i[3];
                        }
                        if (x11_3 == x21_1)
                        {
                            if ((x10_2 & 1) != 0)
                            {
                                if (x21_1 == 0)
                                {
                                    break;
                                }
                                if (memcmp() == 0)
                                {
                                    break;
                                }
                            }
                            else
                            {
                                if (x21_1 == 0)
                                {
                                    break;
                                }
                                void* x8_8 = (i + 0x11);
                                int64_t x9_3 = -(x9_2);
                                void* x10_3 = x22_1;
                                while (*x8_8 == *x10_3)
                                {
                                    x8_8 = (x8_8 + 1);
                                    int64_t temp2_1 = x9_3;
                                    x9_3 = (x9_3 + 1);
                                    x10_3 = (x10_3 + 1);
                                    if (temp2_1 == -1)
                                    {
                                        break;
                                    }
                                }
                                if (*x8_8 == *x10_3)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (x26_1 == 0)
                        {
                            x8_10 = (x8_10 & (x24 - 1));
                        }
                        if (((x26_1 == 0 || (x26_1 != 0 && x8_10 < x24)) && x8_10 != x27_1))
                        {
                            goto label_18664;
                        }
                        if (((x26_1 != 0 && x8_10 >= x24) && (x8_10 % x24) != x27_1))
                        {
                            goto label_18664;
                        }
                    }
                    i = *i;
                } while (i != 0);
            }
        }
    }
    if ((x24 == 0 || (x24 != 0 && x8_4 == 0)))
    {
    label_18664:
        i = nullptr;
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return i;
}

int64_t std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(int64_t arg1, int64_t* arg2, uint64_t arg3)
{
    if (arg3 > 0x20)
    {
        if (arg3 <= 0x40)
        {
            void* x10_1 = (arg2 + arg3);
            int64_t x14_1 = *(x10_1 - 0x10);
            int64_t x8_1 = arg2[2];
            int64_t x9_1 = arg2[3];
            int64_t x12_2 = (*arg2 - ((x14_1 + arg3) * 0x3c5a37a36834ced9));
            int64_t x13_2 = (x12_2 + arg2[1]);
            int64_t x15_2 = (*(x10_1 - 0x20) + x8_1);
            int64_t x8_2 = (x13_2 + x8_1);
            int64_t x16_2 = (*(x10_1 - 8) + x9_1);
            int64_t x10_3 = (*(x10_1 - 0x18) + x15_2);
            int64_t x14_2 = (x10_3 + x14_1);
            int64_t x8_4 = ((((RORQ(x13_2, 7)) + (RORQ(x12_2, 0x25))) + (RORQ((x12_2 + x9_1), 0x34))) + (RORQ(x8_2, 0x1f)));
            int64_t x9_7 = (((((((x8_2 + x9_1) + (RORQ(x15_2, 0x25))) + (RORQ(x10_3, 7))) + (RORQ((x16_2 + x15_2), 0x34))) + (RORQ(x14_2, 0x1f))) * -0x651e95c4d06fbfb1) - (((x14_2 + x16_2) + x8_4) * 0x3c5a37a36834ced9));
            int64_t x8_5 = (x8_4 - ((x9_7 ^ (x9_7 >> 0x2f)) * 0x3c5a37a36834ced9));
            return ((x8_5 ^ (x8_5 >> 0x2f)) * -0x651e95c4d06fbfb1);
        }
        void* x10_11 = (arg2 + arg3);
        int64_t x12_7 = *(x10_11 - 0x30);
        int64_t x13_7 = *(x10_11 - 0x28);
        int64_t x17_3 = *(x10_11 - 0x38);
        int64_t x16_4 = *(x10_11 - 0x18);
        int64_t x3_1 = *(x10_11 - 0x10);
        int64_t x14_5 = (*(x10_11 - 0x40) + arg3);
        int64_t x0_6 = ((x16_4 ^ (x12_7 + arg3)) * -0x622015f714c7d297);
        int64_t x2_2 = ((x14_5 + x17_3) + x12_7);
        int64_t x10_12 = *(x10_11 - 8);
        int64_t x12_9 = (x17_3 + x3_1);
        int64_t x15_7 = ((x12_9 + *(x10_11 - 0x20)) - 0x4b6d499041670d8d);
        int64_t x16_6 = ((x15_7 + x16_4) + x3_1);
        int64_t x17_5 = *arg2;
        void* x1_2 = &arg2[4];
        int64_t x10_13 = (x16_6 + x10_12);
        int64_t x11_7 = (((RORQ(x16_6, 0x2c)) + x15_7) + (RORQ(((x15_7 + x13_7) + x10_12), 0x15)));
        int64_t x14_6 = (x2_2 + x13_7);
        int64_t x16_8 = (x17_5 - (x13_7 * 0x4b6d499041670d8d));
        int64_t x13_8 = (((x0_6 ^ x16_4) ^ (x0_6 >> 0x2f)) * -0x622015f714c7d297);
        int64_t x0_8 = ((x13_8 ^ (x13_8 >> 0x2f)) * -0x622015f714c7d297);
        int64_t x15_11 = (((RORQ(x2_2, 0x2c)) + x14_5) + (RORQ(((x13_7 + x14_5) + x0_8), 0x15)));
        int64_t x13_12 = (0x40 - ((arg3 - 1) & 0xffffffffffffffc0));
        while (true)
        {
            int64_t x4_2 = *(x1_2 + 8);
            int64_t x15_12 = (x17_5 - (x15_11 * 0x4b6d499041670d8d));
            int64_t x17_6 = ((x16_8 + x14_6) + x12_9);
            int64_t x0_10 = *(x1_2 + 0x10);
            int64_t x6_2 = *(x1_2 + 0x18);
            x16_8 = ((RORQ((x0_8 + x10_13), 0x21)) * -0x4b6d499041670d8d);
            int64_t x3_5 = ((x16_8 + x11_7) + *x1_2);
            int64_t x5_2 = *(x1_2 - 8);
            x12_9 = ((x4_2 + x14_6) - ((RORQ(((x12_9 + x15_11) + x0_10), 0x2a)) * 0x4b6d499041670d8d));
            int64_t x14_8 = *(x1_2 - 0x18);
            int64_t x4_3 = *(x1_2 - 0x10);
            int64_t x7_2 = ((x15_12 + x10_13) + x5_2);
            int64_t x2_5 = ((x3_5 + x4_2) + x0_10);
            int64_t x10_16 = ((x15_12 + x14_8) + x4_3);
            x14_6 = (x10_16 + x5_2);
            x0_8 = (((RORQ((x17_6 + x14_8), 0x25)) * -0x4b6d499041670d8d) ^ x11_7);
            x10_13 = (x2_5 + x6_2);
            x15_11 = (((RORQ(x10_16, 0x2c)) + x15_12) + (RORQ((x7_2 + x0_8), 0x15)));
            x11_7 = (((RORQ(x2_5, 0x2c)) + x3_5) + (RORQ((((x12_9 + x4_3) + x3_5) + x6_2), 0x15)));
            if (x13_12 == 0)
            {
                break;
            }
            x17_5 = *(x1_2 + 0x20);
            x13_12 = (x13_12 + 0x40);
            x1_2 = (x1_2 + 0x40);
        }
        int64_t x13_14 = ((x10_13 ^ x14_6) * -0x622015f714c7d297);
        int64_t x12_15 = ((x11_7 ^ x15_11) * -0x622015f714c7d297);
        int64_t x10_20 = (((x13_14 ^ x10_13) ^ (x13_14 >> 0x2f)) * -0x622015f714c7d297);
        int64_t x11_12 = (((x12_15 ^ x11_7) ^ (x12_15 >> 0x2f)) * -0x622015f714c7d297);
        int64_t x10_22 = (x16_8 - ((x11_12 ^ (x11_12 >> 0x2f)) * 0x622015f714c7d297));
        int64_t x9_18 = ((x10_22 ^ ((x0_8 - ((x12_9 ^ (x12_9 >> 0x2f)) * 0x4b6d499041670d8d)) - ((x10_20 ^ (x10_20 >> 0x2f)) * 0x622015f714c7d297))) * -0x622015f714c7d297);
        int64_t x9_20 = (((x9_18 ^ x10_22) ^ (x9_18 >> 0x2f)) * -0x622015f714c7d297);
        return ((x9_20 ^ (x9_20 >> 0x2f)) * -0x622015f714c7d297);
    }
    if (arg3 > 0x10)
    {
        int64_t x10_7 = arg2[1];
        void* x11_1 = (arg2 + arg3);
        int64_t x8_7 = (*arg2 * -0x4b6d499041670d8d);
        int64_t x11_2 = *(x11_1 - 8);
        int64_t x12_6 = (x11_2 * -0x651e95c4d06fbfb1);
        int64_t x8_10 = (((x8_7 + arg3) - x12_6) + (RORQ((x10_7 ^ 0xc949d7c7509e6557), 0x14)));
        int64_t x9_14 = (((((RORQ((x8_7 - x10_7), 0x2b)) - (*(x11_1 - 0x10) * 0x3c5a37a36834ced9)) + (((x11_2 * -0x41befec400000000) & 0xfffffffc00000000) | ((x12_6 & 0xffffffffc0000000) >> 0x1e))) ^ x8_10) * -0x622015f714c7d297);
        int64_t x8_13 = (((x9_14 ^ x8_10) ^ (x9_14 >> 0x2f)) * -0x622015f714c7d297);
        return ((x8_13 ^ (x8_13 >> 0x2f)) * -0x622015f714c7d297);
    }
    /* tailcall */
    return std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::__hash_len_0_to_16(arg2, arg3);
}

void std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::__hash_len_0_to_16(int64_t* arg1, int64_t arg2)
{
    if (arg2 >= 9)
    {
        *((arg1 + arg2) - 8);
        *arg1;
        return;
    }
    if (arg2 >= 4)
    {
        (((*arg1 << 3) + arg2) ^ *((arg1 + arg2) - 4));
        return;
    }
    if (arg2 != 0)
    {
        (((arg2 + (*((arg1 + arg2) - 1) << 2)) * -0x36b62838af619aa9) ^ (((-0xff01 & *arg1) | (*(arg1 + (arg2 >> 1)) << 8)) * -0x651e95c4d06fbfb1));
    }
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(int64_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x24 = arg1[1];
    int64_t* x8_4;
    void** i;
    if (x24 != 0)
    {
        int64_t x26_1 = ((x24 - 1) & x24);
        int64_t x27_1;
        if (x26_1 == 0)
        {
            x27_1 = ((x24 - 1) & x0_1);
        }
        else
        {
            x27_1 = x0_1;
            if (x0_1 >= x24)
            {
                x27_1 = (x0_1 % x24);
            }
        }
        x8_4 = *(*arg1 + (x27_1 << 3));
        if (x8_4 != 0)
        {
            i = *x8_4;
            if (i != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x21_1;
                if (temp1_1 == 0)
                {
                    x21_1 = (x8_5 >> 1);
                }
                else
                {
                    x21_1 = *(arg2 + 8);
                }
                void* x22_1;
                if (temp1_1 == 0)
                {
                    x22_1 = &arg2[1];
                }
                else
                {
                    x22_1 = *(arg2 + 0x10);
                }
                do
                {
                    int64_t x8_10 = i[1];
                    if (x8_10 == x0_1)
                    {
                        uint64_t x10_2 = i[2];
                        uint64_t x9_2 = (x10_2 >> 1);
                        uint64_t x11_3;
                        if ((x10_2 & 1) == 0)
                        {
                            x11_3 = x9_2;
                        }
                        else
                        {
                            x11_3 = i[3];
                        }
                        if (x11_3 == x21_1)
                        {
                            if ((x10_2 & 1) != 0)
                            {
                                if (x21_1 == 0)
                                {
                                    break;
                                }
                                if (memcmp() == 0)
                                {
                                    break;
                                }
                            }
                            else
                            {
                                if (x21_1 == 0)
                                {
                                    break;
                                }
                                void* x8_8 = (i + 0x11);
                                int64_t x9_3 = -(x9_2);
                                void* x10_3 = x22_1;
                                while (*x8_8 == *x10_3)
                                {
                                    x8_8 = (x8_8 + 1);
                                    int64_t temp2_1 = x9_3;
                                    x9_3 = (x9_3 + 1);
                                    x10_3 = (x10_3 + 1);
                                    if (temp2_1 == -1)
                                    {
                                        break;
                                    }
                                }
                                if (*x8_8 == *x10_3)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (x26_1 == 0)
                        {
                            x8_10 = (x8_10 & (x24 - 1));
                        }
                        if (((x26_1 == 0 || (x26_1 != 0 && x8_10 < x24)) && x8_10 != x27_1))
                        {
                            goto label_18cac;
                        }
                        if (((x26_1 != 0 && x8_10 >= x24) && (x8_10 % x24) != x27_1))
                        {
                            goto label_18cac;
                        }
                    }
                    i = *i;
                } while (i != 0);
            }
        }
    }
    if ((x24 == 0 || (x24 != 0 && x8_4 == 0)))
    {
    label_18cac:
        i = nullptr;
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return i;
}

char* std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::append(char* arg1, int64_t arg2, size_t arg3)
{
    uint64_t x8 = *arg1;
    uint64_t x22;
    int64_t x26;
    if ((x8 & 1) != 0)
    {
        x22 = *(arg1 + 8);
        x26 = ((*arg1 & 0xfffffffffffffffe) - 1);
    }
    else
    {
        x22 = (x8 >> 1);
        x26 = 0x16;
    }
    void* x8_4;
    if (((x26 - x22) >= arg3 && arg3 != 0))
    {
        void* x23_2;
        if ((x8 & 1) != 0)
        {
            x23_2 = *(arg1 + 0x10);
        }
        else
        {
            x23_2 = &arg1[1];
        }
        memcpy((x23_2 + x22), arg2, arg3);
        int64_t x8_3 = (x22 + arg3);
        if ((*arg1 & 1) != 0)
        {
            *(arg1 + 8) = x8_3;
            x8_4 = (x23_2 + x8_3);
        }
        else
        {
            *arg1 = (x8_3 << 1);
            x8_4 = (x23_2 + x8_3);
        }
    }
    if ((x26 - x22) < arg3)
    {
        int64_t x27_1 = (x22 + arg3);
        if ((-0x12 - x26) < (x27_1 - x26))
        {
            int64_t* x0_8;
            char* x1_3;
            int128_t* x2_3;
            x0_8 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            /* tailcall */
            return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > >(x0_8, x1_3, x2_3, x27_1);
        }
        void* x23_1;
        if ((x8 & 1) != 0)
        {
            x23_1 = *(arg1 + 0x10);
        }
        else
        {
            x23_1 = &arg1[1];
        }
        uint64_t x24_1;
        if (x26 > 0x7fffffffffffffe6)
        {
            x24_1 = -0x11;
        }
        else
        {
            int64_t x8_1 = (x26 << 1);
            int64_t x8_2;
            if (x27_1 < x8_1)
            {
                x8_2 = x8_1;
            }
            else
            {
                x8_2 = x27_1;
            }
            if (x8_2 >= 0x17)
            {
                x24_1 = ((x8_2 + 0x10) & 0xfffffffffffffff0);
            }
            else
            {
                x24_1 = 0x17;
            }
        }
        void* x0_2 = operator new(x24_1);
        if (x22 != 0)
        {
            memcpy(x0_2, x23_1, x22);
        }
        memcpy((x0_2 + x22), arg2, arg3);
        if (x26 != 0x16)
        {
            operator delete(x23_1);
        }
        *arg1 = (x24_1 | 1);
        x8_4 = (x0_2 + x27_1);
        *(arg1 + 8) = x27_1;
        *(arg1 + 0x10) = x0_2;
    }
    if (((x26 - x22) < arg3 || ((x26 - x22) >= arg3 && arg3 != 0)))
    {
        *x8_4 = 0;
    }
    return arg1;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > >(int64_t* arg1, char* arg2, int128_t* arg3, int64_t arg4 @ x27)
{
    int64_t var_58 = arg4;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x26 = arg1[1];
    int64_t* x8_4;
    void** x19_1;
    if (x26 != 0)
    {
        int64_t x25_1 = ((x26 - 1) & x26);
        if (x25_1 == 0)
        {
            arg4 = ((x26 - 1) & x0_1);
        }
        else
        {
            arg4 = x0_1;
            if (x0_1 >= x26)
            {
                arg4 = (x0_1 % x26);
            }
        }
        x8_4 = *(*arg1 + (arg4 << 3));
        if (x8_4 != 0)
        {
            x19_1 = *x8_4;
            if (x19_1 != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x23_1;
                if (temp1_1 == 0)
                {
                    x23_1 = (x8_5 >> 1);
                }
                else
                {
                    x23_1 = *(arg2 + 8);
                }
                void* x24_1;
                if (temp1_1 == 0)
                {
                    x24_1 = &arg2[1];
                }
                else
                {
                    x24_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x19_1[1];
                    if (x8_7 != x0_1)
                    {
                        if (x25_1 == 0)
                        {
                            x8_7 = (x8_7 & (x26 - 1));
                        }
                        if (((x25_1 == 0 || (x25_1 != 0 && x8_7 < x26)) && x8_7 != arg4))
                        {
                            goto label_18fe8;
                        }
                        if (((x25_1 != 0 && x8_7 >= x26) && (x8_7 % x26) != arg4))
                        {
                            goto label_18fe8;
                        }
                    }
                    uint64_t x10_2 = x19_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x19_1[3];
                    }
                    if (x11_3 == x23_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x19_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x19_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x19_1 = *x19_1;
                    if (x19_1 == 0)
                    {
                        goto label_18fe8;
                    }
                }
            }
        }
    }
    if (((x26 == 0 || (x26 != 0 && x8_4 == 0)) || ((x26 != 0 && x8_4 != 0) && x19_1 == 0)))
    {
    label_18fe8:
        void** x0_3;
        int128_t v0_1;
        x0_3 = operator new(0x38);
        v0_1 = *arg3;
        x19_1 = x0_3;
        x0_3[4] = arg3[1];
        *(x0_3 + 0x10) = v0_1;
        v0_1 = *(arg3 + 0x18);
        __builtin_memset(arg3, 0, 0x18);
        *(x0_3 + 0x28) = v0_1;
        *(arg3 + 0x18) = 0;
        arg3[2] = 0;
        *x0_3 = nullptr;
        x0_3[1] = x0_1;
        v0_1 = arg1[4];
        int32_t temp0_1 = vcvth_f16_u16((arg1[3] + 1));
        float v2_1;
        if (x26 != 0)
        {
            v2_1 = (v0_1 * vcvth_f16_u16(x26));
        }
        if ((x26 == 0 || (x26 != 0 && !(v2_1 >= temp0_1))))
        {
            if (x26 < 3)
            {
                /* nop */
            }
            else if (((x26 - 1) & x26) != 0)
            {
                /* nop */
            }
            v0_1 = (temp0_1 / v0_1);
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::rehash(arg1);
            x26 = arg1[1];
            if (((x26 - 1) & x26) == 0)
            {
                arg4 = ((x26 - 1) & x0_1);
            }
            else if (x0_1 >= x26)
            {
                arg4 = (x0_1 % x26);
            }
            else
            {
                arg4 = x0_1;
            }
        }
        int64_t x9_8 = *arg1;
        void*** x8_16 = *(x9_8 + (arg4 << 3));
        void* x8_19;
        if (x8_16 == 0)
        {
            *x19_1 = arg1[2];
            arg1[2] = x19_1;
            *(x9_8 + (arg4 << 3)) = &arg1[2];
            x8_19 = *x19_1;
            if (x8_19 != 0)
            {
                int64_t x8_20 = *(x8_19 + 8);
                if (((x26 - 1) & x26) == 0)
                {
                    x8_20 = (x8_20 & (x26 - 1));
                }
                else if (x8_20 >= x26)
                {
                    x8_20 = (x8_20 % x26);
                }
                x8_16 = (*arg1 + (x8_20 << 3));
            }
        }
        else
        {
            *x19_1 = *x8_16;
        }
        if ((x8_16 != 0 || (x8_16 == 0 && x8_19 != 0)))
        {
            *x8_16 = x19_1;
        }
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19_1;
}

void std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::rehash(uint64_t arg1, uint64_t arg2)
{
    uint64_t x19 = arg1;
    uint64_t x20;
    if (arg2 == 1)
    {
        x20 = 2;
    }
    else
    {
        x20 = arg2;
        if (((arg2 - 1) & arg2) != 0)
        {
            arg1 = std::__ndk1::__next_prime(x20);
            x20 = arg1;
        }
    }
    int64_t x21 = *(x19 + 8);
    uint64_t x0_1;
    if (x20 > x21)
    {
        x0_1 = x19;
    }
    else
    {
        uint64_t x1_2;
        if (x20 < x21)
        {
            int32_t x8_3;
            if (x21 < 3)
            {
                x8_3 = 0;
            }
            else if (((x21 - 1) & x21) == 0)
            {
                x8_3 = 1;
            }
            else
            {
                x8_3 = 0;
            }
            *(x19 + 0x20);
            vcvth_f16_u16(*(x19 + 0x18));
            /* unimplemented  {fcvtpu x0, s0} */;
            if (x8_3 == 0)
            {
                arg1 = std::__ndk1::__next_prime(arg1);
            }
            else if (arg1 >= 2)
            {
                arg1 = (1 << -(_CountLeadingZeros((arg1 - 1))));
            }
            if (x20 < arg1)
            {
                x1_2 = arg1;
            }
            else
            {
                x1_2 = x20;
            }
        }
        if ((x20 >= x21 || (x20 < x21 && x1_2 >= x21)))
        {
            return;
        }
        if ((x20 < x21 && x1_2 < x21))
        {
            x0_1 = x19;
        }
    }
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__rehash(x0_1);
}

void* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__rehash(int64_t* arg1, int64_t arg2)
{
    int64_t* x19 = arg1;
    void* x0_1;
    if (arg2 == 0)
    {
        x0_1 = *x19;
        *x19 = 0;
        if (x0_1 != 0)
        {
            x0_1 = operator delete(x0_1);
        }
        x19[1] = 0;
    }
    else
    {
        int64_t x20_1 = arg2;
        if ((arg2 >> 0x3d) != 0)
        {
            sub_17a70();
            /* no return */
        }
        x0_1 = operator new((x20_1 << 3));
        void* x8_2 = *x19;
        *x19 = x0_1;
        if (x8_2 != 0)
        {
            x0_1 = operator delete(x8_2);
        }
        int64_t x8_3 = 0;
        x19[1] = x20_1;
        do
        {
            *(*x19 + (x8_3 << 3)) = 0;
            x8_3 = (x8_3 + 1);
        } while (x20_1 != x8_3);
        int64_t* i_2 = x19[2];
        if (i_2 != 0)
        {
            int64_t x28_1 = i_2[1];
            int64_t x25_1 = (x20_1 - 1);
            int64_t x14_1 = (x25_1 & x20_1);
            if (x14_1 == 0)
            {
                x28_1 = (x28_1 & x25_1);
            }
            else if (x28_1 >= x20_1)
            {
                x28_1 = (x28_1 % x20_1);
            }
            *(*x19 + (x28_1 << 3)) = &x19[2];
            int64_t* i = *i_2;
            if (i != 0)
            {
                int64_t* var_78_1 = x19;
                int64_t var_70_1 = x20_1;
                int64_t var_80_1 = x14_1;
                do
                {
                    int64_t x27_1 = i[1];
                    if (x14_1 == 0)
                    {
                        x27_1 = (x27_1 & x25_1);
                    }
                    else if (x27_1 >= x20_1)
                    {
                        x27_1 = (x27_1 % x20_1);
                    }
                    if (((x14_1 == 0 && x27_1 == x28_1) || (x14_1 != 0 && x27_1 == x28_1)))
                    {
                        i_2 = i;
                    }
                    if (((x14_1 == 0 && x27_1 != x28_1) || (x14_1 != 0 && x27_1 != x28_1)))
                    {
                        int64_t x8_7 = *x19;
                        if (*(x8_7 + (x27_1 << 3)) == 0)
                        {
                            *(x8_7 + (x27_1 << 3)) = i_2;
                            i_2 = i;
                            x28_1 = x27_1;
                        }
                        else
                        {
                            int64_t* j = *i;
                            int64_t* i_1 = i;
                            if (j != 0)
                            {
                                uint64_t x16_1 = i[2];
                                void* x17_1 = (i + 0x11);
                                int64_t* x26_1 = i;
                                uint64_t x10_1 = (x16_1 >> 1);
                                uint64_t x21_1;
                                if ((x16_1 & 1) == 0)
                                {
                                    x21_1 = x10_1;
                                }
                                else
                                {
                                    x21_1 = i[3];
                                }
                                int64_t x2_1 = -(x10_1);
                                int64_t var_68_1 = x2_1;
                                do
                                {
                                    i_1 = x26_1;
                                    x26_1 = j;
                                    uint64_t x9_6 = j[2];
                                    uint64_t x10_3;
                                    if ((x9_6 & 1) == 0)
                                    {
                                        x10_3 = (x9_6 >> 1);
                                    }
                                    else
                                    {
                                        x10_3 = j[3];
                                    }
                                    if (x21_1 != x10_3)
                                    {
                                        break;
                                    }
                                    if ((x16_1 & 1) == 0)
                                    {
                                        x0_1 = x17_1;
                                    }
                                    else
                                    {
                                        x0_1 = i[4];
                                    }
                                    void* x1;
                                    if ((x9_6 & 1) != 0)
                                    {
                                        x1 = x26_1[4];
                                    }
                                    else
                                    {
                                        x1 = (j + 0x11);
                                    }
                                    if ((x16_1 & 1) == 0)
                                    {
                                        int64_t x8_9 = x2_1;
                                        void* x9_7 = x17_1;
                                        if (x21_1 != 0)
                                        {
                                            while (*x9_7 == *x1)
                                            {
                                                x9_7 = (x9_7 + 1);
                                                int64_t temp0_1 = x8_9;
                                                x8_9 = (x8_9 + 1);
                                                x1 = (x1 + 1);
                                                if (temp0_1 == -1)
                                                {
                                                    break;
                                                }
                                            }
                                            if (*x9_7 != *x1)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    else if (x21_1 != 0)
                                    {
                                        x0_1 = memcmp();
                                        x14_1 = var_80_1;
                                        x19 = var_78_1;
                                        x20_1 = var_70_1;
                                        x2_1 = var_68_1;
                                        if (x0_1 != 0)
                                        {
                                            break;
                                        }
                                    }
                                    j = *x26_1;
                                    i_1 = x26_1;
                                } while (j != 0);
                            }
                            int64_t x9_8 = (x27_1 << 3);
                            *i_2 = *i_1;
                            *i_1 = **(*x19 + x9_8);
                            **(*x19 + x9_8) = i;
                        }
                    }
                    i = *i_2;
                } while (i != 0);
            }
        }
    }
    return x0_1;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >&&>, std::__ndk1::tuple<> >(int64_t* arg1, char* arg2, int64_t arg3, int64_t* arg4, int64_t arg5 @ x27)
{
    int64_t var_58 = arg5;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x26 = arg1[1];
    int64_t* x8_4;
    void** x20_1;
    if (x26 != 0)
    {
        int64_t x25_1 = ((x26 - 1) & x26);
        if (x25_1 == 0)
        {
            arg5 = ((x26 - 1) & x0_1);
        }
        else
        {
            arg5 = x0_1;
            if (x0_1 >= x26)
            {
                arg5 = (x0_1 % x26);
            }
        }
        x8_4 = *(*arg1 + (arg5 << 3));
        if (x8_4 != 0)
        {
            x20_1 = *x8_4;
            if (x20_1 != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x23_1;
                if (temp1_1 == 0)
                {
                    x23_1 = (x8_5 >> 1);
                }
                else
                {
                    x23_1 = *(arg2 + 8);
                }
                void* x24_1;
                if (temp1_1 == 0)
                {
                    x24_1 = &arg2[1];
                }
                else
                {
                    x24_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x20_1[1];
                    if (x8_7 != x0_1)
                    {
                        if (x25_1 == 0)
                        {
                            x8_7 = (x8_7 & (x26 - 1));
                        }
                        if (((x25_1 == 0 || (x25_1 != 0 && x8_7 < x26)) && x8_7 != arg5))
                        {
                            goto label_19678;
                        }
                        if (((x25_1 != 0 && x8_7 >= x26) && (x8_7 % x26) != arg5))
                        {
                            goto label_19678;
                        }
                    }
                    uint64_t x10_2 = x20_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x20_1[3];
                    }
                    if (x11_3 == x23_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x20_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x20_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x20_1 = *x20_1;
                    if (x20_1 == 0)
                    {
                        goto label_19678;
                    }
                }
            }
        }
    }
    if (((x26 == 0 || (x26 != 0 && x8_4 == 0)) || ((x26 != 0 && x8_4 != 0) && x20_1 == 0)))
    {
    label_19678:
        void** x0_3;
        int128_t v0_1;
        x0_3 = operator new(0x80);
        int128_t* s = *arg4;
        x20_1 = x0_3;
        v0_1 = *s;
        x0_3[4] = s[1];
        *(x0_3 + 0x10) = v0_1;
        __builtin_memset(s, 0, 0x18);
        *(x0_3 + 0x28) = {0};
        __builtin_memset(&x0_3[7], 0, 0x48);
        *x0_3 = nullptr;
        x0_3[1] = x0_1;
        v0_1 = arg1[4];
        int32_t temp0_1 = vcvth_f16_u16((arg1[3] + 1));
        float v2_1;
        if (x26 != 0)
        {
            v2_1 = (v0_1 * vcvth_f16_u16(x26));
        }
        if ((x26 == 0 || (x26 != 0 && !(v2_1 >= temp0_1))))
        {
            if (x26 < 3)
            {
                /* nop */
            }
            else if (((x26 - 1) & x26) != 0)
            {
                /* nop */
            }
            v0_1 = (temp0_1 / v0_1);
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::rehash(arg1);
            x26 = arg1[1];
            if (((x26 - 1) & x26) == 0)
            {
                arg5 = ((x26 - 1) & x0_1);
            }
            else if (x0_1 >= x26)
            {
                arg5 = (x0_1 % x26);
            }
            else
            {
                arg5 = x0_1;
            }
        }
        int64_t x9_9 = *arg1;
        void*** x8_15 = *(x9_9 + (arg5 << 3));
        void* x8_18;
        if (x8_15 == 0)
        {
            *x20_1 = arg1[2];
            arg1[2] = x20_1;
            *(x9_9 + (arg5 << 3)) = &arg1[2];
            x8_18 = *x20_1;
            if (x8_18 != 0)
            {
                int64_t x8_19 = *(x8_18 + 8);
                if (((x26 - 1) & x26) == 0)
                {
                    x8_19 = (x8_19 & (x26 - 1));
                }
                else if (x8_19 >= x26)
                {
                    x8_19 = (x8_19 % x26);
                }
                x8_15 = (*arg1 + (x8_19 << 3));
            }
        }
        else
        {
            *x20_1 = *x8_15;
        }
        if ((x8_15 != 0 || (x8_15 == 0 && x8_18 != 0)))
        {
            *x8_15 = x20_1;
        }
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

void std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::rehash(uint64_t arg1, uint64_t arg2)
{
    uint64_t x19 = arg1;
    uint64_t x20;
    if (arg2 == 1)
    {
        x20 = 2;
    }
    else
    {
        x20 = arg2;
        if (((arg2 - 1) & arg2) != 0)
        {
            arg1 = std::__ndk1::__next_prime(x20);
            x20 = arg1;
        }
    }
    int64_t x21 = *(x19 + 8);
    uint64_t x0_1;
    if (x20 > x21)
    {
        x0_1 = x19;
    }
    else
    {
        uint64_t x1_2;
        if (x20 < x21)
        {
            int32_t x8_3;
            if (x21 < 3)
            {
                x8_3 = 0;
            }
            else if (((x21 - 1) & x21) == 0)
            {
                x8_3 = 1;
            }
            else
            {
                x8_3 = 0;
            }
            *(x19 + 0x20);
            vcvth_f16_u16(*(x19 + 0x18));
            /* unimplemented  {fcvtpu x0, s0} */;
            if (x8_3 == 0)
            {
                arg1 = std::__ndk1::__next_prime(arg1);
            }
            else if (arg1 >= 2)
            {
                arg1 = (1 << -(_CountLeadingZeros((arg1 - 1))));
            }
            if (x20 < arg1)
            {
                x1_2 = arg1;
            }
            else
            {
                x1_2 = x20;
            }
        }
        if ((x20 >= x21 || (x20 < x21 && x1_2 >= x21)))
        {
            return;
        }
        if ((x20 < x21 && x1_2 < x21))
        {
            x0_1 = x19;
        }
    }
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__rehash(x0_1);
}

void* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__rehash(int64_t* arg1, int64_t arg2)
{
    int64_t* x19 = arg1;
    void* x0_1;
    if (arg2 == 0)
    {
        x0_1 = *x19;
        *x19 = 0;
        if (x0_1 != 0)
        {
            x0_1 = operator delete(x0_1);
        }
        x19[1] = 0;
    }
    else
    {
        int64_t x20_1 = arg2;
        if ((arg2 >> 0x3d) != 0)
        {
            sub_17a70();
            /* no return */
        }
        x0_1 = operator new((x20_1 << 3));
        void* x8_2 = *x19;
        *x19 = x0_1;
        if (x8_2 != 0)
        {
            x0_1 = operator delete(x8_2);
        }
        int64_t x8_3 = 0;
        x19[1] = x20_1;
        do
        {
            *(*x19 + (x8_3 << 3)) = 0;
            x8_3 = (x8_3 + 1);
        } while (x20_1 != x8_3);
        int64_t* i_2 = x19[2];
        if (i_2 != 0)
        {
            int64_t x28_1 = i_2[1];
            int64_t x25_1 = (x20_1 - 1);
            int64_t x14_1 = (x25_1 & x20_1);
            if (x14_1 == 0)
            {
                x28_1 = (x28_1 & x25_1);
            }
            else if (x28_1 >= x20_1)
            {
                x28_1 = (x28_1 % x20_1);
            }
            *(*x19 + (x28_1 << 3)) = &x19[2];
            int64_t* i = *i_2;
            if (i != 0)
            {
                int64_t* var_78_1 = x19;
                int64_t var_70_1 = x20_1;
                int64_t var_80_1 = x14_1;
                do
                {
                    int64_t x27_1 = i[1];
                    if (x14_1 == 0)
                    {
                        x27_1 = (x27_1 & x25_1);
                    }
                    else if (x27_1 >= x20_1)
                    {
                        x27_1 = (x27_1 % x20_1);
                    }
                    if (((x14_1 == 0 && x27_1 == x28_1) || (x14_1 != 0 && x27_1 == x28_1)))
                    {
                        i_2 = i;
                    }
                    if (((x14_1 == 0 && x27_1 != x28_1) || (x14_1 != 0 && x27_1 != x28_1)))
                    {
                        int64_t x8_7 = *x19;
                        if (*(x8_7 + (x27_1 << 3)) == 0)
                        {
                            *(x8_7 + (x27_1 << 3)) = i_2;
                            i_2 = i;
                            x28_1 = x27_1;
                        }
                        else
                        {
                            int64_t* j = *i;
                            int64_t* i_1 = i;
                            if (j != 0)
                            {
                                uint64_t x16_1 = i[2];
                                void* x17_1 = (i + 0x11);
                                int64_t* x26_1 = i;
                                uint64_t x10_1 = (x16_1 >> 1);
                                uint64_t x21_1;
                                if ((x16_1 & 1) == 0)
                                {
                                    x21_1 = x10_1;
                                }
                                else
                                {
                                    x21_1 = i[3];
                                }
                                int64_t x2_1 = -(x10_1);
                                int64_t var_68_1 = x2_1;
                                do
                                {
                                    i_1 = x26_1;
                                    x26_1 = j;
                                    uint64_t x9_6 = j[2];
                                    uint64_t x10_3;
                                    if ((x9_6 & 1) == 0)
                                    {
                                        x10_3 = (x9_6 >> 1);
                                    }
                                    else
                                    {
                                        x10_3 = j[3];
                                    }
                                    if (x21_1 != x10_3)
                                    {
                                        break;
                                    }
                                    if ((x16_1 & 1) == 0)
                                    {
                                        x0_1 = x17_1;
                                    }
                                    else
                                    {
                                        x0_1 = i[4];
                                    }
                                    void* x1;
                                    if ((x9_6 & 1) != 0)
                                    {
                                        x1 = x26_1[4];
                                    }
                                    else
                                    {
                                        x1 = (j + 0x11);
                                    }
                                    if ((x16_1 & 1) == 0)
                                    {
                                        int64_t x8_9 = x2_1;
                                        void* x9_7 = x17_1;
                                        if (x21_1 != 0)
                                        {
                                            while (*x9_7 == *x1)
                                            {
                                                x9_7 = (x9_7 + 1);
                                                int64_t temp0_1 = x8_9;
                                                x8_9 = (x8_9 + 1);
                                                x1 = (x1 + 1);
                                                if (temp0_1 == -1)
                                                {
                                                    break;
                                                }
                                            }
                                            if (*x9_7 != *x1)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    else if (x21_1 != 0)
                                    {
                                        x0_1 = memcmp();
                                        x14_1 = var_80_1;
                                        x19 = var_78_1;
                                        x20_1 = var_70_1;
                                        x2_1 = var_68_1;
                                        if (x0_1 != 0)
                                        {
                                            break;
                                        }
                                    }
                                    j = *x26_1;
                                    i_1 = x26_1;
                                } while (j != 0);
                            }
                            int64_t x9_8 = (x27_1 << 3);
                            *i_2 = *i_1;
                            *i_1 = **(*x19 + x9_8);
                            **(*x19 + x9_8) = i;
                        }
                    }
                    i = *i_2;
                } while (i != 0);
            }
        }
    }
    return x0_1;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(int64_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x24 = arg1[1];
    int64_t* x8_4;
    void** i;
    if (x24 != 0)
    {
        int64_t x26_1 = ((x24 - 1) & x24);
        int64_t x27_1;
        if (x26_1 == 0)
        {
            x27_1 = ((x24 - 1) & x0_1);
        }
        else
        {
            x27_1 = x0_1;
            if (x0_1 >= x24)
            {
                x27_1 = (x0_1 % x24);
            }
        }
        x8_4 = *(*arg1 + (x27_1 << 3));
        if (x8_4 != 0)
        {
            i = *x8_4;
            if (i != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x21_1;
                if (temp1_1 == 0)
                {
                    x21_1 = (x8_5 >> 1);
                }
                else
                {
                    x21_1 = *(arg2 + 8);
                }
                void* x22_1;
                if (temp1_1 == 0)
                {
                    x22_1 = &arg2[1];
                }
                else
                {
                    x22_1 = *(arg2 + 0x10);
                }
                do
                {
                    int64_t x8_10 = i[1];
                    if (x8_10 == x0_1)
                    {
                        uint64_t x10_2 = i[2];
                        uint64_t x9_2 = (x10_2 >> 1);
                        uint64_t x11_3;
                        if ((x10_2 & 1) == 0)
                        {
                            x11_3 = x9_2;
                        }
                        else
                        {
                            x11_3 = i[3];
                        }
                        if (x11_3 == x21_1)
                        {
                            if ((x10_2 & 1) != 0)
                            {
                                if (x21_1 == 0)
                                {
                                    break;
                                }
                                if (memcmp() == 0)
                                {
                                    break;
                                }
                            }
                            else
                            {
                                if (x21_1 == 0)
                                {
                                    break;
                                }
                                void* x8_8 = (i + 0x11);
                                int64_t x9_3 = -(x9_2);
                                void* x10_3 = x22_1;
                                while (*x8_8 == *x10_3)
                                {
                                    x8_8 = (x8_8 + 1);
                                    int64_t temp2_1 = x9_3;
                                    x9_3 = (x9_3 + 1);
                                    x10_3 = (x10_3 + 1);
                                    if (temp2_1 == -1)
                                    {
                                        break;
                                    }
                                }
                                if (*x8_8 == *x10_3)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (x26_1 == 0)
                        {
                            x8_10 = (x8_10 & (x24 - 1));
                        }
                        if (((x26_1 == 0 || (x26_1 != 0 && x8_10 < x24)) && x8_10 != x27_1))
                        {
                            goto label_19cec;
                        }
                        if (((x26_1 != 0 && x8_10 >= x24) && (x8_10 % x24) != x27_1))
                        {
                            goto label_19cec;
                        }
                    }
                    i = *i;
                } while (i != 0);
            }
        }
    }
    if ((x24 == 0 || (x24 != 0 && x8_4 == 0)))
    {
    label_19cec:
        i = nullptr;
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return i;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t* arg1, char* arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg4 @ x21)
{
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_28 = arg4;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void** var_80;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_80, x1);
    int64_t x28 = arg1[1];
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x20 = x0_1;
    int64_t* x8_4;
    void** x24_1;
    if (x28 != 0)
    {
        int64_t x13_1 = ((x28 - 1) & x28);
        if (x13_1 == 0)
        {
            arg4 = ((x28 - 1) & x20);
        }
        else
        {
            arg4 = x20;
            if (x20 >= x28)
            {
                arg4 = (x20 % x28);
            }
        }
        x8_4 = *(*arg1 + (arg4 << 3));
        if (x8_4 != 0)
        {
            int64_t x4;
            int64_t var_88_1 = x4;
            x24_1 = *x8_4;
            if (x24_1 != 0)
            {
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_90_1 = x20;
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x25_1;
                if (temp1_1 == 0)
                {
                    x25_1 = (x8_5 >> 1);
                }
                else
                {
                    x25_1 = *(arg2 + 8);
                }
                void* x26_1;
                if (temp1_1 == 0)
                {
                    x26_1 = &arg2[1];
                }
                else
                {
                    x26_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x24_1[1];
                    if (x8_7 != x20)
                    {
                        if (x13_1 == 0)
                        {
                            x8_7 = (x8_7 & (x28 - 1));
                        }
                        if (((x13_1 == 0 || (x13_1 != 0 && x8_7 < x28)) && x8_7 != arg4))
                        {
                            goto label_19ef0;
                        }
                        if (((x13_1 != 0 && x8_7 >= x28) && (x8_7 % x28) != arg4))
                        {
                            goto label_19ef0;
                        }
                    }
                    uint64_t x10_2 = x24_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x24_1[3];
                    }
                    if (x11_3 == x25_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x25_1 == 0)
                            {
                                break;
                            }
                            x20 = var_90_1;
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x25_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x24_1 + x9_5) + 0x11) == *(x26_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x24_1 + x9_5) + 0x11) == *(x26_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x24_1 = *x24_1;
                    if (x24_1 == 0)
                    {
                        goto label_19ef0;
                    }
                }
            }
        }
    }
    if (((x28 == 0 || (x28 != 0 && x8_4 == 0)) || ((x28 != 0 && x8_4 != 0) && x24_1 == 0)))
    {
    label_19ef0:
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, x20, arg3);
        float v0_1 = arg1[4];
        float temp0_1 = vcvth_f16_u16((arg1[3] + 1));
        float v2_1;
        if (x28 != 0)
        {
            v2_1 = (v0_1 * vcvth_f16_u16(x28));
        }
        if ((x28 == 0 || (x28 != 0 && !(v2_1 >= temp0_1))))
        {
            if (x28 < 3)
            {
                /* nop */
            }
            else if (((x28 - 1) & x28) != 0)
            {
                /* nop */
            }
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::rehash(arg1);
            x28 = arg1[1];
            if (((x28 - 1) & x28) == 0)
            {
                arg4 = ((x28 - 1) & x20);
            }
            else if (x20 >= x28)
            {
                arg4 = (x20 % x28);
            }
            else
            {
                arg4 = x20;
            }
        }
        void*** x8_16 = *(*arg1 + (arg4 << 3));
        if (x8_16 != 0)
        {
            *var_80 = *x8_16;
            *x8_16 = var_80;
        }
        else
        {
            *var_80 = arg1[2];
            arg1[2] = var_80;
            *(*arg1 + (arg4 << 3)) = &arg1[2];
            void** x8_19 = var_80;
            void* x9_13 = *x8_19;
            if (x9_13 != 0)
            {
                int64_t x9_14 = *(x9_13 + 8);
                if (((x28 - 1) & x28) == 0)
                {
                    x9_14 = (x9_14 & (x28 - 1));
                }
                else if (x9_14 >= x28)
                {
                    x9_14 = (x9_14 % x28);
                }
                *(*arg1 + (x9_14 << 3)) = x8_19;
            }
        }
        x24_1 = var_80;
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x24_1;
}

int64_t* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t* arg5 @ x8)
{
    void* x0;
    int128_t v0;
    x0 = operator new(0x80);
    *arg5 = x0;
    arg5[1] = (arg1 + 0x10);
    arg5[2] = 0;
    char* x8 = *arg4;
    int64_t* x0_1 = (x0 + 0x10);
    *x0_1 = 0;
    *(x0 + 0x18) = 0;
    *(x0 + 0x20) = 0;
    if ((*x8 & 1) == 0)
    {
        v0 = *x8;
        x0_1[2] = *(x8 + 0x10);
        *x0_1 = v0;
    }
    else
    {
        size_t x22_1 = *(x8 + 8);
        if (x22_1 < -0x10)
        {
            int64_t x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            *arg5 = 0;
            operator delete(x0);
            /* tailcall */
            return openni::VideoStream::~VideoStream(_Unwind_Resume(x0_5));
        }
        int64_t x23_1 = *(x8 + 0x10);
        void* x24_1;
        if (x22_1 >= 0x17)
        {
            uint64_t x25_1 = ((x22_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x25_1);
            x24_1 = x0_3;
            *(x0 + 0x18) = x22_1;
            *(x0 + 0x20) = x0_3;
            *(x0 + 0x10) = (x25_1 | 1);
        }
        else
        {
            x24_1 = (x0 + 0x11);
            *(x0 + 0x10) = (x22_1 << 1);
        }
        if ((x22_1 >= 0x17 || (x22_1 < 0x17 && x22_1 != 0)))
        {
            x0_1 = memcpy(x24_1, x23_1, x22_1);
        }
        *(x24_1 + x22_1) = 0;
    }
    int64_t* x9_2 = *arg5;
    __builtin_memset((x0 + 0x28), 0, 0x58);
    arg5[2] = 1;
    *x9_2 = 0;
    x9_2[1] = arg2;
    return x0_1;
}

void* openni::VideoStream::~VideoStream(int64_t* arg1)
{
    void* x0 = *arg1;
    if (x0 != 0)
    {
        void* x8_1 = arg1[4];
        if (x8_1 != 0)
        {
            operator delete(x8_1);
            x0 = *arg1;
            arg1[4] = 0;
        }
        if ((x8_1 == 0 || (x8_1 != 0 && x0 != 0)))
        {
            if (arg1[5] != 0)
            {
                x0 = oniStreamDestroy(x0);
            }
            *arg1 = 0;
        }
    }
    if (*(arg1 + 0x1c) != 0)
    {
        x0 = arg1[2];
        if (x0 != 0)
        {
            x0 = operator delete[](x0);
        }
    }
    *(arg1 + 0x1c) = 0;
    arg1[2] = 0;
    arg1[3] = 0;
    return x0;
}

void sub_1a234(void* arg1, int64_t arg2 @ x19) __noreturn
{
    openni::SensorInfo::~SensorInfo();
    sub_1512c(arg1);
    /* no return */
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t* arg1, char* arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg4 @ x21)
{
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_28 = arg4;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void** var_80;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_80, x1);
    int64_t x28 = arg1[1];
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x20 = x0_1;
    int64_t* x8_4;
    void** x24_1;
    if (x28 != 0)
    {
        int64_t x13_1 = ((x28 - 1) & x28);
        if (x13_1 == 0)
        {
            arg4 = ((x28 - 1) & x20);
        }
        else
        {
            arg4 = x20;
            if (x20 >= x28)
            {
                arg4 = (x20 % x28);
            }
        }
        x8_4 = *(*arg1 + (arg4 << 3));
        if (x8_4 != 0)
        {
            int64_t x4;
            int64_t var_88_1 = x4;
            x24_1 = *x8_4;
            if (x24_1 != 0)
            {
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_90_1 = x20;
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x25_1;
                if (temp1_1 == 0)
                {
                    x25_1 = (x8_5 >> 1);
                }
                else
                {
                    x25_1 = *(arg2 + 8);
                }
                void* x26_1;
                if (temp1_1 == 0)
                {
                    x26_1 = &arg2[1];
                }
                else
                {
                    x26_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x24_1[1];
                    if (x8_7 != x20)
                    {
                        if (x13_1 == 0)
                        {
                            x8_7 = (x8_7 & (x28 - 1));
                        }
                        if (((x13_1 == 0 || (x13_1 != 0 && x8_7 < x28)) && x8_7 != arg4))
                        {
                            goto label_1a40c;
                        }
                        if (((x13_1 != 0 && x8_7 >= x28) && (x8_7 % x28) != arg4))
                        {
                            goto label_1a40c;
                        }
                    }
                    uint64_t x10_2 = x24_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x24_1[3];
                    }
                    if (x11_3 == x25_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x25_1 == 0)
                            {
                                break;
                            }
                            x20 = var_90_1;
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x25_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x24_1 + x9_5) + 0x11) == *(x26_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x24_1 + x9_5) + 0x11) == *(x26_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x24_1 = *x24_1;
                    if (x24_1 == 0)
                    {
                        goto label_1a40c;
                    }
                }
            }
        }
    }
    if (((x28 == 0 || (x28 != 0 && x8_4 == 0)) || ((x28 != 0 && x8_4 != 0) && x24_1 == 0)))
    {
    label_1a40c:
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, x20, arg3);
        float v0_1 = arg1[4];
        float temp0_1 = vcvth_f16_u16((arg1[3] + 1));
        float v2_1;
        if (x28 != 0)
        {
            v2_1 = (v0_1 * vcvth_f16_u16(x28));
        }
        if ((x28 == 0 || (x28 != 0 && !(v2_1 >= temp0_1))))
        {
            if (x28 < 3)
            {
                /* nop */
            }
            else if (((x28 - 1) & x28) != 0)
            {
                /* nop */
            }
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::rehash(arg1);
            x28 = arg1[1];
            if (((x28 - 1) & x28) == 0)
            {
                arg4 = ((x28 - 1) & x20);
            }
            else if (x20 >= x28)
            {
                arg4 = (x20 % x28);
            }
            else
            {
                arg4 = x20;
            }
        }
        void*** x8_16 = *(*arg1 + (arg4 << 3));
        if (x8_16 != 0)
        {
            *var_80 = *x8_16;
            *x8_16 = var_80;
        }
        else
        {
            *var_80 = arg1[2];
            arg1[2] = var_80;
            *(*arg1 + (arg4 << 3)) = &arg1[2];
            void** x8_19 = var_80;
            void* x9_13 = *x8_19;
            if (x9_13 != 0)
            {
                int64_t x9_14 = *(x9_13 + 8);
                if (((x28 - 1) & x28) == 0)
                {
                    x9_14 = (x9_14 & (x28 - 1));
                }
                else if (x9_14 >= x28)
                {
                    x9_14 = (x9_14 % x28);
                }
                *(*arg1 + (x9_14 << 3)) = x8_19;
            }
        }
        x24_1 = var_80;
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x24_1;
}

int64_t* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> >, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::shared_ptr<openni::Device> > > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t* arg5 @ x8)
{
    void* x0;
    int128_t v0;
    x0 = operator new(0x38);
    *arg5 = x0;
    arg5[1] = (arg1 + 0x10);
    arg5[2] = 0;
    char* x8 = *arg4;
    int64_t* x0_1 = (x0 + 0x10);
    *x0_1 = 0;
    *(x0 + 0x18) = 0;
    *(x0 + 0x20) = 0;
    if ((*x8 & 1) == 0)
    {
        v0 = *x8;
        x0_1[2] = *(x8 + 0x10);
        *x0_1 = v0;
    }
    else
    {
        size_t x22_1 = *(x8 + 8);
        if (x22_1 < -0x10)
        {
            int64_t x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            *arg5 = 0;
            operator delete(x0);
            int64_t* x0_8;
            char* x1_1;
            int128_t* x2_1;
            x0_8 = _Unwind_Resume(x0_5);
            int64_t x27;
            /* tailcall */
            return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> >(x0_8, x1_1, x2_1, x27);
        }
        int64_t x23_1 = *(x8 + 0x10);
        void* x24_1;
        if (x22_1 >= 0x17)
        {
            uint64_t x25_1 = ((x22_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x25_1);
            x24_1 = x0_3;
            *(x0 + 0x18) = x22_1;
            *(x0 + 0x20) = x0_3;
            *(x0 + 0x10) = (x25_1 | 1);
        }
        else
        {
            x24_1 = (x0 + 0x11);
            *(x0 + 0x10) = (x22_1 << 1);
        }
        if ((x22_1 >= 0x17 || (x22_1 < 0x17 && x22_1 != 0)))
        {
            x0_1 = memcpy(x24_1, x23_1, x22_1);
        }
        *(x24_1 + x22_1) = 0;
    }
    int64_t* x8_4 = *arg5;
    *(x0 + 0x28) = 0;
    *(x0 + 0x30) = 0;
    arg5[2] = 1;
    *x8_4 = 0;
    x8_4[1] = arg2;
    return x0_1;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> >(int64_t* arg1, char* arg2, int128_t* arg3, int64_t arg4 @ x27)
{
    int64_t var_58 = arg4;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x26 = arg1[1];
    int64_t* x8_4;
    void** x20_1;
    if (x26 != 0)
    {
        int64_t x25_1 = ((x26 - 1) & x26);
        if (x25_1 == 0)
        {
            arg4 = ((x26 - 1) & x0_1);
        }
        else
        {
            arg4 = x0_1;
            if (x0_1 >= x26)
            {
                arg4 = (x0_1 % x26);
            }
        }
        x8_4 = *(*arg1 + (arg4 << 3));
        if (x8_4 != 0)
        {
            x20_1 = *x8_4;
            if (x20_1 != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x23_1;
                if (temp1_1 == 0)
                {
                    x23_1 = (x8_5 >> 1);
                }
                else
                {
                    x23_1 = *(arg2 + 8);
                }
                void* x24_1;
                if (temp1_1 == 0)
                {
                    x24_1 = &arg2[1];
                }
                else
                {
                    x24_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x20_1[1];
                    if (x8_7 != x0_1)
                    {
                        if (x25_1 == 0)
                        {
                            x8_7 = (x8_7 & (x26 - 1));
                        }
                        if (((x25_1 == 0 || (x25_1 != 0 && x8_7 < x26)) && x8_7 != arg4))
                        {
                            goto label_1a874;
                        }
                        if (((x25_1 != 0 && x8_7 >= x26) && (x8_7 % x26) != arg4))
                        {
                            goto label_1a874;
                        }
                    }
                    uint64_t x10_2 = x20_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x20_1[3];
                    }
                    if (x11_3 == x23_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x20_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x20_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x20_1 = *x20_1;
                    if (x20_1 == 0)
                    {
                        goto label_1a874;
                    }
                }
            }
        }
    }
    if (((x26 == 0 || (x26 != 0 && x8_4 == 0)) || ((x26 != 0 && x8_4 != 0) && x20_1 == 0)))
    {
    label_1a874:
        void** x0_3;
        int128_t v0_1;
        int128_t v1_1;
        int128_t v2_1;
        int128_t v3_1;
        x0_3 = operator new(0x80);
        v0_1 = *arg3;
        x20_1 = x0_3;
        x0_3[4] = arg3[1];
        *(x0_3 + 0x10) = v0_1;
        v0_1 = *(arg3 + 0x44);
        v1_1 = *(arg3 + 0x38);
        v2_1 = *(arg3 + 0x28);
        v3_1 = *(arg3 + 0x18);
        __builtin_memset(arg3, 0, 0x18);
        *(x0_3 + 0x54) = v0_1;
        *(x0_3 + 0x48) = v1_1;
        *(x0_3 + 0x38) = v2_1;
        *(x0_3 + 0x28) = v3_1;
        v0_1 = *(arg3 + 0x58);
        x0_3[0xf] = *(arg3 + 0x68);
        *(x0_3 + 0x68) = v0_1;
        __builtin_memset((arg3 + 0x58), 0, 0x18);
        *x0_3 = nullptr;
        x0_3[1] = x0_1;
        v0_1 = arg1[4];
        v1_1 = vcvth_f16_u16((arg1[3] + 1));
        if (x26 != 0)
        {
            v2_1 = vcvth_f16_u16(x26);
            v2_1 = (v0_1 * v2_1);
        }
        if ((x26 == 0 || (x26 != 0 && !(v2_1 >= v1_1))))
        {
            if (x26 < 3)
            {
                /* nop */
            }
            else if (((x26 - 1) & x26) != 0)
            {
                /* nop */
            }
            v0_1 = (v1_1 / v0_1);
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::rehash(arg1);
            x26 = arg1[1];
            if (((x26 - 1) & x26) == 0)
            {
                arg4 = ((x26 - 1) & x0_1);
            }
            else if (x0_1 >= x26)
            {
                arg4 = (x0_1 % x26);
            }
            else
            {
                arg4 = x0_1;
            }
        }
        int64_t x9_8 = *arg1;
        void*** x8_17 = *(x9_8 + (arg4 << 3));
        void* x8_20;
        if (x8_17 == 0)
        {
            *x20_1 = arg1[2];
            arg1[2] = x20_1;
            *(x9_8 + (arg4 << 3)) = &arg1[2];
            x8_20 = *x20_1;
            if (x8_20 != 0)
            {
                int64_t x8_21 = *(x8_20 + 8);
                if (((x26 - 1) & x26) == 0)
                {
                    x8_21 = (x8_21 & (x26 - 1));
                }
                else if (x8_21 >= x26)
                {
                    x8_21 = (x8_21 % x26);
                }
                x8_17 = (*arg1 + (x8_21 << 3));
            }
        }
        else
        {
            *x20_1 = *x8_17;
        }
        if ((x8_17 != 0 || (x8_17 == 0 && x8_20 != 0)))
        {
            *x8_17 = x20_1;
        }
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

void std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::rehash(uint64_t arg1, uint64_t arg2)
{
    uint64_t x19 = arg1;
    uint64_t x20;
    if (arg2 == 1)
    {
        x20 = 2;
    }
    else
    {
        x20 = arg2;
        if (((arg2 - 1) & arg2) != 0)
        {
            arg1 = std::__ndk1::__next_prime(x20);
            x20 = arg1;
        }
    }
    int64_t x21 = *(x19 + 8);
    uint64_t x0_1;
    if (x20 > x21)
    {
        x0_1 = x19;
    }
    else
    {
        uint64_t x1_2;
        if (x20 < x21)
        {
            int32_t x8_3;
            if (x21 < 3)
            {
                x8_3 = 0;
            }
            else if (((x21 - 1) & x21) == 0)
            {
                x8_3 = 1;
            }
            else
            {
                x8_3 = 0;
            }
            *(x19 + 0x20);
            vcvth_f16_u16(*(x19 + 0x18));
            /* unimplemented  {fcvtpu x0, s0} */;
            if (x8_3 == 0)
            {
                arg1 = std::__ndk1::__next_prime(arg1);
            }
            else if (arg1 >= 2)
            {
                arg1 = (1 << -(_CountLeadingZeros((arg1 - 1))));
            }
            if (x20 < arg1)
            {
                x1_2 = arg1;
            }
            else
            {
                x1_2 = x20;
            }
        }
        if ((x20 >= x21 || (x20 < x21 && x1_2 >= x21)))
        {
            return;
        }
        if ((x20 < x21 && x1_2 < x21))
        {
            x0_1 = x19;
        }
    }
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__rehash(x0_1);
}

void* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__rehash(int64_t* arg1, int64_t arg2)
{
    int64_t* x19 = arg1;
    void* x0_1;
    if (arg2 == 0)
    {
        x0_1 = *x19;
        *x19 = 0;
        if (x0_1 != 0)
        {
            x0_1 = operator delete(x0_1);
        }
        x19[1] = 0;
    }
    else
    {
        int64_t x20_1 = arg2;
        if ((arg2 >> 0x3d) != 0)
        {
            sub_17a70();
            /* no return */
        }
        x0_1 = operator new((x20_1 << 3));
        void* x8_2 = *x19;
        *x19 = x0_1;
        if (x8_2 != 0)
        {
            x0_1 = operator delete(x8_2);
        }
        int64_t x8_3 = 0;
        x19[1] = x20_1;
        do
        {
            *(*x19 + (x8_3 << 3)) = 0;
            x8_3 = (x8_3 + 1);
        } while (x20_1 != x8_3);
        int64_t* i_2 = x19[2];
        if (i_2 != 0)
        {
            int64_t x28_1 = i_2[1];
            int64_t x25_1 = (x20_1 - 1);
            int64_t x14_1 = (x25_1 & x20_1);
            if (x14_1 == 0)
            {
                x28_1 = (x28_1 & x25_1);
            }
            else if (x28_1 >= x20_1)
            {
                x28_1 = (x28_1 % x20_1);
            }
            *(*x19 + (x28_1 << 3)) = &x19[2];
            int64_t* i = *i_2;
            if (i != 0)
            {
                int64_t* var_78_1 = x19;
                int64_t var_70_1 = x20_1;
                int64_t var_80_1 = x14_1;
                do
                {
                    int64_t x27_1 = i[1];
                    if (x14_1 == 0)
                    {
                        x27_1 = (x27_1 & x25_1);
                    }
                    else if (x27_1 >= x20_1)
                    {
                        x27_1 = (x27_1 % x20_1);
                    }
                    if (((x14_1 == 0 && x27_1 == x28_1) || (x14_1 != 0 && x27_1 == x28_1)))
                    {
                        i_2 = i;
                    }
                    if (((x14_1 == 0 && x27_1 != x28_1) || (x14_1 != 0 && x27_1 != x28_1)))
                    {
                        int64_t x8_7 = *x19;
                        if (*(x8_7 + (x27_1 << 3)) == 0)
                        {
                            *(x8_7 + (x27_1 << 3)) = i_2;
                            i_2 = i;
                            x28_1 = x27_1;
                        }
                        else
                        {
                            int64_t* j = *i;
                            int64_t* i_1 = i;
                            if (j != 0)
                            {
                                uint64_t x16_1 = i[2];
                                void* x17_1 = (i + 0x11);
                                int64_t* x26_1 = i;
                                uint64_t x10_1 = (x16_1 >> 1);
                                uint64_t x21_1;
                                if ((x16_1 & 1) == 0)
                                {
                                    x21_1 = x10_1;
                                }
                                else
                                {
                                    x21_1 = i[3];
                                }
                                int64_t x2_1 = -(x10_1);
                                int64_t var_68_1 = x2_1;
                                do
                                {
                                    i_1 = x26_1;
                                    x26_1 = j;
                                    uint64_t x9_6 = j[2];
                                    uint64_t x10_3;
                                    if ((x9_6 & 1) == 0)
                                    {
                                        x10_3 = (x9_6 >> 1);
                                    }
                                    else
                                    {
                                        x10_3 = j[3];
                                    }
                                    if (x21_1 != x10_3)
                                    {
                                        break;
                                    }
                                    if ((x16_1 & 1) == 0)
                                    {
                                        x0_1 = x17_1;
                                    }
                                    else
                                    {
                                        x0_1 = i[4];
                                    }
                                    void* x1;
                                    if ((x9_6 & 1) != 0)
                                    {
                                        x1 = x26_1[4];
                                    }
                                    else
                                    {
                                        x1 = (j + 0x11);
                                    }
                                    if ((x16_1 & 1) == 0)
                                    {
                                        int64_t x8_9 = x2_1;
                                        void* x9_7 = x17_1;
                                        if (x21_1 != 0)
                                        {
                                            while (*x9_7 == *x1)
                                            {
                                                x9_7 = (x9_7 + 1);
                                                int64_t temp0_1 = x8_9;
                                                x8_9 = (x8_9 + 1);
                                                x1 = (x1 + 1);
                                                if (temp0_1 == -1)
                                                {
                                                    break;
                                                }
                                            }
                                            if (*x9_7 != *x1)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    else if (x21_1 != 0)
                                    {
                                        x0_1 = memcmp();
                                        x14_1 = var_80_1;
                                        x19 = var_78_1;
                                        x20_1 = var_70_1;
                                        x2_1 = var_68_1;
                                        if (x0_1 != 0)
                                        {
                                            break;
                                        }
                                    }
                                    j = *x26_1;
                                    i_1 = x26_1;
                                } while (j != 0);
                            }
                            int64_t x9_8 = (x27_1 << 3);
                            *i_2 = *i_1;
                            *i_1 = **(*x19 + x9_8);
                            **(*x19 + x9_8) = i;
                        }
                    }
                    i = *i_2;
                } while (i != 0);
            }
        }
    }
    return x0_1;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> >(int64_t* arg1, char* arg2, int128_t* arg3, int64_t arg4 @ x27)
{
    int64_t var_58 = arg4;
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x26 = arg1[1];
    int64_t* x8_4;
    void** x20_1;
    if (x26 != 0)
    {
        int64_t x25_1 = ((x26 - 1) & x26);
        if (x25_1 == 0)
        {
            arg4 = ((x26 - 1) & x0_1);
        }
        else
        {
            arg4 = x0_1;
            if (x0_1 >= x26)
            {
                arg4 = (x0_1 % x26);
            }
        }
        x8_4 = *(*arg1 + (arg4 << 3));
        if (x8_4 != 0)
        {
            x20_1 = *x8_4;
            if (x20_1 != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x23_1;
                if (temp1_1 == 0)
                {
                    x23_1 = (x8_5 >> 1);
                }
                else
                {
                    x23_1 = *(arg2 + 8);
                }
                void* x24_1;
                if (temp1_1 == 0)
                {
                    x24_1 = &arg2[1];
                }
                else
                {
                    x24_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x20_1[1];
                    if (x8_7 != x0_1)
                    {
                        if (x25_1 == 0)
                        {
                            x8_7 = (x8_7 & (x26 - 1));
                        }
                        if (((x25_1 == 0 || (x25_1 != 0 && x8_7 < x26)) && x8_7 != arg4))
                        {
                            goto label_1af0c;
                        }
                        if (((x25_1 != 0 && x8_7 >= x26) && (x8_7 % x26) != arg4))
                        {
                            goto label_1af0c;
                        }
                    }
                    uint64_t x10_2 = x20_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x20_1[3];
                    }
                    if (x11_3 == x23_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x20_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x20_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x20_1 = *x20_1;
                    if (x20_1 == 0)
                    {
                        goto label_1af0c;
                    }
                }
            }
        }
    }
    if (((x26 == 0 || (x26 != 0 && x8_4 == 0)) || ((x26 != 0 && x8_4 != 0) && x20_1 == 0)))
    {
    label_1af0c:
        void** x0_3;
        int128_t v0_1;
        x0_3 = operator new(0x80);
        v0_1 = *arg3;
        x20_1 = x0_3;
        x0_3[4] = arg3[1];
        *(x0_3 + 0x10) = v0_1;
        int64_t x8_10 = *(arg3 + 0x28);
        v0_1 = *(arg3 + 0x18);
        __builtin_memset(arg3, 0, 0x18);
        x0_3[7] = x8_10;
        *(x0_3 + 0x28) = v0_1;
        int64_t x8_11 = arg3[4];
        v0_1 = arg3[3];
        __builtin_memset((arg3 + 0x18), 0, 0x20);
        x0_3[0xa] = x8_11;
        *(x0_3 + 0x40) = v0_1;
        v0_1 = *(arg3 + 0x48);
        __builtin_memset((arg3 + 0x38), 0, 0x20);
        *(x0_3 + 0x58) = v0_1;
        *(x0_3 + 0x68) = *(arg3 + 0x58);
        int64_t x8_12 = *(arg3 + 0x68);
        *(arg3 + 0x58) = {0};
        *x0_3 = nullptr;
        x0_3[1] = x0_1;
        x0_3[0xf] = x8_12;
        v0_1 = arg1[4];
        int32_t temp0_1 = vcvth_f16_u16((arg1[3] + 1));
        float v2_1;
        if (x26 != 0)
        {
            v2_1 = (v0_1 * vcvth_f16_u16(x26));
        }
        if ((x26 == 0 || (x26 != 0 && !(v2_1 >= temp0_1))))
        {
            if (x26 < 3)
            {
                /* nop */
            }
            else if (((x26 - 1) & x26) != 0)
            {
                /* nop */
            }
            v0_1 = (temp0_1 / v0_1);
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::OrbbecInfo> > >::rehash(arg1);
            x26 = arg1[1];
            if (((x26 - 1) & x26) == 0)
            {
                arg4 = ((x26 - 1) & x0_1);
            }
            else if (x0_1 >= x26)
            {
                arg4 = (x0_1 % x26);
            }
            else
            {
                arg4 = x0_1;
            }
        }
        int64_t x9_8 = *arg1;
        void*** x8_19 = *(x9_8 + (arg4 << 3));
        void* x8_22;
        if (x8_19 == 0)
        {
            *x20_1 = arg1[2];
            arg1[2] = x20_1;
            *(x9_8 + (arg4 << 3)) = &arg1[2];
            x8_22 = *x20_1;
            if (x8_22 != 0)
            {
                int64_t x8_23 = *(x8_22 + 8);
                if (((x26 - 1) & x26) == 0)
                {
                    x8_23 = (x8_23 & (x26 - 1));
                }
                else if (x8_23 >= x26)
                {
                    x8_23 = (x8_23 % x26);
                }
                x8_19 = (*arg1 + (x8_23 << 3));
            }
        }
        else
        {
            *x20_1 = *x8_19;
        }
        if ((x8_19 != 0 || (x8_19 == 0 && x8_22 != 0)))
        {
            *x8_19 = x20_1;
        }
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int32_t sub_1b104(int64_t arg1, int128_t* arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    int64_t x0 = operator new(8);
    std::__ndk1::__thread_struct::__thread_struct();
    int64_t* x0_1;
    int128_t v0;
    x0_1 = operator new(0x38);
    int64_t x8_1 = arg2[2];
    int64_t x9 = *(arg2 + 0x19);
    int64_t x10 = arg2[1];
    v0 = *arg2;
    char x11 = *(arg2 + 0x18);
    __builtin_memset((arg2 + 0x18), 0, 0x18);
    int64_t x8_2 = *(arg2 + 0x28);
    x0_1[3] = x10;
    *x0_1 = x0;
    *(x0_1 + 8) = v0;
    x0_1[4] = x11;
    x0_1[5] = x8_1;
    x0_1[6] = x8_2;
    *(x0_1 + 0x21) = x9;
    int32_t x0_3 = pthread_create(arg1, 0, _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN4rgbd10RGBDOrbbecEFvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJPS9_RKSF_EEEEEEEEPvSN_, x0_1);
    if (x0_3 != 0)
    {
        std::__ndk1::__throw_system_error(x0_3, "thread constructor failed");
    }
    else if (*(x23 + 0x28) == x8)
    {
        return x0_3;
    }
    __stack_chk_fail();
    /* no return */
}

int64_t _ZNSt6__ndk114__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEENS_6__bindIMN4rgbd10RGBDOrbbecEFvNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEJPS9_RKSF_EEEEEEEEPvSN_(int64_t* arg1)
{
    int32_t* x0 = std::__ndk1::__thread_local_data();
    int64_t x1 = *arg1;
    *arg1 = 0;
    pthread_setspecific(*x0, x1);
    sub_1b314(&arg1[1], &arg1[3], &arg1[4]);
    if ((arg1[4] & 1) != 0)
    {
        operator delete(arg1[6]);
    }
    void* x20_1 = *arg1;
    *arg1 = 0;
    if (x20_1 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x20_1);
    }
    operator delete(arg1);
    return 0;
}

int64_t sub_1b2c8(int64_t arg1, void* arg2 @ x19)
{
    if (arg2 != 0)
    {
        if ((*(arg2 + 0x20) & 1) != 0)
        {
            operator delete(*(arg2 + 0x30));
        }
        void* x21_1 = *arg2;
        *arg2 = 0;
        if (x21_1 != 0)
        {
            std::__ndk1::__thread_struct::~__thread_struct();
            operator delete(x21_1);
        }
        operator delete(arg2);
    }
    int64_t* x0_5;
    int64_t* x1;
    char* x2;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return sub_1b314(x0_5, x1, x2);
}

int64_t sub_1b2d4(int64_t arg1, void* arg2 @ x19)
{
    if ((*(arg2 + 0x20) & 1) != 0)
    {
        operator delete(*(arg2 + 0x30));
    }
    void* x21 = *arg2;
    *arg2 = 0;
    if (x21 != 0)
    {
        std::__ndk1::__thread_struct::~__thread_struct();
        operator delete(x21);
    }
    operator delete(arg2);
    int64_t* x0_5;
    int64_t* x1;
    char* x2;
    x0_5 = _Unwind_Resume(arg1);
    /* tailcall */
    return sub_1b314(x0_5, x1, x2);
}

int64_t sub_1b314(int64_t* arg1, int64_t* arg2, char* arg3)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    int64_t x25 = *arg1;
    int64_t x9 = arg1[1];
    int64_t* x19 = (*arg2 + (x9 >> 1));
    if ((x9 & 1) != 0)
    {
        x25 = *(*x19 + x25);
    }
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    void* var_60;
    if ((*arg3 & 1) == 0)
    {
        var_60 = *(arg3 + 0x10);
        s = *arg3;
    }
    else
    {
        size_t x20_1 = *(arg3 + 8);
        if (x20_1 < -0x10)
        {
            int64_t x0_6 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_60);
            }
            int64_t* x0_9;
            char* x1_2;
            x0_9 = _Unwind_Resume(x0_6);
            /* tailcall */
            return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(x0_9, x1_2);
        }
        int64_t x21_1 = *(arg3 + 0x10);
        void* x22_1;
        if (x20_1 >= 0x17)
        {
            uint64_t x23_1 = ((x20_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x23_1);
            x22_1 = x0_1;
            size_t var_68_1 = x20_1;
            var_60 = x0_1;
            s = (x23_1 | 1);
        }
        else
        {
            x22_1 = (&s | 1);
            s = (x20_1 << 1);
        }
        if ((x20_1 >= 0x17 || (x20_1 < 0x17 && x20_1 != 0)))
        {
            memcpy(x22_1, x21_1, x20_1);
        }
        *(x22_1 + x20_1) = 0;
    }
    int64_t x0_4 = x25(x19, &s);
    if ((s & 1) != 0)
    {
        x0_4 = operator delete(var_60);
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_4;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::find<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(int64_t* arg1, char* arg2)
{
    void tpidr_el0;
    uint64_t x23 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x23 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x24 = arg1[1];
    int64_t* x8_4;
    void** i;
    if (x24 != 0)
    {
        int64_t x26_1 = ((x24 - 1) & x24);
        int64_t x27_1;
        if (x26_1 == 0)
        {
            x27_1 = ((x24 - 1) & x0_1);
        }
        else
        {
            x27_1 = x0_1;
            if (x0_1 >= x24)
            {
                x27_1 = (x0_1 % x24);
            }
        }
        x8_4 = *(*arg1 + (x27_1 << 3));
        if (x8_4 != 0)
        {
            i = *x8_4;
            if (i != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x21_1;
                if (temp1_1 == 0)
                {
                    x21_1 = (x8_5 >> 1);
                }
                else
                {
                    x21_1 = *(arg2 + 8);
                }
                void* x22_1;
                if (temp1_1 == 0)
                {
                    x22_1 = &arg2[1];
                }
                else
                {
                    x22_1 = *(arg2 + 0x10);
                }
                do
                {
                    int64_t x8_10 = i[1];
                    if (x8_10 == x0_1)
                    {
                        uint64_t x10_2 = i[2];
                        uint64_t x9_2 = (x10_2 >> 1);
                        uint64_t x11_3;
                        if ((x10_2 & 1) == 0)
                        {
                            x11_3 = x9_2;
                        }
                        else
                        {
                            x11_3 = i[3];
                        }
                        if (x11_3 == x21_1)
                        {
                            if ((x10_2 & 1) != 0)
                            {
                                if (x21_1 == 0)
                                {
                                    break;
                                }
                                if (memcmp() == 0)
                                {
                                    break;
                                }
                            }
                            else
                            {
                                if (x21_1 == 0)
                                {
                                    break;
                                }
                                void* x8_8 = (i + 0x11);
                                int64_t x9_3 = -(x9_2);
                                void* x10_3 = x22_1;
                                while (*x8_8 == *x10_3)
                                {
                                    x8_8 = (x8_8 + 1);
                                    int64_t temp2_1 = x9_3;
                                    x9_3 = (x9_3 + 1);
                                    x10_3 = (x10_3 + 1);
                                    if (temp2_1 == -1)
                                    {
                                        break;
                                    }
                                }
                                if (*x8_8 == *x10_3)
                                {
                                    break;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (x26_1 == 0)
                        {
                            x8_10 = (x8_10 & (x24 - 1));
                        }
                        if (((x26_1 == 0 || (x26_1 != 0 && x8_10 < x24)) && x8_10 != x27_1))
                        {
                            goto label_1b5c4;
                        }
                        if (((x26_1 != 0 && x8_10 >= x24) && (x8_10 % x24) != x27_1))
                        {
                            goto label_1b5c4;
                        }
                    }
                    i = *i;
                } while (i != 0);
            }
        }
    }
    if ((x24 == 0 || (x24 != 0 && x8_4 == 0)))
    {
    label_1b5c4:
        i = nullptr;
    }
    if (*(x23 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return i;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t* arg1, char* arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg4 @ x21)
{
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_28 = arg4;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void** var_80;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_80, x1);
    int64_t x28 = arg1[1];
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x20 = x0_1;
    int64_t* x8_4;
    void** x24_1;
    if (x28 != 0)
    {
        int64_t x13_1 = ((x28 - 1) & x28);
        if (x13_1 == 0)
        {
            arg4 = ((x28 - 1) & x20);
        }
        else
        {
            arg4 = x20;
            if (x20 >= x28)
            {
                arg4 = (x20 % x28);
            }
        }
        x8_4 = *(*arg1 + (arg4 << 3));
        if (x8_4 != 0)
        {
            int64_t x4;
            int64_t var_88_1 = x4;
            x24_1 = *x8_4;
            if (x24_1 != 0)
            {
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_90_1 = x20;
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x25_1;
                if (temp1_1 == 0)
                {
                    x25_1 = (x8_5 >> 1);
                }
                else
                {
                    x25_1 = *(arg2 + 8);
                }
                void* x26_1;
                if (temp1_1 == 0)
                {
                    x26_1 = &arg2[1];
                }
                else
                {
                    x26_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x24_1[1];
                    if (x8_7 != x20)
                    {
                        if (x13_1 == 0)
                        {
                            x8_7 = (x8_7 & (x28 - 1));
                        }
                        if (((x13_1 == 0 || (x13_1 != 0 && x8_7 < x28)) && x8_7 != arg4))
                        {
                            goto label_1b7c8;
                        }
                        if (((x13_1 != 0 && x8_7 >= x28) && (x8_7 % x28) != arg4))
                        {
                            goto label_1b7c8;
                        }
                    }
                    uint64_t x10_2 = x24_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x24_1[3];
                    }
                    if (x11_3 == x25_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x25_1 == 0)
                            {
                                break;
                            }
                            x20 = var_90_1;
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x25_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x24_1 + x9_5) + 0x11) == *(x26_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x24_1 + x9_5) + 0x11) == *(x26_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x24_1 = *x24_1;
                    if (x24_1 == 0)
                    {
                        goto label_1b7c8;
                    }
                }
            }
        }
    }
    if (((x28 == 0 || (x28 != 0 && x8_4 == 0)) || ((x28 != 0 && x8_4 != 0) && x24_1 == 0)))
    {
    label_1b7c8:
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, x20, arg3);
        float v0_1 = arg1[4];
        float temp0_1 = vcvth_f16_u16((arg1[3] + 1));
        float v2_1;
        if (x28 != 0)
        {
            v2_1 = (v0_1 * vcvth_f16_u16(x28));
        }
        if ((x28 == 0 || (x28 != 0 && !(v2_1 >= temp0_1))))
        {
            if (x28 < 3)
            {
                /* nop */
            }
            else if (((x28 - 1) & x28) != 0)
            {
                /* nop */
            }
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::rehash(arg1);
            x28 = arg1[1];
            if (((x28 - 1) & x28) == 0)
            {
                arg4 = ((x28 - 1) & x20);
            }
            else if (x20 >= x28)
            {
                arg4 = (x20 % x28);
            }
            else
            {
                arg4 = x20;
            }
        }
        void*** x8_16 = *(*arg1 + (arg4 << 3));
        if (x8_16 != 0)
        {
            *var_80 = *x8_16;
            *x8_16 = var_80;
        }
        else
        {
            *var_80 = arg1[2];
            arg1[2] = var_80;
            *(*arg1 + (arg4 << 3)) = &arg1[2];
            void** x8_19 = var_80;
            void* x9_13 = *x8_19;
            if (x9_13 != 0)
            {
                int64_t x9_14 = *(x9_13 + 8);
                if (((x28 - 1) & x28) == 0)
                {
                    x9_14 = (x9_14 & (x28 - 1));
                }
                else if (x9_14 >= x28)
                {
                    x9_14 = (x9_14 % x28);
                }
                *(*arg1 + (x9_14 << 3)) = x8_19;
            }
        }
        x24_1 = var_80;
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x24_1;
}

int64_t* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, pudutech::RGBD_INFO> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t* arg5 @ x8)
{
    void* x0;
    int128_t v0;
    x0 = operator new(0x80);
    *arg5 = x0;
    arg5[1] = (arg1 + 0x10);
    arg5[2] = 0;
    char* x8 = *arg4;
    int64_t* x0_1 = (x0 + 0x10);
    *x0_1 = 0;
    *(x0 + 0x18) = 0;
    *(x0 + 0x20) = 0;
    if ((*x8 & 1) == 0)
    {
        v0 = *x8;
        x0_1[2] = *(x8 + 0x10);
        *x0_1 = v0;
    }
    else
    {
        size_t x22_1 = *(x8 + 8);
        if (x22_1 < -0x10)
        {
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            *arg5 = 0;
            operator delete(x0);
            int64_t* x0_8;
            char* x1_1;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x2_1;
            x0_8 = _Unwind_Resume(x0_5);
            /* tailcall */
            return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(x0_8, x1_1, x2_1, x0_5);
        }
        int64_t x23_1 = *(x8 + 0x10);
        void* x24_1;
        if (x22_1 >= 0x17)
        {
            uint64_t x25_1 = ((x22_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x25_1);
            x24_1 = x0_3;
            *(x0 + 0x18) = x22_1;
            *(x0 + 0x20) = x0_3;
            *(x0 + 0x10) = (x25_1 | 1);
        }
        else
        {
            x24_1 = (x0 + 0x11);
            *(x0 + 0x10) = (x22_1 << 1);
        }
        if ((x22_1 >= 0x17 || (x22_1 < 0x17 && x22_1 != 0)))
        {
            x0_1 = memcpy(x24_1, x23_1, x22_1);
        }
        *(x24_1 + x22_1) = 0;
    }
    int64_t* x8_4 = *arg5;
    __builtin_memset((x0 + 0x68), 0, 0x18);
    arg5[2] = 1;
    *x8_4 = 0;
    x8_4[1] = arg2;
    return x0_1;
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t* arg1, char* arg2, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* arg3, std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** arg4 @ x21)
{
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_28 = arg4;
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x26 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void** var_80;
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_80, x1);
    int64_t x28 = arg1[1];
    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x20 = x0_1;
    int64_t* x8_4;
    void** x24_1;
    if (x28 != 0)
    {
        int64_t x13_1 = ((x28 - 1) & x28);
        if (x13_1 == 0)
        {
            arg4 = ((x28 - 1) & x20);
        }
        else
        {
            arg4 = x20;
            if (x20 >= x28)
            {
                arg4 = (x20 % x28);
            }
        }
        x8_4 = *(*arg1 + (arg4 << 3));
        if (x8_4 != 0)
        {
            int64_t x4;
            int64_t var_88_1 = x4;
            x24_1 = *x8_4;
            if (x24_1 != 0)
            {
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** var_90_1 = x20;
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x25_1;
                if (temp1_1 == 0)
                {
                    x25_1 = (x8_5 >> 1);
                }
                else
                {
                    x25_1 = *(arg2 + 8);
                }
                void* x26_1;
                if (temp1_1 == 0)
                {
                    x26_1 = &arg2[1];
                }
                else
                {
                    x26_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x24_1[1];
                    if (x8_7 != x20)
                    {
                        if (x13_1 == 0)
                        {
                            x8_7 = (x8_7 & (x28 - 1));
                        }
                        if (((x13_1 == 0 || (x13_1 != 0 && x8_7 < x28)) && x8_7 != arg4))
                        {
                            goto label_1bc54;
                        }
                        if (((x13_1 != 0 && x8_7 >= x28) && (x8_7 % x28) != arg4))
                        {
                            goto label_1bc54;
                        }
                    }
                    uint64_t x10_2 = x24_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x24_1[3];
                    }
                    if (x11_3 == x25_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x25_1 == 0)
                            {
                                break;
                            }
                            x20 = var_90_1;
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x25_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x24_1 + x9_5) + 0x11) == *(x26_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x24_1 + x9_5) + 0x11) == *(x26_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x24_1 = *x24_1;
                    if (x24_1 == 0)
                    {
                        goto label_1bc54;
                    }
                }
            }
        }
    }
    if (((x28 == 0 || (x28 != 0 && x8_4 == 0)) || ((x28 != 0 && x8_4 != 0) && x24_1 == 0)))
    {
    label_1bc54:
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(arg1, x20, arg3);
        float v0_1 = arg1[4];
        float temp0_1 = vcvth_f16_u16((arg1[3] + 1));
        float v2_1;
        if (x28 != 0)
        {
            v2_1 = (v0_1 * vcvth_f16_u16(x28));
        }
        if ((x28 == 0 || (x28 != 0 && !(v2_1 >= temp0_1))))
        {
            if (x28 < 3)
            {
                /* nop */
            }
            else if (((x28 - 1) & x28) != 0)
            {
                /* nop */
            }
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::rehash(arg1);
            x28 = arg1[1];
            if (((x28 - 1) & x28) == 0)
            {
                arg4 = ((x28 - 1) & x20);
            }
            else if (x20 >= x28)
            {
                arg4 = (x20 % x28);
            }
            else
            {
                arg4 = x20;
            }
        }
        void*** x8_16 = *(*arg1 + (arg4 << 3));
        if (x8_16 != 0)
        {
            *var_80 = *x8_16;
            *x8_16 = var_80;
        }
        else
        {
            *var_80 = arg1[2];
            arg1[2] = var_80;
            *(*arg1 + (arg4 << 3)) = &arg1[2];
            void** x8_19 = var_80;
            void* x9_13 = *x8_19;
            if (x9_13 != 0)
            {
                int64_t x9_14 = *(x9_13 + 8);
                if (((x28 - 1) & x28) == 0)
                {
                    x9_14 = (x9_14 & (x28 - 1));
                }
                else if (x9_14 >= x28)
                {
                    x9_14 = (x9_14 % x28);
                }
                *(*arg1 + (x9_14 << 3)) = x8_19;
            }
        }
        x24_1 = var_80;
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x26 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x24_1;
}

int64_t* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__construct_node_hash<std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const&>, std::__ndk1::tuple<> >(int64_t arg1, int64_t arg2, int64_t arg3, int64_t* arg4, int64_t* arg5 @ x8)
{
    void* x0;
    int128_t v0;
    x0 = operator new(0x100);
    *arg5 = x0;
    arg5[1] = (arg1 + 0x10);
    arg5[2] = 0;
    char* x8 = *arg4;
    int64_t* x0_1 = (x0 + 0x10);
    *x0_1 = 0;
    *(x0 + 0x18) = 0;
    *(x0 + 0x20) = 0;
    if ((*x8 & 1) == 0)
    {
        v0 = *x8;
        x0_1[2] = *(x8 + 0x10);
        *x0_1 = v0;
    }
    else
    {
        size_t x22_1 = *(x8 + 8);
        if (x22_1 < -0x10)
        {
            int64_t x0_5 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            *arg5 = 0;
            operator delete(x0);
            uint64_t x0_8;
            uint64_t x1_1;
            x0_8 = _Unwind_Resume(x0_5);
            /* tailcall */
            return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::rehash(x0_8, x1_1);
        }
        int64_t x23_1 = *(x8 + 0x10);
        void* x24_1;
        if (x22_1 >= 0x17)
        {
            uint64_t x25_1 = ((x22_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x25_1);
            x24_1 = x0_3;
            *(x0 + 0x18) = x22_1;
            *(x0 + 0x20) = x0_3;
            *(x0 + 0x10) = (x25_1 | 1);
        }
        else
        {
            x24_1 = (x0 + 0x11);
            *(x0 + 0x10) = (x22_1 << 1);
        }
        if ((x22_1 >= 0x17 || (x22_1 < 0x17 && x22_1 != 0)))
        {
            x0_1 = memcpy(x24_1, x23_1, x22_1);
        }
        *(x24_1 + x22_1) = 0;
    }
    arg5[2] = 1;
    int64_t* x8_4 = *arg5;
    __builtin_memset((x0 + 0x30), 0, 0xd0);
    *x8_4 = 0;
    x8_4[1] = arg2;
    return x0_1;
}

void std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::rehash(uint64_t arg1, uint64_t arg2)
{
    uint64_t x19 = arg1;
    uint64_t x20;
    if (arg2 == 1)
    {
        x20 = 2;
    }
    else
    {
        x20 = arg2;
        if (((arg2 - 1) & arg2) != 0)
        {
            arg1 = std::__ndk1::__next_prime(x20);
            x20 = arg1;
        }
    }
    int64_t x21 = *(x19 + 8);
    uint64_t x0_1;
    if (x20 > x21)
    {
        x0_1 = x19;
    }
    else
    {
        uint64_t x1_2;
        if (x20 < x21)
        {
            int32_t x8_3;
            if (x21 < 3)
            {
                x8_3 = 0;
            }
            else if (((x21 - 1) & x21) == 0)
            {
                x8_3 = 1;
            }
            else
            {
                x8_3 = 0;
            }
            *(x19 + 0x20);
            vcvth_f16_u16(*(x19 + 0x18));
            /* unimplemented  {fcvtpu x0, s0} */;
            if (x8_3 == 0)
            {
                arg1 = std::__ndk1::__next_prime(arg1);
            }
            else if (arg1 >= 2)
            {
                arg1 = (1 << -(_CountLeadingZeros((arg1 - 1))));
            }
            if (x20 < arg1)
            {
                x1_2 = arg1;
            }
            else
            {
                x1_2 = x20;
            }
        }
        if ((x20 >= x21 || (x20 < x21 && x1_2 >= x21)))
        {
            return;
        }
        if ((x20 < x21 && x1_2 < x21))
        {
            x0_1 = x19;
        }
    }
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__rehash(x0_1);
}

void* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__rehash(int64_t* arg1, int64_t arg2)
{
    int64_t* x19 = arg1;
    void* x0_1;
    if (arg2 == 0)
    {
        x0_1 = *x19;
        *x19 = 0;
        if (x0_1 != 0)
        {
            x0_1 = operator delete(x0_1);
        }
        x19[1] = 0;
    }
    else
    {
        int64_t x20_1 = arg2;
        if ((arg2 >> 0x3d) != 0)
        {
            sub_17a70();
            /* no return */
        }
        x0_1 = operator new((x20_1 << 3));
        void* x8_2 = *x19;
        *x19 = x0_1;
        if (x8_2 != 0)
        {
            x0_1 = operator delete(x8_2);
        }
        int64_t x8_3 = 0;
        x19[1] = x20_1;
        do
        {
            *(*x19 + (x8_3 << 3)) = 0;
            x8_3 = (x8_3 + 1);
        } while (x20_1 != x8_3);
        int64_t* i_2 = x19[2];
        if (i_2 != 0)
        {
            int64_t x28_1 = i_2[1];
            int64_t x25_1 = (x20_1 - 1);
            int64_t x14_1 = (x25_1 & x20_1);
            if (x14_1 == 0)
            {
                x28_1 = (x28_1 & x25_1);
            }
            else if (x28_1 >= x20_1)
            {
                x28_1 = (x28_1 % x20_1);
            }
            *(*x19 + (x28_1 << 3)) = &x19[2];
            int64_t* i = *i_2;
            if (i != 0)
            {
                int64_t* var_78_1 = x19;
                int64_t var_70_1 = x20_1;
                int64_t var_80_1 = x14_1;
                do
                {
                    int64_t x27_1 = i[1];
                    if (x14_1 == 0)
                    {
                        x27_1 = (x27_1 & x25_1);
                    }
                    else if (x27_1 >= x20_1)
                    {
                        x27_1 = (x27_1 % x20_1);
                    }
                    if (((x14_1 == 0 && x27_1 == x28_1) || (x14_1 != 0 && x27_1 == x28_1)))
                    {
                        i_2 = i;
                    }
                    if (((x14_1 == 0 && x27_1 != x28_1) || (x14_1 != 0 && x27_1 != x28_1)))
                    {
                        int64_t x8_7 = *x19;
                        if (*(x8_7 + (x27_1 << 3)) == 0)
                        {
                            *(x8_7 + (x27_1 << 3)) = i_2;
                            i_2 = i;
                            x28_1 = x27_1;
                        }
                        else
                        {
                            int64_t* j = *i;
                            int64_t* i_1 = i;
                            if (j != 0)
                            {
                                uint64_t x16_1 = i[2];
                                void* x17_1 = (i + 0x11);
                                int64_t* x26_1 = i;
                                uint64_t x10_1 = (x16_1 >> 1);
                                uint64_t x21_1;
                                if ((x16_1 & 1) == 0)
                                {
                                    x21_1 = x10_1;
                                }
                                else
                                {
                                    x21_1 = i[3];
                                }
                                int64_t x2_1 = -(x10_1);
                                int64_t var_68_1 = x2_1;
                                do
                                {
                                    i_1 = x26_1;
                                    x26_1 = j;
                                    uint64_t x9_6 = j[2];
                                    uint64_t x10_3;
                                    if ((x9_6 & 1) == 0)
                                    {
                                        x10_3 = (x9_6 >> 1);
                                    }
                                    else
                                    {
                                        x10_3 = j[3];
                                    }
                                    if (x21_1 != x10_3)
                                    {
                                        break;
                                    }
                                    if ((x16_1 & 1) == 0)
                                    {
                                        x0_1 = x17_1;
                                    }
                                    else
                                    {
                                        x0_1 = i[4];
                                    }
                                    void* x1;
                                    if ((x9_6 & 1) != 0)
                                    {
                                        x1 = x26_1[4];
                                    }
                                    else
                                    {
                                        x1 = (j + 0x11);
                                    }
                                    if ((x16_1 & 1) == 0)
                                    {
                                        int64_t x8_9 = x2_1;
                                        void* x9_7 = x17_1;
                                        if (x21_1 != 0)
                                        {
                                            while (*x9_7 == *x1)
                                            {
                                                x9_7 = (x9_7 + 1);
                                                int64_t temp0_1 = x8_9;
                                                x8_9 = (x8_9 + 1);
                                                x1 = (x1 + 1);
                                                if (temp0_1 == -1)
                                                {
                                                    break;
                                                }
                                            }
                                            if (*x9_7 != *x1)
                                            {
                                                break;
                                            }
                                        }
                                    }
                                    else if (x21_1 != 0)
                                    {
                                        x0_1 = memcmp();
                                        x14_1 = var_80_1;
                                        x19 = var_78_1;
                                        x20_1 = var_70_1;
                                        x2_1 = var_68_1;
                                        if (x0_1 != 0)
                                        {
                                            break;
                                        }
                                    }
                                    j = *x26_1;
                                    i_1 = x26_1;
                                } while (j != 0);
                            }
                            int64_t x9_8 = (x27_1 << 3);
                            *i_2 = *i_1;
                            *i_1 = **(*x19 + x9_8);
                            **(*x19 + x9_8) = i;
                        }
                    }
                    i = *i_2;
                } while (i != 0);
            }
        }
    }
    return x0_1;
}

int64_t* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation const&>, std::__ndk1::tuple<> >(int64_t* arg1, int32_t* arg2, int64_t arg3, int64_t* arg4, int64_t arg5 @ x24)
{
    int64_t var_40 = arg5;
    int64_t x22 = arg1[1];
    int64_t x23 = *arg2;
    if (x22 != 0)
    {
        int64_t x9_1 = ((x22 - 1) & x22);
        if (x9_1 == 0)
        {
            arg5 = ((x22 - 1) & x23);
        }
        else
        {
            arg5 = x23;
            if (x22 <= x23)
            {
                arg5 = (x23 % x22);
            }
        }
        int64_t* x20_1 = *(*arg1 + (arg5 << 3));
        if (x20_1 != 0)
        {
            while (true)
            {
                x20_1 = *x20_1;
                if (x20_1 == 0)
                {
                    break;
                }
                int64_t x10_3 = x20_1[1];
                if (x10_3 != x23)
                {
                    if (x9_1 == 0)
                    {
                        x10_3 = (x10_3 & (x22 - 1));
                    }
                    if (((x9_1 == 0 || (x9_1 != 0 && x10_3 < x22)) && x10_3 != arg5))
                    {
                        break;
                    }
                    if (((x9_1 != 0 && x10_3 >= x22) && (x10_3 % x22) != arg5))
                    {
                        break;
                    }
                }
                if (x20_1[2] == x23)
                {
                    return x20_1;
                }
            }
        }
    }
    int64_t* x0 = operator new(0x30);
    int32_t x8_3 = **arg4;
    x0[4] = 0;
    x0[5] = 0;
    x0[2] = x8_3;
    x0[3] = 0;
    *x0 = 0;
    x0[1] = x23;
    float v0_1 = arg1[4];
    float v1_1 = vcvth_f16_u16((arg1[3] + 1));
    float v2_1;
    if (x22 != 0)
    {
        v2_1 = (v0_1 * vcvth_f16_u16(x22));
    }
    if ((x22 == 0 || (x22 != 0 && !(v2_1 >= v1_1))))
    {
        if (x22 < 3)
        {
            /* nop */
        }
        else if (((x22 - 1) & x22) != 0)
        {
            /* nop */
        }
        /* unimplemented  {fcvtpu x9, s0} */;
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::rehash(arg1);
        x22 = arg1[1];
        if (((x22 - 1) & x22) == 0)
        {
            arg5 = ((x22 - 1) & x23);
        }
        else if (x22 <= x23)
        {
            arg5 = (x23 % x22);
        }
        else
        {
            arg5 = x23;
        }
    }
    int64_t x9_4 = *arg1;
    int64_t** x8_10 = *(x9_4 + (arg5 << 3));
    void* x8_13;
    if (x8_10 == 0)
    {
        *x0 = arg1[2];
        arg1[2] = x0;
        *(x9_4 + (arg5 << 3)) = &arg1[2];
        x8_13 = *x0;
        if (x8_13 != 0)
        {
            int64_t x8_14 = *(x8_13 + 8);
            if (((x22 - 1) & x22) == 0)
            {
                x8_14 = (x8_14 & (x22 - 1));
            }
            else if (x8_14 >= x22)
            {
                x8_14 = (x8_14 % x22);
            }
            x8_10 = (*arg1 + (x8_14 << 3));
        }
    }
    else
    {
        *x0 = *x8_10;
    }
    if ((x8_10 != 0 || (x8_10 == 0 && x8_13 != 0)))
    {
        *x8_10 = x0;
    }
    arg1[3] = (arg1[3] + 1);
    return x0;
}

int64_t sub_1c45c(int64_t arg1, void* arg2 @ x20, char* arg3 @ x21)
{
    if ((*arg3 & 1) != 0)
    {
        operator delete(*(arg2 + 0x28));
    }
    operator delete(arg2);
    uint64_t x0_3;
    uint64_t x1;
    x0_3 = _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::rehash(x0_3, x1);
}

void std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::rehash(uint64_t arg1, uint64_t arg2)
{
    uint64_t x19 = arg1;
    uint64_t x20;
    if (arg2 == 1)
    {
        x20 = 2;
    }
    else
    {
        x20 = arg2;
        if (((arg2 - 1) & arg2) != 0)
        {
            arg1 = std::__ndk1::__next_prime(x20);
            x20 = arg1;
        }
    }
    int64_t x21 = *(x19 + 8);
    uint64_t x0_1;
    if (x20 > x21)
    {
        x0_1 = x19;
    }
    else
    {
        uint64_t x1_2;
        if (x20 < x21)
        {
            int32_t x8_3;
            if (x21 < 3)
            {
                x8_3 = 0;
            }
            else if (((x21 - 1) & x21) == 0)
            {
                x8_3 = 1;
            }
            else
            {
                x8_3 = 0;
            }
            *(x19 + 0x20);
            vcvth_f16_u16(*(x19 + 0x18));
            /* unimplemented  {fcvtpu x0, s0} */;
            if (x8_3 == 0)
            {
                arg1 = std::__ndk1::__next_prime(arg1);
            }
            else if (arg1 >= 2)
            {
                arg1 = (1 << -(_CountLeadingZeros((arg1 - 1))));
            }
            if (x20 < arg1)
            {
                x1_2 = arg1;
            }
            else
            {
                x1_2 = x20;
            }
        }
        if ((x20 >= x21 || (x20 < x21 && x1_2 >= x21)))
        {
            return;
        }
        if ((x20 < x21 && x1_2 < x21))
        {
            x0_1 = x19;
        }
    }
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__rehash(x0_1);
}

void* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__rehash(int64_t* arg1, int64_t arg2)
{
    void* x0_1;
    if (arg2 == 0)
    {
        x0_1 = *arg1;
        *arg1 = 0;
        if (x0_1 != 0)
        {
            x0_1 = operator delete(x0_1);
        }
        arg1[1] = 0;
    }
    else
    {
        if ((arg2 >> 0x3d) != 0)
        {
            sub_17a70();
            /* no return */
        }
        x0_1 = operator new((arg2 << 3));
        void* x8_2 = *arg1;
        *arg1 = x0_1;
        if (x8_2 != 0)
        {
            x0_1 = operator delete(x8_2);
        }
        int64_t x8_3 = 0;
        arg1[1] = arg2;
        do
        {
            *(*arg1 + (x8_3 << 3)) = 0;
            x8_3 = (x8_3 + 1);
        } while (arg2 != x8_3);
        int64_t* x8_4 = arg1[2];
        if (x8_4 != 0)
        {
            int64_t x11_1 = x8_4[1];
            int64_t x10_1 = ((arg2 - 1) & arg2);
            if (x10_1 == 0)
            {
                x11_1 = (x11_1 & (arg2 - 1));
            }
            else if (x11_1 >= arg2)
            {
                x11_1 = (x11_1 % arg2);
            }
            *(*arg1 + (x11_1 << 3)) = &arg1[2];
            int64_t* x12_3 = *x8_4;
            if (x12_3 != 0)
            {
                while (true)
                {
                    int64_t x13_3 = x12_3[1];
                    if (x10_1 == 0)
                    {
                        x13_3 = (x13_3 & (arg2 - 1));
                    }
                    else if (x13_3 >= arg2)
                    {
                        x13_3 = (x13_3 % arg2);
                    }
                    if (((x10_1 == 0 && x13_3 == x11_1) || (x10_1 != 0 && x13_3 == x11_1)))
                    {
                        x8_4 = x12_3;
                        x12_3 = *x8_4;
                        if (x12_3 == 0)
                        {
                            break;
                        }
                        continue;
                    }
                    if (((x10_1 == 0 && x13_3 != x11_1) || (x10_1 != 0 && x13_3 != x11_1)))
                    {
                        int64_t x14_2 = *arg1;
                        int64_t* x15_1 = x12_3;
                        if (*(x14_2 + (x13_3 << 3)) == 0)
                        {
                            *(x14_2 + (x13_3 << 3)) = x8_4;
                            x8_4 = x12_3;
                            x11_1 = x13_3;
                            x12_3 = *x8_4;
                            if (x12_3 == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            int64_t* x14_3;
                            do
                            {
                                x14_3 = x15_1;
                                x15_1 = *x15_1;
                                if (x15_1 == 0)
                                {
                                    break;
                                }
                            } while (x12_3[2] == x15_1[2]);
                            *x8_4 = x15_1;
                            int64_t x13_4 = (x13_3 << 3);
                            *x14_3 = **(*arg1 + x13_4);
                            **(*arg1 + x13_4) = x12_3;
                            x12_3 = *x8_4;
                            if (x12_3 == 0)
                            {
                                break;
                            }
                        }
                    }
                }
            }
        }
    }
    return x0_1;
}

int64_t* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::pair<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >(int64_t* arg1, int32_t* arg2, int32_t* arg3, int64_t arg4 @ x24)
{
    int64_t var_40 = arg4;
    int64_t x22 = arg1[1];
    int64_t x23 = *arg2;
    if (x22 != 0)
    {
        int64_t x9_1 = ((x22 - 1) & x22);
        if (x9_1 == 0)
        {
            arg4 = ((x22 - 1) & x23);
        }
        else
        {
            arg4 = x23;
            if (x22 <= x23)
            {
                arg4 = (x23 % x22);
            }
        }
        int64_t* x20_1 = *(*arg1 + (arg4 << 3));
        if (x20_1 != 0)
        {
            while (true)
            {
                x20_1 = *x20_1;
                if (x20_1 == 0)
                {
                    break;
                }
                int64_t x10_3 = x20_1[1];
                if (x10_3 != x23)
                {
                    if (x9_1 == 0)
                    {
                        x10_3 = (x10_3 & (x22 - 1));
                    }
                    if (((x9_1 == 0 || (x9_1 != 0 && x10_3 < x22)) && x10_3 != arg4))
                    {
                        break;
                    }
                    if (((x9_1 != 0 && x10_3 >= x22) && (x10_3 % x22) != arg4))
                    {
                        break;
                    }
                }
                if (x20_1[2] == x23)
                {
                    return x20_1;
                }
            }
        }
    }
    int64_t* x0;
    int128_t v0_1;
    x0 = operator new(0x30);
    x0[2] = *arg3;
    v0_1 = *(arg3 + 8);
    x0[5] = *(arg3 + 0x18);
    *(x0 + 0x18) = v0_1;
    __builtin_memset(&arg3[2], 0, 0x18);
    *x0 = 0;
    x0[1] = x23;
    v0_1 = arg1[4];
    int32_t v1_1 = vcvth_f16_u16((arg1[3] + 1));
    float v2_1;
    if (x22 != 0)
    {
        v2_1 = (v0_1 * vcvth_f16_u16(x22));
    }
    if ((x22 == 0 || (x22 != 0 && !(v2_1 >= v1_1))))
    {
        if (x22 < 3)
        {
            /* nop */
        }
        else if (((x22 - 1) & x22) != 0)
        {
            /* nop */
        }
        v0_1 = (v1_1 / v0_1);
        /* unimplemented  {fcvtpu x9, s0} */;
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::rehash(arg1);
        x22 = arg1[1];
        if (((x22 - 1) & x22) == 0)
        {
            arg4 = ((x22 - 1) & x23);
        }
        else if (x22 <= x23)
        {
            arg4 = (x23 % x22);
        }
        else
        {
            arg4 = x23;
        }
    }
    int64_t x9_4 = *arg1;
    int64_t** x8_10 = *(x9_4 + (arg4 << 3));
    void* x8_13;
    if (x8_10 == 0)
    {
        *x0 = arg1[2];
        arg1[2] = x0;
        *(x9_4 + (arg4 << 3)) = &arg1[2];
        x8_13 = *x0;
        if (x8_13 != 0)
        {
            int64_t x8_14 = *(x8_13 + 8);
            if (((x22 - 1) & x22) == 0)
            {
                x8_14 = (x8_14 & (x22 - 1));
            }
            else if (x8_14 >= x22)
            {
                x8_14 = (x8_14 % x22);
            }
            x8_10 = (*arg1 + (x8_14 << 3));
        }
    }
    else
    {
        *x0 = *x8_10;
    }
    if ((x8_10 != 0 || (x8_10 == 0 && x8_13 != 0)))
    {
        *x8_10 = x0;
    }
    arg1[3] = (arg1[3] + 1);
    return x0;
}

int64_t sub_1c8e8(int64_t arg1, void* arg2 @ x20, char* arg3 @ x21)
{
    if ((*arg3 & 1) != 0)
    {
        operator delete(*(arg2 + 0x28));
    }
    operator delete(arg2);
    int64_t* x0_3;
    char* x1;
    int128_t* x2;
    x0_3 = _Unwind_Resume(arg1);
    int64_t x27;
    /* tailcall */
    return std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> >(x0_3, x1, x2, x27);
}

void** std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::__emplace_unique_key_args<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> >(int64_t* arg1, char* arg2, int128_t* arg3, int64_t arg4 @ x27)
{
    int64_t var_58 = arg4;
    void tpidr_el0;
    uint64_t x25 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x25 + 0x28);
    *(arg2 + 8);
    void* x1;
    if ((*arg2 & 1) != 0)
    {
        x1 = *(arg2 + 0x10);
    }
    else
    {
        x1 = &arg2[1];
    }
    void var_70;
    int64_t x0_1 = std::__ndk1::__murmur2_or_cityhash<uint64_t, 64ul>::operator()(&var_70, x1);
    int64_t x26 = arg1[1];
    int64_t* x8_4;
    void** x20_1;
    if (x26 != 0)
    {
        int64_t x25_1 = ((x26 - 1) & x26);
        if (x25_1 == 0)
        {
            arg4 = ((x26 - 1) & x0_1);
        }
        else
        {
            arg4 = x0_1;
            if (x0_1 >= x26)
            {
                arg4 = (x0_1 % x26);
            }
        }
        x8_4 = *(*arg1 + (arg4 << 3));
        if (x8_4 != 0)
        {
            x20_1 = *x8_4;
            if (x20_1 != 0)
            {
                uint64_t x8_5 = *arg2;
                int32_t temp1_1 = (x8_5 & 1);
                uint64_t x23_1;
                if (temp1_1 == 0)
                {
                    x23_1 = (x8_5 >> 1);
                }
                else
                {
                    x23_1 = *(arg2 + 8);
                }
                void* x24_1;
                if (temp1_1 == 0)
                {
                    x24_1 = &arg2[1];
                }
                else
                {
                    x24_1 = *(arg2 + 0x10);
                }
                while (true)
                {
                    int64_t x8_7 = x20_1[1];
                    if (x8_7 != x0_1)
                    {
                        if (x25_1 == 0)
                        {
                            x8_7 = (x8_7 & (x26 - 1));
                        }
                        if (((x25_1 == 0 || (x25_1 != 0 && x8_7 < x26)) && x8_7 != arg4))
                        {
                            goto label_1ca88;
                        }
                        if (((x25_1 != 0 && x8_7 >= x26) && (x8_7 % x26) != arg4))
                        {
                            goto label_1ca88;
                        }
                    }
                    uint64_t x10_2 = x20_1[2];
                    uint64_t x8_8 = (x10_2 >> 1);
                    uint64_t x11_3;
                    if ((x10_2 & 1) == 0)
                    {
                        x11_3 = x8_8;
                    }
                    else
                    {
                        x11_3 = x20_1[3];
                    }
                    if (x11_3 == x23_1)
                    {
                        if ((x10_2 & 1) != 0)
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            if (memcmp() == 0)
                            {
                                break;
                            }
                        }
                        else
                        {
                            if (x23_1 == 0)
                            {
                                break;
                            }
                            int64_t x9_5 = 0;
                            while (*((x20_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                x9_5 = (x9_5 + 1);
                                if (x8_8 == x9_5)
                                {
                                    break;
                                }
                            }
                            if (*((x20_1 + x9_5) + 0x11) == *(x24_1 + x9_5))
                            {
                                break;
                            }
                        }
                    }
                    x20_1 = *x20_1;
                    if (x20_1 == 0)
                    {
                        goto label_1ca88;
                    }
                }
            }
        }
    }
    if (((x26 == 0 || (x26 != 0 && x8_4 == 0)) || ((x26 != 0 && x8_4 != 0) && x20_1 == 0)))
    {
    label_1ca88:
        void** x0_3;
        int128_t v0_1;
        x0_3 = operator new(0x100);
        v0_1 = *arg3;
        x20_1 = x0_3;
        x0_3[4] = arg3[1];
        *(x0_3 + 0x10) = v0_1;
        __builtin_memset(arg3, 0, 0x18);
        rgbd::RGBDParam::RGBDParam(&x0_3[6]);
        *x20_1 = nullptr;
        x20_1[1] = x0_1;
        float v0_2 = arg1[4];
        float temp0_1 = vcvth_f16_u16((arg1[3] + 1));
        float v2_1;
        if (x26 != 0)
        {
            v2_1 = (v0_2 * vcvth_f16_u16(x26));
        }
        if ((x26 == 0 || (x26 != 0 && !(v2_1 >= temp0_1))))
        {
            if (x26 < 3)
            {
                /* nop */
            }
            else if (((x26 - 1) & x26) != 0)
            {
                /* nop */
            }
            /* unimplemented  {fcvtpu x9, s0} */;
            std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::__unordered_map_hasher<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::hash<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::__unordered_map_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam>, std::__ndk1::equal_to<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::RGBDParam> > >::rehash(arg1);
            x26 = arg1[1];
            if (((x26 - 1) & x26) == 0)
            {
                arg4 = ((x26 - 1) & x0_1);
            }
            else if (x0_1 >= x26)
            {
                arg4 = (x0_1 % x26);
            }
            else
            {
                arg4 = x0_1;
            }
        }
        int64_t x9_8 = *arg1;
        void*** x8_16 = *(x9_8 + (arg4 << 3));
        void* x8_19;
        if (x8_16 == 0)
        {
            *x20_1 = arg1[2];
            arg1[2] = x20_1;
            *(x9_8 + (arg4 << 3)) = &arg1[2];
            x8_19 = *x20_1;
            if (x8_19 != 0)
            {
                int64_t x8_20 = *(x8_19 + 8);
                if (((x26 - 1) & x26) == 0)
                {
                    x8_20 = (x8_20 & (x26 - 1));
                }
                else if (x8_20 >= x26)
                {
                    x8_20 = (x8_20 % x26);
                }
                x8_16 = (*arg1 + (x8_20 << 3));
            }
        }
        else
        {
            *x20_1 = *x8_16;
        }
        if ((x8_16 != 0 || (x8_16 == 0 && x8_19 != 0)))
        {
            *x8_16 = x20_1;
        }
        arg1[3] = (arg1[3] + 1);
    }
    if (*(x25 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x20_1;
}

int64_t std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__erase_unique<rgbd::RgbdLocation>(int64_t* arg1, int32_t* arg2)
{
    void tpidr_el0;
    uint64_t x20 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x20 + 0x28);
    int64_t x8_1 = arg1[1];
    int64_t x0;
    if (x8_1 == 0)
    {
    label_1cd00:
        x0 = 0;
    }
    else
    {
        int64_t x9_1 = *arg2;
        int64_t x11_1 = ((x8_1 - 1) & x8_1);
        int64_t x12_1;
        if (x11_1 == 0)
        {
            x12_1 = ((x8_1 - 1) & x9_1);
        }
        else
        {
            x12_1 = x9_1;
            if (x8_1 <= x9_1)
            {
                x12_1 = (x9_1 % x8_1);
            }
        }
        int64_t* x13_2 = *(*arg1 + (x12_1 << 3));
        if (x13_2 == 0)
        {
            goto label_1cd00;
        }
        void** i = *x13_2;
        if (i == 0)
        {
            goto label_1cd00;
        }
        int64_t x13_5;
        do
        {
            x13_5 = i[1];
            if ((x13_5 == x9_1 && i[2] == x9_1))
            {
                break;
            }
            if (x13_5 != x9_1)
            {
                if (x11_1 == 0)
                {
                    x13_5 = (x13_5 & (x8_1 - 1));
                }
                if (((x11_1 == 0 || (x11_1 != 0 && x13_5 < x8_1)) && x13_5 != x12_1))
                {
                    break;
                }
                if (((x11_1 != 0 && x13_5 >= x8_1) && (x13_5 % x8_1) != x12_1))
                {
                    break;
                }
            }
            i = *i;
        } while (i != 0);
        if (!((x13_5 == x9_1 && i[2] == x9_1)))
        {
            goto label_1cd00;
        }
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::remove(arg1);
        int64_t var_40_1 = 0;
        void* var_40;
        if (var_40 != 0)
        {
            char var_30;
            if ((var_30 != 0 && (*(var_40 + 0x18) & 1) != 0))
            {
                operator delete(*(var_40 + 0x28));
            }
            operator delete(var_40);
        }
        x0 = 1;
    }
    if (*(x20 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

void std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::remove(int64_t* arg1, int64_t* arg2, void** arg3 @ x8)
{
    int64_t x15_2 = *arg1;
    int64_t x11_2 = arg1[1];
    int64_t x9 = arg2[1];
    int64_t x9_1;
    if (x9 < x11_2)
    {
        x9_1 = x9;
    }
    else
    {
        x9_1 = (x9 % x11_2);
    }
    int64_t x14 = ((x11_2 - 1) & x11_2);
    int64_t x12_1;
    if (x14 != 0)
    {
        x12_1 = x9_1;
    }
    else
    {
        x12_1 = ((x11_2 - 1) & x9);
    }
    int64_t* x9_2 = *(x15_2 + (x12_1 << 3));
    int64_t* x10_2;
    do
    {
        x10_2 = x9_2;
        x9_2 = *x9_2;
    } while (x9_2 != arg2);
    if (x10_2 != &arg1[2])
    {
        int64_t x16_1 = x10_2[1];
        if (x14 != 0)
        {
            if (x16_1 >= x11_2)
            {
                x16_1 = (x16_1 % x11_2);
            }
            if (x16_1 != x12_1)
            {
                goto label_1cdcc;
            }
        }
        else if ((x16_1 & (x11_2 - 1)) != x12_1)
        {
            goto label_1cdcc;
        }
    }
    else
    {
    label_1cdcc:
        void* x16_2 = *arg2;
        if (x16_2 == 0)
        {
        label_1ce14:
            *(x15_2 + (x12_1 << 3)) = 0;
        }
        else
        {
            int64_t x16_3 = *(x16_2 + 8);
            if (x14 != 0)
            {
                if (x16_3 >= x11_2)
                {
                    x16_3 = (x16_3 % x11_2);
                }
                if (x16_3 != x12_1)
                {
                    goto label_1ce14;
                }
            }
            else if ((x16_3 & (x11_2 - 1)) != x12_1)
            {
                goto label_1ce14;
            }
        }
    }
    void* x15 = *arg2;
    if (x15 != 0)
    {
        int64_t x15_1 = *(x15 + 8);
        if (x14 == 0)
        {
            x15_1 = (x15_1 & (x11_2 - 1));
        }
        else if (x15_1 >= x11_2)
        {
            x15_1 = (x15_1 % x11_2);
        }
        if (((x14 == 0 && x15_1 != x12_1) || (x14 != 0 && x15_1 != x12_1)))
        {
            *(*arg1 + (x15_1 << 3)) = x10_2;
        }
    }
    *x10_2 = *arg2;
    *arg2 = 0;
    arg1[3] = (arg1[3] - 1);
    *arg3 = arg2;
    arg3[1] = &arg1[2];
    arg3[2] = 1;
}

int64_t* std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::__emplace_unique_key_args<rgbd::RgbdLocation, std::__ndk1::piecewise_construct_t const&, std::__ndk1::tuple<rgbd::RgbdLocation&&>, std::__ndk1::tuple<> >(int64_t* arg1, int32_t* arg2, int64_t arg3, int64_t* arg4, int64_t arg5 @ x24)
{
    int64_t var_40 = arg5;
    int64_t x22 = arg1[1];
    int64_t x23 = *arg2;
    if (x22 != 0)
    {
        int64_t x9_1 = ((x22 - 1) & x22);
        if (x9_1 == 0)
        {
            arg5 = ((x22 - 1) & x23);
        }
        else
        {
            arg5 = x23;
            if (x22 <= x23)
            {
                arg5 = (x23 % x22);
            }
        }
        int64_t* x20_1 = *(*arg1 + (arg5 << 3));
        if (x20_1 != 0)
        {
            while (true)
            {
                x20_1 = *x20_1;
                if (x20_1 == 0)
                {
                    break;
                }
                int64_t x10_3 = x20_1[1];
                if (x10_3 != x23)
                {
                    if (x9_1 == 0)
                    {
                        x10_3 = (x10_3 & (x22 - 1));
                    }
                    if (((x9_1 == 0 || (x9_1 != 0 && x10_3 < x22)) && x10_3 != arg5))
                    {
                        break;
                    }
                    if (((x9_1 != 0 && x10_3 >= x22) && (x10_3 % x22) != arg5))
                    {
                        break;
                    }
                }
                if (x20_1[2] == x23)
                {
                    return x20_1;
                }
            }
        }
    }
    int64_t* x0 = operator new(0x30);
    int32_t x8_3 = **arg4;
    x0[4] = 0;
    x0[5] = 0;
    x0[2] = x8_3;
    x0[3] = 0;
    *x0 = 0;
    x0[1] = x23;
    float v0_1 = arg1[4];
    float v1_1 = vcvth_f16_u16((arg1[3] + 1));
    float v2_1;
    if (x22 != 0)
    {
        v2_1 = (v0_1 * vcvth_f16_u16(x22));
    }
    if ((x22 == 0 || (x22 != 0 && !(v2_1 >= v1_1))))
    {
        if (x22 < 3)
        {
            /* nop */
        }
        else if (((x22 - 1) & x22) != 0)
        {
            /* nop */
        }
        /* unimplemented  {fcvtpu x9, s0} */;
        std::__ndk1::__hash_table<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__unordered_map_hasher<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::hash<rgbd::RgbdLocation>, true>, std::__ndk1::__unordered_map_equal<rgbd::RgbdLocation, std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::equal_to<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__hash_value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::rehash(arg1);
        x22 = arg1[1];
        if (((x22 - 1) & x22) == 0)
        {
            arg5 = ((x22 - 1) & x23);
        }
        else if (x22 <= x23)
        {
            arg5 = (x23 % x22);
        }
        else
        {
            arg5 = x23;
        }
    }
    int64_t x9_4 = *arg1;
    int64_t** x8_10 = *(x9_4 + (arg5 << 3));
    void* x8_13;
    if (x8_10 == 0)
    {
        *x0 = arg1[2];
        arg1[2] = x0;
        *(x9_4 + (arg5 << 3)) = &arg1[2];
        x8_13 = *x0;
        if (x8_13 != 0)
        {
            int64_t x8_14 = *(x8_13 + 8);
            if (((x22 - 1) & x22) == 0)
            {
                x8_14 = (x8_14 & (x22 - 1));
            }
            else if (x8_14 >= x22)
            {
                x8_14 = (x8_14 % x22);
            }
            x8_10 = (*arg1 + (x8_14 << 3));
        }
    }
    else
    {
        *x0 = *x8_10;
    }
    if ((x8_10 != 0 || (x8_10 == 0 && x8_13 != 0)))
    {
        *x8_10 = x0;
    }
    arg1[3] = (arg1[3] + 1);
    return x0;
}

void sub_1d07c(int64_t arg1, void* arg2 @ x20, char* arg3 @ x21) __noreturn
{
    if ((*arg3 & 1) != 0)
    {
        operator delete(*(arg2 + 0x28));
    }
    operator delete(arg2);
    _Unwind_Resume(arg1);
    /* tailcall */
    return std::__ndk1::__basic_string_common<true>::__throw_out_of_range();
}

void std::__ndk1::__basic_string_common<true>::__throw_out_of_range() __noreturn
{
    sub_1d0b4();
    /* no return */
}

void sub_1d0b4() __noreturn
{
    char* thrown_exception = __cxa_allocate_exception(0x10);
    sub_1d104(thrown_exception);
    __cxa_throw(thrown_exception, _typeinfo_for_std::out_of_range, std::out_of_range::~out_of_range);
    /* no return */
}

int64_t sub_1d104(char* arg1)
{
    int64_t x0 = std::logic_error::logic_error(arg1);
    *arg1 = (_vtable_for_std::out_of_range + 0x10);
    return x0;
}

int64_t std::__ndk1::vector<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::allocator<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > >::__push_back_slow_path<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(int64_t* arg1, int128_t* arg2)
{
    int64_t x9 = *arg1;
    int64_t x22 = (((arg1[1] - x9) >> 3) * -0x5555555555555555);
    int64_t x21 = 0xaaaaaaaaaaaaaaa;
    if ((x22 + 1) > 0xaaaaaaaaaaaaaaa)
    {
        std::__ndk1::__vector_base_common<true>::__throw_length_error();
        /* tailcall */
        return std::__ndk1::__vector_base_common<true>::__throw_length_error();
    }
    int64_t x9_3 = (((arg1[2] - x9) >> 3) * -0x5555555555555555);
    int64_t x0_1;
    if (x9_3 <= 0x555555555555554)
    {
        int64_t x9_4 = (x9_3 << 1);
        if (x9_4 < (x22 + 1))
        {
            x21 = (x22 + 1);
        }
        else
        {
            x21 = x9_4;
        }
        if (x21 == 0)
        {
            x0_1 = 0;
        }
    }
    int128_t v0;
    if ((x9_3 > 0x555555555555554 || (x9_3 <= 0x555555555555554 && x21 != 0)))
    {
        x0_1 = operator new((x21 * 0x18));
    }
    int128_t* x10 = (x0_1 + (x22 * 0x18));
    x10[1] = arg2[1];
    *x10 = *arg2;
    __builtin_memset(arg2, 0, 0x18);
    char* x8_6 = *arg1;
    void* x12 = arg1[1];
    void* x11_1 = (x10 + 0x18);
    char* x20_1;
    if (x12 == x8_6)
    {
        x20_1 = x8_6;
    }
    else
    {
        do
        {
            v0 = *(x12 - 0x18);
            *(x10 - 8) = *(x12 - 8);
            *(x10 - 0x18) = v0;
            __builtin_memset((x12 - 0x18), 0, 0x18);
            x12 = (x12 - 0x18);
            x10 = (x10 - 0x18);
        } while (x8_6 != x12);
        x20_1 = *arg1;
        x8_6 = arg1[1];
    }
    *arg1 = x10;
    arg1[1] = x11_1;
    arg1[2] = (x0_1 + (x21 * 0x18));
    if (x8_6 != x20_1)
    {
        char* x19_1 = x8_6;
        do
        {
            x19_1 = &x19_1[-0x18];
            if ((*x19_1 & 1) != 0)
            {
                x0_1 = operator delete(*(x8_6 - 8));
            }
            x8_6 = x19_1;
        } while (x20_1 != x19_1);
    }
    if (x20_1 == 0)
    {
        return x0_1;
    }
    /* tailcall */
    return operator delete(x20_1);
}

void std::__ndk1::__vector_base_common<true>::__throw_length_error() __noreturn
{
    sub_17a70();
    /* no return */
}

void std::__ndk1::shared_ptr<rgbd::RGBDOrbbec>::~shared_ptr(void* arg1)
{
    int64_t* x19 = *(arg1 + 8);
    if (x19 != 0)
    {
        int64_t x9_1;
        int32_t i;
        do
        {
            x9_1 = __ldaxr(&x19[1]);
            i = __stlxr((x9_1 - 1), &x19[1]);
        } while (i != 0);
        if (x9_1 == 0)
        {
            *(*x19 + 0x10)(x19);
            /* tailcall */
            return std::__ndk1::__shared_weak_count::__release_weak();
        }
    }
}

uint64_t JNI_OnLoad(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    int32_t x19 = 0x10006;
    if (*(*arg1 + 0x30)() != 0)
    {
        x19 = -1;
    }
    else
    {
        data_36500 = arg1;
        int64_t* var_a8;
        int64_t x0_3 = *(*var_a8 + 0x30)(var_a8, "com/pudutech/rgbdlib/RGBDSensor");
        if (x0_3 != 0)
        {
            if ((*(*var_a8 + 0x6b8)(var_a8, x0_3, &data_36018, 0xa) & 0x80000000) != 0)
            {
                __android_log_print(5, "PDLOG", "registerNativeLog error");
            }
            else
            {
                int64_t* x25_1 = data_364b0;
                int32_t x8_8;
                int64_t* x24_1;
                if (x25_1 == 0)
                {
                    x25_1 = &data_364b0;
                    x24_1 = &data_364b0;
                }
                else
                {
                    x24_1 = &data_364b0;
                    while (true)
                    {
                        x8_8 = x25_1[4];
                        if (x8_8 >= 1)
                        {
                            int64_t* x8_9 = *x25_1;
                            if (x8_9 == 0)
                            {
                                break;
                            }
                            x24_1 = x25_1;
                            x25_1 = x8_9;
                        }
                        else
                        {
                            if ((x8_8 & 0x80000000) == 0)
                            {
                                break;
                            }
                            x24_1 = &x25_1[1];
                            int64_t* x8_10 = *x24_1;
                            if (x8_10 == 0)
                            {
                                break;
                            }
                            x25_1 = x8_10;
                        }
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x22_1;
                if ((x25_1 == 0 || ((x25_1 != 0 && x8_8 < 1) && (x8_8 & 0x80000000) == 0)))
                {
                    x22_1 = *x24_1;
                    if (x22_1 == 0)
                    {
                    label_1d468:
                        int64_t* x0_6 = operator new(0x40);
                        x0_6[4] = 0;
                        __builtin_memset(&x0_6[5], 0, 0x18);
                        *x0_6 = 0;
                        x0_6[1] = 0;
                        x0_6[2] = x25_1;
                        *x24_1 = x0_6;
                        x22_1 = x0_6;
                        int64_t x9_3 = **&data_364a8;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_2;
                        if (x9_3 == 0)
                        {
                            x1_2 = x22_1;
                        }
                        else
                        {
                            data_364a8 = x9_3;
                            x1_2 = *x24_1;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364b0, x1_2);
                        data_364b8 = (data_364b8 + 1);
                    }
                }
                if ((x25_1 != 0 && !((x8_8 < 1 && (x8_8 & 0x80000000) == 0))))
                {
                    x24_1 = x25_1;
                    x22_1 = *x24_1;
                    if (x22_1 == 0)
                    {
                        goto label_1d468;
                    }
                }
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((x22_1 + 0x28), "LeftCallbackMed");
                int64_t* x25_2 = data_364b0;
                int32_t x8_13;
                int64_t* x24_3;
                if (x25_2 == 0)
                {
                    x25_2 = &data_364b0;
                    x24_3 = &data_364b0;
                }
                else
                {
                    x24_3 = &data_364b0;
                    while (true)
                    {
                        x8_13 = x25_2[4];
                        if (x8_13 >= 2)
                        {
                            int64_t* x8_14 = *x25_2;
                            if (x8_14 == 0)
                            {
                                break;
                            }
                            x24_3 = x25_2;
                            x25_2 = x8_14;
                        }
                        else
                        {
                            if (x8_13 == 1)
                            {
                                break;
                            }
                            x24_3 = &x25_2[1];
                            int64_t* x8_15 = *x24_3;
                            if (x8_15 == 0)
                            {
                                break;
                            }
                            x25_2 = x8_15;
                        }
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x22_2;
                if ((x25_2 == 0 || (x25_2 != 0 && x8_13 == 1)))
                {
                    x22_2 = *x24_3;
                    if (x22_2 == 0)
                    {
                    label_1d534:
                        int64_t* x0_9 = operator new(0x40);
                        __builtin_memset(&x0_9[5], 0, 0x18);
                        *x0_9 = 0;
                        x0_9[1] = 0;
                        x0_9[2] = x25_2;
                        x0_9[4] = 1;
                        *x24_3 = x0_9;
                        x22_2 = x0_9;
                        int64_t x9_5 = **&data_364a8;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_3;
                        if (x9_5 == 0)
                        {
                            x1_3 = x22_2;
                        }
                        else
                        {
                            data_364a8 = x9_5;
                            x1_3 = *x24_3;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364b0, x1_3);
                        data_364b8 = (data_364b8 + 1);
                    }
                }
                if ((x25_2 != 0 && x8_13 != 1))
                {
                    x24_3 = x25_2;
                    x22_2 = *x24_3;
                    if (x22_2 == 0)
                    {
                        goto label_1d534;
                    }
                }
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((x22_2 + 0x28), "RightCallbackMed");
                int64_t* x25_3 = data_364b0;
                int32_t x8_18;
                int64_t* x24_5;
                if (x25_3 == 0)
                {
                    x25_3 = &data_364b0;
                    x24_5 = &data_364b0;
                }
                else
                {
                    x24_5 = &data_364b0;
                    while (true)
                    {
                        x8_18 = x25_3[4];
                        if (x8_18 >= 3)
                        {
                            int64_t* x8_19 = *x25_3;
                            if (x8_19 == 0)
                            {
                                break;
                            }
                            x24_5 = x25_3;
                            x25_3 = x8_19;
                        }
                        else
                        {
                            if (x8_18 == 2)
                            {
                                break;
                            }
                            x24_5 = &x25_3[1];
                            int64_t* x8_20 = *x24_5;
                            if (x8_20 == 0)
                            {
                                break;
                            }
                            x25_3 = x8_20;
                        }
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x22_3;
                if ((x25_3 == 0 || (x25_3 != 0 && x8_18 == 2)))
                {
                    x22_3 = *x24_5;
                    if (x22_3 == 0)
                    {
                    label_1d614:
                        int64_t* x0_12 = operator new(0x40);
                        __builtin_memset(&x0_12[5], 0, 0x18);
                        *x0_12 = 0;
                        x0_12[1] = 0;
                        x0_12[2] = x25_3;
                        x0_12[4] = 2;
                        *x24_5 = x0_12;
                        x22_3 = x0_12;
                        int64_t x9_7 = **&data_364a8;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_4;
                        if (x9_7 == 0)
                        {
                            x1_4 = x22_3;
                        }
                        else
                        {
                            data_364a8 = x9_7;
                            x1_4 = *x24_5;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364b0, x1_4);
                        data_364b8 = (data_364b8 + 1);
                    }
                }
                if ((x25_3 != 0 && x8_18 != 2))
                {
                    x24_5 = x25_3;
                    x22_3 = *x24_5;
                    if (x22_3 == 0)
                    {
                        goto label_1d614;
                    }
                }
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((x22_3 + 0x28), "CenterCallbackMed");
                int64_t* x25_4 = data_364b0;
                int32_t x8_23;
                int64_t* x24_7;
                if (x25_4 == 0)
                {
                    x25_4 = &data_364b0;
                    x24_7 = &data_364b0;
                }
                else
                {
                    x24_7 = &data_364b0;
                    while (true)
                    {
                        x8_23 = x25_4[4];
                        if (x8_23 >= 4)
                        {
                            int64_t* x8_24 = *x25_4;
                            if (x8_24 == 0)
                            {
                                break;
                            }
                            x24_7 = x25_4;
                            x25_4 = x8_24;
                        }
                        else
                        {
                            if (x8_23 == 3)
                            {
                                break;
                            }
                            x24_7 = &x25_4[1];
                            int64_t* x8_25 = *x24_7;
                            if (x8_25 == 0)
                            {
                                break;
                            }
                            x25_4 = x8_25;
                        }
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x22_4;
                if ((x25_4 == 0 || (x25_4 != 0 && x8_23 == 3)))
                {
                    x22_4 = *x24_7;
                    if (x22_4 == 0)
                    {
                    label_1d6f4:
                        int64_t* x0_15 = operator new(0x40);
                        __builtin_memset(&x0_15[5], 0, 0x18);
                        *x0_15 = 0;
                        x0_15[1] = 0;
                        x0_15[2] = x25_4;
                        x0_15[4] = 3;
                        *x24_7 = x0_15;
                        x22_4 = x0_15;
                        int64_t x9_9 = **&data_364a8;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_5;
                        if (x9_9 == 0)
                        {
                            x1_5 = x22_4;
                        }
                        else
                        {
                            data_364a8 = x9_9;
                            x1_5 = *x24_7;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364b0, x1_5);
                        data_364b8 = (data_364b8 + 1);
                    }
                }
                if ((x25_4 != 0 && x8_23 != 3))
                {
                    x24_7 = x25_4;
                    x22_4 = *x24_7;
                    if (x22_4 == 0)
                    {
                        goto label_1d6f4;
                    }
                }
                std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >::assign((x22_4 + 0x28), "DownCallbackMed");
                int64_t x0_19 = *(*var_a8 + 0x108)(var_a8, x0_3, "destributeLeftRGBD", "(Ljava/io/FileDescriptor;III)V");
                int64_t* x26_1 = data_364e0;
                int32_t x8_30;
                int64_t* x25_5;
                if (x26_1 == 0)
                {
                    x26_1 = &data_364e0;
                    x25_5 = &data_364e0;
                }
                else
                {
                    x25_5 = &data_364e0;
                    while (true)
                    {
                        x8_30 = x26_1[4];
                        if (x8_30 >= 1)
                        {
                            int64_t* x8_31 = *x26_1;
                            if (x8_31 == 0)
                            {
                                break;
                            }
                            x25_5 = x26_1;
                            x26_1 = x8_31;
                        }
                        else
                        {
                            if ((x8_30 & 0x80000000) == 0)
                            {
                                break;
                            }
                            x25_5 = &x26_1[1];
                            int64_t* x8_32 = *x25_5;
                            if (x8_32 == 0)
                            {
                                break;
                            }
                            x26_1 = x8_32;
                        }
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x23_1;
                if ((x26_1 == 0 || ((x26_1 != 0 && x8_30 < 1) && (x8_30 & 0x80000000) == 0)))
                {
                    x23_1 = *x25_5;
                    if (x23_1 == 0)
                    {
                    label_1d810:
                        int64_t* x0_20 = operator new(0x30);
                        x0_20[4] = 0;
                        x0_20[5] = 0;
                        *x0_20 = 0;
                        x0_20[1] = 0;
                        x0_20[2] = x26_1;
                        *x25_5 = x0_20;
                        x23_1 = x0_20;
                        int64_t x9_11 = **&data_364d8;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_7;
                        if (x9_11 == 0)
                        {
                            x1_7 = x23_1;
                        }
                        else
                        {
                            data_364d8 = x9_11;
                            x1_7 = *x25_5;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364e0, x1_7);
                        data_364e8 = (data_364e8 + 1);
                    }
                }
                if ((x26_1 != 0 && !((x8_30 < 1 && (x8_30 & 0x80000000) == 0))))
                {
                    x25_5 = x26_1;
                    x23_1 = *x25_5;
                    if (x23_1 == 0)
                    {
                        goto label_1d810;
                    }
                }
                *(x23_1 + 0x28) = x0_19;
                int64_t x0_23 = *(*var_a8 + 0x108)(var_a8, x0_3, "destributeRightRGBD", "(Ljava/io/FileDescriptor;III)V");
                int64_t* x26_2 = data_364e0;
                int32_t x8_37;
                int64_t* x25_7;
                if (x26_2 == 0)
                {
                    x26_2 = &data_364e0;
                    x25_7 = &data_364e0;
                }
                else
                {
                    x25_7 = &data_364e0;
                    while (true)
                    {
                        x8_37 = x26_2[4];
                        if (x8_37 >= 2)
                        {
                            int64_t* x8_38 = *x26_2;
                            if (x8_38 == 0)
                            {
                                break;
                            }
                            x25_7 = x26_2;
                            x26_2 = x8_38;
                        }
                        else
                        {
                            if (x8_37 == 1)
                            {
                                break;
                            }
                            x25_7 = &x26_2[1];
                            int64_t* x8_39 = *x25_7;
                            if (x8_39 == 0)
                            {
                                break;
                            }
                            x26_2 = x8_39;
                        }
                    }
                }
                int64_t* x23_2;
                if ((x26_2 == 0 || (x26_2 != 0 && x8_37 == 1)))
                {
                    x23_2 = *x25_7;
                    if (x23_2 == 0)
                    {
                    label_1d8f0:
                        int64_t* x0_24 = operator new(0x30);
                        x0_24[5] = 0;
                        *x0_24 = 0;
                        x0_24[1] = 0;
                        x0_24[2] = x26_2;
                        x0_24[4] = 1;
                        *x25_7 = x0_24;
                        x23_2 = x0_24;
                        int64_t x9_13 = **&data_364d8;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_9;
                        if (x9_13 == 0)
                        {
                            x1_9 = x23_2;
                        }
                        else
                        {
                            data_364d8 = x9_13;
                            x1_9 = *x25_7;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364e0, x1_9);
                        data_364e8 = (data_364e8 + 1);
                    }
                }
                if ((x26_2 != 0 && x8_37 != 1))
                {
                    x25_7 = x26_2;
                    x23_2 = *x25_7;
                    if (x23_2 == 0)
                    {
                        goto label_1d8f0;
                    }
                }
                x23_2[5] = x0_23;
                int64_t x0_27 = *(*var_a8 + 0x108)(var_a8, x0_3, "destributeCenterRGBD", "(Ljava/io/FileDescriptor;III)V");
                int64_t* x26_3 = data_364e0;
                int32_t x8_44;
                int64_t* x25_9;
                if (x26_3 == 0)
                {
                    x26_3 = &data_364e0;
                    x25_9 = &data_364e0;
                }
                else
                {
                    x25_9 = &data_364e0;
                    while (true)
                    {
                        x8_44 = x26_3[4];
                        if (x8_44 >= 3)
                        {
                            int64_t* x8_45 = *x26_3;
                            if (x8_45 == 0)
                            {
                                break;
                            }
                            x25_9 = x26_3;
                            x26_3 = x8_45;
                        }
                        else
                        {
                            if (x8_44 == 2)
                            {
                                break;
                            }
                            x25_9 = &x26_3[1];
                            int64_t* x8_46 = *x25_9;
                            if (x8_46 == 0)
                            {
                                break;
                            }
                            x26_3 = x8_46;
                        }
                    }
                }
                int64_t* x23_3;
                if ((x26_3 == 0 || (x26_3 != 0 && x8_44 == 2)))
                {
                    x23_3 = *x25_9;
                    if (x23_3 == 0)
                    {
                    label_1d9e4:
                        int64_t* x0_28 = operator new(0x30);
                        x0_28[5] = 0;
                        *x0_28 = 0;
                        x0_28[1] = 0;
                        x0_28[2] = x26_3;
                        x0_28[4] = 2;
                        *x25_9 = x0_28;
                        x23_3 = x0_28;
                        int64_t x9_15 = **&data_364d8;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_11;
                        if (x9_15 == 0)
                        {
                            x1_11 = x23_3;
                        }
                        else
                        {
                            data_364d8 = x9_15;
                            x1_11 = *x25_9;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364e0, x1_11);
                        data_364e8 = (data_364e8 + 1);
                    }
                }
                if ((x26_3 != 0 && x8_44 != 2))
                {
                    x25_9 = x26_3;
                    x23_3 = *x25_9;
                    if (x23_3 == 0)
                    {
                        goto label_1d9e4;
                    }
                }
                x23_3[5] = x0_27;
                int64_t x0_31 = *(*var_a8 + 0x108)(var_a8, x0_3, "destributeDownRGBD", "(Ljava/io/FileDescriptor;III)V");
                int64_t* x26_4 = data_364e0;
                int32_t x8_51;
                int64_t* x25_11;
                if (x26_4 == 0)
                {
                    x26_4 = &data_364e0;
                    x25_11 = &data_364e0;
                }
                else
                {
                    x25_11 = &data_364e0;
                    while (true)
                    {
                        x8_51 = x26_4[4];
                        if (x8_51 >= 4)
                        {
                            int64_t* x8_52 = *x26_4;
                            if (x8_52 == 0)
                            {
                                break;
                            }
                            x25_11 = x26_4;
                            x26_4 = x8_52;
                        }
                        else
                        {
                            if (x8_51 == 3)
                            {
                                break;
                            }
                            x25_11 = &x26_4[1];
                            int64_t* x8_53 = *x25_11;
                            if (x8_53 == 0)
                            {
                                break;
                            }
                            x26_4 = x8_53;
                        }
                    }
                }
                int64_t* x23_4;
                if ((x26_4 == 0 || (x26_4 != 0 && x8_51 == 3)))
                {
                    x23_4 = *x25_11;
                    if (x23_4 == 0)
                    {
                    label_1dad8:
                        int64_t* x0_32 = operator new(0x30);
                        x0_32[5] = 0;
                        *x0_32 = 0;
                        x0_32[1] = 0;
                        x0_32[2] = x26_4;
                        x0_32[4] = 3;
                        *x25_11 = x0_32;
                        x23_4 = x0_32;
                        int64_t x9_17 = **&data_364d8;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_13;
                        if (x9_17 == 0)
                        {
                            x1_13 = x23_4;
                        }
                        else
                        {
                            data_364d8 = x9_17;
                            x1_13 = *x25_11;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364e0, x1_13);
                        data_364e8 = (data_364e8 + 1);
                    }
                }
                if ((x26_4 != 0 && x8_51 != 3))
                {
                    x25_11 = x26_4;
                    x23_4 = *x25_11;
                    if (x23_4 == 0)
                    {
                        goto label_1dad8;
                    }
                }
                x23_4[5] = x0_31;
                *(*var_a8 + 0xb8)(var_a8, x0_3);
                int64_t x0_36 = *(*var_a8 + 0x30)(var_a8, "java/io/FileDescriptor");
                *(*var_a8 + 0x108)(var_a8, x0_36, "<init>", &data_21131);
                int64_t x0_40 = *(*var_a8 + 0x2f0)(var_a8, x0_36, "descriptor", &data_21021);
                int64_t s_1;
                __builtin_memset(&s_1, 0, 0x18);
                s_1 = 0x10;
                __builtin_strncpy(&*s_1[1], "FileDesc", 9);
                int64_t s;
                int64_t* x0_41 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_36490, &s);
                int64_t* x24_9 = *x0_41;
                void* var_78;
                if (x24_9 == 0)
                {
                    int64_t* x0_42;
                    int128_t v0_1;
                    x0_42 = operator new(0x50);
                    v0_1 = s_1;
                    x0_42[6] = var_78;
                    int64_t s_2 = s;
                    *(x0_42 + 0x20) = v0_1;
                    x0_42[8] = 0;
                    __builtin_memset(&s_1, 0, 0x18);
                    x0_42[9] = 0;
                    *x0_42 = 0;
                    x0_42[1] = 0;
                    x0_42[2] = s_2;
                    x0_42[7] = &x0_42[8];
                    *x0_41 = x0_42;
                    x24_9 = x0_42;
                    int64_t x9_21 = **&data_36490;
                    int64_t* x1_18;
                    if (x9_21 == 0)
                    {
                        x1_18 = x24_9;
                    }
                    else
                    {
                        data_36490 = x9_21;
                        x1_18 = *x0_41;
                    }
                    std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_36498, x1_18);
                    data_364a0 = (data_364a0 + 1);
                }
                __builtin_memset(&s, 0, 0x18);
                __builtin_strcpy(&s, "\ndescf");
                int64_t var_70;
                int64_t* x0_45 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x24_9[7], &var_70);
                int64_t* x26_5 = *x0_45;
                void* var_90;
                if (x26_5 == 0)
                {
                    int64_t* x0_46;
                    int128_t v0_2;
                    x0_46 = operator new(0x40);
                    v0_2 = s;
                    int64_t x9_22 = var_70;
                    __builtin_memset(&s, 0, 0x18);
                    *x0_46 = 0;
                    x0_46[1] = 0;
                    *(x0_46 + 0x20) = v0_2;
                    x0_46[6] = var_90;
                    x0_46[7] = 0;
                    x0_46[2] = x9_22;
                    *x0_45 = x0_46;
                    x26_5 = x0_46;
                    int64_t x8_69 = *x24_9[7];
                    int64_t* x1_20;
                    if (x8_69 == 0)
                    {
                        x1_20 = x26_5;
                    }
                    else
                    {
                        x24_9[7] = x8_69;
                        x1_20 = *x0_45;
                    }
                    std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x24_9[8], x1_20);
                    x24_9[9] = (x24_9[9] + 1);
                }
                x26_5[7] = x0_40;
                if ((s & 1) != 0)
                {
                    operator delete(var_90);
                }
                if ((s_1 & 1) != 0)
                {
                    operator delete(var_78);
                }
                data_36510 = *(*var_a8 + 0xa8)(var_a8, _JNIEnv::NewObject());
                data_36518 = *(*var_a8 + 0xa8)(var_a8, _JNIEnv::NewObject());
                data_36520 = *(*var_a8 + 0xa8)(var_a8, _JNIEnv::NewObject());
                data_36528 = *(*var_a8 + 0xa8)(var_a8, _JNIEnv::NewObject());
                *(*var_a8 + 0xb8)(var_a8, x0_36);
                int64_t* x23_6 = data_364c8;
                int64_t x25_15 = data_36510;
                int32_t x8_84;
                int64_t* x21_3;
                int64_t* x27_2;
                if (x23_6 == 0)
                {
                    x21_3 = &data_364c8;
                    x27_2 = &data_364c8;
                }
                else
                {
                    x27_2 = &data_364c8;
                    x21_3 = x23_6;
                    while (true)
                    {
                        x8_84 = x21_3[4];
                        if (x8_84 >= 1)
                        {
                            int64_t* x8_85 = *x21_3;
                            if (x8_85 == 0)
                            {
                                break;
                            }
                            x27_2 = x21_3;
                            x21_3 = x8_85;
                        }
                        else
                        {
                            if ((x8_84 & 0x80000000) == 0)
                            {
                                break;
                            }
                            x27_2 = &x21_3[1];
                            int64_t* x8_86 = *x27_2;
                            if (x8_86 == 0)
                            {
                                break;
                            }
                            x21_3 = x8_86;
                        }
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x20_2;
                if ((x23_6 == 0 || ((x23_6 != 0 && x8_84 < 1) && (x8_84 & 0x80000000) == 0)))
                {
                    x20_2 = *x27_2;
                    if (x20_2 == 0)
                    {
                    label_1de98:
                        int64_t* x0_67 = operator new(0x30);
                        x0_67[4] = 0;
                        x0_67[5] = 0;
                        *x0_67 = 0;
                        x0_67[1] = 0;
                        x0_67[2] = x21_3;
                        *x27_2 = x0_67;
                        x20_2 = x0_67;
                        int64_t x9_24 = **&data_364c0;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_30;
                        if (x9_24 == 0)
                        {
                            x1_30 = x20_2;
                        }
                        else
                        {
                            data_364c0 = x9_24;
                            x1_30 = *x27_2;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364c8, x1_30);
                        x23_6 = data_364c8;
                        data_364d0 = (data_364d0 + 1);
                    }
                }
                if ((x23_6 != 0 && !((x8_84 < 1 && (x8_84 & 0x80000000) == 0))))
                {
                    x27_2 = x21_3;
                    x20_2 = *x27_2;
                    if (x20_2 == 0)
                    {
                        goto label_1de98;
                    }
                }
                *(x20_2 + 0x28) = x25_15;
                int64_t x24_10 = data_36518;
                int32_t x8_89;
                int64_t* x21_4;
                int64_t* x26_6;
                if (x23_6 == 0)
                {
                    x21_4 = &data_364c8;
                    x26_6 = &data_364c8;
                }
                else
                {
                    x26_6 = &data_364c8;
                    x21_4 = x23_6;
                    while (true)
                    {
                        x8_89 = x21_4[4];
                        if (x8_89 >= 2)
                        {
                            int64_t* x8_90 = *x21_4;
                            if (x8_90 == 0)
                            {
                                break;
                            }
                            x26_6 = x21_4;
                            x21_4 = x8_90;
                        }
                        else
                        {
                            if (x8_89 == 1)
                            {
                                break;
                            }
                            x26_6 = &x21_4[1];
                            int64_t* x8_91 = *x26_6;
                            if (x8_91 == 0)
                            {
                                break;
                            }
                            x21_4 = x8_91;
                        }
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x20_3;
                if ((x23_6 == 0 || (x23_6 != 0 && x8_89 == 1)))
                {
                    x20_3 = *x26_6;
                    if (x20_3 == 0)
                    {
                    label_1df64:
                        int64_t* x0_69 = operator new(0x30);
                        x0_69[5] = 0;
                        *x0_69 = 0;
                        x0_69[1] = 0;
                        x0_69[2] = x21_4;
                        x0_69[4] = 1;
                        *x26_6 = x0_69;
                        x20_3 = x0_69;
                        int64_t x9_26 = **&data_364c0;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_31;
                        if (x9_26 == 0)
                        {
                            x1_31 = x20_3;
                        }
                        else
                        {
                            data_364c0 = x9_26;
                            x1_31 = *x26_6;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364c8, x1_31);
                        x23_6 = data_364c8;
                        data_364d0 = (data_364d0 + 1);
                    }
                }
                if ((x23_6 != 0 && x8_89 != 1))
                {
                    x26_6 = x21_4;
                    x20_3 = *x26_6;
                    if (x20_3 == 0)
                    {
                        goto label_1df64;
                    }
                }
                *(x20_3 + 0x28) = x24_10;
                int64_t x21_5 = data_36520;
                int32_t x8_94;
                int64_t* x25_16;
                int64_t* x26_8;
                if (x23_6 == 0)
                {
                    x26_8 = &data_364c8;
                    x25_16 = &data_364c8;
                }
                else
                {
                    x25_16 = &data_364c8;
                    x26_8 = x23_6;
                    while (true)
                    {
                        x8_94 = x26_8[4];
                        if (x8_94 >= 3)
                        {
                            int64_t* x8_95 = *x26_8;
                            if (x8_95 == 0)
                            {
                                break;
                            }
                            x25_16 = x26_8;
                            x26_8 = x8_95;
                        }
                        else
                        {
                            if (x8_94 == 2)
                            {
                                break;
                            }
                            x25_16 = &x26_8[1];
                            int64_t* x8_96 = *x25_16;
                            if (x8_96 == 0)
                            {
                                break;
                            }
                            x26_8 = x8_96;
                        }
                    }
                }
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x20_4;
                if ((x23_6 == 0 || (x23_6 != 0 && x8_94 == 2)))
                {
                    x20_4 = *x25_16;
                    if (x20_4 == 0)
                    {
                    label_1e03c:
                        int64_t* x0_71 = operator new(0x30);
                        x0_71[5] = 0;
                        *x0_71 = 0;
                        x0_71[1] = 0;
                        x0_71[2] = x26_8;
                        x0_71[4] = 2;
                        *x25_16 = x0_71;
                        x20_4 = x0_71;
                        int64_t x9_28 = **&data_364c0;
                        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_32;
                        if (x9_28 == 0)
                        {
                            x1_32 = x20_4;
                        }
                        else
                        {
                            data_364c0 = x9_28;
                            x1_32 = *x25_16;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364c8, x1_32);
                        x23_6 = data_364c8;
                        data_364d0 = (data_364d0 + 1);
                    }
                }
                if ((x23_6 != 0 && x8_94 != 2))
                {
                    x25_16 = x26_8;
                    x20_4 = *x25_16;
                    if (x20_4 == 0)
                    {
                        goto label_1e03c;
                    }
                }
                *(x20_4 + 0x28) = x21_5;
                int64_t x22_10 = data_36528;
                int32_t x8_99;
                int64_t* x24_11;
                if (x23_6 == 0)
                {
                    x23_6 = &data_364c8;
                    x24_11 = &data_364c8;
                }
                else
                {
                    x24_11 = &data_364c8;
                    while (true)
                    {
                        x8_99 = x23_6[4];
                        if (x8_99 >= 4)
                        {
                            int64_t* x8_100 = *x23_6;
                            if (x8_100 == 0)
                            {
                                break;
                            }
                            x24_11 = x23_6;
                            x23_6 = x8_100;
                        }
                        else
                        {
                            if (x8_99 == 3)
                            {
                                break;
                            }
                            x24_11 = &x23_6[1];
                            int64_t* x8_101 = *x24_11;
                            if (x8_101 == 0)
                            {
                                break;
                            }
                            x23_6 = x8_101;
                        }
                    }
                }
                int64_t* x20_5;
                if ((x23_6 == 0 || (x23_6 != 0 && x8_99 == 3)))
                {
                    x20_5 = *x24_11;
                    if (x20_5 == 0)
                    {
                    label_1e110:
                        int64_t* x0_73 = operator new(0x30);
                        x0_73[5] = 0;
                        *x0_73 = 0;
                        x0_73[1] = 0;
                        x0_73[2] = x23_6;
                        x0_73[4] = 3;
                        *x24_11 = x0_73;
                        x20_5 = x0_73;
                        int64_t x9_30 = **&data_364c0;
                        int64_t* x1_33;
                        if (x9_30 == 0)
                        {
                            x1_33 = x20_5;
                        }
                        else
                        {
                            data_364c0 = x9_30;
                            x1_33 = *x24_11;
                        }
                        std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364c8, x1_33);
                        data_364d0 = (data_364d0 + 1);
                    }
                }
                if ((x23_6 != 0 && x8_99 != 3))
                {
                    x24_11 = x23_6;
                    x20_5 = *x24_11;
                    if (x20_5 == 0)
                    {
                        goto label_1e110;
                    }
                }
                x20_5[5] = x22_10;
                void** x0_75 = operator new(0x210);
                x0_75[2] = 0;
                *x0_75 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<rgbd::RGBDOrbbec, std::__ndk1::allocator<rgbd::RGBDOrbbec> > + 0x10);
                x0_75[1] = 0;
                rgbd::RGBDOrbbec::RGBDOrbbec();
                int64_t* x21_6 = data_364f8;
                data_364f0 = &x0_75[3];
                data_364f8 = x0_75;
                if (x21_6 != 0)
                {
                    int64_t x9_31;
                    int32_t i;
                    do
                    {
                        x9_31 = __ldaxr(&x21_6[1]);
                        i = __stlxr((x9_31 - 1), &x21_6[1]);
                    } while (i != 0);
                    if (x9_31 == 0)
                    {
                        *(*x21_6 + 0x10)(x21_6);
                        std::__ndk1::__shared_weak_count::__release_weak();
                    }
                }
            }
        }
    }
    if (*(x28 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x19;
}

int64_t JNI_OnUnload(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x21 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x21 + 0x28);
    int64_t x0 = *(*arg1 + 0x30)();
    if (x0 == 0)
    {
        int64_t* var_40;
        x0 = *(*var_40 + 0x30)(var_40, "com/pudutech/rgbdlib/RGBDSensor");
        if (x0 != 0)
        {
            int64_t x20_1 = x0;
            x0 = *(*var_40 + 0x6c0)(var_40, x20_1);
            if ((x0 & 0x80000000) == 0)
            {
                *(*var_40 + 0xb8)(var_40, x20_1);
                data_36468;
                std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jclass*> > >::destroy(&data_36460);
                data_36460 = &data_36468;
                data_36470 = 0;
                data_36468 = 0;
                data_36480;
                std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jmethodID*> > >::destroy(&data_36478);
                data_36478 = &data_36480;
                data_36488 = 0;
                data_36480 = 0;
                data_36498;
                std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::destroy(&data_36490);
                data_36490 = &data_36498;
                data_364a0 = 0;
                data_36498 = 0;
                data_364b0;
                std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > > > >::destroy(&data_364a8);
                data_364a8 = &data_364b0;
                data_364b8 = 0;
                data_364b0 = 0;
                data_364c8;
                x0 = std::__ndk1::__tree<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::__map_value_compare<rgbd::RgbdLocation, std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*>, std::__ndk1::less<rgbd::RgbdLocation>, true>, std::__ndk1::allocator<std::__ndk1::__value_type<rgbd::RgbdLocation, _jobject*> > >::destroy(&data_364c0);
                int64_t x1_8 = data_36510;
                data_364c0 = &data_364c8;
                data_364d0 = 0;
                data_364c8 = 0;
                if (x1_8 != 0)
                {
                    x0 = *(*var_40 + 0xb0)(var_40, x1_8);
                }
                int64_t x1_9 = data_36518;
                if (x1_9 != 0)
                {
                    x0 = *(*var_40 + 0xb0)(var_40, x1_9);
                }
                int64_t x1_10 = data_36520;
                if (x1_10 != 0)
                {
                    x0 = *(*var_40 + 0xb0)(var_40, x1_10);
                }
                int64_t x1_11 = data_36528;
                if (x1_11 != 0)
                {
                    x0 = *(*var_40 + 0xb0)(var_40, x1_11);
                }
            }
        }
    }
    if (*(x21 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

int64_t sub_1e42c(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x22 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x22 + 0x28);
    data_364f0;
    rgbd::RGBDOrbbec::getSerialNumber();
    void* var_1d0;
    char* var_1c8;
    int64_t x0_4 = *(*arg1 + 0x560)(arg1, (((var_1c8 - var_1d0) >> 3) * 0xaaaaaaab), *(*arg1 + 0x30)(arg1, "java/lang/String"), 0);
    void* x23 = var_1d0;
    char* x8_5 = var_1c8;
    size_t x0_6;
    if (x8_5 != x23)
    {
        uint64_t i = 0;
        int32_t i_1 = 1;
        do
        {
            char* x28_1;
            if ((*data_36370 & 1) == 0)
            {
                x28_1 = &*(data_36370 + 1);
            }
            else
            {
                x28_1 = *(data_3637a + 6);
            }
            int32_t var_1f0 = data_36368;
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            x0_6 = strlen(x28_1);
            if (x0_6 < -0x10)
            {
                break;
            }
            void* var_1d8_1;
            void* x23_1;
            if (x0_6 >= 0x17)
            {
                uint64_t x24_1 = ((x0_6 + 0x10) & 0xfffffffffffffff0);
                void* x0_8 = operator new(x24_1);
                x23_1 = x0_8;
                size_t var_1e0_1 = x0_6;
                var_1d8_1 = x0_8;
                s = (x24_1 | 1);
            }
            else
            {
                x23_1 = &*s[1];
                s = (x0_6 << 1);
            }
            if ((x0_6 >= 0x17 || (x0_6 < 0x17 && x0_6 != 0)))
            {
                memcpy(x23_1, x28_1, x0_6);
            }
            *(x23_1 + x0_6) = 0;
            int32_t x0_11 = g3::logLevel(&var_1f0);
            int32_t x27_2;
            if ((x0_11 & 1) == 0)
            {
                x27_2 = 0;
                if ((s & 1) != 0)
                {
                label_1e60c:
                    operator delete(var_1d8_1);
                    if ((x27_2 & 1) != 0)
                    {
                        goto label_1e634;
                    }
                }
            }
            else
            {
                int64_t var_208 = 0;
                int64_t var_200_1 = 0;
                var_208 = 0x14;
                void* var_1f8_1 = nullptr;
                __builtin_strncpy((&var_208 | 1), "RGBDOrbbec", 0xa);
                *var_200_1[3] = 0;
                x27_2 = g3::logTag(&var_208);
                if ((var_208 & 1) != 0)
                {
                    operator delete(var_1f8_1);
                    if ((s & 1) != 0)
                    {
                        goto label_1e60c;
                    }
                }
                else if ((s & 1) != 0)
                {
                    goto label_1e60c;
                }
            }
            if (((((x0_11 & 1) == 0 && (s & 1) == 0) || (x0_11 & 1) != 0) && (x27_2 & 1) != 0))
            {
            label_1e634:
                void var_1b8;
                LogCapture::LogCapture(&var_1b8, "RGBDOrbbec", &data_36368, &data_20e80[0x1a], &nullptr->ident.version);
                void var_1b0;
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_18 = std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "serial number: ", 0xf);
                char* x8_15 = (var_1d0 + (i * 0x18));
                uint64_t x9_4 = *x8_15;
                int32_t temp0_1 = (x9_4 & 1);
                void* x1_2;
                if (temp0_1 != 0)
                {
                    x1_2 = *(x8_15 + 0x10);
                }
                else
                {
                    x1_2 = &x8_15[1];
                }
                uint64_t x2_2;
                if (temp0_1 == 0)
                {
                    x2_2 = (x9_4 >> 1);
                }
                else
                {
                    x2_2 = *(x8_15 + 8);
                }
                std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(x0_18, x1_2, x2_2);
                LogCapture::~LogCapture();
            }
            char* x9_5 = (var_1d0 + (i * 0x18));
            void* x1_3;
            if ((*x9_5 & 1) != 0)
            {
                x1_3 = *((var_1d0 + (i * 0x18)) + 0x10);
            }
            else
            {
                x1_3 = &x9_5[1];
            }
            *(*arg1 + 0x570)(arg1, x0_4, (i_1 - 1), *(*arg1 + 0x538)(arg1, x1_3));
            x23 = var_1d0;
            x8_5 = var_1c8;
            i = i_1;
            i_1 = (i_1 + 1);
        } while ((((x8_5 - x23) >> 3) * -0x5555555555555555) > i);
        if (x0_6 < -0x10)
        {
            std::__ndk1::__basic_string_common<true>::__throw_length_error();
        }
    }
    if ((x8_5 == x23 || (x8_5 != x23 && x0_6 >= -0x10)))
    {
        if (x23 != 0)
        {
            void* x0_23;
            if (x8_5 == x23)
            {
                x0_23 = x23;
            }
            else
            {
                char* x19_2 = x8_5;
                do
                {
                    x19_2 = &x19_2[-0x18];
                    if ((*x19_2 & 1) != 0)
                    {
                        operator delete(*(x8_5 - 8));
                    }
                    x8_5 = x19_2;
                } while (x23 != x19_2);
                x0_23 = var_1d0;
            }
            void* var_1c8_1 = x23;
            operator delete(x0_23);
        }
        if (*(x22 + 0x28) == x8)
        {
            return x0_4;
        }
    }
    if (((x8_5 != x23 && x0_6 < -0x10) || ((x8_5 == x23 || (x8_5 != x23 && x0_6 >= -0x10)) && *(x22 + 0x28) != x8)))
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t sub_1e844(int64_t* arg1, int64_t arg2, int32_t arg3, int64_t arg4)
{
    void tpidr_el0;
    uint64_t x26 = _ReadStatusReg(tpidr_el0);
    int64_t var_68 = *(x26 + 0x28);
    uint32_t x10 = *data_36330;
    int32_t var_1d8 = data_36328;
    char* x23;
    if ((x10 & 1) == 0)
    {
        x23 = &*(data_36330 + 1);
    }
    else
    {
        x23 = *(data_3633a + 6);
    }
    int32_t var_1b8 = arg3;
    int64_t s_1;
    __builtin_memset(&s_1, 0, 0x18);
    size_t x0_1 = strlen(x23);
    if (x0_1 < -0x10)
    {
        std::__ndk1::__basic_string_common<true>::__throw_length_error();
    }
    else
    {
        void* var_1c0_1;
        void* x24_1;
        if (x0_1 >= 0x17)
        {
            uint64_t x25_1 = ((x0_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_3 = operator new(x25_1);
            x24_1 = x0_3;
            size_t var_1c8_1 = x0_1;
            var_1c0_1 = x0_3;
            s_1 = (x25_1 | 1);
        }
        else
        {
            x24_1 = &*s_1[1];
            s_1 = (x0_1 << 1);
        }
        if ((x0_1 >= 0x17 || (x0_1 < 0x17 && x0_1 != 0)))
        {
            memcpy(x24_1, x23, x0_1);
        }
        *(x24_1 + x0_1) = 0;
        int32_t x0_6 = g3::logLevel(&var_1d8);
        int32_t x22_2;
        if ((x0_6 & 1) == 0)
        {
            x22_2 = 0;
            if ((s_1 & 1) != 0)
            {
            label_1e998:
                operator delete(var_1c0_1);
                if ((x22_2 & 1) != 0)
                {
                    goto label_1e9c8;
                }
            }
        }
        else
        {
            int64_t s;
            __builtin_memset(&s, 0, 0x18);
            s = 0x14;
            __builtin_strncpy(&*s[1], "RGBDOrbbec", 0xb);
            x22_2 = g3::logTag(&s);
            if ((s & 1) != 0)
            {
                void* var_1e0;
                operator delete(var_1e0);
                if ((s_1 & 1) != 0)
                {
                    goto label_1e998;
                }
            }
            else if ((s_1 & 1) != 0)
            {
                goto label_1e998;
            }
        }
        char var_1b0;
        if (((((x0_6 & 1) == 0 && (s_1 & 1) == 0) || (x0_6 & 1) != 0) && (x22_2 & 1) != 0))
        {
        label_1e9c8:
            LogCapture::LogCapture(&var_1b0, "RGBDOrbbec", &data_36328, &data_20e80[0x1a], &nullptr->ident.version);
            void var_1a8;
            std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1a8, "set orb configure", 0x11);
            LogCapture::~LogCapture();
        }
        int32_t* x22_3 = data_364f0;
        void* x29_1 = sub_1f410(arg1, arg4, &var_1b0);
        char x4;
        char var_1b4_1 = x4;
        int32_t x0_15 = rgbd::RGBDOrbbec::setRgbdLocation(x22_3, &var_1b8, &var_1b0);
        void* var_1a0;
        if ((var_1b0 & 1) != 0)
        {
            operator delete(var_1a0);
        }
        int64_t x0_19;
        if ((x0_15 & 1) == 0)
        {
            x0_19 = 0;
        }
        else
        {
            var_1b0 = &data_35638;
            var_1b4_1 = var_1b8;
            char* var_190_1 = &var_1b0;
            rgbd::RGBDOrbbec::setRGBDCallback(data_364f0, &var_1b0);
            int64_t x8_13;
            if (&var_1b0 == var_190_1)
            {
                x8_13 = *(*var_190_1 + 0x20);
            }
            if ((&var_1b0 != var_190_1 && var_190_1 != 0))
            {
                x8_13 = *(*var_190_1 + 0x28);
            }
            if ((&var_1b0 == var_190_1 || (&var_1b0 != var_190_1 && var_190_1 != 0)))
            {
                x8_13();
            }
            x0_19 = 1;
        }
        if (*(x26 + 0x28) == *(x29_1 - 0x58))
        {
            return x0_19;
        }
    }
    __stack_chk_fail();
    /* no return */
}

int64_t sub_1f2bc(int64_t* arg1)
{
    void tpidr_el0;
    uint64_t x24 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x24 + 0x28);
    void* x8_1 = data_364f0;
    int64_t s;
    __builtin_memset(&s, 0, 0x18);
    void* var_50;
    if ((*(x8_1 + 8) & 1) == 0)
    {
        var_50 = *(x8_1 + 0x18);
        s = *(x8_1 + 8);
    }
    else
    {
        size_t x20_1 = *(x8_1 + 0x10);
        if (x20_1 < -0x10)
        {
            int64_t x0_7 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_50);
            }
            _Unwind_Resume(x0_7);
            return 0;
        }
        int64_t x21_1 = *(x8_1 + 0x18);
        void* x22_1;
        if (x20_1 >= 0x17)
        {
            uint64_t x23_1 = ((x20_1 + 0x10) & 0xfffffffffffffff0);
            void* x0_1 = operator new(x23_1);
            x22_1 = x0_1;
            size_t var_58_1 = x20_1;
            var_50 = x0_1;
            s = (x23_1 | 1);
        }
        else
        {
            x22_1 = (&s | 1);
            s = (x20_1 << 1);
        }
        if ((x20_1 >= 0x17 || (x20_1 < 0x17 && x20_1 != 0)))
        {
            memcpy(x22_1, x21_1, x20_1);
        }
        *(x22_1 + x20_1) = 0;
    }
    void* x1_2;
    if ((s & 1) == 0)
    {
        x1_2 = (&s | 1);
    }
    else
    {
        x1_2 = var_50;
    }
    int64_t x0_4 = *(*arg1 + 0x538)(arg1, x1_2);
    if ((s & 1) != 0)
    {
        operator delete(var_50);
    }
    if (*(x24 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_4;
}

void sub_1f410(int64_t* arg1, int64_t arg2, int128_t* arg3 @ x8)
{
    void tpidr_el0;
    uint64_t x27 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x27 + 0x28);
    if (arg2 == 0)
    {
        __builtin_memset(arg3, 0, 0x18);
    }
    else
    {
        int64_t x0 = *(*arg1 + 0xf8)();
        *(*arg1 + 0x108)(arg1, x0, "getBytes", "(Ljava/lang/String;)[B");
        *(*arg1 + 0x538)(arg1, "UTF-8");
        int64_t x0_6 = _JNIEnv::CallObjectMethod();
        int32_t x0_8 = *(*arg1 + 0x558)(arg1, x0_6);
        int64_t x0_10 = *(*arg1 + 0x5c0)(arg1, x0_6, 0);
        int64_t s;
        __builtin_memset(&s, 0, 0x18);
        char* var_70;
        if (x0_8 < 0xfffffff0)
        {
            int64_t x0_17 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if ((s & 1) != 0)
            {
                operator delete(var_70);
            }
            int64_t* x0_20;
            int128_t v0_2;
            int128_t v1;
            int128_t v2;
            int128_t v3;
            int128_t v4;
            int128_t v5;
            int128_t v6;
            int128_t v7;
            x0_20 = _Unwind_Resume(x0_17);
            /* tailcall */
            return _JNIEnv::CallObjectMethod(x0_20, v0_2, v1, v2, v3, v4, v5, v6, v7);
        }
        int64_t x24_2 = x0_8;
        char* x25_1;
        if (x24_2 >= 0x17)
        {
            uint64_t x26_1 = ((x24_2 + 0x10) & 0xfffffffffffffff0);
            char* x0_12 = operator new(x26_1);
            x25_1 = x0_12;
            int64_t var_78_1 = x24_2;
            var_70 = x0_12;
            s = (x26_1 | 1);
        }
        else
        {
            x25_1 = (&s | 1);
            s = (x24_2 << 1);
        }
        if ((x24_2 >= 0x17 || (x24_2 < 0x17 && x24_2 != 0)))
        {
            memcpy(x25_1, x0_10, x24_2);
        }
        x25_1[x24_2] = 0;
        *(*arg1 + 0x600)(arg1, x0_6, x0_10, 2);
        *(*arg1 + 0xb8)(arg1, x0_6);
        int128_t v0_1;
        arg1 = *(*arg1 + 0xb8)(arg1, x0);
        arg3[1] = var_70;
        *arg3 = s;
    }
    if (*(x27 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
}

int64_t _JNIEnv::CallObjectMethod(int64_t* arg1, int128_t arg2 @ v0, int128_t arg3 @ v1, int128_t arg4 @ v2, int128_t arg5 @ v3, int128_t arg6 @ v4, int128_t arg7 @ v5, int128_t arg8 @ v6, int128_t arg9 @ v7)
{
    int128_t var_c0 = arg8;
    int128_t var_b0 = arg9;
    int128_t var_e0 = arg6;
    int128_t var_d0 = arg7;
    int128_t var_100 = arg4;
    int128_t var_f0 = arg5;
    int128_t var_120 = arg2;
    int128_t var_110 = arg3;
    int64_t x6;
    int64_t var_80 = x6;
    int64_t x7;
    int64_t var_78 = x7;
    int64_t x4;
    int64_t var_90 = x4;
    int64_t x5;
    int64_t var_88 = x5;
    int64_t x3;
    int64_t var_98 = x3;
    void tpidr_el0;
    uint64_t x19 = _ReadStatusReg(tpidr_el0);
    int64_t x11 = *(x19 + 0x28);
    int64_t var_30 = -0x7f00000028;
    int128_t var_70;
    int128_t* var_40 = &var_70;
    void var_a0;
    arg2 = &var_a0;
    int64_t x8_1 = *(*arg1 + 0x118);
    var_70 = &arg_0;
    int128_t var_60 = arg2;
    int64_t x0 = x8_1(arg2);
    if (*(x19 + 0x28) != x11)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

void*** sub_1f6ac()
{
    void*** x0 = operator new(0x10);
    *x0 = &data_35638;
    return x0;
}

int64_t sub_1f6d0(int64_t, void*** arg2)
{
    *arg2 = &data_35638;
}

int64_t sub_1f6e0() __pure
{
    return;
}

int64_t j_operator delete(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

int64_t sub_1f6e8(int64_t arg1, int32_t* arg2, char* arg3, int32_t* arg4, int32_t* arg5, int32_t* arg6)
{
    void tpidr_el0;
    uint64_t x28 = _ReadStatusReg(tpidr_el0);
    int64_t x8 = *(x28 + 0x28);
    int32_t x19 = *arg3;
    int32_t x25 = *arg4;
    int32_t x24 = *arg5;
    *arg6;
    int32_t x0_1 = *(**&data_36500 + 0x30)();
    int32_t x20;
    int32_t x23;
    if (x0_1 != 0xfffffffe)
    {
        x20 = 0;
    }
    else
    {
        x23 = *(**&data_36500 + 0x20)();
        x20 = 1;
    }
    char s;
    int32_t s_1;
    int64_t s_3;
    int64_t var_1b0;
    int32_t x0_10;
    if ((x0_1 == 0 || (x0_1 == 0xfffffffe && x23 == 0)))
    {
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x26_1 = data_364c8;
        int32_t var_208_1 = x25;
        int32_t var_204_1 = x24;
        int32_t x8_7;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x25_1;
        if (x26_1 == 0)
        {
            x26_1 = &data_364c8;
            x25_1 = &data_364c8;
        }
        else
        {
            x25_1 = &data_364c8;
            while (true)
            {
                x8_7 = *(x26_1 + 0x20);
                if (x8_7 > x19)
                {
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x8_8 = *x26_1;
                    if (x8_8 == 0)
                    {
                        break;
                    }
                    x25_1 = x26_1;
                    x26_1 = x8_8;
                }
                else
                {
                    if (x8_7 >= x19)
                    {
                        break;
                    }
                    x25_1 = (x26_1 + 8);
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x8_9 = *x25_1;
                    if (x8_9 == 0)
                    {
                        break;
                    }
                    x26_1 = x8_9;
                }
            }
        }
        if (((x26_1 == 0 || ((x26_1 != 0 && x8_7 <= x19) && x8_7 >= x19)) && *x25_1 == 0))
        {
        label_1f968:
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_17 = operator new(0x30);
            *(x0_17 + 0x20) = x19;
            *(x0_17 + 0x28) = 0;
            *x0_17 = 0;
            *(x0_17 + 8) = 0;
            *(x0_17 + 0x10) = x26_1;
            *x25_1 = x0_17;
            int64_t x9_3 = **&data_364c0;
            std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_2;
            if (x9_3 == 0)
            {
                x1_2 = x0_17;
            }
            else
            {
                data_364c0 = x9_3;
                x1_2 = *x25_1;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364c8, x1_2);
            data_364d0 = (data_364d0 + 1);
        }
        if ((x26_1 != 0 && !((x8_7 <= x19 && x8_7 >= x19))))
        {
            x25_1 = x26_1;
            if (*x25_1 == 0)
            {
                goto label_1f968;
            }
        }
        s_3 = 0;
        var_1b0 = 0;
        s_3 = 0x10;
        void* var_1a8_1 = nullptr;
        __builtin_strncpy(&*s_3[1], "FileDesc", 9);
        int64_t* x0_19 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&data_36490, &s_1);
        int64_t* x25_3 = *x0_19;
        if (x25_3 == 0)
        {
            int64_t* x0_20;
            int128_t v0_1;
            x0_20 = operator new(0x50);
            v0_1 = s_3;
            x0_20[6] = var_1a8_1;
            int64_t x8_19 = s_1;
            *(x0_20 + 0x20) = v0_1;
            x0_20[8] = 0;
            __builtin_memset(&s_3, 0, 0x18);
            x0_20[9] = 0;
            *x0_20 = 0;
            x0_20[1] = 0;
            x0_20[2] = x8_19;
            x0_20[7] = &x0_20[8];
            *x0_19 = x0_20;
            x25_3 = x0_20;
            int64_t x9_7 = **&data_36490;
            int64_t* x1_4;
            if (x9_7 == 0)
            {
                x1_4 = x25_3;
            }
            else
            {
                data_36490 = x9_7;
                x1_4 = *x0_19;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_36498, x1_4);
            data_364a0 = (data_364a0 + 1);
        }
        __builtin_memset(&s_1, 0, 0x18);
        __builtin_strcpy(&s_1, "\ndescf");
        int64_t* x0_23 = std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(&x25_3[7], &s);
        void* var_1d0_2;
        if (*x0_23 == 0)
        {
            int64_t* x0_24;
            int128_t v0_2;
            x0_24 = operator new(0x40);
            v0_2 = s_1;
            int64_t x9_8 = s;
            __builtin_memset(&s_1, 0, 0x18);
            *x0_24 = 0;
            x0_24[1] = 0;
            *(x0_24 + 0x20) = v0_2;
            x0_24[6] = var_1d0_2;
            x0_24[7] = 0;
            x0_24[2] = x9_8;
            *x0_23 = x0_24;
            int64_t x8_24 = *x25_3[7];
            int64_t* x1_6;
            if (x8_24 == 0)
            {
                x1_6 = x0_24;
            }
            else
            {
                x25_3[7] = x8_24;
                x1_6 = *x0_23;
            }
            std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(x25_3[8], x1_6);
            x25_3[9] = (x25_3[9] + 1);
        }
        int64_t* var_1c0;
        *(*var_1c0 + 0x368)();
        if ((s_1 & 1) != 0)
        {
            operator delete(var_1d0_2);
        }
        if ((s_3 & 1) != 0)
        {
            operator delete(var_1a8_1);
        }
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x27_2 = data_364e0;
        data_36508;
        int32_t x8_31;
        int32_t x20_3;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x26_4;
        if (x27_2 == 0)
        {
            x20_3 = x20;
            x27_2 = &data_364e0;
            x26_4 = &data_364e0;
        }
        else
        {
            x20_3 = x20;
            x26_4 = &data_364e0;
            while (true)
            {
                x8_31 = *(x27_2 + 0x20);
                if (x8_31 > x19)
                {
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x8_32 = *x27_2;
                    if (x8_32 == 0)
                    {
                        break;
                    }
                    x26_4 = x27_2;
                    x27_2 = x8_32;
                }
                else
                {
                    if (x8_31 >= x19)
                    {
                        break;
                    }
                    x26_4 = (x27_2 + 8);
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x8_33 = *x26_4;
                    if (x8_33 == 0)
                    {
                        break;
                    }
                    x27_2 = x8_33;
                }
            }
        }
        int64_t* var_200_1;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x24_2;
        if ((x27_2 == 0 || ((x27_2 != 0 && x8_31 <= x19) && x8_31 >= x19)))
        {
            x24_2 = *x26_4;
            if (x24_2 == 0)
            {
            label_1fc18:
                var_200_1 = x20_3;
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_29 = operator new(0x30);
                *(x0_29 + 0x20) = x19;
                *(x0_29 + 0x28) = 0;
                *x0_29 = 0;
                *(x0_29 + 8) = 0;
                *(x0_29 + 0x10) = x27_2;
                *x26_4 = x0_29;
                x24_2 = x0_29;
                int64_t x9_10 = **&data_364d8;
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_8;
                if (x9_10 == 0)
                {
                    x1_8 = x24_2;
                }
                else
                {
                    data_364d8 = x9_10;
                    x1_8 = *x26_4;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364e0, x1_8);
                x20_3 = var_200_1;
                data_364e8 = (data_364e8 + 1);
            }
        }
        if ((x27_2 != 0 && !((x8_31 <= x19 && x8_31 >= x19))))
        {
            x26_4 = x27_2;
            x24_2 = *x26_4;
            if (x24_2 == 0)
            {
                goto label_1fc18;
            }
        }
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x27_3 = data_364c8;
        *(x24_2 + 0x28);
        int32_t x8_36;
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>** x26_6;
        if (x27_3 == 0)
        {
            x27_3 = &data_364c8;
            x26_6 = &data_364c8;
        }
        else
        {
            x26_6 = &data_364c8;
            while (true)
            {
                x8_36 = *(x27_3 + 0x20);
                if (x8_36 > x19)
                {
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x8_37 = *x27_3;
                    if (x8_37 == 0)
                    {
                        break;
                    }
                    x26_6 = x27_3;
                    x27_3 = x8_37;
                }
                else
                {
                    if (x8_36 >= x19)
                    {
                        break;
                    }
                    x26_6 = (x27_3 + 8);
                    std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x8_38 = *x26_6;
                    if (x8_38 == 0)
                    {
                        break;
                    }
                    x27_3 = x8_38;
                }
            }
        }
        std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x25_4;
        if ((x27_3 == 0 || ((x27_3 != 0 && x8_36 <= x19) && x8_36 >= x19)))
        {
            x25_4 = *x26_6;
            if (x25_4 == 0)
            {
            label_1fcec:
                var_200_1 = x20_3;
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x0_31 = operator new(0x30);
                *(x0_31 + 0x20) = x19;
                *(x0_31 + 0x28) = 0;
                *x0_31 = 0;
                *(x0_31 + 8) = 0;
                *(x0_31 + 0x10) = x27_3;
                *x26_6 = x0_31;
                x25_4 = x0_31;
                int64_t x9_12 = **&data_364c0;
                std::__ndk1::__tree_node<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, rgbd::FrameTime>, void*>* x1_9;
                if (x9_12 == 0)
                {
                    x1_9 = x25_4;
                }
                else
                {
                    data_364c0 = x9_12;
                    x1_9 = *x26_6;
                }
                std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(data_364c8, x1_9);
                x20_3 = var_200_1;
                data_364d0 = (data_364d0 + 1);
            }
        }
        if ((x27_3 != 0 && !((x8_36 <= x19 && x8_36 >= x19))))
        {
            x26_6 = x27_3;
            x25_4 = *x26_6;
            if (x25_4 == 0)
            {
                goto label_1fcec;
            }
        }
        *(x25_4 + 0x28);
        _JNIEnv::CallVoidMethod();
        if (x20_3 != 0)
        {
            *(**&data_36500 + 0x28)();
        }
        pthread_self();
        x0_10 = pthread_setname_np();
    }
    if (((x0_1 != 0xfffffffe && x0_1 != 0) || (x0_1 == 0xfffffffe && x23 != 0)))
    {
        char* x20_1;
        if ((*data_36370 & 1) == 0)
        {
            x20_1 = &*(data_36370 + 1);
        }
        else
        {
            x20_1 = *(data_3637a + 6);
        }
        s_1 = data_36368;
        int64_t s_2;
        __builtin_memset(&s_2, 0, 0x18);
        size_t x0_5 = strlen(x20_1);
        void* var_1c8;
        if (x0_5 < -0x10)
        {
            int64_t x19_3 = std::__ndk1::__basic_string_common<true>::__throw_length_error();
            if (((s & 1) == 0 && (s_2 & 1) == 0))
            {
            label_1fe74:
                _Unwind_Resume(x19_3);
            }
            if ((s & 1) != 0)
            {
                void* var_1e8;
                operator delete(var_1e8);
                if ((s_2 & 1) == 0)
                {
                    goto label_1fe74;
                }
            }
            if ((((s & 1) == 0 && (s_2 & 1) != 0) || (s & 1) != 0))
            {
                operator delete(var_1c8);
                x19_3 = _Unwind_Resume(x19_3);
                void* var_1d0;
                if ((s_1 & 1) != 0)
                {
                    operator delete(var_1d0);
                }
                if ((s_3 & 1) == 0)
                {
                    goto label_1fe74;
                }
            }
            void* var_1a8;
            operator delete(var_1a8);
            int64_t x0_44;
            void* x1_11;
            x0_44 = _Unwind_Resume(x19_3);
            int64_t x0_45;
            if (*(x1_11 + 8) == "ZN12_GLOBAL__N_118setDycRGBDCall…")
            {
                x0_45 = (x0_44 + 8);
            }
            else
            {
                x0_45 = 0;
            }
            return x0_45;
        }
        void* x21_1;
        if (x0_5 >= 0x17)
        {
            uint64_t x22_1 = ((x0_5 + 0x10) & 0xfffffffffffffff0);
            void* x0_7 = operator new(x22_1);
            x21_1 = x0_7;
            size_t var_1d0_1 = x0_5;
            var_1c8 = x0_7;
            s_2 = (x22_1 | 1);
        }
        else
        {
            x21_1 = &*s_2[1];
            s_2 = (x0_5 << 1);
        }
        if ((x0_5 >= 0x17 || (x0_5 < 0x17 && x0_5 != 0)))
        {
            memcpy(x21_1, x20_1, x0_5);
        }
        *(x21_1 + x0_5) = 0;
        x0_10 = g3::logLevel(&s_1);
        int32_t x19_2;
        if ((x0_10 & 1) == 0)
        {
            x19_2 = 0;
            if ((s_2 & 1) != 0)
            {
            label_1f8e4:
                x0_10 = operator delete(var_1c8);
                if ((x19_2 & 1) != 0)
                {
                    goto label_1f914;
                }
            }
        }
        else
        {
            __builtin_memset(&s, 0, 0x18);
            s = 0x14;
            int64_t var_1f7;
            __builtin_strncpy(&var_1f7, "RGBDOrbbec", 0xb);
            x0_10 = g3::logTag(&s);
            x19_2 = x0_10;
            if ((s & 1) != 0)
            {
                void* var_1e8_1;
                x0_10 = operator delete(var_1e8_1);
                if ((s_2 & 1) != 0)
                {
                    goto label_1f8e4;
                }
            }
            else if ((s_2 & 1) != 0)
            {
                goto label_1f8e4;
            }
        }
        if (((((x0_10 & 1) == 0 && (s_2 & 1) == 0) || (x0_10 & 1) != 0) && (x19_2 & 1) != 0))
        {
        label_1f914:
            LogCapture::LogCapture(&s_3, "RGBDOrbbec", &data_36368, &data_20e80[0x1a], &nullptr->ident.version);
            std::__ndk1::basic_ostream<char, std::__ndk1::char_traits<char> >::operator<<(std::__ndk1::__put_character_sequence<char, std::__ndk1::char_traits<char> >(&var_1b0, "get jni env failed when get expo…", 0x25));
            x0_10 = LogCapture::~LogCapture();
        }
    }
    if (*(x28 + 0x28) != x8)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0_10;
}

int64_t sub_1fe24(int64_t arg1, char arg2, char arg3, void* arg4, void* arg5, char arg6, void* arg7)
{
    LogCapture::~LogCapture();
    int64_t x19 = _Unwind_Resume(arg1);
    if ((arg3 & 1) != 0)
    {
        operator delete(arg5);
        x19 = _Unwind_Resume(x19);
        if ((arg2 & 1) != 0)
        {
            operator delete(arg4);
        }
    }
    if (((arg3 & 1) == 0 || ((arg3 & 1) != 0 && (arg6 & 1) == 0)))
    {
        _Unwind_Resume(x19);
    }
    operator delete(arg7);
    int64_t x0_9;
    void* x1;
    x0_9 = _Unwind_Resume(x19);
    int64_t x0_10;
    if (*(x1 + 8) == "ZN12_GLOBAL__N_118setDycRGBDCall…")
    {
        x0_10 = (x0_9 + 8);
    }
    else
    {
        x0_10 = 0;
    }
    return x0_10;
}

int64_t sub_1fea4() __pure
{
    return &data_356a8;
}

int64_t _JNIEnv::CallVoidMethod(int64_t* arg1, int128_t arg2 @ v0, int128_t arg3 @ v1, int128_t arg4 @ v2, int128_t arg5 @ v3, int128_t arg6 @ v4, int128_t arg7 @ v5, int128_t arg8 @ v6, int128_t arg9 @ v7)
{
    int128_t var_c0 = arg8;
    int128_t var_b0 = arg9;
    int128_t var_e0 = arg6;
    int128_t var_d0 = arg7;
    int128_t var_100 = arg4;
    int128_t var_f0 = arg5;
    int128_t var_120 = arg2;
    int128_t var_110 = arg3;
    int64_t x6;
    int64_t var_80 = x6;
    int64_t x7;
    int64_t var_78 = x7;
    int64_t x4;
    int64_t var_90 = x4;
    int64_t x5;
    int64_t var_88 = x5;
    int64_t x3;
    int64_t var_98 = x3;
    void tpidr_el0;
    uint64_t x19 = _ReadStatusReg(tpidr_el0);
    int64_t x11 = *(x19 + 0x28);
    int64_t var_30 = -0x7f00000028;
    int128_t var_70;
    int128_t* var_40 = &var_70;
    void var_a0;
    arg2 = &var_a0;
    int64_t x8_1 = *(*arg1 + 0x1f0);
    var_70 = &arg_0;
    int128_t var_60 = arg2;
    int64_t x0 = x8_1(arg2);
    if (*(x19 + 0x28) != x11)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

void std::__ndk1::__tree_balance_after_insert<std::__ndk1::__tree_node_base<void*>*>(int64_t arg1, int64_t* arg2)
{
    char x8;
    if (arg2 == arg1)
    {
        x8 = 1;
    }
    else
    {
        x8 = 0;
    }
    arg2[3] = x8;
    if (arg2 != arg1)
    {
        int64_t* x8_2;
        do
        {
            int64_t* x9_1 = arg2[2];
            void* x10_2 = &x9_1[3];
            if (*x10_2 != 0)
            {
                break;
            }
            x8_2 = x9_1[2];
            void* x12_1 = *x8_2;
            char* x12_2;
            if (x12_1 == x9_1)
            {
                void* x12_3 = x8_2[1];
                if (x12_3 != 0)
                {
                    x12_2 = (x12_3 + 0x18);
                }
                if ((x12_3 == 0 || (x12_3 != 0 && *x12_2 != 0)))
                {
                    if (*x9_1 != arg2)
                    {
                        int64_t** x10_9 = x9_1[1];
                        int64_t* x11_4 = *x10_9;
                        x9_1[1] = x11_4;
                        if (x11_4 != 0)
                        {
                            x11_4[2] = x9_1;
                            x8_2 = x9_1[2];
                        }
                        x10_9[2] = x8_2;
                        int64_t*** x8_4 = x9_1[2];
                        int64_t x11_6;
                        if (*x8_4 == x9_1)
                        {
                            x11_6 = 0;
                        }
                        else
                        {
                            x11_6 = 8;
                        }
                        *(x8_4 + x11_6) = x10_9;
                        *x10_9 = x9_1;
                        x9_1[2] = x10_9;
                        x8_2 = x10_9[2];
                        x10_2 = &x10_9[3];
                    }
                    *x10_2 = 1;
                    void* x9_4 = *x8_2;
                    x8_2[3] = 0;
                    void* x10_10 = *(x9_4 + 8);
                    *x8_2 = x10_10;
                    if (x10_10 != 0)
                    {
                        *(x10_10 + 0x10) = x8_2;
                    }
                    *(x9_4 + 0x10) = x8_2[2];
                    void** x10_12 = x8_2[2];
                    int64_t x11_8;
                    if (*x10_12 == x8_2)
                    {
                        x11_8 = 0;
                    }
                    else
                    {
                        x11_8 = 8;
                    }
                    *(x10_12 + x11_8) = x9_4;
                    *(x9_4 + 8) = x8_2;
                    x8_2[2] = x9_4;
                    return;
                }
            }
            else
            {
                if (x12_1 != 0)
                {
                    x12_2 = (x12_1 + 0x18);
                }
                if ((x12_1 == 0 || (x12_1 != 0 && *x12_2 != 0)))
                {
                    if (*x9_1 == arg2)
                    {
                        void* x10_3 = arg2[1];
                        *x9_1 = x10_3;
                        if (x10_3 != 0)
                        {
                            *(x10_3 + 0x10) = x9_1;
                            x8_2 = x9_1[2];
                        }
                        arg2[2] = x8_2;
                        int64_t* x8_3 = x9_1[2];
                        int64_t x10_5;
                        if (*x8_3 == x9_1)
                        {
                            x10_5 = 0;
                        }
                        else
                        {
                            x10_5 = 8;
                        }
                        *(x8_3 + x10_5) = arg2;
                        arg2[1] = x9_1;
                        x9_1[2] = arg2;
                        x8_2 = arg2[2];
                        x10_2 = &arg2[3];
                    }
                    *x10_2 = 1;
                    int64_t** x9_3 = x8_2[1];
                    x8_2[3] = 0;
                    int64_t* x10_6 = *x9_3;
                    x8_2[1] = x10_6;
                    if (x10_6 != 0)
                    {
                        x10_6[2] = x8_2;
                    }
                    x9_3[2] = x8_2[2];
                    int64_t* x10_8 = x8_2[2];
                    int64_t x11_2;
                    if (*x10_8 == x8_2)
                    {
                        x11_2 = 0;
                    }
                    else
                    {
                        x11_2 = 8;
                    }
                    *(x10_8 + x11_2) = x9_3;
                    *x9_3 = x8_2;
                    x8_2[2] = x9_3;
                    return;
                }
            }
            char x9_2;
            if (x8_2 == arg1)
            {
                x9_2 = 1;
            }
            else
            {
                x9_2 = 0;
            }
            arg2 = x8_2;
            *x10_2 = 1;
            x8_2[3] = x9_2;
            *x12_2 = 1;
        } while (x8_2 != arg1);
    }
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > >, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::map<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, std::__ndk1::allocator<std::__ndk1::pair<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > const, _jfieldID*> > > > > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, void** arg2, char* arg3)
{
    int64_t* x20_1 = (arg1 + 8);
    int64_t* x24 = *x20_1;
    if (x24 == 0)
    {
        *arg2 = x20_1;
    }
    else
    {
        uint64_t x8_1 = *arg3;
        x20_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x25_1;
        if (temp0_1 == 0)
        {
            x25_1 = (x8_1 >> 1);
        }
        else
        {
            x25_1 = *(arg3 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg3 + 0x10);
        }
        else
        {
            x21_1 = &arg3[1];
        }
        while (true)
        {
            uint64_t x28_1 = x24[4];
            uint64_t x26_1;
            if ((x28_1 & 1) == 0)
            {
                x26_1 = (x28_1 >> 1);
            }
            else
            {
                x26_1 = x24[5];
            }
            uint64_t x22_1;
            if (x26_1 < x25_1)
            {
                x22_1 = x26_1;
            }
            else
            {
                x22_1 = x25_1;
            }
            int32_t x0_1;
            void* x23_1;
            if (x22_1 != 0)
            {
                if ((x28_1 & 1) != 0)
                {
                    x23_1 = x24[6];
                }
                else
                {
                    x23_1 = (x24 + 0x21);
                }
                x0_1 = memcmp(x21_1, x23_1, x22_1);
            }
            int64_t* x8_2;
            if ((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)))
            {
                if (x25_1 < x26_1)
                {
                label_20198:
                    x8_2 = *x24;
                    if (x8_2 == 0)
                    {
                        *arg2 = x24;
                        x20_1 = x24;
                        break;
                    }
                    x20_1 = x24;
                    goto label_20140;
                }
                if (x22_1 != 0)
                {
                    if ((x28_1 & 1) != 0)
                    {
                        x23_1 = x24[6];
                    }
                    else
                    {
                        x23_1 = (x24 + 0x21);
                    }
                    goto label_201c4;
                }
            }
            if ((x22_1 != 0 && x0_1 != 0))
            {
                if ((x0_1 & 0x80000000) != 0)
                {
                    goto label_20198;
                }
            label_201c4:
                int32_t x0_3 = memcmp(x23_1, x21_1, x22_1);
                if (x0_3 != 0)
                {
                    if ((x0_3 & 0x80000000) == 0)
                    {
                        goto label_201e8;
                    }
                    goto label_201e0;
                }
            }
            if ((((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)) && x25_1 >= x26_1) || (x22_1 != 0 && x0_1 != 0)))
            {
                if (x26_1 >= x25_1)
                {
                label_201e8:
                    *arg2 = x24;
                    break;
                }
            label_201e0:
                x20_1 = &x24[1];
                x8_2 = *x20_1;
                if (x8_2 == 0)
                {
                    goto label_201e8;
                }
            label_20140:
                x24 = x8_2;
            }
        }
    }
    return x20_1;
}

int64_t* std::__ndk1::__tree<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::__map_value_compare<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*>, std::__ndk1::less<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >, true>, std::__ndk1::allocator<std::__ndk1::__value_type<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> >, _jfieldID*> > >::__find_equal<std::__ndk1::basic_string<char, std::__ndk1::char_traits<char>, std::__ndk1::allocator<char> > >(void* arg1, void** arg2, char* arg3)
{
    int64_t* x20_1 = (arg1 + 8);
    int64_t* x24 = *x20_1;
    if (x24 == 0)
    {
        *arg2 = x20_1;
    }
    else
    {
        uint64_t x8_1 = *arg3;
        x20_1 = (arg1 + 8);
        int32_t temp0_1 = (x8_1 & 1);
        uint64_t x25_1;
        if (temp0_1 == 0)
        {
            x25_1 = (x8_1 >> 1);
        }
        else
        {
            x25_1 = *(arg3 + 8);
        }
        void* x21_1;
        if (temp0_1 != 0)
        {
            x21_1 = *(arg3 + 0x10);
        }
        else
        {
            x21_1 = &arg3[1];
        }
        while (true)
        {
            uint64_t x28_1 = x24[4];
            uint64_t x26_1;
            if ((x28_1 & 1) == 0)
            {
                x26_1 = (x28_1 >> 1);
            }
            else
            {
                x26_1 = x24[5];
            }
            uint64_t x22_1;
            if (x26_1 < x25_1)
            {
                x22_1 = x26_1;
            }
            else
            {
                x22_1 = x25_1;
            }
            int32_t x0_1;
            void* x23_1;
            if (x22_1 != 0)
            {
                if ((x28_1 & 1) != 0)
                {
                    x23_1 = x24[6];
                }
                else
                {
                    x23_1 = (x24 + 0x21);
                }
                x0_1 = memcmp(x21_1, x23_1, x22_1);
            }
            int64_t* x8_2;
            if ((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)))
            {
                if (x25_1 < x26_1)
                {
                label_202c4:
                    x8_2 = *x24;
                    if (x8_2 == 0)
                    {
                        *arg2 = x24;
                        x20_1 = x24;
                        break;
                    }
                    x20_1 = x24;
                    goto label_2026c;
                }
                if (x22_1 != 0)
                {
                    if ((x28_1 & 1) != 0)
                    {
                        x23_1 = x24[6];
                    }
                    else
                    {
                        x23_1 = (x24 + 0x21);
                    }
                    goto label_202f0;
                }
            }
            if ((x22_1 != 0 && x0_1 != 0))
            {
                if ((x0_1 & 0x80000000) != 0)
                {
                    goto label_202c4;
                }
            label_202f0:
                int32_t x0_3 = memcmp(x23_1, x21_1, x22_1);
                if (x0_3 != 0)
                {
                    if ((x0_3 & 0x80000000) == 0)
                    {
                        goto label_20314;
                    }
                    goto label_2030c;
                }
            }
            if ((((x22_1 == 0 || (x22_1 != 0 && x0_1 == 0)) && x25_1 >= x26_1) || (x22_1 != 0 && x0_1 != 0)))
            {
                if (x26_1 >= x25_1)
                {
                label_20314:
                    *arg2 = x24;
                    break;
                }
            label_2030c:
                x20_1 = &x24[1];
                x8_2 = *x20_1;
                if (x8_2 == 0)
                {
                    goto label_20314;
                }
            label_2026c:
                x24 = x8_2;
            }
        }
    }
    return x20_1;
}

int64_t _JNIEnv::NewObject(int64_t* arg1, int128_t arg2 @ v0, int128_t arg3 @ v1, int128_t arg4 @ v2, int128_t arg5 @ v3, int128_t arg6 @ v4, int128_t arg7 @ v5, int128_t arg8 @ v6, int128_t arg9 @ v7)
{
    int128_t var_c0 = arg8;
    int128_t var_b0 = arg9;
    int128_t var_e0 = arg6;
    int128_t var_d0 = arg7;
    int128_t var_100 = arg4;
    int128_t var_f0 = arg5;
    int128_t var_120 = arg2;
    int128_t var_110 = arg3;
    int64_t x6;
    int64_t var_80 = x6;
    int64_t x7;
    int64_t var_78 = x7;
    int64_t x4;
    int64_t var_90 = x4;
    int64_t x5;
    int64_t var_88 = x5;
    int64_t x3;
    int64_t var_98 = x3;
    void tpidr_el0;
    uint64_t x19 = _ReadStatusReg(tpidr_el0);
    int64_t x11 = *(x19 + 0x28);
    int64_t var_30 = -0x7f00000028;
    int128_t var_70;
    int128_t* var_40 = &var_70;
    void var_a0;
    arg2 = &var_a0;
    int64_t x8_1 = *(*arg1 + 0xe8);
    var_70 = &arg_0;
    int128_t var_60 = arg2;
    int64_t x0 = x8_1(arg2);
    if (*(x19 + 0x28) != x11)
    {
        __stack_chk_fail();
        /* no return */
    }
    return x0;
}

int64_t std::__ndk1::__shared_ptr_emplace<rgbd::RGBDOrbbec, std::__ndk1::allocator<rgbd::RGBDOrbbec> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<rgbd::RGBDOrbbec, std::__ndk1::allocator<rgbd::RGBDOrbbec> > + 0x10);
    rgbd::RGBDOrbbec::~RGBDOrbbec();
    /* tailcall */
    return std::__ndk1::__shared_weak_count::~__shared_weak_count();
}

int64_t std::__ndk1::__shared_ptr_emplace<rgbd::RGBDOrbbec, std::__ndk1::allocator<rgbd::RGBDOrbbec> >::~__shared_ptr_emplace(void** arg1)
{
    *arg1 = (_vtable_for_std::__ndk1::__shared_ptr_emplace<rgbd::RGBDOrbbec, std::__ndk1::allocator<rgbd::RGBDOrbbec> > + 0x10);
    rgbd::RGBDOrbbec::~RGBDOrbbec();
    std::__ndk1::__shared_weak_count::~__shared_weak_count();
    /* tailcall */
    return operator delete(arg1);
}

int64_t std::__ndk1::__shared_ptr_emplace<rgbd::RGBDOrbbec, std::__ndk1::allocator<rgbd::RGBDOrbbec> >::__on_zero_shared(void* arg1)
{
    /* jump -> **(arg1 + 0x18) */
}

int64_t std::__ndk1::__shared_ptr_emplace<rgbd::RGBDOrbbec, std::__ndk1::allocator<rgbd::RGBDOrbbec> >::__on_zero_shared_weak(void* arg1)
{
    /* tailcall */
    return operator delete(arg1);
}

uint64_t std::__ndk1::__next_prime(int64_t arg1)
{
    if (arg1 <= 0xd3)
    {
        void* const x8_1 = &data_21484;
        uint64_t i = 0x30;
        do
        {
            uint64_t i_2 = (i >> 1);
            void* x11_1 = (x8_1 + (i_2 << 2));
            uint64_t x12_1 = *x11_1;
            if (x12_1 < arg1)
            {
                i = (i + !(i_2));
            }
            else
            {
                i = i_2;
            }
            if (x12_1 < arg1)
            {
                x8_1 = (x11_1 + 4);
            }
        } while (i != 0);
        return *x8_1;
    }
    if (arg1 < -0x3a)
    {
        char* thrown_exception = __cxa_allocate_exception(0x10);
        sub_20bc4(thrown_exception);
        __cxa_throw(thrown_exception, _typeinfo_for_std::overflow_error, std::overflow_error::~overflow_error);
        /* no return */
    }
    uint64_t x9_2 = (arg1 / 0xd2);
    int64_t x13_2 = (x9_2 * 0xd2);
    int64_t x10_1 = (arg1 % 0xd2);
    uint64_t i_1 = 0x30;
    void* const x11_3 = &data_21544;
    do
    {
        uint64_t i_3 = (i_1 >> 1);
        void* x15_1 = (x11_3 + (i_3 << 2));
        uint64_t x16_1 = *x15_1;
        if (x10_1 > x16_1)
        {
            i_1 = (i_1 + !(i_3));
        }
        else
        {
            i_1 = i_3;
        }
        if (x10_1 > x16_1)
        {
            x11_3 = (x15_1 + 4);
        }
    } while (i_1 != 0);
    int64_t x11_5 = ((x11_3 - &data_21544) >> 2);
    while (true)
    {
        uint64_t x0 = (x13_2 + *(&data_21544 + (x11_5 << 2)));
        int64_t x13_4 = 5;
        while (true)
        {
            uint64_t x14_2 = *(&data_21484 + (x13_4 << 2));
            uint64_t x15_3 = (x0 / x14_2);
            if (x15_3 < x14_2)
            {
                return x0;
            }
            if (x0 == (x15_3 * x14_2))
            {
                break;
            }
            x13_4 = (x13_4 + 1);
            if (x13_4 >= 0x2f)
            {
                int64_t x13_5 = 0xd3;
                bool cond:3_1;
                do
                {
                    uint64_t x14_4 = (x0 / x13_5);
                    if (x14_4 < x13_5)
                    {
                        return x0;
                    }
                    if (x0 == (x14_4 * x13_5))
                    {
                        break;
                    }
                    uint64_t x15_4 = (x0 / (x13_5 + 0xa));
                    if (x15_4 < (x13_5 + 0xa))
                    {
                        return x0;
                    }
                    if (x0 == (x15_4 * (x13_5 + 0xa)))
                    {
                        break;
                    }
                    uint64_t x16_2 = (x0 / (x13_5 + 0xc));
                    if (x16_2 < (x13_5 + 0xc))
                    {
                        return x0;
                    }
                    if (x0 == (x16_2 * (x13_5 + 0xc)))
                    {
                        break;
                    }
                    uint64_t x16_3 = (x0 / (x13_5 + 0x10));
                    if (x16_3 < (x13_5 + 0x10))
                    {
                        return x0;
                    }
                    if (x0 == (x16_3 * (x13_5 + 0x10)))
                    {
                        break;
                    }
                    uint64_t x16_4 = (x0 / (x13_5 + 0x12));
                    if (x16_4 < (x13_5 + 0x12))
                    {
                        return x0;
                    }
                    if (x0 == (x16_4 * (x13_5 + 0x12)))
                    {
                        break;
                    }
                    uint64_t x16_5 = (x0 / (x13_5 + 0x16));
                    if (x16_5 < (x13_5 + 0x16))
                    {
                        return x0;
                    }
                    if (x0 == (x16_5 * (x13_5 + 0x16)))
                    {
                        break;
                    }
                    uint64_t x16_6 = (x0 / (x13_5 + 0x1c));
                    if (x16_6 < (x13_5 + 0x1c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_6 * (x13_5 + 0x1c)))
                    {
                        break;
                    }
                    uint64_t x16_7 = (x0 / (x13_5 + 0x1e));
                    if (x16_7 < (x13_5 + 0x1e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_7 * (x13_5 + 0x1e)))
                    {
                        break;
                    }
                    uint64_t x16_8 = (x0 / (x13_5 + 0x24));
                    if (x16_8 < (x13_5 + 0x24))
                    {
                        return x0;
                    }
                    if (x0 == (x16_8 * (x13_5 + 0x24)))
                    {
                        break;
                    }
                    uint64_t x16_9 = (x0 / (x13_5 + 0x28));
                    if (x16_9 < (x13_5 + 0x28))
                    {
                        return x0;
                    }
                    if (x0 == (x16_9 * (x13_5 + 0x28)))
                    {
                        break;
                    }
                    uint64_t x16_10 = (x0 / (x13_5 + 0x2a));
                    if (x16_10 < (x13_5 + 0x2a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_10 * (x13_5 + 0x2a)))
                    {
                        break;
                    }
                    uint64_t x16_11 = (x0 / (x13_5 + 0x2e));
                    if (x16_11 < (x13_5 + 0x2e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_11 * (x13_5 + 0x2e)))
                    {
                        break;
                    }
                    uint64_t x16_12 = (x0 / (x13_5 + 0x34));
                    if (x16_12 < (x13_5 + 0x34))
                    {
                        return x0;
                    }
                    if (x0 == (x16_12 * (x13_5 + 0x34)))
                    {
                        break;
                    }
                    uint64_t x16_13 = (x0 / (x13_5 + 0x3a));
                    if (x16_13 < (x13_5 + 0x3a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_13 * (x13_5 + 0x3a)))
                    {
                        break;
                    }
                    uint64_t x16_14 = (x0 / (x13_5 + 0x3c));
                    if (x16_14 < (x13_5 + 0x3c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_14 * (x13_5 + 0x3c)))
                    {
                        break;
                    }
                    uint64_t x16_15 = (x0 / (x13_5 + 0x42));
                    if (x16_15 < (x13_5 + 0x42))
                    {
                        return x0;
                    }
                    if (x0 == (x16_15 * (x13_5 + 0x42)))
                    {
                        break;
                    }
                    uint64_t x16_16 = (x0 / (x13_5 + 0x46));
                    if (x16_16 < (x13_5 + 0x46))
                    {
                        return x0;
                    }
                    if (x0 == (x16_16 * (x13_5 + 0x46)))
                    {
                        break;
                    }
                    uint64_t x16_17 = (x0 / (x13_5 + 0x48));
                    if (x16_17 < (x13_5 + 0x48))
                    {
                        return x0;
                    }
                    if (x0 == (x16_17 * (x13_5 + 0x48)))
                    {
                        break;
                    }
                    uint64_t x16_18 = (x0 / (x13_5 + 0x4e));
                    if (x16_18 < (x13_5 + 0x4e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_18 * (x13_5 + 0x4e)))
                    {
                        break;
                    }
                    uint64_t x16_19 = (x0 / (x13_5 + 0x52));
                    if (x16_19 < (x13_5 + 0x52))
                    {
                        return x0;
                    }
                    if (x0 == (x16_19 * (x13_5 + 0x52)))
                    {
                        break;
                    }
                    uint64_t x16_20 = (x0 / (x13_5 + 0x58));
                    if (x16_20 < (x13_5 + 0x58))
                    {
                        return x0;
                    }
                    if (x0 == (x16_20 * (x13_5 + 0x58)))
                    {
                        break;
                    }
                    uint64_t x16_21 = (x0 / (x13_5 + 0x60));
                    if (x16_21 < (x13_5 + 0x60))
                    {
                        return x0;
                    }
                    if (x0 == (x16_21 * (x13_5 + 0x60)))
                    {
                        break;
                    }
                    uint64_t x16_22 = (x0 / (x13_5 + 0x64));
                    if (x16_22 < (x13_5 + 0x64))
                    {
                        return x0;
                    }
                    if (x0 == (x16_22 * (x13_5 + 0x64)))
                    {
                        break;
                    }
                    uint64_t x16_23 = (x0 / (x13_5 + 0x66));
                    if (x16_23 < (x13_5 + 0x66))
                    {
                        return x0;
                    }
                    if (x0 == (x16_23 * (x13_5 + 0x66)))
                    {
                        break;
                    }
                    uint64_t x16_24 = (x0 / (x13_5 + 0x6a));
                    if (x16_24 < (x13_5 + 0x6a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_24 * (x13_5 + 0x6a)))
                    {
                        break;
                    }
                    uint64_t x16_25 = (x0 / (x13_5 + 0x6c));
                    if (x16_25 < (x13_5 + 0x6c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_25 * (x13_5 + 0x6c)))
                    {
                        break;
                    }
                    uint64_t x16_26 = (x0 / (x13_5 + 0x70));
                    if (x16_26 < (x13_5 + 0x70))
                    {
                        return x0;
                    }
                    if (x0 == (x16_26 * (x13_5 + 0x70)))
                    {
                        break;
                    }
                    uint64_t x16_27 = (x0 / (x13_5 + 0x78));
                    if (x16_27 < (x13_5 + 0x78))
                    {
                        return x0;
                    }
                    if (x0 == (x16_27 * (x13_5 + 0x78)))
                    {
                        break;
                    }
                    uint64_t x16_28 = (x0 / (x13_5 + 0x7e));
                    if (x16_28 < (x13_5 + 0x7e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_28 * (x13_5 + 0x7e)))
                    {
                        break;
                    }
                    uint64_t x16_29 = (x0 / (x13_5 + 0x82));
                    if (x16_29 < (x13_5 + 0x82))
                    {
                        return x0;
                    }
                    if (x0 == (x16_29 * (x13_5 + 0x82)))
                    {
                        break;
                    }
                    uint64_t x16_30 = (x0 / (x13_5 + 0x88));
                    if (x16_30 < (x13_5 + 0x88))
                    {
                        return x0;
                    }
                    if (x0 == (x16_30 * (x13_5 + 0x88)))
                    {
                        break;
                    }
                    uint64_t x16_31 = (x0 / (x13_5 + 0x8a));
                    if (x16_31 < (x13_5 + 0x8a))
                    {
                        return x0;
                    }
                    if (x0 == (x16_31 * (x13_5 + 0x8a)))
                    {
                        break;
                    }
                    uint64_t x16_32 = (x0 / (x13_5 + 0x8e));
                    if (x16_32 < (x13_5 + 0x8e))
                    {
                        return x0;
                    }
                    if (x0 == (x16_32 * (x13_5 + 0x8e)))
                    {
                        break;
                    }
                    uint64_t x16_33 = (x0 / (x13_5 + 0x94));
                    if (x16_33 < (x13_5 + 0x94))
                    {
                        return x0;
                    }
                    if (x0 == (x16_33 * (x13_5 + 0x94)))
                    {
                        break;
                    }
                    uint64_t x16_34 = (x0 / (x13_5 + 0x96));
                    if (x16_34 < (x13_5 + 0x96))
                    {
                        return x0;
                    }
                    if (x0 == (x16_34 * (x13_5 + 0x96)))
                    {
                        break;
                    }
                    uint64_t x16_35 = (x0 / (x13_5 + 0x9c));
                    if (x16_35 < (x13_5 + 0x9c))
                    {
                        return x0;
                    }
                    if (x0 == (x16_35 * (x13_5 + 0x9c)))
                    {
                        break;
                    }
                    uint64_t x16_36 = (x0 / (x13_5 + 0xa2));
                    if (x16_36 < (x13_5 + 0xa2))
                    {
                        return x0;
                    }
                    if (x0 == (x16_36 * (x13_5 + 0xa2)))
                    {
                        break;
                    }
                    uint64_t x16_37 = (x0 / (x13_5 + 0xa6));
                    if (x16_37 < (x13_5 + 0xa6))
                    {
                        return x0;
                    }
                    if (x0 == (x16_37 * (x13_5 + 0xa6)))
                    {
                        break;
                    }
                    uint64_t x16_38 = (x0 / (x13_5 + 0xa8));
                    if (x16_38 < (x13_5 + 0xa8))
                    {
                        return x0;
                    }
                    if (x0 == (x16_38 * (x13_5 + 0xa8)))
                    {
                        break;
                    }
                    uint64_t x16_39 = (x0 / (x13_5 + 0xac));
                    if (x16_39 < (x13_5 + 0xac))
                    {
                        return x0;
                    }
                    if (x0 == (x16_39 * (x13_5 + 0xac)))
                    {
                        break;
                    }
                    uint64_t x16_40 = (x0 / (x13_5 + 0xb2));
                    if (x16_40 < (x13_5 + 0xb2))
                    {
                        return x0;
                    }
                    if (x0 == (x16_40 * (x13_5 + 0xb2)))
                    {
                        break;
                    }
                    uint64_t x16_41 = (x0 / (x13_5 + 0xb4));
                    if (x16_41 < (x13_5 + 0xb4))
                    {
                        return x0;
                    }
                    if (x0 == (x16_41 * (x13_5 + 0xb4)))
                    {
                        break;
                    }
                    uint64_t x16_42 = (x0 / (x13_5 + 0xba));
                    if (x16_42 < (x13_5 + 0xba))
                    {
                        return x0;
                    }
                    if (x0 == (x16_42 * (x13_5 + 0xba)))
                    {
                        break;
                    }
                    uint64_t x16_43 = (x0 / (x13_5 + 0xbe));
                    if (x16_43 < (x13_5 + 0xbe))
                    {
                        return x0;
                    }
                    if (x0 == (x16_43 * (x13_5 + 0xbe)))
                    {
                        break;
                    }
                    uint64_t x16_44 = (x0 / (x13_5 + 0xc0));
                    if (x16_44 < (x13_5 + 0xc0))
                    {
                        return x0;
                    }
                    if (x0 == (x16_44 * (x13_5 + 0xc0)))
                    {
                        break;
                    }
                    uint64_t x16_45 = (x0 / (x13_5 + 0xc4));
                    if (x16_45 < (x13_5 + 0xc4))
                    {
                        return x0;
                    }
                    if (x0 == (x16_45 * (x13_5 + 0xc4)))
                    {
                        break;
                    }
                    uint64_t x16_46 = (x0 / (x13_5 + 0xc6));
                    if (x16_46 < (x13_5 + 0xc6))
                    {
                        return x0;
                    }
                    if (x0 == (x16_46 * (x13_5 + 0xc6)))
                    {
                        break;
                    }
                    uint64_t x16_47 = (x0 / (x13_5 + 0xd0));
                    if (x16_47 < (x13_5 + 0xd0))
                    {
                        return x0;
                    }
                    cond:3_1 = x0 != (x16_47 * (x13_5 + 0xd0));
                    x13_5 = (x13_5 + 0xd2);
                } while (cond:3_1);
                break;
            }
        }
        if (x11_5 == 0x2f)
        {
            x9_2 = (x9_2 + 1);
        }
        if (x11_5 == 0x2f)
        {
            x11_5 = 0;
        }
        else
        {
            x11_5 = (x11_5 + 1);
        }
        x13_2 = (x9_2 * 0xd2);
    }
}

int64_t sub_20bc4(char* arg1)
{
    int64_t x0 = std::runtime_error::runtime_error(arg1);
    *arg1 = (_vtable_for_std::overflow_error + 0x10);
    return x0;
}

